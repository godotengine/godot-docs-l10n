# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: https://github.com/godotengine/godot-docs-l10n\n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/index.rst:58
msgid "General"
msgstr ""

#: ../../docs/index.rst:66
#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:35
#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:44
#: ../../docs/tutorials/vr/openxr/index.rst:16
#: ../../docs/community/contributing/index.rst:15
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:15
msgid "Getting started"
msgstr ""

#: ../../docs/index.rst:78
msgid "Tutorials"
msgstr ""

#: ../../docs/index.rst:108
msgid "Development"
msgstr ""

#: ../../docs/index.rst:119
msgid "Community"
msgstr ""

#: ../../docs/index.rst:130
msgid "Class reference"
msgstr ""

#: ../../docs/index.rst:2
msgid "Godot Docs – *3.5* branch"
msgstr ""

#: ../../docs/index.rst:6
msgid ""
"Godot's documentation is available in various languages and versions. Expand "
"the \"Read the Docs\" panel at the bottom of the sidebar to see the list."
msgstr ""

#: ../../docs/index.rst:12
msgid ""
"This documentation is translated from the `original English one <https://"
"docs.godotengine.org/en/latest>`_ by community members on `Weblate <https://"
"hosted.weblate.org/projects/godot-engine/godot-docs>`_."
msgstr ""

#: ../../docs/index.rst:16
msgid ""
"Depending on the translation effort's completion level, you may find "
"paragraphs or whole pages which are still in English. You can help the "
"community by providing new translations or reviewing existing ones on "
"Weblate."
msgstr ""

#: ../../docs/index.rst:21
msgid ""
"For the time being, localized translations are only available for the "
"\"latest\" (development) branch, but should be suitable to learn how to use "
"stable Godot releases nevertheless."
msgstr ""

#: ../../docs/index.rst:25
msgid ""
"Welcome to the official documentation of `Godot Engine <https://godotengine."
"org>`__, the free and open source community-driven 2D and 3D game engine! If "
"you are new to this documentation, we recommend that you read the :ref:"
"`introduction page <doc_about_intro>` to get an overview of what this "
"documentation has to offer."
msgstr ""

#: ../../docs/index.rst:31
msgid ""
"The table of contents below and in the sidebar should let you easily access "
"the documentation for your topic of interest. You can also use the search "
"function in the top left corner."
msgstr ""

#: ../../docs/index.rst:35
msgid ""
"You can also `download an HTML copy <https://nightly.link/godotengine/godot-"
"docs/workflows/build_offline_docs/master/godot-docs-html-stable.zip>`__ for "
"offline reading (updated every Monday). Extract the ZIP archive then open "
"the top-level ``index.html`` in a web browser."
msgstr ""

#: ../../docs/index.rst:39
msgid ""
"Godot Engine is an open source project developed by a community of "
"volunteers. The documentation team can always use your feedback and help to "
"improve the tutorials and class reference. If you don't understand "
"something, or cannot find what you are looking for in the docs, help us make "
"the documentation better by letting us know!"
msgstr ""

#: ../../docs/index.rst:46
msgid ""
"Submit an issue or pull request on the `GitHub repository <https://github."
"com/godotengine/godot-docs/issues>`_, help us `translate the documentation "
"<https://hosted.weblate.org/engage/godot-engine/>`_ into your language, or "
"talk to us on the ``#documentation`` channel on the `Godot Contributors Chat "
"<https://chat.godotengine.org/>`_!"
msgstr ""

#: ../../docs/index.rst:55
msgid "weblate_widget"
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""

#: ../../docs/index.rst:56
msgid ""
"The main documentation for the site is organized into the following sections:"
msgstr ""

#: ../../docs/about/index.rst:2
#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:7
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:7
#: ../../docs/development/cpp/variant_class.rst:7
msgid "About"
msgstr ""

#: ../../docs/about/introduction.rst:4
#: ../../docs/getting_started/introduction/index.rst:6
#: ../../docs/tutorials/2d/2d_transforms.rst:7
#: ../../docs/tutorials/2d/using_tilemaps.rst:7
#: ../../docs/tutorials/2d/2d_movement.rst:7
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:7
#: ../../docs/tutorials/2d/2d_meshes.rst:7
#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:7
#: ../../docs/tutorials/3d/using_transforms.rst:7
#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:13
#: ../../docs/tutorials/3d/spatial_material.rst:7
#: ../../docs/tutorials/3d/lights_and_shadows.rst:7
#: ../../docs/tutorials/3d/reflection_probes.rst:7
#: ../../docs/tutorials/3d/gi_probes.rst:7
#: ../../docs/tutorials/3d/baked_lightmaps.rst:7
#: ../../docs/tutorials/3d/high_dynamic_range.rst:7
#: ../../docs/tutorials/3d/using_gridmaps.rst:7
#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:7
#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:9
#: ../../docs/tutorials/3d/3d_text.rst:7
#: ../../docs/tutorials/animation/2d_skeletons.rst:7
#: ../../docs/tutorials/animation/animation_tree.rst:7
#: ../../docs/tutorials/audio/audio_buses.rst:7
#: ../../docs/tutorials/audio/audio_streams.rst:7
#: ../../docs/tutorials/audio/sync_with_audio.rst:7
#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:4
#: ../../docs/tutorials/best_practices/project_organization.rst:7
#: ../../docs/tutorials/best_practices/version_control_systems.rst:7
#: ../../docs/tutorials/editor/managing_editor_features.rst:7
#: ../../docs/tutorials/export/feature_tags.rst:7
#: ../../docs/tutorials/i18n/internationalizing_games.rst:7
#: ../../docs/tutorials/inputs/input_examples.rst:7
#: ../../docs/tutorials/io/saving_games.rst:7
#: ../../docs/tutorials/io/binary_serialization_api.rst:7
#: ../../docs/tutorials/math/vector_math.rst:7
#: ../../docs/tutorials/math/matrices_and_transforms.rst:7
#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:7
#: ../../docs/tutorials/networking/ssl_certificates.rst:7
#: ../../docs/tutorials/performance/index.rst:7
#: ../../docs/tutorials/performance/general_optimization.rst:7
#: ../../docs/tutorials/performance/gpu_optimization.rst:7
#: ../../docs/tutorials/performance/batching.rst:7
#: ../../docs/tutorials/physics/using_area_2d.rst:7
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:7
#: ../../docs/tutorials/physics/ray-casting.rst:7
#: ../../docs/tutorials/physics/ragdoll_system.rst:7
#: ../../docs/tutorials/physics/kinematic_character_2d.rst:7
#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:4
#: ../../docs/tutorials/platform/android/android_plugin.rst:7
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:11
#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:7
#: ../../docs/tutorials/rendering/viewports.rst:7
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:7
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:7
#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:7
#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:7
#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:7
#: ../../docs/tutorials/scripting/pausing_games.rst:7
#: ../../docs/tutorials/scripting/filesystem.rst:7
#: ../../docs/tutorials/scripting/singletons_autoload.rst:7
#: ../../docs/tutorials/scripting/scene_tree.rst:7
#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:7
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:7
#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:7
#: ../../docs/tutorials/shaders/shader_materials.rst:7
#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:7
#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:7
#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:7
#: ../../docs/tutorials/shaders/custom_postprocessing.rst:7
#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:7
#: ../../docs/tutorials/vr/openxr/index.rst:9
#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:7
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:7
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:7
#: ../../docs/development/cpp/custom_godot_servers.rst:7
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:7
#: ../../docs/development/cpp/custom_audiostreams.rst:7
#: ../../docs/development/editor/editor_style_guide.rst:7
#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:7
#: ../../docs/community/asset_library/submitting_to_assetlib.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/about/introduction.rst:11
msgid ""
"Welcome to the official documentation of Godot Engine, the free and open "
"source community-driven 2D and 3D game engine! Behind this mouthful, you "
"will find a powerful yet user-friendly tool that you can use to develop any "
"kind of game, for any platform and with no usage restriction whatsoever."
msgstr ""

#: ../../docs/about/introduction.rst:16
msgid ""
"This page gives a broad presentation of the engine and of the contents of "
"this documentation, so that you know where to start if you are a beginner or "
"where to look if you need info on a specific feature."
msgstr ""

#: ../../docs/about/introduction.rst:21
msgid "Before you start"
msgstr ""

#: ../../docs/about/introduction.rst:23
msgid ""
"The :ref:`Tutorials and resources <doc_community_tutorials>` page lists "
"video tutorials contributed by the community. If you prefer video to text, "
"those may be worth a look."
msgstr ""

#: ../../docs/about/introduction.rst:27
msgid ""
"In case you have trouble with one of the tutorials or your project, you can "
"find help on the various :ref:`Community channels <doc_community_channels>`, "
"especially the Godot Discord community, Q&A, and IRC."
msgstr ""

#: ../../docs/about/introduction.rst:32
msgid "About Godot Engine"
msgstr ""

#: ../../docs/about/introduction.rst:34
msgid ""
"A game engine is a complex tool, and it is therefore difficult to present "
"Godot in a few words. Here's a quick synopsis, which you are free to reuse "
"if you need a quick writeup about Godot Engine."
msgstr ""

#: ../../docs/about/introduction.rst:38
msgid ""
"Godot Engine is a feature-packed, cross-platform game engine to create 2D "
"and 3D games from a unified interface. It provides a comprehensive set of "
"common tools, so users can focus on making games without having to reinvent "
"the wheel. Games can be exported in one click to a number of platforms, "
"including the major desktop platforms (Linux, macOS, Windows) as well as "
"mobile (Android, iOS) and web-based (HTML5) platforms."
msgstr ""

#: ../../docs/about/introduction.rst:45
msgid ""
"Godot is completely free and open source under the permissive MIT license. "
"No strings attached, no royalties, nothing. Users' games are theirs, down to "
"the last line of engine code. Godot's development is fully independent and "
"community-driven, empowering users to help shape their engine to match their "
"expectations. It is supported by the `Software Freedom Conservancy <https://"
"sfconservancy.org>`_ not-for-profit."
msgstr ""

#: ../../docs/about/introduction.rst:52
msgid ""
"For a more in-depth view of the engine, you are encouraged to read this "
"documentation further, especially the :ref:`Step by step <toc-learn-"
"step_by_step>` tutorial."
msgstr ""

#: ../../docs/about/introduction.rst:57
msgid "About the documentation"
msgstr ""

#: ../../docs/about/introduction.rst:59
msgid ""
"This documentation is continuously written, corrected, edited, and revamped "
"by members of the Godot Engine community. It is edited via text files in the "
"`reStructuredText <http://www.sphinx-doc.org/en/stable/rest.html>`_ markup "
"language and then compiled into a static website/offline document using the "
"open source `Sphinx <http://www.sphinx-doc.org>`_ and `ReadTheDocs <https://"
"readthedocs.org/>`_ tools."
msgstr ""

#: ../../docs/about/introduction.rst:66
msgid ""
"You can contribute to Godot's documentation by opening issue tickets or "
"sending patches via pull requests on its GitHub `source repository <https://"
"github.com/godotengine/godot-docs>`_, or translating it into your language "
"on `Hosted Weblate <https://hosted.weblate.org/projects/godot-engine/godot-"
"docs/>`_."
msgstr ""

#: ../../docs/about/introduction.rst:72
msgid ""
"All the contents are under the permissive Creative Commons Attribution 3.0 "
"(`CC-BY 3.0 <https://creativecommons.org/licenses/by/3.0/>`_) license, with "
"attribution to \"Juan Linietsky, Ariel Manzur and the Godot Engine "
"community\"."
msgstr ""

#: ../../docs/about/introduction.rst:77
msgid "Organization of the documentation"
msgstr ""

#: ../../docs/about/introduction.rst:79
msgid ""
"This documentation is organized in five sections with an impressively "
"unbalanced distribution of contents – but the way it is split up should be "
"relatively intuitive:"
msgstr ""

#: ../../docs/about/introduction.rst:83
msgid ""
"The :ref:`sec-general` section contains this introduction as well as "
"information about the engine, its history, its licensing, authors, etc. It "
"also contains the :ref:`doc_faq`."
msgstr ""

#: ../../docs/about/introduction.rst:86
msgid ""
"The :ref:`sec-learn` section is the *raison d'être* of this documentation, "
"as it contains all the necessary information on using the engine to make "
"games. It starts with the :ref:`Step by step <toc-learn-step_by_step>` "
"tutorial which should be the entry point for all new users."
msgstr ""

#: ../../docs/about/introduction.rst:91
msgid ""
"The :ref:`sec-tutorials` section can be read as needed, in any order. It "
"contains feature-specific tutorials and documentation."
msgstr ""

#: ../../docs/about/introduction.rst:93
msgid ""
"The :ref:`sec-devel` section is intended for advanced users and contributors "
"to the engine development, with information on compiling the engine, "
"developing C++ modules or editor plugins."
msgstr ""

#: ../../docs/about/introduction.rst:96
msgid ""
"The :ref:`sec-community` section gives information related to contributing "
"to engine development and the life of its community, e.g. how to report "
"bugs, help with the documentation, etc. It also points to various community "
"channels like IRC and Discord and contains a list of recommended third-party "
"tutorials outside of this documentation."
msgstr ""

#: ../../docs/about/introduction.rst:101
msgid ""
"Finally, the :ref:`sec-class-ref` is the documentation of the Godot API, "
"which is also available directly within the engine's script editor. It is "
"generated automatically from a file in the main source repository, therefore "
"the generated files of the documentation are not meant to be modified. See :"
"ref:`doc_updating_the_class_reference` for details."
msgstr ""

#: ../../docs/about/introduction.rst:107
msgid ""
"In addition to this documentation you may also want to take a look at the "
"various `Godot demo projects <https://github.com/godotengine/godot-demo-"
"projects>`_."
msgstr ""

#: ../../docs/about/introduction.rst:110
msgid "Have fun reading and making games with Godot Engine!"
msgstr ""

#: ../../docs/about/faq.rst:1
msgid "FAQ"
msgstr ""

#: ../../docs/about/faq.rst:7 ../../docs/tutorials/performance/batching.rst:474
#: ../../docs/community/asset_library/what_is_assetlib.rst:42
msgid "Frequently asked questions"
msgstr ""

#: ../../docs/about/faq.rst:10
msgid ""
"What can I do with Godot? How much does it cost? What are the license terms?"
msgstr ""

#: ../../docs/about/faq.rst:12
msgid ""
"Godot is `Free and Open-Source Software <https://en.wikipedia.org/wiki/"
"Free_and_open-source_software>`_ available under the `OSI-approved <https://"
"opensource.org/licenses/MIT>`_ MIT license. This means it is free as in "
"\"free speech\" as well as in \"free beer.\""
msgstr ""

#: ../../docs/about/faq.rst:14
msgid "In short:"
msgstr ""

#: ../../docs/about/faq.rst:16
msgid ""
"You are free to download and use Godot for any purpose: personal, non-"
"profit, commercial, or otherwise."
msgstr ""

#: ../../docs/about/faq.rst:17
msgid ""
"You are free to modify, distribute, redistribute, and remix Godot to your "
"heart's content, for any reason, both non-commercially and commercially."
msgstr ""

#: ../../docs/about/faq.rst:19
msgid ""
"All the contents of this accompanying documentation are published under the "
"permissive Creative Commons Attribution 3.0 (`CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_) license, with attribution to \"Juan "
"Linietsky, Ariel Manzur and the Godot Engine community.\""
msgstr ""

#: ../../docs/about/faq.rst:23
msgid ""
"Logos and icons are generally under the same Creative Commons license. Note "
"that some third-party libraries included with Godot's source code may have "
"different licenses."
msgstr ""

#: ../../docs/about/faq.rst:27
msgid ""
"For full details, look at the `COPYRIGHT.txt <https://github.com/godotengine/"
"godot/blob/master/COPYRIGHT.txt>`_ as well as the `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_ and `LOGO_LICENSE."
"txt <https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ "
"files in the Godot repository."
msgstr ""

#: ../../docs/about/faq.rst:31
msgid ""
"Also, see `the license page on the Godot website <https://godotengine.org/"
"license>`_."
msgstr ""

#: ../../docs/about/faq.rst:34
msgid "Which platforms are supported by Godot?"
msgstr ""

#: ../../docs/about/faq.rst:36
msgid "**For the editor:**"
msgstr ""

#: ../../docs/about/faq.rst:38 ../../docs/about/faq.rst:202
#: ../../docs/tutorials/rendering/jitter_stutter.rst:59
#: ../../docs/development/compiling/compiling_with_mono.rst:335
msgid "Windows"
msgstr ""

#: ../../docs/about/faq.rst:39 ../../docs/about/faq.rst:47
#: ../../docs/about/faq.rst:213
#: ../../docs/tutorials/editor/default_key_mapping.rst:27
#: ../../docs/tutorials/editor/default_key_mapping.rst:92
#: ../../docs/tutorials/editor/default_key_mapping.rst:145
#: ../../docs/tutorials/editor/default_key_mapping.rst:220
#: ../../docs/tutorials/editor/default_key_mapping.rst:301
#: ../../docs/tutorials/editor/default_key_mapping.rst:348
#: ../../docs/tutorials/editor/default_key_mapping.rst:373
#: ../../docs/tutorials/editor/default_key_mapping.rst:384
#: ../../docs/tutorials/editor/default_key_mapping.rst:397
#: ../../docs/tutorials/editor/default_key_mapping.rst:428
#: ../../docs/tutorials/editor/default_key_mapping.rst:441
#: ../../docs/tutorials/editor/default_key_mapping.rst:464
#: ../../docs/tutorials/editor/default_key_mapping.rst:481
#: ../../docs/tutorials/editor/default_key_mapping.rst:516
#: ../../docs/tutorials/rendering/jitter_stutter.rst:84
msgid "macOS"
msgstr ""

#: ../../docs/about/faq.rst:40 ../../docs/about/faq.rst:48
msgid "X11 (Linux, \\*BSD)"
msgstr ""

#: ../../docs/about/faq.rst:41
msgid ":ref:`Web <doc_using_the_web_editor>`"
msgstr ""

#: ../../docs/about/faq.rst:42
msgid "Android (experimental)"
msgstr ""

#: ../../docs/about/faq.rst:44
msgid "**For exporting your games:**"
msgstr ""

#: ../../docs/about/faq.rst:46
msgid "Windows (and UWP)"
msgstr ""

#: ../../docs/about/faq.rst:49
#: ../../docs/tutorials/export/exporting_basics.rst:326
#: ../../docs/tutorials/export/one-click_deploy.rst:66
#: ../../docs/tutorials/rendering/jitter_stutter.rst:90
#: ../../docs/development/compiling/compiling_with_mono.rst:327
msgid "Android"
msgstr ""

#: ../../docs/about/faq.rst:50
#: ../../docs/tutorials/export/exporting_basics.rst:382
#: ../../docs/tutorials/rendering/jitter_stutter.rst:96
#: ../../docs/development/compiling/compiling_with_mono.rst:329
msgid "iOS"
msgstr ""

#: ../../docs/about/faq.rst:51
msgid "Web"
msgstr ""

#: ../../docs/about/faq.rst:53
msgid ""
"Both 32- and 64-bit binaries are supported where it makes sense, with 64 "
"being the default."
msgstr ""

#: ../../docs/about/faq.rst:56
msgid ""
"Some users also report building and using Godot successfully on ARM-based "
"systems with Linux, like the Raspberry Pi."
msgstr ""

#: ../../docs/about/faq.rst:59
msgid ""
"Additionally, there is some unofficial third-party work being done on "
"building for some consoles. However, none of this is included in the default "
"build scripts or export templates at this time."
msgstr ""

#: ../../docs/about/faq.rst:63
msgid ""
"For more on this, see the sections on :ref:`exporting <toc-learn-workflow-"
"export>` and :ref:`compiling Godot yourself <toc-devel-compiling>`."
msgstr ""

#: ../../docs/about/faq.rst:67
msgid "Which programming languages are supported in Godot?"
msgstr ""

#: ../../docs/about/faq.rst:69
msgid ""
"The officially supported languages for Godot are GDScript, Visual Scripting, "
"C#, and C++. See the subcategories for each language in the :ref:`scripting "
"<toc-learn-scripting>` section."
msgstr ""

#: ../../docs/about/faq.rst:73
msgid ""
"If you are just starting out with either Godot or game development in "
"general, GDScript is the recommended language to learn and use since it is "
"native to Godot. While scripting languages tend to be less performant than "
"lower-level languages in the long run, for prototyping, developing Minimum "
"Viable Products (MVPs), and focusing on Time-To-Market (TTM), GDScript will "
"provide a fast, friendly, and capable way of developing your games."
msgstr ""

#: ../../docs/about/faq.rst:80
msgid ""
"Note that C# support is still relatively new, and as such, you may encounter "
"some issues along the way. Our friendly and hard-working development "
"community is always ready to tackle new problems as they arise, but since "
"this is an open-source project, we recommend that you first do some due "
"diligence yourself. Searching through discussions on `open issues <https://"
"github.com/godotengine/godot/issues>`_ is a great way to start your "
"troubleshooting."
msgstr ""

#: ../../docs/about/faq.rst:87
msgid ""
"As for new languages, support is possible via third parties using the "
"GDNative / NativeScript / PluginScript facilities. (See the question about "
"plugins below.) Work is currently underway, for example, on unofficial "
"bindings for Godot to `Python <https://github.com/touilleMan/godot-python>`_ "
"and `Nim <https://github.com/pragmagic/godot-nim>`_."
msgstr ""

#: ../../docs/about/faq.rst:95
msgid "What is GDScript and why should I use it?"
msgstr ""

#: ../../docs/about/faq.rst:97
msgid ""
"GDScript is Godot's integrated scripting language. It was built from the "
"ground up to maximize Godot's potential in the least amount of code, "
"affording both novice and expert developers alike to capitalize on Godot's "
"strengths as fast as possible. If you've ever written anything in a language "
"like Python before then you'll feel right at home. For examples, history, "
"and a complete overview of the power GDScript offers you, check out the :ref:"
"`GDScript scripting guide <doc_gdscript>`."
msgstr ""

#: ../../docs/about/faq.rst:104
msgid ""
"There are several reasons to use GDScript--especially when you are "
"prototyping, in alpha/beta stages of your project, or are not creating the "
"next AAA title--but the most salient reason is the overall **reduction of "
"complexity**."
msgstr ""

#: ../../docs/about/faq.rst:108
msgid ""
"The original intent of creating a tightly integrated, custom scripting "
"language for Godot was two-fold: first, it reduces the amount of time "
"necessary to get up and running with Godot, giving developers a rapid way of "
"exposing themselves to the engine with a focus on productivity; second, it "
"reduces the overall burden of maintenance, attenuates the dimensionality of "
"issues, and allows the developers of the engine to focus on squashing bugs "
"and improving features related to the engine core--rather than spending a "
"lot of time trying to get a small set of incremental features working across "
"a large set of languages."
msgstr ""

#: ../../docs/about/faq.rst:116
msgid ""
"Since Godot is an open-source project, it was imperative from the start to "
"prioritize a more integrated and seamless experience over attracting "
"additional users by supporting more familiar programming languages--"
"especially when supporting those more familiar languages would result in a "
"worse experience. We understand if you would rather use another language in "
"Godot (see the list of supported options above). That being said, if you "
"haven't given GDScript a try, try it for **three days**. Just like Godot, "
"once you see how powerful it is and rapid your development becomes, we think "
"GDScript will grow on you."
msgstr ""

#: ../../docs/about/faq.rst:125
msgid ""
"More information about getting comfortable with GDScript or dynamically "
"typed languages can be found in the :ref:`doc_gdscript_more_efficiently` "
"tutorial."
msgstr ""

#: ../../docs/about/faq.rst:129
msgid "What were the motivations behind creating GDScript?"
msgstr ""

#: ../../docs/about/faq.rst:131
msgid ""
"In the early days, the engine used the `Lua <https://www.lua.org>`__ "
"scripting language. Lua is fast, but creating bindings to an object oriented "
"system (by using fallbacks) was complex and slow and took an enormous amount "
"of code. After some experiments with `Python <https://www.python.org>`__, it "
"also proved difficult to embed."
msgstr ""

#: ../../docs/about/faq.rst:137
msgid ""
"The main reasons for creating a custom scripting language for Godot were:"
msgstr ""

#: ../../docs/about/faq.rst:139
msgid ""
"Poor threading support in most script VMs, and Godot uses threads (Lua, "
"Python, Squirrel, JavaScript, ActionScript, etc.)."
msgstr ""

#: ../../docs/about/faq.rst:141
msgid ""
"Poor class-extending support in most script VMs, and adapting to the way "
"Godot works is highly inefficient (Lua, Python, JavaScript)."
msgstr ""

#: ../../docs/about/faq.rst:143
msgid ""
"Many existing languages have horrible interfaces for binding to C++, "
"resulting in large amount of code, bugs, bottlenecks, and general "
"inefficiency (Lua, Python, Squirrel, JavaScript, etc.) We wanted to focus on "
"a great engine, not a great amount of integrations."
msgstr ""

#: ../../docs/about/faq.rst:146
msgid ""
"No native vector types (vector3, matrix4, etc.), resulting in highly reduced "
"performance when using custom types (Lua, Python, Squirrel, JavaScript, "
"ActionScript, etc.)."
msgstr ""

#: ../../docs/about/faq.rst:149
msgid ""
"Garbage collector results in stalls or unnecessarily large memory usage "
"(Lua, Python, JavaScript, ActionScript, etc.)."
msgstr ""

#: ../../docs/about/faq.rst:151
msgid ""
"Difficulty to integrate with the code editor for providing code completion, "
"live editing, etc. (all of them). This is well-supported by GDScript."
msgstr ""

#: ../../docs/about/faq.rst:155
msgid "GDScript was designed to curtail the issues above, and more."
msgstr ""

#: ../../docs/about/faq.rst:158
msgid "What type of 3D model formats does Godot support?"
msgstr ""

#: ../../docs/about/faq.rst:160
msgid ""
"Godot supports Collada via the `OpenCollada <https://github.com/KhronosGroup/"
"OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ exporter (Maya, 3DSMax). If you are "
"using Blender, take a look at our own `Better Collada Exporter <https://"
"godotengine.org/download>`_."
msgstr ""

#: ../../docs/about/faq.rst:163
msgid "As of Godot 3.0, glTF is supported."
msgstr ""

#: ../../docs/about/faq.rst:165
msgid ""
"FBX is supported via the Open Asset Import library. However, FBX is "
"proprietary so we recommend using other formats listed above, if suitable "
"for your workflow."
msgstr ""

#: ../../docs/about/faq.rst:169
msgid ""
"Will [insert closed SDK such as FMOD, GameWorks, etc.] be supported in Godot?"
msgstr ""

#: ../../docs/about/faq.rst:171
msgid ""
"The aim of Godot is to create a free and open-source MIT-licensed engine "
"that is modular and extendable. There are no plans for the core engine "
"development community to support any third-party, closed-source/proprietary "
"SDKs, as integrating with these would go against Godot's ethos."
msgstr ""

#: ../../docs/about/faq.rst:176
msgid ""
"That said, because Godot is open-source and modular, nothing prevents you or "
"anyone else interested in adding those libraries as a module and shipping "
"your game with them--as either open- or closed-source."
msgstr ""

#: ../../docs/about/faq.rst:180
msgid ""
"To see how support for your SDK of choice could still be provided, look at "
"the Plugins question below."
msgstr ""

#: ../../docs/about/faq.rst:183
msgid ""
"If you know of a third-party SDK that is not supported by Godot but that "
"offers free and open-source integration, consider starting the integration "
"work yourself. Godot is not owned by one person; it belongs to the "
"community, and it grows along with ambitious community contributors like you."
msgstr ""

#: ../../docs/about/faq.rst:189
msgid ""
"How do I install the Godot editor on my system (for desktop integration)?"
msgstr ""

#: ../../docs/about/faq.rst:191
msgid ""
"Since you don't need to actually install Godot on your system to run it, "
"this means desktop integration is not performed automatically. There are two "
"ways to overcome this. You can install Godot from `Steam <https://store."
"steampowered.com/app/404790/Godot_Engine/>`__ (all platforms), `Scoop "
"<https://scoop.sh/>`__ (Windows), `Homebrew <https://brew.sh/>`__ (macOS) or "
"`Flathub <https://flathub.org/apps/details/org.godotengine.Godot>`__ "
"(Linux). This will automatically perform the required steps for desktop "
"integration."
msgstr ""

#: ../../docs/about/faq.rst:199
msgid ""
"Alternatively, you can manually perform the steps that an installer would do "
"for you:"
msgstr ""

#: ../../docs/about/faq.rst:204
msgid ""
"Move the Godot executable to a stable location (i.e. outside of your "
"Downloads folder), so you don't accidentally move it and break the shortcut "
"in the future."
msgstr ""

#: ../../docs/about/faq.rst:206
msgid "Right-click the Godot executable and choose **Create Shortcut**."
msgstr ""

#: ../../docs/about/faq.rst:207
msgid ""
"Move the created shortcut to ``%LOCALAPPDATA%\\Microsoft\\Windows\\Start "
"Menu\\Programs``. This is the user-wide location for shortcuts that will "
"appear in the Start menu. You can also pin Godot in the task bar by right-"
"clicking the executable and choosing **Pin to Task Bar**."
msgstr ""

#: ../../docs/about/faq.rst:215
msgid ""
"Drag the extracted Godot application to ``/Applications/Godot.app``, then "
"drag it to the Dock if desired. Spotlight will be able to find Godot as long "
"as it's in ``/Applications`` or ``~/Applications``."
msgstr ""

#: ../../docs/about/faq.rst:220
#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:233
msgid "Linux"
msgstr ""

#: ../../docs/about/faq.rst:222
msgid ""
"Move the Godot binary to a stable location (i.e. outside of your Downloads "
"folder), so you don't accidentally move it and break the shortcut in the "
"future."
msgstr ""

#: ../../docs/about/faq.rst:224
msgid ""
"Rename and move the Godot binary to a location present in your ``PATH`` "
"environment variable. This is typically ``/usr/local/bin/godot`` or ``/usr/"
"bin/godot``. Doing this requires administrator privileges, but this also "
"allows you to :ref:`run the Godot editor from a terminal "
"<doc_command_line_tutorial>` by entering ``godot``."
msgstr ""

#: ../../docs/about/faq.rst:230
msgid ""
"If you cannot move the Godot editor binary to a protected location, you can "
"keep the binary somewhere in your home directory, and modify the ``Path=`` "
"line in the ``.desktop`` file linked below to contain the full *absolute* "
"path to the Godot binary."
msgstr ""

#: ../../docs/about/faq.rst:235
msgid ""
"Save `this .desktop file <https://raw.githubusercontent.com/godotengine/"
"godot/3.x/misc/dist/linux/org.godotengine.Godot.desktop>`__ to ``$HOME/."
"local/share/applications/``. If you have administrator privileges, you can "
"also save the ``.desktop`` file to ``/usr/local/share/applications`` to make "
"the shortcut available for all users."
msgstr ""

#: ../../docs/about/faq.rst:241
msgid "Is the Godot editor a portable application?"
msgstr ""

#: ../../docs/about/faq.rst:243
msgid ""
"In its default configuration, Godot is *semi-portable*. Its executable can "
"run from any location (including non-writable locations) and never requires "
"administrator privileges."
msgstr ""

#: ../../docs/about/faq.rst:247
msgid ""
"However, configuration files will be written to the user-wide configuration "
"or data directory. This is usually a good approach, but this means "
"configuration files will not carry across machines if you copy the folder "
"containing the Godot executable. See :ref:`doc_data_paths` for more "
"information."
msgstr ""

#: ../../docs/about/faq.rst:252
msgid ""
"If *true* portable operation is desired (e.g. for use on an USB stick), "
"follow the steps in :ref:`doc_data_paths_self_contained_mode`."
msgstr ""

#: ../../docs/about/faq.rst:256
msgid "Why does Godot use Vulkan or OpenGL instead of Direct3D?"
msgstr ""

#: ../../docs/about/faq.rst:258
msgid ""
"Godot aims for cross-platform compatibility and open standards first and "
"foremost. OpenGL and Vulkan are the technologies that are both open and "
"available (nearly) on all platforms. Thanks to this design decision, a "
"project developed with Godot on Windows will run out of the box on Linux, "
"macOS, and more."
msgstr ""

#: ../../docs/about/faq.rst:264
msgid ""
"Since Godot only has a few people working on its renderer, we would prefer "
"having fewer rendering backends to maintain. On top of that, using a single "
"API on all platforms allows for greater consistency with fewer platform-"
"specific issues."
msgstr ""

#: ../../docs/about/faq.rst:269
msgid ""
"In the long term, we may develop a Direct3D 12 renderer for Godot (mainly "
"for the Xbox's purposes), but Vulkan and OpenGL will remain the default "
"rendering backends on all platforms, including Windows."
msgstr ""

#: ../../docs/about/faq.rst:274
msgid "Why does Godot aim to keep its core feature set small?"
msgstr ""

#: ../../docs/about/faq.rst:276
msgid ""
"Godot intentionally does not include features that can be implemented by add-"
"ons unless they are used very often. One example of this would be advanced "
"artificial intelligence functionality."
msgstr ""

#: ../../docs/about/faq.rst:280
msgid "There are several reasons for this:"
msgstr ""

#: ../../docs/about/faq.rst:282
msgid ""
"**Code maintenance and surface for bugs.** Every time we accept new code in "
"the Godot repository, existing contributors often take the reponsibility of "
"maintaining it. Some contributors don't always stick around after getting "
"their code merged, which can make it difficult for us to maintain the code "
"in question. This can lead to poorly maintained features with bugs that are "
"never fixed. On top of that, the \"API surface\" that needs to be tested and "
"checked for regressions keeps increasing over time."
msgstr ""

#: ../../docs/about/faq.rst:290
msgid ""
"**Ease of contribution.** By keeping the codebase small and tidy, it can "
"remain fast and easy to compile from source. This makes it easier for new "
"contributors to get started with Godot, without requiring them to purchase "
"high-end hardware."
msgstr ""

#: ../../docs/about/faq.rst:295
msgid ""
"**Keeping the binary size small for the editor.** Not everyone has a fast "
"Internet connection. Ensuring that everyone can download the Godot editor, "
"extract it and run it in less than 5 minutes makes Godot more accessible to "
"developers in all countries."
msgstr ""

#: ../../docs/about/faq.rst:300
msgid ""
"**Keeping the binary size small for export templates.** This directly "
"impacts the size of projects exported with Godot. On mobile and web "
"platforms, keeping file sizes low is primordial to ensure fast installation "
"and loading on underpowered devices. Again, there are many countries where "
"high-speed Internet is not readily available. To add to this, strict data "
"usage caps are often in effect in those countries."
msgstr ""

#: ../../docs/about/faq.rst:307
msgid ""
"For all the reasons above, we have to be selective of what we can accept as "
"core functionality in Godot. This is why we are aiming to move some core "
"functionality to officially supported add-ons in future versions of Godot. "
"In terms of binary size, this also has the advantage of making you pay only "
"for what you actually use in your project. (In the meantime, you can :ref:"
"`compile custom export templates with unused features disabled "
"<doc_optimizing_for_size>` to optimize the distribution size of your "
"project.)"
msgstr ""

#: ../../docs/about/faq.rst:316
msgid ""
"How should assets be created to handle multiple resolutions and aspect "
"ratios?"
msgstr ""

#: ../../docs/about/faq.rst:318
msgid ""
"This question pops up often and it's probably thanks to the misunderstanding "
"created by Apple when they originally doubled the resolution of their "
"devices. It made people think that having the same assets in different "
"resolutions was a good idea, so many continued towards that path. That "
"originally worked to a point and only for Apple devices, but then several "
"Android and Apple devices with different resolutions and aspect ratios were "
"created, with a very wide range of sizes and DPIs."
msgstr ""

#: ../../docs/about/faq.rst:326
msgid ""
"The most common and proper way to achieve this is to, instead, use a single "
"base resolution for the game and only handle different screen aspect ratios. "
"This is mostly needed for 2D, as in 3D it's just a matter of Camera XFov or "
"YFov."
msgstr ""

#: ../../docs/about/faq.rst:330
msgid ""
"Choose a single base resolution for your game. Even if there are devices "
"that go up to 2K and devices that go down to 400p, regular hardware scaling "
"in your device will take care of this at little or no performance cost. Most "
"common choices are either near 1080p (1920x1080) or 720p (1280x720). Keep in "
"mind the higher the resolution, the larger your assets, the more memory they "
"will take and the longer the time it will take for loading."
msgstr ""

#: ../../docs/about/faq.rst:338
msgid ""
"Use the stretch options in Godot; 2D stretching while keeping aspect ratios "
"works best. Check the :ref:`doc_multiple_resolutions` tutorial on how to "
"achieve this."
msgstr ""

#: ../../docs/about/faq.rst:342
msgid ""
"Determine a minimum resolution and then decide if you want your game to "
"stretch vertically or horizontally for different aspect ratios, or if there "
"is one aspect ratio and you want black bars to appear instead. This is also "
"explained in :ref:`doc_multiple_resolutions`."
msgstr ""

#: ../../docs/about/faq.rst:347
msgid ""
"For user interfaces, use the :ref:`anchoring <doc_size_and_anchors>` to "
"determine where controls should stay and move. If UIs are more complex, "
"consider learning about Containers."
msgstr ""

#: ../../docs/about/faq.rst:351
msgid "And that's it! Your game should work in multiple resolutions."
msgstr ""

#: ../../docs/about/faq.rst:353
msgid ""
"If there is a desire to make your game also work on ancient devices with "
"tiny screens (fewer than 300 pixels in width), you can use the export option "
"to shrink images, and set that build to be used for certain screen sizes in "
"the App Store or Google Play."
msgstr ""

#: ../../docs/about/faq.rst:359
msgid "How can I extend Godot?"
msgstr ""

#: ../../docs/about/faq.rst:361
msgid ""
"For extending Godot, like creating Godot Editor plugins or adding support "
"for additional languages, take a look at :ref:`EditorPlugins "
"<doc_making_plugins>` and tool scripts."
msgstr ""

#: ../../docs/about/faq.rst:365
msgid "Also, see the official blog posts on these topics:"
msgstr ""

#: ../../docs/about/faq.rst:367
msgid ""
"`A look at the GDNative architecture <https://godotengine.org/article/look-"
"gdnative-architecture>`_"
msgstr ""

#: ../../docs/about/faq.rst:368
msgid "`GDNative is here! <https://godotengine.org/article/dlscript-here>`_"
msgstr ""

#: ../../docs/about/faq.rst:370
msgid ""
"You can also take a look at the GDScript implementation, the Godot modules, "
"as well as the `unofficial Python support <https://github.com/touilleMan/"
"godot-python>`_ for Godot. This would be a good starting point to see how "
"another third-party library integrates with Godot."
msgstr ""

#: ../../docs/about/faq.rst:376
msgid "When is the next release of Godot out?"
msgstr ""

#: ../../docs/about/faq.rst:378
msgid ""
"When it's ready! See :ref:`doc_release_policy_when_is_next_release_out` for "
"more information."
msgstr ""

#: ../../docs/about/faq.rst:382
msgid "I would like to contribute! How can I get started?"
msgstr ""

#: ../../docs/about/faq.rst:384
msgid ""
"Awesome! As an open-source project, Godot thrives off of the innovation and "
"ambition of developers like you."
msgstr ""

#: ../../docs/about/faq.rst:387
msgid ""
"The first place to get started is in the `issues <https://github.com/"
"godotengine/godot/issues>`_. Find an issue that resonates with you, then "
"proceed to the `How to Contribute <https://github.com/godotengine/godot/blob/"
"master/CONTRIBUTING.md#contributing-pull-requests>`_ guide to learn how to "
"fork, modify, and submit a Pull Request (PR) with your changes."
msgstr ""

#: ../../docs/about/faq.rst:392
msgid "I have a great idea for Godot. How can I share it?"
msgstr ""

#: ../../docs/about/faq.rst:394
msgid ""
"It might be tempting to want to bring ideas to Godot, like ones that result "
"in massive core changes, some sort of mimicry of what another game engine "
"does, or alternative workflows that you'd like built into the editor. These "
"are great, and we are thankful to have such motivated people want to "
"contribute, but Godot's focus is and always will be the core functionality "
"as outlined in the `Roadmap <https://github.com/godotengine/godot-roadmap/"
"blob/master/ROADMAP.md>`_, `squashing bugs and addressing issues <https://"
"github.com/godotengine/godot/issues>`_, and conversations between Godot "
"community members."
msgstr ""

#: ../../docs/about/faq.rst:403
msgid ""
"Most developers in the Godot community will be more interested to learn "
"about things like:"
msgstr ""

#: ../../docs/about/faq.rst:406
msgid ""
"Your experience using the software and the problems you have (we care about "
"this much more than ideas on how to improve it)."
msgstr ""

#: ../../docs/about/faq.rst:408
msgid ""
"The features you would like to see implemented because you need them for "
"your project."
msgstr ""

#: ../../docs/about/faq.rst:410
msgid ""
"The concepts that were difficult to understand while learning the software."
msgstr ""

#: ../../docs/about/faq.rst:411
msgid "The parts of your workflow you would like to see optimized."
msgstr ""

#: ../../docs/about/faq.rst:412
msgid ""
"Parts where you missed clear tutorials or where the documentation wasn't "
"clear."
msgstr ""

#: ../../docs/about/faq.rst:414
msgid ""
"Please don't feel like your ideas for Godot are unwelcome. Instead, try to "
"reformulate them as a problem first, so developers and the community have a "
"functional foundation to ground your ideas on."
msgstr ""

#: ../../docs/about/faq.rst:418
msgid ""
"A good way to approach sharing your ideas and problems with the community is "
"as a set of user stories. Explain what you are trying to do, what behavior "
"you expect to happen, and then what behavior actually happened. Framing "
"problems and ideas this way will help the whole community stay focused on "
"improving developer experiences as a whole."
msgstr ""

#: ../../docs/about/faq.rst:424
msgid ""
"Bonus points for bringing screenshots, concrete numbers, test cases, or "
"example projects (if applicable)."
msgstr ""

#: ../../docs/about/faq.rst:430
msgid "Is it possible to use Godot to create non-game applications?"
msgstr ""

#: ../../docs/about/faq.rst:432
msgid ""
"Yes! Godot features an extensive built-in UI system, and its small "
"distribution size can make it a suitable alternative to frameworks like "
"Electron or Qt."
msgstr ""

#: ../../docs/about/faq.rst:435
msgid ""
"When creating a non-game application, make sure to enable :ref:`low-"
"processor mode <class_ProjectSettings_property_application/run/"
"low_processor_mode>` in the Project Settings to decrease CPU and GPU usage."
msgstr ""

#: ../../docs/about/faq.rst:439
msgid ""
"That said, we wouldn't recommend using Godot to create a *mobile* "
"application since low-processor mode isn't supported on mobile platforms yet."
msgstr ""

#: ../../docs/about/faq.rst:442
msgid ""
"Check out `Material Maker <https://github.com/RodZill4/material-maker>`__ "
"and `Pixelorama <https://github.com/Orama-Interactive/Pixelorama>`__ for "
"examples of open source applications made with Godot."
msgstr ""

#: ../../docs/about/faq.rst:449
msgid "Is it possible to use Godot as a library?"
msgstr ""

#: ../../docs/about/faq.rst:451
msgid ""
"Godot is meant to be used with its editor. We recommend you give it a try, "
"as it will most likely save you time in the long term. There are no plans to "
"make Godot usable as a library, as it would make the rest of the engine more "
"convoluted and difficult to use for casual users."
msgstr ""

#: ../../docs/about/faq.rst:456
msgid ""
"If you want to use a rendering library, look into using an established "
"rendering engine instead. Keep in mind rendering engines usually have "
"smaller communities compared to Godot. This will make it more difficult to "
"find answers to your questions."
msgstr ""

#: ../../docs/about/faq.rst:462
msgid "What user interface toolkit does Godot use?"
msgstr ""

#: ../../docs/about/faq.rst:464
msgid ""
"Godot does not use a standard :abbr:`GUI (Graphical User Interface)` toolkit "
"like GTK, Qt or wxWidgets. Instead, Godot uses its own user interface "
"toolkit, rendered using OpenGL ES or Vulkan. This toolkit is exposed in the "
"form of Control nodes, which are used to render the editor (which is written "
"in C++). These Control nodes can also be used in projects from any scripting "
"language supported by Godot."
msgstr ""

#: ../../docs/about/faq.rst:471
msgid ""
"This custom toolkit makes it possible to benefit from hardware acceleration "
"and have a consistent appearance across all platforms. On top of that, it "
"doesn't have to deal with the LGPL licensing caveats that come with GTK or "
"Qt. Lastly, this means Godot is \"eating its own dog food\" since the editor "
"itself is one of the most complex users of Godot's UI system."
msgstr ""

#: ../../docs/about/faq.rst:477
msgid ""
"This custom UI toolkit :ref:`can't be used as a library "
"<doc_faq_use_godot_as_library>`, but you can still :ref:`use Godot to create "
"non-game applications by using the editor <doc_faq_non_game_applications>`."
msgstr ""

#: ../../docs/about/faq.rst:484
msgid "Why does Godot not use STL (Standard Template Library)?"
msgstr ""

#: ../../docs/about/faq.rst:486
msgid ""
"Like many other libraries (Qt as an example), Godot does not make use of "
"STL. We believe STL is a great general purpose library, but we had special "
"requirements for Godot."
msgstr ""

#: ../../docs/about/faq.rst:490
msgid ""
"STL templates create very large symbols, which results in huge debug "
"binaries. We use few templates with very short names instead."
msgstr ""

#: ../../docs/about/faq.rst:491
msgid ""
"Most of our containers cater to special needs, like Vector, which uses copy "
"on write and we use to pass data around, or the RID system, which requires "
"O(1) access time for performance. Likewise, our hash map implementations are "
"designed to integrate seamlessly with internal engine types."
msgstr ""

#: ../../docs/about/faq.rst:492
msgid ""
"Our containers have memory tracking built-in, which helps better track "
"memory usage."
msgstr ""

#: ../../docs/about/faq.rst:493
msgid ""
"For large arrays, we use pooled memory, which can be mapped to either a "
"preallocated buffer or virtual memory."
msgstr ""

#: ../../docs/about/faq.rst:494
msgid ""
"We use our custom String type, as the one provided by STL is too basic and "
"lacks proper internationalization support."
msgstr ""

#: ../../docs/about/faq.rst:497
msgid "Why does Godot not use exceptions?"
msgstr ""

#: ../../docs/about/faq.rst:499
msgid ""
"We believe games should not crash, no matter what. If an unexpected "
"situation happens, Godot will print an error (which can be traced even to "
"script), but then it will try to recover as gracefully as possible and keep "
"going."
msgstr ""

#: ../../docs/about/faq.rst:504
msgid ""
"Additionally, exceptions significantly increase binary size for the "
"executable."
msgstr ""

#: ../../docs/about/faq.rst:508
msgid "Why does Godot not enforce RTTI?"
msgstr ""

#: ../../docs/about/faq.rst:510
msgid ""
"Godot provides its own type-casting system, which can optionally use RTTI "
"internally. Disabling RTTI in Godot means considerably smaller binary sizes "
"can be achieved, at a little performance cost."
msgstr ""

#: ../../docs/about/faq.rst:515
msgid "Why does Godot not force users to implement DoD (Data oriented Design)?"
msgstr ""

#: ../../docs/about/faq.rst:517
msgid ""
"While Godot internally for a lot of the heavy performance tasks attempts to "
"use cache coherency as well as possible, we believe most users don't really "
"need to be forced to use DoD practices."
msgstr ""

#: ../../docs/about/faq.rst:521
msgid ""
"DoD is mostly a cache coherency optimization that can only gain you "
"significant performance improvements when dealing with dozens of thousands "
"of objects (which are processed every frame with little modification). As "
"in, if you are moving a few hundred sprites or enemies per frame, DoD won't "
"help you, and you should consider a different approach to optimization."
msgstr ""

#: ../../docs/about/faq.rst:528
msgid ""
"The vast majority of games do not need this and Godot provides handy helpers "
"to do the job for most cases when you do."
msgstr ""

#: ../../docs/about/faq.rst:531
msgid ""
"If a game that really needs to process such large amount of objects is "
"needed, our recommendation is to use C++ and GDNative for the high "
"performance parts and GDScript (or C#) for the rest of the game."
msgstr ""

#: ../../docs/about/faq.rst:536
msgid "How can I support Godot development or contribute?"
msgstr ""

#: ../../docs/about/faq.rst:538
msgid "See :ref:`doc_ways_to_contribute`."
msgstr ""

#: ../../docs/about/faq.rst:541
msgid "Who is working on Godot? How can I contact you?"
msgstr ""

#: ../../docs/about/faq.rst:543
msgid ""
"See the corresponding page on the `Godot website <https://godotengine.org/"
"contact>`_."
msgstr ""

#: ../../docs/about/troubleshooting.rst:4
#: ../../docs/tutorials/export/one-click_deploy.rst:63
#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:180
#: ../../docs/tutorials/platform/android/android_plugin.rst:162
#: ../../docs/development/compiling/compiling_for_windows.rst:236
#: ../../docs/development/compiling/compiling_for_android.rst:204
#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:73
#: ../../docs/development/editor/creating_icons.rst:92
msgid "Troubleshooting"
msgstr ""

#: ../../docs/about/troubleshooting.rst:6
msgid ""
"This page lists common issues encountered when using Godot and possible "
"solutions."
msgstr ""

#: ../../docs/about/troubleshooting.rst:10
msgid ""
"See :ref:`doc_using_the_web_editor` for caveats specific to the HTML5 "
"version of the Godot editor."
msgstr ""

#: ../../docs/about/troubleshooting.rst:14
msgid ""
"Everything I do in the editor or project manager appears delayed by one "
"frame."
msgstr ""

#: ../../docs/about/troubleshooting.rst:16
msgid ""
"This is a `known bug <https://github.com/godotengine/godot/issues/23069>`__ "
"on Intel graphics drivers on Windows. Updating to the latest graphics driver "
"version *provided by Intel* should fix the issue."
msgstr ""

#: ../../docs/about/troubleshooting.rst:20
msgid ""
"You should use the graphics driver provided by Intel rather than the one "
"provided by your desktop or laptop's manufacturer because their version is "
"often outdated."
msgstr ""

#: ../../docs/about/troubleshooting.rst:25
msgid ""
"The grid disappears and meshes turn black when I rotate the 3D camera in the "
"editor."
msgstr ""

#: ../../docs/about/troubleshooting.rst:27
msgid ""
"This is a `known bug <https://github.com/godotengine/godot/issues/30330>`__ "
"on Intel graphics drivers on Windows."
msgstr ""

#: ../../docs/about/troubleshooting.rst:30
msgid ""
"The only workaround, for now, is to switch to the GLES2 renderer. You can "
"switch the renderer in the top-right corner of the editor or the Project "
"Settings."
msgstr ""

#: ../../docs/about/troubleshooting.rst:33
msgid ""
"If you use a computer allowing you to switch your graphics card, like NVIDIA "
"Optimus, you can use the dedicated graphics card to run Godot."
msgstr ""

#: ../../docs/about/troubleshooting.rst:37
msgid "The editor or project takes a very long time to start."
msgstr ""

#: ../../docs/about/troubleshooting.rst:39
msgid ""
"This is a `known bug <https://github.com/godotengine/godot/issues/20566>`__ "
"on Windows when you have specific USB peripherals connected. In particular, "
"Corsair's iCUE software seems to cause the bug. Try updating your USB "
"peripherals' drivers to their latest version. If the bug persists, you need "
"to disconnect the faulty peripherals before opening the editor. You can then "
"connect the peripheral again."
msgstr ""

#: ../../docs/about/troubleshooting.rst:47
msgid ""
"Editor tooltips in the Inspector and Node docks blink when they're displayed."
msgstr ""

#: ../../docs/about/troubleshooting.rst:49
msgid ""
"This is a `known issue <https://github.com/godotengine/godot/"
"issues/32990>`__ caused by the third-party Stardock Fences application on "
"Windows. The only known workaround is to disable Stardock Fences while using "
"Godot."
msgstr ""

#: ../../docs/about/troubleshooting.rst:54
msgid "The Godot editor appears frozen after clicking the system console."
msgstr ""

#: ../../docs/about/troubleshooting.rst:56
msgid ""
"When running Godot on Windows with the system console enabled, you can "
"accidentally enable *selection mode* by clicking inside the command window. "
"This Windows-specific behavior pauses the application to let you select text "
"inside the system console. Godot cannot override this system-specific "
"behavior."
msgstr ""

#: ../../docs/about/troubleshooting.rst:61
msgid ""
"To solve this, select the system console window and press Enter to leave "
"selection mode."
msgstr ""

#: ../../docs/about/troubleshooting.rst:65
msgid ""
"Some text such as \"NO DC\" appears in the top-left corner of the project "
"manager and editor window."
msgstr ""

#: ../../docs/about/troubleshooting.rst:67
msgid ""
"This is caused by the NVIDIA graphics driver injecting an overlay to display "
"information."
msgstr ""

#: ../../docs/about/troubleshooting.rst:69
msgid ""
"To disable this overlay on Windows, restore your graphics driver settings to "
"the default values in the NVIDIA Control Panel."
msgstr ""

#: ../../docs/about/troubleshooting.rst:72
msgid ""
"To disable this overlay on Linux, open ``nvidia-settings``, go to **X Screen "
"0 > OpenGL Settings** then uncheck **Enable Graphics API Visual Indicator**."
msgstr ""

#: ../../docs/about/troubleshooting.rst:76
msgid "The project window appears blurry, unlike the editor."
msgstr ""

#: ../../docs/about/troubleshooting.rst:78
msgid ""
"Unlike the editor, the project isn't marked as DPI-aware by default. This is "
"done to improve performance, especially on integrated graphics, where "
"rendering 3D scenes in hiDPI is slow."
msgstr ""

#: ../../docs/about/troubleshooting.rst:82
msgid ""
"To resolve this, open **Project > Project Settings** and enable **Display > "
"Window > Dpi > Allow Hidpi**. On top of that, make sure your project is "
"configured to support :ref:`multiple resolutions <doc_multiple_resolutions>`."
msgstr ""

#: ../../docs/about/troubleshooting.rst:87
msgid "The project window doesn't appear centered when I run the project."
msgstr ""

#: ../../docs/about/troubleshooting.rst:89
msgid ""
"This is a `known bug <https://github.com/godotengine/godot/issues/13017>`__. "
"To resolve this, open **Project > Project Settings** and enable **Display > "
"Window > Dpi > Allow Hidpi**. On top of that, make sure your project is "
"configured to support :ref:`multiple resolutions <doc_multiple_resolutions>`."
msgstr ""

#: ../../docs/about/troubleshooting.rst:95
msgid ""
"The project works when run from the editor, but fails to load some files "
"when running from an exported copy."
msgstr ""

#: ../../docs/about/troubleshooting.rst:97
msgid ""
"This is usually caused by forgetting to specify a filter for non-resource "
"files in the Export dialog. By default, Godot will only include actual "
"*resources* into the PCK file. Some files commonly used, such as JSON files, "
"are not considered resources. For example, if you load ``test.json`` in the "
"exported project, you need to specify ``*.json`` in the non-resource export "
"filter. See :ref:`doc_exporting_projects_export_mode` for more information."
msgstr ""

#: ../../docs/about/troubleshooting.rst:104
msgid ""
"On Windows, this can also be due to :ref:`case sensitivity "
"<doc_project_organization_case_sensitivity>` issues. If you reference a "
"resource in your script with a different case than on the filesystem, "
"loading will fail once you export the project. This is because the virtual "
"PCK filesystem is case-sensitive, while Windows's filesystem is case-"
"insensitive by default."
msgstr ""

#: ../../docs/about/list_of_features.rst:4
msgid "List of features"
msgstr ""

#: ../../docs/about/list_of_features.rst:6
msgid "This page aims to list all features currently supported by Godot."
msgstr ""

#: ../../docs/about/list_of_features.rst:10
msgid ""
"This page lists features supported by the current stable version of Godot "
"(3.5). `More features <https://docs.godotengine.org/en/latest/about/"
"list_of_features.html>`__ are available in the latest development version "
"(4.0)."
msgstr ""

#: ../../docs/about/list_of_features.rst:15
msgid "Features"
msgstr ""

#: ../../docs/about/list_of_features.rst:18
msgid "Platforms"
msgstr ""

#: ../../docs/about/list_of_features.rst:20
msgid "**Can run both the editor and exported projects:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:22
msgid "Windows 7 and later (64-bit and 32-bit)."
msgstr ""

#: ../../docs/about/list_of_features.rst:23
msgid "macOS 10.12 and later (64-bit, x86 and ARM)."
msgstr ""

#: ../../docs/about/list_of_features.rst:24
msgid "Linux (64-bit and 32-bit, x86 and ARM)."
msgstr ""

#: ../../docs/about/list_of_features.rst:26
msgid ""
"Binaries are statically linked and can run on any distribution if compiled "
"on an old enough base distribution."
msgstr ""

#: ../../docs/about/list_of_features.rst:28
msgid "Official binaries are compiled on Ubuntu 14.04."
msgstr ""

#: ../../docs/about/list_of_features.rst:30
msgid "HTML5 via WebAssembly (Firefox, Chrome, Edge, Opera)."
msgstr ""

#: ../../docs/about/list_of_features.rst:32
msgid "**Runs exported projects:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:34
msgid "Android 4.4 and later."
msgstr ""

#: ../../docs/about/list_of_features.rst:35
msgid "iOS 10.0 and later."
msgstr ""

#: ../../docs/about/list_of_features.rst:36
msgid ":ref:`Consoles <doc_consoles>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:37
msgid ""
":ref:`Headless Linux and macOS servers "
"<doc_exporting_for_dedicated_servers>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:39
msgid ""
"Godot aims to be as platform-independent as possible and can be ported to "
"new platforms with relative ease."
msgstr ""

#: ../../docs/about/list_of_features.rst:43
#: ../../docs/tutorials/editor/external_editor.rst:34
#: ../../docs/development/compiling/compiling_with_mono.rst:197
msgid "Editor"
msgstr ""

#: ../../docs/about/list_of_features.rst:45
#: ../../docs/about/list_of_features.rst:93
#: ../../docs/about/list_of_features.rst:395
msgid "**Features:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:47
msgid "Scene tree editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:48
msgid "Built-in script editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:49
msgid ""
"Support for :ref:`external script editors <doc_external_editor>` such as "
"Visual Studio Code or Vim."
msgstr ""

#: ../../docs/about/list_of_features.rst:51
msgid "GDScript :ref:`debugger <doc_debugger_panel>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:53
msgid "No support for debugging in threads yet."
msgstr ""

#: ../../docs/about/list_of_features.rst:54
msgid "Performance monitoring tools."
msgstr ""

#: ../../docs/about/list_of_features.rst:55
msgid "Live script reloading."
msgstr ""

#: ../../docs/about/list_of_features.rst:56
msgid "Live scene editing."
msgstr ""

#: ../../docs/about/list_of_features.rst:58
msgid ""
"Changes will reflect in the editor and will be kept after closing the "
"running project."
msgstr ""

#: ../../docs/about/list_of_features.rst:60
msgid "Remote inspector."
msgstr ""

#: ../../docs/about/list_of_features.rst:62
msgid ""
"Changes won't reflect in the editor and won't be kept after closing the "
"running project."
msgstr ""

#: ../../docs/about/list_of_features.rst:64
msgid "Live camera replication."
msgstr ""

#: ../../docs/about/list_of_features.rst:66
msgid "Move the in-editor camera and see the result in the running project."
msgstr ""

#: ../../docs/about/list_of_features.rst:68
msgid "Built-in offline class reference documentation."
msgstr ""

#: ../../docs/about/list_of_features.rst:69
msgid "Use the editor in dozens of languages contributed by the community."
msgstr ""

#: ../../docs/about/list_of_features.rst:71
msgid "**Plugins:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:73
msgid ""
"Editor plugins can be downloaded from the :ref:`asset library "
"<doc_what_is_assetlib>` to extend editor functionality."
msgstr ""

#: ../../docs/about/list_of_features.rst:75
msgid ""
":ref:`Create your own plugins <doc_making_plugins>` using GDScript to add "
"new features or speed up your workflow."
msgstr ""

#: ../../docs/about/list_of_features.rst:77
msgid ""
":ref:`Download projects from the asset library <doc_using_assetlib_editor>` "
"in the project manager and import them directly."
msgstr ""

#: ../../docs/about/list_of_features.rst:81
msgid "2D graphics"
msgstr ""

#: ../../docs/about/list_of_features.rst:83
#: ../../docs/about/list_of_features.rst:150
msgid "**Two renderers available:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:85
#: ../../docs/about/list_of_features.rst:152
msgid "OpenGL ES 3.0 renderer (uses OpenGL 3.3 on desktop platforms)."
msgstr ""

#: ../../docs/about/list_of_features.rst:87
#: ../../docs/about/list_of_features.rst:154
msgid "High-end visuals. Recommended on desktop platforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:89
#: ../../docs/about/list_of_features.rst:159
msgid "OpenGL ES 2.0 renderer (uses OpenGL 2.1 on desktop platforms)."
msgstr ""

#: ../../docs/about/list_of_features.rst:91
#: ../../docs/about/list_of_features.rst:161
msgid "Recommended on mobile and Web platforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:95
msgid "Sprite, polygon and line rendering."
msgstr ""

#: ../../docs/about/list_of_features.rst:97
msgid ""
"High-level tools to draw lines and polygons such as Polygon2D and Line2D."
msgstr ""

#: ../../docs/about/list_of_features.rst:99
msgid "AnimatedSprite as a helper for creating animated sprites."
msgstr ""

#: ../../docs/about/list_of_features.rst:100
msgid "Parallax layers."
msgstr ""

#: ../../docs/about/list_of_features.rst:102
msgid "Pseudo-3D support including preview in the editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:104
msgid "2D lighting with normal maps."
msgstr ""

#: ../../docs/about/list_of_features.rst:106
msgid "Hard or soft shadows."
msgstr ""

#: ../../docs/about/list_of_features.rst:108
msgid ""
"Font rendering using bitmaps (BitmapFont) or rasterization using FreeType "
"(DynamicFont)."
msgstr ""

#: ../../docs/about/list_of_features.rst:110
msgid "Bitmap fonts can be exported using tools like BMFont."
msgstr ""

#: ../../docs/about/list_of_features.rst:111
msgid ""
"DynamicFont supports monochrome fonts as well as colored fonts (e.g. for "
"emoji). Supported formats are TTF, OTF, WOFF1 and WOFF2."
msgstr ""

#: ../../docs/about/list_of_features.rst:113
msgid ""
"DynamicFont supports optional font outlines with adjustable width and color."
msgstr ""

#: ../../docs/about/list_of_features.rst:114
msgid ""
"Support for font oversampling to keep fonts sharp at higher resolutions."
msgstr ""

#: ../../docs/about/list_of_features.rst:116
msgid "GPU-based particles with support for custom particle shaders."
msgstr ""

#: ../../docs/about/list_of_features.rst:117
#: ../../docs/about/list_of_features.rst:244
msgid "CPU-based particles."
msgstr ""

#: ../../docs/about/list_of_features.rst:120
msgid "2D tools"
msgstr ""

#: ../../docs/about/list_of_features.rst:122
msgid "2D camera with built-in smoothing and drag margins."
msgstr ""

#: ../../docs/about/list_of_features.rst:123
msgid "Path2D node to represent a path in 2D space."
msgstr ""

#: ../../docs/about/list_of_features.rst:125
#: ../../docs/about/list_of_features.rst:298
msgid "Can be drawn in the editor or generated procedurally."
msgstr ""

#: ../../docs/about/list_of_features.rst:126
msgid "PathFollow2D node to make nodes follow a Path2D."
msgstr ""

#: ../../docs/about/list_of_features.rst:128
msgid "2D geometry helper class."
msgstr ""

#: ../../docs/about/list_of_features.rst:129
msgid "Line2D node to draw textured 2D lines."
msgstr ""

#: ../../docs/about/list_of_features.rst:132
msgid "2D physics"
msgstr ""

#: ../../docs/about/list_of_features.rst:134
#: ../../docs/about/list_of_features.rst:307
msgid "**Physics bodies:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:136
#: ../../docs/about/list_of_features.rst:309
msgid "Static bodies."
msgstr ""

#: ../../docs/about/list_of_features.rst:137
#: ../../docs/about/list_of_features.rst:310
msgid "Rigid bodies."
msgstr ""

#: ../../docs/about/list_of_features.rst:138
#: ../../docs/about/list_of_features.rst:311
msgid "Kinematic bodies."
msgstr ""

#: ../../docs/about/list_of_features.rst:139
#: ../../docs/about/list_of_features.rst:313
msgid "Joints."
msgstr ""

#: ../../docs/about/list_of_features.rst:140
#: ../../docs/about/list_of_features.rst:316
msgid "Areas to detect bodies entering or leaving it."
msgstr ""

#: ../../docs/about/list_of_features.rst:142
#: ../../docs/about/list_of_features.rst:318
msgid "**Collision detection:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:144
msgid "Built-in shapes: line, box, circle, capsule."
msgstr ""

#: ../../docs/about/list_of_features.rst:145
msgid ""
"Collision polygons (can be drawn manually or generated from a sprite in the "
"editor)."
msgstr ""

#: ../../docs/about/list_of_features.rst:148
msgid "3D graphics"
msgstr ""

#: ../../docs/about/list_of_features.rst:155
msgid "Optional HDR rendering with sRGB (enabled by default)."
msgstr ""

#: ../../docs/about/list_of_features.rst:156
msgid ""
"Uses an optional depth prepass (enabled by default) to reduce the cost of "
"overdraw, which speeds up complex scene rendering."
msgstr ""

#: ../../docs/about/list_of_features.rst:162
msgid "LDR rendering for greater compatibility."
msgstr ""

#: ../../docs/about/list_of_features.rst:163
msgid ""
"Not all features are available. Features available only when using the "
"OpenGL ES 3.0 renderer are marked *GLES3* below."
msgstr ""

#: ../../docs/about/list_of_features.rst:166
msgid "**Camera:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:168
msgid "Perspective, orthographic and frustum-offset cameras."
msgstr ""

#: ../../docs/about/list_of_features.rst:170
msgid "**Physically-based rendering (built-in material features):**"
msgstr ""

#: ../../docs/about/list_of_features.rst:172
msgid "Follows the Disney PBR model."
msgstr ""

#: ../../docs/about/list_of_features.rst:173
msgid ""
"Supports Lambert, Lambert Wrap (half-Lambert), Oren-Nayar and Toon diffuse "
"shading modes."
msgstr ""

#: ../../docs/about/list_of_features.rst:174
msgid ""
"Supports Schlick-GGX, Blinn, Phong, Toon and Disabled specular shading modes."
msgstr ""

#: ../../docs/about/list_of_features.rst:175
msgid "Uses a roughness-metallic workflow with support for ORM textures."
msgstr ""

#: ../../docs/about/list_of_features.rst:176
msgid ""
"Uses horizon specular occlusion (Filament model) to improve material "
"appearance"
msgstr ""

#: ../../docs/about/list_of_features.rst:177
msgid "Normal mapping."
msgstr ""

#: ../../docs/about/list_of_features.rst:178
msgid "Detail mapping for the albedo and normal maps."
msgstr ""

#: ../../docs/about/list_of_features.rst:179
msgid ""
"Distance fade which can use alpha blending or dithering to avoid going "
"through the transparent pipeline."
msgstr ""

#: ../../docs/about/list_of_features.rst:181
msgid "Dithering can be determined on a per-pixel or per-object basis."
msgstr ""

#: ../../docs/about/list_of_features.rst:182
msgid ""
"*GLES3:* Parallax/relief mapping with automatic level of detail based on "
"distance."
msgstr ""

#: ../../docs/about/list_of_features.rst:183
msgid "*GLES3:* Sub-surface scattering and transmittance."
msgstr ""

#: ../../docs/about/list_of_features.rst:184
msgid ""
"*GLES3:* Refraction with support for material roughness (resulting in blurry "
"refraction). On GLES2, refraction is still functional but lacks support for "
"material roughness."
msgstr ""

#: ../../docs/about/list_of_features.rst:186
msgid "*GLES3:* Proximity fade (soft particles)."
msgstr ""

#: ../../docs/about/list_of_features.rst:188
msgid "**Real-time lighting:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:190
msgid "Directional lights (sun/moon). Up to 4 per scene."
msgstr ""

#: ../../docs/about/list_of_features.rst:191
msgid "Omnidirectional lights."
msgstr ""

#: ../../docs/about/list_of_features.rst:192
msgid "Spot lights with adjustable cone angle and attenuation."
msgstr ""

#: ../../docs/about/list_of_features.rst:193
msgid "Specular energy can be adjusted on a per-light basis."
msgstr ""

#: ../../docs/about/list_of_features.rst:194
msgid ""
"*GLES3:* Lighting is done with a single-pass forward approach. By default, "
"up to 32 omni light and 32 spot lights can be displayed per mesh resource. "
"If needed, this limit can be increased at the cost of increased shader "
"compilation times and lower performance. GLES2 uses a multi-pass forward "
"approach to lighting, which doesn't have a limit on the number of lights but "
"is slower with many lights."
msgstr ""

#: ../../docs/about/list_of_features.rst:200
msgid "**Shadow mapping:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:202
msgid ""
"*DirectionalLight:* Orthogonal (fastest), PSSM 2-split and 4-split. Supports "
"blending between splits."
msgstr ""

#: ../../docs/about/list_of_features.rst:204
msgid ""
"*OmniLight:* Dual paraboloid (fast) or cubemap (slower but more accurate). "
"Supports colored projector textures in the form of panoramas."
msgstr ""

#: ../../docs/about/list_of_features.rst:206
msgid "*SpotLight:* Single texture."
msgstr ""

#: ../../docs/about/list_of_features.rst:208
msgid "**Global illumination with indirect lighting:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:210
msgid "Baked lightmaps (fast, but can't be updated at run-time)."
msgstr ""

#: ../../docs/about/list_of_features.rst:212
msgid ""
"Supports baking indirect light only or baking both direct and indirect "
"lighting. The bake mode can be adjusted on a per-light basis to allow for "
"hybrid light baking setups."
msgstr ""

#: ../../docs/about/list_of_features.rst:215
msgid ""
"Supports lighting dynamic objects using an automatic octree-based system. No "
"manual probe placement is required."
msgstr ""

#: ../../docs/about/list_of_features.rst:217
msgid "Lightmaps are baked on the CPU."
msgstr ""

#: ../../docs/about/list_of_features.rst:219
msgid "*GLES3:* GI probes (slower, semi-real-time). Supports reflections."
msgstr ""

#: ../../docs/about/list_of_features.rst:221
msgid "**Reflections:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:223
msgid ""
"Fast baked reflections or slow real-time reflections using ReflectionProbe. "
"Parallax box correction can optionally be enabled."
msgstr ""

#: ../../docs/about/list_of_features.rst:225
msgid ""
"Reflection techniques can be mixed together for greater accuracy or "
"scalability."
msgstr ""

#: ../../docs/about/list_of_features.rst:226
msgid "*GLES3:* Voxel-based reflections (when using GI probes)."
msgstr ""

#: ../../docs/about/list_of_features.rst:227
msgid "*GLES3:* Screen-space reflections."
msgstr ""

#: ../../docs/about/list_of_features.rst:229
msgid "**Sky:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:231
msgid "Panorama sky (using an HDRI)."
msgstr ""

#: ../../docs/about/list_of_features.rst:232
msgid "Procedural sky."
msgstr ""

#: ../../docs/about/list_of_features.rst:234
msgid "**Fog:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:236
msgid "Depth fog with an adjustable attenuation curve."
msgstr ""

#: ../../docs/about/list_of_features.rst:237
msgid "Height fog (floor or ceiling) with adjustable attenuation."
msgstr ""

#: ../../docs/about/list_of_features.rst:238
msgid ""
"Support for automatic depth fog color depending on the camera direction (to "
"match the sun color)."
msgstr ""

#: ../../docs/about/list_of_features.rst:240
msgid "Optional transmittance to make lights more visible in the fog."
msgstr ""

#: ../../docs/about/list_of_features.rst:242
msgid "**Particles:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:245
msgid "*GLES3:* GPU-based particles with support for custom particle shaders."
msgstr ""

#: ../../docs/about/list_of_features.rst:247
msgid "**Post-processing:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:249
msgid "Tonemapping (Linear, Reinhard, Filmic, ACES)."
msgstr ""

#: ../../docs/about/list_of_features.rst:250
msgid ""
"Glow/bloom with optional bicubic upscaling and several blend modes "
"available: Screen, Soft Light, Add, Replace."
msgstr ""

#: ../../docs/about/list_of_features.rst:252
msgid "Color correction using an one-dimensional ramp."
msgstr ""

#: ../../docs/about/list_of_features.rst:253
msgid "Brightness, contrast and saturation adjustments."
msgstr ""

#: ../../docs/about/list_of_features.rst:254
msgid "*GLES3:* Automatic exposure adjustments based on viewport brightness."
msgstr ""

#: ../../docs/about/list_of_features.rst:255
msgid "*GLES3:* Near and far depth of field."
msgstr ""

#: ../../docs/about/list_of_features.rst:256
msgid "*GLES3:* Screen-space ambient occlusion (SSAO)."
msgstr ""

#: ../../docs/about/list_of_features.rst:257
msgid ""
"*GLES3:* Optional debanding to avoid color banding (effective when HDR "
"rendering is enabled)."
msgstr ""

#: ../../docs/about/list_of_features.rst:259
msgid "**Texture filtering:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:261
msgid "Nearest, bilinear, trilinear or anisotropic filtering."
msgstr ""

#: ../../docs/about/list_of_features.rst:263
msgid "**Texture compression:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:265
msgid "Lossless or lossy WebP (does not save VRAM; only reduces storage size)."
msgstr ""

#: ../../docs/about/list_of_features.rst:266
msgid "S3TC (only supported on desktop platforms)."
msgstr ""

#: ../../docs/about/list_of_features.rst:267
msgid "ETC1 (recommended when using the GLES2 renderer)."
msgstr ""

#: ../../docs/about/list_of_features.rst:268
msgid "*GLES3:* BPTC for high-quality compression (not supported on macOS)."
msgstr ""

#: ../../docs/about/list_of_features.rst:269
msgid "*GLES3:* ETC2 (not supported on macOS)."
msgstr ""

#: ../../docs/about/list_of_features.rst:271
msgid "**Anti-aliasing:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:273
msgid "Multi-sample antialiasing (MSAA)."
msgstr ""

#: ../../docs/about/list_of_features.rst:274
msgid "Fast approximate antialiasing (FXAA)."
msgstr ""

#: ../../docs/about/list_of_features.rst:276
msgid "**Performance:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:278
msgid ""
"Occlusion culling with :ref:`rooms and portals <doc_rooms_and_portals>`. "
"Supports gameplay notifications with primary and secondary visibility to "
"disable AI/physics processing for nodes that don't need it."
msgstr ""

#: ../../docs/about/list_of_features.rst:281
msgid ""
"Real-time occluder shapes (sphere and polygon). Not as effective as rooms "
"and portals (and doesn't support gameplay notifications), but easier to set "
"up."
msgstr ""

#: ../../docs/about/list_of_features.rst:286
msgid ""
"Most of the effects listed above can be adjusted for better performance or "
"to further improve quality. This can be helpful when using Godot for offline "
"rendering."
msgstr ""

#: ../../docs/about/list_of_features.rst:291
msgid "3D tools"
msgstr ""

#: ../../docs/about/list_of_features.rst:293
msgid "Built-in meshes: cube, cylinder/cone, (hemi)sphere, prism, plane, quad."
msgstr ""

#: ../../docs/about/list_of_features.rst:294
msgid ""
"Tools for :ref:`procedural geometry generation <doc_procedural_geometry>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:295
msgid ""
":ref:`Constructive solid geometry <doc_csg_tools>` (intended for "
"prototyping)."
msgstr ""

#: ../../docs/about/list_of_features.rst:296
msgid "Path3D node to represent a path in 3D space."
msgstr ""

#: ../../docs/about/list_of_features.rst:299
msgid "PathFollow3D node to make nodes follow a Path3D."
msgstr ""

#: ../../docs/about/list_of_features.rst:301
msgid "3D geometry helper class."
msgstr ""

#: ../../docs/about/list_of_features.rst:302
msgid ""
"Support for exporting the current scene as a glTF 2.0 file from the editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:305
msgid "3D physics"
msgstr ""

#: ../../docs/about/list_of_features.rst:312
msgid "Vehicle bodies (intended for arcade physics, not simulation)."
msgstr ""

#: ../../docs/about/list_of_features.rst:314
msgid "Soft bodies."
msgstr ""

#: ../../docs/about/list_of_features.rst:315
msgid "Ragdolls."
msgstr ""

#: ../../docs/about/list_of_features.rst:320
msgid "Built-in shapes: cuboid, sphere, capsule, cylinder."
msgstr ""

#: ../../docs/about/list_of_features.rst:321
msgid "Generate triangle collision shapes for any mesh from the editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:322
msgid ""
"Generate one or several convex collision shapes for any mesh from the editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:325
#: ../../docs/tutorials/shaders/index.rst:2
msgid "Shaders"
msgstr ""

#: ../../docs/about/list_of_features.rst:327
msgid "*2D:* Custom vertex, fragment, and light shaders."
msgstr ""

#: ../../docs/about/list_of_features.rst:328
msgid "*3D:* Custom vertex, fragment, light, and sky shaders."
msgstr ""

#: ../../docs/about/list_of_features.rst:329
msgid ""
"Text-based shaders using a :ref:`shader language inspired by GLSL "
"<doc_shading_language>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:330
msgid "Visual shader editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:332
msgid "Support for visual shader plugins."
msgstr ""

#: ../../docs/about/list_of_features.rst:335
#: ../../docs/about/docs_changelog.rst:113
#: ../../docs/tutorials/networking/http_request_class.rst:29
#: ../../docs/tutorials/scripting/index.rst:2
msgid "Scripting"
msgstr ""

#: ../../docs/about/list_of_features.rst:337
msgid "**General:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:339
msgid "Object-oriented design pattern with scripts extending nodes."
msgstr ""

#: ../../docs/about/list_of_features.rst:340
msgid "Signals and groups for communicating between scripts."
msgstr ""

#: ../../docs/about/list_of_features.rst:341
msgid ""
"Support for :ref:`cross-language scripting <doc_cross_language_scripting>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:342
msgid ""
"Many 2D and 3D linear algebra data types such as vectors and transforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:344
msgid ":ref:`GDScript: <toc-learn-scripting-gdscript>`"
msgstr ""

#: ../../docs/about/list_of_features.rst:346
msgid ""
":ref:`High-level interpreted language <doc_gdscript>` with :ref:`optional "
"static typing <doc_gdscript_static_typing>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:348
msgid "Syntax inspired by Python."
msgstr ""

#: ../../docs/about/list_of_features.rst:349
msgid "Syntax highlighting is provided on GitHub."
msgstr ""

#: ../../docs/about/list_of_features.rst:350
msgid ""
":ref:`Use threads <doc_using_multiple_threads>` to perform asynchronous "
"actions or make use of multiple processor cores."
msgstr ""

#: ../../docs/about/list_of_features.rst:353
msgid ":ref:`C#: <toc-learn-scripting-C#>`"
msgstr ""

#: ../../docs/about/list_of_features.rst:355
msgid "Packaged in a separate binary to keep file sizes and dependencies down."
msgstr ""

#: ../../docs/about/list_of_features.rst:356
msgid "Uses Mono 6.x."
msgstr ""

#: ../../docs/about/list_of_features.rst:358
msgid "Full support for the C# 7.0 syntax and features."
msgstr ""

#: ../../docs/about/list_of_features.rst:360
msgid "Supports all platforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:361
msgid ""
"Using an external editor is recommended to benefit from IDE functionality."
msgstr ""

#: ../../docs/about/list_of_features.rst:363
msgid ":ref:`VisualScript: <toc-learn-scripting-visual_script>`"
msgstr ""

#: ../../docs/about/list_of_features.rst:365
msgid ""
":ref:`Graph-based visual scripting language <doc_what_is_visual_script>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:366
msgid ""
"Works best when used for specific purposes (such as level-specific logic) "
"rather than as a language to create entire projects."
msgstr ""

#: ../../docs/about/list_of_features.rst:369
msgid "**GDNative (C, C++, Rust, D, ...):**"
msgstr ""

#: ../../docs/about/list_of_features.rst:371
msgid ""
"When you need it, link to native libraries for higher performance and third-"
"party integrations."
msgstr ""

#: ../../docs/about/list_of_features.rst:373
msgid ""
"For scripting game logic, GDScript or C# are recommended if their "
"performance is suitable."
msgstr ""

#: ../../docs/about/list_of_features.rst:376
msgid "Official bindings for C and C++."
msgstr ""

#: ../../docs/about/list_of_features.rst:378
msgid "Use any build system and language features you wish."
msgstr ""

#: ../../docs/about/list_of_features.rst:380
msgid ""
"Maintained D, Kotlin, Python, Nim, and Rust bindings provided by the "
"community."
msgstr ""

#: ../../docs/about/list_of_features.rst:384
#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:114
#: ../../docs/getting_started/step_by_step/scripting_languages.rst:42
#: ../../docs/getting_started/step_by_step/scripting_languages.rst:144
#: ../../docs/tutorials/scripting/visual_script/index.rst:6
#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:8
msgid ""
"`Godot 4.0 will remove VisualScript from core entirely. <https://godotengine."
"org/article/godot-4-will-discontinue-visual-scripting>`__ As a result, "
"creating new projects using visual scripting in Godot is not recommended. "
"Future Godot 4.x releases may have VisualScript reimplemented as an "
"extension."
msgstr ""

#: ../../docs/about/list_of_features.rst:388
#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:118
#: ../../docs/getting_started/step_by_step/scripting_languages.rst:46
#: ../../docs/getting_started/step_by_step/scripting_languages.rst:148
#: ../../docs/tutorials/scripting/visual_script/index.rst:10
#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:12
msgid ""
"While Godot 3.x will keep VisualScript supported, we recommend :ref:`trying "
"out GDScript <toc-learn-scripting-gdscript>` instead, especially if you "
"intend to migrate your project to Godot 4."
msgstr ""

#: ../../docs/about/list_of_features.rst:393
#: ../../docs/about/docs_changelog.rst:28
#: ../../docs/tutorials/audio/index.rst:2
#: ../../docs/tutorials/export/exporting_for_web.rst:167
msgid "Audio"
msgstr ""

#: ../../docs/about/list_of_features.rst:397
msgid "Mono, stereo, 5.1 and 7.1 output."
msgstr ""

#: ../../docs/about/list_of_features.rst:398
msgid "Non-positional and positional playback in 2D and 3D."
msgstr ""

#: ../../docs/about/list_of_features.rst:400
msgid "Optional Doppler effect in 2D and 3D."
msgstr ""

#: ../../docs/about/list_of_features.rst:402
msgid ""
"Support for re-routable :ref:`audio buses <doc_audio_buses>` and effects "
"with dozens of effects included."
msgstr ""

#: ../../docs/about/list_of_features.rst:404
msgid ""
"Listener2D and Listener3D nodes to listen from a position different than the "
"camera."
msgstr ""

#: ../../docs/about/list_of_features.rst:405
msgid ""
"Audio input to record microphones with real-time access using the "
"AudioEffectCapture class."
msgstr ""

#: ../../docs/about/list_of_features.rst:406
msgid "MIDI input."
msgstr ""

#: ../../docs/about/list_of_features.rst:408
msgid "No support for MIDI output yet."
msgstr ""

#: ../../docs/about/list_of_features.rst:410
msgid "**APIs used:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:412
msgid "*Windows:* WASAPI."
msgstr ""

#: ../../docs/about/list_of_features.rst:413
msgid "*macOS:* CoreAudio."
msgstr ""

#: ../../docs/about/list_of_features.rst:414
msgid "*Linux:* PulseAudio or ALSA."
msgstr ""

#: ../../docs/about/list_of_features.rst:417
msgid "Import"
msgstr ""

#: ../../docs/about/list_of_features.rst:419
msgid "Support for :ref:`custom import plugins <doc_import_plugins>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:421
msgid "**Formats:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:423
msgid "*Images:* See :ref:`doc_import_images`."
msgstr ""

#: ../../docs/about/list_of_features.rst:424
msgid "*Audio:*"
msgstr ""

#: ../../docs/about/list_of_features.rst:426
msgid "WAV with optional IMA-ADPCM compression."
msgstr ""

#: ../../docs/about/list_of_features.rst:427
msgid "Ogg Vorbis."
msgstr ""

#: ../../docs/about/list_of_features.rst:428
msgid "MP3."
msgstr ""

#: ../../docs/about/list_of_features.rst:430
msgid "*3D scenes:*"
msgstr ""

#: ../../docs/about/list_of_features.rst:432
msgid "glTF 2.0 *(recommended)*."
msgstr ""

#: ../../docs/about/list_of_features.rst:433
msgid ""
"`ESCN <https://github.com/godotengine/godot-blender-exporter>`__ (direct "
"export from Blender)."
msgstr ""

#: ../../docs/about/list_of_features.rst:435
msgid "FBX (experimental, static meshes only)."
msgstr ""

#: ../../docs/about/list_of_features.rst:436
msgid "Collada (.dae)."
msgstr ""

#: ../../docs/about/list_of_features.rst:437
msgid "Wavefront OBJ (static scenes only, can be loaded directly as a mesh)."
msgstr ""

#: ../../docs/about/list_of_features.rst:439
msgid ""
"3D meshes use `Mikktspace <http://www.mikktspace.com/>`__ to generate "
"tangents on import, which ensures consistency with other 3D applications "
"such as Blender."
msgstr ""

#: ../../docs/about/list_of_features.rst:443
#: ../../docs/tutorials/rendering/viewports.rst:38
#: ../../docs/tutorials/ui/custom_gui_controls.rst:112
msgid "Input"
msgstr ""

#: ../../docs/about/list_of_features.rst:445
msgid ""
"Input mapping system using hardcoded input events or remappable input "
"actions."
msgstr ""

#: ../../docs/about/list_of_features.rst:447
msgid ""
"Axis values can be mapped to two different actions with a configurable "
"deadzone."
msgstr ""

#: ../../docs/about/list_of_features.rst:448
msgid "Use the same code to support both keyboards and gamepads."
msgstr ""

#: ../../docs/about/list_of_features.rst:450
msgid "Keyboard input."
msgstr ""

#: ../../docs/about/list_of_features.rst:452
msgid ""
"Keys can be mapped in \"physical\" mode to be independent of the keyboard "
"layout."
msgstr ""

#: ../../docs/about/list_of_features.rst:454
msgid "Mouse input."
msgstr ""

#: ../../docs/about/list_of_features.rst:456
msgid ""
"The mouse cursor can be visible, hidden, captured or confined within the "
"window."
msgstr ""

#: ../../docs/about/list_of_features.rst:457
msgid ""
"When captured, raw input will be used on Windows and Linux to sidestep the "
"OS' mouse acceleration settings."
msgstr ""

#: ../../docs/about/list_of_features.rst:460
msgid "Gamepad input (up to 8 simultaneous controllers)."
msgstr ""

#: ../../docs/about/list_of_features.rst:461
msgid "Pen/tablet input with pressure support."
msgstr ""

#: ../../docs/about/list_of_features.rst:462
msgid ""
"Gamepad, keyboard and mouse input support are also available on Android."
msgstr ""

#: ../../docs/about/list_of_features.rst:465
#: ../../docs/tutorials/navigation/index.rst:2
msgid "Navigation"
msgstr ""

#: ../../docs/about/list_of_features.rst:467
msgid "A* algorithm in 2D and 3D."
msgstr ""

#: ../../docs/about/list_of_features.rst:468
msgid "Navigation meshes with dynamic obstacle avoidance."
msgstr ""

#: ../../docs/about/list_of_features.rst:469
msgid ""
"Generate navigation meshes from the editor or at run-time (including from an "
"exported project)."
msgstr ""

#: ../../docs/about/list_of_features.rst:472
#: ../../docs/about/docs_changelog.rst:60
#: ../../docs/tutorials/export/exporting_for_web.rst:179
#: ../../docs/tutorials/networking/index.rst:2
msgid "Networking"
msgstr ""

#: ../../docs/about/list_of_features.rst:474
msgid "Low-level TCP networking using StreamPeer and TCP_Server."
msgstr ""

#: ../../docs/about/list_of_features.rst:475
msgid "Low-level UDP networking using PacketPeer and UDPServer."
msgstr ""

#: ../../docs/about/list_of_features.rst:476
msgid "Low-level HTTP requests using HTTPClient."
msgstr ""

#: ../../docs/about/list_of_features.rst:477
msgid "High-level HTTP requests using HTTPRequest."
msgstr ""

#: ../../docs/about/list_of_features.rst:479
msgid "Supports HTTPS out of the box using bundled certificates."
msgstr ""

#: ../../docs/about/list_of_features.rst:481
msgid "High-level multiplayer API using UDP and ENet."
msgstr ""

#: ../../docs/about/list_of_features.rst:483
msgid "Automatic replication using remote procedure calls (RPCs)."
msgstr ""

#: ../../docs/about/list_of_features.rst:484
msgid "Supports unreliable, reliable and ordered transfers."
msgstr ""

#: ../../docs/about/list_of_features.rst:486
msgid "WebSocket client and server, available on all platforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:487
msgid "WebRTC client and server, available on all platforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:488
msgid ""
"Support for UPnP to sidestep the requirement to forward ports when hosting a "
"server behind a NAT."
msgstr ""

#: ../../docs/about/list_of_features.rst:492
#: ../../docs/about/docs_changelog.rst:45 ../../docs/tutorials/i18n/index.rst:2
msgid "Internationalization"
msgstr ""

#: ../../docs/about/list_of_features.rst:494
msgid "Full support for Unicode including emoji."
msgstr ""

#: ../../docs/about/list_of_features.rst:495
msgid ""
"Store localization strings using :ref:`CSV <doc_internationalizing_games>` "
"or :ref:`gettext <doc_localization_using_gettext>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:497
msgid ""
"Use localized strings in your project automatically in GUI elements or by "
"using the ``tr()`` function."
msgstr ""

#: ../../docs/about/list_of_features.rst:499
msgid ""
"Support for right-to-left typesetting and text shaping planned in Godot 4.0."
msgstr ""

#: ../../docs/about/list_of_features.rst:502
msgid "Windowing and OS integration"
msgstr ""

#: ../../docs/about/list_of_features.rst:504
msgid "Move, resize, minimize, and maximize the window spawned by the project."
msgstr ""

#: ../../docs/about/list_of_features.rst:505
msgid "Change the window title and icon."
msgstr ""

#: ../../docs/about/list_of_features.rst:506
msgid ""
"Request attention (will cause the title bar to blink on most platforms)."
msgstr ""

#: ../../docs/about/list_of_features.rst:507
msgid "Fullscreen mode."
msgstr ""

#: ../../docs/about/list_of_features.rst:509
msgid ""
"Doesn't use exclusive fullscreen, so the screen resolution can't be changed "
"this way. Use a Viewport with a different resolution instead."
msgstr ""

#: ../../docs/about/list_of_features.rst:512
msgid "Borderless window (fullscreen or non-fullscreen)."
msgstr ""

#: ../../docs/about/list_of_features.rst:513
msgid "Ability to keep the window always on top."
msgstr ""

#: ../../docs/about/list_of_features.rst:514
msgid "Transparent window with per-pixel transparency."
msgstr ""

#: ../../docs/about/list_of_features.rst:515
msgid "Global menu integration on macOS."
msgstr ""

#: ../../docs/about/list_of_features.rst:516
msgid "Execute commands in a blocking or non-blocking manner."
msgstr ""

#: ../../docs/about/list_of_features.rst:517
msgid ""
"Open file paths and URLs using default or custom protocol handlers (if "
"registered on the system)."
msgstr ""

#: ../../docs/about/list_of_features.rst:518
msgid "Parse custom command line arguments."
msgstr ""

#: ../../docs/about/list_of_features.rst:519
msgid ""
":ref:`Headless/server binaries <doc_exporting_for_dedicated_servers>` can be "
"downloaded for Linux and :ref:`compiled for macOS <doc_compiling_for_osx>`. "
"Any binary can be used without a window using the ``--no-window`` :ref:"
"`command line argument <doc_command_line_tutorial>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:525
msgid "Mobile"
msgstr ""

#: ../../docs/about/list_of_features.rst:527
msgid "In-app purchases on Android and iOS."
msgstr ""

#: ../../docs/about/list_of_features.rst:528
msgid "Support for advertisements using third-party modules."
msgstr ""

#: ../../docs/about/list_of_features.rst:529
msgid "Support for subview embedding on Android."
msgstr ""

#: ../../docs/about/list_of_features.rst:532
msgid "XR support (AR and VR)"
msgstr ""

#: ../../docs/about/list_of_features.rst:534
msgid "Support for ARKit on iOS out of the box."
msgstr ""

#: ../../docs/about/list_of_features.rst:535
msgid "Support for the OpenXR APIs."
msgstr ""

#: ../../docs/about/list_of_features.rst:537
msgid ""
"Includes support for popular headsets like the Meta Quest and the Valve "
"Index."
msgstr ""

#: ../../docs/about/list_of_features.rst:539
msgid "Support for the OpenVR APIs."
msgstr ""

#: ../../docs/about/list_of_features.rst:542
msgid "GUI system"
msgstr ""

#: ../../docs/about/list_of_features.rst:544
msgid ""
"Godot's GUI is built using the same Control nodes used to make games in "
"Godot. The editor UI can easily be extended in many ways using add-ons."
msgstr ""

#: ../../docs/about/list_of_features.rst:547
msgid "**Nodes:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:549
msgid "Buttons."
msgstr ""

#: ../../docs/about/list_of_features.rst:550
msgid "Checkboxes, check buttons, radio buttons."
msgstr ""

#: ../../docs/about/list_of_features.rst:551
msgid "Text entry using LineEdit (single line) and TextEdit (multiple lines)."
msgstr ""

#: ../../docs/about/list_of_features.rst:552
msgid "Dropdown menus using PopupMenu and OptionButton."
msgstr ""

#: ../../docs/about/list_of_features.rst:553
msgid "Scrollbars."
msgstr ""

#: ../../docs/about/list_of_features.rst:554
msgid "Labels."
msgstr ""

#: ../../docs/about/list_of_features.rst:555
msgid ""
"RichTextLabel for :ref:`text formatted using BBCode "
"<doc_bbcode_in_richtextlabel>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:556
msgid "Trees (can also be used to represent tables)."
msgstr ""

#: ../../docs/about/list_of_features.rst:557
msgid "Color picker with RGB and HSV modes."
msgstr ""

#: ../../docs/about/list_of_features.rst:558
msgid ""
"Containers (horizontal, vertical, grid, flow, center, margin, aspect ratio, "
"draggable splitter, ...)."
msgstr ""

#: ../../docs/about/list_of_features.rst:559
msgid "Controls can be rotated and scaled."
msgstr ""

#: ../../docs/about/list_of_features.rst:561
msgid "**Sizing:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:563
msgid "Anchors to keep GUI elements in a specific corner, edge or centered."
msgstr ""

#: ../../docs/about/list_of_features.rst:564
msgid "Containers to place GUI elements automatically following certain rules."
msgstr ""

#: ../../docs/about/list_of_features.rst:566
msgid ":ref:`Stack <class_BoxContainer>` layouts."
msgstr ""

#: ../../docs/about/list_of_features.rst:567
msgid ":ref:`Grid <class_GridContainer>` layouts."
msgstr ""

#: ../../docs/about/list_of_features.rst:568
msgid ""
":ref:`Margin <class_MarginContainer>` and :ref:`centered "
"<class_CenterContainer>` layouts."
msgstr ""

#: ../../docs/about/list_of_features.rst:570
msgid ":ref:`Draggable splitter <class_SplitContainer>` layouts."
msgstr ""

#: ../../docs/about/list_of_features.rst:572
msgid ""
"Scale to multiple resolutions using the ``2d`` or ``viewport`` stretch modes."
msgstr ""

#: ../../docs/about/list_of_features.rst:573
msgid ""
"Support any aspect ratio using anchors and the ``expand`` stretch aspect."
msgstr ""

#: ../../docs/about/list_of_features.rst:575
msgid "**Theming:**"
msgstr ""

#: ../../docs/about/list_of_features.rst:577
msgid "Built-in theme editor."
msgstr ""

#: ../../docs/about/list_of_features.rst:579
msgid "Generate a theme based on the current editor theme settings."
msgstr ""

#: ../../docs/about/list_of_features.rst:581
msgid "Procedural vector-based theming using :ref:`class_StyleBoxFlat`."
msgstr ""

#: ../../docs/about/list_of_features.rst:583
msgid ""
"Supports rounded/beveled corners, drop shadows, per-border widths and "
"antialiasing."
msgstr ""

#: ../../docs/about/list_of_features.rst:585
msgid "Texture-based theming using :ref:`class_StyleBoxTexture`."
msgstr ""

#: ../../docs/about/list_of_features.rst:587
msgid ""
"Godot's small distribution size can make it a suitable alternative to "
"frameworks like Electron or Qt."
msgstr ""

#: ../../docs/about/list_of_features.rst:591
#: ../../docs/about/docs_changelog.rst:153
#: ../../docs/tutorials/animation/index.rst:2
#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:2
#: ../../docs/development/file_formats/tscn.rst:382
msgid "Animation"
msgstr ""

#: ../../docs/about/list_of_features.rst:593
msgid "Direct kinematics and inverse kinematics."
msgstr ""

#: ../../docs/about/list_of_features.rst:594
msgid ""
":ref:`Tween <class_Tween>` node to easily perform procedural animations by "
"code."
msgstr ""

#: ../../docs/about/list_of_features.rst:595
msgid "Support for animating any property with customizable interpolation."
msgstr ""

#: ../../docs/about/list_of_features.rst:596
msgid "Support for calling methods in animation tracks."
msgstr ""

#: ../../docs/about/list_of_features.rst:597
msgid "Support for playing sounds in animation tracks."
msgstr ""

#: ../../docs/about/list_of_features.rst:598
msgid "Support for Bézier curves in animation."
msgstr ""

#: ../../docs/about/list_of_features.rst:601
msgid "File formats"
msgstr ""

#: ../../docs/about/list_of_features.rst:603
msgid ""
"Scenes and resources can be saved in :ref:`text-based "
"<doc_tscn_file_format>` or binary formats."
msgstr ""

#: ../../docs/about/list_of_features.rst:605
msgid ""
"Text-based formats are human-readable and more friendly to version control."
msgstr ""

#: ../../docs/about/list_of_features.rst:606
msgid "Binary formats are faster to save/load for large scenes/resources."
msgstr ""

#: ../../docs/about/list_of_features.rst:608
msgid "Read and write text or binary files using :ref:`class_File`."
msgstr ""

#: ../../docs/about/list_of_features.rst:610
msgid "Can optionally be compressed or encrypted."
msgstr ""

#: ../../docs/about/list_of_features.rst:612
msgid "Read and write :ref:`class_JSON` files."
msgstr ""

#: ../../docs/about/list_of_features.rst:613
msgid ""
"Read and write INI-style configuration files using :ref:`class_ConfigFile`."
msgstr ""

#: ../../docs/about/list_of_features.rst:615
msgid "Can (de)serialize any Godot datatype, including Vector2/3, Color, ..."
msgstr ""

#: ../../docs/about/list_of_features.rst:617
msgid "Read XML files using :ref:`class_XMLParser`."
msgstr ""

#: ../../docs/about/list_of_features.rst:618
msgid ""
"Pack game data into a PCK file (custom format optimized for fast seeking), "
"into a ZIP archive, or directly into the executable for single-file "
"distribution."
msgstr ""

#: ../../docs/about/list_of_features.rst:620
msgid ""
":ref:`Export additional PCK files<doc_exporting_pcks>` that can be read by "
"the engine to support mods and DLCs."
msgstr ""

#: ../../docs/about/list_of_features.rst:624
#: ../../docs/about/docs_changelog.rst:205
msgid "Miscellaneous"
msgstr ""

#: ../../docs/about/list_of_features.rst:626
msgid ""
":ref:`Low-level access to servers <doc_using_servers>` which allows "
"bypassing the scene tree's overhead when needed."
msgstr ""

#: ../../docs/about/list_of_features.rst:628
msgid ""
":ref:`Command line interface <doc_command_line_tutorial>` for automation."
msgstr ""

#: ../../docs/about/list_of_features.rst:630
msgid "Export and deploy projects using continuous integration platforms."
msgstr ""

#: ../../docs/about/list_of_features.rst:631
msgid ""
"`Shell completion scripts <https://github.com/godotengine/godot/tree/master/"
"misc/dist/shell>`__ are available for Bash, zsh and fish."
msgstr ""

#: ../../docs/about/list_of_features.rst:634
msgid ""
"Support for :ref:`C++ modules <doc_custom_modules_in_c++>` statically linked "
"into the engine binary."
msgstr ""

#: ../../docs/about/list_of_features.rst:636
msgid "Engine and editor written in C++03."
msgstr ""

#: ../../docs/about/list_of_features.rst:638
msgid ""
"Can be :ref:`compiled <doc_introduction_to_the_buildsystem>` using GCC, "
"Clang and MSVC. MinGW is also supported."
msgstr ""

#: ../../docs/about/list_of_features.rst:640
msgid ""
"Friendly towards packagers. In most cases, system libraries can be used "
"instead of the ones provided by Godot. The build system doesn't download "
"anything. Builds can be fully reproducible."
msgstr ""

#: ../../docs/about/list_of_features.rst:643
msgid "Godot 4.0 will be written in C++17."
msgstr ""

#: ../../docs/about/list_of_features.rst:645
msgid "Licensed under the permissive MIT license."
msgstr ""

#: ../../docs/about/list_of_features.rst:647
msgid ""
"Open developement process with :ref:`contributions welcome "
"<doc_ways_to_contribute>`."
msgstr ""

#: ../../docs/about/list_of_features.rst:651
msgid ""
"The `Godot proposals repository <https://github.com/godotengine/godot-"
"proposals>`__ lists features that have been requested by the community and "
"may be implemented in future Godot releases."
msgstr ""

#: ../../docs/about/docs_changelog.rst:4
msgid "Documentation changelog"
msgstr ""

#: ../../docs/about/docs_changelog.rst:6
msgid ""
"The documentation is continually being improved. The release of version 3.2 "
"includes many new tutorials, many fixes and updates for old tutorials, and "
"many updates to the :ref:`class reference <toc-class-ref>`. Below is a list "
"of new tutorials added since version 3.1."
msgstr ""

#: ../../docs/about/docs_changelog.rst:11
msgid ""
"This document only contains new tutorials so not all changes are reflected, "
"many tutorials have been substantially updated but are not reflected in this "
"document."
msgstr ""

#: ../../docs/about/docs_changelog.rst:15
msgid "New tutorials since version 3.1"
msgstr ""

#: ../../docs/about/docs_changelog.rst:18
#: ../../docs/about/docs_changelog.rst:118
msgid "Project workflow"
msgstr ""

#: ../../docs/about/docs_changelog.rst:20
msgid ":ref:`doc_android_custom_build`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:23
#: ../../docs/about/docs_changelog.rst:134 ../../docs/tutorials/2d/index.rst:2
#: ../../docs/tutorials/performance/index.rst:72
msgid "2D"
msgstr ""

#: ../../docs/about/docs_changelog.rst:25
msgid ":ref:`doc_2d_sprite_animation`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:30
msgid ":ref:`doc_recording_with_microphone`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:31
msgid ":ref:`doc_sync_with_audio`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:34 ../../docs/tutorials/math/index.rst:2
msgid "Math"
msgstr ""

#: ../../docs/about/docs_changelog.rst:36
msgid ":ref:`doc_beziers_and_curves`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:37
msgid ":ref:`doc_interpolation`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:40
#: ../../docs/tutorials/inputs/index.rst:2
msgid "Inputs"
msgstr ""

#: ../../docs/about/docs_changelog.rst:42
msgid ":ref:`doc_input_examples`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:47
msgid ":ref:`doc_localization_using_gettext`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:50
#: ../../docs/about/docs_changelog.rst:170
msgid "Shading"
msgstr ""

#: ../../docs/about/docs_changelog.rst:55
msgid "Your First Shader Series:"
msgstr ""

#: ../../docs/about/docs_changelog.rst:53
#: ../../docs/about/docs_changelog.rst:177
msgid ":ref:`doc_introduction_to_shaders`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:54
msgid ":ref:`doc_your_first_canvasitem_shader`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:55
msgid ":ref:`doc_your_first_spatial_shader`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:56
msgid ":ref:`doc_your_second_spatial_shader`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:57
msgid ":ref:`doc_visual_shaders`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:62
msgid ":ref:`doc_webrtc`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:65
msgid "VR"
msgstr ""

#: ../../docs/about/docs_changelog.rst:67
msgid ":ref:`doc_vr_starter_tutorial_part_one`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:68
msgid ":ref:`doc_vr_starter_tutorial_part_two`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:71
#: ../../docs/about/docs_changelog.rst:184
#: ../../docs/tutorials/plugins/index.rst:2
msgid "Plugins"
msgstr ""

#: ../../docs/about/docs_changelog.rst:73
msgid ":ref:`doc_android_plugin`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:74
msgid ":ref:`doc_inspector_plugins`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:75
msgid ":ref:`doc_visual_shader_plugins`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:78
#: ../../docs/about/docs_changelog.rst:195
#: ../../docs/tutorials/performance/index.rst:91
msgid "Multi-threading"
msgstr ""

#: ../../docs/about/docs_changelog.rst:80
msgid ":ref:`doc_using_multiple_threads`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:83
#: ../../docs/about/docs_changelog.rst:200
msgid "Creating content"
msgstr ""

#: ../../docs/about/docs_changelog.rst:90
msgid "Procedural geometry series:"
msgstr ""

#: ../../docs/about/docs_changelog.rst:86
msgid ":ref:`Procedural geometry <toc-procedural_geometry>`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:87
msgid ":ref:`doc_arraymesh`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:88
msgid ":ref:`doc_surfacetool`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:89
msgid ":ref:`doc_meshdatatool`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:90
msgid ":ref:`doc_immediategeometry`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:93
#: ../../docs/tutorials/performance/index.rst:4
msgid "Optimization"
msgstr ""

#: ../../docs/about/docs_changelog.rst:95
msgid ":ref:`doc_using_multimesh`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:96
msgid ":ref:`doc_using_servers`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:99
msgid "Legal"
msgstr ""

#: ../../docs/about/docs_changelog.rst:101
msgid ":ref:`doc_complying_with_licenses`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:104
msgid "New tutorials since version 3.0"
msgstr ""

#: ../../docs/about/docs_changelog.rst:107
#: ../../docs/getting_started/step_by_step/index.rst:2
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:108
#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:25
msgid "Step by step"
msgstr ""

#: ../../docs/about/docs_changelog.rst:109
msgid ":ref:`doc_signals`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:110
msgid ":ref:`doc_exporting_basics`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:115
msgid ":ref:`doc_gdscript_static_typing`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:120
msgid "Best Practices:"
msgstr ""

#: ../../docs/about/docs_changelog.rst:122
msgid ":ref:`doc_introduction_best_practices`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:123
msgid ":ref:`doc_what_are_godot_classes`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:124
msgid ":ref:`doc_scene_organization`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:125
msgid ":ref:`doc_scenes_versus_scripts`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:126
msgid ":ref:`doc_autoloads_versus_internal_nodes`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:127
msgid ":ref:`doc_node_alternatives`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:128
msgid ":ref:`doc_godot_interfaces`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:129
msgid ":ref:`doc_godot_notifications`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:130
msgid ":ref:`doc_data_preferences`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:131
msgid ":ref:`doc_logic_preferences`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:136
msgid ":ref:`doc_2d_lights_and_shadows`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:137
msgid ":ref:`doc_2d_meshes`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:140 ../../docs/tutorials/3d/index.rst:2
#: ../../docs/tutorials/performance/index.rst:81
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:33
msgid "3D"
msgstr ""

#: ../../docs/about/docs_changelog.rst:142
msgid ":ref:`doc_csg_tools`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:143
msgid ":ref:`doc_animating_thousands_of_fish`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:144
msgid ":ref:`doc_controlling_thousands_of_fish`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:147
#: ../../docs/tutorials/performance/cpu_optimization.rst:246
#: ../../docs/tutorials/physics/index.rst:2
msgid "Physics"
msgstr ""

#: ../../docs/about/docs_changelog.rst:149
msgid ":ref:`doc_ragdoll_system`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:150
msgid ":ref:`doc_soft_body`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:155
msgid ":ref:`doc_2d_skeletons`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:156
msgid ":ref:`doc_animation_tree`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:159
msgid "GUI"
msgstr ""

#: ../../docs/about/docs_changelog.rst:161
msgid ":ref:`doc_gui_containers`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:164
msgid "Viewports"
msgstr ""

#: ../../docs/about/docs_changelog.rst:166
msgid ":ref:`doc_viewport_as_texture`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:167
msgid ":ref:`doc_custom_postprocessing`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:172
msgid ":ref:`doc_converting_glsl_to_godot_shaders`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:173
msgid ":ref:`doc_advanced_postprocessing`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:175
msgid "Shading Reference:"
msgstr ""

#: ../../docs/about/docs_changelog.rst:178
msgid ":ref:`doc_shading_language`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:179
msgid ":ref:`doc_spatial_shader`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:180
msgid ":ref:`doc_canvas_item_shader`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:181
msgid ":ref:`doc_particle_shader`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:186
msgid ":ref:`doc_making_main_screen_plugins`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:187
msgid ":ref:`doc_spatial_gizmo_plugins`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:190
#: ../../docs/tutorials/platform/index.rst:2
msgid "Platform-specific"
msgstr ""

#: ../../docs/about/docs_changelog.rst:192
msgid ":ref:`doc_customizing_html5_shell`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:197
msgid ":ref:`doc_thread_safe_apis`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:202
msgid ":ref:`doc_making_trees`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:207
msgid ":ref:`doc_jitter_stutter`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:208
msgid ":ref:`doc_running_code_in_the_editor`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:209
msgid ":ref:`doc_change_scenes_manually`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:210
msgid ":ref:`doc_gles2_gles3_differences`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:213
#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:349
#: ../../docs/development/compiling/index.rst:2
#: ../../docs/development/compiling/compiling_for_windows.rst:112
#: ../../docs/development/compiling/compiling_for_x11.rst:103
#: ../../docs/development/compiling/compiling_for_osx.rst:45
#: ../../docs/development/compiling/compiling_for_ios.rst:28
#: ../../docs/development/compiling/compiling_for_uwp.rst:41
msgid "Compiling"
msgstr ""

#: ../../docs/about/docs_changelog.rst:215
msgid ":ref:`doc_optimizing_for_size`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:216
msgid ":ref:`doc_compiling_with_script_encryption_key`"
msgstr ""

#: ../../docs/about/docs_changelog.rst:219
#: ../../docs/development/cpp/index.rst:2
msgid "Engine development"
msgstr ""

#: ../../docs/about/docs_changelog.rst:221
msgid ":ref:`doc_binding_to_external_libraries`"
msgstr ""

#: ../../docs/about/release_policy.rst:4
msgid "Godot release policy"
msgstr ""

#: ../../docs/about/release_policy.rst:6
msgid ""
"Godot's release policy is in constant evolution. What is described below is "
"intended to give a general idea of what to expect, but what will actually "
"happen depends on the choices of core contributors, and the needs of the "
"community at a given time."
msgstr ""

#: ../../docs/about/release_policy.rst:12
msgid "Godot versioning"
msgstr ""

#: ../../docs/about/release_policy.rst:14
msgid ""
"Godot loosely follows `Semantic Versioning <https://semver.org/>`__ with a "
"``major.minor.patch`` versioning system, albeit with an interpretation of "
"each term adapted to the complexity of a game engine:"
msgstr ""

#: ../../docs/about/release_policy.rst:18
msgid ""
"The ``major`` version is incremented when major compatibility breakages "
"happen which imply significant porting work to move projects from one major "
"version to another."
msgstr ""

#: ../../docs/about/release_policy.rst:22
msgid ""
"For example, porting Godot projects from Godot 2.1 to Godot 3.0 required "
"running the project through a conversion tool, and then performing a number "
"of further adjustments manually for what the tool could not do automatically."
msgstr ""

#: ../../docs/about/release_policy.rst:26
msgid ""
"The ``minor`` version is incremented for feature releases which do not break "
"compatibility in a major way. Minor compatibility breakage in very specific "
"areas *may* happen in minor versions, but the vast majority of projects "
"should not be affected or require significant porting work."
msgstr ""

#: ../../docs/about/release_policy.rst:31
msgid ""
"The reason for this is that as a game engine, Godot covers many areas such "
"as rendering, physics, scripting, etc., and fixing bugs or implementing new "
"features in a given area may sometimes require changing the behavior of a "
"feature, or modifying the interface of a given class, even if the rest of "
"the engine API remains backwards compatible."
msgstr ""

#: ../../docs/about/release_policy.rst:39
msgid ""
"Upgrading to a new minor version is therefore recommended for all users, but "
"some testing is necessary to ensure that your project still behaves as "
"expected in a new minor version."
msgstr ""

#: ../../docs/about/release_policy.rst:43
msgid ""
"The ``patch`` version is incremented for maintenance releases which focus on "
"fixing bugs and security issues, implementing new requirements for platform "
"support, and backporting safe usability enhancements. Patch releases are "
"backwards compatible."
msgstr ""

#: ../../docs/about/release_policy.rst:48
msgid ""
"Patch versions may include minor new features which do not impact the "
"existing API, and thus have no risk of impacting existing projects."
msgstr ""

#: ../../docs/about/release_policy.rst:53
msgid ""
"Updating to new patch versions is therefore considered safe and strongly "
"recommended to all users of a given stable branch."
msgstr ""

#: ../../docs/about/release_policy.rst:56
msgid ""
"We call ``major.minor`` combinations *stable branches*. Each stable branch "
"starts with a ``major.minor`` release (without the ``0`` for ``patch``) and "
"is further developed for maintenance releases in a Git branch of the same "
"name (for example patch updates for the 3.3 stable branch are developed in "
"the ``3.3`` Git branch)."
msgstr ""

#: ../../docs/about/release_policy.rst:64
msgid ""
"As mentioned in the introduction, Godot's release policy is evolving, and "
"earlier Godot releases may not have followed the above rules to the letter. "
"In particular, the 3.2 stable branch received a number of new features in "
"3.2.2 which would have warranted a ``minor`` version increment."
msgstr ""

#: ../../docs/about/release_policy.rst:70
msgid "Release support timeline"
msgstr ""

#: ../../docs/about/release_policy.rst:72
msgid ""
"Stable branches are supported *at minimum* until the next stable branch is "
"released and has received its first patch update. In practice, we support "
"stable branches on a *best effort* basis for as long as they have active "
"users who need maintenance updates."
msgstr ""

#: ../../docs/about/release_policy.rst:77
msgid ""
"Whenever a new major version is released, we make the previous stable branch "
"a long-term supported release, and do our best to provide fixes for issues "
"encountered by users of that branch who cannot port complex projects to the "
"new major version. This was the case for the 2.1 branch, and will be the "
"case for the latest 3.x stable branch by the time Godot 4.0 is released."
msgstr ""

#: ../../docs/about/release_policy.rst:83
msgid ""
"In a given minor release series, only the latest patch release receives "
"support. If you experience an issue using an older patch release, please "
"upgrade to the latest patch release of that series and test again before "
"reporting an issue on GitHub."
msgstr ""

#: ../../docs/about/release_policy.rst:89
msgid "**Version**"
msgstr ""

#: ../../docs/about/release_policy.rst:89
msgid "**Release date**"
msgstr ""

#: ../../docs/about/release_policy.rst:89
msgid "**Support level**"
msgstr ""

#: ../../docs/about/release_policy.rst:91
msgid "Godot 4.0"
msgstr ""

#: ../../docs/about/release_policy.rst:91
msgid "Q1 2023 (estimate)"
msgstr ""

#: ../../docs/about/release_policy.rst:91
msgid "|unstable| *Beta.* Current focus of development (unstable)."
msgstr ""

#: ../../docs/about/release_policy.rst:122
msgid "unstable"
msgstr ""

#: ../../docs/about/release_policy.rst:93
msgid "Godot 3.6 (LTS)"
msgstr ""

#: ../../docs/about/release_policy.rst:93
msgid "Q1-Q2 2023 (estimate)"
msgstr ""

#: ../../docs/about/release_policy.rst:93
msgid ""
"|supported| *Beta.* Receives new features as well as bug fixes while under "
"development. Will be released *after* 4.0."
msgstr ""

#: ../../docs/about/release_policy.rst:119
msgid "supported"
msgstr ""

#: ../../docs/about/release_policy.rst:96
msgid "Godot 3.5"
msgstr ""

#: ../../docs/about/release_policy.rst:96
msgid "August 2022"
msgstr ""

#: ../../docs/about/release_policy.rst:96
msgid ""
"|supported| Receives fixes for bugs, security and platform support issues, "
"as well as backwards-compatible usability enhancements."
msgstr ""

#: ../../docs/about/release_policy.rst:99
msgid "Godot 3.4"
msgstr ""

#: ../../docs/about/release_policy.rst:99
msgid "November 2021"
msgstr ""

#: ../../docs/about/release_policy.rst:99
msgid "|partial| Receives fixes for security and platform support issues only."
msgstr ""

#: ../../docs/about/release_policy.rst:120
msgid "partial"
msgstr ""

#: ../../docs/about/release_policy.rst:101
msgid "Godot 3.3"
msgstr ""

#: ../../docs/about/release_policy.rst:101
msgid "April 2021"
msgstr ""

#: ../../docs/about/release_policy.rst:101
msgid ""
"|eol| No longer supported as fully superseded by the compatible 3.4 release "
"(last update: 3.3.4)."
msgstr ""

#: ../../docs/about/release_policy.rst:121
msgid "eol"
msgstr ""

#: ../../docs/about/release_policy.rst:104
msgid "Godot 3.2"
msgstr ""

#: ../../docs/about/release_policy.rst:104
msgid "January 2020"
msgstr ""

#: ../../docs/about/release_policy.rst:104
msgid "|eol| No longer supported (last update: 3.2.3)."
msgstr ""

#: ../../docs/about/release_policy.rst:106
msgid "Godot 3.1"
msgstr ""

#: ../../docs/about/release_policy.rst:106
msgid "March 2019"
msgstr ""

#: ../../docs/about/release_policy.rst:106
msgid "|eol| No longer supported (last update: 3.1.2)."
msgstr ""

#: ../../docs/about/release_policy.rst:108
msgid "Godot 3.0"
msgstr ""

#: ../../docs/about/release_policy.rst:108
msgid "January 2018"
msgstr ""

#: ../../docs/about/release_policy.rst:108
msgid "|eol| No longer supported (last update: 3.0.6)."
msgstr ""

#: ../../docs/about/release_policy.rst:110
msgid "Godot 2.1"
msgstr ""

#: ../../docs/about/release_policy.rst:110
msgid "July 2016"
msgstr ""

#: ../../docs/about/release_policy.rst:110
msgid "|eol| No longer supported (last update: 2.1.6)."
msgstr ""

#: ../../docs/about/release_policy.rst:112
msgid "Godot 2.0"
msgstr ""

#: ../../docs/about/release_policy.rst:112
msgid "February 2016"
msgstr ""

#: ../../docs/about/release_policy.rst:112
msgid "|eol| No longer supported (last update: 2.0.4.1)."
msgstr ""

#: ../../docs/about/release_policy.rst:114
msgid "Godot 1.1"
msgstr ""

#: ../../docs/about/release_policy.rst:114
msgid "May 2015"
msgstr ""

#: ../../docs/about/release_policy.rst:114
#: ../../docs/about/release_policy.rst:116
msgid "|eol| No longer supported."
msgstr ""

#: ../../docs/about/release_policy.rst:116
msgid "Godot 1.0"
msgstr ""

#: ../../docs/about/release_policy.rst:116
msgid "December 2014"
msgstr ""

#: ../../docs/about/release_policy.rst:124
msgid ""
"**Legend:** |supported| Full support – |partial| Partial support – |eol| No "
"support (end of life) – |unstable| Development version"
msgstr ""

#: ../../docs/about/release_policy.rst:130
msgid ""
"Pre-release Godot versions aren't intended to be used in production and are "
"provided for testing purposes only."
msgstr ""

#: ../../docs/about/release_policy.rst:136
msgid "When is the next release out?"
msgstr ""

#: ../../docs/about/release_policy.rst:138
msgid ""
"While Godot contributors aren't working under any deadlines, we strive to "
"publish minor releases relatively frequently, with an average of two 3.x "
"minor releases per year since Godot 3.3."
msgstr ""

#: ../../docs/about/release_policy.rst:142
msgid ""
"Maintenance (patch) releases are released as needed with potentially very "
"short development cycles, to provide users of the current stable branch with "
"the latest bug fixes for their production needs."
msgstr ""

#: ../../docs/about/release_policy.rst:146
msgid ""
"As for the upcoming Godot 4.0, as of December 2022, we are well into the "
"*beta* phase, and are aiming for a stable release in Q1 2023. `Follow the "
"Godot blog <https://godotengine.org/news>`__ for the latest updates."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:4
msgid "Complying with licenses"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:7
msgid "What are licenses?"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:9
msgid ""
"Godot is created and distributed under the `MIT License <https://opensource."
"org/licenses/MIT>`_. It doesn't have a sole owner either, as every "
"contributor that submits code to the project does it under this same license "
"and keeps ownership of the contribution."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:14
msgid ""
"The license is the legal requirement for you (or your company) to use and "
"distribute the software (and derivative projects, including games made with "
"it). Your game or project can have a different license, but it still needs "
"to comply with the original one."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:21
msgid ""
"In your project's credits screen, remember to also list third-party notices "
"for assets you're using, such as textures, models, sounds, music and fonts."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:24
msgid ""
"Free assets in particular often come with licenses that require attribution. "
"Double-check their license before using those assets in a project."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:28
#: ../../docs/tutorials/export/exporting_for_macos.rst:16
#: ../../docs/tutorials/export/exporting_for_windows.rst:22
#: ../../docs/tutorials/export/exporting_for_ios.rst:17
#: ../../docs/development/compiling/compiling_for_windows.rst:14
#: ../../docs/development/compiling/compiling_for_x11.rst:14
#: ../../docs/development/compiling/compiling_for_osx.rst:14
#: ../../docs/development/compiling/compiling_for_android.rst:25
#: ../../docs/development/compiling/compiling_for_ios.rst:14
#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:27
#: ../../docs/development/compiling/compiling_for_uwp.rst:14
#: ../../docs/development/compiling/compiling_for_web.rst:14
#: ../../docs/development/compiling/compiling_with_mono.rst:9
#: ../../docs/community/asset_library/submitting_to_assetlib.rst:24
msgid "Requirements"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:30
msgid ""
"In the case of the MIT license, the only requirement is to include the "
"license text somewhere in your game or derivative project."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:33
msgid "This text reads as follows:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:35
msgid "This game uses Godot Engine, available under the following license:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:37
msgid ""
"Copyright (c) 2014-present Godot Engine contributors. Copyright (c) "
"2007-2014 Juan Linietsky, Ariel Manzur."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:40
#: ../../docs/about/complying_with_licenses.rst:133
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining a copy "
"of this software and associated documentation files (the \"Software\"), to "
"deal in the Software without restriction, including without limitation the "
"rights to use, copy, modify, merge, publish, distribute, sublicense, and/or "
"sell copies of the Software, and to permit persons to whom the Software is "
"furnished to do so, subject to the following conditions:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:42
#: ../../docs/about/complying_with_licenses.rst:135
msgid ""
"The above copyright notice and this permission notice shall be included in "
"all copies or substantial portions of the Software."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:44
#: ../../docs/about/complying_with_licenses.rst:137
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR "
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, "
"FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE "
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER "
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING "
"FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS "
"IN THE SOFTWARE."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:48
msgid ""
"Your games do not need to be under the same license. You are free to release "
"your Godot projects under any license and to create commercial games with "
"the engine."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:53
msgid "Inclusion"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:55
msgid ""
"The license does not specify how it has to be included, so anything is valid "
"as long as it can be displayed under some condition. These are the most "
"common approaches (only need to implement one of them, not all)."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:60
msgid "Credits screen"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:62
msgid ""
"Include the above license text somewhere in the credits screen. It can be at "
"the bottom after showing the rest of the credits. Most large studios use "
"this approach with open source licenses."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:67
msgid "Licenses screen"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:69
msgid ""
"Some games have a special menu (often in the settings) to display licenses."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:72
msgid "Output log"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:74
msgid ""
"Just printing the licensing text using the :ref:`print() "
"<class_@GDScript_method_print>` function may be enough on platforms where a "
"global output log is readable. This is the case on desktop platforms, "
"Android and HTML5 (but not iOS and UWP)."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:79
msgid "Accompanying file"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:81
msgid ""
"If the game is distributed on desktop platforms, a file containing the "
"license can be added to the software that is installed to the user PC."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:85
msgid "Printed manual"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:87
msgid ""
"If the game includes printed manuals, license text can be included there."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:90
msgid "Link to the license"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:92
msgid ""
"The Godot Engine developers consider that a link to ``godotengine.org/"
"license`` in your game documentation or credits would be an acceptable way "
"to satisfy the license terms."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:97
msgid "Third-party licenses"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:99
msgid ""
"Godot itself contains software written by `third parties <https://github.com/"
"godotengine/godot/blob/master/COPYRIGHT.txt>`_. Most of it does not require "
"license inclusion, but some do. Make sure to do it if these are compiled in "
"your Godot export template. If you're using the official export templates, "
"all libraries are enabled. This means you need to provide attribution for "
"all the libraries listed below."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:106
msgid "Here's a list of libraries requiring attribution:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:109
msgid "FreeType"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:111
msgid ""
"Godot uses `FreeType <https://www.freetype.org/>`_ to render fonts. Its "
"license requires attribution, so the following text must be included "
"together with the Godot license:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:115
msgid ""
"Portions of this software are copyright © <year> The FreeType Project (www."
"freetype.org).  All rights reserved."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:119
msgid ""
"<year> should correspond to the value from the FreeType version used in your "
"build. This information can be found in the editor by opening the **Help > "
"About** dialog and going to the **Third-party Licenses** tab."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:125
msgid "ENet"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:127
msgid ""
"Godot includes the `ENet <http://enet.bespin.org/>`_ library to handle high-"
"level multiplayer. ENet has similar licensing terms as Godot:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:131
msgid "Copyright (c) 2002-2020 Lee Salzman"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:140
msgid "mbed TLS"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:142
msgid ""
"If the project is exported with Godot 3.1 or later, it includes `mbed TLS "
"<https://tls.mbed.org>`_. The Apache license needs to be complied to by "
"including the following text:"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:145
msgid "Copyright The Mbed TLS Contributors"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:147
msgid ""
"Licensed under the Apache License, Version 2.0 (the \"License\"); you may "
"not use this file except in compliance with the License. You may obtain a "
"copy of the License at"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:151
msgid "http://www.apache.org/licenses/LICENSE-2.0"
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:153
msgid ""
"Unless required by applicable law or agreed to in writing, software "
"distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT "
"WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the "
"License for the specific language governing permissions and limitations "
"under the License."
msgstr ""

#: ../../docs/about/complying_with_licenses.rst:161
msgid ""
"If you exported your project using a :ref:`custom build with specific "
"modules disabled <doc_optimizing_for_size>`, you don't need to list the "
"disabled modules' licenses in your exported project."
msgstr ""

#: ../../docs/getting_started/introduction/index.rst:8
msgid ""
"This series will introduce you to Godot and give you an overview of its "
"features."
msgstr ""

#: ../../docs/getting_started/introduction/index.rst:11
msgid ""
"In the following pages, you will get answers to questions such as \"Is Godot "
"for me?\" or \"What can I do with Godot?\". We will then introduce the "
"engine's most essential concepts, run you through the editor's interface, "
"and give you tips to make the most of your time learning it."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:4
msgid "Introduction to Godot"
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:6
msgid ""
"This article is here to help you figure out whether Godot might be a good "
"fit for you. We will introduce some broad features of the engine to give you "
"a feel for what you can achieve with it and answer questions such as \"what "
"do I need to know to get started?\"."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:11
msgid ""
"This is by no means an exhaustive overview. We will introduce many more "
"features in this getting started series."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:15
msgid "What is Godot?"
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:17
msgid ""
"Godot is a general-purpose 2D and 3D game engine designed to support all "
"sorts of projects. You can use it to create games or applications you can "
"then release on desktop or mobile, as well as on the web."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:21
msgid ""
"You can also create console games with it, although you either need strong "
"programming skills or a developer to port the game for you."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:24
msgid ""
"The Godot team can't provide an open-source console export due to the "
"licensing terms imposed by console manufacturers. Regardless of the engine "
"you use, though, releasing games on consoles is always a lot of work. You "
"can read more on that here: :ref:`doc_consoles`."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:30
msgid "What can the engine do?"
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:32
msgid ""
"Godot was initially developed in-house by an Argentinan game studio. Its "
"development started in 2001, and the engine was rewritten and improved "
"tremendously since its open-source release in 2014."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:36
msgid ""
"Some examples of games created with Godot include Ex-Zodiac and Helms of "
"Fury."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:42
msgid ""
"As for applications, the open-source pixel art drawing program Pixelorama is "
"powered by Godot, and so is the voxel RPG creator RPG in a box."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:47
msgid "You can find many more examples in the `official showcase videos`_."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:50
msgid "How does it work and look?"
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:52
msgid ""
"Godot comes with a fully-fledged game editor with integrated tools to answer "
"the most common needs. It includes a code editor, an animation editor, a "
"tilemap editor, a shader editor, a debugger, a profiler, and more."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:58
msgid ""
"The team strives to offer a feature-rich game editor with a consistent user "
"experience. While there is always room for improvement, the user interface "
"keeps getting refined."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:62
msgid ""
"Of course, if you prefer, you can work with external programs. We officially "
"support importing 3D scenes designed in Blender_ and maintain plugins to "
"code in VSCode_ and Emacs_ for GDScript and C#. We also support Visual "
"Studio for C# on Windows."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:70
#: ../../docs/tutorials/scripting/index.rst:12
msgid "Programming languages"
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:72
msgid "Let's talk about the available programming languages."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:74
msgid ""
"You can code your games using :ref:`GDScript <toc-learn-scripting-"
"gdscript>`, a Godot-specific and tightly integrated language with a "
"lightweight syntax, or :ref:`C# <toc-learn-scripting-C#>`, which is popular "
"in the games industry. These are the two main scripting languages we support."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:79
msgid ""
"Godot also supports a node-based visual programming language named :ref:"
"`VisualScript <toc-learn-scripting-visual_script>`."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:82
msgid ""
"With the :ref:`GDNative <toc-tutorials-gdnative>` technology, you can also "
"write gameplay or high-performance algorithms in C or C++ without "
"recompiling the engine. You can use this technology to integrate third-party "
"libraries and other Software Development Kits (SDK) in the engine."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:87
msgid ""
"Of course, you can also directly add modules and features to the engine, as "
"it's completely free and open-source."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:90
msgid ""
"These are the five officially supported programming languages. The community "
"maintains support for many more. For more information, see :ref:`GDNative "
"third-party bindings <doc_what_is_gdnative_third_party_bindings>`."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:96
msgid "What do I need to know to use Godot?"
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:98
msgid ""
"Godot is a feature-packed game engine. With its thousands of features, there "
"is a lot to learn. To make the most of it, you need good programming "
"foundations. While we try to make the engine accessible, you will benefit a "
"lot from knowing how to think like a programmer first."
msgstr ""

#: ../../docs/getting_started/introduction/introduction_to_godot.rst:103
msgid ""
"In the next part, we'll show you a free and open-source app you can use to "
"learn the basics of programming with Godot's GDScript programming language."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:4
msgid "Learn to code with GDScript"
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:6
msgid ""
"In Godot, you can write code using the GDScript and C# programming languages."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:8
msgid ""
"If you are new to programming, we recommend starting with GDScript because "
"we designed it to be simpler than all-purpose languages like C#. It will be "
"both faster and easier to learn."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:12
msgid ""
"While GDScript is a language specific to Godot, the techniques you will "
"learn with it will apply to other programming languages."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:15
msgid ""
"Note that it is completely normal for a programmer to learn and use multiple "
"languages. Programming languages have more similarities than differences, so "
"once you know one, you can learn another much faster."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:20
msgid "Learn in your browser with the GDScript app"
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:22
msgid ""
"To learn GDScript, you can use the app Learn GDScript From Zero. It is a "
"complete beginner course with interactive practices you can do right in your "
"browser."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:28
msgid "Click here to access the app: `Learn GDScript From Zero app`_"
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:30
msgid ""
"This app is an open-source project. To report bugs or contribute, head to "
"the app's source code repository: `GitHub repository`_."
msgstr ""

#: ../../docs/getting_started/introduction/learn_to_code_with_gdscript.rst:33
msgid ""
"In the next part, you will get an overview of the engine's essential "
"concepts."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:8
msgid "Overview of Godot's key concepts"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:10
msgid ""
"Every game engine revolves around abstractions you use to build your "
"applications. In Godot, a game is a **tree** of **nodes** that you group "
"together into **scenes**. You can then wire these nodes so they can "
"communicate using **signals**."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:15
msgid ""
"These are the four concepts you will learn here. We're going to look at them "
"briefly to give you a sense of how the engine works. In the getting started "
"series, you will get to use them in practice."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:20
#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:38
#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:49
msgid "Scenes"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:22
msgid ""
"In Godot, you break down your game in reusable scenes. A scene can be a "
"character, a weapon, a menu in the user interface, a single house, an entire "
"level, or anything you can think of. Godot's scenes are flexible; they fill "
"the role of both prefabs and scenes in some other game engines."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:29
msgid ""
"You can also nest scenes. For example, you can put your character in a "
"level, and drag and drop a scene as a child of it."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:35
#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:13
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:46
#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:148
#: ../../docs/development/file_formats/tscn.rst:30
msgid "Nodes"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:37
msgid ""
"A scene is composed of one or more **nodes**. Nodes are your game's smallest "
"building blocks that you arrange into trees. Here's an example of a "
"character's nodes."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:43
msgid ""
"It is made of a ``KinematicBody2D`` node named \"Character\", a ``Sprite``, "
"a ``Camera2D``, and a ``CollisionShape2D``."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:46
msgid ""
"The node names end with \"2D\" because this is a 2D scene. Their 3D "
"counterpart have names that end with \"3D\"."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:49
msgid ""
"Notice how nodes and scenes look the same in the editor. When you save a "
"tree of nodes as a scene, it then shows as a single node, with its internal "
"structure hidden in the editor."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:53
msgid ""
"Godot provides an extensive library of base node types you can combine and "
"extend to build more powerful ones. 2D, 3D, or user interface, you will do "
"most things with these nodes."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:60
#: ../../docs/development/file_formats/tscn.rst:71
msgid "The scene tree"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:62
msgid ""
"All your game's scenes come together in the **scene tree**, literally a tree "
"of scenes. And as scenes are trees of nodes, the scene tree also is a tree "
"of nodes. But it's easier to think of your game in terms of scenes as they "
"can represent characters, weapons, doors, or your user interface."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:70
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1409
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:582
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:164
#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:559
#: ../../docs/development/cpp/object_class.rst:219
msgid "Signals"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:72
msgid ""
"Nodes emit signals when some event occurs. This feature allows you to make "
"nodes communicate without hard-wiring them in code. It gives you a lot of "
"flexibility in how you structure your scenes."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:78
msgid ""
"Signals are Godot's version of the *observer* pattern. You can read more "
"about it here: https://gameprogrammingpatterns.com/observer.html"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:82
msgid ""
"For example, buttons emit a signal when pressed. You can connect to this "
"signal to run code in reaction to this event, like starting the game or "
"opening a menu."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:85
msgid ""
"Other built-in signals can tell you when two objects collided, when a "
"character or monster entered a given area, and much more. You can also "
"define new signals tailored to your game."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:90
#: ../../docs/getting_started/step_by_step/instancing.rst:212
#: ../../docs/getting_started/step_by_step/scripting_languages.rst:190
#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:180
#: ../../docs/getting_started/step_by_step/signals.rst:375
#: ../../docs/tutorials/2d/2d_movement.rst:360
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:264
#: ../../docs/tutorials/export/exporting_pcks.rst:138
#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:381
msgid "Summary"
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:92
msgid ""
"Nodes, scenes, the scene tree, and signals are four core concepts in Godot "
"that you will manipulate all the time."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:95
msgid ""
"Nodes are your game's smallest building blocks. You combine them to create "
"scenes that you then combine and nest into the scene tree. You can then use "
"signals to make nodes react to events in other nodes or different scene tree "
"branches."
msgstr ""

#: ../../docs/getting_started/introduction/key_concepts_overview.rst:99
msgid ""
"After this short breakdown, you probably have many questions. Bear with us "
"as you will get many answers throughout the getting started series."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:10
#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:40
msgid "First look at Godot's editor"
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:12
msgid ""
"This page will give you a brief overview of Godot's interface. We're going "
"to look at the different main screens and docks to help you situate yourself."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:15
msgid ""
"For a comprehensive breakdown of the editor's interface and how to use it, "
"see the :ref:`Editor manual <toc-learn-editor>`."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:19
msgid "The Project manager"
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:21
msgid ""
"When you launch Godot, the first window you see is the Project Manager. In "
"the default tab, \"Projects,\" you can manage existing projects, import or "
"create new ones, and more."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:27
msgid ""
"At the top of the window, there is another tab named \"Asset Library "
"Projects\". In the open-source asset library you can search for demo "
"projects, templates, and completed projects, including many that are "
"developed by the community."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:33
msgid ""
"You can also change the editor's language using the drop-down menu to the "
"right of the engine's version in the window's top-right corner. By default, "
"it is in English (EN)."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:42
msgid ""
"When you open a new or an existing project, the editor's interface appears. "
"Let's look at its main areas."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:47
msgid ""
"By default, it features **menus**, **main screens**, and playtest buttons "
"along the window's top edge."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:52
msgid ""
"In the center is the **viewport** with its **toolbar** at the top, where "
"you'll find tools to move, scale, or lock the scene's nodes."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:57
msgid ""
"On either side of the viewport sit the **docks**. And at the bottom of the "
"window lies the **bottom panel**."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:60
msgid ""
"The toolbar changes based on the context and selected node. Here is the 2D "
"toolbar."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:64
msgid "Below is the 3D one."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:68
msgid ""
"Let's look at the docks. The **FileSystem** dock lists your project files, "
"be it scripts, images, audio samples, and more."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:73
msgid "The **Scene** dock lists the active scene's nodes."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:77
msgid "The **Inspector** allows you to edit the properties of a selected node."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:81
msgid ""
"The **bottom panel**, situated below the viewport, is the host for the debug "
"console, the animation editor, the audio mixer, and more. They can take "
"precious space, that's why they're folded by default."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:87
msgid ""
"When you click on one, it expands vertically. Below, you can see the "
"animation editor opened."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:92
msgid "The four main screens"
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:94
msgid ""
"There are four main screen buttons centered at the top of the editor: 2D, "
"3D, Script, and AssetLib."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:97
msgid ""
"You'll use the **2D screen** for all types of games. In addition to 2D "
"games, the 2D screen is where you'll build your interfaces."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:102
msgid ""
"In the **3D screen**, you can work with meshes, lights, and design levels "
"for 3D games."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:107
msgid ""
"Notice the perspective button under the toolbar. Clicking on it opens a list "
"of options related to the 3D view."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:112
msgid ""
"Read :ref:`doc_introduction_to_3d` for more detail about the **3D main "
"screen**."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:115
msgid ""
"The **Script screen** is a complete code editor with a debugger, rich auto-"
"completion, and built-in code reference."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:120
msgid ""
"Finally, the **AssetLib** is a library of free and open-source add-ons, "
"scripts, and assets to use in your projects."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:125
msgid ""
"You can learn more about the asset library in :ref:`doc_what_is_assetlib`."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:129
msgid "Integrated class reference"
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:131
msgid "Godot comes with a built-in class reference."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:133
msgid ""
"You can search for information about a class, method, property, constant, or "
"signal by any one of the following methods:"
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:136
msgid ""
"Pressing :kbd:`F1` (or :kbd:`Alt + Space` on macOS) anywhere in the editor."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:137
msgid ""
"Clicking the \"Search Help\" button in the top-right of the Script main "
"screen."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:138
msgid "Clicking on the Help menu and Search Help."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:139
msgid ""
"Clicking while pressing the :kbd:`Ctrl` key on a class name, function name, "
"or built-in variable in the script editor."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:145
msgid ""
"When you do any of these, a window pops up. Type to search for any item. You "
"can also use it to browse available objects and methods."
msgstr ""

#: ../../docs/getting_started/introduction/first_look_at_the_editor.rst:150
msgid ""
"Double-click on an item to open the corresponding page in the script main "
"screen."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:8
msgid "Learning new features"
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:10
msgid ""
"Godot is a feature-rich game engine. There is a lot to learn about it. This "
"page explains how you can use the online manual, built-in code reference, "
"and join online communities to learn new features and techniques."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:15
msgid "Making the most of this manual"
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:17
msgid ""
"What you are reading now is the user manual. It documents each of the "
"engine's concepts and available features. When learning a new topic, you can "
"start by browsing the corresponding section of this website. The left menu "
"allows you to explore broad topics while the search bar will help you find "
"more specific pages. If a page exists for a given theme, it will often link "
"to more related content."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:26
msgid ""
"The manual has a companion class reference that explains each Godot class's "
"available functions and properties when programming. While the manual covers "
"general features, concepts, and how to use the editor, the reference is all "
"about using Godot's scripting API (Application Programming Interface). You "
"can access it both online and offline. We recommend browsing the reference "
"offline, from within the Godot editor. To do so, go to Help -> Search or "
"press :kbd:`F1`."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:36
msgid ""
"To browse it online, head to the manual's :ref:`Class Reference <toc-class-"
"ref>` section."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:39
msgid "A class reference's page tells you:"
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:41
msgid ""
"Where the class exists in the inheritance hierarchy. You can click the top "
"links to jump to parent classes and see the properties and methods a type "
"inherits."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:47
msgid "A summary of the class's role and use cases."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:49
msgid ""
"An explanation of the class's properties, methods, signals, enums, and "
"constants."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:52
msgid "Links to manual pages further detailing the class."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:54
msgid ""
"If the manual or class reference is missing or has insufficient information, "
"please open an Issue in the official `godot-docs <https://github.com/"
"godotengine/godot-docs/issues>`_ GitHub repository to report it."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:59
msgid ""
"You can Ctrl-click any underlined text like the name of a class, property, "
"method, signal, or constant to jump to it."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:63
msgid "Learning with the community"
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:65
msgid ""
"Godot has a growing community of users. If you're stuck on a problem or need "
"help to better understand how to achieve something, you can ask other users "
"for help on one of the many `active communities <https://godotengine.org/"
"community>`_."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:70
msgid ""
"The best place to ask for questions and find already answered ones is the "
"official `Questions & Answers <https://godotengine.org/qa/>`_ site. These "
"responses show up in search engine results and get saved, allowing other "
"users to benefit from discussions on the platform. Once you asked a question "
"there, you can share its link on other social platforms. Before asking a "
"question, be sure to look for existing answers that might solve your problem "
"on this website or using your preferred search engine."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:78
msgid ""
"Asking questions well and providing details will help others answer you "
"faster and better. When asking questions, we recommend including the "
"following information:"
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:82
msgid ""
"**Describe your goal**. You want to explain what you are trying to achieve "
"design-wise. If you are having trouble figuring out how to make a solution "
"work, there may be a different, easier solution that accomplishes the same "
"goal."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:87
msgid ""
"If there is an error involved, **share the exact error message**. You can "
"copy the exact error message in the editor's Debugger bottom panel by "
"clicking the Copy Error icon. Knowing what it says can help community "
"members better identify how you triggered the error."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:92
msgid ""
"If there is code involved, **share a code sample**. Other users won't be "
"able to help you fix a problem without seeing your code. Share the code as "
"text directly. To do so, you can copy and paste a short code snippet in a "
"chat box, or use a website like `Pastebin <https://pastebin.com/>`_ to share "
"long files."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:98
msgid ""
"**Share a screenshot** of your *Scene* dock along with your written code. "
"Most of the code you write affects nodes in your scenes. As a result, you "
"should think of those scenes as part of your source code."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:104
msgid ""
"Also, please don't take a picture with your phone, the low quality and "
"screen reflections can make it hard to understand the image. Your operating "
"system should have a built-in tool to take screenshots with the :kbd:`PrtSc` "
"(Print Screen) key."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:109
msgid ""
"Alternatively, you can use a program like `ShareX <https://getsharex.com/>`_ "
"on Windows or `FlameShot <https://flameshot.org/>`_ on Linux."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:112
msgid ""
"Sharing a video of your running game can also be really **useful to "
"troubleshoot your game**. You can use programs like `OBS Studio <https://"
"obsproject.com/>`_ and `Screen to GIF <https://www.screentogif.com/>`_ to "
"capture your screen."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:117
msgid ""
"You can then use a service like `streamable <https://streamable.com/>`_ or a "
"cloud provider to upload and share your videos for free."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:120
msgid ""
"If you're not using the stable version of Godot, please mention the version "
"you're using. The answer can be different as available features and the "
"interface evolve rapidly."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:124
msgid ""
"Following these guidelines will maximize your chances of getting the answer "
"you're looking for. They will save time both to you and the persons helping "
"you."
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:128
msgid "Community tutorials"
msgstr ""

#: ../../docs/getting_started/introduction/learning_new_features.rst:130
msgid ""
"This manual aims to provide a comprehensive reference of Godot's features. "
"Aside from the 2D and 3D getting started series, it does not contain "
"tutorials to implement specific game genres. If you're looking for a "
"tutorial about creating a role-playing game, a platformer, or other, please "
"see :ref:`doc_community_tutorials`, which lists content made by the Godot "
"community."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:4
msgid "Godot's design philosophy"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:6
msgid "Now that you've gotten your feet wet, let's talk about Godot's design."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:8
msgid ""
"**Every game engine is different and fits different needs.** Not only do "
"they offer a range of features, but the design of each engine is unique. "
"This leads to different workflows and different ways to form your games' "
"structures. This all stems from their respective design philosophies."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:13
msgid ""
"This page is here to help you understand how Godot works, starting with some "
"of its core pillars. It is not a list of available features, nor is it an "
"engine comparison. To know if any engine can be a good fit for your project, "
"you need to try it out for yourself and understand its design and "
"limitations."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:19
msgid ""
"Please watch `Godot explained in 5 minutes <https://www.youtube.com/watch?"
"v=KjX5llYZ5eQ>`_ if you're looking for an overview of the engine's features."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:24
msgid "Object-oriented design and composition"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:26
msgid ""
"Godot embraces object-oriented design at its core with its flexible scene "
"system and Node hierarchy. It tries to stay away from strict programming "
"patterns to offer an intuitive way to structure your game."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:30
msgid ""
"For one, Godot lets you **compose or aggregate** scenes. It's like nested "
"prefabs: you can create a BlinkingLight scene and a BrokenLantern scene that "
"uses the BlinkingLight. Then, create a city filled with BrokenLanterns. "
"Change the BlinkingLight's color, save, and all the BrokenLanterns in the "
"city will update instantly."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:37
msgid "On top of that, you can **inherit** from any scene."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:39
msgid ""
"A Godot scene could be a Weapon, a Character, an Item, a Door, a Level, part "
"of a level… anything you'd like. It works like a class in pure code, except "
"you're free to design it by using the editor, using only the code, or mixing "
"and matching the two."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:44
msgid ""
"It's different from prefabs you find in several 3D engines, as you can then "
"inherit from and extend those scenes. You may create a Magician that extends "
"your Character. Modify the Character in the editor and the Magician will "
"update as well. It helps you build your projects so that their structure "
"matches the game's design."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:50
#: ../../docs/getting_started/first_2d_game/index.rst:10
#: ../../docs/getting_started/first_3d_game/index.rst:10
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:16
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:13
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:18
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:9
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:40
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:21
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:18
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:10
#: ../../docs/community/asset_library/using_assetlib.rst:16
#: ../../docs/community/asset_library/submitting_to_assetlib.rst:126
msgid "|image0|"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:194
#: ../../docs/getting_started/first_2d_game/index.rst:76
#: ../../docs/getting_started/first_3d_game/index.rst:70
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:159
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:403
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:325
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:336
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:345
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:464
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:457
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:534
#: ../../docs/community/asset_library/using_assetlib.rst:187
#: ../../docs/community/asset_library/submitting_to_assetlib.rst:214
msgid "image0"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:52
msgid ""
"Also note that Godot offers many different types of objects called nodes, "
"each with a specific purpose. Nodes are part of a tree and always inherit "
"from their parents up to the Node class. Although the engine does feature "
"some nodes like collision shapes that a parent physics body will use, most "
"nodes work independently from one another."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:58
msgid ""
"In other words, Godot's nodes do not work like components in some other game "
"engines."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:61
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:17
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:36
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:331
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:23
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:19
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:47
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:25
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:22
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:24
#: ../../docs/community/asset_library/using_assetlib.rst:48
msgid "|image1|"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:195
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:148
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:160
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:404
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:326
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:337
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:346
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:465
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:458
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:535
#: ../../docs/community/asset_library/using_assetlib.rst:188
msgid "image1"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:63
msgid ""
"Sprite is a Node2D, a CanvasItem and a Node. It has all the properties and "
"features of its three parent classes, like transforms or the ability to draw "
"custom shapes and render with a custom shader."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:68
msgid "All-inclusive package"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:70
msgid ""
"Godot tries to provide its own tools to answer most common needs. It has a "
"dedicated scripting workspace, an animation editor, a tilemap editor, a "
"shader editor, a debugger, a profiler, the ability to hot-reload locally and "
"on remote devices, etc."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:75
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:24
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:41
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:339
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:27
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:24
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:58
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:33
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:30
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:32
#: ../../docs/community/asset_library/using_assetlib.rst:58
msgid "|image2|"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:196
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:149
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:161
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:405
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:327
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:338
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:347
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:466
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:459
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:536
#: ../../docs/community/asset_library/using_assetlib.rst:189
msgid "image2"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:77
msgid ""
"The goal is to offer a full package to create games and a continuous user "
"experience. You can still work with external programs as long as there is an "
"import plugin for it. Or you can create one, like the `Tiled Map Importer "
"<https://github.com/vnen/godot-tiled-importer>`__."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:82
msgid ""
"That is also partly why Godot offers its own programming languages GDScript "
"and VisualScript, along with C#. They're designed for the needs of game "
"developers and game designers, and they're tightly integrated in the engine "
"and the editor."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:87
msgid ""
"GDScript lets you write code using an indentation-based syntax, yet it "
"detects types and offers a static language's quality of auto-completion. It "
"is also optimized for gameplay code with built-in types like Vectors and "
"Colors."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:91
msgid ""
"Note that with GDNative, you can write high-performance code using compiled "
"languages like C, C++, Rust, or Python (using the Cython compiler) without "
"recompiling the engine."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:95
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:28
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:55
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:352
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:31
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:42
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:64
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:47
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:34
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:36
#: ../../docs/community/asset_library/using_assetlib.rst:81
msgid "|image3|"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:197
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:150
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:162
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:406
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:328
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:339
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:348
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:467
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:460
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:537
#: ../../docs/community/asset_library/using_assetlib.rst:190
msgid "image3"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:97
msgid ""
"*VisualScript is a node-based programming language that integrates well in "
"the editor. You can drag and drop nodes or resources into the graph to "
"create new code blocks.*"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:101
msgid ""
"Note that the 3D workspace doesn't feature as many tools as the 2D "
"workspace. You'll need external programs or add-ons to edit terrains, "
"animate complex characters, and so on. Godot provides a complete API to "
"extend the editor's functionality using game code. See `The Godot editor is "
"a Godot game`_ below."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:106
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:33
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:63
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:357
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:42
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:51
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:74
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:53
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:39
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:41
#: ../../docs/community/asset_library/using_assetlib.rst:86
msgid "|image4|"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:198
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:151
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:163
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:407
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:329
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:340
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:349
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:468
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:461
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:538
#: ../../docs/community/asset_library/using_assetlib.rst:191
msgid "image4"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:108
msgid ""
"*A State Machine editor plugin in Godot 2 by kubecz3k. It lets you manage "
"states and transitions visually.*"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:123
msgid "Open source"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:125
msgid ""
"Godot offers a fully open source codebase under the **MIT license**. This "
"means all the technologies that ship with it have to be Free (as in freedom) "
"as well. For the most part, they're developed from the ground up by "
"contributors."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:130
msgid ""
"Anyone can plug in proprietary tools for the needs of their projects — they "
"just won't ship with the engine. This may include Google AdMob, or FMOD. Any "
"of these can come as third-party plugins instead."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:135
msgid ""
"On the other hand, an open codebase means you can **learn from and extend "
"the engine** to your heart's content. You can also debug games easily, as "
"Godot will print errors with a stack trace, even if they come from the "
"engine itself."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:141
msgid ""
"This **does not affect the work you do with Godot** in any way: there's no "
"strings attached to the engine or anything you make with it."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:145
msgid "Community-driven"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:147
msgid ""
"**Godot is made by its community, for the community, and for all game "
"creators out there.** It's the needs of the users and open discussions that "
"drive the core updates. New features from the core developers often focus on "
"what will benefit the most users first."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:152
msgid ""
"That said, although a handful of core developers work on it full-time, the "
"project has over 600 contributors at the time of writing. Benevolent "
"programmers work on features they may need themselves, so you'll see "
"improvements in all corners of the engine at the same time in every major "
"release."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:159
msgid "The Godot editor is a Godot game"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:161
msgid ""
"The Godot editor runs on the game engine. It uses the engine's own UI "
"system, it can hot-reload code and scenes when you test your projects, or "
"run game code in the editor. This means you can **use the same code** and "
"scenes for your games, or **build plugins and extend the editor.**"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:166
msgid ""
"This leads to a reliable and flexible UI system, as it powers the editor "
"itself. With the ``tool`` keyword, you can run any game code in the editor."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:169
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:46
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:68
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:366
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:78
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:55
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:83
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:119
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:51
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:49
#: ../../docs/community/asset_library/using_assetlib.rst:90
msgid "|image5|"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:199
#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:152
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:164
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:408
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:330
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:341
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:350
#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:469
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:462
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:539
#: ../../docs/community/asset_library/using_assetlib.rst:192
msgid "image5"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:171
msgid ""
"*RPG in a Box is a voxel RPG editor made with Godot 2. It uses Godot's UI "
"tools for its node-based programming system and for the rest of the "
"interface.*"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:175
msgid ""
"Put the ``tool`` keyword at the top of any GDScript file and it will run in "
"the editor. This lets you import and export plugins, create plugins like "
"custom level editors, or create scripts with the same nodes and API you use "
"in your projects."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:182
msgid ""
"The editor is fully written in C++ and is statically compiled into the "
"binary. This means you can't import it as a typical project that would have "
"a ``project.godot`` file."
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:187
msgid "Separate 2D and 3D engines"
msgstr ""

#: ../../docs/getting_started/introduction/godot_design_philosophy.rst:189
msgid ""
"Godot offers dedicated 2D and 3D rendering engines. As a result, **the base "
"unit for 2D scenes is pixels.** Even though the engines are separate, you "
"can render 2D in 3D, 3D in 2D, and overlay 2D sprites and interfaces over "
"your 3D world."
msgstr ""

#: ../../docs/getting_started/step_by_step/index.rst:4
msgid ""
"This series builds upon the :ref:`Introduction to Godot <toc-learn-"
"introduction>` and will get you started with the editor and the engine. You "
"will learn more about nodes and scenes, code your first classes with "
"GDScript, use signals to make nodes communicate with one another, and more."
msgstr ""

#: ../../docs/getting_started/step_by_step/index.rst:9
msgid ""
"The following lessons are here to prepare you for :ref:"
"`doc_your_first_2d_game`, a step-by-step tutorial where you will code a game "
"from scratch. By the end of it, you will have the necessary foundations to "
"explore more features in other sections. We also included links to pages "
"that cover a given topic in-depth where appropriate."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:6
msgid "Nodes and Scenes"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:8
msgid ""
"In :ref:`doc_key_concepts_overview`, we saw that a Godot game is a tree of "
"scenes and that each scene is a tree of nodes. In this lesson, we explain a "
"bit more about them. You will also create your first scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:15
msgid ""
"**Nodes are the fundamental building blocks of your game**. They are like "
"the ingredients in a recipe. There are dozens of kinds that can display an "
"image, play a sound, represent a camera, and much more."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:21
msgid "All nodes have the following attributes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:23
msgid "A name."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:24
msgid "Editable properties."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:25
msgid "They receive callbacks to update every frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:26
msgid "You can extend them with new properties and functions."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:27
msgid "You can add them to another node as a child."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:29
msgid ""
"The last attribute is key. **Together, nodes form a tree**, which is a "
"powerful feature to organize projects. Since different nodes have different "
"functions, combining them produces more complex behavior. As we saw before, "
"you can build a playable character the camera follows using a kinematic body "
"node named \"Character\", a sprite node, a camera node, and a collision "
"shape node."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:40
msgid ""
"When you organize nodes in a tree, like our character, we call this "
"construct a scene. Once saved, scenes work like new node types in the "
"editor, where you can add them as a child of an existing node. In that case, "
"the instance of the scene appears as a single node with its internals hidden."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:45
msgid ""
"Scenes allow you to structure your game's code however you want. You can "
"**compose nodes** to create custom and complex node types, like a game "
"character that runs and jumps, a life bar, a chest with which you can "
"interact, and more."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:51
msgid ""
"The Godot editor essentially is a **scene editor**. It has plenty of tools "
"for editing 2D and 3D scenes, as well as user interfaces. A Godot project "
"can contain as many of these scenes as you need. The engine only requires "
"one as your application's **main scene**. This is the scene Godot will first "
"load when you or a player runs the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:57
msgid "On top of acting like nodes, scenes have the following attributes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:59
msgid "They always have one root node, like the \"Character\" in our example."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:60
msgid "You can save them to your hard drive and load them later."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:61
msgid ""
"You can create as many instances of a scene as you'd like. You could have "
"five or ten characters in your game, created from your Character scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:65
msgid "Creating your first scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:67
msgid ""
"Let's create our first scene with a single node. To do so, you will need to "
"create a new project first. After opening the project, you should see an "
"empty editor."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:73
msgid ""
"In an empty scene, the Scene dock on the left shows several options to add a "
"root node quickly. \"2D Scene\" adds a Node2D node, \"3D Scene\" adds a "
"Spatial node, and \"User Interface\" adds a Control node. These presets are "
"here for convenience; they are not mandatory. \"Other Node\" lets you select "
"any node to be the root node. In an empty scene, \"Other Node\" is "
"equivalent to pressing the \"Add Child Node\" button at the top-left of the "
"Scene dock, which usually adds a new node as a child of the currently "
"selected node."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:81
msgid ""
"We're going to add a single Label node to our scene. Its function is to draw "
"text on the screen."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:84
msgid ""
"Press the \"Add Child Node\" button or \"Other Node\" to create a root node."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:88
msgid "The Create Node dialog opens, showing the long list of available nodes."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:92
msgid "Select the Label node. You can type its name to filter down the list."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:96
msgid ""
"Click on the Label node to select it and click the Create button at the "
"bottom of the window."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:101
msgid ""
"A lot happens when you add a scene's first node. The scene changes to the 2D "
"workspace because Label is a 2D node type. The Label appears, selected, in "
"the top-left corner of the viewport. The node appears in the Scene dock on "
"the left, and the node's properties appear in the Inspector dock on the "
"right."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:107
msgid "Changing a node's properties"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:109
msgid ""
"The next step is to change the Label's \"Text\" property. Let's change it to "
"\"Hello World\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:112
msgid ""
"Head to the Inspector dock on the right of the viewport. Click inside the "
"field below the Text property and type \"Hello World\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:117
msgid "You will see the text draw in the viewport as you type."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:119
msgid ""
"You can move your Label node in the viewport by selecting the move tool in "
"the toolbar."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:124
msgid ""
"With the Label selected, click and drag anywhere in the viewport to move it "
"to the center of the view delimited by the rectangle."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:130
msgid "Running the scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:132
msgid ""
"Everything's ready to run the scene! Press the Play Scene button in the top-"
"right of the screen or press :kbd:`F6` (:kbd:`Cmd + R` on macOS)."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:137
msgid "A popup invites you to save the scene, which is required to run it."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:141
msgid ""
"Click the Yes button, and in the file browser that appears, press the Save "
"button to save it as \"Label.tscn\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:146
msgid ""
"The Save Scene As dialog, like other file dialogs in the editor, only allows "
"you to save files inside the project. The ``res://`` path at the top of the "
"window represents the project's root directory and stands for \"resource "
"path\". For more information about file paths in Godot, see :ref:"
"`doc_filesystem`."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:152
msgid ""
"The application should open in a new window and display the text \"Hello "
"World\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:156
msgid "Close the window or press :kbd:`F8` to quit the running scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:160
msgid ""
"If this doesn't immediately work and you have a hiDPI display on at least "
"one of your monitors, go to Project -> Project Settings -> Display -> Window "
"then enable Allow Hidpi under Dpi."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:165
msgid "Setting the main scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:167
msgid ""
"To run our test scene, we used the Play Scene button. Another button next to "
"it allows you to set and run the project's main scene. You can press :kbd:"
"`F5` (:kbd:`Cmd + B` on macOS) to do so."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:173
msgid "A popup window appears and invites you to select the main scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:177
msgid ""
"Click the Select button, and in the file dialog that appears, double click "
"on Label.tscn."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:182
msgid ""
"The demo should run again. Moving forward, every time you run the project, "
"Godot will use this scene as a starting point."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:185
msgid ""
"The editor saves the main scene's path in a project.godot file in your "
"project's directory. While you can edit this text file directly to change "
"project settings, you can also use the \"Project -> Project Settings\" "
"window to do so."
msgstr ""

#: ../../docs/getting_started/step_by_step/nodes_and_scenes.rst:190
msgid ""
"In the next part, we will discuss another key concept in games and in Godot: "
"creating instances of a scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:4
msgid "Creating instances"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:6
msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:11
msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:16
msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:23
msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:29
msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:33
msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:39
msgid "In practice"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:41
msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: :download:"
"`instancing.zip <files/instancing.zip>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:45
msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:50
msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:55
msgid "Double-click the ``project.godot`` file to open it."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:59
msgid "Finally, click the Import & Edit button."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:63
msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:69
msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:75
msgid "Double-click the ball scene to instance it."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:79
msgid "The ball appears in the top-left corner of the viewport."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:83
msgid "Click on it and drag it towards the center of the view."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:87
msgid "Play the game by pressing F5. You should see it fall."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:89
msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:95
msgid "You can repeat this process until you have several in the scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:99
msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:104
msgid "Editing scenes and instances"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:106
msgid "There is more to instances. With this feature, you can:"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:108
msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:110
msgid ""
"Change the default properties of every Ball by opening the ``Ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:114
msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:117
msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:122
msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:127
msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:131
msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:136
msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:141
msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:145
msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:150
msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:152
msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:158
msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:162
msgid "Scene instances as a design language"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:164
msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:168
msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:173
msgid "For example, you could break down a shooter game like so:"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:177
msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:181
msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:185
msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:191
msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:196
msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:202
msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:205
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:214
msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:217
msgid "The ability to divide your game into reusable components."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:218
msgid "A tool to structure and encapsulate complex systems."
msgstr ""

#: ../../docs/getting_started/step_by_step/instancing.rst:219
msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:7
msgid "Scripting languages"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:9
msgid ""
"This lesson will give you an overview of the available scripting languages "
"in Godot. You will learn the pros and cons of each option. In the next part, "
"you will write your first script using GDScript."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:13
msgid ""
"**Scripts attach to a node and extend its behavior**. This means that "
"scripts inherit all functions and properties of the node they attach to."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:16
msgid ""
"For example, take a game where a Camera2D node follows a ship. The Camera2D "
"node follows its parent by default. Imagine you want the camera to shake "
"when the player takes damage. As this feature is not built into Godot, you "
"would attach a script to the Camera2D node and code the shake."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:24
msgid "Available scripting languages"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:26
msgid ""
"Godot offers **five gameplay programming languages**: GDScript, C#, "
"VisualScript, and, via its GDNative technology, C and C++. There are more :"
"ref:`community-supported languages "
"<doc_what_is_gdnative_third_party_bindings>`, but these are the official "
"ones."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:31
msgid ""
"You can use multiple languages in a single project. For instance, in a team, "
"you could code gameplay logic in GDScript as it's fast to write, let level "
"designers script quests in the graphical language VisualScript, and use C# "
"or C++ to implement complex algorithms and maximize their performance. Or "
"you can write everything in GDScript or C#. It's your call."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:37
msgid ""
"We provide this flexibility to answer the needs of different game projects "
"and developers."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:51
msgid "Which language should I use?"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:53
msgid ""
"If you're a beginner, we recommend to **start with GDScript**. We made this "
"language specifically for Godot and the needs of game developers. It has a "
"lightweight and straightforward syntax and provides the tightest integration "
"with Godot."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:60
msgid ""
"For C#, you will need an external code editor like `VSCode <https://code."
"visualstudio.com/>`_ or Visual Studio. While C# support is now mature, you "
"will find fewer learning resources for it compared to GDScript. That's why "
"we recommend C# mainly to users who already have experience with the "
"language."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:66
msgid "Let's look at each language's features, as well as its pros and cons."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:69
#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:13
#: ../../docs/tutorials/performance/cpu_optimization.rst:171
#: ../../docs/tutorials/scripting/gdscript/index.rst:2
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:30
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:59
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:221
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:236
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:248
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:259
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:267
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:282
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:294
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:351
#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:113
msgid "GDScript"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:71
msgid ""
":ref:`GDScript<doc_gdscript>` is an `object-oriented <https://en.wikipedia."
"org/wiki/Object-oriented_programming>`_ and `imperative <https://en."
"wikipedia.org/wiki/Imperative_programming>`_ programming language built for "
"Godot. It's made by and for game developers to save you time coding games. "
"Its features include:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:77
msgid "A simple syntax that leads to short files."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:78
msgid "Blazing fast compilation and loading times."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:79
msgid ""
"Tight editor integration, with code completion for nodes, signals, and more "
"information from the scene it's attached to."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:81
msgid ""
"Built-in vector and transform types, making it efficient for heavy use of "
"linear algebra, a must for games."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:83
msgid "Supports multiple threads as efficiently as statically typed languages."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:84
msgid ""
"No `garbage collection <https://en.wikipedia.org/wiki/"
"Garbage_collection_(computer_science)>`_, as this feature eventually gets in "
"the way when creating games. The engine counts references and manages the "
"memory for you in most cases by default, but you can also control memory if "
"you need to."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:89
msgid ""
"`Gradual typing <https://en.wikipedia.org/wiki/Gradual_typing>`_. Variables "
"have dynamic types by default, but you also can use type hints for strong "
"type checks."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:93
msgid ""
"GDScript looks like Python as you structure your code blocks using "
"indentations, but it doesn't work the same way in practice. It's inspired by "
"multiple languages, including Squirrel, Lua, and Python."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:99
msgid "Why don't we use Python or Lua directly?"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:101
msgid ""
"Years ago, Godot used Python, then Lua. Both languages' integration took a "
"lot of work and had severe limitations. For example, threading support was a "
"big challenge with Python."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:105
msgid ""
"Developing a dedicated language doesn't take us more work and we can tailor "
"it to game developers' needs. We're now working on performance optimizations "
"and features that would've been difficult to offer with third-party "
"languages."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:111
msgid ".NET / C#"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:113
msgid ""
"As Microsoft's `C# <https://en.wikipedia.org/wiki/"
"C_Sharp_(programming_language)>`_ is a favorite amongst game developers, we "
"officially support it. C# is a mature and flexible language with tons of "
"libraries written for it. We could add support for it thanks to a generous "
"donation from Microsoft."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:121
msgid ""
"C# offers a good tradeoff between performance and ease of use, although you "
"should be aware of its garbage collector."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:124
msgid ""
"You must use the Mono edition of the Godot editor to script in C#. You can "
"download it on the Godot website's `download <https://godotengine.org/"
"download/>`_ page."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:128
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory, you can use any third-party .NET library or framework in Godot, as "
"well as any Common Language Infrastructure-compliant programming language, "
"such as F#, Boo, or ClojureCLR. However, C# is the only officially "
"supported .NET option."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:133
msgid ""
"GDScript code itself doesn't execute as fast as compiled C# or C++. However, "
"most script code calls functions written with fast algorithms in C++ code "
"inside the engine. In many cases, writing gameplay logic in GDScript, C#, or "
"C++ won't have a significant impact on performance."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:140
#: ../../docs/tutorials/scripting/visual_script/index.rst:2
msgid "VisualScript"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:152
msgid ""
":ref:`Visual Scripting<doc_what_is_visual_script>` is a graph-based visual "
"programming language where you connect blocks. It can be a great tool for "
"non-programmers like game designers and artists."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:158
msgid ""
"You can use other languages to create custom blocks that are specific to "
"your game, for example, to script AIs, quests, or dialogues. That's where "
"the strength of VisualScript lies."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:162
msgid ""
"While it provides all the basic building blocks you need to code complete "
"games, we do not recommend to use VisualScript this way. Programming "
"everything with it is slow compared to using other programming languages."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:168
msgid ""
"For more information, see :ref:`Getting started with VisualScript "
"<doc_getting_started_visual_script>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:172
msgid "C and C++ via GDNative"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:174
msgid ""
"GDNative allows you to write game code in C or C++ without needing to "
"recompile or even restart Godot."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:179
msgid ""
"You can use any version of the language or mix compiler brands and versions "
"for the generated shared libraries, thanks to our use of an internal C API "
"Bridge."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:182
msgid ""
"GDNative is the best choice for performance. You don't need to use it "
"throughout an entire game, as you can write other parts in GDScript, C#, or "
"VisualScript."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:186
msgid ""
"When working with GDNative, the available types, functions, and properties "
"closely resemble Godot's actual C++ API."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:192
msgid ""
"Scripts are files containing code that you attach to a node to extend its "
"functionality."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:195
msgid ""
"Godot supports five official scripting languages, offering you flexibility "
"between performance and ease of use."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_languages.rst:198
msgid ""
"You can mix languages, for instance, to implement demanding algorithms with "
"C or C++ and write most of the game logic with GDScript or C#."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:19
msgid "Creating your first script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:21
msgid ""
"In this lesson, you will code your first script to make the Godot icon turn "
"in circles using GDScript. As we mentioned :ref:`in the introduction <toc-"
"learn-introduction>`, we assume you have programming foundations. The "
"equivalent C# code has been included in another tab for convenience."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:28
msgid ""
"To learn more about GDScript, its keywords, and its syntax, head to the :ref:"
"`GDScript reference<doc_gdscript>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:31
msgid ""
"To learn more about C#, head to the :ref:`C# basics <doc_c_sharp>` page."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:34
#: ../../docs/tutorials/2d/using_tilemaps.rst:21
msgid "Project setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:36
msgid ""
"Please create a new project to start with a clean slate. Your project should "
"contain one picture: the Godot icon, which we often use for prototyping in "
"the community."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:42
msgid ""
"We need to create a Sprite node to display it in the game. In the Scene "
"dock, click the Other Node button."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:47
msgid ""
"Type \"Sprite\" in the search bar to filter nodes and double-click on Sprite "
"to create the node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:52
msgid "Your Scene tab should now only have a Sprite node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:56
msgid ""
"A Sprite node needs a texture to display. In the Inspector on the right, you "
"can see that the Texture property says \"[empty]\". To display the Godot "
"icon, click and drag the file ``icon.png`` from the FileSystem dock onto the "
"Texture slot."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:64
msgid ""
"You can create Sprite nodes automatically by dragging and dropping images on "
"the viewport."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:69
msgid ""
"Then, click and drag the icon in the viewport to center it in the game view."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:74
msgid "Creating a new script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:76
msgid ""
"To create and attach a new script to our node, right-click on Sprite in the "
"scene dock and select \"Attach Script\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:81
msgid ""
"The Attach Node Script window appears. It allows you to select the script's "
"language and file path, among other options."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:84
msgid ""
"Change the Template from Default to Empty to start with a clean file. Leave "
"the other options by default and click the Create button to create the "
"script."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:89
msgid ""
"The Script workspace should appear with your new ``Sprite.gd`` file open and "
"the following line of code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:116
msgid ""
"Every GDScript file is implicitly a class. The ``extends`` keyword defines "
"the class this script inherits or extends. In this case, it's ``Sprite``, "
"meaning our script will get access to all the properties and functions of "
"the Sprite node, including classes it extends, like ``Node2D``, "
"``CanvasItem``, and ``Node``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:122
msgid ""
"In GDScript, if you omit the line with the ``extends`` keyword, your class "
"will implicitly extend :ref:`Reference <class_Reference>`, which Godot uses "
"to manage your application's memory."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:126
msgid ""
"Inherited properties include the ones you can see in the Inspector dock, "
"like our node's ``texture``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:131
msgid ""
"By default, the Inspector displays a node's properties in \"Title Case\", "
"with capitalized words separated by a space. In GDScript code, these "
"properties are in \"snake_case\", which is lowercase with words separated by "
"an underscore."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:135
msgid ""
"You can hover any property's name in the Inspector to see a description and "
"its identifier in code."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:139
msgid "Hello, world!"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:141
msgid ""
"Our script currently doesn't do anything. Let's make it print the text "
"\"Hello, world!\" to the Output bottom panel to get started."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:144
msgid "Add the following code to your script:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:160
msgid ""
"Let's break it down. The ``func`` keyword defines a new function named "
"``_init``. This is a special name for our class's constructor. The engine "
"calls ``_init()`` on every object or node upon creating it in memory, if you "
"define this function."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:165
msgid ""
"GDScript is an indent-based language. The tab at the start of the line that "
"says ``print()`` is necessary for the code to work. If you omit it or don't "
"indent a line correctly, the editor will highlight it in red and display the "
"following error message: \"Indented block expected\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:170
msgid ""
"Save the scene if you haven't already, then press :kbd:`F6` (:kbd:`Cmd + R` "
"on macOS) to run it. Look at the **Output** bottom panel that expands. It "
"should display \"Hello, world!\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:176
msgid ""
"Delete the ``_init()`` function, so you're only left with the line ``extends "
"Sprite``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:180
msgid "Turning around"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:182
msgid ""
"It's time to make our node move and rotate. To do so, we're going to add two "
"member variables to our script: the movement speed in pixels per second and "
"the angular speed in radians per second."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:197
msgid ""
"Member variables sit near the top of the script, after any \"extends\" "
"lines, but before functions. Every node instance with this script attached "
"to it will have its own copy of the ``speed`` and ``angular_speed`` "
"properties."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:202
msgid ""
"Angles in Godot work in radians by default, but you have built-in functions "
"and properties available if you prefer to calculate angles in degrees "
"instead."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:206
msgid ""
"To move our icon, we need to update its position and rotation every frame in "
"the game loop. We can use the ``_process()`` virtual function of the "
"``Node`` class. If you define it in any class that extends the Node class, "
"like Sprite, Godot will call the function every frame and pass it an "
"argument named ``delta``, the time elapsed since the last frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:214
msgid ""
"Games work by rendering many images per second, each called a frame, and "
"they do so in a loop. We measure the rate at which a game produces images in "
"Frames Per Second (FPS). Most games aim for 60 FPS, although you might find "
"figures like 30 FPS on slower mobile devices or 90 to 240 for virtual "
"reality games."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:220
msgid ""
"The engine and game developers do their best to update the game world and "
"render images at a constant time interval, but there are always small "
"variations in frame render times. That's why the engine provides us with "
"this delta time value, making our motion independent of our framerate."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:225
msgid "At the bottom of the script, define the function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:240
msgid ""
"The ``func`` keyword defines a new function. After it, we have to write the "
"function's name and arguments it takes in parentheses. A colon ends the "
"definition, and the indented blocks that follow are the function's content "
"or instructions."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:245
msgid ""
"Notice how ``_process()``, like ``_init()``, starts with a leading "
"underscore. By convention, Godot's virtual functions, that is to say, built-"
"in functions you can override to communicate with the engine, start with an "
"underscore."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:250
msgid ""
"The line inside the function, ``rotation += angular_speed * delta``, "
"increments our sprite's rotation every frame. Here, ``rotation`` is a "
"property inherited from the class ``Node2D``, which ``Sprite`` extends. It "
"controls the rotation of our node and works with radians."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:255
msgid ""
"In the code editor, you can ctrl-click on any built-in property or function "
"like ``position``, ``rotation``, or ``_process`` to open the corresponding "
"documentation in a new tab."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:259
msgid "Run the scene to see the Godot icon turn in-place."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:264
msgid "Moving forward"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:266
msgid ""
"Let's now make the node move. Add the following two lines to the "
"``_process()`` function, ensuring the new lines are indented the same way as "
"the one before them."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:283
msgid ""
"As we already saw, the ``var`` keyword defines a new variable. If you put it "
"at the top of the script, it defines a property of the class. Inside a "
"function, it defines a local variable: it only exists within the function's "
"scope."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:287
msgid ""
"We define a local variable named ``velocity``, a 2D vector representing both "
"a direction and a speed. To make the node move forward, we start from the "
"Vector2 class's constant Vector2.UP, a vector pointing up, and rotate it by "
"calling the ``Vector2.rotated()`` method. This expression, ``Vector2.UP."
"rotated(rotation)``, is a vector pointing forward relative to our icon. "
"Multiplied by our ``speed`` property, it gives us a velocity we can use to "
"move the node forward."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:294
msgid ""
"We add ``velocity * delta`` to the node's ``position`` to move it. The "
"position itself is of type :ref:`Vector2 <class_Vector2>`, a built-in type "
"in Godot representing a 2D vector."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:298
msgid "Run the scene to see the Godot head run in circles."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:302
msgid ""
"Moving a node like that does not take into account colliding with walls or "
"the floor. In :ref:`doc_your_first_2d_game`, you will learn another approach "
"to moving objects while detecting collisions."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:306
msgid ""
"Our node currently moves by itself. In the next part :ref:"
"`doc_scripting_player_input`, we'll use player input to control it."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:310
#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:113
#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Complete script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:312
#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:115
msgid "Here is the complete ``Sprite.gd`` file for reference."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:8
msgid "Listening to player input"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:10
msgid ""
"Building upon the previous lesson :ref:`doc_scripting_first_script`, let's "
"look at another important feature of any game: giving control to the player. "
"To add this, we need to modify our ``Sprite.gd`` code."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:16
msgid "You have two main tools to process the player's input in Godot:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:18
msgid ""
"The built-in input callbacks, mainly ``_unhandled_input()``. Like "
"``_process()``, it's a built-in virtual function that Godot calls every time "
"the player presses a key. It's the tool you want to use to react to events "
"that don't happen every frame, like pressing :kbd:`Space` to jump. To learn "
"more about input callbacks, see :ref:`doc_inputevent`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:23
msgid ""
"The ``Input`` singleton. A singleton is a globally accessible object. Godot "
"provides access to several in scripts. It's the right tool to check for "
"input every frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:27
msgid ""
"We're going to use the ``Input`` singleton here as we need to know if the "
"player wants to turn or move every frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:30
msgid ""
"For turning, we should use a new variable: ``direction``. In our "
"``_process()`` function, replace the ``rotation += angular_speed * delta`` "
"line with the code below."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:59
msgid ""
"Our ``direction`` local variable is a multiplier representing the direction "
"in which the player wants to turn. A value of ``0`` means the player isn't "
"pressing the left or the right arrow key. A value of ``1`` means the player "
"wants to turn right, and ``-1`` means they want to turn left."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:64
msgid ""
"To produce these values, we introduce conditions and the use of ``Input``. A "
"condition starts with the ``if`` keyword in GDScript and ends with a colon. "
"The condition is the expression between the keyword and the end of the line."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:68
msgid ""
"To check if a key was pressed this frame, we call ``Input."
"is_action_pressed()``. The method takes a text string representing an input "
"action and returns ``true`` if the action is pressed, ``false`` otherwise."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:72
msgid ""
"The two actions we use above, \"ui_left\" and \"ui_right\", are predefined "
"in every Godot project. They respectively trigger when the player presses "
"the left and right arrows on the keyboard or left and right on a gamepad's D-"
"pad."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:76
msgid ""
"You can see and edit input actions in your project by going to Project -> "
"Project Settings and clicking on the Input Map tab."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:79
msgid ""
"Finally, we use the ``direction`` as a multiplier when we update the node's "
"``rotation``: ``rotation += angular_speed * direction * delta``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:82
msgid ""
"If you run the scene with this code, the icon should rotate when you press :"
"kbd:`Left` and :kbd:`Right`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:86
msgid "Moving when pressing \"up\""
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:88
msgid ""
"To only move when pressing a key, we need to modify the code that calculates "
"the velocity. Replace the line starting with ``var velocity`` with the code "
"below."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:106
msgid ""
"We initialize the ``velocity`` with a value of ``Vector2.ZERO``, another "
"constant of the built-in ``Vector`` type representing a 2D vector of length "
"0."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:109
msgid ""
"If the player presses the \"ui_up\" action, we then update the velocity's "
"value, causing the sprite to move forward."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:174
msgid ""
"If you run the scene, you should now be able to rotate with the left and "
"right arrow keys and move forward by pressing :kbd:`Up`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:182
msgid ""
"In summary, every script in Godot represents a class and extends one of the "
"engine's built-in classes. The node types your classes inherit from give you "
"access to properties like ``rotation`` and ``position`` in our sprite's "
"case. You also inherit many functions, which we didn't get to use in this "
"example."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:187
msgid ""
"In GDScript, the variables you put at the top of the file are your class's "
"properties, also called member variables. Besides variables, you can define "
"functions, which, for the most part, will be your classes' methods."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:191
msgid ""
"Godot provides several virtual functions you can define to connect your "
"class with the engine. These include ``_process()``, to apply changes to the "
"node every frame, and ``_unhandled_input()``, to receive input events like "
"key and button presses from the users. There are quite a few more."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:196
msgid ""
"The ``Input`` singleton allows you to react to the players' input anywhere "
"in your code. In particular, you'll get to use it in the ``_process()`` loop."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_player_input.rst:199
msgid ""
"In the next lesson :ref:`doc_signals`, we'll build upon the relationship "
"between scripts and nodes by having our nodes trigger code in scripts."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:6
#: ../../docs/tutorials/scripting/instancing_with_signals.rst:1
msgid "Signal"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid "Using signals"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:18
msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"For example, you might have a life bar on the screen that represents the "
"player’s health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:28
msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:32
msgid ""
"We will now use a signal to make our Godot icon from the previous lesson (:"
"ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:38
#: ../../docs/tutorials/animation/introduction.rst:106
#: ../../docs/tutorials/physics/kinematic_character_2d.rst:79
msgid "Scene setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:40
msgid ""
"To add a button to our game, we will create a new \"main\" scene which will "
"include both a button and the ``Sprite.tscn`` scene that we scripted in "
"previous lessons."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:44
msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:48
msgid ""
"In the Scene dock, click the 2D Scene button. This will add a Node2D as our "
"root."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:53
msgid ""
"In the FileSystem dock, click and drag the ``Sprite.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"We want to add another node as a sibling of the Sprite. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid "Search for the Button node type and add it."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:67
msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:72
msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:76
msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:78
msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter \"Toggle motion\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:83
msgid "Your scene tree and viewport should look like this."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:87
msgid ""
"Save your newly created scene. You can then run it with :kbd:`F6`. At the "
"moment, the button will be visible, but nothing will happen if you press it."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:92
msgid "Connecting a signal in the editor"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:94
msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite, and "
"we want to call a new function that will toggle its motion on and off. We "
"need to have a script attached to the Sprite node, which we do from the "
"previous lesson."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:98
msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:103
msgid "The dock displays a list of signals available on the selected node."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:107
msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:111
msgid ""
"There, you can connect the signal to the Sprite node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_NodeName_signal_name\". Here, it'll be "
"\"_on_Button_pressed\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:118
msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:124
msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:129
msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:135
msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:140
msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:143
msgid ""
"Our Sprite moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:155
msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:158
msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:170
msgid "Your complete ``Sprite.gd`` code should look like the following."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:190
msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:193
msgid "Connecting a signal via code"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:198
msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:201
msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Alt + 1` on macOS)."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:204
msgid ""
"In the Scene dock, right-click on the Sprite node and add a new child node. "
"Search for Timer and add the corresponding node. Your scene should now look "
"like this."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:210
msgid ""
"With the Timer node selected, go to the Inspector and check the "
"**Autostart** property."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:215
msgid ""
"Click the script icon next to Sprite to jump back to the scripting workspace."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:219
msgid "We need to do two operations to connect the nodes via code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:221
msgid "Get a reference to the Timer from the Sprite."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid "Call the Timer's ``connect()`` method."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:224
msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the node you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:228
msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_method__ready>` built-in "
"function, which is called automatically by the engine when a node is fully "
"instantiated."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:232
msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:242
msgid ""
"The function ``get_node()`` looks at the Sprite's children and gets nodes by "
"their name. For example, if you renamed the Timer node to \"BlinkingTimer\" "
"in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:248
msgid ""
"We can now connect the Timer to the Sprite in the ``_ready()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:257
msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached (``self``). When the Timer emits "
"\"timeout\", we want to call the function \"_on_Timer_timeout\", that we "
"need to define. Let's add it at the bottom of our script and use it to "
"toggle our sprite's visibility."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:268
msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:272
msgid ""
"If you run the scene now, you will see that the sprite blinks on and off, at "
"one second intervals."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"That's it for our little moving and blinking Godot icon demo! Here is the "
"complete ``Sprite.gd`` file for reference."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:309
msgid "Custom signals"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:311
msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:314
msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:328
msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:331
msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:336
msgid "To emit a signal in your scripts, call ``emit_signal()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:346
msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:358
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:363
msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit_signal()`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:377
msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:381
msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:385
msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:389
msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:4
msgid "Your first 2D game"
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:6
msgid ""
"In this step-by-step tutorial series, you will create your first complete 2D "
"game with Godot. By the end of the series, you will have a simple yet "
"complete game of your own, like the image below."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:12
msgid ""
"You will learn how the Godot editor works, how to structure a project, and "
"build a 2D game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:15
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:19
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:22
#: ../../docs/getting_started/first_3d_game/index.rst:17
msgid "You will learn to:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:24
msgid "Create a complete 2D game with the Godot editor."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:25
msgid "Structure a simple game project."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:26
msgid "Move the player character and change its sprite."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:27
msgid "Spawn random enemies."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:28
msgid "Count the score."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:30
#: ../../docs/getting_started/first_3d_game/index.rst:28
msgid "And more."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:32
msgid ""
"You'll find another series where you'll create a similar game but in 3D. We "
"recommend you to start with this one, though."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:35
msgid "**Why start with 2D?**"
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:37
msgid ""
"3D games are much more complex than 2D ones. It would be best if you stuck "
"to 2D until you understood the game development process and how to use Godot "
"well."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:40
msgid "You can find a completed version of this project at this location:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:42
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:45
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:44
#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:47
msgid "Prerequisites"
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:47
msgid ""
"This step-by-step tutorial is intended for beginners who followed the "
"complete :ref:`Getting Started <toc-learn-step_by_step>`."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:50
msgid ""
"If you're an experienced programmer, you can find the complete demo's source "
"code here: `Godot demo projects <https://github.com/godotengine/godot-demo-"
"projects>`__."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:54
msgid ""
"We prepared some game assets you'll need to download so we can jump straight "
"to the code."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:57
msgid "You can download them by clicking the link below."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:59
msgid ":download:`dodge_assets.zip <files/dodge_assets.zip>`."
msgstr ""

#: ../../docs/getting_started/first_2d_game/index.rst:62
#: ../../docs/getting_started/first_3d_game/index.rst:53
msgid "Contents"
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:4
#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:21
msgid "Setting up the project"
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:6
msgid "In this short first part, we'll set up and organize the project."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:8
msgid "Launch Godot and create a new project."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:15
#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:22
msgid ""
"Download :download:`dodge_assets.zip <files/dodge_assets.zip>`. The archive "
"contains the images and sounds you'll be using to make the game. Extract the "
"archive and move the ``art/`` and ``fonts/`` directories to your project's "
"directory."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:20
#: ../../docs/tutorials/performance/cpu_optimization.rst:180
#: ../../docs/tutorials/scripting/c_sharp/index.rst:2
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:30
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:59
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:221
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:236
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:248
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:259
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:267
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:282
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:294
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:351
msgid "C#"
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:27
msgid ""
"Ensure that you have the required dependencies to use C# in Godot. You need "
"the .NET Core 3.1 SDK, and an editor such as VS Code. See :ref:"
"`doc_c_sharp_setup`."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:31
msgid "GDNative C++"
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:33
msgid ""
"Download :download:`dodge_assets_with_gdnative.zip <files/"
"dodge_assets_with_gdnative.zip>`. The archive contains the images and sounds "
"you'll be using to make the game. It also contains a starter GDNative "
"project including a ``SConstruct`` file, a ``dodge_the_creeps.gdnlib`` file, "
"a ``player.gdns`` file, and an ``entry.cpp`` file."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:40
msgid ""
"Ensure that you have the required dependencies to use GDNative C++. You need "
"a C++ compiler such as GCC or Clang or MSVC that supports C++14. On Windows "
"you can download Visual Studio 2019 and select the C++ workload. You also "
"need SCons to use the build system (the SConstruct file). Then you need to "
"`download the Godot C++ bindings <https://github.com/godotengine/godot-"
"cpp>`_ and place them in your project."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:47
msgid "Your project folder should look like this."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:51
msgid ""
"This game is designed for portrait mode, so we need to adjust the size of "
"the game window. Click on *Project -> Project Settings* to open the project "
"settings window and in the left column, open the *Display -> Window* tab. "
"There, set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:58
msgid ""
"Also, scroll down to the bottom of the section and, under the \"Stretch\" "
"options, set ``Mode`` to \"2d\" and ``Aspect`` to \"keep\". This ensures "
"that the game scales consistently on different sized screens."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:65
msgid "Organizing the project"
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:67
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene."
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:70
msgid ""
"In a larger project, it might be useful to create folders to hold the "
"various scenes and their scripts, but for this relatively small game, you "
"can save your scenes and scripts in the project's root folder, identified by "
"``res://``. You can see your project folders in the FileSystem dock in the "
"lower left corner:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/01.project_setup.rst:77
msgid ""
"With the project in place, we're ready to design the player scene in the "
"next lesson."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:4
msgid "Creating the player scene"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:6
msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:9
msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:14
msgid "Node structure"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:16
msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:23
msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:26
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:31
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:38
msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:41
msgid "For this project, we will be following the Godot naming conventions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:43
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:47
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:54
msgid "Sprite animation"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:56
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:67
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:76
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:83
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:92
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:96
msgid "Make sure to save the scene again after these changes."
msgstr ""

#: ../../docs/getting_started/first_2d_game/02.player_scene.rst:98
msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:4
msgid "Coding the player"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:6
msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:9
msgid ""
"To do so, we need to add some functionality that we can't get from a built-"
"in node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:15
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:18
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:23
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:26
msgid "Start by declaring the member variables this object will need:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:86
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:93
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:101
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:129
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:134
msgid "Check for input."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:135
msgid "Move in the given direction."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:136
msgid "Play the appropriate animation."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:138
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this game, "
"we will map the arrow keys to the four directions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:144
msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:150
msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"then click the \"Key\" option in the drop-down menu. A dialog asks you to "
"type in the desired key. Press the right arrow on your keyboard and click "
"\"Ok\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:156
msgid "Repeat these steps to add three more mappings:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:158
msgid "``move_left`` mapped to the left arrow key."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:159
msgid "``move_up`` mapped to the up arrow key."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:160
msgid "And ``move_down`` mapped to the down arrow key."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:162
msgid "Your input map tab should look like this:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:166
msgid "Click the \"Close\" button to close the project settings."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:170
msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:173
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:252
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:259
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:263
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:267
msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:270
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, "
"``$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:274
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:279
msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:307
msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:312
msgid ""
"Click \"Play Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm you "
"can move the player around the screen in all directions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:315
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:317
msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:320
msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:325
msgid "Choosing animations"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:327
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:373
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:397
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:400
msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:405
msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:422
msgid "Preparing for collisions"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:424
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:428
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:457
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:464
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:473
msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:505
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:509
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:514
msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:543
msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:4
msgid "Creating the enemy"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:6
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen, choose a random direction, and move in a straight line."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:10
msgid ""
"We'll create a ``Mob`` scene, which we can then *instance* to create any "
"number of independent mobs in the game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:14
msgid "Node setup"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:16
msgid "Click Scene -> New Scene and add the following nodes:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:18
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:20
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:21
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:22
msgid ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:24
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:27
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the :"
"ref:`CollisionObject2D <class_CollisionObject2D>` section, click the "
"``Mask`` property and uncheck the first box. This will ensure the mobs do "
"not collide with each other."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:34
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"There are two images for each animation in the art folder."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:38
msgid "Adjust the \"Speed (FPS)\" to ``3`` for all animations."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:42
msgid "Set the ``Playing`` property in the Inspector to \"On\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:44
msgid ""
"We'll select one of these animations randomly so that the mobs will have "
"some variety."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:47
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:50
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` (under \"Transform\" in the Inspector)."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:54
msgid "Save the scene."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:57
msgid "Enemy script"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:59
msgid "Add a script to the ``Mob`` like this:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:102
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we play the "
"animation and randomly choose one of the three animation types:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:140
msgid ""
"First, we get the list of animation names from the AnimatedSprite's "
"``frames`` property. This returns an Array containing all three animation "
"names: ``[\"walk\", \"swim\", \"fly\"]``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:144
msgid ""
"We then need to pick a random number between ``0`` and ``2`` to select one "
"of these names from the list (array indices start at ``0``). ``randi() % n`` "
"selects a random integer between ``0`` and ``n-1``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:148
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:152
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the "
"``VisibilityNotifier2D`` node and add this code:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:176
msgid "This completes the `Mob` scene."
msgstr ""

#: ../../docs/getting_started/first_2d_game/04.creating_the_enemy.rst:178
msgid ""
"With the player and enemies ready, in the next part, we'll bring them "
"together in a new scene. We'll make enemies spawn randomly around the game "
"board and move forward, turning our project into a playable game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:4
msgid "The main game scene"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:6
msgid ""
"Now it's time to bring everything we did together into a playable game scene."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:8
msgid ""
"Create a new scene and add a :ref:`Node <class_Node>` named ``Main``. (The "
"reason we are using Node instead of Node2D is because this node will be a "
"container for handling game logic. It does not require 2D functionality "
"itself.)"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:12
msgid ""
"Click the **Instance** button (represented by a chain link icon) and select "
"your saved ``Player.tscn``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:17
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:20
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:22
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:24
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:26
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:29
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:31
msgid "``MobTimer``: ``0.5``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:32
msgid "``ScoreTimer``: ``1``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:33
msgid "``StartTimer``: ``2``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:35
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:39
msgid "Spawning mobs"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:41
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:48
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:56
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:61
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:64
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:69
msgid "Your scene should look like this:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:74
msgid "Main script"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:76
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:155
msgid ""
"We also add a call to ``randomize()`` here so that the random number "
"generator generates different random numbers each time the game is run:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:195
msgid ""
"Click the ``Main`` node and you will see the ``Mob Scene`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:198
msgid "You can assign this property's value in two ways:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:200
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" dock and drop it in the **Mob "
"Scene** property."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:202
msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:204
msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:207
msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:261
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:311
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position. When "
"we spawn a mob, we'll pick a random value between ``150.0`` and ``250.0`` "
"for how fast each mob will move (it would be boring if they were all moving "
"at the same speed)."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:319
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:410
msgid ""
"Why ``PI``? In functions requiring angles, Godot uses *radians*, not "
"degrees. Pi represents a half turn in radians, about ``3.1415`` (there is "
"also ``TAU`` which is equal to ``2 * PI``). If you're more comfortable "
"working with degrees, you'll need to use the ``deg2rad()`` and ``rad2deg()`` "
"functions to convert between the two."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:418
msgid "Testing the scene"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:420
msgid ""
"Let's test the scene to make sure everything is working. Add this "
"``new_game`` call to ``_ready()``:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:444
msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:448
msgid ""
"If you had already set another scene as the \"Main Scene\", you can right "
"click ``Main.tscn`` in the FileSystem dock and select \"Set As Main Scene\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:451
msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:454
msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/05.the_main_game_scene.rst:457
msgid ""
"What's our game lacking? Some user interface. In the next lesson, we'll add "
"a title screen and display the player's score."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:4
msgid "Heads up display"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:6
msgid ""
"The final piece our game needs is a User Interface (UI) to display things "
"like score, a \"game over\" message, and a restart button."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:9
msgid ""
"Create a new scene, and add a :ref:`CanvasLayer <class_CanvasLayer>` node "
"named ``HUD``. \"HUD\" stands for \"heads-up display\", an informational "
"display that appears as an overlay on top of the game view."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:13
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:17
msgid "The HUD needs to display the following information:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:19
msgid "Score, changed by ``ScoreTimer``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:20
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:21
msgid "A \"Start\" button to begin the game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:23
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:27
msgid "Create the following as children of the ``HUD`` node:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:29
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:30
msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:31
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:32
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:34
msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:39
msgid ""
"Under **Theme overrides > Fonts** click on the empty box and select \"New "
"DynamicFont\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:43
msgid ""
"Click on the \"DynamicFont\" you added, and under **Font > FontData**, "
"choose \"Load\" and select the \"Xolonium-Regular.ttf\" file."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:48
msgid "Set the \"Size\" property under ``Settings``, ``64`` works well."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:52
msgid ""
"Once you've done this on the ``ScoreLabel``, you can click the down arrow "
"next to the Font property and choose \"Copy\", then \"Paste\" it in the same "
"place on the other two Control nodes."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:56
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:62
msgid ""
"Arrange the nodes as shown below. Click the \"Layout\" button to set a "
"Control node's layout:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:67
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:71
msgid "ScoreLabel"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:73
msgid "*Layout* : \"Top Wide\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:74
msgid "*Text* : ``0``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:75
#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:82
msgid "*Align* : \"Center\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:78
msgid "Message"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:80
msgid "*Layout* : \"HCenter Wide\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:81
msgid "*Text* : ``Dodge the Creeps!``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:83
msgid "*Autowrap* : \"On\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:86
msgid "StartButton"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:88
msgid "*Text* : ``Start``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:89
msgid "*Layout* : \"Center Bottom\""
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:90
msgid "*Margin* :"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:92
msgid "Top: ``-200``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:93
msgid "Bottom: ``-100``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:95
msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:98
msgid "Now add this script to ``HUD``:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:158
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:205
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:256
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:260
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:285
msgid "This function is called by ``Main`` whenever the score changes."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:287
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton`` and add the following code to the new functions:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:333
msgid "Connecting HUD to Main"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:335
msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:341
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:344
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by typing \"new_game\" in the "
"\"Receiver Method\" in the \"Connect a Signal\" window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:349
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:368
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:383
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:399
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:403
msgid "Removing old creeps"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:405
msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:410
msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:416
msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``new_game()`` function in ``Main``:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:434
msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""

#: ../../docs/getting_started/first_2d_game/06.heads_up_display.rst:437
msgid ""
"The game's mostly done at this point. In the next and last part, we'll "
"polish it a bit by adding a background, looping music, and some keyboard "
"shortcuts."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:4
msgid "Finishing up"
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:6
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:9
msgid "Feel free to expand the gameplay with your own ideas."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:12
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:59
msgid "Background"
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:14
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and select \"Layout\" -> \"Full Rect\" so that it covers the "
"screen."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:20
msgid ""
"You could also add a background image, if you have one, by using a "
"``TextureRect`` node instead."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:24
msgid "Sound effects"
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:26
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:31
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:36
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:39
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:42
msgid "Keyboard shortcut"
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:44
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. We can do "
"this with the \"Shortcut\" property of the ``Button`` node."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:48
msgid ""
"In a previous lesson, we created four input actions to move the character. "
"We will create a similar input action to map to the start button."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:51
msgid ""
"Select \"Project\" -> \"Project Settings\" and then click on the \"Input "
"Map\" tab. In the same way you created the movement input actions, create a "
"new input action called ``start_game`` and add a key mapping for the :kbd:"
"`Enter` key."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:56
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEventAction\". Finally, in the "
"*Action* property, type the name ``start_game``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:64
msgid ""
"Now when the start button appears, you can either click it or press :kbd:"
"`Enter` to start the game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:67
msgid "And with that, you completed your first 2D game in Godot."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:71
msgid ""
"You got to make a player-controlled character, enemies that spawn randomly "
"around the game board, count the score, implement a game over and replay, "
"user interface, sounds, and more. Congratulations!"
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:75
msgid ""
"There's still much to learn, but you can take a moment to appreciate what "
"you achieved."
msgstr ""

#: ../../docs/getting_started/first_2d_game/07.finishing-up.rst:78
msgid ""
"And when you're ready, you can move on to :ref:`doc_your_first_3d_game` to "
"learn to create a complete 3D game from scratch, in Godot."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:4
msgid "Your first 3D game"
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:6
msgid ""
"In this step-by-step tutorial series, you will create your first complete 3D "
"game with Godot. By the end of the series, you will have a simple yet "
"finished project of your own like the animated gif below."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:12
msgid ""
"The game we'll code here is similar to :ref:`doc_your_first_2d_game`, with a "
"twist: you can now jump and your goal is to squash the creeps. This way, you "
"will both **recognize patterns** you learned in the previous tutorial and "
"**build upon them** with new code and features."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:19
msgid "Work with 3D coordinates with a jumping mechanic."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:20
msgid ""
"Use kinematic bodies to move 3D characters and detect when and how they "
"collide."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:22
msgid ""
"Use physics layers and a group to detect interactions with specific entities."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:23
msgid ""
"Code basic procedural gameplay by instancing monsters at regular time "
"intervals."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:25
msgid "Design a movement animation and change its speed at run-time."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:26
msgid "Draw a user interface on a 3D game."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:30
msgid ""
"This tutorial is for beginners who followed the complete getting started "
"series. We'll start slow with detailed instructions and shorten them as we "
"do similar steps. If you're an experienced programmer, you can browse the "
"complete demo's source code here: `Squash the Creep source code <https://"
"github.com/GDQuest/godot-3d-dodge-the-creeps/>`__."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:38
msgid ""
"You can follow this series without having done the 2D one. However, if "
"you're new to game development, we recommend you to start with 2D. 3D game "
"code is always more complex and the 2D series will give you foundations to "
"follow along more comfortably."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:43
msgid ""
"We prepared some game assets so we can jump straight to the code. You can "
"download them here: `Squash the Creeps assets <https://github.com/GDQuest/"
"godot-3d-dodge-the-creeps/releases/tag/1.1.0>`__."
msgstr ""

#: ../../docs/getting_started/first_3d_game/index.rst:47
msgid ""
"We will first work on a basic prototype for the player's movement. We will "
"then add the monsters that we'll spawn randomly around the screen. After "
"that, we'll implement the jump and squashing mechanic before refining the "
"game with some nice animation. We'll wrap up with the score and the retry "
"screen."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:4
msgid "Setting up the game area"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:6
msgid ""
"In this first part, we're going to set up the game area. Let's get started "
"by importing the start assets and setting up the game scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:9
msgid ""
"We've prepared a Godot project with the 3D models and sounds we'll use for "
"this tutorial, linked in the index page. If you haven't done so yet, you can "
"download the archive here: `Squash the Creeps assets <https://github.com/"
"GDQuest/godot-3d-dodge-the-creeps/releases/tag/1.0.0>`__."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:14
msgid ""
"Once you downloaded it, extract the .zip archive on your computer. Open the "
"Godot project manager and click the *Import* button."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:19
msgid ""
"In the import popup, enter the full path to the freshly created directory "
"``squash_the_creeps_start/``. You can click the *Browse* button on the right "
"to open a file browser and navigate to the ``project.godot`` file the folder "
"contains."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:26
msgid "Click *Import & Edit* to open the project in the editor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:30
msgid ""
"The start project contains an icon and two folders: ``art/`` and ``fonts/``. "
"There, you will find the art assets and music we'll use in the game."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:35
msgid ""
"There are two 3D models, ``player.glb`` and ``mob.glb``, some materials that "
"belong to these models, and a music track."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:39
msgid "Setting up the playable area"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:41
msgid ""
"We're going to create our main scene with a plain *Node* as its root. In the "
"*Scene* dock, click the *Add Node* button represented by a \"+\" icon in the "
"top-left and double-click on *Node*. Name the node \"Main\". Alternatively, "
"to add a node to the scene, you can press :kbd:`Ctrl + a` (or :kbd:`Cmd + a` "
"on macOS)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:48
msgid ""
"Save the scene as ``Main.tscn`` by pressing :kbd:`Ctrl + s` (:kbd:`Cmd + s` "
"on macOS)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:50
msgid ""
"We'll start by adding a floor that'll prevent the characters from falling. "
"To create static colliders like the floor, walls, or ceilings, you can use "
"*StaticBody* nodes. They require *CollisionShape* child nodes to define the "
"collision area. With the *Main* node selected, add a *StaticBody* node, then "
"a *CollisionShape*. Rename the *StaticBody* as *Ground*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:56
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:86
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:371
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:82
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:60
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:91
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:56
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:55
#: ../../docs/community/asset_library/using_assetlib.rst:99
msgid "|image6|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:153
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:165
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:409
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:331
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:342
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:351
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:463
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:540
#: ../../docs/community/asset_library/using_assetlib.rst:193
msgid "image6"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:58
msgid ""
"A warning sign next to the *CollisionShape* appears because we haven't "
"defined its shape. If you click the icon, a popup appears to give you more "
"information."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:61
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:92
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:376
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:94
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:65
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:191
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:68
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:59
#: ../../docs/community/asset_library/using_assetlib.rst:125
msgid "|image7|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:154
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:166
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:410
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:332
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:343
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:352
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:464
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:541
#: ../../docs/community/asset_library/using_assetlib.rst:194
msgid "image7"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:63
msgid ""
"To create a shape, with the *CollisionShape* selected, head to the "
"*Inspector* and click the *[empty]* field next to the *Shape* property. "
"Create a new *Box Shape*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:67
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:102
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:382
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:225
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:71
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:196
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:73
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:64
#: ../../docs/community/asset_library/using_assetlib.rst:133
msgid "|image8|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:155
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:167
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:411
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:333
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:344
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:353
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:465
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:542
#: ../../docs/community/asset_library/using_assetlib.rst:195
msgid "image8"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:69
msgid ""
"The box shape is perfect for flat ground and walls. Its thickness makes it "
"reliable to block even fast-moving objects."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:72
msgid ""
"A box's wireframe appears in the viewport with three orange dots. You can "
"click and drag these to edit the shape's extents interactively. We can also "
"precisely set the size in the inspector. Click on the *BoxShape* to expand "
"the resource. Set its *Extents* to ``30`` on the X axis, ``1`` for the Y "
"axis, and ``30`` for the Z axis."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:78
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:106
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:387
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:230
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:76
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:90
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:69
#: ../../docs/community/asset_library/using_assetlib.rst:154
msgid "|image9|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:156
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:168
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:412
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:334
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:345
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:466
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:543
#: ../../docs/community/asset_library/using_assetlib.rst:196
msgid "image9"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:82
msgid ""
"In 3D, translation and size units are in meters. The box's total size is "
"twice its extents: ``60`` by ``60`` meters on the ground plane and ``2`` "
"units tall. The ground plane is defined by the X and Z axes, while the Y "
"axis represents the height."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:87
msgid ""
"Collision shapes are invisible. We need to add a visual floor that goes "
"along with it. Select the *Ground* node and add a *MeshInstance* as its "
"child."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:90
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:111
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:398
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:234
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:86
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:122
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:86
#: ../../docs/community/asset_library/using_assetlib.rst:160
msgid "|image10|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:157
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:169
#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:413
#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:335
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:346
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:467
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:544
#: ../../docs/community/asset_library/using_assetlib.rst:197
msgid "image10"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:92
msgid ""
"In the *Inspector*, click on the field next to *Mesh* and create a "
"*CubeMesh* resource to create a visible cube."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:95
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:116
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:90
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:182
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:90
#: ../../docs/community/asset_library/using_assetlib.rst:165
msgid "|image11|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:158
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:170
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:347
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:468
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:545
#: ../../docs/community/asset_library/using_assetlib.rst:198
msgid "image11"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:97
msgid ""
"Once again, it's too small by default. Click the cube icon to expand the "
"resource and set its *Size* to ``60``, ``2``, and ``60``. As the cube "
"resource works with a size rather than extents, we need to use these values "
"so it matches our collision shape."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:102
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:120
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:102
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:206
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:95
#: ../../docs/community/asset_library/using_assetlib.rst:173
msgid "|image12|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:159
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:171
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:348
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:469
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:546
#: ../../docs/community/asset_library/using_assetlib.rst:199
msgid "image12"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:104
msgid ""
"You should see a wide grey slab that covers the grid and blue and red axes "
"in the viewport."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:107
msgid ""
"We're going to move the ground down so we can see the floor grid. Select the "
"*Ground* node, hold the :kbd:`Ctrl` key down to turn on grid snapping (:kbd:"
"`Cmd` on macOS), and click and drag down on the Y axis. It's the green arrow "
"in the move gizmo."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:111
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:125
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:107
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:210
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:101
#: ../../docs/community/asset_library/using_assetlib.rst:180
msgid "|image13|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:160
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:172
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:349
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:470
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:547
#: ../../docs/community/asset_library/using_assetlib.rst:200
msgid "image13"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:115
msgid ""
"If you can't see the 3D object manipulator like on the image above, ensure "
"the *Select Mode* is active in the toolbar above the view."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:118
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:133
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:116
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:215
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:106
#: ../../docs/community/asset_library/using_assetlib.rst:127
msgid "|image14|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:161
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:173
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:350
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:471
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:548
#: ../../docs/community/asset_library/using_assetlib.rst:201
msgid "image14"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:120
msgid ""
"Move the ground down ``1`` meter. A label in the bottom-left corner of the "
"viewport tells you how much you're translating the node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:123
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:139
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:122
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:229
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:123
msgid "|image15|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:162
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:174
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:351
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:472
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:549
msgid "image15"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:127
msgid ""
"Moving the *Ground* node down moves both children along with it. Ensure you "
"move the *Ground* node, **not** the *MeshInstance* or the *CollisionShape*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:131
msgid ""
"Let's add a directional light so our scene isn't all grey. Select the *Main* "
"node and add a *DirectionalLight* as a child of it. We need to move it and "
"rotate it. Move it up by clicking and dragging on the manipulator's green "
"arrow and click and drag on the red arc to rotate it around the X axis, "
"until the ground is lit."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:137
msgid ""
"In the *Inspector*, turn on *Shadow -> Enabled* by clicking the checkbox."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:139
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:144
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:127
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:234
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:134
msgid "|image16|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:163
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:175
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:352
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:473
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:550
msgid "image16"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:141
msgid "At this point, your project should look like this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:143
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:148
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:135
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:239
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:139
msgid "|image17|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:164
#: ../../docs/getting_started/first_3d_game/02.player_input.rst:176
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:353
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:474
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:551
msgid "image17"
msgstr ""

#: ../../docs/getting_started/first_3d_game/01.game_setup.rst:145
msgid ""
"That's our starting point. In the next part, we will work on the player "
"scene and base movement."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:4
msgid "Player scene and input actions"
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:6
msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:13
msgid ""
"Create a new scene by going to the Scene menu in the top-left and clicking "
"*New Scene*. Create a *KinematicBody* node as the root and name it *Player*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:18
msgid ""
"Kinematic bodies are complementary to the area and rigid bodies used in the "
"2D game tutorial. Like rigid bodies, they can move and collide with the "
"environment, but instead of being controlled by the physics engine, you "
"dictate their movement. You will see how we use the node's unique features "
"when we code the jump and squash mechanics."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:26
msgid ""
"To learn more about the different physics node types, see the :ref:"
"`doc_physics_introduction`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:29
msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:32
msgid ""
"Add a *Spatial* node as a child of *Player* and name it *Pivot*. Then, in "
"the FileSystem dock, expand the ``art/`` folder by double-clicking it and "
"drag and drop ``player.glb`` onto the *Pivot* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:38
msgid ""
"This should instantiate the model as a child of *Pivot*. You can rename it "
"to *Character*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:45
msgid ""
"The ``.glb`` files contain 3D scene data based on the open-source GLTF 2.0 "
"specification. They're a modern and powerful alternative to a proprietary "
"format like FBX, which Godot also supports. To produce these files, we "
"designed the model in `Blender 3D <https://www.blender.org/>`__ and exported "
"it to GLTF."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:50
msgid ""
"As with all kinds of physics nodes, we need a collision shape for our "
"character to collide with the environment. Select the *Player* node again "
"and add a *CollisionShape*. In the *Inspector*, assign a *SphereShape* to "
"the *Shape* property. The sphere's wireframe appears below the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:57
msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Shrink it a bit by "
"dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:61
msgid ""
"Then, move the shape up so its bottom roughly aligns with the grid's plane."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:65
msgid ""
"You can toggle the model's visibility by clicking the eye icon next to the "
"*Character* or the *Pivot* nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:70
msgid "Save the scene as ``Player.tscn``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:72
msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:76
msgid "Creating input actions"
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:78
msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:83
msgid ""
"This system is the Input Map. To access its editor, head to the *Project* "
"menu and select *Project Settings…*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:88
msgid ""
"At the top, there are multiple tabs. Click on *Input Map*. This window "
"allows you to add new actions at the top; they are your labels. In the "
"bottom part, you can bind keys to these actions."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:94
msgid ""
"Godot projects come with some predefined actions designed for user interface "
"design, which we could use here. But we're defining our own to support "
"gamepads."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:97
msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:100
msgid "To add an action, write its name in the bar at the top and press Enter."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:104
msgid ""
"Create the five actions. Your window should have them all listed at the "
"bottom."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:108
msgid ""
"To bind a key or button to an action, click the \"+\" button to its right. "
"Do this for ``move_left`` and in the drop-down menu, click *Key*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:113
msgid ""
"This option allows you to add a keyboard input. A popup appears and waits "
"for you to press a key. Press the left arrow key and click *OK*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:118
msgid "Do the same for the A key."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:122
msgid ""
"Let's now add support for a gamepad's left joystick. Click the \"+\" button "
"again but this time, select *Joy Axis*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:127
msgid ""
"The popup gives you two drop-down menus. On the left, you can select a "
"gamepad by index. *Device 0* corresponds to the first plugged gamepad, "
"*Device 1* corresponds to the second, and so on. You can select the joystick "
"and direction you want to bind to the input action on the right. Leave the "
"default values and press the *Add* button."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:135
msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's right axis to ``move_right``. After binding all "
"keys, your interface should look like this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:141
msgid ""
"We have the ``jump`` action left to set up. Bind the Space key and the "
"gamepad's A button. To bind a gamepad's button, select the *Joy Button* "
"option in the menu."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:146
msgid "Leave the default values and click the *Add* button."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:150
msgid "Your jump input action should look like this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:152
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:139
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:329
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:145
msgid "|image18|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:177
#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:354
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:475
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:552
msgid "image18"
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:154
msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""

#: ../../docs/getting_started/first_3d_game/02.player_input.rst:157
msgid "In the next part, we'll code and test the player's movement."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:4
msgid "Moving the player with code"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:6
msgid ""
"It's time to code! We're going to use the input actions we created in the "
"last part to move the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:9
msgid ""
"Right-click the *Player* node and select *Attach Script* to add a new script "
"to it. In the popup, set the *Template* to *Empty* before pressing the "
"*Create* button."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:15
msgid ""
"Let's start with the class's properties. We're going to define a movement "
"speed, a fall acceleration representing gravity, and a velocity we'll use to "
"move the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:48
msgid ""
"These are common properties for a moving body. The ``velocity`` is a 3D "
"vector combining a speed with a direction. Here, we define it as a property "
"because we want to update and reuse its value across frames."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:54
msgid ""
"The values are quite different from 2D code because distances are in meters. "
"While in 2D, a thousand units (pixels) may only correspond to half of your "
"screen's width, in 3D, it's a kilometer."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:58
msgid ""
"Let's code the movement now. We start by calculating the input direction "
"vector using the global ``Input`` object, in ``_physics_process()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:108
msgid ""
"Here, we're going to make all calculations using the ``_physics_process()`` "
"virtual function. Like ``_process()``, it allows you to update the node "
"every frame, but it's designed specifically for physics-related code like "
"moving a kinematic or rigid body."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:115
msgid ""
"To learn more about the difference between ``_process()`` and "
"``_physics_process()``, see :ref:`doc_idle_and_physics_processing`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:118
msgid ""
"We start by initializing a ``direction`` variable to ``Vector3.ZERO``. Then, "
"we check if the player is pressing one or more of the ``move_*`` inputs and "
"update the vector's ``x`` and ``z`` components accordingly. These correspond "
"to the ground plane's axes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:123
msgid ""
"These four conditions give us eight possibilities and eight possible "
"directions."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:125
msgid ""
"In case the player presses, say, both W and D simultaneously, the vector "
"will have a length of about ``1.4``. But if they press a single key, it will "
"have a length of ``1``. We want the vector's length to be consistent. To do "
"so, we can call its ``normalize()`` method."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:153
msgid ""
"Here, we only normalize the vector if the direction has a length greater "
"than zero, which means the player is pressing a direction key."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:156
msgid ""
"In this case, we also get the *Pivot* node and call its ``look_at()`` "
"method. This method takes a position in space to look at in global "
"coordinates and the up direction. In this case, we can use the ``Vector3."
"UP`` constant."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:162
msgid ""
"A node's local coordinates, like ``translation``, are relative to their "
"parent. Global coordinates are relative to the world's main axes you can see "
"in the viewport instead."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:166
msgid ""
"In 3D, the property that contains a node's position is ``translation``. By "
"adding the ``direction`` to it, we get a position to look at that's one "
"meter away from the *Player*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:170
msgid ""
"Then, we update the velocity. We have to calculate the ground velocity and "
"the fall speed separately. Be sure to go back one tab so the lines are "
"inside the ``_physics_process()`` function but outside the condition we just "
"wrote."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:205
msgid ""
"For the vertical velocity, we subtract the fall acceleration multiplied by "
"the delta time every frame. Notice the use of the ``-=`` operator, which is "
"a shorthand for ``variable = variable - ...``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:209
msgid ""
"This line of code will cause our character to fall in every frame. This may "
"seem strange if it's already on the floor. But we have to do this for the "
"character to collide with the ground every frame."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:213
msgid ""
"The physics engine can only detect interactions with walls, the floor, or "
"other bodies during a given frame if movement and collisions happen. We will "
"use this property later to code the jump."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:217
msgid ""
"On the last line, we call ``KinematicBody.move_and_slide()``. It's a "
"powerful method of the ``KinematicBody`` class that allows you to move a "
"character smoothly. If it hits a wall midway through a motion, the engine "
"will try to smooth it out for you."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:222
msgid ""
"The function takes two parameters: our velocity and the up direction. It "
"moves the character and returns a leftover velocity after applying "
"collisions. When hitting the floor or a wall, the function will reduce or "
"reset the speed in that direction from you. In our case, storing the "
"function's returned value prevents the character from accumulating vertical "
"momentum, which could otherwise get so big the character would move through "
"the ground slab after a while."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:229
msgid "And that's all the code you need to move the character on the floor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:231
msgid "Here is the complete ``Player.gd`` code for reference."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:322
msgid "Testing our player's movement"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:324
msgid ""
"We're going to put our player in the *Main* scene to test it. To do so, we "
"need to instantiate the player and then add a camera. Unlike in 2D, in 3D, "
"you won't see anything if your viewport doesn't have a camera pointing at "
"something."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:328
msgid ""
"Save your *Player* scene and open the *Main* scene. You can click on the "
"*Main* tab at the top of the editor to do so."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:333
msgid ""
"If you closed the scene before, head to the *FileSystem* dock and double-"
"click ``Main.tscn`` to re-open it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:336
msgid ""
"To instantiate the *Player*, right-click on the *Main* node and select "
"*Instance Child Scene*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:341
msgid ""
"In the popup, double-click *Player.tscn*. The character should appear in the "
"center of the viewport."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:345
msgid "Adding a camera"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:347
msgid ""
"Let's add the camera next. Like we did with our *Player*\\ 's *Pivot*, we're "
"going to create a basic rig. Right-click on the *Main* node again and select "
"*Add Child Node* this time. Create a new *Position3D*, name it "
"*CameraPivot*, and add a *Camera* node as a child of it. Your scene tree "
"should look like this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:354
msgid ""
"Notice the *Preview* checkbox that appears in the top-left when you have the "
"*Camera* selected. You can click it to preview the in-game camera projection."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:359
msgid ""
"We're going to use the *Pivot* to rotate the camera as if it was on a crane. "
"Let's first split the 3D view to be able to freely navigate the scene and "
"see what the camera sees."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:363
msgid ""
"In the toolbar right above the viewport, click on *View*, then *2 "
"Viewports*. You can also press :kbd:`Ctrl + 2` (:kbd:`Cmd + 2` on macOS)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:368
msgid ""
"On the bottom view, select the *Camera* and turn on camera preview by "
"clicking the checkbox."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:373
msgid ""
"In the top view, move the camera about ``19`` units on the Z axis (the blue "
"one)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:378
msgid ""
"Here's where the magic happens. Select the *CameraPivot* and rotate it "
"``-45`` degrees around the X axis (using the red circle). You'll see the "
"camera move as if it was attached to a crane."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:384
msgid ""
"You can run the scene by pressing :kbd:`F6` and press the arrow keys to move "
"the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:389
msgid ""
"We can see some empty space around the character due to the perspective "
"projection. In this game, we're going to use an orthographic projection "
"instead to better frame the gameplay area and make it easier for the player "
"to read distances."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:394
msgid ""
"Select the *Camera* again and in the *Inspector*, set the *Projection* to "
"*Orthogonal* and the *Size* to ``19``. The character should now look flatter "
"and the ground should fill the background."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:400
msgid ""
"With that, we have both player movement and the view in place. Next, we will "
"work on the monsters."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:4
msgid "Designing the mob scene"
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:6
msgid ""
"In this part, you're going to code the monsters, which we'll call mobs. In "
"the next lesson, we'll spawn them randomly around the playable area."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:9
msgid ""
"Let's design the monsters themselves in a new scene. The node structure is "
"going to be similar to the *Player* scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:12
msgid ""
"Create a scene with, once again, a *KinematicBody* node as its root. Name it "
"*Mob*. Add a *Spatial* node as a child of it, name it *Pivot*. And drag and "
"drop the file ``mob.glb`` from the *FileSystem* dock onto the *Pivot* to add "
"the monster's 3D model to the scene. You can rename the newly created *mob* "
"node into *Character*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:20
msgid ""
"We need a collision shape for our body to work. Right-click on the *Mob* "
"node, the scene's root, and click *Add Child Node*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:25
msgid "Add a *CollisionShape*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:29
msgid "In the *Inspector*, assign a *BoxShape* to the *Shape* property."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:33
msgid ""
"We should change its size to fit the 3D model better. You can do so "
"interactively by clicking and dragging on the orange dots."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:36
msgid ""
"The box should touch the floor and be a little thinner than the model. "
"Physics engines work in such a way that if the player's sphere touches even "
"the box's corner, a collision will occur. If the box is a little too big "
"compared to the 3D model, you may die at a distance from the monster, and "
"the game will feel unfair to the players."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:44
msgid ""
"Notice that my box is taller than the monster. It is okay in this game "
"because we're looking at the scene from above and using a fixed perspective. "
"Collision shapes don't have to match the model exactly. It's the way the "
"game feels when you test it that should dictate their form and size."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:50
msgid "Removing monsters off-screen"
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:52
msgid ""
"We're going to spawn monsters at regular time intervals in the game level. "
"If we're not careful, their count could increase to infinity, and we don't "
"want that. Each mob instance has both a memory and a processing cost, and we "
"don't want to pay for it when the mob's outside the screen."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:57
msgid ""
"Once a monster leaves the screen, we don't need it anymore, so we can delete "
"it. Godot has a node that detects when objects leave the screen, "
"*VisibilityNotifier*, and we're going to use it to destroy our mobs."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:63
msgid ""
"When you keep instancing an object in games, there's a technique you can use "
"to avoid the cost of creating and destroying instances all the time called "
"pooling. It consists of pre-creating an array of objects and reusing them "
"over and over."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:68
msgid ""
"When working with GDScript, you don't need to worry about this. The main "
"reason to use pools is to avoid freezes with garbage-collected languages "
"like C# or Lua. GDScript uses a different technique to manage memory, "
"reference counting, which doesn't have that caveat. You can learn more about "
"that here :ref:`doc_gdscript_basics_memory_management`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:74
msgid ""
"Select the *Mob* node and add a *VisibilityNotifier* as a child of it. "
"Another box, pink this time, appears. When this box completely leaves the "
"screen, the node will emit a signal."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:80
msgid "Resize it using the orange dots until it covers the entire 3D model."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:85
msgid "Coding the mob's movement"
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:87
msgid ""
"Let's implement the monster's motion. We're going to do this in two steps. "
"First, we'll write a script on the *Mob* that defines a function to "
"initialize the monster. We'll then code the randomized spawn mechanism in "
"the *Main* scene and call the function from there."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:92
msgid "Attach a script to the *Mob*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:96
msgid ""
"Here's the movement code to start with. We define two properties, "
"``min_speed`` and ``max_speed``, to define a random speed range. We then "
"define and initialize the ``velocity``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:137
msgid ""
"Similarly to the player, we move the mob every frame by calling "
"``KinematicBody``\\ 's ``move_and_slide()`` method. This time, we don't "
"update the ``velocity`` every frame: we want the monster to move at a "
"constant speed and leave the screen, even if it were to hit an obstacle."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:142
msgid ""
"You may see a warning in GDScript that the return value from "
"``move_and_slide()`` is unused. This is expected. You can simply ignore the "
"warning or, if you want to hide it entirely, add the comment ``# warning-"
"ignore:return_value_discarded`` just above the ``move_and_slide(velocity)`` "
"line. To read more about the GDScript warning system, see :ref:"
"`doc_gdscript_warning_system`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:149
msgid ""
"We need to define another function to calculate the start velocity. This "
"function will turn the monster towards the player and randomize both its "
"angle of motion and its velocity."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:153
msgid ""
"The function will take a ``start_position``, the mob's spawn position, and "
"the ``player_position`` as its arguments."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:156
msgid ""
"We position the mob at ``start_position`` and turn it towards the player "
"using the ``look_at_from_position()`` method, and randomize the angle by "
"rotating a random amount around the Y axis. Below, ``rand_range()`` outputs "
"a random value between ``-PI / 4`` radians and ``PI / 4`` radians."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:182
msgid ""
"We then calculate a random speed using ``rand_range()`` once again and we "
"use it to calculate the velocity."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:185
msgid ""
"We start by creating a 3D vector pointing forward, multiply it by our "
"``random_speed``, and finally rotate it using the ``Vector3`` class's "
"``rotated()`` method."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:217
msgid "Leaving the screen"
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:219
msgid ""
"We still have to destroy the mobs when they leave the screen. To do so, "
"we'll connect our *VisibilityNotifier* node's ``screen_exited`` signal to "
"the *Mob*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:222
msgid ""
"Head back to the 3D viewport by clicking on the *3D* label at the top of the "
"editor. You can also press :kbd:`Ctrl + F2` (:kbd:`Alt + 2` on macOS)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:227
msgid ""
"Select the *VisibilityNotifier* node and on the right side of the interface, "
"navigate to the *Node* dock. Double-click the *screen_exited()* signal."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:232
msgid "Connect the signal to the *Mob*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:236
msgid ""
"This will take you back to the script editor and add a new function for you, "
"``_on_VisibilityNotifier_screen_exited()``. From it, call the "
"``queue_free()`` method. This will destroy the mob instance when the "
"*VisibilityNotifier* \\'s box leaves the screen."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:256
msgid ""
"Our monster is ready to enter the game! In the next part, you will spawn "
"monsters in the game level."
msgstr ""

#: ../../docs/getting_started/first_3d_game/04.mob_scene.rst:259
msgid "Here is the complete ``Mob.gd`` script for reference."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:4
msgid "Spawning monsters"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:6
msgid ""
"In this part, we're going to spawn monsters along a path randomly. By the "
"end, you will have monsters roaming the game board."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:11
msgid ""
"Double-click on ``Main.tscn`` in the *FileSystem* dock to open the *Main* "
"scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:13
msgid ""
"Before drawing the path, we're going to change the game resolution. Our game "
"has a default window size of ``1024x600``. We're going to set it to "
"``720x540``, a nice little box."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:17
msgid "Go to *Project -> Project Settings*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:21
msgid ""
"In the left menu, navigate down to *Display -> Window*. On the right, set "
"the *Width* to ``720`` and the *Height* to ``540``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:27
msgid "Creating the spawn path"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:29
msgid ""
"Like you did in the 2D game tutorial, you're going to design a path and use "
"a *PathFollow* node to sample random locations on it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:32
msgid ""
"In 3D though, it's a bit more complicated to draw the path. We want it to be "
"around the game view so monsters appear right outside the screen. But if we "
"draw a path, we won't see it from the camera preview."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:36
msgid ""
"To find the view's limits, we can use some placeholder meshes. Your viewport "
"should still be split into two parts, with the camera preview at the bottom. "
"If that isn't the case, press :kbd:`Ctrl + 2` (:kbd:`Cmd + 2` on macOS) to "
"split the view into two. Select the *Camera* node and click the *Preview* "
"checkbox in the bottom viewport."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:45
msgid "Adding placeholder cylinders"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:47
msgid ""
"Let's add the placeholder meshes. Add a new *Spatial* node as a child of the "
"*Main* node and name it *Cylinders*. We'll use it to group the cylinders. As "
"a child of it, add a *MeshInstance* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:53
msgid "In the *Inspector*, assign a *CylinderMesh* to the *Mesh* property."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:57
msgid ""
"Set the top viewport to the top orthogonal view using the menu in the "
"viewport's top-left corner. Alternatively, you can press the keypad's 7 key."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:62
msgid ""
"The grid is a bit distracting for me. You can toggle it by going to the "
"*View* menu in the toolbar and clicking *View Grid*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:67
msgid ""
"You now want to move the cylinder along the ground plane, looking at the "
"camera preview in the bottom viewport. I recommend using grid snap to do so. "
"You can toggle it by clicking the magnet icon in the toolbar or pressing Y."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:73
msgid ""
"Place the cylinder so it's right outside the camera's view in the top-left "
"corner."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:78
msgid ""
"We're going to create copies of the mesh and place them around the game "
"area. Press :kbd:`Ctrl + D` (:kbd:`Cmd + D` on macOS) to duplicate the node. "
"You can also right-click the node in the *Scene* dock and select "
"*Duplicate*. Move the copy down along the blue Z axis until it's right "
"outside the camera's preview."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:83
msgid ""
"Select both cylinders by pressing the :kbd:`Shift` key and clicking on the "
"unselected one and duplicate them."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:88
msgid "Move them to the right by dragging the red X axis."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:92
msgid ""
"They're a bit hard to see in white, aren't they? Let's make them stand out "
"by giving them a new material."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:95
msgid ""
"In 3D, materials define a surface's visual properties like its color, how it "
"reflects light, and more. We can use them to change the color of a mesh."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:98
msgid ""
"We can update all four cylinders at once. Select all the mesh instances in "
"the *Scene* dock. To do so, you can click on the first one and Shift click "
"on the last one."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:104
msgid ""
"In the *Inspector*, expand the *Material* section and assign a "
"*SpatialMaterial* to slot *0*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:109
msgid ""
"Click the sphere icon to open the material resource. You get a preview of "
"the material and a long list of sections filled with properties. You can use "
"these to create all sorts of surfaces, from metal to rock or water."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:113
msgid ""
"Expand the *Albedo* section and set the color to something that contrasts "
"with the background, like a bright orange."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:118
msgid ""
"We can now use the cylinders as guides. Fold them in the *Scene* dock by "
"clicking the grey arrow next to them. Moving forward, you can also toggle "
"their visibility by clicking the eye icon next to *Cylinders*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:124
msgid ""
"Add a *Path* node as a child of *Main*. In the toolbar, four icons appear. "
"Click the *Add Point* tool, the icon with the green \"+\" sign."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:129
msgid "You can hover any icon to see a tooltip describing the tool."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:131
msgid ""
"Click in the center of each cylinder to create a point. Then, click the "
"*Close Curve* icon in the toolbar to close the path. If any point is a bit "
"off, you can click and drag on it to reposition it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:137
msgid "Your path should look like this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:141
msgid ""
"To sample random positions on it, we need a *PathFollow* node. Add a "
"*PathFollow* as a child of the *Path*. Rename the two nodes to *SpawnPath* "
"and *SpawnLocation*, respectively. It's more descriptive of what we'll use "
"them for."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:145
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:334
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:152
msgid "|image19|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:355
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:476
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:553
msgid "image19"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:147
msgid "With that, we're ready to code the spawn mechanism."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:150
msgid "Spawning monsters randomly"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:152
msgid "Right-click on the *Main* node and attach a new script to it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:154
msgid ""
"We first export a variable to the *Inspector* so that we can assign ``Mob."
"tscn`` or any other monster to it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:157
msgid ""
"Then, as we're going to spawn the monsters procedurally, we want to "
"randomize numbers every time we play the game. If we don't do that, the "
"monsters will always spawn following the same sequence."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:190
msgid ""
"We want to spawn mobs at regular time intervals. To do this, we need to go "
"back to the scene and add a timer. Before that, though, we need to assign "
"the ``Mob.tscn`` file to the ``mob_scene`` property."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:194
msgid ""
"Head back to the 3D screen and select the *Main* node. Drag ``Mob.tscn`` "
"from the *FileSystem* dock to the *Mob Scene* slot in the *Inspector*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:197
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:341
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:156
msgid "|image20|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:356
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:477
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:554
msgid "image20"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:199
msgid "Add a new *Timer* node as a child of *Main*. Name it *MobTimer*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:201
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:352
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:160
msgid "|image21|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:357
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:478
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:555
msgid "image21"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:203
msgid ""
"In the *Inspector*, set its *Wait Time* to ``0.5`` seconds and turn on "
"*Autostart* so it automatically starts when we run the game."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:206
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:361
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:184
msgid "|image22|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:358
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:479
#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:556
msgid "image22"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:208
msgid ""
"Timers emit a ``timeout`` signal every time they reach the end of their "
"*Wait Time*. By default, they restart automatically, emitting the signal in "
"a cycle. We can connect to this signal from the *Main* node to spawn "
"monsters every ``0.5`` seconds."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:213
msgid ""
"With the *MobTimer* still selected, head to the *Node* dock on the right and "
"double-click the ``timeout`` signal."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:216
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:367
msgid "|image23|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:359
#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:480
msgid "image23"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:218
msgid "Connect it to the *Main* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:220
msgid "|image24|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:360
msgid "image24"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:222
msgid ""
"This will take you back to the script, with a new empty "
"``_on_MobTimer_timeout()`` function."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:225
msgid "Let's code the mob spawning logic. We're going to:"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:227
msgid "Instantiate the mob scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:228
msgid "Sample a random position on the spawn path."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:229
msgid "Get the player's position."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:230
msgid ""
"Call the mob's ``initialize()`` method, passing it the random position and "
"the player's position."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:232
msgid "Add the mob as a child of the *Main* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:273
msgid ""
"Above, ``randf()`` produces a random value between ``0`` and ``1``, which is "
"what the *PathFollow* node's ``unit_offset`` expects."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:276
msgid "Here is the complete ``Main.gd`` script so far, for reference."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:328
msgid ""
"You can test the scene by pressing :kbd:`F6`. You should see the monsters "
"spawn and move in a straight line."
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:331
msgid "|image25|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:361
msgid "image25"
msgstr ""

#: ../../docs/getting_started/first_3d_game/05.spawning_mobs.rst:333
msgid ""
"For now, they bump and slide against one another when their paths cross. "
"We'll address this in the next part."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:4
msgid "Jumping and squashing monsters"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:6
msgid ""
"In this part, we'll add the ability to jump, to squash the monsters. In the "
"next lesson, we'll make the player die when a monster hits them on the "
"ground."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:9
msgid ""
"First, we have to change a few settings related to physics interactions. "
"Enter the world of :ref:`physics layers "
"<doc_physics_introduction_collision_layers_and_masks>`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:14
msgid "Controlling physics interactions"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:16
msgid ""
"Physics bodies have access to two complementary properties: layers and "
"masks. Layers define on which physics layer(s) an object is."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:19
msgid ""
"Masks control the layers that a body will listen to and detect. This affects "
"collision detection. When you want two bodies to interact, you need at least "
"one to have a mask corresponding to the other."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:23
msgid "If that's confusing, don't worry, we'll see three examples in a second."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:25
msgid ""
"The important point is that you can use layers and masks to filter physics "
"interactions, control performance, and remove the need for extra conditions "
"in your code."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:29
msgid ""
"By default, all physics bodies and areas are set to both layer and mask "
"``0``. This means they all collide with each other."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:32
msgid ""
"Physics layers are represented by numbers, but we can give them names to "
"keep track of what's what."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:36
msgid "Setting layer names"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:38
msgid ""
"Let's give our physics layers a name. Go to *Project -> Project Settings*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:42
msgid ""
"In the left menu, navigate down to *Layer Names -> 3D Physics*. You can see "
"a list of layers with a field next to each of them on the right. You can set "
"their names there. Name the first three layers *player*, *enemies*, and "
"*world*, respectively."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:49
msgid "Now, we can assign them to our physics nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:52
msgid "Assigning layers and masks"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:54
msgid ""
"In the *Main* scene, select the *Ground* node. In the *Inspector*, expand "
"the *Collision* section. There, you can see the node's layers and masks as a "
"grid of buttons."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:60
msgid ""
"The ground is part of the world, so we want it to be part of the third "
"layer. Click the lit button to toggle off the first *Layer* and toggle on "
"the third one. Then, toggle off the *Mask* by clicking on it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:66
msgid ""
"As I mentioned above, the *Mask* property allows a node to listen to "
"interaction with other physics objects, but we don't need it to have "
"collisions. The *Ground* doesn't need to listen to anything; it's just there "
"to prevent creatures from falling."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:71
msgid ""
"Note that you can click the \"...\" button on the right side of the "
"properties to see a list of named checkboxes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:76
msgid ""
"Next up are the *Player* and the *Mob*. Open ``Player.tscn`` by double-"
"clicking the file in the *FileSystem* dock."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:79
msgid ""
"Select the *Player* node and set its *Collision -> Mask* to both \"enemies\" "
"and \"world\". You can leave the default *Layer* property as the first layer "
"is the \"player\" one."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:85
msgid ""
"Then, open the *Mob* scene by double-clicking on ``Mob.tscn`` and select the "
"*Mob* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:88
msgid ""
"Set its *Collision -> Layer* to \"enemies\" and unset its *Collision -> "
"Mask*, leaving the mask empty."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:93
msgid ""
"These settings mean the monsters will move through one another. If you want "
"the monsters to collide with and slide against each other, turn on the "
"\"enemies\" mask."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:99
msgid ""
"The mobs don't need to mask the \"world\" layer because they only move on "
"the XZ plane. We don't apply any gravity to them by design."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:103
msgid "Jumping"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:105
msgid ""
"The jumping mechanic itself requires only two lines of code. Open the "
"*Player* script. We need a value to control the jump's strength and update "
"``_physics_process()`` to code the jump."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:109
msgid ""
"After the line that defines ``fall_acceleration``, at the top of the script, "
"add the ``jump_impulse``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:128
msgid ""
"Inside ``_physics_process()``, add the following code before the line where "
"we called ``move_and_slide()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:158
msgid "That's all you need to jump!"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:160
msgid ""
"The ``is_on_floor()`` method is a tool from the ``KinematicBody`` class. It "
"returns ``true`` if the body collided with the floor in this frame. That's "
"why we apply gravity to the *Player*: so we collide with the floor instead "
"of floating over it like the monsters."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:165
msgid ""
"If the character is on the floor and the player presses \"jump\", we "
"instantly give them a lot of vertical speed. In games, you really want "
"controls to be responsive and giving instant speed boosts like these, while "
"unrealistic, feel great."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:170
msgid ""
"Notice that the Y axis is positive upwards. That's unlike 2D, where the Y "
"axis is positive downward."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:174
msgid "Squashing monsters"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:176
msgid ""
"Let's add the squash mechanic next. We're going to make the character bounce "
"over monsters and kill them at the same time."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:179
msgid ""
"We need to detect collisions with a monster and to differentiate them from "
"collisions with the floor. To do so, we can use Godot's :ref:`group "
"<doc_groups>` tagging feature."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:183
msgid ""
"Open the scene ``Mob.tscn`` again and select the *Mob* node. Go to the "
"*Node* dock on the right to see a list of signals. The *Node* dock has two "
"tabs: *Signals*, which you've already used, and *Groups*, which allows you "
"to assign tags to nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:188
msgid ""
"Click on it to reveal a field where you can write a tag name. Enter \"mob\" "
"in the field and click the *Add* button."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:193
msgid ""
"An icon appears in the *Scene* dock to indicate the node is part of at least "
"one group."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:198
msgid ""
"We can now use the group from the code to distinguish collisions with "
"monsters from collisions with the floor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:202
msgid "Coding the squash mechanic"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:204
msgid "Head back to the *Player* script to code the squash and bounce."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:206
msgid ""
"At the top of the script, we need another property, ``bounce_impulse``. When "
"squashing an enemy, we don't necessarily want the character to go as high up "
"as when jumping."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:225
msgid ""
"Then, at the bottom of ``_physics_process()``, add the following loop. With "
"``move_and_slide()``, Godot makes the body move sometimes multiple times in "
"a row to smooth out the character's motion. So we have to loop over all "
"collisions that may have happened."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:230
msgid ""
"In every iteration of the loop, we check if we landed on a mob. If so, we "
"kill it and bounce."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:233
msgid ""
"With this code, if no collisions occurred on a given frame, the loop won't "
"run."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:276
msgid "That's a lot of new functions. Here's some more information about them."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:278
msgid ""
"The functions ``get_slide_count()`` and ``get_slide_collision()`` both come "
"from the :ref:`KinematicBody<class_KinematicBody>` class and are related to "
"``move_and_slide()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:282
msgid ""
"``get_slide_collision()`` returns a :ref:"
"`KinematicCollision<class_KinematicCollision>` object that holds information "
"about where and how the collision occurred. For example, we use its "
"``collider`` property to check if we collided with a \"mob\" by calling "
"``is_in_group()`` on it: ``collision.collider.is_in_group(\"mob\")``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:290
msgid ""
"The method ``is_in_group()`` is available on every :ref:`Node<class_Node>`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:292
msgid ""
"To check that we are landing on the monster, we use the vector dot product: "
"``Vector3.UP.dot(collision.normal) > 0.1``. The collision normal is a 3D "
"vector that is perpendicular to the plane where the collision occurred. The "
"dot product allows us to compare it to the up direction."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:297
msgid ""
"With dot products, when the result is greater than ``0``, the two vectors "
"are at an angle of fewer than 90 degrees. A value higher than ``0.1`` tells "
"us that we are roughly above the monster."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:301
msgid ""
"We are calling one undefined function, ``mob.squash()``. We have to add it "
"to the Mob class."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:304
msgid ""
"Open the script ``Mob.gd`` by double-clicking on it in the *FileSystem* "
"dock. At the top of the script, we want to define a new signal named "
"``squashed``. And at the bottom, you can add the squash function, where we "
"emit the signal and destroy the mob."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:338
msgid "We will use the signal to add points to the score in the next lesson."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:340
msgid ""
"With that, you should be able to kill monsters by jumping on them. You can "
"press :kbd:`F5` to try the game and set ``Main.tscn`` as your project's main "
"scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:343
msgid "However, the player won't die yet. We'll work on that in the next part."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:4
msgid "Killing the player"
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:6
msgid ""
"We can kill enemies by jumping on them, but the player still can't die. "
"Let's fix this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:9
msgid ""
"We want to detect being hit by an enemy differently from squashing them. We "
"want the player to die when they're moving on the floor, but not if they're "
"in the air. We could use vector math to distinguish the two kinds of "
"collisions. Instead, though, we will use an *Area* node, which works well "
"for hitboxes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:16
msgid "Hitbox with the Area node"
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:18
msgid ""
"Head back to the *Player* scene and add a new *Area* node. Name it "
"*MobDetector*. Add a *CollisionShape* node as a child of it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:23
msgid "In the *Inspector*, assign a cylinder shape to it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:27
msgid ""
"Here is a trick you can use to make the collisions only happen when the "
"player is on the ground or close to it. You can reduce the cylinder's height "
"and move it up to the top of the character. This way, when the player jumps, "
"the shape will be too high up for the enemies to collide with it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:35
msgid ""
"You also want the cylinder to be wider than the sphere. This way, the player "
"gets hit before colliding and being pushed on top of the monster's collision "
"box."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:39
msgid "The wider the cylinder, the more easily the player will get killed."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:41
msgid ""
"Next, select the *MobDetector* node again, and in the *Inspector*, turn off "
"its *Monitorable* property. This makes it so other physics nodes cannot "
"detect the area. The complementary *Monitoring* property allows it to detect "
"collisions. Then, remove the *Collision -> Layer* and set the mask to the "
"\"enemies\" layer."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:49
msgid ""
"When areas detect a collision, they emit signals. We're going to connect one "
"to the *Player* node. In the *Node* tab, double-click the ``body_entered`` "
"signal and connect it to the *Player*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:55
msgid ""
"The *MobDetector* will emit ``body_entered`` when a *KinematicBody* or a "
"*RigidBody* node enters it. As it only masks the \"enemies\" physics layers, "
"it will only detect the *Mob* nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:59
msgid ""
"Code-wise, we're going to do two things: emit a signal we'll later use to "
"end the game and destroy the player. We can wrap these operations in a "
"``die()`` function that helps us put a descriptive label on the code."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:102
msgid ""
"Try the game again by pressing :kbd:`F5`. If everything is set up correctly, "
"the character should die when an enemy runs into it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:105
msgid ""
"However, note that this depends entirely on the size and position of the "
"*Player* and the *Mob*\\ 's collision shapes. You may need to move them and "
"resize them to achieve a tight game feel."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:110
msgid "Ending the game"
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:112
msgid ""
"We can use the *Player*\\ 's ``hit`` signal to end the game. All we need to "
"do is connect it to the *Main* node and stop the *MobTimer* in reaction."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:116
msgid ""
"Open ``Main.tscn``, select the *Player* node, and in the *Node* dock, "
"connect its ``hit`` signal to the *Main* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:121
msgid "Get and stop the timer in the ``_on_Player_hit()`` function."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:137
msgid ""
"If you try the game now, the monsters will stop spawning when you die, and "
"the remaining ones will leave the screen."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:140
msgid ""
"You can pat yourself in the back: you prototyped a complete 3D game, even if "
"it's still a bit rough."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:143
msgid ""
"From there, we'll add a score, the option to retry the game, and you'll see "
"how you can make the game feel much more alive with minimalistic animations."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:148
msgid "Code checkpoint"
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:150
msgid ""
"Here are the complete scripts for the *Main*, *Mob*, and *Player* nodes, for "
"reference. You can use them to compare and check your code."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:153
msgid "Starting with ``Main.gd``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:226
msgid "Next is ``Mob.gd``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:309
msgid "Finally, the longest script, ``Player.gd``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/07.killing_player.rst:462
msgid "See you in the next lesson to add the score and the retry option."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:4
msgid "Score and replay"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:6
msgid ""
"In this part, we'll add the score, music playback, and the ability to "
"restart the game."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:9
msgid ""
"We have to keep track of the current score in a variable and display it on "
"screen using a minimal interface. We will use a text label to do that."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:12
msgid ""
"In the main scene, add a new *Control* node as a child of *Main* and name it "
"*UserInterface*. You will automatically be taken to the 2D screen, where you "
"can edit your User Interface (UI)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:16
msgid "Add a *Label* node and rename it to *ScoreLabel*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:20
msgid ""
"In the *Inspector*, set the *Label*'s *Text* to a placeholder like \"Score: "
"0\"."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:24
msgid ""
"Also, the text is white by default, like our game's background. We need to "
"change its color to see it at runtime."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:27
msgid ""
"Scroll down to *Theme Overrides*, and expand *Colors* and click the black "
"box next to *Font Color* to tint the text."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:32
msgid "Pick a dark tone so it contrasts well with the 3D scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:36
msgid ""
"Finally, click and drag on the text in the viewport to move it away from the "
"top-left corner."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:41
msgid ""
"The *UserInterface* node allows us to group our UI in a branch of the scene "
"tree and use a theme resource that will propagate to all its children. We'll "
"use it to set our game's font."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:46
msgid "Creating a UI theme"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:48
msgid ""
"Once again, select the *UserInterface* node. In the *Inspector*, create a "
"new theme resource in *Theme -> Theme*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:53
msgid ""
"Click on it to open the theme editor In the bottom panel. It gives you a "
"preview of how all the built-in UI widgets will look with your theme "
"resource."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:58
msgid "By default, a theme only has one property, the *Default Font*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:62
msgid ""
"You can add more properties to the theme resource to design complex user "
"interfaces, but that is beyond the scope of this series. To learn more about "
"creating and editing themes, see :ref:`doc_gui_skinning`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:66
msgid "Click the *Default Font* property and create a new *DynamicFont*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:70
msgid ""
"Expand the *DynamicFont* by clicking on it and expand its *Font* section. "
"There, you will see an empty *Font Data* field."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:75
msgid ""
"This one expects a font file like the ones you have on your computer. "
"DynamicFont supports the following formats:"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:78
msgid "TrueType (``.ttf``)"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:79
msgid "OpenType (``.otf``)"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:80
msgid "Web Open Font Format 1 (``.woff``)"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:81
msgid "Web Open Font Format 2 (``.woff2``, since Godot 3.5)"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:83
msgid ""
"In the *FileSystem* dock, expand the ``fonts`` directory and click and drag "
"the ``Montserrat-Medium.ttf`` file we included in the project onto the *Font "
"Data*. The text will reappear in the theme preview."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:87
msgid ""
"The text is a bit small. Set the *Settings -> Size* to ``22`` pixels to "
"increase the text's size."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:93
msgid "Keeping track of the score"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:95
msgid ""
"Let's work on the score next. Attach a new script to the *ScoreLabel* and "
"define the ``score`` variable."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:112
msgid ""
"The score should increase by ``1`` every time we squash a monster. We can "
"use their ``squashed`` signal to know when that happens. However, as we "
"instantiate monsters from the code, we cannot do the connection in the "
"editor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:116
msgid ""
"Instead, we have to make the connection from the code every time we spawn a "
"monster."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:119
msgid ""
"Open the script ``Main.gd``. If it's still open, you can click on its name "
"in the script editor's left column."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:124
msgid ""
"Alternatively, you can double-click the ``Main.gd`` file in the *FileSystem* "
"dock."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:127
msgid ""
"At the bottom of the ``_on_MobTimer_timeout()`` function, add the following "
"line."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:147
msgid ""
"This line means that when the mob emits the ``squashed`` signal, the "
"*ScoreLabel* node will receive it and call the function "
"``_on_Mob_squashed()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:150
msgid ""
"Head back to the ``ScoreLabel.gd`` script to define the "
"``_on_Mob_squashed()`` callback function."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:153
msgid "There, we increment the score and update the displayed text."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:170
msgid ""
"The second line uses the value of the ``score`` variable to replace the "
"placeholder ``%s``. When using this feature, Godot automatically converts "
"values to text, which is convenient to output text in labels or using the "
"``print()`` function."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:177
msgid ""
"You can learn more about string formatting here: :ref:`doc_gdscript_printf`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:179
msgid ""
"You can now play the game and squash a few enemies to see the score increase."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:186
msgid ""
"In a complex game, you may want to completely separate your user interface "
"from the game world. In that case, you would not keep track of the score on "
"the label. Instead, you may want to store it in a separate, dedicated "
"object. But when prototyping or when your project is simple, it is fine to "
"keep your code simple. Programming is always a balancing act."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:193
msgid "Retrying the game"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:195
msgid ""
"We'll now add the ability to play again after dying. When the player dies, "
"we'll display a message on the screen and wait for input."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:198
msgid ""
"Head back to the *Main* scene, select the *UserInterface* node, add a "
"*ColorRect* node as a child of it and name it *Retry*. This node fills a "
"rectangle with a uniform color and will serve as an overlay to darken the "
"screen."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:203
msgid ""
"To make it span over the whole viewport, you can use the *Layout* menu in "
"the toolbar."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:208
msgid "Open it and apply the *Full Rect* command."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:212
msgid ""
"Nothing happens. Well, almost nothing: only the four green pins move to the "
"corners of the selection box."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:217
msgid ""
"This is because UI nodes (all the ones with a green icon) work with anchors "
"and margins relative to their parent's bounding box. Here, the "
"*UserInterface* node has a small size and the *Retry* one is limited by it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:221
msgid ""
"Select the *UserInterface* and apply *Layout -> Full Rect* to it as well. "
"The *Retry* node should now span the whole viewport."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:224
msgid ""
"Let's change its color so it darkens the game area. Select *Retry* and in "
"the *Inspector*, set its *Color* to something both dark and transparent. To "
"do so, in the color picker, drag the *A* slider to the left. It controls the "
"color's alpha channel, that is to say, its opacity."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:231
msgid ""
"Next, add a *Label* as a child of *Retry* and give it the *Text* \"Press "
"Enter to retry.\""
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:236
msgid ""
"To move it and anchor it in the center of the screen, apply *Layout -> "
"Center* to it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:242
msgid "Coding the retry option"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:244
msgid ""
"We can now head to the code to show and hide the *Retry* node when the "
"player dies and plays again."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:247
msgid ""
"Open the script ``Main.gd``. First, we want to hide the overlay at the start "
"of the game. Add this line to the ``_ready()`` function."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:265
msgid "Then, when the player gets hit, we show the overlay."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:282
msgid ""
"Finally, when the *Retry* node is visible, we need to listen to the player's "
"input and restart the game if they press enter. To do this, we use the built-"
"in ``_unhandled_input()`` callback."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:286
msgid ""
"If the player pressed the predefined ``ui_accept`` input action and *Retry* "
"is visible, we reload the current scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:308
msgid ""
"The function ``get_tree()`` gives us access to the global :ref:`SceneTree "
"<class_SceneTree>` object, which allows us to reload and restart the current "
"scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:313
msgid "Adding music"
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:315
msgid ""
"To add music that plays continuously in the background, we're going to use "
"another feature in Godot: :ref:`autoloads <doc_singletons_autoload>`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:318
msgid ""
"To play audio, all you need to do is add an *AudioStreamPlayer* node to your "
"scene and attach an audio file to it. When you start the scene, it can play "
"automatically. However, when you reload the scene, like we do to play again, "
"the audio nodes are also reset, and the music starts back from the beginning."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:323
msgid ""
"You can use the autoload feature to have Godot load a node or a scene "
"automatically at the start of the game, outside the current scene. You can "
"also use it to create globally accessible objects."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:327
msgid ""
"Create a new scene by going to the *Scene* menu and clicking *New Scene*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:331
msgid ""
"Click the *Other Node* button to create an *AudioStreamPlayer* and rename it "
"to *MusicPlayer*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:336
msgid ""
"We included a music soundtrack in the ``art/`` directory, ``House In a "
"Forest Loop.ogg``. Click and drag it onto the *Stream* property in the "
"*Inspector*. Also, turn on *Autoplay* so the music plays automatically at "
"the start of the game."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:343
msgid "Save the scene as ``MusicPlayer.tscn``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:345
msgid ""
"We have to register it as an autoload. Head to the *Project -> Project "
"Settings…* menu and click on the *Autoload* tab."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:348
msgid ""
"In the *Path* field, you want to enter the path to your scene. Click the "
"folder icon to open the file browser and double-click on ``MusicPlayer."
"tscn``. Then, click the *Add* button on the right to register the node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:354
msgid ""
"If you run the game now, the music will play automatically. And even when "
"you lose and retry, it keeps going."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:357
msgid ""
"Before we wrap up this lesson, here's a quick look at how it works under the "
"hood. When you run the game, your *Scene* dock changes to give you two tabs: "
"*Remote* and *Local*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:363
msgid ""
"The *Remote* tab allows you to visualize the node tree of your running game. "
"There, you will see the *Main* node and everything the scene contains and "
"the instantiated mobs at the bottom."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:369
msgid ""
"At the top are the autoloaded *MusicPlayer* and a *root* node, which is your "
"game's viewport."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:372
msgid ""
"And that does it for this lesson. In the next part, we'll add an animation "
"to make the game both look and feel much nicer."
msgstr ""

#: ../../docs/getting_started/first_3d_game/08.score_and_replay.rst:375
msgid "Here is the complete ``Main.gd`` script for reference."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:4
msgid "Character animation"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:6
msgid ""
"In this final lesson, we'll use Godot's built-in animation tools to make our "
"characters float and flap. You'll learn to design animations in the editor "
"and use code to make your game feel alive."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:12
msgid "We'll start with an introduction to using the animation editor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:15
msgid "Using the animation editor"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:17
msgid ""
"The engine comes with tools to author animations in the editor. You can then "
"use the code to play and control them at runtime."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:20
msgid ""
"Open the player scene, select the player node, and add an *AnimationPlayer* "
"node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:22
msgid "The *Animation* dock appears in the bottom panel."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:26
msgid ""
"It features a toolbar and the animation drop-down menu at the top, a track "
"editor in the middle that's currently empty, and filter, snap, and zoom "
"options at the bottom."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:30
msgid "Let's create an animation. Click on *Animation -> New*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:34
msgid "Name the animation \"float\"."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:38
msgid ""
"Once you created the animation, the timeline appears with numbers "
"representing time in seconds."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:43
msgid ""
"We want the animation to start playback automatically at the start of the "
"game. Also, it should loop."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:46
msgid ""
"To do so, you can click the button with an \"A+\" icon in the animation "
"toolbar and the looping arrows, respectively."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:51
msgid ""
"You can also pin the animation editor by clicking the pin icon in the top-"
"right. This prevents it from folding when you click on the viewport and "
"deselect the nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:57
msgid ""
"Set the animation duration to ``1.2`` seconds in the top-right of the dock."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:61
msgid ""
"You should see the gray ribbon widen a bit. It shows you the start and end "
"of your animation and the vertical blue line is your time cursor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:66
msgid ""
"You can click and drag the slider in the bottom-right to zoom in and out of "
"the timeline."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:72
msgid "The float animation"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:74
msgid ""
"With the animation player node, you can animate most properties on as many "
"nodes as you need. Notice the key icon next to properties in the "
"*Inspector*. You can click any of them to create a keyframe, a time and "
"value pair for the corresponding property. The keyframe gets inserted where "
"your time cursor is in the timeline."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:80
msgid ""
"Let's insert our first keys. Here, we will animate both the translation and "
"the rotation of the *Character* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:83
msgid ""
"Select the *Character* and click the key icon next to *Translation* in the "
"*Inspector*. Do the same for *Rotation Degrees*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:88
msgid ""
"Two tracks appear in the editor with a diamond icon representing each "
"keyframe."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:92
msgid ""
"You can click and drag on the diamonds to move them in time. Move the "
"translation key to ``0.2`` seconds and the rotation key to ``0.1`` seconds."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:97
msgid ""
"Move the time cursor to ``0.5`` seconds by clicking and dragging on the gray "
"timeline. In the *Inspector*, set the *Translation*'s *Y* axis to about "
"``0.65`` meters and the *Rotation Degrees*' *X* axis to ``8``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:103
msgid ""
"Create a keyframe for both properties and shift the translation key to "
"``0.7`` seconds by dragging it on the timeline."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:110
msgid ""
"A lecture on the principles of animation is beyond the scope of this "
"tutorial. Just note that you don't want to time and space everything evenly. "
"Instead, animators play with timing and spacing, two core animation "
"principles. You want to offset and contrast in your character's motion to "
"make them feel alive."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:116
msgid ""
"Move the time cursor to the end of the animation, at ``1.2`` seconds. Set "
"the Y translation to about ``0.35`` and the X rotation to ``-9`` degrees. "
"Once again, create a key for both properties."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:120
msgid ""
"You can preview the result by clicking the play button or pressing :kbd:"
"`Shift + D`. Click the stop button or press :kbd:`S` to stop playback."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:125
msgid ""
"You can see that the engine interpolates between your keyframes to produce a "
"continuous animation. At the moment, though, the motion feels very robotic. "
"This is because the default interpolation is linear, causing constant "
"transitions, unlike how living things move in the real world."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:130
msgid "We can control the transition between keyframes using easing curves."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:132
msgid ""
"Click and drag around the first two keys in the timeline to box select them."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:136
msgid ""
"You can edit the properties of both keys simultaneously in the *Inspector*, "
"where you can see an *Easing* property."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:141
msgid ""
"Click and drag on the curve, pulling it towards the left. This will make it "
"ease-out, that is to say, transition fast initially and slow down as the "
"time cursor reaches the next keyframe."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:147
msgid ""
"Play the animation again to see the difference. The first half should "
"already feel a bit bouncier."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:150
msgid "Apply an ease-out to the second keyframe in the rotation track."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:154
msgid ""
"Do the opposite for the second translation keyframe, dragging it to the "
"right."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:158
msgid "Your animation should look something like this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:164
msgid ""
"Animations update the properties of the animated nodes every frame, "
"overriding initial values. If we directly animated the *Player* node, it "
"would prevent us from moving it in code. This is where the *Pivot* node "
"comes in handy: even though we animated the *Character*, we can still move "
"and rotate the *Pivot* and layer changes on top of the animation in a script."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:171
msgid "If you play the game, the player's creature will now float!"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:173
msgid ""
"If the creature is a little too close to the floor, you can move the *Pivot* "
"up to offset it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:177
msgid "Controlling the animation in code"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:179
msgid ""
"We can use code to control the animation playback based on the player's "
"input. Let's change the animation speed when the character is moving."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:182
msgid "Open the *Player*'s script by clicking the script icon next to it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:186
msgid ""
"In ``_physics_process()``, after the line where we check the ``direction`` "
"vector, add the following code."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:216
msgid ""
"This code makes it so when the player moves, we multiply the playback speed "
"by ``4``. When they stop, we reset it to normal."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:219
msgid ""
"We mentioned that the pivot could layer transforms on top of the animation. "
"We can make the character arc when jumping using the following line of code. "
"Add it at the end of ``_physics_process()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:240
msgid "Animating the mobs"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:242
msgid ""
"Here's another nice trick with animations in Godot: as long as you use a "
"similar node structure, you can copy them to different scenes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:245
msgid ""
"For example, both the *Mob* and the *Player* scenes have a *Pivot* and a "
"*Character* node, so we can reuse animations between them."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:248
msgid ""
"Open the *Player* scene, select the animation player node and open the "
"\"float\" animation. Next, click on **Animation > Copy**. Then open ``Mob."
"tscn`` and open its animation player. Click **Animation > Paste**. That's "
"it; all monsters will now play the float animation."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:253
msgid ""
"We can change the playback speed based on the creature's ``random_speed``. "
"Open the *Mob*'s script and at the end of the ``initialize()`` function, add "
"the following line."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:272
msgid "And with that, you finished coding your first complete 3D game."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:274
msgid "**Congratulations**!"
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:276
msgid ""
"In the next part, we'll quickly recap what you learned and give you some "
"links to keep learning more. But for now, here are the complete ``Player."
"gd`` and ``Mob.gd`` so you can check your code against them."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:280
msgid "Here's the *Player* script."
msgstr ""

#: ../../docs/getting_started/first_3d_game/09.adding_animations.rst:447
msgid "And the *Mob*'s script."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:4
msgid "Going further"
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:6
msgid ""
"You can pat yourself on the back for having completed your first 3D game "
"with Godot."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:9
msgid ""
"In this series, we went over a wide range of techniques and editor features. "
"Hopefully, you’ve witnessed how intuitive Godot’s scene system can be and "
"learned a few tricks you can apply in your projects."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:13
msgid ""
"But we just scratched the surface: Godot has a lot more in store for you to "
"save time creating games. And you can learn all that by browsing the "
"documentation."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:16
msgid ""
"Where should you begin? Below, you’ll find a few pages to start exploring "
"and build upon what you’ve learned so far."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:19
msgid ""
"But before that, here’s a link to download a completed version of the "
"project: `<https://github.com/GDQuest/godot-3d-dodge-the-creeps>`_."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:23
msgid "Exploring the manual"
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:25
msgid ""
"The manual is your ally whenever you have a doubt or you’re curious about a "
"feature. It does not contain tutorials about specific game genres or "
"mechanics. Instead, it explains how Godot works in general. In it, you will "
"find information about 2D, 3D, physics, rendering and performance, and much "
"more."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:30
msgid "Here are the sections we recommend you to explore next:"
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:32
msgid ""
"Read the :ref:`Scripting section <toc-scripting-core-features>` to learn "
"essential programming features you’ll use in every project."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:34
msgid ""
"The :ref:`3D <toc-learn-features-3d>` and :ref:`Physics <toc-learn-features-"
"physics>` sections will teach you more about 3D game creation in the engine."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:36
msgid ""
":ref:`Inputs <toc-learn-features-inputs>` is another important one for any "
"game project."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:38
msgid ""
"You can start with these or, if you prefer, look at the sidebar menu on the "
"left and pick your options."
msgstr ""

#: ../../docs/getting_started/first_3d_game/going_further.rst:41
msgid ""
"We hope you enjoyed this tutorial series, and we’re looking forward to "
"seeing what you achieve using Godot."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:9
msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:15
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that display them."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:18
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a custom :ref:"
"`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy it "
"contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:24
msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:27
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:30
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:32
msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:33
msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:35
msgid "How can these problems be solved in a single scene tree?"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:38
msgid "CanvasLayers"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:40
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:49
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:53
msgid "Here's a diagram of how it looks:"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:57
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:60
msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:4
msgid "Viewport and canvas transforms"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:9
msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:14
msgid "Canvas transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:16
msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:22
msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:27
msgid "Global canvas transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:29
msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this transform is not of "
"much use, but is used in the CanvasItem Editor in Godot's editor."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:36
msgid "Stretch transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:38
msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:43
msgid ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. To convert InputEvent coordinates to "
"local CanvasItem coordinates, the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:50
msgid "Transform order"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:52
msgid ""
"For a coordinate in CanvasItem local properties to become an actual screen "
"coordinate, the following chain of transforms must be applied:"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:58
msgid "Transform functions"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:60
msgid "Obtaining each transform can be achieved with the following functions:"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:63
#: ../../docs/tutorials/io/data_paths.rst:72
#: ../../docs/tutorials/io/data_paths.rst:121
#: ../../docs/tutorials/io/binary_serialization_api.rst:29
#: ../../docs/tutorials/io/binary_serialization_api.rst:102
#: ../../docs/tutorials/io/binary_serialization_api.rst:113
#: ../../docs/tutorials/io/binary_serialization_api.rst:122
#: ../../docs/tutorials/io/binary_serialization_api.rst:133
#: ../../docs/tutorials/io/binary_serialization_api.rst:142
#: ../../docs/tutorials/io/binary_serialization_api.rst:151
#: ../../docs/tutorials/io/binary_serialization_api.rst:164
#: ../../docs/tutorials/io/binary_serialization_api.rst:175
#: ../../docs/tutorials/io/binary_serialization_api.rst:190
#: ../../docs/tutorials/io/binary_serialization_api.rst:203
#: ../../docs/tutorials/io/binary_serialization_api.rst:222
#: ../../docs/tutorials/io/binary_serialization_api.rst:237
#: ../../docs/tutorials/io/binary_serialization_api.rst:252
#: ../../docs/tutorials/io/binary_serialization_api.rst:271
#: ../../docs/tutorials/io/binary_serialization_api.rst:296
#: ../../docs/tutorials/io/binary_serialization_api.rst:327
#: ../../docs/tutorials/io/binary_serialization_api.rst:342
#: ../../docs/tutorials/io/binary_serialization_api.rst:351
#: ../../docs/tutorials/io/binary_serialization_api.rst:362
#: ../../docs/tutorials/io/binary_serialization_api.rst:372
#: ../../docs/tutorials/io/binary_serialization_api.rst:391
#: ../../docs/tutorials/io/binary_serialization_api.rst:403
#: ../../docs/tutorials/io/binary_serialization_api.rst:415
#: ../../docs/tutorials/io/binary_serialization_api.rst:428
#: ../../docs/tutorials/io/binary_serialization_api.rst:439
#: ../../docs/tutorials/io/binary_serialization_api.rst:450
#: ../../docs/tutorials/io/binary_serialization_api.rst:458
#: ../../docs/tutorials/io/binary_serialization_api.rst:471
#: ../../docs/tutorials/io/binary_serialization_api.rst:484
#: ../../docs/tutorials/io/binary_serialization_api.rst:499
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:21
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:570
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:98
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:171
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:236
msgid "Type"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:63
msgid "Transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid "CanvasItem"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid "CanvasLayer"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid "CanvasLayer+GlobalCanvas+Stretch"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:72
msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:84
msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:90
msgid "Feeding custom input events"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:92
msgid ""
"It is often desired to feed custom input events to the scene tree. With the "
"above knowledge, to correctly do this, it must be done the following way:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:4
msgid "Using TileMaps"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:9
msgid ""
"A tilemap is a grid of tiles used to create a game's layout. There are "
"several benefits to using :ref:`TileMap <class_TileMap>` nodes to design "
"your levels. First, they make it possible to draw the layout by \"painting\" "
"the tiles onto a grid, which is much faster than placing individual :ref:"
"`Sprite <class_Sprite>` nodes one by one. Second, they allow for much larger "
"levels because they are optimized for drawing large numbers of tiles. "
"Finally, you can add collision, occlusion, and navigation shapes to tiles, "
"adding additional functionality to the TileMap."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:23
msgid ""
"This demo will use the following tiles taken from Kenney's \"Abstract "
"Platformer\" art pack. You can find the complete set `here <https://kenney."
"nl/assets/abstract-platformer>`_ but for this demo we'll stick to this small "
"set."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:29
msgid "Create a new project and place the above image in the project folder."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:31
msgid ""
"When using a tileset, it's important that adjacent tiles match up. Godot's "
"default is to import 2D images using an interpolated \"filter\" mode, which "
"will result in ugly borders between the tiles. Select the image and click "
"the Import tab. Turn off ``Filter`` and click \"Reimport\". See :ref:"
"`doc_import_images` for details."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:37
msgid "TileMap node"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:39
msgid ""
"Add a new :ref:`TileMap <class_TileMap>` node to the scene. By default, a "
"TileMap uses a square grid of tiles. You can also use a perspective-based "
"\"Isometric\" mode or define your own custom tile shape."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:45
msgid ""
"Under the \"Cell\" section in the Inspector are many properties you can "
"adjust to customize your tilemap's behavior:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:52
msgid "``Cell Size``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:51
msgid ""
"This defines the size of the grid. This should match the pixel size of your "
"tiles. The default value is ``(64, 64)``."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:56
msgid "``YSort``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:55
msgid ""
"This causes tiles to be drawn in order of their ``Y`` position, so that "
"\"lower\" tiles are drawn on top of \"higher\" ones."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:59
msgid "``Half Offset`` and ``Tile Origin``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:59
msgid ""
"These properties affect the position of the tile relative to the grid "
"position."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:63
msgid "``Quadrant``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:62
msgid ""
"Defines the chunk size used for batched drawing. This can negatively affect "
"performance. Don't change it unless you know what you're doing."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:66
msgid "``Custom Transform``"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:66
msgid "Used to alter the tile's shape. Use this if you have non-square tiles."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:68
msgid "All of these options can be left at their defaults for this demo."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:71
msgid "Creating a TileSet"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:73
msgid ""
"Once you've configured your tilemap, it's time to add a :ref:`TileSet "
"<class_TileSet>`. A TileSet is a :ref:`Resource <class_Resource>` that "
"contains the data about your tiles - their   textures, collision shapes, and "
"other properties. When the game runs, the TileMap combines the individual "
"tiles into a single object."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:79
msgid ""
"To add a new TileSet, click on the \"Tile Set\" property and select \"New "
"TileSet\"."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:84
msgid ""
"Click on the TileSet property, and the \"TileSet\" panel will open at the "
"bottom of the editor window:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:89
msgid ""
"First, you need to add the texture(s) that you'll use for the tiles. Click "
"the \"Add Texture(s) to TileSet\" button and select the ``tilesheet.png`` "
"image."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:92
msgid ""
"Next, click \"New Single Tile\" and drag in the image to select the tile you "
"want. Click the \"Enable Snap\" button to make it easier to select the "
"entire tile. A yellow rectangle appears around the selected tile."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:98
msgid ""
"Click on the TileMap in the scene tree, and you'll see that the newly "
"created tile now appears on the right side. Click in the viewport and you "
"can place tiles. Right-click to remove them."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:104
msgid ""
"It's easy to accidentally select and move the tilemap node. To avoid this, "
"use the node's lock button:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:110
#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:23
#: ../../docs/tutorials/physics/physics_introduction.rst:62
msgid "Collision shapes"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:112
msgid ""
"If you're making a map that needs collisions - walls, floor, or other "
"obstacles, for example - then you'll need to add collision shapes to any "
"tiles that you want to be considered \"solid\"."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:116
msgid ""
"Click \"TileSet\" at the bottom of the editor window to return to the "
"tileset tool. Click the tile you previously defined (outlined in yellow). "
"Select the \"Collision\" tab and click the \"Create a new rectangle\" "
"button. Make sure you still have grid snap enabled, then click and drag in "
"the tile. A square collision shape appears in light blue:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:124
msgid ""
"You can add occlusion and navigation shapes to the tile in the same way."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:127
msgid "Atlas tiles"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:129
msgid ""
"Rather than adding individual tiles one at a time, you can define a group of "
"tiles all at once using an atlas. This also allows you to randomly generate "
"tiles from the group."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:133
msgid "Click \"New Atlas\" and drag to select the entire tile sheet."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:137
msgid ""
"If you haven't already, make sure to change the \"Step\" in the snap "
"settings to `(64, 64)`, or your tiles may be chopped into smaller pieces. "
"You can find this in the Inspector:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:143
msgid ""
"Once you've defined the atlas you can add collision shapes to the individual "
"tiles as before. You can also click \"Icon\" to select one of the tiles to "
"represent the atlas."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:147
msgid ""
"Back in the TileMap, you can select the atlas tile and you'll see all of the "
"tiles it contains:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:152
msgid ""
"In addition to saving time when defining the tiles, this can help by "
"grouping similar tiles together when you're working with a large number of "
"tiles."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:156
msgid "Random tile priorities"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:158
msgid ""
"When drawing with atlas tiles, enabling the \"Use priority\" option causes "
"tiles to be selected at random. By default, each tile in the tileset has an "
"equal likelihood of occurring. You can change the likelihood by setting "
"different priorities for each tile. For example, a tile with priority 2 is "
"twice as likely to be selected as a tile with priority 1, and a tile with "
"priority 3 is 50% more likely to be selected than a tile with priority 2."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:166
msgid "Autotiles"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:168
msgid ""
"Autotiles allow you to define a group of tiles, then add rules to control "
"which tile gets used for drawing based on the content of adjacent cells."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:171
msgid ""
"Click \"New Autotile\" and drag to select the tiles you wish to use. You can "
"add collisions, occlusion, navigation shapes, tile priorties, and select an "
"icon tile in the same manner as for atlas tiles."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:175
msgid ""
"Tile selection is controlled by bitmasks. Bitmasks can be added by clicking "
"\"Bitmask\", then clicking parts of the tiles to add or remove bits in the "
"mask. Left-clicking an area of the tile adds a bit, right-click removes "
"\"off\", and shift-left-click sets an \"ignore\" bit."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:180
msgid ""
"Whenever Godot updates a cell using an autotile, it first creates a pattern "
"based on which adjacent cells are already set. Then, it searches the "
"autotile for a single tile with a bitmask matching the created pattern. If "
"no matching bitmask is found, the \"icon\" tile will be used instead. If "
"more than one matching bitmask is found, one of them will be selected "
"randomly, using the tile priorities."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:187
msgid ""
"The rules for matching a bitmask to a pattern depend on the tileset's "
"autotile bitmask mode. This can be set in the \"Inspector\" tab, under the "
"\"Selected Tile\" heading. Allowed values are \"2x2\", \"3x3 (minimal)\", "
"and \"3x3\"."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:191
msgid ""
"All \"on\" and \"off\" bits must be satisfied for a bitmask to match, but "
"\"ignore\" bits are ignored."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:195
msgid "2x2"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:197
msgid "In 2x2 mode, each bitmask contains four bits, one for each corner."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:199
msgid ""
"Where a bit is \"on\", all cells connected to that corner must be filled "
"using the same autotile, in order for the bitmask to match. For example, if "
"the top-left bit is set, the cell directly above, directly left, and "
"diagonally above-left must be filled."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:204
msgid ""
"Where a bit is \"off\", at least one cell connected to that corner must not "
"be set using the same autotile."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:207
msgid ""
"At least one bit must be set for the tile to be used, so a total of 15 tiles "
"would be needed to provide exactly one tile for each arrangement that this "
"mode can test for."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:211
msgid ""
"2x2 mode can only match cells that are part of a 2-by-2 block - cells with "
"no neighbors and lines only one cell wide are not supported."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:214
#: ../../docs/tutorials/2d/using_tilemaps.rst:246
msgid "**Template - Generic:**"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:216
msgid ""
"This template can be used for sideways or fully top-down perspectives. It's "
"designed for a TileMap cell size of 64x64."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:219
#: ../../docs/tutorials/2d/using_tilemaps.rst:252
#: ../../docs/tutorials/2d/using_tilemaps.rst:265
msgid "Key:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:221
#: ../../docs/tutorials/2d/using_tilemaps.rst:254
#: ../../docs/tutorials/2d/using_tilemaps.rst:267
msgid "Red: \"on\""
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:222
#: ../../docs/tutorials/2d/using_tilemaps.rst:255
#: ../../docs/tutorials/2d/using_tilemaps.rst:268
msgid "White: \"off\""
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:227
msgid "3x3 (minimal)"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:229
msgid ""
"In 3x3 (minimal) mode, each bitmask contains 9 bits (4 corners, 4 edges, 1 "
"center). The 4 corner bits work the same as in 2x2 mode."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:232
msgid ""
"When an edge bit is \"on\", the cell which shares that edge must be filled. "
"When an edge bit is \"off\", the cell which shares that edge must be empty."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:235
msgid ""
"The center bit should be \"on\" for any tile you wish to use. Note that in "
"this mode, it makes no sense for a corner bit to be \"on\" when either edge "
"bit adjacent to it is not \"on\"."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:239
msgid ""
"A total of 47 tiles would be needed to provide exactly one bitmask for each "
"arrangement that this mode can test for."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:244
msgid "Right-click an image and choose **Save image as…** to save it."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:248
msgid ""
"This template can be used for sideways or fully top-down perspectives. All "
"templates below are designed for a TileMap cell size of 64x64, but you may "
"have to use different subtile sizes for top-down templates as described "
"below."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:260
msgid "**Template - Generic 16 tiles:**"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:262
msgid ""
"This template can be used for tilesets that only have 16 tiles - for simpler "
"art styles the missing tiles will not be noticeable."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:269
msgid "Blue-checkered: \"ignore\""
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:274
msgid "**Template - Top-down floor in 3/4 perspective:**"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:276
msgid "Key (applies to the four templates below):"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:278
msgid "Green: floor"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:279
msgid "Cyan: wall"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:280
msgid "Yellow: top of wall"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:281
msgid "Grey: hidden due to overlap"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:282
msgid "Transparent: air"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:286
msgid "**Template - Top-down wall in 3/4 perspective:**"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:290
msgid "**Template - Top-down wall in 3/4 perspective (thick walls):**"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:292
msgid ""
"When using this template, set the TileSet subtile size to ``Vector2(64, "
"88)``."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:296
msgid "**Template - Top-down wall in 3/4 perspective (tall walls):**"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:298
msgid ""
"When using this template, set the \"Snap Options\" Step to ``Vector2(64, "
"184)`` and the \"Selected Tile\" Texture offset to height minus the cell "
"size. This means the texture offset should be ``Vector2(0, -120)``:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:305
msgid "3x3"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:307
msgid ""
"In 3x3 mode, each bitmask contains 9 bits (4 corners, 4 edges, 1 center)"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:309
msgid ""
"Each bit checks a single adjacent cell. Corner bits only check diagonally "
"adjacent cells. The center bit should be \"on\" for any tile you wish to use."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:312
msgid ""
"A total of 256 tiles would be needed to provide exactly one bitmask for each "
"arrangement that this mode can test for."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:317
msgid "Disabling autotile"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:319
msgid ""
"When using an autotile, it is possible to turn off the autotile behaviour "
"and select tiles manually, by clicking \"Disable Autotile\" at the top of "
"the tile selection window."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:324
msgid "Autotile binding"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:326
msgid ""
"By default, autotile only checks for adjacent cells filled using the same "
"autotile. This behaviour can be overridden in order to have autotiles bind "
"to each other, or even bind to empty cells. At present, this can only be "
"done through scripting. You will need to add a script to your tileset, and "
"define a function named \"_is_tile_bound(drawn_id, neighbor_id)\". This "
"function will be called for each adjacent cell that does not contain the "
"same autotile, and should return true if you want the drawn cell to \"bind\" "
"to the neighbor cell. You can find the id of an autotile using "
"\"find_tile_by_name(name)\", empty cells are given an id of -1."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:336
msgid ""
"Note that to use this in the editor, the script should start with a \"tool\" "
"declaration, and you may need to close and reload the scene for these "
"changes to take effect."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:341
msgid "Tips and tricks"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:343
msgid ""
"If you're using a :ref:`Camera2D <class_Camera2D>` to scroll your level, you "
"may notice lines appearing between your tiles. To fix this, open Project "
"Settings and enable **Use Gpu Pixel Snap** in the **Rendering > 2d > "
"Snapping** section."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:347
msgid ""
"You can flip and rotate tiles using the icons at the top right of the editor."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:349
msgid ""
"To draw straight lines, hold :kbd:`Shift` while clicking and dragging a tile."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:351
msgid ""
"Tools such as copy, paste, and bucket fill, can be found in the \"TileMap\" "
"menu in the upper-right."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:4
msgid "Particle systems (2D)"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:7
msgid "Intro"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:9
msgid ""
"A simple (but flexible enough for most uses) particle system is provided. "
"Particle systems are used to simulate complex physical effects, such as "
"sparks, fire, magic particles, smoke, mist, etc."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:13
msgid ""
"The idea is that a \"particle\" is emitted at a fixed interval and with a "
"fixed lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the rest and provides a "
"more organic look is the \"randomness\" associated with each parameter. In "
"essence, creating a particle system means setting base physics parameters "
"and then adding randomness to them."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:21
msgid "Particle nodes"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:23
msgid ""
"Godot provides two different nodes for 2D particles, :ref:"
"`class_Particles2D` and :ref:`class_CPUParticles2D`. Particles2D is more "
"advanced and uses the GPU to process particle effects, but that limits it to "
"higher end graphics API, and in our case to the GLES3 renderer. For projects "
"using the GLES2 backend, CPUParticles2D is a CPU-driven option with near "
"feature parity with Particles2D, but lesser performance. While Particles2D "
"is configured via a :ref:`class_ParticlesMaterial` (and optionally with a "
"custom shader), the matching options are provided via node properties in "
"CPUParticles2D (with the exception of the trail settings). You can convert a "
"Particles2D node into a CPUParticles2D node by clicking on the node in the "
"inspector, and selecting \"Convert to CPUParticles2D\" in the \"Particles\" "
"menu of the toolbar."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:36
msgid ""
"The rest of this tutorial is going to use the Particles2D node. First, add a "
"Particles2D node to your scene. After creating that node you will notice "
"that only a white dot was created, and that there is a warning icon next to "
"your Particles2D node in the scene dock. This is because the node needs a "
"ParticlesMaterial to function."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:42
msgid "ParticlesMaterial"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:44
msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in your inspector panel. Click on the box next to ``Material``, and from the "
"dropdown menu select ``New ParticlesMaterial``."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:50
msgid "Your Particles2D node should now be emitting white points downward."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:56
msgid "Texture"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:58
msgid ""
"A particle system uses a single texture (in the future this might be "
"extended to animated textures via spritesheet). The texture is set via the "
"relevant texture property:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:65
msgid "Time parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:68
msgid "Lifetime"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:70
msgid ""
"The time in seconds that every particle will stay alive. When lifetime ends, "
"a new particle is created to replace it."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:73
msgid "Lifetime: 0.5"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:77
msgid "Lifetime: 4.0"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:82
msgid "One Shot"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:84
msgid ""
"When enabled, a Particles2D node will emit all of its particles once and "
"then never again."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:88
msgid "Preprocess"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:90
msgid ""
"Particle systems begin with zero particles emitted, then start emitting. "
"This can be an inconvenience when loading a scene and systems like a torch, "
"mist, etc. begin emitting the moment you enter. Preprocess is used to let "
"the system process a given number of seconds before it is actually drawn the "
"first time."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:97
msgid "Speed Scale"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:99
msgid ""
"The speed scale has a default value of ``1`` and is used to adjust the speed "
"of a particle system. Lowering the value will make the particles slower "
"while increasing the value will make the particles much faster."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:104
msgid "Explosiveness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:106
msgid ""
"If lifetime is ``1`` and there are 10 particles, it means a particle will be "
"emitted every 0.1 seconds. The explosiveness parameter changes this, and "
"forces particles to be emitted all together. Ranges are:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:110
msgid "0: Emit particles at regular intervals (default value)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:111
msgid "1: Emit all particles simultaneously."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:113
msgid ""
"Values in the middle are also allowed. This feature is useful for creating "
"explosions or sudden bursts of particles:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:119
msgid "Randomness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:121
msgid ""
"All physics parameters can be randomized. Random values range from ``0`` to "
"``1``. The formula to randomize a parameter is:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:129
msgid "Fixed FPS"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:131
msgid ""
"This setting can be used to set the particle system to render at a fixed "
"FPS. For instance, changing the value to ``2`` will make the particles "
"render at 2 frames per second. Note this does not slow down the particle "
"system itself."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:136
msgid "Fract Delta"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:138
msgid "This can be used to turn Fract Delta on or off."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:141
msgid "Drawing parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:144
msgid "Visibility Rect"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:147
msgid ""
"The visibility rectangle controls the visibility of the particles on screen. "
"If this rectangle is outside of the viewport, the engine will not render the "
"particles on screen."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:149
msgid ""
"The rectangle's ``W`` and ``H`` properties respectively control its Width "
"and its Height. The ``X`` and ``Y`` properties control the position of the "
"upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:153
msgid ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the Particles2D node and Click "
"``Particles > Generate Visibility Rect``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:155
msgid ""
"You can control the emit duration with the ``Generation Time (sec)`` option. "
"The maximum value is 25 seconds. If you need more time for your particles to "
"move around, you can temporarily change the ``preprocess`` duration on the "
"Particles2D node."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:158
msgid "Local Coords"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:160
msgid ""
"By default this option is on, and it means that the space that particles are "
"emitted to is relative to the node. If the node is moved, all particles are "
"moved with it:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:166
msgid ""
"If disabled, particles will emit to global space, meaning that if the node "
"is moved, already emitted particles are not affected:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:172
msgid "Draw Order"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:174
msgid ""
"This controls the order in which individual particles are drawn. ``Index`` "
"means particles are drawn according to their emission order (default). "
"``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:179
msgid "ParticlesMaterial settings"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:182
msgid "Direction"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:184
msgid ""
"This is the base direction at which particles emit. The default is "
"``Vector3(1, 0, 0)`` which makes particles emit to the right. However, with "
"the default gravity settings, particles will go straight down."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:190
msgid ""
"For this property to be noticeable, you need an *initial velocity* greater "
"than 0. Here, we set the initial velocity to 40. You'll notice that "
"particles emit toward the right, then go down because of gravity."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:197
msgid "Spread"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:199
msgid ""
"This parameter is the angle in degrees which will be randomly added in "
"either direction to the base ``Direction``. A spread of ``180`` will emit in "
"all directions (+/- 180). For spread to do anything the \"Initial Velocity\" "
"parameter must be greater than 0."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:207
msgid "Flatness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:209
msgid "This property is only useful for 3D particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:212
msgid "Gravity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:214
msgid "The gravity applied to every particle."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:219
msgid "Initial Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:221
msgid ""
"Initial velocity is the speed at which particles will be emitted (in pixels/"
"sec). Speed might later be modified by gravity or other accelerations (as "
"described further below)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:228
msgid "Angular Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:230
msgid "Angular velocity is the initial angular velocity applied to particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:233
msgid "Spin Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:235
msgid ""
"Spin velocity is the speed at which particles turn around their center (in "
"degrees/sec)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:241
msgid "Orbit Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:243
msgid "Orbit velocity is used to make particles turn around their center."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:248
msgid "Linear Acceleration"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:250
msgid "The linear acceleration applied to each particle."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:253
msgid "Radial Acceleration"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:255
msgid ""
"If this acceleration is positive, particles are accelerated away from the "
"center. If negative, they are absorbed towards it."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:261
msgid "Tangential Acceleration"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:263
msgid ""
"This acceleration will use the tangent vector to the center. Combining with "
"radial acceleration can do nice effects."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:269
msgid "Damping"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:271
msgid ""
"Damping applies friction to the particles, forcing them to stop. It is "
"especially useful for sparks or explosions, which usually begin with a high "
"linear velocity and then stop as they fade."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:278
msgid "Angle"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:280
msgid ""
"Determines the initial angle of the particle (in degrees). This parameter is "
"mostly useful randomized."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:286
#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:87
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:220
msgid "Scale"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:288
msgid "Determines the initial scale of the particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:293
msgid "Color"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:295
msgid "Used to change the color of the particles being emitted."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:298
msgid "Hue variation"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:300
msgid ""
"The ``Variation`` value sets the initial hue variation applied to each "
"particle. The ``Variation Random`` value controls the hue variation "
"randomness ratio."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:305
msgid "Emission Shapes"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:307
msgid ""
"ParticlesMaterials allow you to set an Emission Mask, which dictates the "
"area and direction in which particles are emitted. These can be generated "
"from textures in your project."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:311
msgid ""
"Ensure that a ParticlesMaterial is set, and the Particles2D node is "
"selected. A \"Particles\" menu should appear in the Toolbar:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:316
msgid "Open it and select \"Load Emission Mask\":"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:320
msgid "Then select which texture you want to use as your mask:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:324
msgid "A dialog box with several settings will appear."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:327
msgid "Emission Mask"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:329
msgid "Three types of emission masks can be generated from a texture:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:331
msgid ""
"Solid Pixels: Particles will spawn from any area of the texture, excluding "
"transparent areas."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:336
msgid ""
"Border Pixels: Particles will spawn from the outer edges of the texture."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:340
msgid ""
"Directed Border Pixels: Similar to Border Pixels, but adds extra information "
"to the mask to give particles the ability to emit away from the borders. "
"Note that an ``Initial Velocity`` will need to be set in order to utilize "
"this."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:348
msgid "Emission Colors"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:350
msgid ""
"``Capture from Pixel`` will cause the particles to inherit the color of the "
"mask at their spawn points."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:352
msgid ""
"Once you click \"OK\", the mask will be generated and set to the "
"ParticlesMaterial, under the ``Emission Shape`` section:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:356
msgid ""
"All of the values within this section have been automatically generated by "
"the \"Load Emission Mask\" menu, so they should generally be left alone."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:359
msgid ""
"An image should not be added to ``Point Texture`` or ``Color Texture`` "
"directly. The \"Load Emission Mask\" menu should always be used instead."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:4
msgid "2D movement overview"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:9
msgid ""
"Every beginner has been there: \"How do I move my character?\" Depending on "
"the style of game you're making, you may have special requirements, but in "
"general the movement in most 2D games is based on a small number of designs."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:13
msgid ""
"We'll use :ref:`KinematicBody2D <class_KinematicBody2D>` for these examples, "
"but the principles will apply to other node types (Area2D, RigidBody2D) as "
"well."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:19
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:22
#: ../../docs/tutorials/animation/2d_skeletons.rst:30
#: ../../docs/tutorials/platform/customizing_html5_shell.rst:44
#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:23
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:40
msgid "Setup"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:21
msgid ""
"Each example below uses the same scene setup. Start with a "
"``KinematicBody2D`` with two children: ``Sprite`` and ``CollisionShape2D``. "
"You can use the Godot icon (\"icon.png\") for the Sprite's texture or use "
"any other 2D image you have."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:25
msgid ""
"Open ``Project -> Project Settings`` and select the \"Input Map\" tab. Add "
"the following input actions (see :ref:`InputEvent <doc_inputevent>` for "
"details):"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:31
msgid "8-way movement"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:33
msgid ""
"In this scenario, you want the user to press the four directional keys (up/"
"left/down/right or W/A/S/D) and move in the selected direction. The name \"8-"
"way movement\" comes from the fact that the player can move diagonally by "
"pressing two keys at the same time."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:39
msgid "Add a script to the kinematic body and add the following code:"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:103
msgid ""
"In the ``get_input()`` function, we check for the four key events and sum "
"them up to get the velocity vector. This has the benefit of making two "
"opposite keys cancel each other out, but will also result in diagonal "
"movement being faster due to the two directions being added together."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:108
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:111
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:116
msgid ""
"If the code above does nothing when you press the keys, double-check that "
"you've set up input actions correctly as described in the :ref:"
"`doc_2d_movement_setup` part of this tutorial."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:121
msgid "Rotation + movement"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:123
msgid ""
"This type of movement is sometimes called \"Asteroids-style\" because it "
"resembles how that classic arcade game worked. Pressing left/right rotates "
"the character, while up/down moves it forward or backward in whatever "
"direction it's facing."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:198
msgid ""
"Here we've added two new variables to track our rotation direction and "
"speed. Again, pressing both keys at once will cancel out and result in no "
"rotation. The rotation is applied directly to the body's ``rotation`` "
"property."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:202
msgid ""
"To set the velocity, we use the ``Vector2.rotated()`` method, so that it "
"points in the same direction as the body. ``rotated()`` is a useful vector "
"function that you can use in many circumstances where you would otherwise "
"need to apply trigonometric functions."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:208
msgid "Rotation + movement (mouse)"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:210
msgid ""
"This style of movement is a variation of the previous one. This time, the "
"direction is set by the mouse position instead of the keyboard. The "
"character will always \"look at\" the mouse pointer. The forward/back inputs "
"remain the same, however."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:269
msgid ""
"Here we're using the :ref:`Node2D <class_Node2D>` ``look_at()`` method to "
"point the player towards a given position. Without this function, you could "
"get the same effect by setting the angle like this:"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:284
msgid "Click-and-move"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:286
msgid ""
"This last example uses only the mouse to control the character. Clicking on "
"the screen will cause the player to move to the target location."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:348
msgid ""
"Note the ``distance_to()`` check we make prior to movement. Without this "
"test, the body would \"jitter\" upon reaching the target position, as it "
"moves slightly past the position and tries to move back, only to move too "
"far and repeat."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:353
msgid ""
"Uncommenting the ``look_at()`` line will also turn the body to point in its "
"direction of motion if you prefer."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:356
msgid ""
"This technique can also be used as the basis of a \"following\" character. "
"The ``target`` position can be that of any object you want to move to."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:362
msgid ""
"You may find these code samples useful as starting points for your own "
"projects. Feel free to use them and experiment with them to see what you can "
"make."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:365
msgid ""
"You can download this sample project here: :download:`2D_movement_demo.zip "
"<files/2D_movement_demo.zip>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:4
msgid "2D lights and shadows"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:9
msgid ""
"This tutorial explains how the 2D lighting works in the `lights and shadows "
"<https://github.com/godotengine/godot-demo-projects/tree/master/2d/"
"lights_and_shadows>`_ demo project. It begins with a brief description of "
"the resources used in the final demo and then describes how to make a scene "
"like the demo step by step."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:16
msgid ""
"All the resources for this tutorial can be found in the `official demo "
"repository <https://github.com/godotengine/godot-demo-projects>`_ on GitHub. "
"I suggest you download it before starting. Alternatively, it can be "
"downloaded from the Project Manager. Launch Godot and in the top bar select "
"\"Templates\" and search for \"2D Lights and Shadows Demo\"."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:24
msgid ""
"For this demo we use four textures: two for the lights, one for the shadow "
"casters, and one for the background. I've included links to them all here if "
"you want to download them separately from the demo."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:28
msgid ""
"The first is the background image (`background.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/background.png>`_) used in the demo. You do not "
"necessarily need a background, but we use one for the demo."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:31
msgid ""
"The second is a plain black image (`caster.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>`_) to use as our shadow caster object. For a "
"top down game this could be a wall or any other object that casts a shadow."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:35
msgid ""
"Next is the light itself (`light.png <https://raw.githubusercontent.com/"
"godotengine/godot-demo-projects/master/2d/lights_and_shadows/light.png>`_). "
"If you click the link you will notice how large it is. The image you use for "
"a light should cover the area you want your light to cover. This image is "
"1024x1024 pixels, so you should use it to cover 1024x1024 pixels in your "
"game."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:40
msgid ""
"Lastly, we have the spotlight image (`spot.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/spot.png>`_). The demo uses a blob to show where the "
"light is and the larger light image to show the effect of the light upon the "
"rest of the scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:52
msgid "The demo uses four different nodes:"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:49
msgid ":ref:`CanvasModulate <class_CanvasModulate>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:50
msgid ":ref:`Sprite <class_Sprite>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:51
msgid ":ref:`Light2D <class_Light2D>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:52
msgid ":ref:`LightOccluder2D <class_LightOccluder2D>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:54
msgid ""
":ref:`CanvasModulate<class_CanvasModulate>` is used to darken the scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:56
msgid ""
":ref:`Sprites <class_Sprite>` are used to display the textures for the light "
"blobs, the background, and for the shadow casters."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:59
msgid ""
":ref:`Light2Ds <class_Light2D>` are used to light the scene. The way a light "
"typically works is by adding a selected texture over the rest of the scene "
"to simulate lighting. But it can be used in other ways, for example masking "
"out parts of the scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:63
msgid ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` are used to tell the shader "
"which parts of the scene cast shadows. The shadows appear only on areas "
"covered by the :ref:`Light2D <class_Light2D>` and their direction is based "
"on the center of the :ref:`Light <class_Light2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:68
#: ../../docs/tutorials/3d/introduction_to_3d.rst:223
#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:2
#: ../../docs/tutorials/performance/batching.rst:151
msgid "Lights"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:70
msgid ""
":ref:`Lights <class_Light2D>` cover the entire extent of their respective "
"Texture. They use additive blending to add the color of their texture to the "
"scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:75
msgid ""
":ref:`Lights <class_Light2D>` have four ``Modes``: ``Add``, ``Sub``, "
"``Mix``, and ``Mask``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:77
msgid ""
"``Add`` adds the color of the light texture to the scene. It brightens the "
"area under the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:79
msgid ""
"``Sub`` subtracts the color of the light from the scene. It darkens the area "
"under the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:81
msgid ""
"``Mix`` mixes the color of the light with the underlying scene. The "
"resulting brightness is halfway between the color of the light and the color "
"underneath."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:84
msgid ""
"``Mask`` is used to mask out areas that are covered by the light. Masked out "
"areas are hidden or revealed based on the color of the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:87
msgid ""
"For the demo the lights have two components, the :ref:`Light "
"<class_Light2D>` itself (which is the effect of the light), and a :ref:"
"`Sprite <class_Sprite>` blob which is an image showing the location of the "
"light source. A child :ref:`Sprite <class_Sprite>` is not necessary to make "
"a :ref:`Light <class_Light2D>` work."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:95
msgid "Shadows"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:97
msgid ""
"Shadows are made by intersecting a :ref:`Light <class_Light2D>` with a :ref:"
"`LightOccluder2D <class_LightOccluder2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:99
msgid ""
"By default shadows are turned off. To turn them on click on the :ref:`Light "
"<class_Light2D>` and under the Shadows section check ``Enabled``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:102
msgid ""
"In the demo we are using a :ref:`Sprite <class_Sprite>` with a Texture on it "
"to make the \"Shadow Casters\", but in reality all you need is a couple of :"
"ref:`LightOccluder2Ds <class_LightOccluder2D>`. By itself the :ref:"
"`LightOccluder2D <class_LightOccluder2D>` looks like a dark spot and in this "
"demo the :ref:`Sprite <class_Sprite>` is just a black square."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:110
msgid ""
"Now that we have covered the basics of the nodes being used, we can now walk "
"step by step through the process of making a scene like the one found in the "
"demo."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:113
msgid ""
"First add a :ref:`Sprite <class_Sprite>` and set its texture to the "
"`background image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/background.png>`_. For your game this "
"can be any background you choose. For this style of shadow it is most likely "
"to be a floor texture."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:118
msgid ""
"Next create three :ref:`Light2D's <class_Light2D>` and set their textures to "
"the `light image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/light.png>`_. You can alter their "
"color in the top section. By default shadows are turned off and the ``mode`` "
"is set to ``add``. This means that each light adds its own color to whatever "
"is underneath."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:124
msgid ""
"Next add a child :ref:`Sprite <class_Sprite>` to each of the :ref:`Light "
"<class_Light2D>` nodes, and set the :ref:`Sprite's <class_Sprite>` texture "
"to the `blob image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/spot.png>`_. Each of these should stay "
"centered on the :ref:`Light <class_Light2D>` node. The blob is the image of "
"the light itself while the :ref:`Light <class_Light2D>` shows the effect "
"that the light has on the scene. The :ref:`LightOccluder2D's "
"<class_LightOccluder2D>` will treat the position of the light as the center "
"of the :ref:`Light <class_Light2D>` node, which is why we want the blob to "
"be centered on its parent :ref:`Light <class_Light2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:133
msgid ""
"The animations in the demo will not be covered here. See :ref:"
"`doc_introduction_animation` for information on creating animations."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:136
msgid ""
"Right now the scene should look too bright. This is because all three lights "
"are adding color to the scene. This is why the demo uses a :ref:"
"`CanvasModulate <class_CanvasModulate>` in the scene. The :ref:"
"`CanvasModulate <class_CanvasModulate>` multiples the entire viewport by a "
"specific color."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:140
msgid ""
"Add a :ref:`CanvasModulate <class_CanvasModulate>` to the scene and set its "
"color to ``rgb(70, 70, 70)``. This will make the scene sufficiently dark to "
"see the effects of the lights distinctly."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:145
msgid "Now we add the shadow casters."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:147
msgid ""
"The demo uses a :ref:`Node <class_Node2D>` named \"casters\" to organize the "
"shadow casters. Add a :ref:`Node2D <class_Node2D>` to the scene. It will be "
"used to group all the shadow casters together. This way we can show and hide "
"them all at the same time."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:151
msgid ""
"Each shadow caster is made of a :ref:`Sprite <class_Sprite>`, with a :ref:"
"`LightOccluder2D <class_LightOccluder2D>` child. For the demo the :ref:"
"`Sprite <class_Sprite>` has a texture set to the `caster image <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>`_ and nothing else. The child :ref:"
"`LightOccluder2D <class_LightOccluder2D>` is where all the magic happens. In "
"a game the :ref:`Sprite <class_Sprite>` could be more than a black box; it "
"could be an image of whatever object is casting the shadow: a wall, a "
"magical chest, or anything else."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:159
msgid ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` tell the game what shape the "
"occluder has. They hold an :ref:`OccluderPolygon2D "
"<class_OccluderPolygon2D>`, which is a container for a polygon and some "
"other information. For this demo, since our wall is a square, we set "
"``Polygon`` to a square. The other default settings are fine."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:164
msgid ""
"The first setting, ``Closed`` can be either ``on`` or ``off``. A closed "
"polygon occludes light coming from all directions. An open polygon only "
"occludes light from one direction."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:167
msgid ""
"``Cull Mode`` lets you select which direction gets culled. The default is "
"``Disabled``, meaning the occluder will cast a shadow no matter which side "
"the light is on. The other two settings ``Clockwise`` and ``Counter-"
"Clockwise`` refer to the winding order of the vertices of the polygon. The "
"winding order is used to determine which side of the line is inside the "
"polygon. Only outward facing lines cast shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:172
msgid ""
"To illustrate the difference, here is an image of a :ref:`LightOccluder2D "
"<class_LightOccluder2D>` with ``Closed`` set to ``off`` in the "
"corresponding :ref:`OccluderPolygon2D <class_OccluderPolygon2D>`, so that "
"the lines of the polygon can be seen:"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:178
msgid "``Cull Mode`` is set to ``Disabled``. All three lines cast shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:182
msgid ""
"``Cull Mode`` is set to ``Clockwise``. Only the top and right lines cast "
"shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:186
msgid ""
"``Cull Mode`` is set to ``Counter-Clockwise``. Only the bottom line casts a "
"shadow. If ``Closed`` was set to ``on`` there would be an additional "
"vertical line on the left which would cast a shadow as well."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:190
msgid ""
"When you have added the :ref:`LightOccluder2Ds <class_LightOccluder2D>` the "
"shadows still won't appear. You need to go back into the :ref:`Light2Ds "
"<class_Light2D>` and under the Shadow section set ``Enable`` to ``on``. This "
"turns on shadows with hard edges like in the image below."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:196
msgid ""
"To give the shadows that nice, soft edge look we set the variables "
"``filter``, ``filter smooth``, and ``gradient length``. Godot supports "
"`Percentage Closer Filtering <https://developer.nvidia.com/gpugems/GPUGems/"
"gpugems_ch11.html>`_ (PCF), which takes multiple samples of the shadow map "
"around a pixel and blurs them to create a smooth shadow effect. The higher "
"the number of samples the smoother the shadow will look, but the slower it "
"will run. That is why Godot provides 3-13 samples by default and allows you "
"to choose. The demo uses PCF7."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:205
msgid ""
"This is a shadow rendered with the demo's settings. ``gradient length`` is "
"set to ``1.3``, ``filter smooth`` is set to ``11.1``, and ``filter`` is set "
"to ``PCF7``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:210
msgid ""
"``filter`` is set to ``PCF13``. Notice how the shadow becomes wider, this is "
"because the distance between samples is based on the variable ``filter "
"smooth``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:213
msgid ""
"In order to make use of filtering you need to set the ``filter smooth`` "
"variable. This dictates how far apart the samples are. If you want the soft "
"area to extend quite far, you can increase the size of ``filter smooth``. "
"However, with few samples and a large filter smooth, you can see lines "
"forming between the samples."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:220
msgid "``filter smooth`` is set to ``30``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:222
msgid ""
"The different :ref:`Light <class_Light2D>` nodes in the demo use different "
"values for filter smooth. Play around with it and see what you like."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:227
msgid "``filter smooth`` is set to ``0``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:229
msgid ""
"Lastly, there is the variable ``gradient length``. For some smooth shadows "
"it is preferable not to have the shadow start immediately on the object, as "
"this produces a hard edge. The gradient length variable creates a smooth "
"gradient to begin the shadow to reduce the effect of the hard edge."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:235
msgid "``gradient length`` is set to ``0``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:239
msgid "``gradient length`` is set to ``10``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:241
msgid ""
"You will need to play around with the options a bit to find settings that "
"suit your project. There is no right solution for everyone, which is why "
"Godot provides so much flexibility. Just keep in mind that the higher "
"``filter`` set the more expensive the shadows will be."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:4
msgid "2D meshes"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:9
msgid ""
"In 3D, meshes are used to display the world. In 2D, they are rare as images "
"are used more often. Godot's 2D engine is a pure two-dimensional engine, so "
"it can't really display 3D meshes directly (although it can be done via "
"``Viewport`` and ``ViewportTexture``)."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:13
msgid ""
"If you are interested in displaying 3D meshes on a 2D viewport, see the :ref:"
"`doc_viewport_as_texture` tutorial."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:15
msgid ""
"2D meshes are meshes that contain two-dimensional geometry (Z can be omitted "
"or ignored) instead of 3D. You can experiment creating them yourself using "
"``SurfaceTool`` from code and displaying them in a ``MeshInstance2D`` node."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:18
msgid ""
"Currently, the only way to generate a 2D mesh within the editor is by either "
"importing an OBJ file as a mesh, or converting it from a Sprite."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:21
msgid "Optimizing pixels drawn"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:23
msgid ""
"This workflow is useful for optimizing 2D drawing in some situations. When "
"drawing large images with transparency, Godot will draw the whole quad to "
"the screen. The large transparent areas will still be drawn."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:25
msgid ""
"This can affect performance, especially on mobile devices, when drawing very "
"large images (generally screen sized), or layering multiple images on top of "
"each other with large transparent areas (for example, when using "
"``ParallaxBackground``)."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:28
msgid ""
"Converting to a mesh will ensure that only the opaque parts will be drawn "
"and the rest will be ignored."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:31
msgid "Converting Sprites to 2D meshes"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:33
msgid ""
"You can take advantage of this optimization by converting a ``Sprite`` to a "
"``MeshInstance2D``. Start with an image that contains large amounts of "
"transparency on the edges, like this tree:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:38
msgid "Put it in a ``Sprite`` and select \"Convert to 2D Mesh\" from the menu:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:42
msgid ""
"A dialog will appear, showing a preview of how the 2D mesh will be created:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:46
msgid ""
"The default values are good enough for many cases, but you can change growth "
"and simplification according to your needs:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:50
msgid ""
"Finally, push the ``Convert 2D Mesh`` button and your Sprite will be "
"replaced:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:16
msgid ""
"Custom drawing in a 2D node is *really* useful. Here are some use cases:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:18
msgid ""
"Drawing shapes or logic that existing nodes can't do, such as an image with "
"trails or a special animated polygon."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:20
msgid ""
"Visualizations that are not that compatible with nodes, such as a tetris "
"board. (The tetris example uses a custom draw function to draw the blocks.)"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:23
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using a large number of nodes, possibly lowering memory usage and "
"improving performance."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:26
msgid ""
"Making a custom UI control. There are plenty of controls available, but when "
"you have unusual needs, you will likely need a custom control."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:31
#: ../../docs/tutorials/math/beziers_and_curves.rst:233
#: ../../docs/tutorials/ui/custom_gui_controls.rst:17
msgid "Drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:33
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:53
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:57
msgid "Updating"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:59
msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:62
msgid ""
"If re-drawing is required because a state or something else changed, call :"
"ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that same node "
"and a new ``_draw()`` call will happen."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:66
msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:110
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:142
msgid "An example: drawing circular arcs"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:144
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:150
msgid "Arc function"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:152
msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:157
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LOD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:197
msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:201
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:206
msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:212
msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:220
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:230
msgid "Draw the arc on the screen"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:232
msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:259
#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:110
msgid "Result:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:264
msgid "Arc polygon function"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:266
msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:306
msgid "Dynamic custom drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:308
msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:314
msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:336
msgid "We make these values change in the _process(delta) function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:338
msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:345
msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:378
msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:402
msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:405
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:413
msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:447
msgid "Let's run again! This time, the rotation displays fine!"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:450
msgid "Antialiased drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:452
msgid ""
"Godot offers method parameters in :ref:"
"`draw_line<class_CanvasItem_method_draw_line>` to enable antialiasing, but "
"it doesn't work reliably in all situations (for instance, on mobile/web "
"platforms, or when HDR is enabled). There is also no ``antialiased`` "
"parameter available in :ref:"
"`draw_polygon<class_CanvasItem_method_draw_polygon>`."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:458
msgid ""
"As a workaround, install and use the `Antialiased Line2D add-on <https://"
"github.com/godot-extended-libraries/godot-antialiased-line2d>`__ (which also "
"supports antialiased Polygon2D drawing). Note that this add-on relies on "
"high-level nodes, rather than low-level ``_draw()`` functions."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:464
#: ../../docs/tutorials/3d/procedural_geometry/index.rst:76
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:131
msgid "Tools"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:466
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor. This can be used as a preview or visualization of some feature or "
"behavior. See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:4
msgid "2D Sprite animation"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:9
msgid ""
"In this tutorial, you'll learn how to create 2D animated characters with the "
"AnimatedSprite class and the AnimationPlayer. Typically, when you create or "
"download an animated character, it will come in one of two ways: as "
"individual images or as a single sprite sheet containing all the animation's "
"frames. Both can be animated in Godot with the AnimatedSprite class."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:14
msgid ""
"First, we'll use :ref:`AnimatedSprite <class_AnimatedSprite>` to animate a "
"collection of individual images. Then we will animate a sprite sheet using "
"this class. Finally, we will learn another way to animate a sprite sheet "
"with :ref:`AnimationPlayer <class_AnimationPlayer>` and the *Animation* "
"property of :ref:`Sprite <class_Sprite>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:19
msgid ""
"Art for the following examples by https://opengameart.org/users/ansimuz and "
"by https://opengameart.org/users/tgfcoder"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:23
msgid "Individual images with AnimatedSprite"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:25
msgid ""
"In this scenario, you have a collection of images, each containing one of "
"your character's animation frames. For this example, we'll use the following "
"animation:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:31
msgid ""
"You can download the images here: :download:`run_animation.zip <files/"
"run_animation.zip>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:34
msgid ""
"Unzip the images and place them in your project folder. Set up your scene "
"tree with the following nodes:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:39
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:169
msgid ""
"The root node could also be :ref:`Area2D <class_Area2D>` or :ref:"
"`RigidBody2D <class_RigidBody2D>`. The animation will still be made in the "
"same way. Once the animation is completed, you can assign a shape to the "
"CollisionShape2D. See :ref:`Physics Introduction <doc_physics_introduction>` "
"for more information."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:46
msgid ""
"Now select the ``AnimatedSprite`` and in its *SpriteFrames* property, select "
"\"New SpriteFrames\"."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:51
msgid ""
"Click on the new SpriteFrames resource and you'll see a new panel appear at "
"the bottom of the editor window:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:56
msgid ""
"From the FileSystem dock on the left side, drag the 8 individual images into "
"the center part of the SpriteFrames panel. On the left side, change the name "
"of the animation from \"default\" to \"run\"."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:62
msgid ""
"Back in the Inspector, check the box for the *Playing* property. You should "
"now see the animation playing in the viewport. However, it is a bit slow. To "
"fix this, change the *Speed (FPS)* setting in the SpriteFrames panel to 10."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:66
msgid ""
"You can add additional animations by clicking the \"New Animation\" button "
"and adding additional images."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:70
msgid "Controlling the animation"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:72
msgid ""
"Once the animation is complete, you can control the animation via code using "
"the ``play()`` and ``stop()`` methods. Here is a brief example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:116
msgid "Sprite sheet with AnimatedSprite"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:118
msgid ""
"You can also easily animate from a sprite sheet with the class "
"``AnimatedSprite``. We will use this public domain sprite sheet:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:122
msgid ""
"Right-click the image and choose \"Save Image As\" to download it, and then "
"copy the image into your project folder."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:124
msgid ""
"Set up your scene tree the same way you did previously when using individual "
"images. Select the ``AnimatedSprite`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:127
msgid ""
"Click on the new SpriteFrames resource. This time, when the bottom panel "
"appears, select \"Add frames from a Sprite Sheet\"."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:131
msgid "You will be prompted to open a file. Select your sprite sheet."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:133
msgid ""
"A new window will open, showing your sprite sheet. The first thing you will "
"need to do is to change the number of vertical and horizontal images in your "
"sprite sheet. In this sprite sheet, we have four images horizontally and two "
"images vertically."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:137
msgid ""
"Next, select the frames from the sprite sheet that you want to include in "
"your animation. We will select the top four, then click \"Add 4 frames\" to "
"create the animation."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:141
msgid ""
"You will now see your animation under the list of animations in the bottom "
"panel. Double click on default to change the name of the animation to jump."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:145
msgid ""
"Finally, check Playing on the AnimatedSprite in the inspector to see your "
"frog jump!"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:151
msgid "Sprite sheet with AnimationPlayer"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:153
msgid ""
"Another way that you can animate when using a sprite sheet is to use a "
"standard :ref:`Sprite <class_Sprite>` node to display the texture, and then "
"animating the change from texture to texture with :ref:`AnimationPlayer "
"<class_AnimationPlayer>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:157
msgid "Consider this sprite sheet, which contains 6 frames of animation:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:161
msgid ""
"Right-click the image and choose \"Save Image As\" to download, then copy "
"the image into your project folder."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:164
msgid ""
"Our goal is to display these images one after another in a loop. Start by "
"setting up your scene tree:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:176
msgid ""
"Drag the spritesheet into the Sprite's *Texture* property, and you'll see "
"the whole sheet displayed on the screen. To slice it up into individual "
"frames, expand the *Animation* section in the Inspector and set the "
"*Hframes* to ``6``. *Hframes* and *Vframes* are the number of horizontal and "
"vertical frames in your sprite sheet."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:184
msgid ""
"Now try changing the value of the *Frame* property. You'll see that it "
"ranges from ``0`` to ``5`` and the image displayed by the Sprite changes "
"accordingly. This is the property we'll be animating."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:188
msgid ""
"Select the ``AnimationPlayer`` and click the \"Animation\" button followed "
"by \"New\". Name the new animation \"walk\". Set the animation length to "
"``0.6`` and click the \"Loop\" button so that our animation will repeat."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:194
msgid ""
"Now select the ``Sprite`` node and click the key icon to add a new track."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:198
msgid ""
"Continue adding frames at each point in the timeline (``0.1`` seconds by "
"default), until you have all the frames from 0 to 5. You'll see the frames "
"actually appearing in the animation track:"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:204
msgid "Press \"Play\" on the animation to see how it looks."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:209
msgid "Controlling an AnimationPlayer animation"
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:211
msgid ""
"Like with AnimatedSprite, you can control the animation via code using the "
"``play()`` and ``stop()`` methods. Again, here is an example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:253
msgid ""
"If updating both an animation and a separate property at once (for example, "
"a platformer may update the sprite's ``h_flip``/``v_flip`` properties when a "
"character turns while starting a 'turning' animation), it's important to "
"keep in mind that ``play()`` isn't applied instantly. Instead, it's applied "
"the next time the :ref:`AnimationPlayer <class_AnimationPlayer>` is "
"processed. This may end up being on the next frame, causing a 'glitch' "
"frame, where the property change was applied but the animation was not. If "
"this turns out to be a problem, after calling ``play()``, you can call "
"``advance(0)`` to update the animation immediately."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:266
msgid ""
"These examples illustrate the two classes you can use in Godot for 2D "
"animation. ``AnimationPlayer`` is a bit more complex than "
"``AnimatedSprite``, but it provides additional functionality, since you can "
"also animate other properties like position or scale. The class "
"``AnimationPlayer`` can also be used with an ``AnimatedSprite``. Experiment "
"to see what works best for your needs."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:4
msgid "Introduction to 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:6
msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simple no longer work. To "
"aid in this transition, it is worth mentioning that Godot uses similar APIs "
"for 2D and 3D. Most nodes are the same and are present in both 2D and 3D "
"versions. In fact, it is worth checking the 3D platformer tutorial, or the "
"3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:14
msgid ""
"In 3D, math is a little more complex than in 2D, so also checking the :ref:"
"`doc_vector_math` entry in the wiki (which was especially created for game "
"developers, not mathematicians or engineers) will help pave the way for you "
"to develop 3D games efficiently."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:20
msgid "Spatial node"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:22
msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Spatial <class_Spatial>` node for "
"everything 3D."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:29
msgid ""
"Spatial nodes have a local transform, which is relative to the parent node "
"(as long as the parent node is also of **or inherits from** the type "
"Spatial). This transform can be accessed as a 4×3 :ref:`Transform "
"<class_Transform>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (X, Y and Z angles) and scale."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:39
msgid "3D content"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:41
msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (usually referred to as Digital Content Creation tools, or DCCs) and "
"exported to an exchange file format to be imported in Godot. This is "
"required since 3D formats are not as standardized as images."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:48
msgid "DCC-created models"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:53
msgid ""
"There are two pipelines to import 3D models in Godot. The first and most "
"common one is by :ref:`doc_importing_3d_scenes`, which allows you to import "
"entire scenes (just as they look in the DCC), including animation, skeletal "
"rigs, blend shapes, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:58
msgid ""
"The second pipeline is by importing simple .OBJ files as mesh resources, "
"which can be then put inside a :ref:`MeshInstance <class_MeshInstance>` node "
"for display."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:63
msgid "Generated geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:65
msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use the :"
"ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:72
msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:77
msgid "Immediate geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:79
msgid ""
"If, instead, there is a requirement to generate simple geometry that will be "
"updated often, Godot provides a special node, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>`, which provides an OpenGL 1.x style immediate-"
"mode API to create points, lines, triangles, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:86
msgid "2D in 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:88
msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:"
"`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games "
"that take advantage of mixing with 3D backgrounds, more realistic parallax, "
"lighting/shadow effects, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:96
msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:101
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:10
msgid "Environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:103
msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:110
msgid "3D viewport"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:112
msgid ""
"Editing 3D scenes is done in the 3D tab. This tab can be selected manually, "
"but it will be automatically enabled when a Spatial node is selected."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:118
msgid ""
"Default 3D scene navigation controls are similar to Blender (aiming to have "
"some sort of consistency in the free software pipeline..), but options are "
"included to customize mouse buttons and behavior to be similar to other "
"tools in the Editor Settings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:126
msgid "Coordinate system"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:128
msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything in 3D, with 1 unit being equal to 1 meter. Physics and "
"other areas are tuned for this scale. Therefore, attempting to use a "
"different scale is usually a bad idea (unless you know what you are doing)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:133
msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set your DCC to metric). Godot allows scaling post-import and, while this "
"works in most cases, in rare situations it may introduce floating-point "
"precision issues (and thus, glitches or artifacts) in delicate areas such as "
"rendering or physics. Make sure your artists always work in the right scale!"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:140
msgid ""
"The Y coordinate is used for \"up\", though for most objects that need "
"alignment (like lights, cameras, capsule collider, vehicle, etc.), the Z "
"axis is used as a \"pointing towards\" direction. This convention roughly "
"means that:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:145
msgid "**X** is sides"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:146
msgid "**Y** is up/down"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:147
msgid "**Z** is front/back"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:150
msgid "Space and manipulation gizmos"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:152
msgid ""
"Moving objects in the 3D view is done through the manipulator gizmos. Each "
"axis is represented by a color: Red, Green, Blue represent X, Y, Z "
"respectively. This convention applies to the grid and other gizmos too (and "
"also to the shader language, ordering of components for Vector3, Color, "
"etc.)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:160
msgid "Some useful keybindings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:162
msgid ""
"To snap placement or rotation, press :kbd:`Ctrl` while moving, scaling or "
"rotating."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:164
msgid "To center the view on the selected object, press :kbd:`F`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:167
msgid "View menu"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:169
msgid ""
"The view options are controlled by the \"View\" menu in the viewport's "
"toolbar."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:173
msgid "You can hide the gizmos in the 3D view of the editor through this menu:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:177
msgid ""
"To hide a specific type of gizmos, you can toggle them off in the \"View\" "
"menu."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:182
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:40
msgid "Default environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:184
msgid ""
"When created from the Project Manager, the 3D environment has a default sky."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:188
msgid ""
"Given how physically based rendering works, it is advised to always try to "
"work with a default environment in order to provide indirect and reflected "
"light to your objects."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:193
#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:18
msgid "Cameras"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:195
msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera <class_Camera>` is also added to the scene. "
"Cameras can work in either orthogonal or perspective projections:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:202
msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:210
msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:213
msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:216
msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:219
msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:225
msgid ""
"Godot has a limit of up to 8 lights per mesh. Aside from that, there is no "
"limitation on the number of lights, nor of types of lights, in Godot. As "
"many as desired can be added, as long as performance allows, and no more "
"than 8 lights shine on a single mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:4
msgid "Using 3D transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:9
msgid ""
"If you have never made 3D games before, working with rotations in three "
"dimensions can be confusing at first. Coming from 2D, the natural way of "
"thinking is along the lines of *\"Oh, it's just like rotating in 2D, except "
"now rotations happen in X, Y and Z\"*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:12
msgid ""
"At first, this seems easy. For simple games, this way of thinking may even "
"be enough. Unfortunately, it's often incorrect."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:14
msgid ""
"Angles in three dimensions are most commonly referred to as \"Euler Angles\"."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:18
msgid ""
"Euler angles were introduced by mathematician Leonhard Euler in the early "
"1700s."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:22
msgid ""
"This way of representing 3D rotations was groundbreaking at the time, but it "
"has several shortcomings when used in game development (which is to be "
"expected from a guy with a funny hat). The idea of this document is to "
"explain why, as well as outlining best practices for dealing with transforms "
"when programming 3D games."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:28
msgid "Problems of Euler angles"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:30
msgid ""
"While it may seem intuitive that each axis has a rotation, the truth is that "
"it's just not practical."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:33
msgid "Axis order"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:35
msgid ""
"The main reason for this is that there isn't a *unique* way to construct an "
"orientation from the angles. There isn't a standard mathematical function "
"that takes all the angles together and produces an actual 3D rotation. The "
"only way an orientation can be produced from angles is to rotate the object "
"angle by angle, in an *arbitrary order*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:39
msgid ""
"This could be done by first rotating in *X*, then *Y* and then in *Z*. "
"Alternatively, you could first rotate in *Y*, then in *Z* and finally in "
"*X*. Anything works, but depending on the order, the final orientation of "
"the object will *not necessarily be the same*. Indeed, this means that there "
"are several ways to construct an orientation from 3 different angles, "
"depending on *the order of the rotations*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:43
msgid ""
"Following is a visualization of rotation axes (in X, Y, Z order) in a gimbal "
"(from Wikipedia). As you can see, the orientation of each axis depends on "
"the rotation of the previous one:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:47
msgid ""
"You may be wondering how this affects you. Let's look at a practical example:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:49
msgid ""
"Imagine you are working on a first-person controller (e.g. an FPS game). "
"Moving the mouse left and right controls your view angle parallel to the "
"ground, while moving it up and down moves the player's view up and down."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:51
msgid ""
"In this case to achieve the desired effect, rotation must be applied first "
"in the *Y* axis (\"up\" in this case, since Godot uses a \"Y-Up\" "
"orientation), followed by rotation in the *X* axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:55
msgid ""
"If we were to apply rotation in the *X* axis first, and then in *Y*, the "
"effect would be undesired:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:59
msgid ""
"Depending on the type of game or effect desired, the order in which you want "
"axis rotations to be applied may differ. Therefore, applying rotations in X, "
"Y, and Z is not enough: you also need a *rotation order*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:62
#: ../../docs/tutorials/math/interpolation.rst:4
msgid "Interpolation"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:64
msgid ""
"Another problem with using Euler angles is interpolation. Imagine you want "
"to transition between two different camera or enemy positions (including "
"rotations). One logical way to approach this is to interpolate the angles "
"from one position to the next. One would expect it to look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:68
msgid "But this does not always have the expected effect when using angles:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:72
msgid "The camera actually rotated the opposite direction!"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:74
msgid "There are a few reasons this may happen:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:76
msgid ""
"Rotations don't map linearly to orientation, so interpolating them does not "
"always result in the shortest path (i.e., to go from ``270`` to ``0`` "
"degrees is not the same as going from ``270`` to ``360``, even though the "
"angles are equivalent)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:77
msgid ""
"Gimbal lock is at play (first and last rotated axis align, so a degree of "
"freedom is lost). See `Wikipedia's page on Gimbal Lock <https://en.wikipedia."
"org/wiki/Gimbal_lock>`_ for a detailed explanation of this problem."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:80
msgid "Say no to Euler angles"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:82
msgid ""
"The result of all this is that you should **not use** the ``rotation`` "
"property of :ref:`class_Spatial` nodes in Godot for games. It's there to be "
"used mainly in the editor, for coherence with the 2D engine, and for simple "
"rotations (generally just one axis, or even two in limited cases). As much "
"as you may be tempted, don't use it."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:84
msgid "Instead, there is a better way to solve your rotation problems."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:87
msgid "Introducing transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:89
msgid ""
"Godot uses the :ref:`class_Transform` datatype for orientations. Each :ref:"
"`class_Spatial` node contains a ``transform`` property which is relative to "
"the parent's transform, if the parent is a Spatial-derived type."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:91
msgid ""
"It is also possible to access the world coordinate transform via the "
"``global_transform`` property."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:93
msgid ""
"A transform has a :ref:`class_Basis` (transform.basis sub-property), which "
"consists of three :ref:`class_Vector3` vectors. These are accessed via the "
"``transform.basis`` property and can be accessed directly by ``transform."
"basis.x``, ``transform.basis.y``, and ``transform.basis.z``. Each vector "
"points in the direction its axis has been rotated, so they effectively "
"describe the node's total rotation. The scale (as long as it's uniform) can "
"also be inferred from the length of the axes. A *basis* can also be "
"interpreted as a 3x3 matrix and used as ``transform.basis[x][y]``."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:95
msgid "A default basis (unmodified) is akin to:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:123
msgid "This is also an analog of a 3x3 identity matrix."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:125
msgid ""
"Following the OpenGL convention, ``X`` is the *Right* axis, ``Y`` is the "
"*Up* axis and ``Z`` is the *Forward* axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:127
msgid ""
"Together with the *basis*, a transform also has an *origin*. This is a "
"*Vector3* specifying how far away from the actual origin ``(0, 0, 0)`` this "
"transform is. Combining the *basis* with the *origin*, a *transform* "
"efficiently represents a unique translation, rotation, and scale in space."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:132
msgid ""
"One way to visualize a transform is to look at an object's 3D gizmo while in "
"\"local space\" mode."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:136
msgid ""
"The gizmo's arrows show the ``X``, ``Y``, and ``Z`` axes (in red, green, and "
"blue respectively) of the basis, while the gizmo's center is at the object's "
"origin."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:140
msgid ""
"For more information on the mathematics of vectors and transforms, please "
"read the :ref:`doc_vector_math` tutorials."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:143
msgid "Manipulating transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:145
msgid ""
"Of course, transforms are not as straightforward to manipulate as angles and "
"have problems of their own."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:147
msgid ""
"It is possible to rotate a transform, either by multiplying its basis by "
"another (this is called accumulation), or by using the rotation methods."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:168
msgid "A method in Spatial simplifies this:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:185
msgid "This rotates the node relative to the parent node."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:187
msgid ""
"To rotate relative to object space (the node's own transform), use the "
"following:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:201
msgid "Precision errors"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:203
msgid ""
"Doing successive operations on transforms will result in a loss of precision "
"due to floating-point error. This means the scale of each axis may no longer "
"be exactly ``1.0``, and they may not be exactly ``90`` degrees from each "
"other."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:205
msgid ""
"If a transform is rotated every frame, it will eventually start deforming "
"over time. This is unavoidable."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:207
msgid ""
"There are two different ways to handle this. The first is to "
"*orthonormalize* the transform after some time (maybe once per frame if you "
"modify it every frame):"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:218
msgid ""
"This will make all axes have ``1.0`` length again and be ``90`` degrees from "
"each other. However, any scale applied to the transform will be lost."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:220
msgid ""
"It is recommended you not scale nodes that are going to be manipulated; "
"scale their children nodes instead (such as MeshInstance). If you absolutely "
"must scale the node, then re-apply it at the end:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:234
msgid "Obtaining information"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:236
msgid ""
"You might be thinking at this point: **\"Ok, but how do I get angles from a "
"transform?\"**. The answer again is: you don't. You must do your best to "
"stop thinking in angles."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:238
msgid ""
"Imagine you need to shoot a bullet in the direction your player is facing. "
"Just use the forward axis (commonly ``Z`` or ``-Z``)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:251
msgid ""
"Is the enemy looking at the player? Use the dot product for this (see the :"
"ref:`doc_vector_math` tutorial for an explanation of the dot product):"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:270
msgid "Strafe left:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:287
msgid "Jump:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:306
msgid "All common behaviors and logic can be done with just vectors."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:309
msgid "Setting information"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:311
msgid ""
"There are, of course, cases where you want to set information to a "
"transform. Imagine a first person controller or orbiting camera. Those are "
"definitely done using angles, because you *do want* the transforms to happen "
"in a specific order."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:313
msgid ""
"For such cases, keep the angles and rotations *outside* the transform and "
"set them every frame. Don't try to retrieve and re-use them because the "
"transform is not meant to be used this way."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:315
msgid "Example of looking around, FPS style:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:357
msgid ""
"As you can see, in such cases it's even simpler to keep the rotation "
"outside, then use the transform as the *final* orientation."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:360
msgid "Interpolating with quaternions"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:362
msgid ""
"Interpolating between two transforms can efficiently be done with "
"quaternions. More information about how quaternions work can be found in "
"other places around the Internet. For practical use, it's enough to "
"understand that pretty much their main use is doing a closest path "
"interpolation. As in, if you have two rotations, a quaternion will smoothly "
"allow interpolation between them using the closest axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:364
msgid "Converting a rotation to quaternion is straightforward."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:387
msgid ""
"The :ref:`class_Quat` type reference has more information on the datatype "
"(it can also do transform accumulation, transform points, etc., though this "
"is used less often). If you interpolate or apply operations to quaternions "
"many times, keep in mind they need to be eventually normalized. Otherwise, "
"they will also suffer from numerical precision errors."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:393
msgid ""
"Quaternions are useful when doing camera/path/etc. interpolations, as the "
"result will always be correct and smooth."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:396
msgid "Transforms are your friend"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:398
msgid ""
"For most beginners, getting used to working with transforms can take some "
"time. However, once you get used to them, you will appreciate their "
"simplicity and power."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:400
msgid ""
"Don't hesitate to ask for help on this topic in any of Godot's `online "
"communities <https://godotengine.org/community>`_ and, once you become "
"confident enough, please help others!"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:4
msgid "3D rendering limitations"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:8
msgid ""
"In addition to the limitations below, mobile platforms have even more "
"limitations on 3D rendering compared to desktop platforms. See :ref:"
"`doc_mobile_rendering_limitations` for more information."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:15
msgid ""
"Due to their focus on performance, real-time rendering engines have many "
"limitations. Godot's renderer is no exception. To work effectively with "
"those limitations, you need to understand them."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:20
msgid "Texture size limits"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:22
msgid ""
"On desktops and laptops, textures larger than 8192×8192 may not be supported "
"on older devices. You can check your target GPU's limitations on `GPUinfo."
"org <https://www.gpuinfo.org/>`__."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:26
msgid ""
"Mobile GPUs are typically limited to 4096×4096 textures. Also, some mobile "
"GPUs don't support repeating non-power-of-two-sized textures. Therefore, if "
"you want your texture to display correctly on all platforms, you should "
"avoid using textures larger than 4096×4096 and use a power of two size if "
"the texture needs to repeat."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:33
msgid "Color banding"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:35
msgid ""
"When using the GLES3 or Vulkan renderers, Godot's 3D engine renders "
"internally in HDR. However, the rendering output will be tonemapped to a low "
"dynamic range so it can be displayed on the screen. This can result in "
"visible banding, especially when using untextured materials. This can also "
"be seen in 2D projects when using smooth gradient textures."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:41
msgid "There are two main ways to alleviate banding:"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:43
msgid ""
"Enable **Use Debanding** in the Project Settings. This applies a fullscreen "
"debanding shader as a post-processing effect and is very cheap. Fullscreen "
"debanding is only supported when using the GLES3 or Vulkan renderers. It "
"also requires HDR to be enabled in the Project Settings (which is the "
"default)."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:47
msgid ""
"Alternatively, bake some noise into your textures. This is mainly effective "
"in 2D, e.g. for vignetting effects. In 3D, you can also use a `custom "
"debanding shader <https://github.com/fractilegames/godot-gles2-debanding-"
"material>`__ to be applied on your *materials*. This technique works even if "
"your project is rendered in LDR, which means it will work when using the "
"GLES2 renderer."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:55
msgid ""
"See `Banding in Games: A Noisy Rant <http://loopit.dk/banding_in_games."
"pdf>`__ for more details about banding and ways to combat it."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:59
msgid "Depth buffer precision"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:61
msgid ""
"To sort objects in 3D space, rendering engines rely on a *depth buffer* "
"(also called *Z-buffer*). This buffer has a finite precision: 24-bit on "
"desktop platforms, sometimes 16-bit on mobile platforms (for performance "
"reasons). If two different objects end up on the same buffer value, then Z-"
"fighting will occur. This will materialize as textures flickering back and "
"forth as the camera moves or rotates."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:68
msgid ""
"To make the depth buffer more precise over the rendered area, you should "
"*increase* the Camera node's **Near** property. However, be careful: if you "
"set it too high, players will be able to see through nearby geometry. You "
"should also *decrease* the Camera node's **Far** property to the lowest "
"permissible value for your use case, though keep in mind it won't impact "
"precision as much as the **Near** property."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:75
msgid ""
"If you only need high precision when the player can see far away, you could "
"change it dynamically based on the game conditions. For instance, if the "
"player enters an airplane, the **Near** property can be temporarily "
"increased to avoid Z-fighting in the distance. It can then be decreased once "
"the player leaves the airplane."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:81
msgid ""
"Depending on the scene and viewing conditions, you may also be able to move "
"the Z-fighting objects further apart without the difference being visible to "
"the player."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:88
msgid "Transparency sorting"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:90
msgid ""
"In Godot, transparent materials are drawn after opaque materials. "
"Transparent objects are sorted back to front before being drawn based on the "
"Spatial's position, not the vertex position in world space. Due to this, "
"overlapping objects may often be sorted out of order. To fix improperly "
"sorted objects, tweak the material's :ref:`Render Priority "
"<class_Material_property_render_priority>` property. This will force "
"specific materials to appear in front or behind of other transparent "
"materials. Even then, this may not always be sufficient."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:98
msgid ""
"Some rendering engines feature *order-independent transparency* techniques "
"to alleviate this, but this is costly on the GPU. Godot currently doesn't "
"provide this feature. There are still several ways to avoid this problem:"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:102
msgid ""
"Only make materials transparent if you actually need it. If a material only "
"has a small transparent part, consider splitting it into a separate "
"material. This will allow the opaque part to cast shadows and may also "
"improve performance."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:107
msgid ""
"If your texture mostly has fully opaque and fully transparent areas, you can "
"use alpha testing instead of alpha blending. This transparency mode is "
"faster to render and doesn't suffer from transparency issues. Enable "
"**Parameters > Use Alpha Scissor** in SpatialMaterial, and adjust **Alpha "
"Scissor Threshold** accordingly if needed. Note that MSAA will not anti-"
"alias the texture's edges, but FXAA will."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:114
msgid ""
"If you need to render semi-transparent areas of the texture, alpha scissor "
"isn't suitable. Instead, setting the SpatialMaterial's **Parameters > Depth "
"Draw Mode** property to **Opaque Pre-Pass** can sometimes work (at a "
"performance cost)."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:119
msgid ""
"If you want a material to fade with distance, use the SpatialMaterial "
"distance fade mode **Pixel Dither** or **Object Dither** instead of "
"**PixelAlpha**. This will make the material opaque. This way, it can also "
"cast shadows."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:125
msgid "Multi-sample antialiasing"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:127
msgid ""
"Multi-sample antialiasing (MSAA) takes multiple *coverage* samples at the "
"edges of polygons when rendering objects. It does not increase the number of "
"*color* samples used to render a scene. Here's what this means in practice:"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:131
msgid ""
"Edges of meshes will be smoothed out nicely (as well as supersampling would)."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:132
msgid ""
"Transparent materials that use *alpha testing* (1-bit transparency) won't be "
"smoothed out."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:133
msgid ""
"Specular aliasing (\"sparkles\" that appear on reflective surfaces) won't be "
"reduced."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:135
msgid ""
"There are several ways to work around this limitation depending on your "
"performance budget:"
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:137
msgid ""
"To make specular aliasing less noticeable, open the Project Settings and "
"enable **Rendering > Quality > Screen Space Filters > Screen Space Roughness "
"Limiter**. This filter has a moderate cost on performance. It should be "
"enabled only if you actually need it."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:142
msgid ""
"Enable FXAA in addition to (or instead of) MSAA. Since FXAA is a screen-"
"space antialiasing method, it will smooth out anything. As a downside, it "
"will also make the scene appear blurrier, especially at resolutions below "
"1440p."
msgstr ""

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:146
msgid ""
"Render the scene at a higher resolution, then display it in a "
"ViewportTexture that matches the window size. Make sure to enable **Filter** "
"on the ViewportTexture flags. This technique is called *supersampling* and "
"is very slow. Its use is generally only recommended for offline rendering."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:4
msgid "Spatial Material"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:9
msgid ""
"``SpatialMaterial`` is a default 3D material that aims to provide most of "
"the features artists look for in a material, without the need for writing "
"shader code. However, it can be converted to shader code if additional "
"functionality is needed."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:13
msgid "This tutorial explains most parameters present in ``SpatialMaterial``."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:15
msgid ""
"There are 4 ways to add a ``SpatialMaterial`` to an object. It can be added "
"in the *Material* property of the mesh. It can be added in the *Material* "
"property of the node using the mesh (such as a MeshInstance node), the "
"*Material Override* property of the node using the mesh, and the *Material "
"Overlay*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:22
msgid ""
"If you add a material to the mesh itself, every time that mesh is used it "
"will have that material. If you add a material to the node using the mesh, "
"the material will only be used by that node, it will also override the "
"material property of the mesh. If a material is added in the *Material "
"Override* property of the node, it will only be used by that node. It will "
"also override the regular material property of the node and the material "
"property of the mesh."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:29
msgid ""
"The *Material Overlay* property will render a material **over** the current "
"one being used by the mesh. As an example, this can be used to put a "
"transparent shield effect on a mesh."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:33
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:135
msgid "Flags"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:35
msgid ""
"Spatial materials have many flags determining the general usage of a "
"material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:40
msgid "Transparent"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:42
msgid ""
"In Godot, materials are not transparent unless specifically configured to "
"be. The main reason behind this is that transparent materials are rendered "
"using a different technique (sorted from back to front and rendered in "
"order)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:46
msgid ""
"This technique is less efficient (many state changes happen) and makes the "
"materials unusable with many mid- and post-processing effects (such as SSAO, "
"SSR, etc.) that require perfectly opaque geometry."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:50
msgid ""
"For this reason, materials in Godot are assumed opaque unless specified "
"otherwise. The main settings that enable transparency are:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:53
msgid "Transparent flag (this one)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:54
msgid "Blend mode set to other than \"Mix\""
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:55
msgid "Enabling distance or proximity fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:58
msgid "Use Shadow to Opacity"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:60
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:75
msgid ""
"Lighting modifies the alpha so shadowed areas are opaque and non-shadowed "
"areas are transparent. Useful for overlaying shadows onto a camera feed in "
"AR."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:64
msgid "Unshaded"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:66
msgid ""
"In most cases it is common for materials to be affected by lighting (shaded)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:68
msgid ""
"However, in some cases you might want to show just the albedo (color) and "
"ignore the rest. Toggling this flag on will remove all shading and display "
"pure, unlit color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:75
msgid "Vertex Lighting"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:77
msgid ""
"Godot has a more or less uniform cost per pixel thanks to depth pre-pass. "
"All lighting calculations are made by running the lighting shader on every "
"pixel."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:80
msgid ""
"As these calculations are costly, performance can be brought down "
"considerably in some corner cases such as drawing several layers of "
"transparency (which is common in particle systems). Switching to per-vertex "
"lighting may help in these cases."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:85
msgid ""
"Additionally, on low-end or mobile devices, switching to vertex lighting can "
"considerably increase rendering performance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:90
msgid ""
"Keep in mind that when vertex lighting is enabled, only directional lighting "
"can produce shadows (for performance reasons)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:94
msgid "No Depth Test"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:96
msgid ""
"In order for close objects to appear over far away objects, depth testing is "
"performed. Disabling it has the result of objects appearing over (or under) "
"everything else."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:100
msgid ""
"Disabling this makes the most sense for drawing indicators in world space, "
"and works very well with the *Render Priority* property of Material (see the "
"bottom of this page)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:107
msgid "Use Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:109
msgid ""
"This option is only effective when the geometry rendered is made of points "
"(generally it's made of triangles when imported from 3D DCCs). If so, then "
"those points can be resized (see below)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:114
msgid "World Triplanar"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:116
msgid ""
"When using triplanar mapping (see below, in the UV1 and UV2 settings), "
"triplanar is computed in object local space. This option makes triplanar "
"work in world space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:121
msgid "Fixed Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:123
msgid ""
"This causes the object to be rendered at the same size no matter the "
"distance. This is useful mostly for indicators (no depth test and high "
"render priority) and some types of billboards."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:128
msgid "Do Not Receive Shadows"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:130
msgid ""
"Makes the object not receive any kind of shadow that would otherwise be cast "
"onto it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:134
msgid "Disable Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:136
msgid ""
"Makes the object not receive any kind of ambient lighting that would "
"otherwise light it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:140
msgid "Ensure Correct Normals"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:142
msgid "Fixes normals when non-uniform scaling is used."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:145
msgid "Vertex Color"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:147
msgid ""
"This setting allows choosing what is done by default to vertex colors that "
"come from your 3D modelling application. By default, they are ignored."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:153
msgid "Use as Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:155
msgid "Choosing this option means vertex color is used as albedo color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:158
msgid "Is sRGB"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:160
msgid ""
"Most 3D DCCs will likely export vertex colors as sRGB, so toggling this "
"option on will help them look correct."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:164
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:123
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:163
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:216
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:233
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:306
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:350
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:495
msgid "Parameters"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:166
msgid ""
"``SpatialMaterial`` also has several configurable parameters to tweak many "
"aspects of the rendering:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:172
msgid "Diffuse Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:174
msgid ""
"Specifies the algorithm used by diffuse scattering of light when hitting the "
"object. The default is *Burley*. Other modes are also available:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:177
msgid ""
"**Burley:** Default mode, the original Disney Principled PBS diffuse "
"algorithm."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:178
msgid "**Lambert:** Is not affected by roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:179
msgid ""
"**Lambert Wrap:** Extends Lambert to cover more than 90 degrees when "
"roughness increases. Works great for hair and simulating cheap subsurface "
"scattering. This implementation is energy conserving."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:182
msgid ""
"**Oren Nayar:** This implementation aims to take microsurfacing into account "
"(via roughness). Works well for clay-like materials and some types of cloth."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:184
msgid ""
"**Toon:** Provides a hard cut for lighting, with smoothing affected by "
"roughness. It is recommended you disable sky contribution from your "
"environment's ambient light settings or disable ambient light in the spatial "
"material to achieve a better effect."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:192
msgid "Specular Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:194
msgid ""
"Specifies how the specular blob will be rendered. The specular blob "
"represents the shape of a light source reflected in the object."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:197
msgid "**ShlickGGX:** The most common blob used by PBR 3D engines nowadays."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:198
msgid ""
"**Blinn:** Common in previous-generation engines. Not worth using nowadays, "
"but left here for the sake of compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:200
msgid "**Phong:** Same as above."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:201
msgid ""
"**Toon:** Creates a toon blob, which changes size depending on roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:202
msgid "**Disabled:** Sometimes the blob gets in the way. Begone!"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:207
msgid "Blend Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:209
msgid ""
"Controls the blend mode for the material. Keep in mind that any mode other "
"than *Mix* forces the object to go through the transparent pipeline."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:212
msgid ""
"**Mix:** Default blend mode, alpha controls how much the object is visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:213
msgid ""
"**Add:** Object is blended additively, nice for flares or some fire-like "
"effects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:215
msgid "**Sub:** Object is subtracted."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:216
msgid "**Mul:** Object is multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:221
msgid "Cull Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:223
msgid ""
"Determines which side of the object is not drawn when backfaces are rendered:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:225
msgid "**Back:** The back of the object is culled when not visible (default)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:226
msgid "**Front:** The front of the object is culled when not visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:227
msgid ""
"**Disabled:** Used for objects that are double-sided (no culling is "
"performed)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:231
#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:65
msgid ""
"By default, Blender has backface culling disabled on materials and will "
"export materials to match how they render in Blender. This means that "
"materials in Godot will have their cull mode set to **Disabled**. This can "
"decrease performance since backfaces will be rendered, even when they are "
"being culled by other faces. To resolve this, enable **Backface Culling** in "
"Blender's Materials tab, then export the scene to glTF again."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:239
msgid "Depth Draw Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:241
msgid "Specifies when depth rendering must take place."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:243
msgid "**Opaque Only (default):** Depth is only drawn for opaque objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:244
msgid ""
"**Always:** Depth draw is drawn for both opaque and transparent objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:245
msgid ""
"**Never:** No depth draw takes place (do not confuse this with the No Depth "
"Test option above)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:247
msgid ""
"**Depth Pre-Pass:** For transparent objects, an opaque pass is made first "
"with the opaque parts, then transparency is drawn above. Use this option "
"with transparent grass or tree foliage."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:254
msgid "Line Width"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:256
msgid ""
"When drawing lines, specify the width of the lines being drawn. This option "
"is not available on most modern hardware."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:260
msgid "Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:262
msgid "When drawing points, specify the point size in pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:265
msgid "Billboard Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:267
msgid ""
"Enables billboard mode for drawing materials. This controls how the object "
"faces the camera:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:270
msgid "**Disabled:** Billboard mode is disabled."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:271
msgid ""
"**Enabled:** Billboard mode is enabled, the object's -Z axis will always "
"face the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:273
msgid ""
"**Y-Billboard:** The object's X axis will always be aligned with the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:274
msgid ""
"**Particles:** Most suited for particle systems, because it allows "
"specifying animation options."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:279
msgid "The above options are only enabled for Particle Billboard."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:282
msgid "Billboard Keep Scale"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:284
msgid "Enables scaling a mesh in billboard mode."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:287
msgid "Grow"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:289
msgid "Grows the object vertices in the direction pointed by their normals:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:293
msgid ""
"This is commonly used to create cheap outlines. Add a second material pass, "
"make it black and unshaded, reverse culling (Cull Front), and add some grow:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:300
msgid "Use Alpha Scissor"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:302
msgid ""
"When transparency other than ``0`` or ``1`` is not needed, it's possible to "
"set a threshold to prevent the object from rendering semi-transparent pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:307
msgid ""
"This renders the object via the opaque pipeline, which is faster and allows "
"it to use mid- and post-process effects such as SSAO, SSR, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:311
msgid "Material colors, maps and channels"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:313
msgid ""
"Besides the parameters, what defines materials themselves are the colors, "
"textures, and channels. Godot supports an extensive list of them. They are "
"described in detail below:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:318
msgid "Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:320
msgid ""
"*Albedo* is the base color for the material, on which all the other settings "
"operate. When set to *Unshaded*, this is the only color that is visible. In "
"previous versions of Godot, this channel was named *Diffuse*. The change of "
"name mainly happened because, in PBR (Physically Based Rendering), this "
"color affects many more calculations than just the diffuse lighting path."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:326
msgid "Albedo color and texture can be used together as they are multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:328
msgid ""
"*Alpha channel* in albedo color and texture is also used for the object "
"transparency. If you use a color or texture with *alpha channel*, make sure "
"to either enable transparency or *alpha scissoring* for it to work."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:333
msgid "Metallic"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:335
msgid ""
"Godot uses a metallic model over competing models due to its simplicity. "
"This parameter defines how reflective the material is. The more reflective, "
"the less diffuse/ambient light affects the material and the more light is "
"reflected. This model is called \"energy-conserving\"."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:340
msgid ""
"The *Specular* parameter is a general amount for the reflectivity (unlike "
"*Metallic*, this is not energy-conserving, so leave it at ``0.5`` and don't "
"touch it unless you need to)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:344
msgid ""
"The minimum internal reflectivity is ``0.04``, so it's impossible to make a "
"material completely unreflective, just like in real life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:350
msgid "Roughness"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:352
msgid ""
"*Roughness* affects the way reflection happens. A value of ``0`` makes it a "
"perfect mirror while a value of ``1`` completely blurs the reflection "
"(simulating natural microsurfacing). Most common types of materials can be "
"achieved with the right combination of *Metallic* and *Roughness*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:360
msgid "Emission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:362
msgid ""
"*Emission* specifies how much light is emitted by the material (keep in mind "
"this does not include light surrounding geometry unless :ref:`doc_gi_probes` "
"are used). This value is added to the resulting final image and is not "
"affected by other lighting in the scene."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:370
msgid "Normal map"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:372
msgid ""
"Normal mapping allows you to set a texture that represents finer shape "
"detail. This does not modify geometry, only the incident angle for light. In "
"Godot, only the red and green channels of normal maps are used for better "
"compression and wider compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:381
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:125
msgid ""
"Godot requires the normal map to use the X+, Y+ and Z+ coordinates, this is "
"known as OpenGL style. If you've imported a material made to be used with "
"another engine it may be DirectX style, in which case the normal map needs "
"to be converted so its Y axis is flipped."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:386
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:130
msgid ""
"More information about normal maps (including a coordinate order table for "
"popular engines) can be found `here <http://wiki.polycount.com/wiki/"
"Normal_Map_Technical_Details>`__."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:391
msgid "Rim"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:393
msgid ""
"Some fabrics have small micro-fur that causes light to scatter around it. "
"Godot emulates this with the *Rim* parameter. Unlike other rim lighting "
"implementations, which just use the emission channel, this one actually "
"takes light into account (no light means no rim). This makes the effect "
"considerably more believable."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:400
msgid ""
"Rim size depends on roughness, and there is a special parameter to specify "
"how it must be colored. If *Tint* is ``0``, the color of the light is used "
"for the rim. If *Tint* is ``1``, then the albedo of the material is used. "
"Using intermediate values generally works best."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:406
#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:64
msgid "Clearcoat"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:408
#: ../../docs/tutorials/3d/spatial_material.rst:426
#: ../../docs/tutorials/3d/spatial_material.rst:448
#: ../../docs/tutorials/3d/spatial_material.rst:461
#: ../../docs/tutorials/3d/spatial_material.rst:481
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:140
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:181
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:223
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:251
msgid "*This feature is only available when using the GLES3 backend.*"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:410
msgid ""
"The *Clearcoat* parameter is used to add a secondary pass of transparent "
"coat to the material. This is common in car paint and toys. In practice, "
"it's a smaller specular blob added on top of the existing material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:414
msgid ""
"The effect is extremely subtle in Godot 3 releases, and may require specific "
"lighting or looking at a material a specific way to notice a difference. "
"This can be seen in the image below where clearcoat is turned on in the "
"right."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:421
msgid "The effect will be more noticeable in Godot 4."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:424
#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:63
msgid "Anisotropy"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:428
msgid ""
"This changes the shape of the specular blob and aligns it to tangent space. "
"Anisotropy is commonly used with hair, or to make materials such as brushed "
"aluminum more realistic. It works especially well when combined with "
"flowmaps."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:435
msgid "Ambient Occlusion"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:437
msgid ""
"It is possible to specify a baked ambient occlusion map. This map affects "
"how much ambient light reaches each surface of the object (it does not "
"affect direct light by default). While it is possible to use Screen-Space "
"Ambient Occlusion (SSAO) to generate ambient occlusion, nothing beats the "
"quality of a well-baked AO map. It is recommended to bake ambient occlusion "
"whenever possible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:446
msgid "Depth"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:450
msgid ""
"Setting a depth map on a material produces a ray-marched search to emulate "
"the proper displacement of cavities along the view direction. This is not "
"real added geometry, but an illusion of depth. It may not work for complex "
"objects, but it produces a realistic depth effect for textures. For best "
"results, *Depth* should be used together with normal mapping."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:459
msgid "Subsurface Scattering"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:463
msgid ""
"This effect emulates light that penetrates an object's surface, is "
"scattered, and then comes out. It is useful to create realistic skin, "
"marble, colored liquids, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:470
msgid "Transmission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:472
msgid ""
"This controls how much light from the lit side (visible to light) is "
"transferred to the dark side (opposite from the light). This works well for "
"thin objects such as plant leaves, grass, human ears, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:479
#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:61
msgid "Refraction"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:483
msgid ""
"When refraction is enabled, it supersedes alpha blending, and Godot attempts "
"to fetch information from behind the object being rendered instead. This "
"allows distorting the transparency in a way similar to refraction in real "
"life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:490
msgid "Detail"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:492
msgid ""
"Godot allows using secondary albedo and normal maps to generate a detail "
"texture, which can be blended in many ways. By combining this with secondary "
"UV or triplanar modes, many interesting textures can be achieved."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:498
msgid "There are several settings that control how detail is used."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:500
msgid ""
"Mask: The detail mask is a black and white image used to control where the "
"blending takes place on a texture. White is for the detail textures, Black "
"is for the regular material textures, different shades of gray are for "
"partial blending of the material textures and detail textures."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:505
msgid ""
"Blend Mode: These four modes control how the textures are blended together."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:507
msgid ""
"Mix: Combines pixel values of both textures. At black, only show the "
"material texture, at white, only show the detail texture. Values of gray "
"create a smooth blend between the two."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:511
msgid ""
"Add: Adds pixel values of one Texture with the other. Unlike mix mode both "
"textures are completely mixed at white parts of a mask and not at gray "
"parts. The original texture is mostly unchanged at black"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:515
msgid ""
"Sub: Subtracts pixel values of one texture with the other. The second "
"texture is completely subtracted at white parts of a mask with only a little "
"subtraction in black parts, gray parts being different levels of subtraction "
"based on the exact texture."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:520
msgid ""
"Mul: Multiplies the RGB channel numbers for each pixel from the top texture "
"with the values for the corresponding pixel from the bottom texture."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:523
msgid ""
"Albedo: This is where you put an albedo texture you want to blend. If "
"nothing is in this slot it will be interpreted as white by default."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:526
msgid ""
"Normal: This is where you put a normal texture you want to blend. If nothing "
"is in this slot it will be interpreted as a flat normal map. This can still "
"be used even if the material does not have normal map enabled."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:531
msgid "UV1 and UV2"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:533
msgid ""
"Godot supports two UV channels per material. Secondary UV is often useful "
"for ambient occlusion or emission (baked light). UVs can be scaled and "
"offset, which is useful when using repeating textures."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:538
msgid "Triplanar Mapping"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:540
msgid ""
"Triplanar mapping is supported for both UV1 and UV2. This is an alternative "
"way to obtain texture coordinates, sometimes called \"Autotexture\". "
"Textures are sampled in X, Y and Z and blended by the normal. Triplanar "
"mapping can be performed in either world space or object space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:545
msgid ""
"In the image below, you can see how all primitives share the same material "
"with world triplanar, so the brick texture continues smoothly between them."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:551
msgid "Proximity and distance fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:553
msgid ""
"Godot allows materials to fade by proximity to each other as well as "
"depending on the distance from the viewer. Proximity fade is useful for "
"effects such as soft particles or a mass of water with a smooth blending to "
"the shores. Distance fade is useful for light shafts or indicators that are "
"only present after a given distance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:559
msgid ""
"Keep in mind enabling these enables alpha blending, so abusing them for an "
"entire scene is usually not a good idea."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:565
msgid "Render priority"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:567
msgid ""
"The rendering order of objects can be changed, although this is mostly "
"useful for transparent objects (or opaque objects that perform depth draw "
"but no color draw, such as cracks on the floor)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:4
msgid "3D lights and shadows"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:9
msgid ""
"Light sources emit light that mixes with the materials and produces a "
"visible result. Light can come from several types of sources in a scene:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:12
msgid ""
"From the Material itself in the form of the emission color (though it does "
"not affect nearby objects unless baked)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:14
msgid "Light Nodes: Directional, Omni and Spot."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:15
msgid "Ambient Light in the :ref:`Environment <class_Environment>`."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:17
msgid "Baked Light (read :ref:`doc_baked_lightmaps`)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:19
msgid ""
"The emission color is a material property. You can read more about it in "
"the :ref:`doc_spatial_material` tutorial."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:23
msgid "Light nodes"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:25
msgid ""
"There are three types of light nodes: `Directional light`_, `Omni light`_ "
"and `Spot light`_. Let's take a look at the common parameters for lights:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:31
msgid "Each one has a specific function:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:33
msgid "**Color**: Base color for emitted light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:34
msgid ""
"**Energy**: Energy multiplier. This is useful for saturating lights or "
"working with :ref:`doc_high_dynamic_range`."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:35
msgid ""
"**Indirect Energy**: Secondary multiplier used with indirect light (light "
"bounces). This works in baked light or GIProbe."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:36
msgid ""
"**Negative**: Light becomes subtractive instead of additive. It's sometimes "
"useful to manually compensate some dark corners."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:37
msgid ""
"**Specular**: Affects the intensity of the specular blob in objects affected "
"by this light. At zero, this light becomes a pure diffuse light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:38
msgid ""
"**Bake Mode**: Sets the bake mode for the light. For more information see :"
"ref:`doc_baked_lightmaps`"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:39
msgid ""
"**Cull Mask**: Objects that are in the selected layers below will be "
"affected by this light. Note that objects disabled via this cull mask will "
"still cast shadows. If you don't want disabled objects to cast shadows, "
"adjust the ``cast_shadow`` property on the GeometryInstance to the desired "
"value."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:45
msgid "Shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:47
msgid ""
"Lights can optionally cast shadows. This gives them greater realism (light "
"does not reach occluded areas), but it can incur a bigger performance cost. "
"There is a list of generic shadow parameters, each also has a specific "
"function:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:51
msgid "**Enabled**: Check to enable shadow mapping in this light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:52
msgid ""
"**Color**: Areas occluded are multiplied by this color. It is black by "
"default, but it can be changed to tint shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:53
msgid ""
"**Bias**: When this parameter is too small, self shadowing occurs. When too "
"large, shadows separate from the casters. Tweak to what works best for you."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:54
msgid ""
"**Contact**: Performs a short screen-space raycast to reduce the gap "
"generated by the bias. Contact shadows are only available when using the "
"GLES3 backend."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:55
msgid ""
"**Reverse Cull Face**: Some scenes work better when shadow mapping is "
"rendered with face-culling inverted."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:57
msgid ""
"Below is an image of what tweaking bias looks like. Default values work for "
"most cases, but in general it depends on the size and complexity of geometry."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:62
msgid ""
"Finally, if gaps can't be solved, the **Contact** option can help (at a "
"performance cost):"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:66
msgid ""
"Any sort of bias issues can always be fixed by increasing the shadow map "
"resolution, although that may lead to decreased performance."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:71
msgid ""
"If shadow biasing is a problem in your scene, the following settings are a "
"good starting point:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:73
msgid ""
"Enable **Reverse Cull Face**. This reduces shadow peter-panning "
"significantly and prevents lights from exhibiting shadow acne at grazing "
"angles. The main downside is that it may cause lighting to leak in some "
"corners. The other downside is that materials that have their cull mode set "
"to **Disabled** or MeshInstances with Cast Shadow set to **Double-Sided** "
"may exhibit shadow acne."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:79
msgid ""
"Set **Bias** to ``-0.01``. The bias should be a negative value when "
"**Reverse Cull Face** is enabled, but it should be a positive value when "
"it's disabled."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:81
msgid ""
"For DirectionalLight, set the directional shadow **Normal Bias** to ``0.0`` "
"and **Bias Split Scale** to ``0.0``. Depending on your scene, you may also "
"want to further decrease **Bias** to a value between ``-0.05`` and ``-0.1``."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:85
msgid ""
"Following the above tips should make it possible to avoid gaps in shadows "
"without resorting to contact shadows (which have many issues of their own). "
"If shadow acne is still visible after performing the above tweaks, try "
"subdividing your meshes further in your 3D modeling software."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:91
msgid "Directional light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:93
msgid ""
"This is the most common type of light and represents a light source very far "
"away (such as the sun). It is also the cheapest light to compute and should "
"be used whenever possible (although it's not the cheapest shadow-map to "
"compute, but more on that later)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:97
msgid ""
"Directional light models an infinite number of parallel light rays covering "
"the whole scene. The directional light node is represented by a big arrow "
"which indicates the direction of the light rays. However, the position of "
"the node does not affect the lighting at all and can be anywhere."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:104
msgid ""
"Every face whose front-side is hit by the light rays is lit, while the "
"others stay dark. Most light types have specific parameters, but directional "
"lights are pretty simple in nature, so they don't."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:108
msgid "Directional shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:110
msgid ""
"To compute shadow maps, the scene is rendered (only depth) from an "
"orthogonal point of view that covers the whole scene (or up to the max "
"distance). There is, however, a problem with this approach because objects "
"closer to the camera receive blocky shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:116
msgid ""
"To fix this, a technique named \"Parallel Split Shadow Maps\" (or PSSM) is "
"used. This splits the view frustum in 2 or 4 areas. Each area gets its own "
"shadow map. This allows small areas close to the viewer to have the same "
"shadow resolution as a huge, far-away area."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:121
msgid "With this, shadows become more detailed:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:125
msgid "To control PSSM, a number of parameters are exposed:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:129
msgid ""
"Each split distance is controlled relative to the camera far (or shadow "
"**Max Distance** if greater than zero), so *0.0* is the eye position and "
"*1.0* is where the shadow ends at a distance. Splits are in-between. Default "
"values generally work well, but tweaking the first split a bit is common to "
"give more detail to close objects (like a character in a third person game)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:135
msgid ""
"Always make sure to set a shadow *Max Distance* according to what the scene "
"needs. A lower maximum distance will result in better-looking shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:138
msgid ""
"Sometimes, the transition between a split and the next can look bad. To fix "
"this, the **\"Blend Splits\"** option can be turned on, which sacrifices "
"detail in exchange for smoother transitions:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:144
msgid ""
"The **\"Normal Bias\"** parameter can be used to fix special cases of self "
"shadowing when objects are perpendicular to the light. The only downside is "
"that it makes the shadow a bit thinner."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:150
msgid ""
"The **\"Bias Split Scale\"** parameter can control extra bias for the splits "
"that are far away. If self shadowing occurs only on the splits far away, "
"this value can fix them."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:153
msgid "Finally, the **\"Depth Range\"** has two settings:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:155
msgid ""
"**Stable**: Keeps the shadow stable while the camera moves, and the blocks "
"that appear in the outline when close to the shadow edges remain in-place. "
"This is the default and generally desired, but it reduces the effective "
"shadow resolution."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:156
msgid ""
"**Optimized**: Tries to achieve the maximum resolution available at any "
"given time. This may result in a \"moving saw\" effect on shadow edges, but "
"at the same time the shadow looks more detailed (so this effect may be "
"subtle enough to be forgiven)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:158
msgid "Just experiment which setting works better for your scene."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:160
msgid ""
"Shadowmap size for directional lights can be changed in Project Settings -> "
"Rendering -> Quality:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:164
msgid ""
"Increasing it can solve bias problems, but decrease performance. Shadow "
"mapping is an art of tweaking."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:167
msgid "Omni light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:169
msgid ""
"Omni light is a point source that emits light spherically in all directions "
"up to a given radius."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:174
msgid ""
"In real life, light attenuation is an inverse function, which means omni "
"lights don't have a radius. This is a problem because it means computing "
"several omni lights would become demanding."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:177
msgid ""
"To solve this, a *Range* is introduced together with an attenuation function."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:181
msgid ""
"These two parameters allow tweaking how this works visually in order to find "
"aesthetically pleasing results."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:187
msgid "Omni shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:189
msgid ""
"Omni light shadow mapping is relatively straightforward. The main issue that "
"needs to be considered is the algorithm used to render it."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:192
msgid ""
"Omni Shadows can be rendered as either **\"Dual Paraboloid\" or \"Cube "
"Mapped\"**. The former renders quickly, but can cause deformations, while "
"the later is more correct, but costlier."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:198
msgid ""
"If the objects being rendered are mostly irregular, Dual Paraboloid is "
"usually enough. In any case, as these shadows are cached in a shadow atlas "
"(more on that at the end), it may not make a difference in performance for "
"most scenes."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:203
msgid "Spot light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:205
msgid ""
"Spot lights are similar to omni lights, except they emit light only into a "
"cone (or \"cutoff\"). They are useful to simulate flashlights, car lights, "
"reflectors, spots, etc. This type of light is also attenuated towards the "
"opposite direction it points to."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:212
msgid ""
"Spot lights share the same **Range** and **Attenuation** as **OmniLight**, "
"and add two extra parameters:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:214
msgid "**Angle**: The aperture angle of the light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:215
msgid ""
"**Angle Attenuation**: The cone attenuation, which helps soften the cone "
"borders."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:218
msgid "Spot shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:220
msgid ""
"Spots don't need any parameters for shadow mapping. Keep in mind that, at "
"more than 89 degrees of aperture, shadows stop functioning for spots, and "
"you should consider using an Omni light instead."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:224
msgid "Shadow atlas"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:226
msgid ""
"Unlike Directional lights, which have their own shadow texture, Omni and "
"Spot lights are assigned to slots of a shadow atlas. This atlas can be "
"configured in Project Settings -> Rendering -> Quality -> Shadow Atlas."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:231
msgid ""
"The resolution applies to the whole Shadow Atlas. This atlas is divided into "
"four quadrants:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:235
msgid ""
"Each quadrant can be subdivided to allocate any number of shadow maps; the "
"following is the default subdivision:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:239
msgid ""
"The allocation logic is simple. The biggest shadow map size (when no "
"subdivision is used) represents a light the size of the screen (or bigger). "
"Subdivisions (smaller maps) represent shadows for lights that are further "
"away from view and proportionally smaller."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:244
msgid "Every frame, the following procedure is performed for all lights:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:246
msgid ""
"Check if the light is on a slot of the right size. If not, re-render it and "
"move it to a larger/smaller slot."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:247
msgid ""
"Check if any object affecting the shadow map has changed. If it did, re-"
"render the light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:248
msgid ""
"If neither of the above has happened, nothing is done, and the shadow is "
"left untouched."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:250
msgid ""
"If the slots in a quadrant are full, lights are pushed back to smaller "
"slots, depending on size and distance."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:252
msgid ""
"This allocation strategy works for most games, but you may want to use a "
"separate one in some cases (for example, a top-down game where all lights "
"are around the same size and quadrants may all have the same subdivision)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:256
msgid "Shadow filter quality"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:258
msgid ""
"The filter quality of shadows can be tweaked. This can be found in Project "
"Settings -> Rendering -> Quality -> Shadows. Godot supports no filter, PCF5 "
"and PCF13."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:264
msgid "It affects the blockyness of the shadow outline:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:4
msgid "Reflection probes"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:9
msgid ""
"As stated in the :ref:`doc_spatial_material`, objects can show reflected or "
"diffuse light. Reflection probes are used as a source of reflected and "
"ambient light for objects inside their area of influence."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:12
msgid ""
"A probe of this type captures the surroundings (as a sort of 360 degrees "
"image), and stores versions of it with increasing levels of *blur*. This is "
"used to simulate roughness in materials, as well as ambient lighting."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:15
msgid ""
"While these probes are an efficient way of storing reflections, they have a "
"few shortcomings:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:17
msgid ""
"They are efficient to render, but expensive to compute. This leads to a "
"default behavior where they only capture on scene load."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:18
msgid ""
"They work best for rectangular shaped rooms or places, otherwise the "
"reflections shown are not as faithful (especially when roughness is 0)."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:21
#: ../../docs/tutorials/3d/gi_probes.rst:36
#: ../../docs/tutorials/3d/baked_lightmaps.rst:48
#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:62
msgid "Setting up"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:23
msgid ""
"Create a ReflectionProbe node and wrap it around the area where you want to "
"have reflections:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:27
msgid ""
"This should result in immediate local reflections. If you are using a Sky "
"texture, reflections are by default blended with it."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:30
msgid ""
"By default, on interiors, reflections may appear not to have much "
"consistence. In this scenario, make sure to tick the *\"Box Correct\"* "
"property."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:36
msgid ""
"This setting changes the reflection from an infinite skybox to reflecting a "
"box the size of the probe:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:41
msgid ""
"Adjusting the box walls may help improve the reflection a bit, but it will "
"always look best in box shaped rooms."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:44
msgid ""
"The probe captures the surrounding from the center of the gizmo. If, for "
"some reason, the room shape or contents occlude the center, it can be "
"displaced to an empty place by moving the handles in the center:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:50
msgid ""
"By default, shadow mapping is disabled when rendering probes (only in the "
"rendered image inside the probe, not the actual scene). This is a simple way "
"to save on performance and memory. If you want shadows in the probe, they "
"can be toggled on/off with the *Enable Shadow* setting:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:57
msgid ""
"Finally, keep in mind that you may not want the Reflection Probe to render "
"some objects. A typical scenario is an enemy inside the room which will move "
"around. To keep objects from being rendered in the reflections, use the "
"*Cull Mask* setting:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:65
#: ../../docs/tutorials/3d/gi_probes.rst:95
msgid "Interior vs exterior"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:67
msgid ""
"If you are using reflection probes in an interior setting, it is recommended "
"that the **Interior** property be enabled. This stops the probe from "
"rendering the sky and also allows custom ambient lighting settings."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:73
msgid ""
"When probes are set to **Interior**, custom constant ambient lighting can be "
"specified per probe. Just choose a color and an energy."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:76
msgid ""
"Optionally, you can blend this ambient light with the probe diffuse capture "
"by tweaking the **Ambient Contribution** property (0.0 means pure ambient "
"color, while 1.0 means pure diffuse capture)."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:81
msgid "Blending"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:83
msgid ""
"Multiple reflection probes can be used, and Godot will blend them where they "
"overlap using a smart algorithm:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:87
msgid ""
"As you can see, this blending is never perfect (after all, these are box "
"reflections, not real reflections), but these artifacts are only visible "
"when using perfectly mirrored reflections. Normally, scenes have normal "
"mapping and varying levels of roughness, which can hide this."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:93
msgid ""
"Alternatively, Reflection Probes work well blended together with Screen "
"Space Reflections to solve these problems. Combining them makes local "
"reflections appear more faithful, while probes are only used as a fallback "
"when no screen-space information is found:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:99
msgid ""
"Finally, blending interior and exterior probes is the recommended approach "
"when making levels that combine both interiors and exteriors. Near the door, "
"a probe can be marked as *exterior* (so it will get sky reflections) while "
"on the inside, it can be interior."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:104
msgid "Reflection atlas"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:106
msgid ""
"In the current renderer implementation, all probes are the same size and are "
"fit into a Reflection Atlas. The size and amount of probes can be customized "
"in Project Settings -> Quality -> Reflections"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:110
msgid ""
"The default setting of Atlas Subdiv: 8 will allow up to 16 reflection probes "
"in a scene. This value needs to be increased if you need more reflection "
"probes."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:4
msgid "Using GIProbe"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:9
msgid ""
"This feature is only available when using the GLES3 backend. :ref:"
"`doc_baked_lightmaps` can be used as an alternative when using the GLES2 "
"renderer."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:13
msgid ""
"Just like with :ref:`doc_reflection_probes`, and as stated in the :ref:"
"`doc_spatial_material`, objects can show reflected or diffuse light. GI "
"Probes are similar to Reflection Probes, but they use a different and more "
"complex technique to produce indirect light and reflections."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:18
msgid ""
"The strength of GI Probes is real-time, high quality, indirect light. While "
"the scene needs a quick pre-bake for the static objects that will be used, "
"lights can be added, changed or removed, and this will be updated in real-"
"time. Dynamic objects that move within one of these probes will also receive "
"indirect lighting from the scene automatically."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:24
msgid ""
"Just like with ``ReflectionProbe``, ``GIProbe`` can be blended (in a bit "
"more limited way), so it is possible to provide full real-time lighting for "
"a stage without having to resort to lightmaps."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:28
msgid "The main downsides of ``GIProbe`` are:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:30
msgid ""
"A small amount of light leaking can occur if the level is not carefully "
"designed. This must be artist-tweaked."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:31
msgid ""
"Performance requirements are higher than for lightmaps, so it may not run "
"properly in low-end integrated GPUs (may need to reduce resolution)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:32
msgid ""
"Reflections are voxelized, so they don't look as sharp as with "
"``ReflectionProbe``. However, in exchange they are volumetric, so any room "
"size or shape works for them. Mixing them with Screen Space Reflection also "
"works well."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:33
msgid ""
"They consume considerably more video memory than Reflection Probes, so they "
"must be used with care in the right subdivision sizes."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:38
msgid ""
"Just like a ``ReflectionProbe``, simply set up the ``GIProbe`` by wrapping "
"it around the geometry that will be affected."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:43
msgid ""
"Afterwards, make sure to enable the **Use In Baked Light** property on the "
"geometry instances in the inspector. This is required for ``GIProbe`` to "
"recognize objects, otherwise they will be ignored:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:49
msgid ""
"Once the geometry is set up, push the Bake button that appears on the 3D "
"editor toolbar to begin the pre-baking process:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:56
msgid ""
"Meshes should have sufficiently thick walls to avoid light leaks (avoid one-"
"sided walls). For interior levels, enclose your level geometry in a "
"sufficiently large box and bridge the loops to close the mesh."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:61
msgid "Adding lights"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:63
msgid ""
"Unless there are materials with emission, ``GIProbe`` does nothing by "
"default. Lights need to be added to the scene to have an effect."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:66
msgid ""
"The effect of indirect light can be viewed quickly (it is recommended you "
"turn off all ambient/sky lighting to tweak this, though, as shown below):"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:71
msgid ""
"In some situations, though, indirect light may be too weak. Lights have an "
"indirect multiplier to tweak this:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:76
msgid ""
"And, as ``GIProbe`` lighting updates in real-time, this effect is immediate:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:81
msgid "Reflections"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:83
msgid ""
"For very metallic materials with low roughness, it's possible to appreciate "
"voxel reflections. Keep in mind that these have far less detail than "
"Reflection Probes or Screen Space Reflections, but fully reflect "
"volumetrically."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:89
msgid ""
"``GIProbe``\\ s can be easily mixed with Reflection Probes and Screen Space "
"Reflections, as a full 3-stage fallback-chain. This allows to have precise "
"reflections where needed:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:97
msgid ""
"GI Probes normally allow mixing with lighting from the sky. This can be "
"disabled when turning on the *Interior* setting."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:102
msgid ""
"The difference becomes clear in the image below, where light from the sky "
"goes from spreading inside to being ignored."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:107
msgid ""
"As complex buildings may mix interiors with exteriors, combining GIProbes "
"for both parts works well."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:111
msgid "Tweaking"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:113
msgid "GI Probes support a few parameters for tweaking:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:117
msgid ""
"**Subdiv** Subdivision used for the probe. The default (128) is generally "
"good for small- to medium-sized areas. Bigger subdivisions use more memory."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:118
msgid "**Extents** Size of the probe. Can be tweaked from the gizmo."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:119
msgid ""
"**Dynamic Range** Maximum light energy the probe can absorb. Higher values "
"allow brighter light, but with less color detail."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:120
msgid ""
"**Energy** Multiplier for all the probe. Can be used to make the indirect "
"light brighter (although it's better to tweak this from the light itself)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:121
msgid "**Propagation** How much light propagates through the probe internally."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:122
msgid ""
"**Bias** Value used to avoid self-occlusion when doing voxel cone tracing, "
"should generally be above 1.0 (1==voxel size)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:123
msgid ""
"**Normal Bias** Alternative type of bias useful for some scenes. Experiment "
"with this one if regular bias does not work."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:124
msgid "**Interior** Allows mixing with lighting from the sky."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:125
msgid "**Compress** Currently broken. Do not use."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:126
msgid ""
"**Data** Contains the light baked data after baking. If you are saving the "
"data it should be saved as a .res file."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:129
msgid "Quality"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:131
msgid ""
"``GIProbe``\\ s are quite demanding. It is possible to use lower quality "
"voxel cone tracing in exchange for more performance."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:4
msgid "Baked lightmaps"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:9
msgid ""
"Baked lightmaps are an alternative workflow for adding indirect (or fully "
"baked) lighting to a scene. Unlike the :ref:`doc_gi_probes` approach, baked "
"lightmaps work fine on low-end PCs and mobile devices, as they consume "
"almost no resources at run-time. Also unlike GIProbe, baked lightmaps can "
"optionally be used to store direct lighting, which provides even further "
"performance gains."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:15
msgid ""
"Unlike GIProbes, Baked Lightmaps are completely static. Once baked, they "
"can't be modified at all. They also don't provide the scene with "
"reflections, so using :ref:`doc_reflection_probes` together with it on "
"interiors (or using a Sky on exteriors) is a requirement to get good quality."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:20
msgid ""
"As they are baked, they have fewer problems than ``GIProbe`` regarding light "
"bleeding, and indirect light will often look better. The downside is that "
"baking lightmaps takes much longer than baking a GIProbe. While baking a "
"GIProbe can be done in a matter of seconds, baking lightmaps will take "
"several minutes if not more. This can slow down iteration speed "
"significantly, so it is recommended to bake lightmaps only when you actually "
"need to see changes in lighting."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:27
msgid ""
"Baking lightmaps will also reserve baked materials' UV2 slot, which means "
"you can no longer use it for other purposes in materials (either in the "
"built-in :ref:`doc_spatial_material` or in custom shaders)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:31
msgid ""
"In the end, deciding which indirect lighting approach is better depends on "
"your use case. In general, GIProbe is easier to set up and works better with "
"dynamic objects. For mobile or low-end compatibility, though, baked "
"lightmaps are your only choice."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:37
msgid "Visual comparison"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:39
msgid ""
"Here are some comparisons of how BakedLightmap vs. GIProbe look. Notice that "
"lightmaps are more accurate, but also suffer from the fact that lighting is "
"on an unwrapped texture, so transitions and resolution may not be that good. "
"GIProbe looks less accurate (as it's an approximation), but smoother overall."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:50
msgid ""
"First of all, before the lightmapper can do anything, the objects to be "
"baked need an UV2 layer and a texture size. An UV2 layer is a set of "
"secondary texture coordinates that ensures any face in the object has its "
"own place in the UV map. Faces must not share pixels in the texture."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:55
msgid ""
"There are a few ways to ensure your object has a unique UV2 layer and "
"texture size:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:58
msgid "Unwrap on scene import"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:60
msgid ""
"This is probably the best approach overall. The only downside is that, on "
"large models, unwrapping can take a while on import. Nonetheless, Godot will "
"cache the UV2 across reimports, so it will only be regenerated when needed."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:64
msgid ""
"Select the imported scene in the filesystem dock, then go to the **Import** "
"dock. There, the following option can be modified:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:69
msgid ""
"The **Light Baking** mode needs to be set to **Gen Lightmaps**. A texel size "
"in world units must also be provided, as this will determine the final size "
"of the lightmap texture (and, in consequence, the UV padding in the map)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:73
msgid ""
"The effect of setting this option is that all meshes within the scene will "
"have their UV2 maps properly generated."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:78
msgid ""
"When reusing a mesh within a scene, keep in mind that UVs will be generated "
"for the first instance found. If the mesh is re-used with different scales "
"(and the scales are wildly different, more than half or twice), this will "
"result in inefficient lightmaps. Don't reuse a source mesh at significantly "
"different scales if you are planning to use lightmapping."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:84
msgid ""
"Also, the ``*.unwrap_cache`` files should *not* be ignored in version "
"control as these files guarantee that UV2 reimports are consistent across "
"platforms and engine versions."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:89
msgid "Unwrap from within Godot"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:91
msgid ""
"Godot has an option to unwrap meshes and visualize the UV channels. It can "
"be found in the Mesh menu:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:96
msgid ""
"This will generate a second set of UV2 coordinates which can be used for "
"baking, and it will also set the texture size automatically."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:100
msgid "Unwrap from your 3D DCC"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:102
msgid ""
"The last option is to do it from your favorite 3D app. This approach is "
"generally not recommended, but it's explained first so that you know it "
"exists. The main advantage is that, on complex objects that you may want to "
"re-import a lot, the texture generation process can be quite costly within "
"Godot, so having it unwrapped before import can be faster."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:108
msgid "Simply do an unwrap on the second UV2 layer."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:112
msgid ""
"Then import the 3D scene normally. Remember you will need to set the texture "
"size on the mesh after import."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:117
msgid ""
"If you use external meshes on import, the size will be kept. Be wary that "
"most unwrappers in 3D DCCs are not quality oriented, as they are meant to "
"work quickly. You will mostly need to use seams or other techniques to "
"create better unwrapping."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:123
msgid "Checking UV2"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:125
msgid ""
"In the mesh menu mentioned before, the UV2 texture coordinates can be "
"visualized. Make sure, if something is failing, to check that the meshes "
"have these UV2 coordinates:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:131
msgid "Setting up the scene"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:133
msgid ""
"Before anything is done, a **BakedLightmap** node needs to be added to a "
"scene. This will enable light baking on all nodes (and sub-nodes) in that "
"scene, even on instanced scenes."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:139
msgid ""
"A sub-scene can be instanced several times, as this is supported by the "
"baker, and each will be assigned a lightmap of its own (just make sure to "
"respect the rule about scaling mentioned before):"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:144
msgid "Configure bounds"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:146
msgid ""
"Lightmap needs an approximate volume of the area affected because it uses it "
"to transfer light to dynamic objects inside it (more on that later). Just "
"cover the scene with the volume as you do with ``GIProbe``:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:153
msgid "Setting up meshes"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:155
msgid ""
"For a **MeshInstance** node to take part in the baking process, it needs to "
"have the **Use in Baked Light** property enabled."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:160
msgid ""
"When auto-generating lightmaps on scene import, this is enabled "
"automatically."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:163
msgid "Setting up lights"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:165
msgid ""
"Lights are baked with indirect light by default. This means that "
"shadowmapping and lighting are still dynamic and affect moving objects, but "
"light bounces from that light will be baked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:169
msgid ""
"Lights can be disabled (no bake) or be fully baked (direct and indirect). "
"This can be controlled from the **Bake Mode** menu in lights:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:174
msgid "The modes are:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:177
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:47
msgid "Disabled"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:179
msgid ""
"The light is ignored when baking lightmaps. Keep in mind hiding a light will "
"have no effect for baking, so this must be used instead of hiding the Light "
"node."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:182
msgid ""
"This is the mode to use for dynamic lighting effects such as explosions and "
"weapon effects."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:185
msgid "Indirect"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:187
msgid ""
"This is the default mode, and is a compromise between performance and real-"
"time friendliness. Only indirect lighting will be baked. Direct light and "
"shadows are still real-time, as they would be without BakedLightmap."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:191
msgid ""
"This mode allows performing *subtle* changes to a light's color, energy and "
"position while still looking fairly correct. For example, you can use this "
"to create flickering static torches that have their indirect light baked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:196
msgid "All"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:198
msgid ""
"Both indirect and direct lighting will be baked. Since static surfaces can "
"skip lighting and shadow computations entirely, this mode provides the best "
"performance along with smooth shadows that never fade based on distance. The "
"real-time light will not affect baked surfaces anymore, but it will still "
"affect dynamic objects. When using the **All** bake mode on a light, dynamic "
"objects will not cast real-time shadows onto baked surfaces, so you need to "
"use a different approach such as blob shadows instead. Blob shadows can be "
"implemented with a Sprite3D + RayCast setup, or a negative SpotLight "
"pointing down with its bake mode set to **Disabled**."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:208
msgid ""
"The light will not be adjustable at all during gameplay. Moving the light "
"and changing its color or energy will not have any effect on static surfaces."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:211
msgid ""
"Since bake modes can be adjusted on a per-light basis, it is possible to "
"create hybrid baked light setups. One popular option is to use a real-time "
"DirectionalLight with its bake mode set to **Indirect**, and use the **All** "
"bake mode for OmniLights and SpotLights. This provides good performance "
"while still allowing dynamic objects to cast real-time shadows in outdoor "
"areas."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:217
msgid ""
"After selecting the **All** bake mode on a light, you can optionally specify "
"a **Size** greater than 0 for the light in the inspector. This size is used "
"to provide softer shadows depending on the distance between the shadow "
"caster and the object receiving the shadow. This mimics real life shadow "
"appearance:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:225
msgid ""
"The light's **Size** property is ignored for real-time shadows; it will only "
"affect baked shadows. When the **Size** property is changed, lightmaps must "
"be baked again to make changes visible."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:230
msgid "Baking"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:232
msgid ""
"To begin the bake process, just push the **Bake Lightmaps** button on top "
"when selecting the BakedLightmap node:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:237
msgid ""
"This can take from seconds to minutes (or hours) depending on scene size, "
"bake method and quality selected."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:241
msgid "Balancing bake times with quality"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:243
msgid ""
"Since high-quality bakes can take very long (up to several hours for large "
"complex scenes), it is recommended to use lower quality settings at first. "
"Then, once you are confident with your scene's lighting setup, raise the "
"quality settings and perform a \"final\" bake before exporting your project."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:250
msgid ""
"By default, the lightmap baker will use all the system's logical CPU cores "
"to speed up baking. This can reduce system responsiveness. To preserve "
"system responsiveness while lightmaps are baking, you can reduce the number "
"of CPU threads used to bake lightmaps. Keeping 1 or 2 CPU threads free will "
"help improve system responsiveness, which is useful when multi-tasking while "
"lightmaps are baking at the cost of slowing down lightmap baking slightly."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:257
msgid ""
"To do so, open **Editor > Editor Settings** and adjust **Editors > 3d > "
"Lightmap Baking Number Of Cpu Threads**. The default value (``0``) uses all "
"of the system's logical CPU cores. Positive values will specify a number of "
"threads to use, while negative values will subtract from the total number of "
"logical CPU cores in the system. For example, on a system with 8 logical CPU "
"cores, adjusting the setting to ``-1`` will use 7 CPU threads for lightmap "
"baking."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:266
msgid "Configuring bake"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:268
msgid "Several more options are present for baking:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:270
msgid ""
"**Bake Extents**: The size of the area affected. This can be edited in the "
"3D editor viewport using the handles. Any object that can have lightmaps "
"baked and is *touching* the bake extents will have lightmaps baked for it, "
"but dynamic object capture will only work within the extents."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:276
msgid "Tweaks"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:278
msgid ""
"**Quality:** Four bake quality modes are provided: Low, Medium, High, and "
"Ultra. Higher quality takes more time, but result in a better-looking "
"lightmap with less noise. The difference is especially noticeable with "
"emissive materials or areas that get little to no direct lighting."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:282
msgid ""
"**Bounces:** The number of bounces to use for indirect lighting. The default "
"value (3) is a good compromise between bake times and quality. Higher values "
"will make light bounce around more times before it stops, which makes "
"indirect lighting look smoother (but also brighter). During the initial "
"lighting iteration work, it is recommended to decrease the number of bounces "
"to 1 to speed up baking. Remember that your scene will be darker when "
"decreasing the number of bounces."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:288
msgid ""
"**Use Denoiser:** If enabled, uses OpenImageDenoise to make the lightmap "
"significantly less noisy. This increases bake times and can occasionally "
"introduce artifacts, but the result is often worth it."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:291
msgid ""
"**Use Hdr:** If disabled, lightmaps are smaller on disk, but they won't be "
"able to capture any light over white (1.0). This will result in visible "
"clipping if you have bright lights in your scene. When HDR is disabled, "
"banding may also be visible in the lightmap."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:295
msgid ""
"**Use Color:** If disabled, lightmaps are smaller on disk, but the lightmap "
"won't be able to store colored lighting. When baking indirect light only, "
"the difference may be barely visible since indirect light is generally not "
"highly saturated. However, when baking both direct and indirect lighting "
"using the **All** bake mode on a light, this will turn colored lighting into "
"grayscale lighting. This can be disabled together with HDR to get the "
"smallest possible lightmap file at a given resolution."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:302
msgid ""
"**Bias:** The offset value to use for shadows in 3D units. You generally "
"don't need to change this value, except if you run into issues with light "
"bleeding or dark spots in your lightmap after baking. This setting does not "
"affect real-time shadows casted on baked surfaces."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:306
msgid ""
"**Default Texels Per Unit:** For meshes that do not specify their own "
"lightmap texel density, this will be used as the value. Higher values result "
"in *lower-resolution* lightmaps, which result in faster bake times and lower "
"file sizes at the cost of blurrier indirect lighting and shadows."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:312
msgid "Atlas"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:314
msgid ""
"**Generate:** If enabled, a texture atlas will be generated for the "
"lightmap. This results in more efficient rendering, but is only compatible "
"with the GLES3 rendering backend. Disable this setting if your project is "
"allowed to fall back to GLES2. (This is not the case by default and must be "
"enabled in the Project Settings.) *This setting is ignored when the project "
"is configured to use GLES2 by default.*"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:320
msgid ""
"**Max Size:** The maximum size of the atlas in pixels. Higher values result "
"in a more efficient atlas, but are less compatible with old/low-end "
"hardware. If in doubt, leave this setting on its default value (4096)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:325
#: ../../docs/tutorials/audio/audio_buses.rst:114
#: ../../docs/tutorials/rendering/viewports.rst:133
msgid "Capture"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:327
msgid ""
"**Enabled:** This enables probe capture so that dynamic objects can "
"*receive* indirect lighting. Regardless of this setting's value, dynamic "
"objects will not be able to *contribute* indirect lighting to the scene. "
"This is a limitation of lightmaps."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:330
msgid ""
"**Cell Size:** The distance between lightmap probes in 3D units. Higher "
"values result in more sparse probe placement, which decreases bake times and "
"file size at the cost of lower lighting accuracy for dynamic objects."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:333
msgid ""
"**Quality:** The lightmap probe generation quality. Higher values result in "
"more accurate lighting, but take longer to bake. This setting does not "
"affect the *density* of the lightmap probes, only their quality."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:336
msgid ""
"**Propagation:** Similar to :ref:`GIProbe <doc_gi_probes>`'s Propagation "
"property. Higher values result in brighter and more diffuse indirect "
"lighting for dynamic objects. Adjust this value depending on your scene to "
"make dynamic objects better fit with static baked lighting."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:342
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:576
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:228
msgid "Data"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:344
msgid ""
"**Light Data**: Contains the light baked data after baking. Textures are "
"saved to disk, but this also contains the capture data for dynamic objects, "
"which can be heavy. If you are using a scene in ``.tscn`` format, you should "
"save this resource to an external binary ``.lmbake`` file to avoid bloating "
"the ``.tscn`` scene with binary data encoded in Base64."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:350
msgid ""
"The Light Data resource can be edited to adjust two additional properties:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:352
msgid ""
"**Energy:** Adjusts the lightmap's brightness. Higher values result in "
"brighter lightmaps. This can be adjusted at run-time for short-lived dynamic "
"effects such as thunderstorms. However, keep in mind that it will affect "
"*all* baked lights."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:355
msgid ""
"**Interior:** If enabled, dynamic objects will not make use of environment "
"lighting and will use light probes for ambient lighting exclusively. If "
"disabled, both environment lighting and light probes are used to light up "
"dynamic objects."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:361
msgid ""
"The generated EXR file can be viewed and even edited using an image editor "
"to perform post-processing if needed. However, keep in mind that changes to "
"the EXR file will be lost when baking lightmaps again."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:366
msgid "Dynamic objects"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:368
msgid ""
"In other engines or lightmapper implementations, you are generally required "
"to manually place small objects called \"lightprobes\" all around the level "
"to generate *capture* data. This is then used to transfer the light to "
"dynamic objects that move around the scene."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:373
msgid ""
"However, this implementation of lightmapping uses a different method. The "
"process is automatic, so you don't have to do anything. Just move your "
"objects around, and they will be lit accordingly. Of course, you have to "
"make sure you set up your scene bounds accordingly or it won't work."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:4
msgid "Environment and post-processing"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:6
msgid ""
"Godot 3 provides a redesigned Environment resource, as well as a new post-"
"processing system with many available effects right out of the box."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:12
msgid ""
"The Environment resource stores all the information required for controlling "
"rendering environment. This includes sky, ambient lighting, tone mapping, "
"effects, and adjustments. By itself it does nothing, but it becomes enabled "
"once used in one of the following locations in order of priority:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:18
msgid "Camera node"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:20
msgid ""
"An Environment can be set to a camera. It will have priority over any other "
"setting."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:24
msgid ""
"This is mostly useful when wanting to override an existing environment, but "
"in general it's a better idea to use the option below."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:28
msgid "WorldEnvironment node"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:30
msgid ""
"The WorldEnvironment node can be added to any scene, but only one can exist "
"per active scene tree. Adding more than one will result in a warning."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:35
msgid ""
"Any Environment added has higher priority than the default Environment "
"(explained below). This means it can be overridden on a per-scene basis, "
"which makes it quite useful."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:42
msgid ""
"A default environment can be set, which acts as a fallback when no "
"Environment was set to a Camera or WorldEnvironment. Just head to Project "
"Settings -> Rendering -> Environment:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:48
msgid ""
"New projects created from the Project Manager come with a default "
"environment (``default_env.tres``). If one needs to be created, save it to "
"disk before referencing it here."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:53
msgid "Environment options"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:55
msgid ""
"Following is a detailed description of all environment options and how they "
"are intended to be used."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:61
msgid ""
"The Background section contains settings on how to fill the background "
"(parts of the screen where objects were not drawn). In Godot 3.0, the "
"background not only serves the purpose of displaying an image or color, it "
"can also change how objects are affected by ambient and reflected light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:68
msgid "There are many ways to set the background:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:70
msgid ""
"**Clear Color** uses the default clear color defined by the project. The "
"background will be a constant color."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:71
msgid "**Custom Color** is like Clear Color, but with a custom color value."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:72
msgid ""
"**Sky** lets you define a panorama sky (a 360 degree sphere texture) or a "
"procedural sky (a simple sky featuring a gradient and an optional sun). "
"Objects will reflect it and absorb ambient light from it."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:73
msgid ""
"**Color+Sky** lets you define a sky (as above), but uses a constant color "
"value for drawing the background. The sky will only be used for reflection "
"and ambient light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:76
msgid "Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:78
msgid ""
"Ambient (as defined here) is a type of light that affects every piece of "
"geometry with the same intensity. It is global and independent of lights "
"that might be added to the scene."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:82
msgid ""
"There are two types of ambient light: the *Ambient Color* (which is a "
"constant color multiplied by the material albedo) and then one obtained from "
"the *Sky* (as described before, but a sky needs to be set as background for "
"this to be enabled)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:89
msgid ""
"When a *Sky* is set as background, it's possible to blend between ambient "
"color and sky using the **Sky Contribution** setting (this value is 1.0 by "
"default for convenience, so only the sky affects objects)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:93
msgid "Here is a comparison of how different ambient light affects a scene:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:97
msgid ""
"Finally, there is an **Energy** setting, which is a multiplier. It's useful "
"when working with HDR."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:100
msgid ""
"In general, ambient light should only be used for simple scenes, large "
"exteriors, or for performance reasons (ambient light is cheap), as it does "
"not provide the best lighting quality. It's better to generate ambient light "
"from ReflectionProbe or GIProbe, which will more faithfully simulate how "
"indirect light propagates. Below is a comparison, in terms of quality, "
"between using a flat ambient color and a GIProbe:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:109
msgid ""
"Using one of the methods described above, objects get constant ambient "
"lighting replaced by ambient light from the probes."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:113
#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:87
msgid "Fog"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:115
msgid ""
"Fog, as in real life, makes distant objects fade away into an uniform color. "
"The physical effect is actually pretty complex, but Godot provides a good "
"approximation. There are two kinds of fog in Godot:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:119
msgid ""
"**Depth Fog:** This one is applied based on the distance from the camera."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:120
msgid ""
"**Height Fog:** This one is applied to any objects below (or above) a "
"certain height, regardless of the distance from the camera."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:124
msgid ""
"Both of these fog types can have their curve tweaked, making their "
"transition more or less sharp."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:126
msgid "Two properties can be tweaked to make the fog effect more interesting:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:128
msgid ""
"The first is **Sun Amount**, which makes use of the Sun Color property of "
"the fog. When looking towards a directional light (usually a sun), the color "
"of the fog will be changed, simulating the sunlight passing through the fog."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:132
msgid ""
"The second is **Transmit Enabled** which simulates more realistic light "
"transmittance. In practice, it makes light stand out more across the fog."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:138
msgid "Tonemap"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:142
msgid ""
"Selects the tonemapping curve that will be applied to the scene, from a list "
"of standard curves used in the film and game industry. Tonemapping operators "
"other than Linear are used to make light and dark areas more homogeneous, "
"while also avoiding clipping of bright highlights."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:147
msgid "The tone mapping options are:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:149
msgid "**Mode:** The tone mapping mode to use."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:151
msgid ""
"**Linear:** The default tonemapping mode. This is the fastest and simplest "
"tonemapping operator, but it causes bright lighting to look blown out, with "
"noticeable clipping in the output colors."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:154
msgid ""
"**Reinhardt:** Performs a variation on rendered pixels' colors by this "
"formula: ``color = color / (1 + color)``. This avoids clipping bright "
"highlights, but the resulting image can look a bit dull."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:157
msgid ""
"**Filmic:** This avoids clipping bright highlights, with a resulting image "
"that usually looks more vivid than Reinhardt."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:159
msgid ""
"**ACES Fitted:** Academy Color Encoding System tonemapper. ACES Fitted is "
"slightly more expensive than other options, but it handles bright lighting "
"in a more realistic fashion by desaturating it as it becomes brighter. ACES "
"typically has a more contrasted output compared to Reinhardt and Filmic. "
"ACES is the recommended option when aiming for photorealistic visuals."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:164
msgid ""
"**ACES:** *Deprecated (will be removed in Godot 4.0).* Behaves like ACES, "
"but doesn't desaturate lighting as it becomes brighter (which is less "
"realistic). It's recommended to use ACES Fitted instead of ACES."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:168
msgid ""
"**Exposure:** Tone mapping exposure which simulates amount of light received "
"over time (default: ``1.0``). Higher values result in an overall brighter "
"appearance. If the scene appears too dark as a result of a tonemapping "
"operator or whitepoint change, try increasing this value slightly."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:173
msgid ""
"**White:** Tone mapping whitepoint, which simulates where in the scale white "
"is located (default: ``1.0``). For photorealistic lighting, recommended "
"values are between ``6.0`` and ``8.0``. Higher values result in less blown "
"out highlights, but make the scene appear slightly darker as a whole."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:179
msgid "Auto Exposure (HDR)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:183
msgid ""
"Even though, in most cases, lighting and texturing are heavily artist "
"controlled, Godot supports a simple high dynamic range implementation with "
"the auto exposure mechanism. This is generally used for the sake of realism "
"when combining interior areas with low light and outdoors. Auto exposure "
"simulates the camera (or eye) in an effort to adapt between light and dark "
"locations and their different amounts of light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:192
msgid ""
"The simplest way to use auto exposure is to make sure outdoor lights (or "
"other strong lights) have energy beyond 1.0. This is done by tweaking their "
"**Energy** multiplier (on the Light itself). To make it consistent, the "
"**Sky** usually needs to use the energy multiplier too, to match with the "
"directional light. Normally, values between 3.0 and 6.0 are enough to "
"simulate indoor-outdoor conditions."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:198
msgid ""
"By combining Auto Exposure with *Glow* post processing (more on that below), "
"pixels that go over the tonemap **White** will bleed to the glow buffer, "
"creating the typical bloom effect in photography."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:204
msgid ""
"The user-controllable values in the Auto Exposure section come with sensible "
"defaults, but you can still tweak them:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:209
msgid ""
"**Scale:** Value to scale the lighting. Brighter values produce brighter "
"images, smaller ones produce darker ones."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:210
msgid ""
"**Min Luma:** Minimum luminance that auto exposure will aim to adjust for. "
"Luminance is the average of the light in all the pixels of the screen."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:211
msgid ""
"**Max Luma:** Maximum luminance that auto exposure will aim to adjust for."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:212
msgid ""
"**Speed:** Speed at which luminance corrects itself. The higher the value, "
"the faster correction happens."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:215
msgid "Mid- and post-processing effects"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:217
msgid ""
"A large amount of widely-used mid- and post-processing effects are supported "
"in the Environment."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:221
msgid "Screen-Space Reflections (SSR)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:225
msgid ""
"While Godot supports three sources of reflection data (Sky, ReflectionProbe, "
"and GIProbe), they may not provide enough detail for all situations. "
"Scenarios where Screen Space Reflections make the most sense are when "
"objects are in contact with each other (object over floor, over a table, "
"floating on water, etc)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:232
msgid ""
"The other advantage (even if only enabled to a minimum), is that it works in "
"real-time (while the other types of reflections are pre-computed). This can "
"be used to make characters, cars, etc. reflect on surrounding surfaces when "
"moving around."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:236
msgid ""
"A few user-controlled parameters are available to better tweak the technique:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:238
msgid ""
"**Max Steps** determines the length of the reflection. The bigger this "
"number, the more costly it is to compute."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:239
msgid ""
"**Fade In** allows adjusting the fade-in curve, which is useful to make the "
"contact area softer."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:240
msgid ""
"**Fade Out** allows adjusting the fade-out curve, so the step limit fades "
"out softly."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:241
msgid ""
"**Depth Tolerance** can be used for screen-space-ray hit tolerance to gaps. "
"The bigger the value, the more gaps will be ignored."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:242
msgid ""
"**Roughness** will apply a screen-space blur to approximate roughness in "
"objects with this material characteristic."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:244
msgid ""
"Keep in mind that screen-space-reflections only work for reflecting opaque "
"geometry. Transparent materials won't be reflected, as they don't write to "
"the depth buffer. This also applies to shaders that use ``SCREEN_TEXTURE`` "
"or ``DEPTH_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:249
msgid "Screen-Space Ambient Occlusion (SSAO)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:253
msgid ""
"As mentioned in the **Ambient** section, areas where light from light nodes "
"does not reach (either because it's outside the radius or shadowed) are lit "
"with ambient light. Godot can simulate this using GIProbe, ReflectionProbe, "
"the Sky, or a constant ambient color. The problem, however, is that all the "
"methods proposed previously act more on a larger scale (large regions) than "
"at the smaller geometry level."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:260
msgid ""
"Constant ambient color and Sky are the same everywhere, while GI and "
"Reflection probes have more local detail, but not enough to simulate "
"situations where light is not able to fill inside hollow or concave features."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:264
msgid ""
"This can be simulated with Screen Space Ambient Occlusion. As you can see in "
"the image below, its purpose is to make sure concave areas are darker, "
"simulating a narrower path for the light to enter:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:270
msgid ""
"It is a common mistake to enable this effect, turn on a light, and not be "
"able to appreciate it. This is because SSAO only acts on *ambient* light, "
"not direct light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:273
msgid ""
"This is why, in the image above, the effect is less noticeable under the "
"direct light (on the left). If you want to force SSAO to work with direct "
"light too, use the **Light Affect** parameter (even though this is not "
"correct, some artists like how it looks)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:277
msgid ""
"SSAO looks best when combined with a real source of indirect light, like "
"GIProbe:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:281
msgid "Tweaking SSAO is possible with several parameters:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:285
msgid ""
"**Radius/Intensity:** To control the radius or intensity of the occlusion, "
"these two parameters are available. Radius is in world (Metric) units."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:286
msgid ""
"**Radius2/Intensity2:** A Secondary radius/intensity can be used. Combining "
"a large and a small radius AO generally works well."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:287
msgid ""
"**Bias:** This can be tweaked to solve self occlusion, though the default "
"generally works well enough."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:288
msgid ""
"**Light Affect:** SSAO only affects ambient light, but increasing this "
"slider can make it also affect direct light. Some artists prefer this effect."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:289
msgid ""
"**Ao Channel Affect:** If a value of zero is used, only the material's AO "
"texture will be used for ambient occlusion; SSAO will not be applied. Values "
"greater than 0 multiply the AO texture by the SSAO effect to varying "
"degrees. This does not affect materials without an AO texture."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:290
msgid ""
"**Quality:** Depending on quality, SSAO will take more samples over a sphere "
"for every pixel. High quality only works well on modern GPUs."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:291
msgid ""
"**Blur:** Type of blur kernel used. The 1x1 kernel is a simple blur that "
"preserves local detail better, but is not as efficient (generally works "
"better with the high quality setting above), while 3x3 will soften the image "
"better (with a bit of dithering-like effect), but does not preserve local "
"detail as well."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:292
msgid ""
"**Edge Sharpness**: This can be used to preserve the sharpness of edges "
"(avoids areas without AO on creases)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:295
msgid "Depth of Field / Far Blur"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:297
msgid ""
"This effect simulates focal distance on high end cameras. It blurs objects "
"behind a given range. It has an initial **Distance** with a **Transition** "
"region (in world units):"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:303
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:315
msgid ""
"The **Amount** parameter controls the amount of blur. For larger blurs, "
"tweaking the **Quality** may be needed in order to avoid artifacts."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:307
msgid "Depth of Field / Near Blur"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:309
msgid ""
"This effect simulates focal distance on high end cameras. It blurs objects "
"close to the camera (acts in the opposite direction as far blur). It has an "
"initial **Distance** with a **Transition** region (in world units):"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:318
msgid ""
"It is common to use both blurs together to focus the viewer's attention on a "
"given object:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:324
msgid "Glow"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:326
msgid ""
"In photography and film, when light amount exceeds the maximum supported by "
"the media (be it analog or digital), it generally bleeds outwards to darker "
"regions of the image. This is simulated in Godot with the **Glow** effect."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:332
msgid ""
"By default, even if the effect is enabled, it will be weak or invisible. One "
"of two conditions need to happen for it to actually show:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:335
msgid ""
"The light in a pixel surpasses the **HDR Threshold** (where 0 is all light "
"surpasses it, and 1.0 is light over the tonemapper **White** value). "
"Normally, this value is expected to be at 1.0, but it can be lowered to "
"allow more light to bleed. There is also an extra parameter, **HDR Scale**, "
"that allows scaling (making brighter or darker) the light surpassing the "
"threshold."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:339
msgid ""
"The Bloom effect has a value set greater than 0. As it increases, it sends "
"the whole screen to the glow processor at higher amounts."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:343
msgid "Both will cause the light to start bleeding out of the brighter areas."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:345
msgid "Once glow is visible, it can be controlled with a few extra parameters:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:347
msgid ""
"**Intensity** is an overall scale for the effect, it can be made stronger or "
"weaker (0.0 removes it)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:348
msgid ""
"**Strength** is how strong the gaussian filter kernel is processed. Greater "
"values make the filter saturate and expand outwards. In general, changing "
"this is not needed, as the size can be more efficiently adjusted with the "
"**Levels**."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:350
msgid "The **Blend Mode** of the effect can also be changed:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:352
msgid ""
"**Additive** is the strongest one, as it only adds the glow effect over the "
"image with no blending involved. In general, it's too strong to be used, but "
"can look good with low intensity Bloom (produces a dream-like effect)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:353
msgid ""
"**Screen** ensures glow never brightens more than itself and it works great "
"as an all around."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:354
msgid ""
"**Softlight** is the default and weakest one, producing only a subtle color "
"disturbance around the objects. This mode works best on dark scenes."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:355
msgid ""
"**Replace** can be used to blur the whole screen or debug the effect. It "
"only shows the glow effect without the image below."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:357
msgid ""
"To change the glow effect size and shape, Godot provides **Levels**. Smaller "
"levels are strong glows that appear around objects, while large levels are "
"hazy glows covering the whole screen:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:363
msgid ""
"The real strength of this system, though, is to combine levels to create "
"more interesting glow patterns:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:368
msgid ""
"Finally, as the highest layers are created by stretching small blurred "
"images, it is possible that some blockiness may be visible. Enabling "
"**Bicubic Upscaling** gets rids of it, at a minimal performance cost. *Note "
"that this is effective only when using the GLES3 backend.*"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:376
msgid "Adjustments"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:378
msgid ""
"At the end of processing, Godot offers the possibility to do some standard "
"image adjustments."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:383
msgid ""
"The first one is being able to change the typical Brightness, Contrast, and "
"Saturation:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:388
msgid ""
"The second is by supplying a color correction gradient. A regular black to "
"white gradient like the following one will produce no effect:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:393
msgid ""
"But creating custom ones will allow to map each channel to a different color:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:4
msgid "High dynamic range lighting"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:9
msgid ""
"Normally, an artist does all the 3D modelling, then all the texturing, looks "
"at their awesome looking model in the 3D DCC and says \"looks fantastic, "
"ready for integration!\" then goes into the game, lighting is setup and the "
"game runs."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:14
msgid ""
"So at what point does all this \"HDR\" business come into play? To "
"understand the answer, we need to look at how displays behave."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:17
msgid ""
"Your display outputs linear light ratios from some maximum to some minimum "
"intensity. Modern game engines perform complex math on linear light values "
"in their respective scenes. So what's the problem?"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:21
msgid ""
"The display has a limited range of intensity, depending on the display type. "
"The game engine renders to an unlimited range of intensity values, however. "
"While \"maximum intensity\" means something to an sRGB display, it has no "
"bearing in the game engine; there is only a potentially infinitely wide "
"range of intensity values generated per frame of rendering."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:27
msgid ""
"This means that some transformation of the scene light intensity, also known "
"as *scene-referred* light ratios, need to be transformed and mapped to fit "
"within the particular output range of the chosen display. This can be most "
"easily understood if we consider virtually photographing our game engine "
"scene through a virtual camera. Here, our virtual camera would apply a "
"particular camera rendering transform to the scene data, and the output "
"would be ready for display on a particular display type."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:37
msgid ""
"Godot does not support high dynamic range *output* yet. It can only perform "
"lighting in HDR and tonemap the result to a low dynamic range image."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:40
msgid ""
"For advanced users, it is still possible to get a non-tonemapped image of "
"the viewport with full HDR data, which can then be saved to an OpenEXR file."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:44
msgid "Computer displays"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:46
msgid ""
"Almost all displays require a nonlinear encoding for the code values sent to "
"them. The display in turn, using its unique transfer characteristic, "
"\"decodes\" the code value into linear light ratios of output, and projects "
"the ratios out of the uniquely colored lights at each reddish, greenish, and "
"blueish emission site."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:52
msgid ""
"For a majority of computer displays, the specifications of the display are "
"outlined in accordance with IEC 61966-2-1, also known as the 1996 sRGB "
"specification. This specification outlines how an sRGB display is to behave, "
"including the color of the lights in the LED pixels as well as the transfer "
"characteristics of the input (OETF) and output (EOTF)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:58
msgid ""
"Not all displays use the same OETF and EOTF as a computer display. For "
"example, television broadcast displays use the BT.1886 EOTF. However, Godot "
"currently only supports sRGB displays."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:62
msgid ""
"The sRGB standard is based around the nonlinear relationship between the "
"current to light output of common desktop computing CRT displays."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:67
msgid ""
"The mathematics of a scene-referred model require that we multiply the scene "
"by different values to adjust the intensities and exposure to different "
"light ranges. The transfer function of the display can't appropriately "
"render the wider dynamic range of the game engine's scene output using the "
"simple transfer function of the display. A more complex approach to encoding "
"is required."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:75
msgid "Scene linear & asset pipelines"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:77
msgid ""
"Working in scene-linear sRGB is not as simple as just pressing a switch. "
"First, imported image assets must be converted to linear light ratios on "
"import. Even when linearized, those assets may not be perfectly well-suited "
"for use as textures, depending on how they were generated."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:82
msgid "There are two ways to do this:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:85
msgid "sRGB transfer function to display linear ratios on image import"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:87
msgid ""
"This is the easiest method of using sRGB assets, but it's not the most "
"ideal. One issue with this is loss of quality. Using 8 bits per channel to "
"represent linear light ratios is not sufficient to quantize the values "
"correctly. These textures may also be compressed later, which can exacerbate "
"the problem."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:93
msgid "Hardware sRGB transfer function to display linear conversion"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:95
msgid ""
"The GPU will do the conversion after reading the texel using floating-point. "
"This works fine on PC and consoles, but most mobile devices don't support "
"it, or they don't support it on compressed texture formats (iOS for example)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:100
msgid "Scene linear to display-referred nonlinear"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:102
msgid ""
"After all the rendering is done, the scene linear render requires "
"transforming to a suitable output such as an sRGB display. To do this, "
"enable sRGB conversion in the current :ref:`Environment <class_Environment>` "
"(more on that below)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:106
msgid ""
"Keep in mind that the **sRGB -> Display Linear** and **Display Linear -> "
"sRGB** conversions must always be **both** enabled. Failing to enable one of "
"them will result in horrible visuals suitable only for avant-garde "
"experimental indie games."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:112
msgid "Parameters of HDR"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:114
msgid ""
"HDR settings can be found in the :ref:`Environment <class_Environment>` "
"resource. Most of the time, these are found inside a :ref:`WorldEnvironment "
"<class_WorldEnvironment>` node or set in a Camera node. For more "
"information, see :ref:`doc_environment_and_post_processing`."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:4
msgid "Using GridMaps"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:9
msgid ""
":ref:`Gridmaps <class_GridMap>` are a tool for creating 3D game levels, "
"similar to the way :ref:`TileMap <doc_using_tilemaps>` works in 2D. You "
"start with a predefined collection of 3D meshes (a :ref:`class_MeshLibrary`) "
"that can be placed on a grid, as if you were building a level with an "
"unlimited amount of Lego blocks."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:15
msgid ""
"Collisions and navigation can also be added to the meshes, just like you "
"would do with the tiles of a tilemap."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:19
msgid "Example project"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:21
msgid ""
"To learn how GridMaps work, start by downloading the sample project: :"
"download:`gridmap_demo.zip <files/gridmap_demo.zip>`."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:24
msgid ""
"Unzip this project and add it to the Project Manager using the \"Import\" "
"button."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:28
msgid "Creating a MeshLibrary"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:30
msgid ""
"To begin, you need a :ref:`class_MeshLibrary`, which is a collection of "
"individual meshes that can be used in the gridmap. Open the "
"\"MeshLibrary_Source.tscn\" scene to see an example of how to set up the "
"mesh library."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:36
msgid ""
"As you can see, this scene has a :ref:`class_Spatial` node as its root, and "
"a number of :ref:`class_MeshInstance` node children."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:39
msgid ""
"If you don't need any physics in your scene, then you're done. However, in "
"most cases you'll want to assign collision bodies to the meshes."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:43
msgid "Collisions"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:45
msgid ""
"You can manually assign a :ref:`class_StaticBody` and :ref:"
"`class_CollisionShape` to each mesh. Alternatively, you can use the \"Mesh\" "
"menu to automatically create the collision body based on the mesh data."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:51
msgid ""
"Note that a \"Convex\" collision body will work better for simple meshes. "
"For more complex shapes, select \"Create Trimesh Static Body\". Once each "
"mesh has a physics body and collision shape assigned, your mesh library is "
"ready to be used."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:60
#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:199
#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:2
msgid "Materials"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:62
msgid ""
"Only the materials from within the meshes are used when generating the mesh "
"library. Materials set on the node will be ignored."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:66
msgid "NavigationMeshes"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:68
msgid ""
"Like all mesh instances, MeshLibrary items can be assigned a :ref:"
"`class_NavigationMesh` resource, which can be created manually, or baked as "
"described below."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:71
msgid ""
"To create the NavigationMesh from a MeshLibrary scene export, place a :ref:"
"`class_NavigationMeshInstance` child node below the main MeshInstance for "
"the GridMap item. Add a valid NavigationMesh resource to the "
"NavigationMeshInstance and some source geometry nodes below and bake the "
"NavigationMesh."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:78
msgid ""
"With small grid cells it is often necessary to reduce the NavigationMesh "
"properties for agent radius and region minimum size."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:83
msgid ""
"Nodes below the NavigationMeshInstance are ignored for the MeshLibrary scene "
"export, so additional nodes can be added as source geometry just for baking "
"the navmesh."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:88
msgid ""
"The baked cell size of the NavigationMesh must match the NavigationServer "
"map cell size to properly merge the navigation meshes of different grid "
"cells."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:92
msgid "Exporting the MeshLibrary"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:94
msgid ""
"To export the library, click on Scene -> Convert To.. -> MeshLibrary.., and "
"save it as a resource."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:99
msgid ""
"You can find an already exported MeshLibrary in the project named "
"\"MeshLibrary.tres\"."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:102
msgid "Using GridMap"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:104
msgid ""
"Create a new scene and add a GridMap node. Add the mesh library by dragging "
"the resource file from the FileSystem dock and dropping it in the \"Theme\" "
"property in the Inspector."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:110
msgid ""
"The \"Cell/Size\" property should be set to the size of your meshes. You can "
"leave it at the default value for the demo. Set the \"Center Y\" property to "
"\"Off\"."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:113
msgid ""
"Now you can start designing the level by choosing a tile from the palette "
"and placing it with Left-Click in the editor window. To remove a tile, hold :"
"kbd:`Shift` and use Right-click."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:117
msgid ""
"Click on the \"GridMap\" menu to see options and shortcuts. For example, "
"pressing :kbd:`S` rotates a tile around the y-axis."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:122
msgid ""
"Holding :kbd:`Shift` and dragging with the left mouse button will draw a "
"selection box. You can duplicate or clear the selected area using the "
"respective menu options."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:128
msgid ""
"In the menu, you can also change the axis you're drawing on, as well as "
"shift the drawing plane higher or lower on its axis."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:134
msgid "Using GridMap in code"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:136
msgid ""
"See :ref:`class_GridMap` for details on the node's methods and member "
"variables."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:4
msgid "Using MultiMeshInstance"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:9
msgid ""
"In a normal scenario, you would use a :ref:`MeshInstance "
"<class_MeshInstance>` node to display a 3D mesh like a human model for the "
"main character, but in some cases, you would like to create multiple "
"instances of the same mesh in a scene. You *could* duplicate the same node "
"multiple times and adjust the transforms manually. This may be a tedious "
"process and the result may look mechanical. Also, this method is not "
"conducive to rapid iterations. :ref:`MultiMeshInstance "
"<class_MultiMeshInstance>` is one of the possible solutions to this problem."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:18
msgid ""
"MultiMeshInstance, as the name suggests, creates multiple copies of a "
"MeshInstance over a surface of a specific mesh. An example would be having a "
"tree mesh populate a landscape mesh with trees of random scales and "
"orientations."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:23
msgid "Setting up the nodes"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:25
msgid ""
"The basic setup requires three nodes: the MultiMeshInstance node and two "
"MeshInstance nodes."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:28
msgid ""
"One node is used as the target, the mesh that you want to place multiple "
"meshes on. In the tree example, this would be the landscape."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:31
msgid ""
"The other node is used as the source, the mesh that you want to have "
"duplicated. In the tree case, this would be the tree itself."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:34
msgid ""
"In our example, we would use a :ref:`Spatial <class_Spatial>` node as the "
"root node of the scene. Your scene tree would look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:39
msgid "For simplicity's sake, this tutorial uses built-in primitives."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:41
msgid ""
"Now you have everything ready. Select the MultiMeshInstance node and look at "
"the toolbar, you should see an extra button called ``MultiMesh`` next to "
"``View``. Click it and select *Populate surface* in the dropdown menu. A new "
"window titled *Populate MultiMesh* will pop up."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:51
msgid "MultiMesh settings"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:53
msgid "Below are descriptions of the options."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:56
msgid "Target Surface"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:58
msgid ""
"The mesh used as the target surface on which to place copies of your source "
"mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:62
msgid "Source Mesh"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:64
msgid "The mesh you want duplicated on the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:67
msgid "Mesh Up Axis"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:69
msgid "The axis used as the up axis of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:72
msgid "Random Rotation"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:74
msgid "Randomizing the rotation around the up axis of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:77
msgid "Random Tilt"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:79
msgid "Randomizing the overall rotation of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:82
msgid "Random Scale"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:84
msgid "Randomizing the scale of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:89
msgid ""
"The scale of the source mesh that will be placed over the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:92
msgid "Amount"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:94
msgid "The amount of mesh instances placed over the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:96
msgid ""
"Select the target surface. In the tree case, this should be the landscape "
"node. The source mesh should be the tree node. Adjust the other parameters "
"according to your preference. Press ``Populate`` and multiple copies of the "
"source mesh will be placed over the target mesh. If you are satisfied with "
"the result, you can delete the mesh instance used as the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:102
msgid "The end result should look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:106
msgid ""
"To change the result, repeat the previous steps with different parameters."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:4
msgid "Prototyping levels with CSG"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:6
msgid ""
"CSG stands for **Constructive Solid Geometry**, and is a tool to combine "
"basic shapes or custom meshes to create more complex shapes. In 3D modelling "
"software, CSG is mostly known as \"Boolean Operators\"."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:10
msgid ""
"Level prototyping is one of the main uses of CSG in Godot. This technique "
"allows users to create simple versions of most common shapes by combining "
"primitives. Interior environments can be created by using inverted "
"primitives."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:14
msgid ""
"The CSG nodes in Godot are mainly intended for prototyping. There is no "
"built-in support for UV mapping or editing 3D polygons (though extruded 2D "
"polygons can be used with the CSGPolygon node)."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:18
msgid ""
"If you're looking for an easy to use level design tool for a project, you "
"may want to use `Qodot <https://github.com/Shfty/qodot-plugin>`__ instead. "
"It lets you design levels using `TrenchBroom <https://kristianduske.com/"
"trenchbroom/>`__ and import them in Godot."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:27
msgid "Introduction to CSG nodes"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:29
msgid ""
"Like other features of Godot, CSG is supported in the form of nodes. These "
"are the CSG nodes:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:32
msgid ":ref:`CSGBox <class_CSGBox>`"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:33
msgid ":ref:`CSGCylinder <class_CSGCylinder>` (also supports cone)"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:34
msgid ":ref:`CSGSphere <class_CSGSphere>`"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:35
msgid ":ref:`CSGTorus <class_CSGTorus>`"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:36
msgid ":ref:`CSGPolygon <class_CSGPolygon>`"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:37
msgid ":ref:`CSGMesh <class_CSGMesh>`"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:38
msgid ":ref:`CSGCombiner <class_CSGcombiner>`"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:45
msgid "CSG tools features"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:47
msgid "Every CSG node supports 3 kinds of boolean operations:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:49
msgid ""
"**Union:** Geometry of both primitives is merged, intersecting geometry is "
"removed."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:51
msgid ""
"**Intersection:** Only intersecting geometry remains, the rest is removed."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:52
msgid ""
"**Subtraction:** The second shape is subtracted from the first, leaving a "
"dent with its shape."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:60
msgid "CSGPolygon"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:62
msgid ""
"The :ref:`CSGPolygon <class_CSGPolygon>` node extrude along a Polygon drawn "
"in 2D (in X, Y coordinates) in the following ways:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:65
msgid "**Depth:** Extruded back a given amount."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:66
msgid "**Spin:** Extruded while spinning around its origin."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:67
msgid ""
"**Path:** Extruded along a Path node. This operation is commonly called "
"lofting."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:74
msgid ""
"The **Path** mode must be provided with a :ref:`Path <class_Path>` node to "
"work. In the Path node, draw the path and the polygon in CSGPolygon will "
"extrude along the given path."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:80
msgid "Custom meshes"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:82
msgid ""
"Any mesh can be used for :ref:`CSGMesh <class_CSGMesh>`; the mesh can be "
"modelled in other software and imported into Godot. Multiple materials are "
"supported. There are some restrictions for geometry:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:86
msgid "it must be closed,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:87
msgid "it must not self-intersect,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:88
msgid "it must not contain internal faces,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:89
msgid "every edge must connect to only two other faces."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:94
msgid "CSGCombiner"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:96
msgid ""
"The :ref:`CSGCombiner <class_CSGCombiner>` node is an empty shape used for "
"organization. It will only combine children nodes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:100
msgid "Processing order"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:102
msgid ""
"Every CSG node will first process its children nodes and their operations: "
"union, intersection or subtraction, in tree order, and apply them to itself "
"one after the other."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:106
msgid ""
"In the interest of performance, make sure CSG geometry remains relatively "
"simple, as complex meshes can take a while to process. If adding objects "
"together (such as table and room objects), create them as separate CSG "
"trees. Forcing too many objects in a single tree will eventually start "
"affecting performance. Only use binary operations where you actually need "
"them."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:114
msgid "Prototyping a level"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:116
msgid "We will prototype a room to practice the use of CSG tools."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:118
msgid ""
"Working in **Orthogonal** projection gives a better view when combining the "
"CSG shapes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:121
msgid "Our level will contain these objects:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:123
msgid "a room,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:124
msgid "a bed,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:125
msgid "a lamp,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:126
msgid "a desk,"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:127
msgid "a bookshelf."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:129
msgid "Create a scene with a Spatial node as root node."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:131
msgid ""
"The default lighting of the environment doesn't provide clear shading at "
"some angles. Change the display mode using **Display Overdraw** in the 3D "
"viewport menu, or add a DirectionalLight node to help you see clearly."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:138
msgid ""
"Create a CSGBox and name it ``room``, enable **Invert Faces** and change the "
"dimensions of your room."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:145
msgid "Next, create a CSGCombiner and name it ``desk``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:147
msgid "A desk has one surface and 4 legs:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:149
msgid ""
"Create 1 CSGBox children node in **Union** mode for the surface and adjust "
"the dimensions."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:151
msgid ""
"Create 4 CSGBox children nodes in **Union** mode for the legs and adjust the "
"dimensions."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:154
msgid "Adjust their placement to resemble a desk."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:158
msgid ""
"CSG nodes inside a CSGCombiner will only process their operation within the "
"combiner. Therefore, CSGCombiners are used to organize CSG nodes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:162
msgid "Create a CSGCombiner and name it ``bed``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:164
msgid ""
"Our bed consists of 3 parts: the bed, the mattress and a pillow. Create a "
"CSGBox and adjust its dimension for the bed. Create another CSGBox and "
"adjust its dimension for the mattress."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:170
msgid ""
"We will create another CSGCombiner named ``pillow`` as the child of  "
"``bed``. The scene tree should look like this:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:175
msgid ""
"We will combine 3 CSGSphere nodes in **Union** mode to form a pillow. Scale "
"the Y axis of the spheres and enable **Smooth Faces**."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:180
msgid ""
"Select the ``pillow`` node and switch the mode to **Subtraction**; the "
"combined spheres will cut a hole into the mattress."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:185
msgid ""
"Try to re-parent the ``pillow`` node to the root ``Spatial`` node; the hole "
"will disappear."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:188
msgid ""
"This is to illustrate the effect of CSG processing order. Since the root "
"node is not a CSG node, the CSGCombiner nodes are the end of the operations; "
"this shows the use of CSGCombiner to organize the CSG scene."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:193
msgid ""
"Undo the re-parent after observing the effect. The bed you've built should "
"look like this:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:198
msgid "Create a CSGCombiner and name it ``lamp``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:200
msgid ""
"A lamp consists of 3 parts: the stand, the pole and the lampshade. Create a "
"CSGCylinder, enable the **Cone** option and make it the stand. Create "
"another CSGCylinder and adjust the dimensions to use it as a pole."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:206
msgid ""
"We will use a CSGPolygon for the lampshade. Use the **Spin** mode for the "
"CSGPolygon and draw a `trapezoid <https://en.wikipedia.org/wiki/Trapezoid>`_ "
"while in **Front View** (numeric keypad 1); this shape will extrude around "
"the origin and form the lampshade."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:217
msgid "Adjust the placement of the 3 parts to make it look like a lamp."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:221
msgid "Create a CSGCombiner and name it ``bookshelf``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:223
msgid ""
"We will use 3 CSGBox nodes for the bookshelf. Create a CSGBox and adjust its "
"dimensions; this will be the size of the bookshelf."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:228
msgid ""
"Duplicate the CSGBox and shorten the dimensions of each axis and change the "
"mode to **Subtraction**."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:235
msgid ""
"You've almost built a shelf. Create one more CSGBox for dividing the shelf "
"into two levels."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:240
msgid ""
"Position your furniture in your room as you like and your scene should look "
"this:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:245
msgid ""
"You've successfully prototyped a room level with the CSG tools in Godot. CSG "
"tools can be used for designing all kinds of levels, such as a maze or a "
"city; explore its limitations when designing your game."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:250
msgid "Using prototype textures"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:252
msgid ""
"Godot's :ref:`doc_spatial_material` supports *triplanar mapping*, which can "
"be used to automatically apply a texture to arbitrary objects without "
"distortion. This is handy when using CSG as Godot doesn't support editing UV "
"maps on CSG nodes yet. Triplanar mapping is relatively slow, which usually "
"restricts its usage to organic surfaces like terrain. Still, when "
"prototyping, it can be used to quickly apply textures to CSG-based levels."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:259
msgid ""
"If you need some textures for prototyping, Kenney made a `set of CC0-"
"licensed prototype textures <https://kenney.nl/assets/prototype-textures>`__."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:262
msgid "There are two ways to apply a material to a CSG node:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:264
msgid ""
"Applying it to a CSGCombiner node as a material override (**Geometry > "
"Material Override** in the Inspector). This will affect its children "
"automatically, but will make it impossible to change the material in "
"individual children."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:268
msgid ""
"Applying a material to individual nodes (**Material** in the Inspector). "
"This way, each CSG node can have its own appearance. Subtractive CSG nodes "
"will apply their material to the nodes they're \"digging\" into."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:272
msgid ""
"To apply triplanar mapping to a CSG node, select it, go to the Inspector, "
"click the **[empty]** text next to **Material Override** (or **Material** "
"for individual CSG nodes). Choose **New SpatialMaterial**. Click the newly "
"created material's icon to edit it. Unfold the **Albedo** section and load a "
"texture into the **Texture** property. Now, unfold the **Uv1** section and "
"check **Triplanar**. You can change the texture offset and scale on each "
"axis by playing with the **Scale** and **Offset** properties just above. "
"Higher values in the **Scale** property will cause the texture to repeat "
"more often."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:281
msgid ""
"You can copy a SpatialMaterial to reuse it across CSG nodes. To do so, click "
"the dropdown arrow next to a material property in the Inspector and choose "
"**Copy**. To paste it, select the node you'd like to apply the material "
"onto, click the dropdown arrow next to its material property then choose "
"**Paste**."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:4
msgid "Procedural geometry"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:6
msgid ""
"There are many ways to procedurally generate geometry in Godot. In this "
"tutorial series we will explore a few of them. Each technique has its own "
"benefits and drawbacks, so it is best to understand each one and how it can "
"be useful in a given situation."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:20
msgid "What is geometry?"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:22
msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:26
msgid "What is a Mesh?"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:28
msgid ""
"Many things in Godot have mesh in their name: the :ref:`Mesh <class_Mesh>`, "
"the :ref:`ArrayMesh <class_ArrayMesh>`, the :ref:`MeshInstance "
"<class_MeshInstance>`, the :ref:`MultiMesh <class_MultiMesh>`, and the :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. While they are all related, "
"they have slightly different uses."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:32
msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstances to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:38
msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance. MultiMeshInstances draw meshes "
"thousands of times very cheaply by taking advantage of hardware instancing. "
"The drawback with using a MultiMeshInstance is that each of your mesh's "
"surfaces are limited to one material for all instances. It uses an instance "
"array to store different colors and transformations for each instance, but "
"all the instances of each surface use the same material."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:46
msgid "What a Mesh is"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:48
msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`VisualServer <class_VisualServer>`, but with ArrayMeshes, the user can "
"construct a Mesh manually by passing in an array containing the surface "
"information."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:54
msgid "Surfaces"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:56
msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance using the :"
"ref:`material_override <class_GeometryInstance_property_material_override>` "
"property."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:60
msgid "Surface array"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:62
msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PoolVector3Array <class_PoolVector3Array>` of vertex normals. See :"
"ref:`Mesh.ArrayType <enum_Mesh_ArrayType>` for more information."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:67
msgid ""
"The surface array can be indexed or non-indexed. Creating a non-indexed "
"array is as easy as not assigning an array at the index ``ArrayMesh."
"ARRAY_INDEX``. A non-indexed array stores unique vertex information for "
"every triangle, meaning that when two triangles share a vertex, the vertex "
"is duplicated in the array. An indexed surface array only stores vertex "
"information for each unique vertex and then also stores an array of indices "
"which maps out how to construct the triangles from the vertex array. In "
"general, using an indexed array is faster, but it means you have to share "
"vertex data between triangles, which is not always desired (e.g. when you "
"want per-face normals)."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:78
msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:82
#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:79
#: ../../docs/development/file_formats/tscn.rst:327
msgid "ArrayMesh"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:84
msgid ""
"The ArrayMesh resource extends Mesh to add a few different quality of life "
"functions and, most importantly, the ability to construct a Mesh surface "
"through scripting."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:87
msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:90
msgid "MeshDataTool"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:92
msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:95
msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:98
msgid "SurfaceTool"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:100
msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:102
msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:105
msgid "ImmediateGeometry"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:107
msgid ""
"ImmediateGeometry is a node that uses an immediate mode style interface "
"(like SurfaceTool) to draw objects. The difference between ImmediateGeometry "
"and the SurfaceTool is that ImmediateGeometry is a node itself that can be "
"added to the scene tree and is drawn directly from the code, while the "
"SurfaceTool generates a Mesh that needs to be added to a MeshInstance to be "
"seen."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:112
msgid ""
"ImmediateGeometry is useful for prototyping because of its straightforward "
"API, but it is slow because the geometry is rebuilt every frame. It is most "
"useful for adding simple geometry for visual debugging (e.g. by drawing "
"lines to visualize physics raycasts etc.)."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:116
msgid ""
"For more information about ImmediateGeometry, please see the :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:119
msgid "Which one should I use?"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:121
msgid ""
"Which approach you use depends on what you are trying to do and what kind of "
"procedure you are comfortable with."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:123
msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:125
msgid ""
"Using an ArrayMesh is slightly faster than using a SurfaceTool, but the API "
"is a little more challenging. Additionally, SurfaceTool has a few quality of "
"life methods such as ``generate_normals()`` and ``index()``."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:128
msgid ""
"ImmediateGeometry regenerates the mesh every frame, so it is much slower "
"than ArrayMesh or SurfaceTool. However, if you need the geometry to change "
"every frame anyway, it provides a much easier interface that may even be a "
"little faster than generating an ArrayMesh every frame."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/index.rst:132
msgid ""
"The MeshDataTool is not fast, but it gives you access to all kinds of "
"properties of the mesh that you don't get with the others (edges, faces, "
"etc.). It is incredibly useful when you need that sort of data to transform "
"the mesh, but it is not a good idea to use it if that extra information is "
"not needed. The MeshDataTool is best used if you are going to be using an "
"algorithm that requires access to the face or edge array."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:4
msgid "Using the ArrayMesh"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:6
msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:8
msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:11
msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:15
msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Pool**Array`` (e.g. PoolVector3Array, "
"PoolIntArray, etc.) for each type of information that will be used to build "
"the surface."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:19
msgid ""
"The possible elements of ``arrays`` are listed below, together with the "
"position they must have within ``arrays``. See also :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>`."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:29
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:464
msgid "Index"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:30
msgid "Mesh.ArrayType Enum"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:31
msgid "Array type"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:33
#: ../../docs/tutorials/io/binary_serialization_api.rst:31
msgid "0"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:34
msgid "``ARRAY_VERTEX``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:35
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>` or :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:37
#: ../../docs/tutorials/io/binary_serialization_api.rst:33
#: ../../docs/tutorials/io/binary_serialization_api.rst:419
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:49
msgid "1"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:38
msgid "``ARRAY_NORMAL``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:39
msgid ":ref:`PoolVector3Array <class_PoolVector3Array>`"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:41
#: ../../docs/tutorials/io/binary_serialization_api.rst:35
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:49
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:306
msgid "2"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:42
msgid "``ARRAY_TANGENT``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:43
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. First 3 "
"floats determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:46
#: ../../docs/tutorials/io/binary_serialization_api.rst:37
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:308
msgid "3"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:47
msgid "``ARRAY_COLOR``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:48
msgid ":ref:`PoolColorArray <class_PoolColorArray>`"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:50
#: ../../docs/tutorials/io/binary_serialization_api.rst:39
#: ../../docs/tutorials/io/binary_serialization_api.rst:104
#: ../../docs/tutorials/io/binary_serialization_api.rst:115
#: ../../docs/tutorials/io/binary_serialization_api.rst:124
#: ../../docs/tutorials/io/binary_serialization_api.rst:135
#: ../../docs/tutorials/io/binary_serialization_api.rst:144
#: ../../docs/tutorials/io/binary_serialization_api.rst:153
#: ../../docs/tutorials/io/binary_serialization_api.rst:166
#: ../../docs/tutorials/io/binary_serialization_api.rst:168
#: ../../docs/tutorials/io/binary_serialization_api.rst:177
#: ../../docs/tutorials/io/binary_serialization_api.rst:179
#: ../../docs/tutorials/io/binary_serialization_api.rst:181
#: ../../docs/tutorials/io/binary_serialization_api.rst:183
#: ../../docs/tutorials/io/binary_serialization_api.rst:192
#: ../../docs/tutorials/io/binary_serialization_api.rst:194
#: ../../docs/tutorials/io/binary_serialization_api.rst:196
#: ../../docs/tutorials/io/binary_serialization_api.rst:205
#: ../../docs/tutorials/io/binary_serialization_api.rst:207
#: ../../docs/tutorials/io/binary_serialization_api.rst:209
#: ../../docs/tutorials/io/binary_serialization_api.rst:211
#: ../../docs/tutorials/io/binary_serialization_api.rst:213
#: ../../docs/tutorials/io/binary_serialization_api.rst:215
#: ../../docs/tutorials/io/binary_serialization_api.rst:224
#: ../../docs/tutorials/io/binary_serialization_api.rst:226
#: ../../docs/tutorials/io/binary_serialization_api.rst:228
#: ../../docs/tutorials/io/binary_serialization_api.rst:230
#: ../../docs/tutorials/io/binary_serialization_api.rst:239
#: ../../docs/tutorials/io/binary_serialization_api.rst:241
#: ../../docs/tutorials/io/binary_serialization_api.rst:243
#: ../../docs/tutorials/io/binary_serialization_api.rst:245
#: ../../docs/tutorials/io/binary_serialization_api.rst:254
#: ../../docs/tutorials/io/binary_serialization_api.rst:256
#: ../../docs/tutorials/io/binary_serialization_api.rst:258
#: ../../docs/tutorials/io/binary_serialization_api.rst:260
#: ../../docs/tutorials/io/binary_serialization_api.rst:262
#: ../../docs/tutorials/io/binary_serialization_api.rst:264
#: ../../docs/tutorials/io/binary_serialization_api.rst:273
#: ../../docs/tutorials/io/binary_serialization_api.rst:275
#: ../../docs/tutorials/io/binary_serialization_api.rst:277
#: ../../docs/tutorials/io/binary_serialization_api.rst:279
#: ../../docs/tutorials/io/binary_serialization_api.rst:281
#: ../../docs/tutorials/io/binary_serialization_api.rst:283
#: ../../docs/tutorials/io/binary_serialization_api.rst:285
#: ../../docs/tutorials/io/binary_serialization_api.rst:287
#: ../../docs/tutorials/io/binary_serialization_api.rst:289
#: ../../docs/tutorials/io/binary_serialization_api.rst:298
#: ../../docs/tutorials/io/binary_serialization_api.rst:300
#: ../../docs/tutorials/io/binary_serialization_api.rst:302
#: ../../docs/tutorials/io/binary_serialization_api.rst:304
#: ../../docs/tutorials/io/binary_serialization_api.rst:306
#: ../../docs/tutorials/io/binary_serialization_api.rst:308
#: ../../docs/tutorials/io/binary_serialization_api.rst:310
#: ../../docs/tutorials/io/binary_serialization_api.rst:312
#: ../../docs/tutorials/io/binary_serialization_api.rst:314
#: ../../docs/tutorials/io/binary_serialization_api.rst:316
#: ../../docs/tutorials/io/binary_serialization_api.rst:318
#: ../../docs/tutorials/io/binary_serialization_api.rst:320
#: ../../docs/tutorials/io/binary_serialization_api.rst:329
#: ../../docs/tutorials/io/binary_serialization_api.rst:331
#: ../../docs/tutorials/io/binary_serialization_api.rst:333
#: ../../docs/tutorials/io/binary_serialization_api.rst:335
#: ../../docs/tutorials/io/binary_serialization_api.rst:344
#: ../../docs/tutorials/io/binary_serialization_api.rst:364
#: ../../docs/tutorials/io/binary_serialization_api.rst:366
#: ../../docs/tutorials/io/binary_serialization_api.rst:374
#: ../../docs/tutorials/io/binary_serialization_api.rst:393
#: ../../docs/tutorials/io/binary_serialization_api.rst:405
#: ../../docs/tutorials/io/binary_serialization_api.rst:417
#: ../../docs/tutorials/io/binary_serialization_api.rst:430
#: ../../docs/tutorials/io/binary_serialization_api.rst:432
#: ../../docs/tutorials/io/binary_serialization_api.rst:441
#: ../../docs/tutorials/io/binary_serialization_api.rst:443
#: ../../docs/tutorials/io/binary_serialization_api.rst:452
#: ../../docs/tutorials/io/binary_serialization_api.rst:460
#: ../../docs/tutorials/io/binary_serialization_api.rst:473
#: ../../docs/tutorials/io/binary_serialization_api.rst:475
#: ../../docs/tutorials/io/binary_serialization_api.rst:477
#: ../../docs/tutorials/io/binary_serialization_api.rst:486
#: ../../docs/tutorials/io/binary_serialization_api.rst:488
#: ../../docs/tutorials/io/binary_serialization_api.rst:490
#: ../../docs/tutorials/io/binary_serialization_api.rst:492
#: ../../docs/tutorials/io/binary_serialization_api.rst:501
#: ../../docs/tutorials/io/binary_serialization_api.rst:503
#: ../../docs/tutorials/io/binary_serialization_api.rst:505
#: ../../docs/tutorials/io/binary_serialization_api.rst:507
#: ../../docs/tutorials/io/binary_serialization_api.rst:509
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:310
msgid "4"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:51
msgid "``ARRAY_TEX_UV``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:52
#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:56
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>` or :ref:`PoolVector3Array "
"<class_PoolVector3Array>`"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:54
#: ../../docs/tutorials/io/binary_serialization_api.rst:41
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:312
msgid "5"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:55
msgid "``ARRAY_TEX_UV2``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:58
#: ../../docs/tutorials/io/binary_serialization_api.rst:43
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:314
msgid "6"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:59
msgid "``ARRAY_BONES``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:60
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats or :ref:"
"`PoolIntArray <class_PoolIntArray>` of groups of 4 ints. Each group lists "
"indexes of 4 bones that affects a given vertex."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:62
#: ../../docs/tutorials/io/binary_serialization_api.rst:45
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:316
msgid "7"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:63
msgid "``ARRAY_WEIGHTS``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:64
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. Each float "
"lists the amount of weight an determined bone on ``ARRAY_BONES`` has on a "
"given vertex."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:66
#: ../../docs/tutorials/io/binary_serialization_api.rst:47
#: ../../docs/tutorials/io/binary_serialization_api.rst:124
#: ../../docs/tutorials/io/binary_serialization_api.rst:144
#: ../../docs/tutorials/io/binary_serialization_api.rst:155
#: ../../docs/tutorials/io/binary_serialization_api.rst:168
#: ../../docs/tutorials/io/binary_serialization_api.rst:179
#: ../../docs/tutorials/io/binary_serialization_api.rst:194
#: ../../docs/tutorials/io/binary_serialization_api.rst:207
#: ../../docs/tutorials/io/binary_serialization_api.rst:226
#: ../../docs/tutorials/io/binary_serialization_api.rst:241
#: ../../docs/tutorials/io/binary_serialization_api.rst:256
#: ../../docs/tutorials/io/binary_serialization_api.rst:275
#: ../../docs/tutorials/io/binary_serialization_api.rst:300
#: ../../docs/tutorials/io/binary_serialization_api.rst:331
#: ../../docs/tutorials/io/binary_serialization_api.rst:353
#: ../../docs/tutorials/io/binary_serialization_api.rst:366
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:318
msgid "8"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:67
msgid "``ARRAY_INDEX``"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:68
msgid ":ref:`PoolIntArray <class_PoolIntArray>`"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:70
msgid ""
"The array of vertices (at index 0) is always required. The index array is "
"optional and will only be used if included. We won't use it in this tutorial."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:72
msgid ""
"All the other arrays carry information about the vertices. They are also "
"optional and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:76
msgid ""
"For normal usage, the last two parameters in :ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` are typically left empty."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:81
msgid ""
"In the editor, create a :ref:`MeshInstance <class_meshinstance>` and add an :"
"ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, adding "
"an ArrayMesh in the editor is not useful, but in this case it allows us to "
"access the ArrayMesh from code without creating one."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:85
msgid "Next, add a script to the MeshInstance."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:87
msgid "Under ``_ready()``, create a new Array."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:94
msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:104
msgid "Next create the arrays for each data type you will use."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:114
msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:127
msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:130
msgid "Put together, the full code looks like:"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:161
msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:165
msgid "Generating geometry"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:167
msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:235
msgid "Saving"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/arraymesh.rst:237
msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:4
msgid "Using the MeshDataTool"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:6
msgid ""
"The :ref:`MeshDataTool <class_meshdatatool>` is not used to generate "
"geometry. But it is helpful for dynamically altering geometry, for example "
"if you want to write a script to tessellate, simplify, or deform meshes."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:9
msgid ""
"The MeshDataTool is not as fast as altering arrays directly using ArrayMesh. "
"However, it provides more information and tools to work with meshes than the "
"ArrayMesh does. When the MeshDataTool is used, it calculates mesh data that "
"is not available in ArrayMeshes such as faces and edges, which are necessary "
"for certain mesh algorithms. If you do not need this extra information then "
"it may be better to use an ArrayMesh."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:14
msgid ""
"MeshDataTool can only be used on Meshes that use the PrimitiveType ``Mesh."
"PRIMITIVE_TRIANGLES``."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:16
msgid ""
"We initialize the MeshDataTool from an ArrayMesh by calling "
"``create_from_surface()``. If there is already data initialized in the "
"MeshDataTool, calling ``create_from_surface()`` will clear it for you. "
"Alternatively, you can call ``clear()`` yourself before re-using the "
"MeshDataTool."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:19
msgid ""
"In the examples below, assume an ArrayMesh called ``mesh`` has already been "
"created. See :ref:`ArrayMesh tutorial <doc_arraymesh>` for an example of "
"mesh generation."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:27
msgid ""
"``create_from_surface()`` uses the vertex arrays from the ArrayMesh to "
"calculate two additional arrays, one for edges and one for faces, for a "
"total of three arrays."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:30
msgid ""
"An edge is a connection between any two vertices. Each edge in the edge "
"array contains a reference to the two vertices it is composed of, and up to "
"two faces that it is contained within."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:33
msgid ""
"A face is a triangle made up of three vertices and three corresponding "
"edges. Each face in the face array contains a reference to the three "
"vertices and three edges it is composed of."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:36
msgid ""
"The vertex array contains edge, face, normal, color, tangent, uv, uv2, bone, "
"and weight information connected with each vertex."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:39
msgid ""
"To access information from these arrays you use a function of the form "
"``get_****()``:"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:49
msgid ""
"What you choose to do with these functions is up to you. A common use case "
"is to iterate over all vertices and transform them in some way:"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:60
msgid ""
"These modifications are not done in place on the ArrayMesh. If you are "
"dynamically updating an existing ArrayMesh, first delete the existing "
"surface before adding a new one using :ref:`commit_to_surface() "
"<class_meshdatatool_method_commit_to_surface>`:"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/meshdatatool.rst:69
msgid ""
"Below is a complete example that turns a spherical mesh called ``mesh`` into "
"a randomly deformed blob complete with updated normals and vertex colors. "
"See :ref:`ArrayMesh tutorial <doc_arraymesh>` for how to generate the base "
"mesh."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:4
msgid "Using the SurfaceTool"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:6
msgid ""
"The :ref:`SurfaceTool <class_surfacetool>` provides a useful interface for "
"constructing geometry. The interface is similar to the :ref:"
"`ImmediateGeometry <class_immediategeometry>` node. You set each per-vertex "
"attribute (e.g. normal, uv, color) and then when you add a vertex it "
"captures the attributes."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:11
msgid ""
"The SurfaceTool also provides some useful helper functions like ``index()`` "
"and ``generate_normals()``."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:13
msgid "Attributes are added before each vertex is added:"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:24
msgid ""
"When finished generating your geometry with the :ref:`SurfaceTool "
"<class_surfacetool>` call ``commit()`` to finish generating the mesh. If an :"
"ref:`ArrayMesh <class_ArrayMesh>` is passed to ``commit()`` then it appends "
"a new surface to the end of the ArrayMesh. While if nothing is passed in, "
"``commit()`` returns an ArrayMesh."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:36
msgid "Code creates a triangle with indices"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:62
msgid ""
"You can optionally add an index array, either by calling ``add_index()`` and "
"adding vertices to the index array or by calling ``index()`` which shrinks "
"the vertex array to remove duplicate vertices."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:82
msgid ""
"Similarly, if you have an index array, but you want each vertex to be unique "
"(e.g. because you want to use unique normals or colors per face instead of "
"per-vertex), you can call ``deindex()``."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:90
msgid ""
"If you don't add custom normals yourself, you can add them using "
"``generate_normals()``, which should be called after generating geometry and "
"before committing the mesh using ``commit()`` or ``commit_to_arrays()``. "
"Calling ``generate_normals(true)`` will flip the resulting normals. As a "
"side note, ``generate_normals()`` only works if the primitive type is set to "
"``Mesh.PRIMITIVE_TRIANGLES``."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:95
msgid ""
"You may notice that normal mapping or other material properties look broken "
"on the generated mesh. This is because normal mapping **requires** the mesh "
"to feature *tangents*, which are separate from *normals*. You can either add "
"custom tangents manually, or generate them automatically with with "
"``generate_tangents()``. This method requires that each vertex have UVs and "
"normals set already."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/surfacetool.rst:108
msgid ""
"By default, when generating normals, they will be calculated on a per-face "
"basis. If you want smooth vertex normals, when adding vertices, call "
"``add_smooth_group()``. ``add_smooth_group()`` needs to be called while "
"building the geometry, e.g. before the call to ``add_vertex()`` (if non-"
"indexed) or ``add_index()`` (if indexed)."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:4
msgid "Using ImmediateGeometry"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:6
msgid ""
"Unlike the SurfaceTool or ArrayMesh, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>` is an actual node. Being a node makes it quick to "
"add to a scene and get visual output. It uses an OpenGL 1.x-style API like "
"SurfaceTool, but it's actually designed to create meshes on the fly."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:10
msgid ""
"Generating complex geometry (several thousand vertices) with this node is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:13
msgid ""
"Before starting, you should clear the geometry by calling ``clear()``. This "
"ensures that you are not building upon the geometry from the previous frame. "
"If you want to keep geometry between frames, do not call ``clear()``."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:17
msgid ""
"To begin generating geometry you must call ``begin()``. ``begin()`` takes a "
"``PrimitiveType`` as an argument. ``PrimitiveType`` is an OpenGL concept "
"that instructs the GPU how to arrange the primitive based on the vertices "
"given whether it is triangles, lines, points, etc. A complete list can be "
"found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:22
msgid ""
"Once you have called ``begin()`` you are ready to start adding vertices. You "
"add vertices one at a time. First you add vertex specific attributes such as "
"normals or UVs using ``set_****()`` (e.g. ``set_normal()``). Then you call "
"``add_vertex()`` to add a vertex with those attributes. For example:"
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:34
msgid ""
"Only attributes added before the call to ``add_vertex()`` will be included "
"in that vertex."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:36
msgid ""
"Finally, once you have added all your vertices call ``end()`` to signal that "
"you have finished generating the mesh."
msgstr ""

#: ../../docs/tutorials/3d/procedural_geometry/immediategeometry.rst:38
msgid "The example code below draws a single triangle."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:4
msgid "Occluder Nodes"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:6
msgid ""
"In addition to occlusion via :ref:`doc_rooms_and_portals`, Godot also has "
"the ability to provide basic occlusion using simple geometric ``Occluder`` "
"nodes. These are geometric shapes that are shown in the editor using gizmos, "
"but are invisible at runtime."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:8
msgid ""
"Any object that is fully occluded by the shape (behind or in some cases "
"inside) will be culled at runtime. They are designed to be simple to use and "
"inexpensive at runtime, but the trade off is they may not be as effective at "
"culling as :ref:`doc_rooms_and_portals`. Nevertheless they can still "
"significantly boost performance in some situations."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:10
msgid ""
"It is important to understand that geometric occluders work by testing the "
"axis aligned bounding box (``AABB``) of the occludee against the occluder. "
"The AABB must be *fully occluded* to be culled. The consequence of this is "
"that smaller objects are more likely to be effectively culled than larger "
"objects, and larger occluders tend to be much more effective than smaller "
"ones."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:12
msgid ""
"A major advantage to Occluder nodes is that they are fully dynamic. For "
"example if you place an occluder node as a child of a spaceship, it will "
"move as you move the parent object."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:14
msgid ""
"The reason that Occluder nodes are so cheap in performance terms is that the "
"engine dynamically chooses the most relevant occluders at runtime, based on "
"the current viewpoint of the Camera. This means you can often have hundreds "
"of occluders present in the scene. Only the most relevant will be active at "
"any one time."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:16
msgid ""
"The Occluder node itself is a holder for an OccluderShape resource, which "
"determines the functionality. To get started, add an Occluder node to your "
"scene tree."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:18
msgid ""
"You will see a yellow warning triangle that lets you know that you must set "
"an OccluderShape from the inspector before the ``Occluder`` becomes "
"functional."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:21
msgid "OccluderShapeSphere"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:23
msgid ""
"The sphere is one of the simplest and fastest occluders, and is easy to "
"setup and position. The downside is that the sphere only tends to make sense "
"in certain game level designs, and is more suited to terrain or organic "
"background geometry."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:25
msgid ""
"Once you have added an OccluderNode and chosen to add a new "
"``OccluderShapeSphere`` in the inspector, click the OccluderShapeSphere in "
"the inspector to bring up the parameters."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:29
msgid ""
"Unlike many Nodes, the ``OccluderShapeSphere`` can store multiple spheres in "
"the same object. This is more efficient in the engine, and keeps your "
"SceneTree clearer. You don't have to store all your spheres in one Occluder "
"as it could become tricky to manage, but it is perfectly reasonable to add "
"10 or so spheres or more. They are very cheap, and often the more you place, "
"the better the match you will get to your geometry."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:31
msgid ""
"In order to store multiple spheres, they are stored as an Array. If you "
"click on the Array in the inspector, you can increase the size of the Array "
"to add one."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:35
msgid ""
"The sphere will appear as a small pink spherical object in the editor "
"window. There are two handles on each sphere. The larger middle handle "
"enables you to move the sphere around in the local space of the Occluder, "
"and the small handle enables you to adjust the radius."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:37
msgid ""
"Although you can change the position of the sphere using the Occluder Node "
"transform in the inspector, this moves *the entire array* of spheres. When "
"you want to use multiple spheres in one occluder, the handles do this job. "
"In order to allow positioning in 3D, the gizmo will only move the 3D "
"position in the two principal axes depending on the viewpoint in the editor. "
"This is easier for you to get the hang of by trying it out than by "
"explanation."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:39
msgid ""
"There is one more handy function in the editor when using multiple spheres. "
"If you click the `Center Node` toolbar button it will recalculate the local "
"positions of the spheres relative to the average of the entire node, and "
"change the transform of the Occluder Node. This is a handy convenience "
"function to make it easier to place them."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:41
msgid ""
"At runtime the spheres can be switched on and off changing the Occluder node "
"visibility, and the Node can be moved and scaled and rotated etc."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:43
msgid ""
"A common use case for occluder spheres is providing occlusion on "
"mountainous / hilly terrain. By placing spheres inside mountains you can "
"prevent trees, plants, building and objects rendering behind mountains. With "
"some creativity they can also be used for moving objects such as large "
"spacecraft, planets etc."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:46
msgid "OccluderShapePolygon"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:48
msgid ""
"The polygon is a generalist occluder. It can be made to work well in almost "
"all situations, and can quickly provide a degree of occlusion culling to "
"most scenes."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:50
msgid ""
"As with all geometric occluders, the key to success is to make them large. "
"They do not have to match rendered geometry, and in many cases they will "
"work better if you extend them past rendered geometry to make them as big as "
"possible (without blocking legitimate lines of sight). The reason why they "
"need to be large is that in general, they will only cull objects whose "
"``AABB`` is completely hidden by the polygon. For large objects to be "
"culled, you will need large occluders."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:52
msgid ""
"Like all occluders, polygons **can** overlap, and in many cases they will "
"work better if you overlap them (they are more likely to cull objects on "
"boundaries)."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:55
msgid "Editing and details"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:57
msgid ""
"Occluder polygons are edited as a list of points which define a *convex* "
"polygon, on a single plane. In order to confine the polygon to a single "
"plane, the points are defined in 2D space rather than 3D. The orientation, "
"position and scale of the polygon is taken instead from the transform of the "
"``Occluder`` Node."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:61
msgid ""
"If you create an Occluder and add to it a ``OccluderShapePolygon`` resource, "
"by default it will create 4 starting points forming a rectangle. If you move "
"the position and rotation of the Occluder Node you will see how the "
"rectangle follows the node. When the Occluder is selected in the editor, "
"handles will appear for each of the points. You can actually click and drag "
"these handles, to match your polygon to the environment of your scene."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:65
msgid ""
"You are not restricted to 4 points, you can add and remove points in the "
"Inspector, but note that:"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:67
msgid ""
"The editor will automatically sanitize your points to form a convex polygon. "
"If you drag a point into a position that would form a concave polygon, it "
"will be ignored."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:68
msgid ""
"In general, the less edges (and thus points), the faster the polygon will "
"work at runtime. A polygon with 6 edges will have to make twice the "
"calculations of a polygon with 3 edges. In most cases 4 is a good number."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:73
msgid "Holes"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:75
msgid ""
"Real world game levels don't always have large continuous areas that should "
"be occluded. Often walls will have a door or windows, caves will have an "
"entrance, etc. In some cases we have to make do by placing several "
"OccluderShapePolygons around such an opening, but Occluder polygons have one "
"more trick up their sleeve - they can have \"holes\"."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:77
msgid ""
"In the inspector you will notice that as well as a set of points for the "
"polygon, the polygon has a set of points for a single \"hole\". If you add 3 "
"or 4 to your polygon, you will see they appear in the editor as smaller "
"handles. You can drag these around just like the polygon handles, to form a "
"convex hole."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:81
msgid ""
"The hole can be totally within the polygon (such as a window), abutting the "
"edge (like a door) or crossing the edge of the polygon completely, to make "
"the occluder concave. The way the hole works is that the culling follows a "
"simple rule:"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:83
msgid ""
"If the object to be culled is totally hidden by the polygon, it then looks "
"to see whether it can be seen *through* the hole. If the object touches the "
"hole, it is not culled, but if hidden by the polygon and not seen through "
"the hole it is culled."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:85
msgid ""
"Placing holes is usually far more convenient, and works faster and better at "
"runtime, than creating lots of smaller OccluderShapePolygons."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:88
msgid "Hole Limits"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:90
msgid ""
"The main limitation of holes is that there can only be one per polygon. If "
"you have a situation which requires two or more holes, you have a choice:"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:92
msgid ""
"Combine the area of the two holes into one bigger hole (if they are close "
"together)."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:93
msgid "Use two or more OccluderPolygons."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:95
msgid ""
"Remember that if you are using more than one polygon, they can overlap, and "
"you should use this to your advantage."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:98
msgid "How many Occluder polys are needed?"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:100
msgid ""
"This very much depends on your scene, but generally you can start getting a "
"good benefit from 3 or 4 well placed polygons. After that it is totally up "
"to you how much time you want to spend. Placing occluders is a bit of an art "
"form, and you will get better at it and learn new tricks the more you work "
"with them."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:104
msgid "Some ideas:"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:106
msgid "Build your levels to take advantage of occlusion."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:108
msgid ""
"This is one of the secrets of the pros. A good level design is not just "
"about what the gameplay demands, it should also be built with occlusion in "
"mind."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:110
msgid ""
"When in a building with multiple floors, try placing an occluder polygon "
"between each floor, with a hole for where the staircase transitions between "
"them. This can potentially cull out entire floors and greatly improve "
"performance."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:111
msgid ""
"Don't be afraid to extend your occluder polygons far past the edges of "
"visible geometry to cull more objects - for instance far into the ground or "
"sky."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:114
msgid "Using polygons dynamically"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:116
msgid ""
"Like all geometric occluders, polygons are not confined to static (non-"
"moving) geometry. You can place them on moving objects. You can even change "
"the relative position of the points in realtime."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:118
msgid "Some guidelines:"
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:120
msgid ""
"There is a slight cost to moving polygons, the points of the polygons must "
"be transformed on the CPU each time their transform changes."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:122
msgid ""
"This is not something to worry excessively about, even CPUs are reasonably "
"fast at transforming points, and generally polygons have very few points "
"compared to rendered geometry. But it is something to consider, if you "
"wanted to create e.g. 10,000 simultaneous spaceships all with occluder polys."
msgstr ""

#: ../../docs/tutorials/3d/occluders.rst:124
msgid ""
"Changing the transform of the polygon Node (e.g. by moving the parent "
"object) is cheaper than changing the points themselves. Use the former "
"rather than the latter wherever possible."
msgstr ""

#: ../../docs/tutorials/3d/portals/index.rst:4
msgid "Rooms and Portals"
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:4
msgid "Introduction to Rooms and Portals"
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:6
msgid ""
"The rooms and portals system is an optional component of Godot that allows "
"you to partition your 3D game levels into a series of :ref:"
"`Room<class_Room>` s (*aka cells*), and :ref:`Portal<class_Portal>` s. "
"Portals are openings between the rooms that the :ref:`Camera<class_Camera>` "
"(and lights) can see through."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:8
msgid "This allows several features:"
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:10
msgid ""
"**Portal occlusion culling**, which can increase performance by reducing the "
"number of objects that are drawn, both to cameras and to shadow maps."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:12
msgid ""
"**Gameplay callbacks**, which allow turning off activity outside the "
"gameplay area - AI, physics, animation, processing etc."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:14
msgid ""
"The trade off for these features is that we have to manually partition our "
"level into rooms, and add portals between them."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:16
msgid ""
"Godot portals should not be confused with those in the `game of the same "
"name <https://en.wikipedia.org/wiki/Portal_(video_game)>`__. They do not "
"warp space, they simply represent a window that the camera (or lights) can "
"see through."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:19
msgid "Minimizing manual labour"
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:21
msgid ""
"Although the effort involved in creating rooms for a large level may seem "
"daunting, there are several factors which can make this much easier:"
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:23
msgid ""
"If you are \"kit bashing\" and reusing rooms or areas already, this is an "
"ideal way to save effort. Your level tiles can be rooms, with portals "
"already placed."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:24
msgid ""
"If you are creating procedural levels, you can create rooms and portals as "
"part of the procedural generation algorithm you're writing."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:25
msgid ""
"Finally, if you are manually creating freeform levels, bear in mind there "
"are absolutely no rules as to how far you go with portalling. Even if you "
"separate a large game level into only two rooms, with a single portal "
"between them, this can still result in relatively large performance gains."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:27
msgid ""
"The performance benefits (especially in terms of occlusion) follow an L-"
"shaped curve, with the lion's share occurring when you have created just a "
"few rooms. So do not be afraid to be lazy - **\\*work smart\\***."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:29
msgid ""
"In general, when it comes to medium and large-sized levels, it is better to "
"do a little portalling than none at all."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:32
msgid "Some caveats"
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:34
msgid ""
"The portal system should be considered an **advanced feature** of Godot. You "
"should not attempt to use rooms and portals until you are familiar with the "
"Godot editor, and have successfully made at least a couple of test games."
msgstr ""

#: ../../docs/tutorials/3d/portals/introduction_to_rooms_and_portals.rst:36
msgid ""
"It gives you great power as a game designer, but the trade off is that it "
"requires a very technical approach to level design. It is aimed at producing "
"professional-grade results, and assumes the user is prepared to put in the "
"work for this. It is not intended to be used for all 3D games. Not all games "
"will significantly benefit from portals, and it may require more time than a "
"short game jam allows."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:2
msgid "First steps with Rooms and Portals"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:5
msgid "The RoomManager"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:7
msgid ""
"Anytime you want to use the portal system, you need to include a special "
"node in your scene tree, called the :ref:`RoomManager<class_RoomManager>`. "
"The RoomManager is responsible for the runtime maintenance of the system, "
"especially converting the objects in your rooms into a *room graph* which is "
"used at runtime to perform occlusion culling and other tasks."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:10
msgid "Room Conversion"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:12
msgid ""
"This conversion must take place every time you want to activate the system. "
"It does not store the *room graph* in your project (for flexibility and to "
"save memory). You can either trigger it by pressing the **Convert Rooms** "
"button in the editor toolbar (which also has a keyboard shortcut) or by "
"calling the ``rooms_convert()`` method in the RoomManager. The latter method "
"will be what you use in-game. Note that for safety, best practice is to call "
"``rooms_clear()`` before unloading or changing levels."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:16
msgid ""
"If you convert the level while the editor is running, the portal culling "
"system will take over from the normal Godot frustum culling, potentially "
"interfering with editor features. To get around this, you can turn portal "
"culling on and off using either the **View Portal Culling** toggle in the "
"**View** menu on the editor toolbar (which also has a keyboard shortcut) or "
"the **Active** setting in the RoomManager node."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:18
msgid ""
"To use the RoomManager, you have to tell it where the rooms are in your "
"scene tree, or, more specifically, where the RoomList node is. This RoomList "
"is the parent of your rooms - see below. If the RoomList is not set, "
"conversion will fail, and you will see a warning dialog box."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:23
msgid "The RoomList"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:25
msgid ""
"Before we create any rooms, we must first create a node to be the parent of "
"all the static objects, rooms, roomgroups, and so on in our level. This node "
"is referred to as the the ``RoomList``."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:29
msgid ""
"The roomlist is **not** a special node type – it can just be a regular "
"Spatial."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:31
msgid ""
"You will need to assign the roomlist node in the RoomManager so that it "
"knows where to find the rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:33
msgid ""
"Why do we use a specific branch of the scene tree and not the scene root? "
"The answer is that there are many internal details of the system which are "
"easier to manage if the rooms are placed on their own branch."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:35
msgid ""
"Often you will end up completely replacing the roomlist branch at runtime in "
"your game as you load and unload levels."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:38
msgid "Rooms"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:41
msgid "What is a room?"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:43
msgid ""
":ref:`Room<class_Room>`\\ s are a way of spatially partitioning your level "
"into areas that make sense in terms of level design. Rooms often quite "
"literally *are* rooms (like in a building). Ultimately though, as far as the "
"engine is concerned, a room represents a **non-overlapping** convex volume "
"in which you typically place most of your objects that fall within that area."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:45
msgid ""
"A room doesn't need to correspond to a literal room. It could, for example, "
"also be a canyon in an outdoor area or a smaller part of a concave room. "
"With a little imagination, you can use the system in almost any scenario."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:48
msgid "Why convex?"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:50
msgid ""
"Rooms are defined as convex volumes (or *convex hulls*) because it's trivial "
"to mathematically determine whether a point is within a convex hull. A "
"simple plane check will tell you the distance of a point from a plane. If a "
"point is behind all the planes bounding the convex hull, then by definition "
"it is inside the room. This makes all kinds of things easier in the "
"internals of the system, such as checking which room a camera is within."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:52
msgid ""
"*A convex hull. The hull is defined as a series of planes facing outward. If "
"a point is behind all the planes, it is within the hull.*"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:57
msgid "Why non-overlapping?"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:59
msgid ""
"If two rooms overlap, and a camera or player is in this overlapping zone, "
"then there is no way to tell which room the object should be in (and hence "
"render from), or be rendered in. This requirement for non-overlapping rooms "
"does have implications for level design."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:61
msgid ""
"If you accidentally create overlapping rooms, the editor will warn you when "
"you convert the rooms, indicating any overlapping zones in red."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:65
msgid ""
"The system does attempt to cope with overlapping rooms as best as possible "
"by making the current room *\"sticky\"*. Each object remembers which room it "
"was in during the previous frame and stays within it as long as it does not "
"move outside the convex hull room bound. This can result in some hysteresis "
"in these overlapping zones."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:67
msgid ""
"There is one exception, however, for :ref:`internal "
"rooms<doc_rooms_and_portals_internal_rooms>`. You do not have to worry about "
"these to start with."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:70
msgid "How do I create a room?"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:72
msgid ""
"A :ref:`Room<class_Room>` is a node type that can be added to the scene tree "
"like any other. You can place objects within the room by making them "
"children and grand-children of the Room node."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:75
msgid "How do I define the shape and position of my room convex hull?"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:77
msgid ""
"Because defining the room bound is the most important aspect of the system, "
"there are THREE methods available to define the shape of a room in Godot:"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:79
msgid ""
"Use the geometry of the objects contained within the room to automatically "
"create an approximate bound."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:80
msgid ""
"Manually edit the points that define the convex hull in the room inspector "
"or drag the points around using the editor gizmo (see :ref:"
"`doc_room_point_editing`)."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:81
msgid ""
"Provide a manual bound. This is a MeshInstance in the room that has geometry "
"in the shape of the desired bound, with a name with the postfix ``-bound``. "
"This is something you might choose to do if you create your levels in "
"Blender or similar (see :ref:`doc_rooms_and_portals_blender`)."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:83
msgid ""
"While the first option can be all that is required, particularly with simple "
"rooms or for pre-production, using manual bounds gives you ultimate control "
"at the expense of a small amount of editing. You can also combine the two "
"approaches, perhaps using automatic bounds for most rooms but manually "
"editing problem areas."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:85
msgid "The automatic method is used whenever a manual bound is not supplied."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:87
msgid ""
"*A simple pair of rooms. The portal margin is shown with translucent red, "
"and the room hulls are shown with green wireframe.*"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:92
#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:43
#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:119
msgid "Portals"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:94
msgid ""
"If you create some rooms, place objects within them, then convert the level "
"in the editor, you will see the objects in the rooms appearing and showing "
"as you move between rooms. There is one problem, however! Although you can "
"see the objects within the room that the camera is in, you can't see to any "
"neighbouring rooms! For that we need portals."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:96
msgid ""
":ref:`Portal<class_Portal>`\\ s are special convex polygons that you "
"position over the openings between rooms in order to allow the system to see "
"between them. You can create a portal node directly in the editor. The "
"default portal has 4 points and behaves much like a ``plane`` :ref:"
"`MeshInstance<class_MeshInstance>`. You can add or remove points using the "
"inspector. A portal requires at least 3 points to work - this is because it "
"needs to form a polygon rather than a point or line."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:98
msgid ""
"To save editing effort, **only one Portal is required between each pair of "
"Rooms**. You *do not need* to (and indeed should not) create two Portals "
"that overlap in opposite directions. Portals default to being two-way, but "
"you can make them one-way in the Portal inspector."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:100
msgid ""
"You should therefore place a portal in only one of each pair of neighbouring "
"rooms - this is the portal's *\"source room\"*. Generally it doesn't matter "
"which you choose as the source room. The portal normal (the arrow in the "
"gizmo) should face *outward* from the source room."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:104
msgid ""
"Do not be confused by the arrow. Although the arrow shows which direction "
"the portal faces, most portals will be *two-way*, and can be seen through "
"from both directions. The arrow is more important for ensuring that the "
"portal links to the correct neighbouring room."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:107
msgid "Portal linking"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:109
msgid "There are two ways to specify which room the portal should link to:"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:111
msgid ""
"Leave the **Linked Room** in the inspector blank. The system will attempt to "
"*autolink* the portal to the nearest neighbour room during conversion. This "
"works fine in most cases."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:112
msgid ""
"Explicitly specify the room by setting the **Linked Room** in the inspector."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:114
msgid ""
"Portals are defined as a set of 2D points. This ensures that the polygon "
"formed is in a single plane. The transform determines the portal "
"orientation. The points must also form a *convex* polygon. This is enforced "
"by validating the points you specify, ignoring any that do not form a convex "
"shape. This makes editing easier while making it difficult to break the "
"system."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:117
msgid "Trying it out"
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:119
msgid ""
"By now you should be able to create a couple of rooms, add some nodes such "
"as MeshInstances within the rooms, and add a portal between the rooms. Try "
"converting the rooms in the editor and see if you can now view the objects "
"in neighbouring rooms through the portal."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:123
msgid "You have now mastered the basic principles of the system."
msgstr ""

#: ../../docs/tutorials/3d/portals/first_steps_with_rooms_and_portals.rst:125
msgid ""
"The next step is to look at the different types of objects that can be "
"managed by the system."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:2
msgid "Using objects in Rooms and Portals"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:4
msgid ""
"Normally, when you use Godot, all objects that you can see (:ref:"
"`VisualInstance<class_VisualInstance>`\\ s) are treated in the same way by "
"the engine. The portal renderer is slightly different, in that it makes a "
"distinction between the different roles objects will have in your game. It "
"makes this distinction to define the :ref:`Room<class_Room>`\\ s, and to "
"render and process everything in the most efficient way."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:7
msgid "Portal mode"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:9
msgid ""
"If you look in the inspector, every VisualInstance in Godot is derived from "
"a :ref:`CullInstance<class_CullInstance>`, where you can set a "
"``PortalMode``. This determines how objects will behave in the portal system."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:14
msgid "STATIC"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:16
msgid ""
"The default mode for objects is ``STATIC``. Static objects are objects "
"within rooms that will not move throughout the lifecycle of the level. "
"Things like floors, walls, ceilings are good candidates for ``STATIC`` "
"objects."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:19
msgid "DYNAMIC"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:21
msgid ""
"Dynamic mode is for objects that are expected to move during the game. But "
"there is a limitation - **they must not move outside of their original "
"room**. These objects are handled very efficiently by the system. Examples "
"might include moving platforms, and elevators."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:24
msgid "ROAMING"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:26
msgid ""
"Roaming mode is for objects that can move between rooms. Things like players "
"and enemies should be marked as roaming. These are more expensive to "
"calculate than ``STATIC`` or ``DYNAMIC`` modes, because the system has to "
"keep track of which room a roaming object is within."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:29
msgid "GLOBAL"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:31
msgid ""
"Global mode is for objects that you don't want occlusion culled at all. "
"Things like a main player's weapon, bullets and some particle effects are "
"good candidates for ``GLOBAL`` mode."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:34
msgid "IGNORE"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:36
msgid ""
"Ignore is a special mode for objects that will be essentially free in the "
"system. Manual bounds (``-bound``) get converted to ignore portal mode "
"automatically. They don't need to show up during the game, but are kept in "
"the scene tree in case you need to convert the level multiple times (e.g. in "
"the Editor). You might also choose to use this for objects that you *only* "
"want to show up in the editor (when RoomManager is inactive)."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:39
msgid "Should you place objects within rooms (in the scene tree) or not?"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:41
msgid ""
"``STATIC`` and ``DYNAMIC`` objects are ideally placed within rooms in the "
"scene tree. The system needs to know which room they are in during "
"conversion as it assumes they will never change room. Placing them within "
"rooms in the scene tree allows you to explicitly tell the system where you "
"want them."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:44
msgid "Autoplace"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:46
msgid ""
"However, for ease of use, it is also possible to place ``STATIC`` and "
"``DYNAMIC`` objects *outside* the rooms in the scene tree, but within the "
"RoomList branch. The system will attempt to **autoplace** the objects into "
"the appropriate room. This works in most cases but if in doubt, use the "
"explicit approach. The explicit approach is especially needed when dealing "
"with internal rooms, which have some restrictions for sprawling objects."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:50
msgid ""
"Note that if you place ``STATIC`` and ``DYNAMIC`` objects outside of rooms, "
"they will not contribute to the room bound. If you are using the room "
"geometry to derive the bound, tables and chairs can be placed outside the "
"room. However, walls and floors should be explicitly within the Room's "
"branch of the scene tree to ensure the bound is correct."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:52
msgid ""
"``ROAMING`` and ``GLOBAL`` objects are recommended to be kept in a branch of "
"the scene tree outside of any rooms or the RoomList. They *can* be placed "
"inside the rooms, but to save confusion, they are normally better kept on "
"their own branch. There are no restrictions on the placement of ``IGNORE`` "
"objects."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:55
msgid "Object Lifetimes"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:57
msgid ""
"It is important to note that the lifetime of ``STATIC`` and ``DYNAMIC`` "
"objects is tied to the lifetime of the level, between when you call "
"``rooms_convert()`` to activate the portal system, and calling "
"``rooms_clear()`` to unload the system. This is because quite a bit of pre-"
"processing goes on during the conversion phase in order to render them "
"efficiently."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:59
msgid ""
"You should therefore not try to create or delete ``STATIC`` or ``DYNAMIC`` "
"objects while the portal system is active. Doing so will cause the system to "
"automatically unload because it is in an invalid state. You can however, "
"freely ``show()`` and ``hide()`` these objects."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:61
msgid "The sequence should be therefore:"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:63
msgid "Load your level."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:64
msgid "Place any ``STATIC`` or ``DYNAMIC`` objects."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:65
msgid ""
"Then run ``rooms_convert()`` *after* all the ``STATIC`` and ``DYNAMIC`` "
"objects were added to the scene tree."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:67
msgid ""
"Objects that are ``ROAMING``, ``GLOBAL`` or ``IGNORE`` can be freely created "
"and deleted as required."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:70
msgid "Sprawling"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:72
msgid ""
"Although users can usually ignore the internals of the portal system, they "
"should be aware that it is capable of handling objects that are so big they "
"end up in more than one room. Each object has a central room, but using the "
"AABB or geometry the system can detect when an object extends across a "
"portal into a neighbouring room (or several rooms). This is referred to as "
"**sprawling**."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:74
msgid ""
"This means that if the corner of an object extends into a neighbouring room, "
"but the object's main room is not showing (e.g. a train where the end is in "
"a different room), the object will not be culled, and will still be shown. "
"The object will only be culled if it is not present in any of the rooms that "
"are visible."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:77
msgid "Portal Margins"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:79
msgid ""
"It is hard to place objects exactly at the edges of rooms, and if we chose "
"to sprawl objects to the adjacent room the moment a portal was crossed (even "
"by a very small amount), there would be an unnecessary amount of sprawling, "
"and objects would end up being rendered when not really required. To counter "
"this, portals have an adjustable ``margin`` over which an object can cross "
"without being considered in the next room. The margin is shown in the editor "
"gizmo as a red translucent area."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:81
msgid ""
"You can set the margin globally in the RoomManager. You can also override "
"this margin value in any portal if you need to finetune things. As you edit "
"the margin values in the inspector, you should see the margins update in the "
"3D editor viewport."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:84
msgid "Include in Bound"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:86
msgid ""
"The support for objects that are larger than a single room has one side "
"effect. You may not want to include some objects in the calculation of the "
"automatic room bound. You can turn this on and off in the inspector for each "
"object. See **Cull Instance > Include In Bound**."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:88
msgid ""
"While sprawling works great for large moving objects, it also gives you a "
"lot more leeway in level design. You can for instance create a large terrain "
"section and have it present in multiple rooms, without having to split up "
"the mesh."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:91
msgid "Lighting"
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:93
msgid ""
"In general lights are handled like any other visual instance. They can be "
"placed in rooms, and they will sprawl to affect neighbouring rooms, "
"following the dimensions and direction of the light. The exception to this "
"is :ref:`DirectionalLight<class_DirectionalLight>`\\ s. DirectionalLights "
"have no source room as they affect *everywhere*. They should therefore not "
"be placed in a room. As DirectionalLights can be expensive, it is a good "
"idea to turn them off when inside, see the later :ref:"
"`doc_rooms_and_portals_roomgroups` section for details on how to do this."
msgstr ""

#: ../../docs/tutorials/3d/portals/using_objects_in_rooms_and_portals.rst:95
msgid ""
"Congratulations! You have now mastered the intermediate techniques required "
"to use rooms and portals. You can use these to make games already, but there "
"are many more features."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:2
msgid "Advanced Room and Portal usage"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:5
msgid "Gameplay callbacks"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:7
msgid ""
"Although occlusion culling greatly reduces the number of objects that need "
"to be rendered, there are other costs to maintaining objects in a game "
"besides the final rendering. For instance, in Godot, animated objects will "
"still be animated whether they appear on screen or not. This can take up a "
"lot of processing power, especially for objects that use software skinning "
"(where skinning is calculated on the CPU)."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:9
msgid "Fear not, rooms and portals can solve these problems, and more."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:11
msgid ""
"By building our system of rooms for our game level, not only do we have the "
"information needed for occlusion culling, we also have handily created the "
"information required to know which rooms are in the local \"gameplay area\" "
"of the player (or camera). If you think about it, in a lot of cases, there "
"is no need to do a lot of simulation on objects that have nothing to do with "
"gameplay."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:13
msgid ""
"The gameplay area is not confined to just the objects you can see in front "
"of you. AI monsters behind you still need to attack you when your back is "
"turned! In Godot the gameplay area is defined as the *potentially visible "
"set* (PVS) of rooms, from the room you are currently within. That is, if "
"there is any part of a room that can possibly be viewed from any part of the "
"room you are in (even from a corner), it is considered within the PVS, and "
"hence the gameplay area."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:15
msgid ""
"This works because if a monster is in an area that is completely out of view "
"for yourself or the monster, you are less likely to care what it is doing."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:18
msgid "How does a monster know whether it is within the gameplay area?"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:20
msgid ""
"This problem is solved because the portal system contains a subsystem called "
"the **Gameplay Monitor** that can be turned on and off from the :ref:"
"`RoomManager<class_RoomManager>`. When switched on, any roaming objects that "
"move inside or outside the gameplay area (whether by moving themselves, or "
"the camera moving) will receive callbacks to let them know of this change."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:22
msgid ""
"You can choose to either receive these callbacks as ``signals``, or as "
"``notifications``."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:24
msgid "Notifications can be handled in GDScript or other scripting languages:"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:35
msgid ""
"Signals are sent just as any other signal. They can be attached to functions "
"using the editor inspector. The signals are called ``gameplay_entered`` and "
"``gameplay_exited``."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:37
msgid ""
"In fact, you don't just receive these callbacks for ``ROAMING`` objects. In "
"addition Rooms and RoomGroups (which can be used to form groups of rooms) "
"can also receive callbacks. For example, you can use this to trigger AI "
"behaviour when the player reaches certain points in a level."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:40
msgid "VisbilityNotifiers / VisibilityEnablers"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:42
msgid ""
"Gameplay callbacks have one more useful function. By default in Godot, "
"animation and physics are still processed regardless of whether an object is "
"within view. This can sap performance, especially when using software "
"skinning."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:44
msgid ""
"The engine's solution to this problem is the :ref:"
"`VisibilityNotifier<class_VisibilityNotifier>` node, and its slightly easier "
"to use variation, the :ref:`VisibilityEnabler<class_VisibilityEnabler>` "
"node. VisibilityEnabler can be used to switch off animation and sleep "
"physics when an object is outside the view frustum. You do this by simply "
"placing a VisibilityEnabler node in your subscene (for e.g. a monster). It "
"will do the rest. Consult the :ref:"
"`VisibilityEnabler<class_VisibilityEnabler>` documentation for full details."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:48
msgid ""
"What if the VisibilityEnabler could turn off objects when they were "
"occlusion culled? Well it turns out VisibilityEnabler can. All you have to "
"do is enable the **Gameplay Monitor** in the RoomManager and the rest "
"happens automatically."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:53
msgid "RoomGroups"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:55
msgid ""
"A :ref:`RoomGroup<class_RoomGroup>` is a special node which allows you to "
"deal with a group of rooms at once, instead of having write code for them "
"individually. This is especially useful in conjunction with gameplay "
"callbacks. The most important use for RoomGroups is to delineate between "
"\"inside\" and \"outside\" areas."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:59
msgid ""
"For instance, when outside you may wish to use a :ref:"
"`DirectionalLight<class_DirectionalLight>` to represent the sun. When the "
"outside RoomGroup receives an ``enter gameplay`` callback, you can turn the "
"light on, and you can turn it off when the RoomGroup exits gameplay. With "
"the light off, performance will increase as there is no need to render it "
"indoors."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:61
msgid ""
"This is an example of a simple RoomGroup script to turn on and off a "
"DirectionalLight. Note that you can also use signals for callbacks (the "
"choice is up to you):"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:65
msgid ""
"You can apply the same technique for switching on and off weather effects, "
"skyboxes and much more."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:70
msgid "Internal Rooms"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:72
msgid ""
"There is one more trick that RoomGroups have up their sleeve. A very common "
"desire is to have a game level with a mixed outdoor and indoor environment. "
"We have already mentioned that rooms can be used to represent both rooms in "
"a building, and areas of landscape, such as a canyon."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:75
msgid "What happens if you wish to have a house in a terrain 'room'?"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:77
msgid ""
"With the functionality described so far you *can* do it - you would need to "
"place portals around the exterior of the house though, forming needless "
"rooms above the house. This has been done in many games. But what if there "
"was a simpler way?"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:79
msgid ""
"It turns out there is a simpler way of handling this scenario. Godot "
"supports *rooms **within** rooms* (we will call them **\"internal "
"rooms\"**). That is, you can place a house within a terrain room, or even a "
"building, or set of buildings, and even have exit portals in different "
"terrain rooms!"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:81
msgid ""
"To create internal rooms, you don't need to place a room within another room "
"in the scene tree - in fact you will get a warning if you try this. Instead, "
"create them as regular rooms. The internal rooms should be grouped together "
"with a RoomGroup as parent. If you look in the inspector for the RoomGroup, "
"there is a **Room Group Priority** which defaults to ``0``."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:83
msgid ""
"If you want a room or set of rooms to be internal, set the priority to a "
"higher value than the outer (enclosing) room, using the RoomGroup."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:85
msgid ""
"The system uses the priority setting to give priority to the internal room "
"when deciding which room a camera or object is within. Higher priority "
"*always* wins. Everything else works in a mostly similar way."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:87
msgid "The only differences:"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:89
msgid ""
"Portals between internal rooms and outer rooms should always *be placed in "
"the inner (internal) room*."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:90
msgid ""
"Portals of internal rooms are not considered as part of the bound of outer "
"rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:91
msgid ""
"``STATIC`` and ``DYNAMIC`` objects from outer rooms will not sprawl into "
"internal rooms. If you want objects to cross these portals, place them in "
"the internal room. This is to prevent large objects like terrain sections "
"sprawling into entire buildings, and rendering when not necessary."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:94
msgid "Internal room example"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:96
msgid ""
"The tent is a simple room inside a terrain room (which contains the ground, "
"the trees etc)."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:100
msgid ""
"To use internal rooms for buildings, it is usually a good idea to split the "
"*interior* mesh of the building from the *exterior*. The exterior can be "
"placed in the outer room (so it can be seen from outside, but not from the "
"inside), and the interior should be placed in the interior room (so it only "
"visible inside, or through the portal)."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:104
msgid ""
"This is perfect for improving performance in open world games. Often your "
"buildings can be scenes (including the rooms and portals) that can be "
"reused. When viewed from the outside, interiors will mostly be culled, and "
"when viewing from the inside other buildings and most of the outside will be "
"culled. The same goes for other players and objects that are inside and "
"outside the buildings."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:106
msgid ""
"*Scene is 'Diorama Eco scene' by Odo, with slight changes for illustration "
"purposes.* `CC Attribution <https://creativecommons.org/licenses/by/4.0/>`_"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:109
msgid "Internal room scenes"
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:111
msgid ""
"Let us look in detail at another practical example for an open world. We "
"want to place houses (as internal rooms) on an island, but have each house "
"as a self-contained scene containing both the interior *and* the external "
"mesh of the house."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:115
msgid ""
"We have created a Room node (which will become the internal room) into which "
"we have placed the interior meshes. We have also created a Portal with no "
"links (so autolinking will be used). The exterior mesh is *not* within the "
"room. It will be autoplaced, and we are intending for it to be placed within "
"the outer room."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:117
msgid ""
"However there is a problem. The naive autoplace algorithm will look at the "
"center of the exterior mesh, and attempt to place it *within* the internal "
"room. We want to avoid this somehow, as the idea of the exterior mesh is to "
"have something rendered from the outside, so it must be in the outer room "
"for everything to work."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:119
msgid ""
"To get around this problem, there is a special setting to enable you to "
"express a preference for autoplacing in an outer room. Each object has an "
"**Autoplace Priority** setting. When set to ``0``, there is no preference "
"(the object will be placed in the highest priority room)."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:121
msgid ""
"However, if we set this autoplace priority to ``-1`` for example, the "
"autoplace will always choose a ``-1`` priority room (if one is present at "
"that location). So if we set the outer room priority to ``-1``, it will "
"always place our exterior into our \"outside\" room."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:125
msgid ""
"This gives us a helpful extra bit of control for these kinds of situations, "
"and makes the entire system much more flexible."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:127
msgid ""
"As the default autoplace priority is ``0``, you can't effectively force "
"objects into RoomGroups with priority ``0``. However there are plenty of "
"priority values available so this should not be a problem in practice."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:129
msgid ""
"The final scene looks something like this, with houses instanced wherever "
"you want them on a giant outer room."
msgstr ""

#: ../../docs/tutorials/3d/portals/advanced_room_and_portal_usage.rst:133
msgid ""
"The house exteriors will be placed in the outer room, and therefore can "
"always be seen when looking from the outside. The interiors will only be "
"rendered when a view into the entry portals is visible."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:2
msgid "Editing Rooms and Portals"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:5
msgid "Example SceneTree"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:7
msgid "Putting all the ideas together, here is an example scene tree:"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:11
msgid ""
"We have used a :ref:`RoomGroup<class_RoomGroup>` to denote an outside area."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:12
msgid ""
"The :ref:`MeshInstance<class_MeshInstance>`\\ s inside the :ref:"
"`Room<class_Room>`\\ s are either ``STATIC`` or ``DYNAMIC``."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:13
msgid ""
"We have created a :ref:`Spatial<class_Spatial>` (I decided to call it "
"'Freeform', but you could use any name) under which to place ``STATIC`` and "
"``DYNAMIC`` objects that will be autoplaced in rooms (Freeform is inside the "
"``roomlist``, but *not* inside a room.)"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:15
msgid "The player and the monsters are on branches *OUTSIDE* the ``roomlist``."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:16
msgid ""
"The player and monster meshes have portal mode ``ROAMING`` so they can be in "
"any room."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:17
msgid "The camera is outside the ``roomlist``."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:22
msgid "Creating room systems in Blender (or other modeling tools)"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:24
msgid ""
"Although you can create your room system entirely within the editor, you can "
"also build rooms and portals within your modeling tool. There is one small "
"snag - modeling tools such as Blender have no knowledge of Room, RoomGroup "
"and Portal nodes. In order to work around this we use a series of naming "
"conventions. The first time Godot encounters these specially named nodes, it "
"will convert them into Rooms, RoomGroups and Portals."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:27
msgid "Postfix convention"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:29
msgid "``-room`` becomes a :ref:`Room<class_Room>`."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:30
msgid "``-roomgroup`` becomes a :ref:`RoomGroup<class_RoomGroup>`."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:31
msgid "``-portal`` becomes a :ref:`Portal<class_Portal>`."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:32
msgid "``-bound`` becomes a manual bound."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:34
msgid ""
"Rooms and RoomGroups should be created as Empties within Blender. Any mesh "
"children of the ``-room`` Empty will thus be placed in the Room during "
"conversion in Godot."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:36
#: ../../docs/development/cpp/object_class.rst:139
msgid "For example:"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:38
msgid "``kitchen-room`` - create a Room called \"kitchen\"."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:39
msgid "``outside-roomgroup`` - create a RoomGroup called \"outside\"."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:40
msgid "``kitchen-portal`` - create a Portal leading to the \"kitchen\" Room."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:45
msgid ""
"Portals are different from Rooms. In Portals, we need to specify the "
"geometry of the Portal in our modelling tool, in addition to just the name. "
"To do this your \"portal-to-be\" should be created as a Mesh."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:47
msgid ""
"Portal meshes have some restrictions to work properly. They must be convex, "
"and the polygon points should be in the same plane. The accuracy to the "
"plane does not have to be exact, as Godot will automatically average the "
"direction of the portal plane. Once converted to a :ref:"
"`Portal<class_Portal>` node, the snapping to the portal plane is enforced, "
"and the vertices are specified (and editable) as 2D coordinates in the "
"inspector, rather than 3D points."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:49
msgid ""
"The portal's naming is quite important. You can either name the portal ``-"
"portal`` which will attempt to autolink the Portal in Godot, or you can use "
"the name of the Room you wish to link the Portal to as a prefix."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:52
msgid "Wildcard"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:54
msgid ""
"In most cases, this can be done using a name such as ``kitchen-portal``. "
"However, there is one problem. Blender and Godot do not deal well when you "
"have multiple objects with the same name. What happens when we want more "
"than one Portal to lead to the kitchen?"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:56
msgid ""
"The workaround is the use of a *wildcard* character, ``*``. When Godot reads "
"the wildcard, it will ignore anything placed after it in the name."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:58
msgid "This means we can use the following portal names:"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:60
msgid "``kitchen*1-portal`` - creates a Portal leading to the \"kitchen\"."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:61
msgid ""
"``kitchen*2-portal`` - also creates a Portal leading to the \"kitchen\"."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:62
msgid "``kitchen*anything_you_want_here-portal`` - also works."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:64
msgid "Wildcards work on all of the nodes which use these naming conventions."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:67
msgid "Manual bounds"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:69
msgid ""
"Manual bounds are a way of explicitly setting the convex hull for a room, "
"and are used if they are present as children of a room in the scene tree. "
"Aside from the postfix, the naming is unimportant. They should be meshes (i."
"e. MeshInstance in Godot). Bear in mind they will be converted to convex "
"hulls during the conversion process, so they don't have to be perfect."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:71
msgid ""
"Once used during conversion, they will be converted to the ``IGNORE`` "
"**Portal Mode** and won't be shown. You can alternatively use **Generate "
"Points** within the editor to convert these to a set of points stored in the "
"room, and delete the original ``-bound`` MeshInstance."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:74
msgid "Portal point editing"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:76
msgid ""
"Portals are defined by a combination of the transform of the portal node, "
"and by a set of points which form the corners."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:78
msgid "The default portal has 4 corners as shown in the inspector:"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:82
msgid ""
"You can edit these points in the gizmo or inspector to make a better match "
"to the opening in your game level. It's generally better to keep the number "
"of points as low as possible for the efficiency of the system. For example, "
"it's better to risk rendering a little too much than to spend the time "
"culling objects at 20 different edges."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:87
msgid "Room point editing"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:89
msgid ""
"You also have the option to manually edit the points used to define the "
"convex hull of a room. These points are not present by default. You would "
"typically create them by pressing the **Generate Points** button in the "
"editor toolbar when a room is selected. This will transfer the auto bound "
"from the geometry (or manual ``-bound`` mesh) into the inspector. Once there "
"are points in the inspector, they will be used and override any other "
"method. So if you wish to revert your manual editing, delete all the room's "
"points."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:93
msgid ""
"Manually editing points can be useful in some situations, especially where "
"the auto-bound doesn't *quite* get the right result you want. It is usually "
"a good idea to use a lot of **Simplification** in the inspector for the Room "
"before generating the points. Be aware though that by default, the "
"**Simplification** value will be inherited from the RoomManager."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:96
msgid "RoomManager"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:99
msgid "Show Debug"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:101
msgid ""
"This can be used to control the amount of logging, especially the room "
"conversion logs. Debug will always be set to ``false`` on exported projects."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:104
msgid "Debug Sprawl"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:106
msgid ""
"This mode will only display meshes that are sprawling through portals from "
"the current camera room. Large statics that cross portals are usually the "
"ones you want to sprawl. Typical examples might be terrain mesh areas, or "
"large floor or ceiling meshes. You usually don't want things like door "
"frames to sprawl to the adjacent room - that is what fine tuning the "
"**Portal Margin** is for."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:109
msgid "Merge Meshes"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:111
msgid ""
"To keep drawcalls to a minimum, the system offers the option to "
"automatically merge similar ``STATIC`` meshes within a room (also known as "
"*static batching*). This can increase performance in many cases. The culling "
"accuracy is reduced, but as a room is a fairly logical unit for culling, "
"this trade off usually works in your favor."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:114
msgid "Plane Simplification"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:116
msgid ""
"In some cases, the convex hulls automatically generated for rooms may "
"contain a very large number of planes, particularly if you use curved "
"surfaces. This is not ideal because it slows down the system. This option "
"can optionally simplify hulls. The degree of simplification can be selected "
"by the user, between ``0`` (no simplification) and ``1`` (maximum "
"simplification). You can also override this value in individual rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:122
msgid "Portal Active"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:124
msgid ""
"Portals can be turned on and off at runtime. This is especially useful if "
"you have doors that can open and close."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:127
msgid "Two Way"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:129
msgid ""
"Portals can either be two-way or one-way. The default two-way portals are "
"quicker to set up in most circumstances, but one-way portals can be useful "
"in some cases. For example, you can use one-way portals to create windows "
"that can be seen out of, but not seen into. This can help performance when "
"viewing buildings from outdoors."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:132
msgid "Particle Systems"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:134
msgid ""
"Be aware that when placing ``STATIC`` particle systems, the AABB on "
"conversion may have zero size. This means the particle system may be "
"unexpectedly culled early. To prevent this, either set the particle system "
"``portal mode`` to ``DYNAMIC``, or alternatively, add an **Extra Cull "
"Margin** to the particle system in the Geometry Inspector."
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:137
msgid "Multimeshes"
msgstr ""

#: ../../docs/tutorials/3d/portals/editing_rooms_and_portals.rst:139
msgid ""
"Note that multimeshes will be culled as a group, rather than individually. "
"You should therefore attempt to keep them localised to the same area "
"wherever possible."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:2
msgid "Rooms and Portals example"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:4
msgid ""
"Download this tutorial project: `Simple Portals Example <https://github.com/"
"lawnjelly/godot-demo-projects/tree/portals_simple_demo/3d/portals/"
"room_and_portals_simple_example>`_ ."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:11
msgid ""
"This tutorial will introduce you to building a \"Hello World\" room system "
"with two rooms, and a portal in between."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:14
msgid "Step 1"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:18
msgid "Create a new project."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:19
msgid ""
"Add a :ref:`Spatial<class_Spatial>` as the scene root (on the screenshot, "
"it's called \"Root\")."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:20
msgid ""
"Next add a :ref:`RoomManager<class_RoomManager>` node. We will need this "
"later to process the room system."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:21
msgid ""
"Next we need to start defining our rooms. We create all our rooms under "
"another Spatial we have called 'RoomList'."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:22
msgid "Add a new :ref:`Room<class_Room>` node as a child of the roomlist."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:23
msgid "We have named the room ``Kitchen``."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:24
msgid ""
"We will now create the geometry of our room. The names you give to the "
"geometry is up to you."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:25
msgid ""
"Create a :ref:`MeshInstance<class_MeshInstance>` for the floor. Create a box "
"by adding a CubeMesh resource to the MeshInstance. Scale and position it to "
"form a floor."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:26
msgid ""
"Create MeshInstances for the walls. Create more box meshes for this, then "
"scale and position them. Be sure to leave an opening on one side. You will "
"need to create two wall segments to do this on that side."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:29
msgid "Step 2"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:33
msgid "Now we need to create the other room."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:34
msgid ""
"You can do this simply by duplicating the first room (select the ``Kitchen`` "
"node, right click and choose **Duplicate**)."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:35
msgid "Rotate and position the second room so that the openings line up."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:36
msgid "Rename the second room to ``Lounge``."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:39
msgid "Step 3"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:43
msgid "Next, we will add a portal between the two rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:44
msgid "Create a new :ref:`Portal<class_Portal>` in the kitchen."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:45
msgid ""
"Scale and position the portal using the node ``Transform`` in the inspector, "
"so it fits within the opening between the two rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:46
msgid ""
"The portal plane should face *outward* from the source room, i.e. towards "
"the lounge. This direction is indicated by the arrow in the editor gizmo, "
"and portal gizmo's color."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:49
msgid "Step 4"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:53
msgid ""
"To make things more exciting, we want to add a few more boxes to the rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:54
msgid ""
"Placing these boxes as children or grandchildren of the room nodes "
"explicitly tells the system which room the objects should be in. However, we "
"can also create these objects *outside* the rooms. Provided they are in the "
"RoomList branch, the system will attempt to automatically place them in the "
"correct room at runtime."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:55
msgid ""
"On the screenshot, the boxes were places as children of a Spatial I have "
"called ``Freeform`` to keep things tidy."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:56
msgid ""
"Boxes also have a green SpatialMaterial assigned to them to make them stand "
"out more from the rest of the room."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:57
msgid ""
"Let's also create an :ref:`OmniLight<class_OmniLight>` so it will be "
"autoplaced in one of the rooms."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:60
msgid "Step 5"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:64
msgid ""
"Next comes a crucial stage. We must let the RoomManager know where the rooms "
"are!"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:65
msgid ""
"Select the RoomManager and look in the Inspector window in the **Paths** "
"section."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:66
msgid ""
"You need to assign the **Room List** to point to the RoomList node we "
"created earlier (which is the parent of all the rooms)."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:69
msgid "Step 6"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:73
msgid ""
"Make sure you have saved your project before this next step. It is always a "
"good idea to save and make a backup before converting."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:74
msgid ""
"Select the RoomManager, and you will see a button in the toolbar at the top "
"of the 3d editor viewport called **Convert Rooms**. Press this button."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:75
msgid ""
"If all goes well, the RoomManager will have created the runtime data (the "
"*room graph*) to perform occlusion culling at runtime."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:76
msgid ""
"You can see a log of the conversion process in the output window. This is "
"helpful for finding problems."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:77
msgid ""
"If you now move the editor camera inside the rooms, you should see the "
"meshes in the opposite room being culled depending on what you can see "
"through the portal."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:80
#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:205
#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:240
msgid "Conclusion"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:82
msgid ""
"This concludes this simple tutorial. Don't be afraid to experiment with the "
"new room system you have created."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:85
msgid "Some things to try"
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:87
msgid ""
"Create different types of geometry. CSG nodes, Particle systems, and "
"Multimeshes are all supported by the portal system."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:88
msgid ""
"Try creating a Camera and adding it to the scene. If you run the scene you "
"will notice that the portal culling is not active. This is because the "
"``room graph`` must be created each time you load a level, by converting the "
"rooms. Instead of using a button in the editor, in real games you call a "
"function in the RoomManager to convert the level, called "
"``rooms_convert()``. Try this out with a script, perhaps running within a "
"``_ready()`` function."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:89
msgid ""
"The geometry you created so far is all ``STATIC`` (non-moving). If you look "
"in the inspector for geometry nodes, you will see they derive from "
"``CullInstance``. Here you can set the **Portal Mode** for objects in the "
"portal system. This determines how the node is processed."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:90
msgid ""
"If you now write a script to move one of your objects within a room and view "
"it through a Camera as the scene runs, you may notice that the object gets "
"culled incorrectly. This is because ``STATIC`` objects are assumed not to "
"move in the system. If you instead change the object to ``DYNAMIC``, it "
"should now update the culling correctly."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:91
msgid ""
"There are several ``portal_modes``, these are described in the main "
"documentation."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:92
msgid ""
"Try turning the portal on and off at runtime from your script. You can call "
"``set_portal_active()`` to open and close the portal."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:93
msgid ""
"If you select the portal, you should see 4 handles appear. Try dragging the "
"portal points with the mouse, and see how it affects the objects that are "
"culled."
msgstr ""

#: ../../docs/tutorials/3d/portals/rooms_and_portals_example.rst:94
msgid ""
"If you select a room and click the **Generate Points** button in the "
"toolbar, it will store the points of the room hull in the room inspector. "
"You can now edit these with the gizmo handles."
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:4
msgid "3D text"
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:9
msgid ""
"In a project, there may be times when text needs to be created as part of a "
"3D scene and not just in the HUD. Godot provides two methods to do this. The "
"Label3D node and the text mesh for a MeshInstance node."
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:14
msgid ""
"This page does **not** cover how to display a GUI scene in a 3D environment. "
"For information on how to do that see `this <https://github.com/godotengine/"
"godot-demo-projects/tree/master/viewport/2d_in_3d>`__ demo project."
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:19
msgid "Label3D"
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:23
msgid ""
"Label3D behaves like a label node but in a 3D space. Unlike label node this "
"can not inherit properties of a GUI theme. However its look remains "
"customizable and uses the same DynamicFont and BitmapFont subresources "
"control nodes use."
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:28
msgid ""
"Label3D has minimal interaction with a 3D environment, it can be lit up and "
"shaded by light sources if the shaded flag is enabled, but it will not cast "
"a shadow, even with cast shadow turned on under the nodes GeometryInstance3D "
"settings. This is because the node is a quad mesh (one glyph per quad) with "
"transparent textures and has the same limitations as Sprite3D. See :ref:"
"`this page <doc_3d_rendering_limitations_transparency_sorting>` for more "
"information."
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:37
msgid "Text mesh"
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:41
msgid ""
"Text meshes have similarities to Label3D. They display text in a 3D scene, "
"and will use the same DynamicFont subresource. However text is 3D and has "
"the properties of a mesh. A text mesh cast shadows onto the environment and "
"can have a material applied to it. Here is an example of a texture and how "
"it's applied to the mesh."
msgstr ""

#: ../../docs/tutorials/3d/3d_text.rst:51
msgid ""
"There are two limitations to text mesh. It can't use bitmap fonts, or fonts "
"with self intersection."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:4
msgid "Introduction to the animation features"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:6
msgid ""
"The :ref:`class_AnimationPlayer` node allows you to create anything from "
"simple to complex animations."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:9
msgid "In this guide you learn to:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:11
msgid "Work with the Animation Panel"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:12
msgid "Animate any property of any node"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:13
msgid "Create a simple animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:14
msgid "Call functions with the powerful Call Function Tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:16
msgid ""
"In Godot, you can animate anything available in the Inspector, such as Node "
"transforms, sprites, UI elements, particles, visibility and color of "
"materials, and so on. You can also modify values of script variables and "
"call any function."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:22
msgid "Create an AnimationPlayer node"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:24
msgid ""
"To use the animation tools we first have to create an :ref:"
"`class_AnimationPlayer` node."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:27
msgid ""
"The AnimationPlayer node type is the data container for your animations. One "
"AnimationPlayer node can hold multiple animations, that can automatically "
"transition to one another."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:34
msgid "The AnimationPlayer node"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:36
msgid ""
"After creating one click on the AnimationPlayer node in the Node tab to open "
"the Animation Panel at the bottom of the viewport."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:42
msgid "The animation panel position"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:44
msgid "It consists of four parts:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:49
msgid "The animation panel"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:51
msgid "Animation controls (i.e. add, load, save, and delete animations)"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:52
msgid "The tracks listing"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:53
msgid "The timeline with keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:54
msgid ""
"The timeline and track controls, where you can zoom the timeline and edit "
"tracks for example."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:58
msgid "Computer animation relies on keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:60
msgid "A keyframe defines the value of a property at a certain point in time."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:62
msgid ""
"Diamond shapes represent keyframes in the timeline. A line between two "
"keyframes indicates that the value hasn't changed."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:68
msgid "Keyframes in Godot"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:70
msgid ""
"The engine interpolates values between keyframes, resulting in a gradual "
"change in values over time."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:76
msgid "Two keyframes are all it takes to obtain a smooth motion"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:78
msgid ""
"The timeline lets you insert keyframes and change their timing. It also "
"defines how long the animation is."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:84
msgid "The timeline in the animation panel"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:86
msgid ""
"Each line of the Animation Panel is an animation track. Normal and Transform "
"tracks reference node properties. Their name or id is a path to the node and "
"the affected property."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:93
msgid "Example of Normal animation tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:97
msgid ""
"If you animate the wrong property, you can edit a track's path anytime. "
"Double click on it and type the new path. Play the animation using the "
"\"Play from beginning\" button |Play from beginning| (or pressing :kbd:"
"`Shift + D` on keyboard) to see the changes instantly."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:380
msgid "Play from beginning"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:103
msgid "Tutorial: Creating a simple animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:108
msgid ""
"For this tutorial, we'll create a Sprite node with an AnimationPlayer as its "
"child. We will animate the sprite to move between two points on the screen."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:114
msgid "Our scene setup"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:118
msgid ""
"AnimationPlayer inherits from Node instead of Node2D or Spatial, which means "
"that the child nodes will not inherit the transform from the parent nodes "
"due to a bare Node being present in the hierarchy."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:122
msgid ""
"Therefore, it is not recommended to add nodes that have a 2D/3D transform as "
"a child of an AnimationPlayer node."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:125
msgid ""
"The sprite holds an image texture. We animate that sprite to move between "
"two points on the screen. For this tutorial, use the default Godot icon as "
"the sprite's texture. As a starting point, move the sprite to a left "
"position on the screen."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:130
msgid ""
"Select the AnimationPlayer node, then click the \"Animation\" button in the "
"animation editor. From the list select \"New\" (|Add Animation|) to add a "
"new animation. And Enter a name for the animation in the dialog box."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:381
msgid "Add Animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:138
msgid "Add a new animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:141
msgid "Adding a track"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:143
msgid ""
"To add a new track for our sprite, select it and take a look in the toolbar:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:149
msgid "Convenience buttons"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:151
msgid ""
"These switches and buttons allow you to add keyframes for the selected "
"node's location, rotation, and scale respectively."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:154
msgid ""
"Deselect rotation, because we are only interested in the location of our "
"sprite for this tutorial and click on the key button."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:157
msgid ""
"As we don't have a track already set up for the transform/location property, "
"Godot asks whether it should set it up for us. Click **Create**."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:160
msgid ""
"This creates a new track and our first keyframe at the beginning of the "
"timeline:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:166
msgid "The sprite track"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:169
msgid "The second keyframe"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:171
msgid ""
"Now we need to set the destination where our sprite should be headed and how "
"much time it takes to get there."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:174
msgid ""
"Let's say, we want it to take 2 seconds to go to the other point. By default "
"the animation is set to last only 1 second, so change this in the timeline "
"controls in animation panel's lower panel to 2."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:181
msgid "Animation length"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:183
msgid ""
"Click on the timeline header near the 2-second mark and move the sprite to "
"the target destination on the right side."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:186
msgid ""
"Again, click the key button in the toolbar. This creates our second keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:190
msgid "Run the animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:192
msgid "Click on the \"Play from beginning\" (|Play from beginning|) button."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:194
msgid "Yay! Our animation runs:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:199
msgid "The animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:202
msgid "Back and forth"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:204
msgid ""
"Godot has an additional feature here. Like said before, Godot always "
"calculates the frames between two keyframes. In a loop, the first keyframe "
"is also the last keyframe, if no keyframe is specified at the end."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:212
msgid "Animation loop"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:214
msgid ""
"If you set the animation length to 4 seconds now, the animation moves back "
"and forth. You can change this behavior if you change the track's loop mode. "
"This is covered in the next chapter."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:219
#: ../../docs/tutorials/animation/introduction.rst:227
msgid "Track settings"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:221
msgid ""
"Each track has a settings panel at the end, where you can set the update "
"mode, the track interpolation, and the loop mode."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:229
msgid ""
"The update mode of a track tells Godot when to update the property values. "
"This can be:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:232
msgid "**Continuous:** Update the property on each frame."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:233
msgid "**Discrete:** Only update the property on keyframes."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:234
msgid ""
"**Trigger:** Only update the property on keyframes or triggers. Triggers are "
"a type of keyframe used by the ``current_animation`` property of a :ref:"
"`class_AnimationPlayer`, and Animation Playback tracks."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:238
msgid ""
"**Capture:** If the first keyframe's time is greater than ``0.0``, the "
"current value of the property will be remembered and will be blended with "
"the first animation key. For example, you could use the Capture mode to move "
"a node that's located anywhere to a specific location."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:247
msgid "Track mode"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:249
msgid ""
"In normal animations, you usually use \"Continuous\". The other types are "
"used to script complex animations."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:252
msgid ""
"The interpolation tells Godot how to calculate the frame values between the "
"keyframes. These interpolation modes are supported:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:255
msgid "Nearest: Set the nearest keyframe value"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:256
msgid ""
"Linear: Set the value based on a linear function calculation between the two "
"keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:258
msgid ""
"Cubic: Set the value based on a cubic function calculation between the two "
"keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:264
msgid "Track interpolation"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:266
msgid ""
"Cubic interpolation leads to a more natural movement, where the animation is "
"slower at a keyframe and faster between keyframes. This is usually used for "
"character animation. Linear interpolation creates more of a robotic movement."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:271
msgid ""
"Godot supports two loop modes, which affect the animation if it's set to "
"loop:"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:277
msgid "Loop modes"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:279
msgid ""
"Clamp loop interpolation: When this is selected, the animation stops after "
"the last keyframe for this track. When the first keyframe is reached again, "
"the animation will reset to its values."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:282
msgid ""
"Wrap loop interpolation: When this is selected, Godot calculates the "
"animation after the last keyframe to reach the values of the first keyframe "
"again."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:287
#: ../../docs/tutorials/animation/introduction.rst:300
msgid "Keyframes for other properties"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:289
msgid ""
"Godot doesn't restrict you to only edit transform properties. Every property "
"can be used as a track where you can set keyframes."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:292
msgid ""
"If you select your sprite while the animation panel is visible, you get a "
"small keyframe button for all the sprite's properties. Click on this button "
"and Godot automatically adds a track and keyframe to the current animation."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:303
msgid "Edit keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:305
msgid ""
"For advanced use and to edit keyframes in detail, You can click on them to "
"bring up the keyframe editor in the inspector. You can use this to directly "
"edit its values."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:312
msgid "Keyframe editor editing a key"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:314
msgid ""
"Additionally, you can also edit the easing value for this keyframe by "
"clicking and dragging the easing setting. This tells Godot, how to change "
"the property values when it reaches this keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:318
msgid ""
"You usually tweak your animations this way, when the movement doesn't \"look "
"right\"."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:322
msgid "Advanced: Call Method tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:324
msgid ""
"Godot's animation engine doesn't stop here. If you're already comfortable "
"with Godot's scripting language :ref:`doc_gdscript` and :doc:`/classes/"
"index` you know that each node type is a class and has a bunch of callable "
"methods."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:330
msgid ""
"For example, the :ref:`class_AudioStreamPlayer` node type has a method to "
"play an audio stream."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:333
msgid ""
"Wouldn't it be great to use a method at a specific keyframe in an animation? "
"This is where \"Call Method Tracks\" come in handy. These tracks reference a "
"node again, this time without a reference to a property. Instead, a keyframe "
"holds the name and arguments of a method, that Godot should call when it "
"reaches this keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:339
msgid ""
"To demonstrate, we're going to use a call method track to play audio at a "
"specific keyframe. Normally to play audio you should use an audio track, but "
"for the sake of demonstrating methods we're going to do it this way."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:343
msgid ""
"Add a :ref:`class_AudioStreamPlayer` to the Scene Tree and setup a stream "
"using an audio file you put in your project."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:346
msgid ""
"Click on \"Add track\" (|Add track|) on the animation panel's track controls."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:382
msgid "Add track"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:349
msgid "Select \"Add Call Method Track\" from the list of possible track types."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:354
msgid "Add Call Method Track"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:356
msgid ""
"Select the :ref:`class_AudioStreamPlayer` node in the selection window. "
"Godot adds the track with the reference to the node."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:362
msgid "Select AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:364
msgid ""
"Right click the timeline where Godot should play the sample and click the "
"\"Insert Key\" option. This will bring up a list of methods that can be "
"called for the AudioStreamPlayer node. Select the first one."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:371
msgid ""
"When Godot reaches the keyframe, Godot calls the :ref:"
"`class_AudioStreamPlayer` node's \"play\" function and the stream plays."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:375
msgid ""
"You can change its position by dragging it on the timeline, you can also "
"click on the keyframe and use the keyframe settings in the inspector."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:385
msgid "Using RESET tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:387
msgid ""
"You can set up a special *RESET* animation to contain the \"default pose\". "
"This is used to ensure that the default pose is restored when you save the "
"scene and open it again in the editor."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:391
msgid ""
"For existing tracks, you can add an animation called \"RESET\" (case-"
"sensitive), then add tracks for each property that you want to reset. The "
"only keyframe should be at time 0, and give it the desired default value for "
"each track."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:396
msgid ""
"If AnimationPlayer's **Reset On Save** property is set to ``true``, the "
"scene will be saved with the effects of the reset animation applied (as if "
"it had been seeked to time ``0.0``). This only affects the saved file – the "
"property tracks in the editor stay where they were."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:402
msgid ""
"If you want to reset the tracks in the editor, select the AnimationPlayer "
"node, open the **Animation** bottom panel then choose **Apply Reset** in the "
"animation editor's **Animation** dropdown menu."
msgstr ""

#: ../../docs/tutorials/animation/introduction.rst:406
msgid ""
"When adding tracks on new animations, the editor will ask you to "
"automatically create a RESET track when using the keyframe icon next to a "
"property in the inspector. This does not apply on tracks created with Godot "
"versions prior to 3.4, as the animation reset track feature was added in 3.4."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:4
msgid "Cutout animation"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:7
#: ../../docs/tutorials/inputs/inputevent.rst:7
msgid "What is it?"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:9
msgid ""
"Traditionally, `cutout animation <https://en.wikipedia.org/wiki/"
"Cutout_animation>`__ is a type of `stop motion animation <https://en."
"wikipedia.org/wiki/Stop_motion>`__ in which pieces of paper (or other thin "
"material) are cut into special shapes and arranged in two-dimensional "
"representations of characters and objects. Characters' bodies are usually "
"made out of several pieces. The pieces are arranged and photographed once "
"for each frame of the film. The animator moves and rotates the parts in "
"small increments between each shot to create the illusion of movement when "
"the images are played back quickly in sequence."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:18
msgid ""
"Simulations of cutout animation can now be created using software as seen in "
"`South Park <https://en.wikipedia.org/wiki/South_Park>`__ and `Jake and the "
"Never Land Pirates <https://en.wikipedia.org/wiki/"
"Jake_and_the_Never_Land_Pirates>`__."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:22
msgid ""
"In video games, this technique has also become popular. Examples of this are "
"`Paper Mario <https://en.wikipedia.org/wiki/Super_Paper_Mario>`__ or `Rayman "
"Origins <https://en.wikipedia.org/wiki/Rayman_Origins>`__ ."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:27
msgid "Cutout animation in Godot"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:29
msgid ""
"Godot provides tools for working with cutout rigs, and is ideal for the "
"workflow:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:31
msgid ""
"**The animation system is fully integrated with the engine**: This means "
"animations can control much more than just motion of objects. Textures, "
"sprite sizes, pivots, opacity, color modulation, and more, can all be "
"animated and blended."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:35
msgid ""
"**Combine animation styles**: AnimatedSprite allows traditional cel "
"animation to be used alongside cutout animation. In cel animation different "
"animation frames use entirely different drawings rather than the same pieces "
"positioned differently. In an otherwise cutout-based animation, cel "
"animation can be used selectively for complex parts such as hands, feet, "
"changing facial expressions, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:41
msgid ""
"**Custom Shaped Elements**: Custom shapes can be created with :ref:"
"`Polygon2D <class_Polygon2D>` allowing UV animation, deformations, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:44
msgid ""
"**Particle Systems**: A cutout animation rig can be combined with particle "
"systems. This can be useful for magic effects, jetpacks, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:46
msgid ""
"**Custom Colliders**: Set colliders and influence areas in different parts "
"of the skeletons, great for bosses and fighting games."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:48
msgid ""
"**Animation Tree**: Allows complex combinations and blending between several "
"animations, the same way it works in 3D."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:51
#: ../../docs/tutorials/shaders/shader_materials.rst:24
msgid "And much more!"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:54
msgid "Making of GBot"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:56
msgid ""
"For this tutorial, we will use as demo content the pieces of the `GBot "
"<https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ character, created by "
"Andreas Esau."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:62
msgid ""
"Get your assets: :download:`gbot_resources.zip <files/gbot_resources.zip>`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:65
msgid "Setting up the rig"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:67
msgid "Create an empty Node2D as root of the scene, we will work under it:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:71
msgid ""
"The first node of the model is the hip. Generally, both in 2D and 3D, the "
"hip is the root of the skeleton. This makes it easier to animate:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:77
msgid ""
"Next will be the torso. The torso needs to be a child of the hip, so create "
"a child sprite and load the torso texture, later accommodate it properly:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:82
msgid ""
"This looks good. Let's see if our hierarchy works as a skeleton by rotating "
"the torso. We can do this be pressing :kbd:`E` to enter rotate mode, and "
"dragging with the left mouse button. To exit rotate mode hit :kbd:`ESC`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:88
msgid "The rotation pivot is wrong and needs to be adjusted."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:90
msgid ""
"This small cross in the middle of the :ref:`Sprite <class_Sprite>` is the "
"rotation pivot:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:96
msgid "Adjusting the pivot"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:98
msgid ""
"The pivot can be adjusted by changing the *offset* property in the Sprite:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:103
msgid ""
"The pivot can also be adjusted *visually*. While hovering over the desired "
"pivot point,  press :kbd:`V` to move the pivot there for the selected "
"Sprite. There is also a tool in the tool bar that has a similar function."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:110
msgid ""
"Continue adding body pieces, starting with the right arm. Make sure to put "
"each sprite in its correct place in the hierarchy, so its rotations and "
"translations are relative to its parent:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:116
msgid ""
"With the left arm there's a problem. In 2D, child nodes appear in front of "
"their parents:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:121
msgid ""
"We want the left arm to appear *behind* the hip and the torso. We could move "
"the left arm nodes behind the hip (above the hip node in the scene "
"hierarchy), but then the left arm is no longer in its proper place in the "
"hierarchy. This means it wouldn't be affected by the movement of the torso. "
"We'll fix this problem with ``RemoteTransform2D`` nodes."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:127
msgid ""
"You can also fix depth ordering problems by adjusting the Z property of any "
"node inheriting from Node2D."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:131
msgid "RemoteTransform2D node"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:133
msgid ""
"The :ref:`RemoteTransform2D <class_RemoteTransform2D>` node transforms nodes "
"somewhere else in the hierarchy. This node applies its own transform "
"(including any transformation it inherits from its parents) to the remote "
"node it targets."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:137
msgid ""
"This allows us to correct the visibility order of our elements, "
"independently of the locations of those parts in the cutout hierarchy."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:140
msgid ""
"Create a ``RemoteTransform2D`` node as a child of the torso. Call it "
"``remote_arm_l``. Create another RemoteTransform2D node inside the first and "
"call it ``remote_hand_l``. Use the ``Remote Path`` property of the two new "
"nodes to target the ``arm_l`` and ``hand_l`` sprites respectively:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:147
msgid ""
"Moving the ``RemoteTransform2D`` nodes now moves the sprites. So we can "
"create animations by adjusting the ``RemoteTransform2D`` transforms:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:153
msgid "Completing the skeleton"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:155
msgid ""
"Complete the skeleton by following the same steps for the rest of the parts. "
"The resulting scene should look similar to this:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:160
msgid ""
"The resulting rig will be easy to animate. By selecting the nodes and "
"rotating them you can animate forward kinematics (FK) efficiently."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:163
msgid "For simple objects and rigs this is fine, but there are limitations:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:165
msgid ""
"Selecting sprites in the main viewport can become difficult in complex rigs. "
"The scene tree ends up being used to select parts instead, which can be "
"slower."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:167
msgid ""
"Inverse Kinematics (IK) is useful for animating extremities like hands and "
"feet, and can't be used with our rig in its current state."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:170
msgid "To solve these problems we'll use Godot's skeletons."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:173
msgid "Skeletons"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:175
msgid ""
"In Godot there is a helper to create \"bones\" between nodes. The bone-"
"linked nodes are called skeletons."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:178
msgid ""
"As an example, let's turn the right arm into a skeleton. To create a "
"skeleton, a chain of nodes must be selected from top to bottom:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:183
msgid "Then, click on the Skeleton menu and select ``Make Bones``."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:187
msgid "This will add bones covering the arm, but the result may be surprising."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:191
msgid ""
"Why does the hand lack a bone? In Godot, a bone connects a node with its "
"parent. And there's currently no child of the hand node. With this knowledge "
"let's try again."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:195
msgid ""
"The first step is creating an endpoint node. Any kind of node will do, but :"
"ref:`Position2D <class_Position2D>` is preferred because it's visible in the "
"editor. The endpoint node will ensure that the last bone has orientation."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:202
msgid ""
"Now select the whole chain, from the endpoint to the arm and create bones:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:207
msgid ""
"The result resembles a skeleton a lot more, and now the arm and forearm can "
"be selected and animated."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:210
msgid ""
"Create endpoints for all important extremities. Generate bones for all "
"articulable parts of the cutout, with the hip as the ultimate connection "
"between all of them."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:214
msgid ""
"You may notice that an extra bone is created when connecting the hip and "
"torso. Godot has connected the hip node to the scene root with a bone, and "
"we don't want that. To fix this, select the root and hip node, open the "
"Skeleton menu, click ``clear bones``."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:221
msgid "Your final skeleton should look something like this:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:225
msgid ""
"You might have noticed a second set of endpoints in the hands. This will "
"make sense soon."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:228
msgid ""
"Now that the whole figure is rigged, the next step is setting up the IK "
"chains. IK chains allow for more natural control of extremities."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:232
msgid "IK chains"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:234
msgid ""
"IK stands for inverse kinematics. It's a convenient technique for animating "
"the position of hands, feet and other extremities of rigs like the one we've "
"made. Imagine you want to pose a character's foot in a specific position on "
"the ground. Without IK chains, each motion of the foot would require "
"rotating and positioning several other bones (the shin and the thigh at "
"least). This would be quite complex and lead to imprecise results."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:241
msgid ""
"IK allows us to move directly the foot while the shin and thigh self-adjust."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:243
msgid ""
"To create an IK chain, select a chain of bones from endpoint to the base for "
"the chain. For example, to create an IK chain for the right leg, select the "
"following:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:249
msgid "Then enable this chain for IK. Go to Edit > Make IK Chain."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:253
msgid "As a result, the base of the chain will turn *Yellow*."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:257
msgid ""
"Once the IK chain is set-up grab any child or grand-child of the base of the "
"chain (e.g. a foot) and move it. You'll see the rest of the chain adjust as "
"you adjust its position."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:264
msgid "Animation tips"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:266
msgid ""
"The following section will be a collection of tips for creating animation "
"for your cutout rigs. For more information on how the animation system in "
"Godot works, see :ref:`doc_introduction_animation`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:271
msgid "Setting keyframes and excluding properties"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:273
msgid ""
"Special contextual elements appear in the top toolbar when the animation "
"editor window is open:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:278
msgid ""
"The key button inserts location, rotation, and scale keyframes for the "
"selected objects or bones at the current playhead position."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:281
msgid ""
"The \"loc\", \"rot\", and \"scl\" toggle buttons to the left of the key "
"button modify its function, allowing you to specify which of the three "
"properties keyframes will be created for."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:285
msgid ""
"Here's an illustration of how this can be useful: Imagine you have a node "
"which already has two keyframes animating its scale only. You want to add an "
"overlapping rotation movement to the same node. The rotation movement should "
"begin and end at different times from the scale change that's already set "
"up. You can use the toggle buttons to have only rotation information added "
"when you add a new keyframe. This way, you can avoid adding unwanted scale "
"keyframes which would disrupt the existing scale animation."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:294
msgid "Creating a rest pose"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:296
msgid ""
"Think of a rest pose as a default pose that your cutout rig should be set to "
"when no other pose is active in your game. Create a rest pose as follows:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:299
msgid ""
"1. Make sure the rig parts are positioned in what looks like a \"resting\" "
"arrangement."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:302
msgid "Create a new animation, rename it \"rest\"."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:304
msgid "Select all nodes in your rig (box selection should work fine)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:306
msgid ""
"4. Make sure the \"loc\", \"rot\", and \"scl\" toggle buttons are all active "
"in the toolbar."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:309
msgid ""
"5. Press the key button. Keys will be inserted for all selected parts "
"storing their current arrangement. This pose can now be recalled when "
"necessary in your game by playing the \"rest\" animation you've created."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:316
msgid "Modifying rotation only"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:318
msgid ""
"When animating a cutout rig, often it's only the rotation of the nodes that "
"needs to change. Location and scale are rarely used."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:322
msgid ""
"So when inserting keys, you might find it convenient to have only the "
"\"rot\" toggle active most of the time:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:327
msgid ""
"This will avoid the creation of unwanted animation tracks for position and "
"scale."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:331
msgid "Keyframing IK chains"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:333
msgid ""
"When editing IK chains, it's not necessary to select the whole chain to add "
"keyframes. Selecting the endpoint of the chain and inserting a keyframe will "
"automatically insert keyframes for all other parts of the chain too."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:338
msgid "Visually move a sprite behind its parent"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:340
msgid ""
"Sometimes it is necessary to have a node change its visual depth relative to "
"its parent node during an animation. Think of a character facing the camera, "
"who pulls something out from behind his back and holds it out in front of "
"him. During this animation the whole arm and the object in his hand would "
"need to change their visual depth relative to the body of the character."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:346
msgid ""
"To help with this there's a keyframable \"Behind Parent\" property on all "
"Node2D-inheriting nodes. When planning your rig, think about the movements "
"it will need to perform and give some thought to how you'll use \"Behind "
"Parent\" and/or RemoteTransform2D nodes. They provide overlapping "
"functionality."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:354
msgid "Setting easing curves for multiple keys"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:356
msgid "To apply the same easing curve to multiple keyframes at once:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:358
msgid "Select the relevant keys."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:359
msgid ""
"Click on the pencil icon in the bottom right of the animation panel. This "
"will open the transition editor."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:361
msgid "In the transition editor, click on the desired curve to apply it."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:366
msgid "2D Skeletal deform"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:368
msgid ""
"Skeletal deform can be used to augment a cutout rig, allowing single pieces "
"to deform organically (e.g. antennae that wobble as an insect character "
"walks)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:371
msgid ""
"This process is described in a :ref:`separate tutorial <doc_2d_skeletons>`."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:4
msgid "2D skeletons"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:9
msgid ""
"When working with 3D, skeletal deforms are common for characters and "
"creatures and most 3D modelling applications support it. For 2D, as this "
"function is not used as often, it's difficult to find mainstream software "
"aimed for this."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:13
msgid ""
"One option is to create animations in third-party software such as Spine or "
"Dragonbones. From Godot 3.1 onwards, though, this functionality is supported "
"built-in."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:17
msgid ""
"Why would you want to do skeletal animations directly in Godot? The answer "
"is that there are many advantages to it:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:20
msgid ""
"Better integration with the engine, so less hassle importing and editing "
"from an external tool."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:22
msgid ""
"Ability to control particle systems, shaders, sounds, call scripts, colors, "
"transparency, etc. in animations."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:24
msgid ""
"The built-in skeletal system in Godot is very efficient and designed for "
"performance."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:27
msgid "The following tutorial will, then, explain 2D skeletal deformations."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:34
msgid ""
"Before starting, we recommend you to go through the :ref:"
"`doc_cutout_animation` tutorial to gain a general understanding of animating "
"within Godot."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:38
msgid ""
"For this tutorial, we will be using a single image to construct our "
"character. Download it from :download:`gBot_pieces.png <img/gBot_pieces."
"png>` or save the image below."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:44
msgid ""
"It is also advised to download the final character image :download:"
"`gBot_complete.png <img/gBot_complete.png>` to have a good reference for "
"putting the different pieces together."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:51
msgid "Creating the polygons"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:53
msgid ""
"Create a new scene for your model (if it's going to be an animated "
"character, you may want to use a ``KinematicBody2D``). For ease of use, an "
"empty 2D node is created as a root for the polygons."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:57
msgid ""
"Begin with a ``Polygon2D`` node. There is no need to place it anywhere in "
"the scene for now, so simply create it like this:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:62
msgid ""
"Select it and assign the texture with the character pieces you have "
"downloaded before:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:67
msgid ""
"Drawing a polygon directly is not advised. Instead, open the \"UV\" dialog "
"for the polygon:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:72
msgid ""
"Head over to the *Points* mode, select the pencil and draw a polygon around "
"the desired piece:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:77
msgid ""
"Duplicate the polygon node and give it a proper name. Then, enter the \"UV\" "
"dialog again and replace the old polygon with another one in the new desired "
"piece."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:81
msgid ""
"When you duplicate nodes and the next piece has a similar shape, you can "
"edit the previous polygon instead of drawing a new one."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:84
msgid ""
"After moving the polygon, remember to update the UV by selecting Edit -> "
"\"Polygon -> UV\" in the Polygon 2D UV Editor."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:89
msgid "Keep doing this until you mapped all pieces."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:93
msgid ""
"You will notice that pieces for nodes appear in the same layout as they do "
"in the original texture. This is because by default, when you draw a "
"polygon, the UV and points are the same."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:97
msgid ""
"Rearrange the pieces and build the character. This should be pretty quick. "
"There is no need to change pivots, so don't bother making sure rotation "
"pivots for each piece are right; you can leave them be for now."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:103
msgid ""
"Ah, the visual order of the pieces is not correct yet, as some are covering "
"wrong pieces. Rearrange the order of the nodes to fix this:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:108
msgid ""
"And there you go! It was definitely much easier than in the cutout tutorial."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:111
msgid "Creating the skeleton"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:113
msgid ""
"Create a ``Skeleton2D`` node as a child of the root node. This will be the "
"base of our skeleton:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:118
msgid ""
"Create a ``Bone2D`` node as a child of the skeleton. Put it on the hip "
"(usually skeletons start here). The bone will be pointing to the right, but "
"you can ignore this for now."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:124
msgid "Keep creating bones in hierarchy and naming them accordingly."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:128
msgid ""
"At the end of this chain, there will be a *jaw* node. It is, again, very "
"short and pointing to the right. This is normal for bones without children. "
"The length of *tip* bones can be changed with a property in the inspector:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:134
msgid ""
"In this case, we don't need to rotate the bone (coincidentally the jaw "
"points right in the sprite), but in case you need to, feel free to do it. "
"Again, this is only really needed for tip bones as nodes with children don't "
"usually need a length or a specific rotation."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:139
msgid "Keep going and build the whole skeleton:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:143
msgid ""
"You will notice that all bones raise an annoying warning about a missing "
"rest pose. This means that it's time to set one. Go to the *skeleton* node "
"and create a rest pose. This pose is the default one, you can come back to "
"it anytime you want (which is very handy for animating):"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:150
msgid ""
"The warnings will go away. If you modify the skeleton (add/remove bones) you "
"will need to set the rest pose again."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:154
msgid "Deforming the polygons"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:156
msgid ""
"Select the previously created polygons and assign the skeleton node to their "
"``Skeleton`` property. This will ensure that they can eventually be deformed "
"by it."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:162
msgid "Click the property highlighted above and select the skeleton node:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:166
msgid ""
"Again, open the UV editor for the polygon and go to the *Bones* section."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:170
msgid ""
"You will not be able to paint weights yet. For this you need to synchronize "
"the list of bones from the skeleton with the polygon. This step is done only "
"once and manually (unless you modify the skeleton by adding/removing/"
"renaming bones). It ensures that your rigging information is kept in the "
"polygon, even if a skeleton node is accidentally lost or the skeleton "
"modified. Push the \"Sync Bones to Polygon\" button to sync the list."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:179
msgid ""
"The list of bones will automatically appear. By default, your polygon has no "
"weight assigned to any of them. Select the bones you want to assign weight "
"to and paint them:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:185
msgid ""
"Points in white have a full weight assigned, while points in black are not "
"influenced by the bone. If the same point is painted white for multiple "
"bones, the influence will be distributed amongst them (so usually there is "
"not that much need to use shades in-between unless you want to polish the "
"bending effect)."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:193
msgid ""
"After painting the weights, animating the bones (NOT the polygons!) will "
"have the desired effect of modifying and bending the polygons accordingly. "
"As you only need to animate bones in this approach, work becomes much easier!"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:197
msgid ""
"But it's not all roses. Trying to animate bones that bend the polygon will "
"often yield unexpected results:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:202
msgid ""
"This happens because Godot generates internal triangles that connect the "
"points when drawing the polygon. They don't always bend the way you would "
"expect. To solve this, you need to set hints in the geometry to clarify how "
"you expect it to deform."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:208
msgid "Internal vertices"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:210
msgid ""
"Open the UV menu for each bone again and go to the *Points* section. Add "
"some internal vertices in the regions where you expect the geometry to bend:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:215
msgid ""
"Now, go to the *Polygon* section and redraw your own polygons with more "
"detail. Imagine that, as your polygons bend, you need to make sure they "
"deform the least possible, so experiment a bit to find the right setup."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:221
msgid ""
"Once you start drawing, the original polygon will disappear and you will be "
"free to create your own:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:226
msgid ""
"This amount of detail is usually fine, though you may want to have more fine-"
"grained control over where triangles go. Experiment by yourself until you "
"get the results you like."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:230
msgid ""
"**Note:** Don't forget that your newly added internal vertices also need "
"weight painting! Go to the *Bones* section again to assign them to the right "
"bones."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:233
msgid "Once you are all set, you will get much better results:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:4
msgid "Using AnimationTree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:9
msgid ""
"With :ref:`AnimationPlayer <class_AnimationPlayer>`, Godot has one of the "
"most flexible animation systems that you can find in any game engine. The "
"ability to animate almost any property in any node or resource, as well as "
"having dedicated transform, bezier, function calling, audio and sub-"
"animation tracks, is pretty much unique."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:13
msgid ""
"However, the support for blending those animations via ``AnimationPlayer`` "
"is relatively limited, as only a fixed cross-fade transition time can be set."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:15
msgid ""
":ref:`AnimationTree <class_AnimationTree>` is a new node introduced in Godot "
"3.1 to deal with advanced transitions. It supersedes the ancient "
"``AnimationTreePlayer``, while adding a huge amount of features and "
"flexibility."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:19
msgid "Creating an AnimationTree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:21
msgid ""
"Before starting, it must be made clear that an ``AnimationTree`` node does "
"not contain its own animations. Instead, it uses animations contained in an "
"``AnimationPlayer`` node. This way, you can edit your animations (or import "
"them from a 3D scene) as usual and then use this extra node to control the "
"playback."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:25
msgid ""
"The most common way to use ``AnimationTree`` is in a 3D scene. When "
"importing your scenes from a 3D exchange format, they will usually come with "
"animations built-in (either multiple ones or split from a large one on "
"import). At the end, the imported Godot scene will contain the animations in "
"a ``AnimationPlayer`` node."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:29
msgid ""
"As you rarely use imported scenes directly in Godot (they are either "
"instantiated or inherited from), you can place the ``AnimationTree`` node in "
"your new scene which contains the imported one. Afterwards, point the "
"``AnimationTree`` node to the ``AnimationPlayer`` that was created in the "
"imported scene."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:32
msgid ""
"This is how it's done in the `Third Person Shooter demo <https://github.com/"
"godotengine/tps-demo>`_, for reference:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:36
msgid ""
"A new scene was created for the player with a ``KinematicBody`` as root. "
"Inside this scene, the original ``.dae`` (Collada) file was instantiated and "
"an ``AnimationTree`` node was created."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:40
msgid "Creating a tree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:42
msgid ""
"There are three main types of nodes that can be used in ``AnimationTree``:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:44
msgid ""
"Animation nodes, which reference an animation from the linked "
"``AnimationTree``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:45
msgid "Animation Root nodes, which are used to blend sub-nodes."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:46
msgid ""
"Animation Blend nodes, which are used within ``AnimationNodeBlendTree`` as "
"single-graph blending via multiple input ports."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:48
msgid "To set a root node in ``AnimationTree``, a few types are available:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:52
msgid ""
"``AnimationNodeAnimation``: Selects an animation from the list and plays it. "
"This is the simplest root node, and generally not used directly as root."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:53
msgid ""
"``AnimationNodeBlendTree``: Contains many *blend* type nodes, such as mix, "
"blend2, blend3, one shot, etc. This is one of the most commonly used roots."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:54
msgid ""
"``AnimationNodeStateMachine``: Contains multiple root nodes as children in a "
"graph. Each node is used as a *state*, and provides multiple functions to "
"alternate between states."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:55
msgid ""
"``AnimationNodeBlendSpace2D``: Allows placing root nodes in a 2D blend "
"space. Control the blend position in 2D to mix between multiple animations."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:56
msgid "``AnimationNodeBlendSpace1D``: Simplified version of the above (1D)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:59
msgid "Blend tree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:61
msgid ""
"An ``AnimationNodeBlendTree`` can contain both root and regular nodes used "
"for blending. Nodes are added to the graph from a menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:65
msgid ""
"All blend trees contain an ``Output`` node by default, and something has to "
"be connected to it in order for animations to play."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:67
msgid ""
"The easiest way to test this functionality is to connect an ``Animation`` "
"node to it directly:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:71
msgid ""
"This will simply play back the animation. Make sure that the "
"``AnimationTree`` is active for something to actually happen."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:73
msgid "Following is a short description of available nodes:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:76
msgid "Blend2 / Blend3"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:78
msgid ""
"These nodes will blend between two or three inputs by a user-specified blend "
"value:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:82
msgid "For more complex blending, it is advised to use blend spaces instead."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:84
msgid ""
"Blending can also use filters, i.e. you can control individually which "
"tracks go through the blend function. This is very useful for layering "
"animations on top of each other."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:90
msgid "OneShot"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:92
msgid ""
"This node will execute a sub-animation and return once it finishes. Blend "
"times for fading in and out can be customized, as well as filters."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:97
msgid "Seek"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:99
msgid ""
"This node can be used to cause a seek command to happen to any sub-children "
"of the animation graph. Use this node type to play an ``Animation`` from the "
"start or a certain playback position inside the ``AnimationNodeBlendTree``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:101
msgid ""
"After setting the time and changing the animation playback, the seek node "
"automatically goes into sleep mode on the next process frame by setting its "
"``seek_position`` value to ``-1.0``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:125
msgid "TimeScale"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:127
msgid ""
"Allows scaling the speed of the animation (or reverse it) in any children "
"nodes. Setting it to 0 will pause the animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:130
msgid "Transition"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:132
msgid ""
"Very simple state machine (when you don't want to cope with a "
"``StateMachine`` node). Animations can be connected to the outputs and "
"transition times can be specified."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:135
msgid "BlendSpace2D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:137
msgid ""
"``BlendSpace2D`` is a node to do advanced blending in two dimensions. Points "
"are added to a two-dimensional space and then a position can be controlled "
"to determine blending:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:142
msgid ""
"The ranges in X and Y can be controlled (and labeled for convenience). By "
"default, points can be placed anywhere (just right-click on the coordinate "
"system or use the *add point* button) and triangles will be generated "
"automatically using Delaunay."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:147
msgid ""
"It is also possible to draw the triangles manually by disabling the *auto "
"triangle* option, though this is rarely necessary:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:151
msgid ""
"Finally, it is possible to change the blend mode. By default, blending "
"happens by interpolating points inside the closest triangle. When dealing "
"with 2D animations (frame by frame), you may want to switch to *Discrete* "
"mode. Alternatively, if you want to keep the current play position when "
"switching between discrete animations, there is a *Carry* mode. This mode "
"can be changed in the *Blend* menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:159
msgid "BlendSpace1D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:161
msgid ""
"This is similar to 2D blend spaces, but in one dimension (so triangles are "
"not needed)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:164
msgid "StateMachine"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:166
msgid ""
"This node acts as a state machine with root nodes as states. Root nodes can "
"be created and connected via lines. States are connected via *Transitions*, "
"which are connections with special properties. Transitions are uni-"
"directional, but two can be used to connect in both directions."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:171
msgid "There are many types of transition:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:175
msgid ""
"*Immediate*: Will switch to the next state immediately. The current state "
"will end and blend into the beginning of the new one."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:176
msgid ""
"*Sync*: Will switch to the next state immediately, but will seek the new "
"state to the playback position of the old state."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:177
msgid ""
"*At End*: Will wait for the current state playback to end, then switch to "
"the beginning of the next state animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:179
msgid ""
"Transitions also have a few properties. Click any transition and it will be "
"displayed in the inspector dock:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:183
msgid ""
"*Switch Mode* is the transition type (see above), it can be modified after "
"creation here."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:184
msgid ""
"*Auto Advance* will turn on the transition automatically when this state is "
"reached. This works best with the *At End* switch mode."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:185
msgid ""
"*Advance Condition* will turn on auto advance when this condition is set. "
"This is a custom text field that can be filled with a variable name. The "
"variable can be modified from code (more on this later)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:187
msgid "*Xfade Time* is the time to cross-fade between this state and the next."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:188
msgid ""
"*Priority* is used together with the ``travel()`` function from code (more "
"on this later). Lower priority transitions are preferred when travelling "
"through the tree."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:189
msgid ""
"*Disabled* toggles disabling this transition (when disabled, it will not be "
"used during travel or auto advance)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:193
msgid "Root motion"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:195
msgid ""
"When working with 3D animations, a popular technique is for animators to use "
"the root skeleton bone to give motion to the rest of the skeleton. This "
"allows animating characters in a way where steps actually match the floor "
"below. It also allows precise interaction with objects during cinematics."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:198
msgid ""
"When playing back the animation in Godot, it is possible to select this bone "
"as the *root motion track*. Doing so will cancel the bone transformation "
"visually (the animation will stay in place)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:203
msgid ""
"Afterwards, the actual motion can be retrieved via the :ref:`AnimationTree "
"<class_AnimationTree>` API as a transform:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:214
msgid ""
"This can be fed to functions such as :ref:`KinematicBody.move_and_slide "
"<class_KinematicBody_method_move_and_slide>` to control the character "
"movement."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:216
msgid ""
"There is also a tool node, ``RootMotionView``, that can be placed in a scene "
"and will act as a custom floor for your character and animations (this node "
"is disabled by default during the game)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:223
msgid "Controlling from code"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:225
msgid ""
"After building the tree and previewing it, the only question remaining is "
"\"How is all this controlled from code?\"."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:227
msgid ""
"Keep in mind that the animation nodes are just resources and, as such, they "
"are shared between all instances using them. Setting values in the nodes "
"directly will affect all instances of the scene that uses this "
"``AnimationTree``. This is generally undesirable, but does have some cool "
"use cases, e.g. you can copy and paste parts of your animation tree, or "
"reuse nodes with a complex layout (such as a state machine or blend space) "
"in different animation trees."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:232
msgid ""
"The actual animation data is contained in the ``AnimationTree`` node and is "
"accessed via properties. Check the \"Parameters\" section of the "
"``AnimationTree`` node to see all the parameters that can be modified in "
"real-time:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:237
msgid ""
"This is handy because it makes it possible to animate them from an "
"``AnimationPlayer``, or even the ``AnimationTree`` itself, allowing the "
"realization of very complex animation logic."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:240
msgid ""
"To modify these values from code, the property path must be obtained. This "
"is done easily by hovering the mouse over any of the parameters:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:244
msgid "Which allows setting them or reading them:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:259
msgid "State machine travel"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:261
msgid ""
"One of the nice features in Godot's ``StateMachine`` implementation is the "
"ability to travel. The graph can be instructed to go from the current state "
"to another one, while visiting all the intermediate ones. This is done via "
"the A\\* algorithm. In the absence of any viable set of transitions starting "
"at the current state and finishing at the destination state, the graph "
"teleports to the destination state."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:266
msgid ""
"To use the travel ability, you should first retrieve the :ref:"
"`AnimationNodeStateMachinePlayback "
"<class_AnimationNodeStateMachinePlayback>` object from the ``AnimationTree`` "
"node (it is exported as a property)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:279
msgid ""
"Once retrieved, it can be used by calling one of the many functions it "
"offers:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:290
msgid ""
"The state machine must be running before you can travel. Make sure to either "
"call ``start()`` or choose a node to **Autoplay on Load**."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:4
msgid "Playing videos"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:6
msgid "Godot supports video playback with the :ref:`class_VideoPlayer` node."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:9
msgid "Supported playback formats"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:11
msgid ""
"The only supported format in core is **Ogg Theora** (not to be confused with "
"Ogg Vorbis audio). It's possible for extensions to bring support for "
"additional formats, but no such extensions exist yet as of July 2022."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:15
msgid ""
"H.264 and H.265 cannot be supported in core Godot, as they are both "
"encumbered by software patents. AV1 is royalty-free, but it remains slow to "
"decode on the CPU and hardware decoding support isn't readily available on "
"all GPUs in use yet."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:20
msgid ""
"WebM is supported in core in Godot 3.x, but support for it will be removed "
"in 4.0 as it proved to be too buggy and difficult to maintain. Therefore, "
"**using WebM is not recommended**."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:26
msgid ""
"You may find videos with an ``.ogg`` or ``.ogx`` extensions, which are "
"generic extensions for data within an Ogg container."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:29
msgid ""
"Renaming these file extensions to ``.ogv`` *may* allow the videos to be "
"imported in Godot. However, not all files with ``.ogg`` or ``.ogx`` "
"extensions are videos - some of them may only contain audio."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:34
msgid "Setting up VideoPlayer"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:36
msgid "Create a VideoPlayer node using the Create New Node dialog."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:37
msgid ""
"Select the VideoPlayer node in the scene tree dock, go to the inspector and "
"load an ``.ogv`` file in the Stream property."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:40
msgid ""
"If you don't have your video in Ogg Theora format yet, jump to :ref:"
"`doc_playing_videos_recommended_theora_encoding_settings`."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:43
msgid ""
"If you want the video to play as soon as the scene is loaded, check "
"**Autoplay** in the inspector. If not, leave **Autoplay** disabled and call "
"``play()`` on the VideoPlayer node in a script to start playback when "
"desired."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:49
msgid "Handling resizing and different aspect ratios"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:51
msgid ""
"By default in Godot 4.0, the VideoPlayer will automatically be resized to "
"match the video's resolution. You can make it follow usual :ref:"
"`class_Control` sizing by enabling **Expand** on the VideoPlayer node."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:55
msgid ""
"To adjust how the VideoPlayer node resizes depending on window size, adjust "
"the anchors using the **Layout** menu at the top of the 2D editor viewport. "
"However, this setup may not be powerful enough to handle all use cases, such "
"as playing fullscreen videos without distorting the video (but with empty "
"space on the edges instead). For more control, you can use an :ref:"
"`class_AspectRatioContainer` node, which is designed to handle this kind of "
"use case:"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:63
msgid ""
"Add an AspectRatioContainer node. Make sure it is not a child of any other "
"container node. Select the AspectRatioContainer node, then set its "
"**Layout** at the top of the 2D editor to **Full Rect**. Set **Ratio** in "
"the AspectRatioContainer node to match your video's aspect ratio. You can "
"use math formulas in the inspector to help yourself. Remember to make one of "
"the operands a float. Otherwise, the division's result will always be an "
"integer."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:75
msgid ""
"AspectRatioContainer's Ratio property being modified in the editor inspector"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:75
msgid "This will evaluate to (approximately) 1.777778"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:77
msgid ""
"Once you've configured the AspectRatioContainer, reparent your VideoPlayer "
"node to be a child of the AspectRatioContainer node. Make sure **Expand** is "
"disabled on the VideoPlayer. Your video should now scale automatically to "
"fit the whole screen while avoiding distortion."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:84
msgid ""
"See :ref:`doc_multiple_resolutions` for more tips on supporting multiple "
"aspect ratios in your project."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:88
msgid "Displaying a video on a 3D surface"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:90
msgid ""
"Using a VideoPlayer node as a child of a :ref:`class_Viewport` node, it's "
"possible to display any 2D node on a 3D surface. For example, this can be "
"used to display animated billboards when frame-by-frame animation would "
"require too much memory."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:95
msgid "This can be done with the following steps:"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:97
msgid ""
"Create a :ref:`class_Viewport` node. Set its size to match your video's size "
"in pixels."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:99
msgid ""
"Create a VideoPlayer node *as a child of the Viewport node* and specify a "
"video path in it. Make sure **Expand** is disabled, and enable **Autoplay** "
"if needed."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:101
msgid ""
"Create a MeshInstance node with a PlaneMesh or QuadMesh resource in its Mesh "
"property. Resize the mesh to match the video's aspect ratio (otherwise, it "
"will appear distorted)."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:103
msgid ""
"Create a new SpatialMaterial resource in the **Material Override** property "
"in the GeometryInstance section."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:105
msgid ""
"Enable **Local To Scene** in the SpatialMaterial's Resource section (at the "
"bottom). This is *required* before you can use a ViewportTexture in its "
"Albedo Texture property."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:107
msgid ""
"In the SpatialMaterial, set the **Albedo > Texture** property to **New "
"ViewportTexture**. Edit the new resource by clicking it, then specify the "
"path to the Viewport node in the **Viewport Path** property."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:110
msgid ""
"Enable **Albedo Tex Force sRGB** in the SpatialMaterial to prevent colors "
"from being washed out."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:112
msgid ""
"If the billboard is supposed to emit its own light, enable **Flags > "
"Unshaded** to improve rendering performance."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:115
msgid ""
"See :ref:`doc_viewports` and the `GUI in 3D demo <https://github.com/"
"godotengine/godot-demo-projects/tree/master/viewport/gui_in_3d>`__ for more "
"information on setting this up."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:120
msgid "Video decoding conditions and recommended resolutions"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:122
msgid ""
"Video decoding is performed on the CPU, as GPUs don't have hardware "
"acceleration for decoding Theora videos. Modern desktop CPUs can decode Ogg "
"Theora videos at 1440p @ 60 FPS or more, but low-end mobile CPUs will likely "
"struggle with high-resolution videos."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:127
msgid "To ensure your videos decode smoothly on varied hardware:"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:129
msgid ""
"When developing games for desktop platforms, it's recommended to encode in "
"1080p at most (preferably at 30 FPS). Most people are still using 1080p or "
"lower resolution displays, so encoding higher-resolution videos may not be "
"worth the increased file size and CPU requirements."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:133
msgid ""
"When developing games for mobile or web platforms, it's recommended to "
"encode in 720p at most (preferably at 30 FPS or even lower). The visual "
"difference between 720p and 1080p videos on a mobile device is usually not "
"that noticeable."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:139
msgid "Playback limitations"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:141
msgid ""
"There are several limitations with the current implementation of video "
"playback in Godot:"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:143
msgid "Seeking a video to a certain point is not supported."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:144
msgid ""
"Changing playback speed is not supported. VideoPlayer also won't follow :ref:"
"`Engine.time_scale<class_Engine_property_time_scale>`."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:146
msgid ""
"Looping is not supported, but you can connect a VideoPlayer's :ref:`finished "
"<class_VideoPlayer_signal_finished>` signal to a function that plays the "
"video again. However, this will cause a black frame to be visible when the "
"video restarts. This can be worked around by adding a fade to black in the "
"video file before the video ends, or by hiding the video for one frame and "
"displaying a TextureRect with a screenshot of the first frame of the video "
"until the video is restarted."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:153
msgid "Streaming a video from a URL is not supported."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:158
msgid "Recommended Theora encoding settings"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:160
msgid ""
"A word of advice is to **avoid relying on built-in Ogg Theora exporters** "
"(most of the time). There are 2 reasons you may want to favor using an "
"external program to encode your video:"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:163
msgid ""
"Some programs such as Blender can render to Ogg Theora. However, the default "
"quality presets are usually very low by today's standards. You may be able "
"to increase the quality options in the software you're using, but you may "
"find the output quality to remain less than ideal (given the increased file "
"size). This usually means that the software only supports encoding to "
"constant bit rate (CBR), instead of variable bit rate (VBR). VBR encoding "
"should be preferred in most scenarios as it provides a better quality to "
"file size ratio."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:171
msgid "Some other programs can't render to Ogg Theora at all."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:173
msgid ""
"In this case, you can **render the video to an intermediate high-quality "
"format** (such as a high-bitrate H.264 video) then re-encode it to Ogg "
"Theora. Ideally, you should use a lossless or uncompressed format as an "
"intermediate format to maximize the quality of the output Ogg Theora video, "
"but this can require a lot of disk space."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:179
msgid ""
"`HandBrake <https://handbrake.fr/>`__ (GUI) and `FFmpeg <https://ffmpeg.org/"
">`__ (CLI) are popular open source tools for this purpose. FFmpeg has a "
"steeper learning curve, but it's more powerful."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:183
msgid ""
"Here are example FFmpeg commands to convert a MP4 video to Ogg Theora. Since "
"FFmpeg supports a lot of input formats, you should be able to use the "
"commands below with almost any input video format (AVI, MOV, WebM, …)."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:189
msgid ""
"Make sure your copy of FFmpeg is compiled with libtheora and libvorbis "
"support. You can check this by running ``ffmpeg`` without any arguments, "
"then looking at the ``configuration:`` line in the command output."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:194
msgid "Balancing quality and file size"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:196
msgid ""
"The **video quality** level (``-q:v``) must be between ``1`` and ``10``. "
"Quality ``6`` is a good compromise between quality and file size. If "
"encoding at a high resolution (such as 1440p or 4K), you will probably want "
"to decrease ``-q:v`` to ``5`` to keep file sizes reasonable. Since pixel "
"density is higher on a 1440p or 4K video, lower quality presets at higher "
"resolutions will look as good or better compared to low-resolution videos."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:203
msgid ""
"The **audio quality** level (``-q:a``) must be between ``-1`` and ``10``. "
"Quality ``6`` provides a good compromise between quality and file size. In "
"contrast to video quality, increasing audio quality doesn't increase the "
"output file size nearly as much. Therefore, if you want the cleanest audio "
"possible, you can increase this to ``9`` to get *perceptually lossless* "
"audio. This is especially valuable if your input file already uses lossy "
"audio compression. See `this page <https://wiki.hydrogenaud.io/index.php?"
"title=Recommended_Ogg_Vorbis#Recommended_Encoder_Settings>`__ for a table "
"listing Ogg Vorbis audio quality presets and their respective variable "
"bitrates."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:214
msgid "FFmpeg: Convert while preserving original video resolution"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:216
msgid ""
"The following command converts the video while keeping its original "
"resolution. The video and audio's bitrate will be variable to maximize "
"quality while saving space in parts of the video/audio that don't require a "
"high bitrate (such as static scenes)."
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:226
msgid "FFmpeg: Resize the video then convert it"
msgstr ""

#: ../../docs/tutorials/animation/playing_videos.rst:228
msgid ""
"The following command resizes a video to be 720 pixels tall (720p), while "
"preserving its existing aspect ratio. This helps decrease the file size "
"significantly if the source is recorded at a higher resolution than 720p:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/index.rst:2
msgid "Assets pipeline"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:4
msgid "Import process"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:7
msgid "Importing assets in Godot 3.0+"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:9
msgid ""
"Previously, importing assets in Godot 2.x required manual maintenance of a "
"separate directory with source assets. Without doing this, it was impossible "
"to specify how to convert and change import flags for textures, audio files, "
"scenes, etc."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:14
msgid ""
"In Godot 3.0+, we use a more modern approach to importing: Simply drop your "
"assets (image files, scenes, audio files, fonts, etc) directly in the "
"project folder (copy them manually with your OS file explorer). Godot will "
"automatically import these files internally and keep the imported resources "
"hidden in a ``res://.import`` folder."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:20
msgid ""
"This means that when trying to access imported assets through code you need "
"to use the :ref:`Resource Loader<class_ResourceLoader>` as it will "
"automatically take into account where the internal files are saved. If you "
"try and access an imported asset using the :ref:`File <class_File>` class it "
"will work in the editor, but break in the exported project."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:26
msgid ""
"However, the :ref:`Resource Loader<class_ResourceLoader>` cannot access non "
"imported files, only the :ref:`File <class_File>` class can."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:30
msgid "Changing import parameters"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:32
msgid ""
"To change the import parameters of an asset in Godot (again, keep in mind "
"import parameters are only present in non-native Godot resource types) "
"select the relevant resource in the filesystem dock:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:38
msgid ""
"Then, after adjusting the parameters, press \"Reimport\". These parameters "
"will only be used for this asset and on future reimports."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:41
msgid ""
"Changing the import parameters of several assets at the same time is also "
"possible. Simply select all of them together in the resources dock and the "
"exposed parameters will apply to all of them when reimporting."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:46
msgid "Reimporting multiple assets"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:48
msgid ""
"While working on a project you may find that several assets need to have the "
"same parameters changed, such as enabling mipmaps, but you only want those "
"specific parameters changed. To do this, select every asset you want to "
"reimport in the file system. In the import tab there will now be a checkbox "
"to the left of every import parameter."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:56
msgid ""
"Select the checkbox of the parameters you want to change on your imported "
"assets, then change the parameters normally. Finally, click the reimport "
"button and every selected asset will be reimported with only those "
"parameters changed."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:62
msgid "Automatic reimport"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:64
msgid ""
"When the MD5 checksum of the source asset changes, Godot will perform an "
"automatic reimport of it, applying the preset configured for that specific "
"asset."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:69
msgid "Files generated"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:71
msgid ""
"Importing will add an extra ``<asset>.import`` file, containing the import "
"configuration. Make sure to commit these to your version control system!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:76
msgid ""
"Additionally, extra assets will be preset in the hidden ``res://.import`` "
"folder:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:80
msgid ""
"If any of the files present in this folder is erased (or the whole folder), "
"the asset or assets will be reimported automatically. As such, committing "
"this folder to the version control system is optional. It can shorten "
"reimporting time when checking out on another computer, but it takes "
"considerably more space and transfer time. Pick your poison!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:87
msgid "Changing import resource type"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:89
msgid ""
"Some source assets can be imported as different types of resources. For "
"this, select the relevant type of resource desired and press \"Reimport\":"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:97
msgid "Changing default import parameters"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:99
msgid ""
"Different types of games might require different defaults. Changing the "
"defaults per project can be achieved by using the \"Preset..\" Menu. Besides "
"some resource types offering presets, the default setting can be saved and "
"cleared too:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:107
msgid "Simplicity is key!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:109
msgid ""
"This is a very simple workflow which should take very little time to get "
"used to. It also enforces a more correct way to deal with resources."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/import_process.rst:112
msgid ""
"There are many types of assets available for import, so please continue "
"reading to understand how to work with all of them!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:4
msgid "Importing images"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:7
msgid "Supported image formats"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:9
msgid "Godot can import the following image formats:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:11
msgid ""
"BMP (``.bmp``) - No support for 16-bit per pixel images. Only 1-bit, 4-bit, "
"8-bit, 24-bit, and 32-bit per pixel images are supported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:13
msgid ""
"DirectDraw Surface (``.dds``) - If mipmaps are present in the texture, they "
"will be loaded directly. This can be used to achieve effects using custom "
"mipmaps."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:16
msgid ""
"OpenEXR (``.exr``) - Supports HDR (highly recommended for panorama skies)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:18
msgid ""
"Radiance HDR (``.hdr``) - Supports HDR (highly recommended for panorama "
"skies)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:20
msgid ""
"JPEG (``.jpg``, ``.jpeg``) - Doesn't support transparency per the format's "
"limitations."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:22
msgid ""
"PNG (``.png``) - Precision is limited to 8 bits per channel upon importing "
"(no HDR images)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:24
msgid "Truevision Targa (``.tga``)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:25
msgid ""
"SVG (``.svg``, ``.svgz``) - SVGs are rasterized using `NanoSVG <https://"
"github.com/memononen/nanosvg>`__ when importing them. Support is limited; "
"complex vectors may not render correctly. For complex vectors, rendering "
"them to PNGs using Inkscape is often a better solution. This can be "
"automated thanks to its `command-line interface <https://wiki.inkscape.org/"
"wiki/index.php/Using_the_Command_Line#Export_files>`__."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:30
msgid ""
"WebP (``.webp``) - WebP files support transparency and can be compressed "
"lossily or losslessly. The precision is limited to 8 bits per channel."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:36
msgid ""
"If you've compiled the Godot editor from source with specific modules "
"disabled, some formats may not be available."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:40
msgid "Importing textures"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:42
msgid ""
"The default action in Godot is to import images as textures. Textures are "
"stored in video memory and can't be accessed directly. This is what makes "
"drawing them efficient."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:46
msgid "Import options are vast:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:51
msgid "Detect 3D"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:53
msgid ""
"This option makes Godot be aware of when a texture (which is imported for 2D "
"as default) is used in 3D. If this happens, setting are changed so the "
"texture flags are friendlier to 3D (mipmaps, filter and repeat become "
"enabled and compression is changed to VRAM). Texture is also reimported "
"automatically."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:57
msgid "Compression"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:59
msgid ""
"Images are one of the largest assets in a game. To handle them efficiently, "
"they need to be compressed. Godot offers several compression methods, "
"depending on the use case."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:63
msgid "Compress Mode"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:65
msgid ""
"**VRAM Compression:** This is the most common compression mode for 3D "
"assets. Size on disk is reduced and video memory usage is also decreased "
"considerably (usually by a factor between 4 and 6). This mode should be "
"avoided for 2D as it exhibits noticeable artifacts."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:69
msgid ""
"**Lossless Compression:** This is the most common compression mode for 2D "
"assets. It shows assets without any kind of artifacting, and disk "
"compression is decent. It will use considerably more amount of video memory "
"than VRAM Compression, though. This is also the recommended setting for "
"pixel art."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:73
msgid ""
"**Lossy Compression:** This is a good choice for large 2D assets. It has "
"some artifacts, but less than VRAM and the file size is several times lower "
"compared to Lossless or Uncompressed. Video memory usage isn't decreased by "
"this mode; it's the same as with Lossless Compression or Uncompressed."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:77
msgid ""
"**Uncompressed:** Only useful for formats that can't be compressed (such as "
"raw float images)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:80
msgid ""
"In this table, each of the four options are described together with their "
"advantages and disadvantages (|good| = best, |bad| = worst):"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:101
msgid "good"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:99
msgid "bad"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:84
msgid "Uncompressed"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:84
msgid "Compress Lossless"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:84
msgid "Compress Lossy"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:84
msgid "Compress VRAM"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:86
#: ../../docs/tutorials/editor/command_line_tutorial.rst:33
#: ../../docs/tutorials/editor/command_line_tutorial.rst:47
#: ../../docs/tutorials/editor/command_line_tutorial.rst:75
#: ../../docs/tutorials/editor/command_line_tutorial.rst:103
#: ../../docs/tutorials/editor/command_line_tutorial.rst:133
#: ../../docs/tutorials/export/exporting_for_macos.rst:59
#: ../../docs/tutorials/export/exporting_for_macos.rst:85
#: ../../docs/tutorials/export/exporting_for_macos.rst:112
#: ../../docs/tutorials/export/exporting_for_macos.rst:155
#: ../../docs/tutorials/inputs/inputevent.rst:130
#: ../../docs/tutorials/io/binary_serialization_api.rst:102
#: ../../docs/tutorials/io/binary_serialization_api.rst:113
#: ../../docs/tutorials/io/binary_serialization_api.rst:122
#: ../../docs/tutorials/io/binary_serialization_api.rst:133
#: ../../docs/tutorials/io/binary_serialization_api.rst:142
#: ../../docs/tutorials/io/binary_serialization_api.rst:151
#: ../../docs/tutorials/io/binary_serialization_api.rst:164
#: ../../docs/tutorials/io/binary_serialization_api.rst:175
#: ../../docs/tutorials/io/binary_serialization_api.rst:190
#: ../../docs/tutorials/io/binary_serialization_api.rst:203
#: ../../docs/tutorials/io/binary_serialization_api.rst:222
#: ../../docs/tutorials/io/binary_serialization_api.rst:237
#: ../../docs/tutorials/io/binary_serialization_api.rst:252
#: ../../docs/tutorials/io/binary_serialization_api.rst:271
#: ../../docs/tutorials/io/binary_serialization_api.rst:296
#: ../../docs/tutorials/io/binary_serialization_api.rst:327
#: ../../docs/tutorials/io/binary_serialization_api.rst:342
#: ../../docs/tutorials/io/binary_serialization_api.rst:351
#: ../../docs/tutorials/io/binary_serialization_api.rst:362
#: ../../docs/tutorials/io/binary_serialization_api.rst:372
#: ../../docs/tutorials/io/binary_serialization_api.rst:391
#: ../../docs/tutorials/io/binary_serialization_api.rst:403
#: ../../docs/tutorials/io/binary_serialization_api.rst:415
#: ../../docs/tutorials/io/binary_serialization_api.rst:428
#: ../../docs/tutorials/io/binary_serialization_api.rst:439
#: ../../docs/tutorials/io/binary_serialization_api.rst:450
#: ../../docs/tutorials/io/binary_serialization_api.rst:458
#: ../../docs/tutorials/io/binary_serialization_api.rst:471
#: ../../docs/tutorials/io/binary_serialization_api.rst:484
#: ../../docs/tutorials/io/binary_serialization_api.rst:499
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:141
#: ../../docs/tutorials/scripting/creating_script_templates.rst:125
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:21
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:523
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:570
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:644
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:15
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:94
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:139
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:210
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:341
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:52
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:114
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:165
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:218
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:30
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:53
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:65
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:98
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:171
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:236
#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:53
msgid "Description"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:86
msgid "Stored as raw pixels"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:86
msgid "Stored as Lossless WebP / PNG"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:86
msgid "Stored as Lossy WebP"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:86
msgid "Stored as S3TC/BC or PVRTC/ETC depending on platform"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:88
msgid "Size on Disk"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:88
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:90
msgid "|bad| Large"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:88
msgid "|regular| Small"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:103
msgid "regular"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:88
msgid "|good| Very Small"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:90
msgid "Memory Usage"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:90
msgid "|good| Small"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:92
msgid "Performance"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:92
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:96
msgid "|regular| Normal"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:92
#: ../../docs/tutorials/assets_pipeline/importing_images.rst:96
msgid "|good| Fast"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:94
msgid "Quality Loss"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:94
msgid "|good| None"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:94
msgid "|regular| Slight"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:94
msgid "|bad| Moderate"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:96
msgid "Load Time"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:96
msgid "|bad| Slow"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:106
msgid "HDR Mode"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:108
msgid ""
"Godot supports high dynamic range textures (as .HDR or .EXR). These are "
"mostly useful as high dynamic range equirectangular panorama skies (the "
"internet has plenty if you search for them), which replace Cubemaps in Godot "
"2.x. Modern PCs support the BC6H VRAM format, but there are still plenty "
"that do not."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:111
msgid ""
"If you want Godot to ensure full compatibility in terms of the kind of "
"textures, enable the \"Force RGBE\" option."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:114
msgid "Normal Map"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:116
msgid ""
"When using a texture as normal map, only the red and green channels are "
"required. Given regular texture compression algorithms produce artifacts "
"that don't look that nice in normal maps, the RGTC compression format is the "
"best fit for this data. Forcing this option to \"Enabled\" will make Godot "
"import the image as RGTC compressed. By default, it's set to \"Detect\", "
"which means that if the texture is ever used as a normal map, it will be "
"changed to \"Enabled\" and reimported automatically."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:121
msgid ""
"Note that RGTC compression affects the resulting normal map image. You will "
"have to adjust custom shaders that use the normal map to take this into "
"account."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:137
msgid ""
"There are plenty of settings that can be toggled when importing an image as "
"a texture, depending on the use case."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:140
msgid "Repeat"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:142
msgid ""
"This setting is most commonly used in 3D, and is therefore generally "
"disabled in 2D. It sets UV coordinates going beyond the 0,0 - 1,1 range to "
"\"loop\"."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:144
msgid "Repeating can optionally be set to mirrored mode."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:147
#: ../../docs/tutorials/audio/audio_buses.rst:187
msgid "Filter"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:149
msgid ""
"When pixels become larger than the screen pixels, this option enables linear "
"interpolation for them. The result is a smoother (less blocky) texture. This "
"setting can be commonly used in 2D and 3D, but it's usually disabled when "
"making pixel perfect games."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:152
msgid "Mipmaps"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:154
msgid ""
"When pixels become smaller than the screen, mipmaps kick in. This helps "
"reduce the grainy effect when shrinking the textures. Keep in mind that, in "
"older hardware (GLES2, mainly mobile), there are some requirements to use "
"mipmaps:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:157
msgid "Texture width and height must be powers of 2"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:158
msgid "Repeat must be enabled"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:160
msgid ""
"Keep in mind the above when making phone games and applications, want to aim "
"for full compatibility, and need mipmaps."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:162
msgid ""
"When doing 3D, mipmap should be turned on, as this also improves performance "
"(smaller versions of the texture are used for objects further away)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:165
msgid "Anisotropic"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:167
msgid ""
"When textures are near parallel to the view (like floors), this option makes "
"them have more detail by reducing blurriness."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:170
msgid "sRGB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:172
msgid ""
"Godot uses Linear colorspace when rendering 3D. Textures mapped to albedo or "
"detail channels need to have this option turned on in order for colors to "
"look correct. When set to **Detect** mode, the texture will be marked as "
"sRGB when used in albedo channels."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:177
msgid ""
"Since the texture will have its data modified when sRGB is enabled, this "
"means using the same texture in both 2D and 3D will make the texture display "
"with incorrect colors in either 2D or 3D."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:181
msgid ""
"To work around this, make a copy of the texture on the filesystem and enable "
"sRGB on one of the copies only. Use the copy with sRGB enabled in 3D, and "
"the copy with sRGB disabled in 2D."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:186
msgid "Process"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:188
msgid ""
"Some special processes can be applied to images when imported as textures."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:191
msgid "Fix Alpha Border"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:193
msgid ""
"This puts pixels of the same surrounding color in transition from "
"transparency to non transparency. It helps mitigate the outline effect when "
"exporting images from Photoshop and the like."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:198
msgid ""
"It's a good idea to leave it on by default, unless specific values are "
"needed."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:201
msgid "Premultiplied Alpha"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:203
msgid ""
"An alternative to fix darkened borders is to use premultiplied alpha. By "
"enabling this option, the texture will be converted to this format. Keep in "
"mind that a material will need to be created that uses the PREMULT ALPHA "
"blend mode on canvas items that need it."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:207
msgid "HDR as sRGB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:209
msgid ""
"A few HDR files are broken and contain sRGB color data. It is advised not to "
"use them, but, in the worst-case scenario, toggling this option on will make "
"them look right."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:212
msgid "Invert Color"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:214
msgid ""
"Reverses the image's color. This is useful, for example, to convert a height "
"map generated by external programs to depth map to use with :ref:"
"`doc_spatial_material`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:217
msgid "Svg"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_images.rst:222
msgid ""
"This option only applies to SVG files. It controls the scale of the SVG "
"image. The default scale (1.0) will make the imported SVG match its original "
"design scale."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:4
msgid "Importing audio samples"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:7
msgid "Supported files"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:9
msgid ""
"Godot provides three options to import your audio data: WAV, Ogg Vorbis and "
"MP3."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:12
msgid "Each has different advantages."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:14
msgid ""
"WAV files use raw data or light compression (IMA-ADPCM). They are "
"lightweight on the CPU to play back (hundreds of simultaneous voices in this "
"format are fine). The downside is that they take up a lot of disk space."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:17
msgid ""
"Ogg Vorbis files use a stronger compression that results in much smaller "
"file size, but require significantly more processing power to play back."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:20
msgid ""
"MP3 files use better compression than WAV with IMA-ADPCM, but worse than Ogg "
"Vorbis. This means that a MP3 file with roughly equal quality to Ogg Vorbis "
"will be significantly larger. On the bright side, MP3 requires less CPU "
"usage to play back compared to Ogg Vorbis. This makes MP3 useful for mobile "
"and HTML5 projects where CPU resources are limited, especially when playing "
"multiple compressed sounds at the same time (such as long ambient sounds)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:28
msgid "Here is a comparative chart."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:31
msgid "Format"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:31
msgid "1 second of audio"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:33
msgid "WAV 24-bit, 96 kHz, stereo"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:33
msgid "576 KB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:35
msgid "WAV 16-bit, 44 kHz, mono"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:35
msgid "88 KB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:37
msgid "WAV 16-bit, IMA-ADPCM, mono"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:37
msgid "22 KB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:39
msgid "MP3 192 Kb/s, stereo"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:39
msgid "24 KB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:41
msgid "Ogg Vorbis 128 Kb/s, stereo"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:41
msgid "16 KB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:43
msgid "Ogg Vorbis 96 Kb/s, stereo"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:43
msgid "12 KB"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:46
msgid ""
"Consider using WAV for short and repetitive sound effects, and Ogg Vorbis "
"for music, speech, and long sound effects."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:50
#: ../../docs/tutorials/best_practices/index.rst:2
msgid "Best practices"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:52
msgid ""
"Godot has an :ref:`extensive bus system <doc_audio_buses>` with built-in "
"effects. This saves SFX artists the need to add reverb to the sound effects, "
"reducing their size greatly and ensuring correct trimming. Say no to SFX "
"with baked reverb!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:59
msgid "As you can see above, sound effects become huge with reverb added."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:62
msgid "Trimming"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:64
msgid ""
"One issue that happens often is that the waveform is exported with long "
"silences at the beginning and at the end. These are inserted by DAWs when "
"saving to a waveform, increase their size unnecessarily and add latency to "
"the moment they are played back."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:69
msgid "Importing as WAV with the **Trimming** option enabled solves this."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:73
msgid "Looping"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:75
msgid ""
"Godot supports looping in the samples (tools such as Sound Forge or Audition "
"can add loop points to WAV files). This is useful for sound effects, such as "
"engines, machine guns etc. Ping-pong looping is also supported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_audio_samples.rst:80
msgid ""
"As an alternative, the Import dock has a **Loop** option that enables "
"looping for the entire sample when importing."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:4
msgid "Importing translations"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:7
msgid "Games and internationalization"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:9
msgid ""
"The world is full of different languages and cultures, so nowadays games are "
"released in several languages. To handle this, internationalized text must "
"be supported in any modern game engine."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:13
msgid ""
"In regular desktop or mobile applications, internationalized text is usually "
"located in resource files (or .po files for GNU stuff). Games, however, can "
"use several orders of magnitude more text than applications, so they must "
"support efficient methods for dealing with loads of multilingual text."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:19
msgid ""
"There are two approaches to generate multilingual language games and "
"applications. Both are based on a key:value system. The first is to use one "
"of the languages as the key (usually English), the second is to use a "
"specific identifier. The first approach is probably easier for development "
"if a game is released first in English, later in other languages, but a "
"complete nightmare if working with many languages at the same time."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:27
msgid ""
"In general, games use the second approach and a unique ID is used for each "
"string. This allows you to revise the text while it is being translated to "
"other languages. The unique ID can be a number, a string, or a string with a "
"number (it's just a unique string anyway)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:32
msgid ""
"If you need a more powerful file format, Godot also supports loading "
"translations written in the gettext ``.po`` format. See :ref:"
"`doc_localization_using_gettext` for details."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:37
msgid "Translation format"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:39
msgid ""
"To complete the picture and allow efficient support for translations, Godot "
"has a special importer that can read CSV files. Most spreadsheet editors can "
"export to this format, so the only requirement is that the files have a "
"special arrangement. The CSV files **must** be saved with UTF-8 encoding "
"without a `byte order mark <https://en.wikipedia.org/wiki/"
"Byte_order_mark>`__."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:47
msgid ""
"By default, Microsoft Excel will always save CSV files with ANSI encoding "
"rather than UTF-8. There is no built-in way to do this, but there are "
"workarounds as described `here <https://stackoverflow.com/questions/4221176/"
"excel-to-csv-with-utf8-encoding>`__."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:52
msgid ""
"We recommend using `LibreOffice <https://www.libreoffice.org/>`__ or Google "
"Sheets instead."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:54
msgid "CSV files must be formatted as follows:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:57
#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:76
msgid "keys"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:57
msgid "<lang1>"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:57
msgid "<lang2>"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:57
msgid "<langN>"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:59
msgid "KEY1"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:59
#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:61
#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:63
#: ../../docs/tutorials/io/binary_serialization_api.rst:39
#: ../../docs/tutorials/platform/html5_shell_classref.rst:193
#: ../../docs/tutorials/platform/html5_shell_classref.rst:195
#: ../../docs/tutorials/platform/html5_shell_classref.rst:197
#: ../../docs/tutorials/platform/html5_shell_classref.rst:244
#: ../../docs/tutorials/platform/html5_shell_classref.rst:252
#: ../../docs/tutorials/platform/html5_shell_classref.rst:263
msgid "string"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:61
msgid "KEY2"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:63
msgid "KEYN"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:66
msgid ""
"The \"lang\" tags must represent a language, which must be one of the :ref:"
"`valid locales <doc_locales>` supported by the engine. The \"KEY\" tags must "
"be unique and represent a string universally (they are usually in uppercase, "
"to differentiate from other strings). These keys will be replaced at runtime "
"by the matching translated string. Note that the case is important, \"KEY1\" "
"and \"Key1\" will be different keys. The top-left cell is ignored and can be "
"left empty or having any content. Here's an example:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:76
#: ../../docs/tutorials/i18n/locales.rst:182
msgid "en"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:76
#: ../../docs/tutorials/i18n/locales.rst:222
msgid "es"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:76
#: ../../docs/tutorials/i18n/locales.rst:376
msgid "ja"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:78
msgid "GREET"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:78
msgid "Hello, friend!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:78
msgid "Hola, amigo!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:78
msgid "こんにちは"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:80
msgid "ASK"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:80
msgid "How are you?"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:80
msgid "Cómo está?"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:80
msgid "元気ですか"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:82
msgid "BYE"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:82
msgid "Goodbye"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:82
msgid "Adiós"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:82
msgid "さようなら"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:84
msgid "QUOTE"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:84
msgid "\"Hello\" said the man."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:84
msgid "\"Hola\" dijo el hombre."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:84
msgid "「こんにちは」男は言いました"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:87
msgid ""
"The same example is shown below as a comma-separated plain text file, which "
"should be the result of editing the above in a spreadsheet. When editing the "
"plain text version, be sure to enclose with double quotes any message that "
"contains commas, line breaks or double quotes, so that commas are not parsed "
"as delimiters, line breaks don't create new entries and double quotes are "
"not parsed as enclosing characters. Be sure to escape any double quotes a "
"message may contain by preceding them with another double quote. "
"Alternatively, you can select another delimiter than comma in the import "
"options."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:106
msgid "CSV importer"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:108
msgid ""
"Godot will treat CSV files as translations by default. It will import them "
"and generate one or more compressed translation resource files next to it."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:111
msgid ""
"Importing will also add the translation to the list of translations to load "
"when the game runs, specified in project.godot (or the project settings). "
"Godot allows loading and removing translations at runtime as well."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:116
msgid ""
"Select the ``.csv`` file and access the **Import** dock to define import "
"options. You can toggle the compression of the imported translations, and "
"select the delimiter to use when parsing the CSV file."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_translations.rst:122
msgid "Be sure to click **Reimport** after any change to these options."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:4
msgid "Importing 3D scenes"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:7
msgid "Godot scene importer"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:9
msgid ""
"When dealing with 3D assets, Godot has a flexible and configurable importer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:11
msgid ""
"Godot works with *scenes*. This means that the entire scene being worked on "
"in your favorite 3D DCC will be transferred as close as possible."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:14
msgid "Godot supports the following 3D *scene file formats*:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:16
msgid ""
"glTF 2.0 **(recommended)**. Godot has full support for both text (``.gltf``) "
"and binary (``.glb``) formats."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:17
msgid "DAE (COLLADA), an older format that is fully supported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:18
msgid ""
"OBJ (Wavefront) format + their MTL material files. This is also fully "
"supported, but pretty limited (no support for pivots, skeletons, animations, "
"PBR materials, ...)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:19
msgid "ESCN, a Godot-specific format that Blender can export with a plugin."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:20
msgid ""
"FBX, supported via the Open Asset Import library. However, FBX is "
"proprietary, so we recommend using other formats listed above, if suitable "
"for your workflow."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:23
msgid ""
"Just copy the scene file together with the texture to the project "
"repository, and Godot will do a full import."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:25
msgid ""
"It is important that the mesh is not deformed by bones when exporting. Make "
"sure that the skeleton is reset to its T-pose or default rest pose before "
"exporting with your favorite 3D editor."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:29
msgid "Exporting DAE files from Maya and 3DS Max"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:31
msgid ""
"Autodesk added built-in COLLADA support to Maya and 3DS Max, but it's broken "
"by default and should not be used. The best way to export this format is by "
"using the `OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/"
"OpenCOLLADA-Tools>`__ plugins. They work well, although they are not always "
"up-to date with the latest version of the software."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:39
msgid "Exporting glTF 2.0 files from Blender"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:41
msgid ""
"There are three ways to export glTF files from Blender. As a glTF binary (``."
"glb`` file), glTF embedded (``.gltf`` file), and with textures (``gltf`` + "
"``.bin`` + textures)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:44
msgid ""
"glTF binary files are the smallest of the three options. They include the "
"mesh and textures set up in Blender. When brought into Godot the textures "
"are part of the object's material file."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:47
msgid ""
"glTF embedded files function the same way as binary files. They don't "
"provide extra functionality in Godot, and shouldn't be used since they have "
"a larger file size."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:50
msgid ""
"There are two reasons to use glTF with the textures separate. One is to have "
"the scene description in a text based format and the binary data in a "
"separate binary file. This can be useful for version control if you want to "
"review changes in a text based format. The second is you need the texture "
"files separate from the material file. If you don't need either of those "
"glTF binary files are fine."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:57
msgid ""
"Blend shape animations cannot be imported - they require manual animation "
"within Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:61
msgid ""
"Blender versions older than 3.2 do not export emissive textures with the "
"glTF file. If your model uses one and you're using an older version of "
"Blender, it must be brought in separately."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:73
msgid "Exporting DAE files from Blender"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:75
msgid ""
"Blender has built-in COLLADA support, but it does not work properly for the "
"needs of game engines and should not be used as is."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:78
msgid ""
"Godot provides a `Blender plugin <https://github.com/godotengine/collada-"
"exporter>`_ that will correctly export COLLADA scenes for use in Godot. It "
"does not work in Blender 2.8 or newer, but there are plans to update it in "
"the future."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:83
msgid "Exporting ESCN files from Blender"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:85
msgid ""
"The most powerful one, called `godot-blender-exporter <https://github.com/"
"godotengine/godot-blender-exporter>`__. It uses a .escn file, which is kind "
"of another name for a .tscn file (Godot scene file); it keeps as much "
"information as possible from a Blender scene. However, it is considered "
"experimental."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:91
msgid ""
"The ESCN exporter has a detailed `document <escn_exporter/index.html>`__ "
"describing its functionality and usage."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:95
msgid "Exporting textures separately"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:97
msgid ""
"While textures can be exported with a model in certain file formats, such as "
"glTF 2.0, you can also export them separately. Godot uses PBR (physically "
"based rendering) for its materials, so if a texturing program can export PBR "
"textures, they can work in Godot. This includes the `Substance suite "
"<https://www.substance3d.com/>`__, `ArmorPaint (open source) <https://"
"armorpaint.org/>`__, and `Material Maker (open source) <https://github.com/"
"RodZill4/material-maker>`__."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:102
msgid ""
"For more information on Godot's materials, see :ref:`doc_spatial_material`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:105
msgid "Exporting considerations"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:107
msgid ""
"Since GPUs can only render triangles, meshes that contain quads or N-gons "
"have to be *triangulated* before they can be rendered. Godot can triangulate "
"meshes on import, but results may be unpredictable or incorrect, especially "
"with N-gons. Regardless of the target application, triangulating *before* "
"exporting the scene will lead to more consistent results and should be done "
"whenever possible."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:114
msgid ""
"To avoid issues with incorrect triangulation after importing in Godot, it is "
"recommended to make the 3D DCC triangulate objects on its own. In Blender, "
"this can be done by adding a Triangulate modifier to your objects and making "
"sure **Apply Modifiers** is checked in the export dialog. Alternatively, "
"depending on the exporter, you may be able to find and enable a "
"**Triangulate Faces** option in the export dialog."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:121
msgid ""
"To avoid issues with 3D selection in the editor, it is recommended to apply "
"the object transform in the 3D DCC before exporting the scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:125
msgid "Import workflows"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:127
msgid ""
"Godot scene importer allows different workflows regarding how data is "
"imported. Depending on many options, it is possible to import a scene with:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:130
msgid ""
"External materials (default): Where each material is saved to a file "
"resource. Modifications to them are kept."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:131
msgid ""
"External meshes: Where each mesh is saved to a different file. Many users "
"prefer to deal with meshes directly."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:132
msgid ""
"External animations: Allowing saved animations to be modified and merged "
"when sources change."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:133
msgid ""
"External scenes: Save each of the root nodes of the imported scenes as a "
"separate scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:134
msgid "Single scene: A single scene file with everything built in."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:138
msgid ""
"As different developers have different needs, this import process is highly "
"customizable."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:141
msgid "Import options"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:143
msgid "The importer has several options, which will be discussed below:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:151
msgid "Root Type"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:153
msgid ""
"By default, the type of the root node in imported scenes is \"Spatial\", but "
"this can be modified."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:156
msgid "Root Name"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:158
msgid "Allows setting a specific name to the generated root node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:161
msgid "Root Scale"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:163
msgid "The scale of the root node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:166
msgid "Custom Script"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:168
msgid ""
"A special script to process the whole scene after import can be provided. "
"This is great for post processing, changing materials, doing funny stuff "
"with the geometry etc."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:172
msgid "Create a script like this:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:184
msgid ""
"The ``post_import`` function takes the imported scene as argument (the "
"parameter is actually the root node of the scene). The scene that will "
"finally be used must be returned. It can be a different one."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:189
#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:208
#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:273
#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:371
msgid "Storage"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:191
msgid ""
"By default, Godot imports a single scene. This option allows specifying that "
"nodes below the root will each be a separate scene and instanced into the "
"imported one."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:195
msgid ""
"Of course, instancing such imported scenes in other places manually works, "
"too."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:202
#: ../../docs/tutorials/export/exporting_for_macos.rst:126
#: ../../docs/tutorials/io/data_paths.rst:72
#: ../../docs/tutorials/io/data_paths.rst:121
msgid "Location"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:204
msgid ""
"Godot supports materials in meshes or nodes. By default, materials will be "
"put on each node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:210
msgid ""
"Materials can be stored within the scene or in external files. By default, "
"they are stored in external files so editing them is possible. This is "
"because most 3D DCCs don't have the same material options as those present "
"in Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:214
msgid ""
"When materials are built-in, they will be lost each time the source scene is "
"modified and re-imported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:219
msgid ""
"Godot will not reimport materials that are stored in external files unless "
"you remove the associated ``.material`` file before reimporting."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:222
msgid ""
"To force reimporting materials every time the 3D scene is reimported, change "
"the material storage mode in the 3D scene by selecting it in the FileSystem "
"dock, going to the Import dock then setting **Material > Storage** to "
"**Built-In** instead of **Files**."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:228
msgid "Keep On Reimport"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:230
msgid ""
"Once materials are edited to use Godot features, the importer will keep the "
"edited ones and ignore the ones coming from the source scene. This option is "
"only present if materials are saved as files."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:235
msgid "Meshes"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:238
msgid "Compress"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:240
msgid ""
"Makes meshes use less precise numbers for multiple aspects of the mesh in "
"order to save space."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:253
msgid "These are:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:244
msgid ""
"Transform Matrix (Location, rotation, and scale)             : 32-bit float "
"to 16-bit signed integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:245
msgid ""
"Vertices                                                     : 32-bit float "
"to 16-bit signed integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:246
msgid ""
"Normals                                                      : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:247
msgid ""
"Tangents                                                     : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:248
msgid ""
"Vertex Colors                                                : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:249
msgid ""
"UV                                                           : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:250
msgid ""
"UV2                                                          : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:251
msgid ""
"Vertex weights                                               : 32-bit float "
"to 16-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:252
msgid ""
"Armature bones                                               : 32-bit float "
"to 16-bit unsigned integer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:253
msgid ""
"Array index                                                  : 32-bit or 16-"
"bit unsigned integer based on how many elements there are."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:257
msgid "Additional info:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:256
msgid ""
"UV2 = The second UV channel for detail textures and baked lightmap textures."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:257
msgid ""
"Array index = An array of numbers that number each element of the arrays "
"above; i.e. they number the vertices and normals."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:259
msgid ""
"In some cases, this might lead to loss of precision, so disabling this "
"option may be needed. For instance, if a mesh is very big or there are "
"multiple meshes being imported that cover a large area, compressing the "
"import of this mesh(es) may lead to gaps in geometry or vertices not being "
"exactly where they should be."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:265
msgid "Ensure Tangents"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:267
msgid ""
"If textures with normal mapping are to be used, meshes need to have tangent "
"arrays. This option ensures that these are generated if not present in the "
"source scene. Godot uses `Mikktspace <http://www.mikktspace.com/>`__ for "
"this, but it's always better to have them generated in the exporter."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:275
msgid ""
"Meshes can be stored in separate files (resources) instead of built-in. This "
"does not have much practical use unless one wants to build objects with them "
"directly."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:278
msgid ""
"This option is provided to help those who prefer working directly with "
"meshes instead of scenes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:282
msgid "Light Baking"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:284
msgid "Whether or not the mesh is used in baked lightmaps."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:286
msgid "**Disabled:** The mesh is not used in baked lightmaps."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:287
msgid "**Enable:** The mesh is used in baked lightmaps."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:288
msgid ""
"**Gen Lightmaps:** The mesh is used in baked lightmaps, and unwraps a second "
"UV layer for lightmaps."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:290
msgid "For more information on light baking see :ref:`doc_baked_lightmaps`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:293
msgid "External Files"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:295
msgid ""
"Generated meshes and materials can be optionally stored in a subdirectory "
"with the name of the scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:299
msgid "Animation options"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:301
msgid ""
"Godot provides many options regarding how animation data is dealt with. Some "
"exporters (such as Blender) can generate many animations in a single file. "
"Others, such as 3DS Max or Maya, need many animations put into the same "
"timeline or, at worst, put each animation in a separate file."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:308
msgid "Import of animations is enabled by default."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:312
msgid ""
"To modify animations from an imported 3D scene, you need to change the "
"animation storage option from **Built-In** to **Files** in the Import dock. "
"Otherwise, changes made to animations from Godot will be lost when the "
"project is run."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:317
msgid "FPS"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:319
msgid ""
"Most 3D export formats store animation timeline in seconds instead of "
"frames. To ensure animations are imported as faithfully as possible, please "
"specify the frames per second used to edit them. Failing to do this may "
"result in shaky animations."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:324
msgid "Filter Script"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:326
msgid ""
"It is possible to specify a filter script in a special syntax to decide "
"which tracks from which animations should be kept."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:329
msgid ""
"The filter script is executed against each imported animation. The syntax "
"consists of two types of statements, the first for choosing which animations "
"to filter, and the second for filtering individual tracks within the matched "
"animation. All name patterns are performed using a case insensitive "
"expression match, using ``?`` and ``*`` wildcards (using ``String.matchn()`` "
"under the hood)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:335
msgid ""
"The script must start with an animation filter statement (as denoted by the "
"line beginning with an ``@``). For example, if we would like to apply "
"filters to all imported animations which have a name ending in "
"``\"_Loop\"``::"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:341
msgid ""
"Similarly, additional patterns can be added to the same line, separated by "
"commas. Here is a modified example to additionally *include* all animations "
"with names that begin with ``\"Arm_Left\"``, but also *exclude* all "
"animations which have names ending in ``\"Attack\"``::"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:347
msgid ""
"Following the animation selection filter statement, we add track filtering "
"patterns to indicate which animation tracks should be kept or discarded. If "
"no track filter patterns are specified, then all tracks within the matched "
"animations will be discarded!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:351
msgid ""
"It's important to note that track filter statements are applied in order for "
"each track within the animation, this means that one line may include a "
"track, a later rule can still discard it. Similarly, a track excluded by an "
"early rule may then be re-included once again by a filter rule further down "
"in the filter script."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:356
msgid ""
"For example: include all tracks in animations with names ending in "
"``\"_Loop\"``, but discard any tracks affecting a ``\"Skeleton\"`` which end "
"in ``\"Control\"``, unless they have ``\"Arm\"`` in their name::"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:365
msgid ""
"In the above example, tracks like ``\"Skeleton:Leg_Control\"`` would be "
"discarded, while tracks such as ``\"Skeleton:Head\"`` or ``\"Skeleton:"
"Arm_Left_Control\"`` would be retained."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:368
msgid ""
"Any track filter lines that do not begin with a ``+`` or ``-`` are ignored."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:373
msgid ""
"By default, animations are saved as built-in. It is possible to save them to "
"a file instead. This allows adding custom tracks to the animations and "
"keeping them after a reimport."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:377
msgid "Optimizer"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:379
msgid ""
"When animations are imported, an optimizer is run, which reduces the size of "
"the animation considerably. In general, this should always be turned on "
"unless you suspect that an animation might be broken due to it being enabled."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:383
msgid "Clips"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:385
msgid ""
"It is possible to specify multiple animations from a single timeline as "
"clips. For this to work, the model must have only one animation that is "
"named ``default``. To create clips, change the clip amount to something "
"greater than zero. You can then name a clip, specify which frames it starts "
"and stops on, and choose whether the animation loops or not."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:394
msgid "Scene inheritance"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:396
msgid ""
"In many cases, it may be desired to make modifications to the imported "
"scene. By default, this is not possible because if the source asset changes "
"(source ``.dae``, ``.gltf``, ``.obj`` file re-exported from 3D modelling "
"app), Godot will re-import the whole scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:399
msgid ""
"It is possible, however, to make local modifications by using *Scene "
"Inheritance*. Try to open the imported scene and the following dialog will "
"appear:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:404
msgid "In inherited scenes, the only limitations for modifications are:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:406
msgid "Nodes can't be removed (but can be added anywhere)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:407
msgid ""
"Sub-Resources can't be edited (save them externally as described above for "
"this)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:409
msgid "Other than that, everything is allowed!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:414
msgid "Import hints"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:416
msgid ""
"Many times, when editing a scene, there are common tasks that need to be "
"done after exporting:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:418
msgid "Adding collision detection to objects."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:419
msgid "Setting objects as navigation meshes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:420
msgid ""
"Deleting nodes that are not used in the game engine (like specific lights "
"used for modelling)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:422
msgid ""
"To simplify this workflow, Godot offers several suffixes that can be added "
"to the names of the objects in your 3D modelling software. When imported, "
"Godot will detect suffixes in object names and will perform actions "
"automatically."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:428
msgid "All the suffixes described below are *case-sensitive*."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:431
msgid "Remove nodes (-noimp)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:433
msgid ""
"Objects that have the ``-noimp`` suffix will be removed at import-time no "
"matter what their type is. They will not appear in the imported scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:437
msgid "Create collisions (-col, -convcol, -colonly, -convcolonly)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:439
msgid ""
"The option ``-col`` will work only for Mesh objects. If it is detected, a "
"child static collision node will be added, using the same geometry as the "
"mesh. This will create a triangle mesh collision shape, which is a slow, but "
"accurate option for collision detection. This option is usually what you "
"want for level geometry (but see also ``-colonly`` below)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:445
msgid ""
"The option ``-convcol`` will create a :ref:`class_convexpolygonshape` "
"instead of a :ref:`class_concavepolygonshape`. Unlike triangle meshes which "
"can be concave, a convex shape can only accurately represent a shape that "
"doesn't have any concave angles (a pyramid is convex, but a hollow box is "
"concave). Due to this, convex collision shapes are generally not suited for "
"level geometry. When representing simple enough meshes, convex collision "
"shapes can result in better performance compared to a triangle collision "
"shape. This option is ideal for simple or dynamic objects that require "
"mostly-accurate collision detection."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:454
msgid ""
"However, in both cases, the visual geometry may be too complex or not smooth "
"enough for collisions. This can create physics glitches and slow down the "
"engine unnecessarily."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:458
msgid ""
"To solve this, the ``-colonly`` modifier exists. It will remove the mesh "
"upon importing and will create a :ref:`class_staticbody` collision instead. "
"This helps the visual mesh and actual collision to be separated."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:462
msgid ""
"The option ``-convcolonly`` works in a similar way, but will create a :ref:"
"`class_convexpolygonshape` instead."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:464
msgid ""
"The option ``-colonly`` can also be used with Blender's empty objects. On "
"import, it will create a :ref:`class_staticbody` with a collision node as a "
"child. The collision node will have one of a number of predefined shapes, "
"depending on Blender's empty draw type:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:471
msgid "Single arrow will create a :ref:`class_rayshape`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:472
msgid "Cube will create a :ref:`class_boxshape`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:473
msgid "Image will create a :ref:`class_planeshape`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:474
msgid ""
"Sphere (and the others not listed) will create a :ref:`class_sphereshape`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:476
msgid ""
"When possible, **try to use a few primitive collision shapes** instead of "
"triangle mesh or convex shapes. Primitive shapes often have the best "
"performance and reliability."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:482
msgid ""
"For better visibility in Blender's editor, you can set the \"X-Ray\" option "
"on collision empties and set some distinct color for them in Blender's "
"**User Preferences > Themes > 3D View > Empty**."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:488
msgid ""
"See :ref:`doc_collision_shapes_3d` for a comprehensive overview of collision "
"shapes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:492
msgid "Create navigation (-navmesh)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:494
msgid ""
"A mesh node with the ``-navmesh`` suffix will be converted to a navigation "
"mesh. The original Mesh object will be removed at import-time."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:498
msgid "Create a VehicleBody (-vehicle)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:500
msgid ""
"A mesh node with the ``-vehicle`` suffix will be imported as a child to a :"
"ref:`class_VehicleBody` node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:504
msgid "Create a VehicleWheel (-wheel)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:506
msgid ""
"A mesh node with the ``-wheel`` suffix will be imported as a child to a :ref:"
"`class_VehicleWheel` node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:510
msgid "Rigid Body (-rigid)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:512
msgid ""
"A mesh node with the ``-rigid`` suffix will be imported as a :ref:"
"`class_RigidBody`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:515
msgid "Animation loop (-loop, -cycle)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:517
msgid ""
"Animation clips in the COLLADA document that start or end with the token "
"``loop`` or ``cycle`` will be imported as a Godot Animation with the loop "
"flag set. **Unlike the other suffixes described above, this does not require "
"a hyphen.**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_scenes.rst:521
msgid ""
"In Blender, this requires using the NLA Editor and naming the Action with "
"the ``loop`` or ``cycle`` prefix or suffix."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:4
msgid "Exporting 3D scenes"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:7
#: ../../docs/tutorials/export/exporting_basics.rst:7
#: ../../docs/community/asset_library/using_assetlib.rst:10
msgid "Overview"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:9
msgid ""
"In Godot it is possible to export 3D scenes as a glTF 2.0 file. You can "
"export as a glTF binary (``.glb`` file) or glTF embedded with textures "
"(``gltf`` + ``.bin`` + textures). This allows you to create scenes in Godot, "
"such as a CSG mesh blockout for a level, export it to clean it up in a "
"program such as Blender, and then bring it back into Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:17
msgid "Only Blender 2.83 and newer can import glTF files exported by Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:19
msgid ""
"To export a scene in the editor go to **Project > Tools > Export GLTF...**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:24
#: ../../docs/tutorials/editor/using_the_web_editor.rst:43
#: ../../docs/tutorials/export/exporting_for_web.rst:88
#: ../../docs/tutorials/performance/general_optimization.rst:70
msgid "Limitations"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:26
msgid "There are several limitations with glTF export."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:28
msgid ""
"No support for exporting particles since their implementation varies across "
"engines."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:29
msgid "ShaderMaterials cannot be exported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:30
msgid "No support for exporting 2D scenes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/exporting_3d_scenes.rst:31
msgid "Only supported in editor builds (``tools=yes``)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:2
msgid "Blender ESCN exporter"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:4
msgid ""
"This chapter relates to the Blender plugin called \"Godot Blender "
"Exporter\", which can be downloaded here: https://github.com/godotengine/"
"godot-blender-exporter"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:7
msgid ""
"This plugin can be used to export Blender scenes in a Godot-specific scene "
"format called ESCN, which is similar to TSCN (text format) but will be "
"imported as binary SCN for performance."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:12
msgid "Details on exporting"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:27
msgid "Disabling specific objects"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:29
msgid ""
"Sometimes you don't want some objects exported (e.g. high-res models used "
"for baking). An object will not be exported if it is not rendered in the "
"scene. This can be set in the outliner:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:35
msgid ""
"Objects hidden in the viewport will be exported, but will be hidden in the "
"Godot scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:40
msgid "Build pipeline integration"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/index.rst:42
msgid ""
"If you have hundreds of model files, you don't want your artists to waste "
"time manually exporting their blend files. To combat this, the exporter "
"provides a python function ``io_scene_godot.export(out_file_path)`` that can "
"be called to export a file. This allows easy integration with other build "
"systems. An example Makefile and python script that exports all the blends "
"in a directory are present in the Godot-Blender-exporter repository."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:5
msgid "Using existing Godot materials"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:7
msgid ""
"One way in which the exporter can handle materials is to attempt to match "
"the Blender material with an existing Godot material. This has the advantage "
"of being able to use all of the features of Godot's material system, but it "
"means that you cannot see your model with the material applied inside "
"Blender."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:12
msgid ""
"To do this, the exporter attempts to find Godot materials with names that "
"match those of the material name in Blender. So if you export an object in "
"Blender with the material name ``PurpleDots`` then the exporter will search "
"for the file ``PurpleDots.tres`` and assign it to the object. If this file "
"is not a ``SpatialMaterial`` or ``ShaderMaterial`` or if it cannot be found, "
"then the exporter will fall back to exporting the material from Blender."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:20
msgid ""
"Where the exporter searches for the ``.tres`` file is determined by the "
"\"Material Search Paths\" option:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:34
msgid "This can take the value of:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:26
msgid ""
"Project Directory - Attempts to find the ``project.Godot`` and recursively "
"searches through subdirectories. If ``project.Godot`` cannot be found it "
"will throw an error. This is useful for most projects where naming conflicts "
"are unlikely."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:30
msgid ""
"Export Directory - Look for materials in subdirectories of the export "
"location. This is useful for projects where you may have duplicate material "
"names and need more control over what material gets assigned."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:33
msgid "None - Do not search for materials. Export them from the Blender file."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:37
msgid "Export of Cycles/EEVEE materials"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:39
msgid ""
"The exporter has a primitive support for converting Cycles/EEVEE material "
"node tree to Godot Shader Material. Note that some of the Shader Node are "
"not supported yet due to difficulties in implementation, which are:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:43
msgid "all the ``noisy textures``"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:44
msgid "``generated texture coordinates``"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:45
msgid "``group node``"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:46
msgid ""
"shader nodes except ``PrincipledBSDF``, ``Diffuse``, ``Glossy``, ``Glass``, "
"``add shader`` and ``mix shader``"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:50
msgid ""
"If possible, try to use PrincipledBSDF node with GGX distribution as the "
"output shader node, it is the only one guaranteed to be exactly correct. "
"Others are just based on approximation."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:53
msgid ""
"Sometimes materials may not be valid for exporting (e.g. has some "
"unsupported node) or it is using Blender Internal Engine, only the diffuse "
"color and a few flags (e.g. unshaded) are exported and form a Spatial "
"Material."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:59
msgid "Generate external materials"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:61
msgid ""
"The default configuration of material exporting would keep all the materials "
"internal to the ``escn`` file. There is an option which could enable "
"generating external ``.material`` file when the ``escn`` file opens in Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/material.rst:67
msgid ""
"``.material`` file can be assigned to any material slot to be a external "
"resource."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:2
msgid "Physics properties"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:4
msgid ""
"Exporting physics properties is done by enabling \"Rigid Body\" in Blender's "
"physics tab:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:10
msgid ""
"By default, a single Blender object with rigid body enabled will export as "
"three nodes: a PhysicsBody, a CollisionShape, and a MeshInstance."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:14
msgid "Body type"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:16
msgid ""
"Blender only has the concept of \"Active\" and \"Passive\" rigid bodies. "
"These turn into Static and RigidBody nodes. To create a kinematic body, "
"enable the \"animated\" checkbox on an \"Active\" body:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:25
msgid ""
"Many of the parameters for collision shapes are missing from Blender, and "
"many of the collision shapes are also not present. However, almost all of "
"the options in Blender's rigid body collision and rigid body dynamics "
"interfaces are supported:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:39
msgid "There are the following caveats:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:33
msgid ""
"Not all of the collision shapes are supported. Only ``Mesh``, ``Convex "
"Hull``, ``Capsule``, ``Sphere`` and ``Box`` are supported in both Blender "
"and Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:36
msgid ""
"In Godot, you can have different collision groups and collision masks. In "
"Blender you only have collision groups. As a result, the exported object's "
"collision mask is equal to its collision group. Most of the time, this is "
"what you want."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:42
msgid ""
"To build compound physics shapes, parent together multiple objects with "
"rigid body enabled. The physics properties are taken from the parent-most "
"rigid body, and the rest are used as collision shapes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:47
msgid "Collision geometry only"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:49
msgid ""
"Frequently you want different geometry for your collision meshes and your "
"graphical meshes, but by default, the exporter will export a mesh along with "
"the collision shape. To only export the collision shape, set the object's "
"maximum draw type to Wire:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/physics.rst:56
msgid ""
"This will also influence how the object is shown in Blender's viewport. Most "
"of the time, you want your collision geometry to be shown see-through when "
"working on the models, so this works out fairly nicely."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:4
msgid ""
"By default, lamps in Blender have shadows enabled. This can cause "
"performance issues in Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:8
msgid ""
"Lamps are exported using their \"Blender Render\" settings. When Blender 2.8 "
"is released, this will be removed and this part of the exporter will change."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:11
msgid ""
"Sun, point and spot lamps are all exported from Blender along with many of "
"their properties:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:16
msgid "There are some things to note:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:18
msgid ""
"In Blender, a light casts light all the way to infinity. In Godot, it is "
"clamped by the attenuation distance. To most closely match between the "
"viewport and Godot, enable the \"Sphere\" checkbox. (Highlighted green)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:21
msgid ""
"Light attenuation models differ between Godot and Blender. The exporter "
"attempts to make them match, but it isn't always very good."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:23
msgid ""
"Spotlight angular attenuation models also differ between Godot and Blender. "
"The exporter attempts to make them similar, but it doesn't always look the "
"same."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/lights.rst:26
msgid ""
"There is no difference between buffer shadow and ray shadow in the export."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/mesh.rst:2
msgid "Mesh"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/mesh.rst:5
msgid "Modifiers"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/mesh.rst:6
msgid ""
"There is an exporting option :code:`Apply Modifiers` to control whether mesh "
"modifiers are applied to the exported mesh."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/mesh.rst:11
msgid "Shape Key"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/mesh.rst:12
msgid ""
"Exporting mesh shape key is supported, however exporting each shape key is "
"almost like exporting the mesh again, so don't be surprised it takes a "
"relatively long time."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/mesh.rst:17
msgid ""
"A lot of modifiers are not compatible with shape keys (e.g. subsurface "
"modifier), so if you found you have incorrect shape keys exported, try to "
"disable :code:`Apply Modifiers` and do the exporting again. Besides, it is "
"worthwhile to report the incompatible modifier to the `issue list <https://"
"github.com/godotengine/godot-blender-exporter/issues>`__, which helps to "
"develop the exporter to have a more precise check of modifiers."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:2
#: ../../docs/development/file_formats/tscn.rst:167
msgid "Skeleton"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:7
msgid "Rest Bone"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:9
msgid ""
"Armature object in Blender is exported as a Skeleton node along with rest "
"position (transform in Godot) of bones."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:13
msgid ""
"The three check boxes :code:`Inherit Rotation`, :code:`Inherit Scale`, :code:"
"`Local Location` (colored in red) must be ticked when building armature in "
"Blender, so that the exported bone transform be consistent between Blender "
"and Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:18
msgid ""
"It is important that the mesh is not deformed by bones when exporting in "
"Blender. Make sure that the skeleton is reset to its T-pose or default rest "
"pose."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:22
msgid "Bone Weights"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:24
msgid ""
"Blender put rigged mesh vertices which has no bone weights at its original "
"position, but these vertices would be placed at (0, 0, 0) in Godot, making "
"the mesh deformed. Therefore, the exporter would raise an error for any "
"vertex with no bone weights detected in a rigged mesh."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:30
msgid "Non-Deform Bone"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:32
msgid ""
"Note that the non-deform bone can be configured as not exported by enabling "
"the :code:`Exclude Control Bones`; the deform bone checkbox is shown in the "
"picture."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:38
msgid "Bone Attachment"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/skeleton.rst:39
msgid ""
"A bone can be the parent of an object in Blender; this relation is exported "
"as a BoneAttachment node in the Godot scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:8
msgid "Animation supported:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:4
msgid "transform animation of all types of objects"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:5
msgid "transform animation of pose bones"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:6
msgid "shape key animation"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:7
msgid "light animation"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:8
msgid "camera animation"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:11
msgid "Multiple Actions For Single Object"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:12
msgid ""
"In most games, one object would have several animations to switch between. "
"This add-on has support for exporting multiple actions all at once into a "
"single AnimationPlayer and makes it easy to switch actions."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:16
msgid ""
"This workflow makes use of blender nla_tracks. Here is a brief guide on how "
"to use this feature:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:19
msgid "**1. Stash active action**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:21
msgid ""
"New created action is always an active action bound to object. There are "
"several ways to place an active action into NLA track, one is of course "
"doing it in ``NLA Editor``"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:28
msgid "Or it can be done stashing the action in ``Dope Sheet``"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:33
msgid "**2. Check mute status of NLA tracks**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:35
msgid ""
"An NLA track can be ``mute`` or ``unmute``, the exporter will export all the "
"``mute`` NLA track as a separate action, while blends all the ``unmute`` NLA "
"tracks into every action (including the action action) being exported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:41
msgid "**3. Export the scene**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:43
msgid "Make sure the ``Export Stashed Actions`` option has been turned on."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:47
msgid ""
"Then all the stashed actions, as well as the active action, are exported to "
"an AnimationPlayer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:54
msgid "Constraints"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:55
msgid ""
"Sometimes complicated animation is built with object constraint; a usual "
"example is inverse kinematics. The add-on would automatically check if an "
"object has some constraint; if it does, all the constraints are baked into "
"actions and then exported along with the object."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:62
msgid "Animation Mode"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:63
msgid ""
"Godot and Blender have different structure to store animation data. In Godot "
"animation data is stored in an AnimationPlayer node, instead of in each "
"animated node. In order to fix this inconsistence and still make the "
"animation play versatile, this add-on has three animation exporting modes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:70
msgid "**Mode 'Animation as Actions'**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:72
msgid ""
"Treat all the animations as object actions, so in the exported scene, every "
"object would have its own AnimationPlayer and hold its actions."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:76
msgid "**Mode 'Scene Animation'**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:78
msgid ""
"If you want your animation to generate the same result as playing at "
"Blender's timeline, this is what you want. In this mode, all the animations "
"in the scene are placed in just one AnimationPlayer in the scene root."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:82
msgid "**Mode 'Animation as Action with Squash'**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/escn_exporter/animation.rst:84
msgid ""
"This mode has very similar behavior of mode 'Animation as Action', but it "
"can generate fewer AnimationPlayers; objects in parent-children relationship "
"would share their AnimationPlayer. It is useful when you have several rigs, "
"and each Skeleton and Mesh has actions; then one rig would have just one "
"AnimationPlayer."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:4
#: ../../docs/tutorials/audio/audio_buses.rst:48
msgid "Audio buses"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:9
msgid ""
"Godot's audio processing code has been written with games in mind, with the "
"aim of achieving an optimal balance between performance and sound quality."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:12
msgid ""
"Godot's audio engine allows any number of audio buses to be created and any "
"number of effect processors can be added to each bus. Only the hardware of "
"the device running your game will limit the number of buses and effects that "
"can be used before performance starts to suffer."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:18
msgid "Decibel scale"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:20
msgid ""
"Godot's sound interface is designed to meet the expectations of sound design "
"professionals. To this end, it primarily uses the decibel scale."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:23
msgid "For those unfamiliar with it, it can be explained with a few facts:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:25
msgid ""
"The decibel (dB) scale is a relative scale. It represents the ratio of sound "
"power by using 20 times the base 10 logarithm of the ratio (20 × log\\ :sub:"
"`10`\\ (P/P\\ :sub:`0`\\ ))."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:28
msgid ""
"For every 6 dB, sound amplitude doubles or halves. 12 dB represents a factor "
"of 4, 18 dB a factor of 8, 20 dB a factor of 10, 40 dB a factor of 100, etc."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:30
msgid ""
"Since the scale is logarithmic, true zero (no audio) can't be represented."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:31
msgid ""
"0 dB is the maximum amplitude possible in a digital audio system. This limit "
"is not the human limit, but a limit from the sound hardware. Audio with "
"amplitudes that are too high to be represented properly below 0 dB create a "
"kind of distortion called *clipping*."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:35
msgid ""
"To avoid clipping, your sound mix should be arranged so that the output of "
"the *master bus* (more on that later) never exceeds 0 dB."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:37
msgid ""
"Every 6 dB below the 0 dB limit, sound energy is *halved*. It means the "
"sound volume at -6 dB is half as loud as 0dB. -12 dB is half as loud as -6 "
"dB and so on."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:40
msgid ""
"When working with decibels, sound is considered no longer audible between "
"-60 dB and -80 dB. This makes your working range generally between -60 dB "
"and 0 dB."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:44
msgid ""
"This can take a bit getting used to, but it's friendlier in the end and will "
"allow you to communicate better with audio professionals."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:50
msgid "Audio buses can be found in the bottom panel of the Godot editor:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:54
msgid ""
"An *audio bus* (also called an *audio channel*) can be considered a place "
"that audio is channeled through on the way to playback through a device's "
"speakers. Audio data can be *modified* and *re-routed* by an audio bus. An "
"audio bus has a VU meter (the bars that light up when sound is played) which "
"indicates the amplitude of the signal passing through."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:60
msgid ""
"The leftmost bus is the *master bus*. This bus outputs the mix to your "
"speakers so, as mentioned in the *Decibel scale* section above, make sure "
"that your mix level doesn't reach 0 dB in this bus. The rest of the audio "
"buses can be flexibly routed. After modifying the sound, they send it to "
"another bus to the left. The destination bus can be specified for each of "
"the non-master audio buses. Routing always passes audio from buses on the "
"right to buses further to the left. This avoids infinite routing loops."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:70
msgid ""
"In the above image, the output of *Bus 2* has been routed to the *Master* "
"bus."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:73
msgid "Playback of audio through a bus"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:75
msgid ""
"To test passing audio to a bus, create an AudioStreamPlayer node, load an "
"AudioStream and select a target bus for playback:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:80
msgid "Finally, toggle the **Playing** property to **On** and sound will flow."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:84
msgid ""
"You may also be interested in reading about :ref:`doc_audio_streams` now."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:87
msgid "Adding effects"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:89
msgid ""
"Audio buses can contain all sorts of effects. These effects modify the sound "
"in one way or another and are applied in order."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:94
msgid ""
"Try them all out to get a sense of how they alter sound. Here follows a "
"short description of the available effects:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:98
msgid "Amplify"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:100
msgid ""
"Amplify changes the amplitude of the signal. Some care needs to be taken. "
"Setting the level too high can make the sound clip, which is usually "
"undesirable."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:105
msgid "BandLimit and BandPass"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:107
msgid ""
"These are resonant filters which block frequencies around the *Cutoff* "
"point. BandPass can be used to simulate sound passing through an old "
"telephone line or megaphone. Modulating the BandPass frequency can simulate "
"the sound of a wah-wah guitar pedal, think of the guitar in Jimi Hendrix's "
"*Voodoo Child (Slight Return)*."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:116
msgid ""
"The Capture effect copies the audio frames of the audio bus that it is on "
"into an internal buffer. This can be used to capture data from the "
"microphone or to transmit audio over the network in real-time."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:121
msgid "Chorus"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:123
msgid ""
"The Chorus effect duplicates the incoming audio, delays the duplicate "
"slightly and uses an LFO to continuously modulate the pitch of the "
"duplicated signal before mixing the duplicated signal(s) and the original "
"together again. This creates a shimmering effect and adds stereo width to "
"the sound."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:129
msgid "Compressor"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:131
msgid ""
"A dynamic range compressor automatically attenuates the level of the "
"incoming signal when its amplitude exceeds a certain threshold. The level of "
"attenuation applied is proportional to how far the incoming audio exceeds "
"the threshold. The compressor's Ratio parameter controls the degree of "
"attenuation. One of the main uses of a compressor is to reduce the dynamic "
"range of signals with very loud and quiet parts. Reducing the dynamic range "
"of a signal can make it easier to mix."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:139
msgid "The compressor has many uses. For example:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:141
msgid "It can be used in the Master bus to compress the whole output."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:142
msgid ""
"It can be used in voice channels to ensure they sound as even as possible."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:143
msgid ""
"It can be *sidechained*. This means it can reduce the sound level of one "
"signal using the level of another audio bus for threshold detection. This "
"technique is very common in video game mixing to \"duck\" the level of music "
"or sound effects when voices need to be heard."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:147
msgid ""
"It can accentuate transients by using a slower attack. This can make sound "
"effects more punchy."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:152
msgid ""
"If your goal is to prevent a signal from exceeding a given amplitude "
"altogether, rather than to reduce the dynamic range of the signal, a :ref:"
"`limiter <doc_audio_buses_limiter>` is likely a better choice than a "
"compressor."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:159
msgid "Delay"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:161
msgid ""
"Adds an \"echo\" effect with a feedback loop. It can be used together with "
"*Reverb* to simulate wide rooms, canyons, etc. where sound bounces are far "
"apart."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:166
msgid "Distortion"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:168
msgid ""
"Makes the sound distorted. Godot offers several types of distortion: "
"*overdrive*, *tan* and *bit crushing*. Distortion can be used to simulate "
"sound coming through a low-quality speaker or device."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:173
msgid "EQ"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:175
msgid ""
"EQ is what all other equalizers inherit from. It can be extended with with "
"Custom scripts to create an equalizer with a custom number of bands."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:179
msgid "EQ6, EQ10, EQ21"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:181
msgid ""
"Godot provides three equalizers with different numbers of bands. An "
"equalizer on the Master bus can be useful to cut frequencies that the "
"device's speakers can't reproduce well (e.g. a mobile phone's speakers won't "
"reproduce bass content well). The equalizer effect can be disabled when "
"headphones are plugged in."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:189
msgid ""
"Filter is what all other filters inherit from and should not be used "
"directly."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:192
msgid "HighPassFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:194
msgid ""
"Cuts frequencies below a specific *Cutoff* frequency. HighPassFilter is used "
"to reduce the bass content of a signal."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:199
msgid "HighShelfFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:201
msgid "Reduces all frequencies above a specific *Cutoff* frequency."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:206
msgid "Limiter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:208
msgid ""
"A limiter is similar to a compressor, but it's less flexible and designed to "
"prevent a signal's amplitude exceeding a given dB threshold. Adding a "
"limiter to the Master bus is a safeguard against clipping."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:213
msgid "LowPassFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:215
msgid ""
"Cuts frequencies above a specific *Cutoff* frequency and can also resonate "
"(boost frequencies close to the *Cutoff* frequency). Low pass filters can be "
"used to simulate \"muffled\" sound. For instance, underwater sounds, sounds "
"blocked by walls, or distant sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:221
msgid "LowShelfFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:223
msgid "Reduces all frequencies below a specific *Cutoff* frequency."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:226
msgid "NotchFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:228
msgid ""
"The opposite of the BandPassFilter, it removes a band of sound from the "
"frequency spectrum at a given *Cutoff* frequency."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:232
msgid "Panner"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:234
msgid ""
"The Panner allows the stereo balance of a signal to be adjusted between the "
"left and right channels (wear headphones to audition this effect)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:238
msgid "Phaser"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:240
msgid ""
"It probably does not make much sense to explain that this effect is formed "
"by two signals being dephased and cancelling each other out. You can make a "
"Darth Vader voice with it, or jet-like sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:245
msgid "PitchShift"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:247
msgid ""
"This effect allows the adjustment of the signal's pitch independently of its "
"speed. All frequencies can be increased/decreased with minimal effect on "
"transients. PitchShift can be useful to create unusually high or deep voices."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:252
msgid "Record"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:254
msgid "The Record effect allows the user to record sound from a microphone."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:257
msgid "Reverb"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:259
msgid ""
"Reverb simulates rooms of different sizes. It has adjustable parameters that "
"can be tweaked to obtain the sound of a specific room. Reverb is commonly "
"outputted from :ref:`Areas <class_Area>` (see :ref:`Reverb buses "
"<doc_audio_streams_reverb_buses>`), or to apply a \"chamber\" feel to all "
"sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:266
msgid "SpectrumAnalyzer"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:268
msgid ""
"This effect doesn't alter audio, instead, you add this effect to buses you "
"want a spectrum analysis of. This would typically be used for audio "
"visualization. A demo project using this can be found `here <https://github."
"com/godotengine/godot-demo-projects/tree/master/audio/spectrum>`__."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:273
msgid "StereoEnhance"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:275
msgid ""
"This effect uses a few algorithms to enhance a signal's stereo spectrum."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:278
msgid "Automatic bus disabling"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:280
msgid ""
"There is no need to disable buses manually when not in use. Godot detects "
"that the bus has been silent for a few seconds and disables it (including "
"all effects)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:286
msgid "Disabled buses have a blue VU meter instead of a red-green one."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:289
msgid "Bus rearrangement"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:291
msgid ""
"Stream Players use bus names to identify a bus, which allows adding, "
"removing and moving buses around while the reference to them is kept. "
"However, if a bus is renamed, the reference will be lost and the Stream "
"Player will output to Master. This system was chosen because rearranging "
"buses is a more common process than renaming them."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:298
msgid "Default bus layout"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:300
msgid ""
"The default bus layout is automatically saved to the ``res://"
"default_bus_layout.tres`` file. Custom bus arrangements can be saved and "
"loaded from disk."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:4
msgid "Audio streams"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:9
msgid ""
"As you might have already read in :ref:`doc_audio_buses`, sound is sent to "
"each bus via an AudioStreamPlayer node. There are different kinds of "
"AudioStreamPlayers. Each one loads an AudioStream and plays it back."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:14
msgid "AudioStream"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:16
msgid ""
"An audio stream is an abstract object that emits sound. The sound can come "
"from many places, but is most commonly loaded from the filesystem. Audio "
"files can be loaded as AudioStreams and placed inside an AudioStreamPlayer. "
"You can find information on supported formats and differences in :ref:"
"`doc_importing_audio_samples`."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:21
msgid ""
"There are other types of AudioStreams, such as AudioStreamRandomPitch. This "
"one makes a random adjustment to the sound's pitch every time it's played "
"back. This can be helpful for adding variation to sounds that are played "
"back often."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:27
msgid "AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:31
msgid ""
"This is the standard, non-positional stream player. It can play to any bus. "
"In 5.1 sound setups, it can send audio to stereo mix or front speakers."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:35
msgid "AudioStreamPlayer2D"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:39
msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 2D positional "
"environment. When close to the left of the screen, the panning will go left. "
"When close to the right side, it will go right."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:45
msgid ""
"Area2Ds can be used to divert sound from any AudioStreamPlayer2Ds they "
"contain to specific buses. This makes it possible to create buses with "
"different reverb or sound qualities to handle action happening in a "
"particular parts of your game world."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:53
msgid "AudioStreamPlayer3D"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:57
msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 3D positional "
"environment. Depending on the location of the player relative to the screen, "
"it can position sound in stereo, 5.1 or 7.1 depending on the chosen audio "
"setup."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:61
msgid ""
"Similar to AudioStreamPlayer2D, an Area can divert the sound to an audio bus."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:65
msgid ""
"Unlike for 2D, the 3D version of AudioStreamPlayer has a few more advanced "
"options:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:70
msgid "Reverb buses"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:72
msgid ""
"Godot allows for 3D audio streams that enter a specific Area node to send "
"dry and wet audio to separate buses. This is useful when you have several "
"reverb configurations for different types of rooms. This is done by enabling "
"this type of reverb in the **Reverb Bus** section of the Area's properties:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:79
msgid ""
"At the same time, a special bus layout is created where each area receives "
"the reverb info from each area. A Reverb effect needs to be created and "
"configured in each reverb bus to complete the setup for the desired effect:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:85
msgid ""
"The Area's **Reverb Bus** section also has a parameter named **Uniformity**. "
"Some types of rooms bounce sounds more than others (like a warehouse), so "
"reverberation can be heard almost uniformly across the room even though the "
"source may be far away. Playing around with this parameter can simulate that "
"effect."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:92
msgid "Doppler"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:94
msgid ""
"When the relative velocity between an emitter and listener changes, this is "
"perceived as an increase or decrease in the pitch of the emitted sound. "
"Godot can track velocity changes in the AudioStreamPlayer3D and Camera "
"nodes. Both nodes have this property, which must be enabled manually:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:101
msgid ""
"Enable it by setting it depending on how objects will be moved: use **Idle** "
"for objects moved using ``_process``, or **Physics** for objects moved using "
"``_physics_process``. The tracking will happen automatically."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:4
msgid "Sync the gameplay with audio and music"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:9
msgid ""
"In any application or game, sound and music playback will have a slight "
"delay. For games, this delay is often so small that it is negligible. Sound "
"effects will come out a few milliseconds after any play() function is "
"called. For music this does not matter as in most games it does not interact "
"with the gameplay."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:11
msgid ""
"Still, for some games (mainly, rhythm games), it may be required to "
"synchronize player actions with something happening in a song (usually in "
"sync with the BPM). For this, having more precise timing information for an "
"exact playback position is useful."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:13
msgid ""
"Achieving very low playback timing precision is difficult. This is because "
"many factors are at play during audio playback:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:15
msgid ""
"Audio is mixed in chunks (not continuously), depending on the size of audio "
"buffers used (check latency in project settings)."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:16
msgid "Mixed chunks of audio are not played immediately."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:17
msgid "Graphics APIs display two or three frames late."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:18
msgid "When playing on TVs, some delay may be added due to image processing."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:20
msgid ""
"The most common way to reduce latency is to shrink the audio buffers (again, "
"by editing the latency setting in the project settings). The problem is that "
"when latency is too small, sound mixing will require considerably more CPU. "
"This increases the risk of skipping (a crack in sound because a mix callback "
"was lost)."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:22
msgid ""
"This is a common tradeoff, so Godot ships with sensible defaults that should "
"not need to be altered."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:24
msgid ""
"The problem, in the end, is not this slight delay but synchronizing graphics "
"and audio for games that require it. Beginning with Godot 3.2, some helpers "
"were added to obtain more precise playback timing."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:27
msgid "Using the system clock to sync"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:29
msgid ""
"As mentioned before, If you call :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>`, sound will not begin "
"immediately, but when the audio thread processes the next chunk."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:31
msgid ""
"This delay can't be avoided but it can be estimated by calling :ref:"
"`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:33
msgid ""
"The output latency (what happens after the mix) can also be estimated by "
"calling :ref:`AudioServer."
"get_output_latency()<class_AudioServer_method_get_output_latency>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:35
msgid ""
"Add these two and it's possible to guess almost exactly when sound or music "
"will begin playing in the speakers during *_process()*:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:79
msgid ""
"In the long run, though, as the sound hardware clock is never exactly in "
"sync with the system clock, the timing information will slowly drift away."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:81
msgid ""
"For a rhythm game where a song begins and ends after a few minutes, this "
"approach is fine (and it's the recommended approach). For a game where "
"playback can last a much longer time, the game will eventually go out of "
"sync and a different approach is needed."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:84
msgid "Using the sound hardware clock to sync"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:86
msgid ""
"Using :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"to obtain the current position for the song sounds ideal, but it's not that "
"useful as-is. This value will increment in chunks (every time the audio "
"callback mixed a block of sound), so many calls can return the same value. "
"Added to this, the value will be out of sync with the speakers too because "
"of the previously mentioned reasons."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:88
msgid ""
"To compensate for the \"chunked\" output, there is a function that can "
"help: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_method_get_time_since_last_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:91
msgid ""
"Adding the return value from this function to *get_playback_position()* "
"increases precision:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:103
msgid ""
"To increase precision, subtract the latency information (how much it takes "
"for the audio to be heard after it was mixed):"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:114
msgid ""
"The result may be a bit jittery due how multiple threads work. Just check "
"that the value is not less than in the previous frame (discard it if so). "
"This is also a less precise approach than the one before, but it will work "
"for songs of any length, or synchronizing anything (sound effects, as an "
"example) to music."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:116
msgid "Here is the same code as before using this approach:"
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:4
msgid "Recording with microphone"
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:6
msgid ""
"Godot supports in-game audio recording for Windows, macOS, Linux, Android "
"and iOS."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:9
msgid ""
"A simple demo is included in the official demo projects and will be used as "
"support for this tutorial: `<https://github.com/godotengine/godot-demo-"
"projects/tree/master/audio/mic_record>`_."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:13
msgid ""
"You will need to enable audio input in the project settings, or you'll just "
"get empty audio files."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:16
msgid "The structure of the demo"
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:18
msgid ""
"The demo consists of a single scene. This scene includes two major parts: "
"the GUI and the audio."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:21
msgid ""
"We will focus on the audio part. In this demo, a bus named ``Record`` with "
"the effect ``Record`` is created to handle the audio recording. An "
"``AudioStreamPlayer`` named ``AudioStreamRecord`` is used for recording."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:57
msgid ""
"The audio recording is handled by the :ref:`class_AudioEffectRecord` "
"resource which has three methods: :ref:`get_recording() "
"<class_AudioEffectRecord_method_get_recording>`, :ref:`is_recording_active() "
"<class_AudioEffectRecord_method_is_recording_active>`, and :ref:"
"`set_recording_active() "
"<class_AudioEffectRecord_method_set_recording_active>`."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:104
msgid ""
"At the start of the demo, the recording effect is not active. When the user "
"presses the ``RecordButton``, the effect is enabled with "
"``set_recording_active(true)``."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:108
msgid ""
"On the next button press, as ``effect.is_recording_active()`` is ``true``, "
"the recorded stream can be stored into the ``recording`` variable by calling "
"``effect.get_recording()``."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:140
msgid ""
"To playback the recording, you assign the recording as the stream of the "
"``AudioStreamPlayer`` and call ``play()``."
msgstr ""

#: ../../docs/tutorials/audio/recording_with_microphone.rst:160
msgid ""
"To save the recording, you call ``save_to_wav()`` with the path to a file. "
"In this demo, the path is defined by the user via a ``LineEdit`` input box."
msgstr ""

#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:6
msgid ""
"This series is a collection of best practices to help you work efficiently "
"with Godot."
msgstr ""

#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:9
msgid ""
"Godot allows for a great amount of flexibility in how you structure a "
"project's codebase and break it down into scenes. Each approach has its pros "
"and cons, and they can be hard to weigh until you've worked with the engine "
"for long enough."
msgstr ""

#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:13
msgid ""
"There are always many ways to structure your code and solve specific "
"programming problems. It would be impossible to cover them all here."
msgstr ""

#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:16
msgid ""
"That is why each article starts from a real-world problem. We will break "
"down each problem in fundamental questions, suggest solutions, analyze the "
"pros and cons of each option, and highlight the best course of action for "
"the problem at hand."
msgstr ""

#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:20
msgid ""
"You should start by reading :ref:`doc_what_are_godot_classes`. It explains "
"how Godot's nodes and scenes relate to classes and objects in other Object-"
"Oriented programming languages. It will help you make sense of the rest of "
"the series."
msgstr ""

#: ../../docs/tutorials/best_practices/introduction_best_practices.rst:26
msgid ""
"The best practices in Godot rely on Object-Oriented design principles. We "
"use tools like the `single responsibility <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>`_ principle and `encapsulation <https://en."
"wikipedia.org/wiki/Encapsulation_(computer_programming)>`_."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:4
msgid "Applying object-oriented principles in Godot"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:6
msgid ""
"The engine offers two main ways to create reusable objects: scripts and "
"scenes. Neither of these technically define classes under the hood."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:9
msgid ""
"Still, many best practices using Godot involve applying object-oriented "
"programming principles to the scripts and scenes that compose your game. "
"That is why it's useful to understand how we can think of them as classes."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:13
msgid ""
"This guide briefly explains how scripts and scenes work in the engine's core "
"to help you understand how they work under the hood."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:17
msgid "How scripts work in the engine"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:19
msgid ""
"The engine provides built-in classes like :ref:`Node <class_Node>`. You can "
"extend those to create derived types using a script."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:22
msgid ""
"These scripts are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:25
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:29
msgid "Properties."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:30
msgid "Methods."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:31
msgid "Constants."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:32
msgid "Signals."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:34
msgid ""
"This ``ClassDB`` is what objects check against when performing an operation "
"like accessing a property or calling a method. It checks the database's "
"records and the object's base types' records to see if the object supports "
"the operation."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:38
msgid ""
"Attaching a :ref:`Script <class_Script>` to your object extends the methods, "
"properties, and signals available from the ``ClassDB``."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:43
msgid ""
"Even scripts that don't use the ``extends`` keyword implicitly inherit from "
"the engine's base :ref:`Reference <class_Reference>` class. As a result, you "
"can instantiate scripts without the ``extends`` keyword from code. Since "
"they extend ``Reference`` though, you cannot attach them to a :ref:`Node "
"<class_Node>`."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:51
msgid ""
"The behavior of scenes has many similarities to classes, so it can make "
"sense to think of a scene as a class. Scenes are reusable, instantiable, and "
"inheritable groups of nodes. Creating a scene is similar to having a script "
"that creates nodes and adds them as children using ``add_child()``."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:55
msgid ""
"We often pair a scene with a scripted root node that makes use of the "
"scene's nodes. As such, the scene is often an extension of the script's "
"declarative code."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:58
msgid "The content of a scene helps to define:"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:60
msgid "What nodes are available to the script"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:61
msgid "How they are organized"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:62
msgid "How they are initialized"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:63
msgid "What signal connections they have with each other"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:65
msgid ""
"Why is any of this important to scene organization? Because instances of "
"scenes *are* objects. As a result, many object-oriented principles that "
"apply to written code also apply to scenes: single responsibility, "
"encapsulation, and others."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:69
msgid ""
"The scene is *always an extension of the script attached to its root node*, "
"so you can interpret it as part of a class."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:72
msgid ""
"Most of the techniques explained in this best practices series build on this "
"point."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:4
msgid "Scene organization"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:6
msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:11
msgid "How to build relationships effectively"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:13
msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:16
msgid ""
"They create their first scene and fill it with content only to eventually "
"end up saving branches of their scene into separate scenes as the nagging "
"feeling that they should split things up starts to accumulate. However, they "
"then notice that the hard references they were able to rely on before are no "
"longer possible. Re-using the scene in multiple places creates issues "
"because the node paths do not find their targets and signal connections "
"established in the editor break."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:24
msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:29
msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:35
msgid ""
"These OOP best practices have *several* implications for best practices in "
"scene structure and script usage."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:38
msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:42
msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:49
msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:52
msgid ""
"Connect to a signal. Extremely safe, but should be used only to \"respond\" "
"to behavior, not start it. Note that signal names are usually past-tense "
"verbs like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:73
msgid "Call a method. Used to start behavior."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:92
msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:112
msgid "Initialize a Node or other Object reference."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:131
msgid "Initialize a NodePath."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:150
msgid ""
"These options hide the points of access from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:156
msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:203
msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:209
msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:218
msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:229
msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:234
msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling) is "
"the next best thing. Inevitably, changes may need to be made to a class and "
"if these changes cause it to interact with other scenes in unforeseen ways, "
"then things will start to break down. The whole point of all this "
"indirection is to avoid ending up in a situation where changing one class "
"results in adversely effecting other classes."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:243
msgid ""
"Scripts and scenes, as extensions of engine classes, should abide by *all* "
"OOP principles. Examples include..."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:246
msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:247
msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:248
msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:249
msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:252
msgid "Choosing a node tree structure"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:254
msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in countless ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:261
msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view of "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:267
#: ../../docs/tutorials/best_practices/scene_organization.rst:278
msgid "Node \"Main\" (main.gd)"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:269
msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:272
msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:277
msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:278
msgid "Control \"GUI\" (gui.gd)"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:280
msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:284
msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:287
msgid "tracks all of its data internally"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:288
msgid "should be globally accessible"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:289
msgid "should exist in isolation"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:291
msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:295
msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:301
msgid ""
"Any GUI would need to also be a singleton; be a transitory part of the "
"\"World\"; or be manually added as a direct child of the root. Otherwise, "
"the GUI nodes would also delete themselves during scene transitions."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:306
msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`Autoloads versus regular nodes "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:312
msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:320
msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:328
msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:329
msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:332
msgid ""
"When should one do this? Well, this is subjective. The dilemma arises when "
"one must micro-manage when a node must move around the SceneTree to preserve "
"itself. For example..."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:336
msgid "Add a \"player\" node to a \"room\"."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:337
msgid "Need to change rooms, so one must delete the current room."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:338
msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:340
msgid "Is memory a concern?"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:342
msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:345
msgid "If so, one will need to..."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:347
msgid "Move the player somewhere else in the tree."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:348
msgid "Delete the room."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:349
msgid "Instantiate and add the new room."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:350
msgid "Re-add the player."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:352
msgid ""
"The issue is that the player here is a \"special case\"; one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:359
msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This results in:"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:362
msgid "More consistency."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:363
msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:364
msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:367
msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:370
msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:373
msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:380
msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:387
msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Are the nodes dependent on their parent's "
"existence? If not, then they can thrive all by themselves somewhere else. If "
"they are dependent, then it stands to reason that they should be children of "
"that parent (and likely part of that parent's scene if they aren't already)."
msgstr ""

#: ../../docs/tutorials/best_practices/scene_organization.rst:393
msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:4
msgid "When to use scenes versus scripts"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:6
msgid ""
"We've already covered how scenes and scripts are different. Scripts define "
"an engine class extension with imperative code, scenes with declarative code."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:10
msgid ""
"Each system's capabilities are different as a result. Scenes can define how "
"an extended class initializes, but not what its behavior actually is. Scenes "
"are often used in conjunction with a script so that the scene acts as an "
"extension of the scripts declarative code."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:16
msgid "Anonymous types"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:18
msgid ""
"It *is* possible to completely define a scenes' contents using a script "
"alone. This is, in essence, what the Godot Editor does, only in the C++ "
"constructor of its objects."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:22
msgid ""
"But, choosing which one to use can be a dilemma. Creating script instances "
"is identical to creating in-engine classes whereas handling scenes requires "
"a change in API:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:59
msgid ""
"Also, scripts will operate a little slower than scenes due to the speed "
"differences between engine and script code. The larger and more complex the "
"node, the more reason there is to build it as a scene."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:64
msgid "Named types"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:66
msgid ""
"In some cases, a user can register a script as a new type within the editor "
"itself. This displays it as a new type in the node or resource creation "
"dialog with an optional icon. In these cases, the user's ability to use the "
"script is much more streamlined. Rather than having to..."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:71
msgid "Know the base type of the script they would like to use."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:73
msgid "Create an instance of that base type."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:75
msgid "Add the script to the node."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:77
msgid "(Drag-n-drop method)"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:79
msgid "Find the script in the FileSystem dock."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:81
msgid "Drag and drop the script onto the node in the Scene dock."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:83
msgid "(Property method)"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:85
msgid ""
"Scroll down to the bottom of the Inspector to find the ``script`` property "
"and select it."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:87
msgid "Select \"Load\" from the dropdown."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:89
msgid "Select the script from the file dialog."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:91
msgid ""
"With a registered script, the scripted type instead becomes a creation "
"option like the other nodes and resources in the system. One need not do any "
"of the above work. The creation dialog even has a search bar to look up the "
"type by name."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:96
msgid "There are two systems for registering types..."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:98
msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:100
msgid "Editor-only. Typenames are not accessible at runtime."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:102
msgid "Does not support inherited custom types."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:104
msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:106
msgid ""
"Editor has no type-awareness of the script or its relationship to other "
"engine types or scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:109
#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:127
msgid "Allows users to define an icon."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:111
msgid ""
"Works for all scripting languages because it deals with Script resources in "
"abstract."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:113
msgid ""
"Set up using :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:115
msgid ":ref:`Script Classes <doc_gdscript_basics_class_name>`"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:117
msgid "Editor and runtime accessible."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:119
msgid "Displays inheritance relationships in full."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:121
msgid ""
"Creates the node with the script, but can also change types or extend the "
"type from the editor."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:124
msgid ""
"Editor is aware of inheritance relationships between scripts, script "
"classes, and engine C++ classes."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:129
msgid ""
"Engine developers must add support for languages manually (both name "
"exposure and runtime accessibility)."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:132
msgid "Godot 3.1+ only."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:134
msgid ""
"The Editor scans project folders and registers any exposed names for all "
"scripting languages. Each scripting language must implement its own support "
"for exposing this information."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:138
msgid ""
"Both methodologies add names to the creation dialog, but script classes, in "
"particular, also allow for users to access the typename without loading the "
"script resource. Creating instances and accessing constants or static "
"methods is viable from anywhere."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:143
msgid ""
"With features like these, one may wish their type to be a script without a "
"scene due to the ease of use it grants users. Those developing plugins or "
"creating in-house tools for designers to use will find an easier time of "
"things this way."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:148
msgid ""
"On the downside, it also means having to use largely imperative programming."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:151
msgid "Performance of Script vs PackedScene"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:153
msgid ""
"One last aspect to consider when choosing scenes and scripts is execution "
"speed."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:155
msgid ""
"As the size of objects increases, the scripts' necessary size to create and "
"initialize them grows much larger. Creating node hierarchies demonstrates "
"this. Each Node's logic could be several hundred lines of code in length."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:159
msgid ""
"The code example below creates a new ``Node``, changes its name, assigns a "
"script to it, sets its future parent as its owner so it gets saved to disk "
"along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:195
msgid ""
"Script code like this is much slower than engine-side C++ code. Each "
"instruction makes a call to the scripting API which leads to many "
"\"lookups\" on the back-end to find the logic to execute."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:199
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, defines "
"resources that use serialized data to create objects. The engine can process "
"scenes in batches on the back-end and provide much better performance than "
"scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:207
msgid "In the end, the best approach is to consider the following:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:209
msgid ""
"If one wishes to create a basic tool that is going to be re-used in several "
"different projects and which people of all skill levels will likely use "
"(including those who don't label themselves as \"programmers\"), then "
"chances are that it should probably be a script, likely one with a custom "
"name/icon."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:214
msgid ""
"If one wishes to create a concept that is particular to their game, then it "
"should always be a scene. Scenes are easier to track/edit and provide more "
"security than scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:218
msgid ""
"If one would like to give a name to a scene, then they can still sort of do "
"this in 3.1 by declaring a script class and giving it a scene as a constant. "
"The script becomes, in effect, a namespace:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:4
msgid "Autoloads versus regular nodes"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:6
msgid ""
"Godot offers a feature to automatically load nodes at the root of your "
"project, allowing you to access them globally, that can fulfill the role of "
"a Singleton: :ref:`doc_singletons_autoload`. These auto-loaded nodes are not "
"freed when you change the scene from code with :ref:`SceneTree.change_scene "
"<class_SceneTree_method_change_scene>`."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:11
msgid ""
"In this guide, you will learn when to use the Autoload feature, and "
"techniques you can use to avoid it."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:15
msgid "The cutting audio issue"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:17
msgid ""
"Other engines can encourage the use of creating manager classes, singletons "
"that organize a lot of functionality into a globally accessible object. "
"Godot offers many ways to avoid global state thanks to the node tree and "
"signals."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:21
msgid ""
"For example, let's say we are building a platformer and want to collect "
"coins that play a sound effect. There's a node for that: the :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. But if we call the "
"``AudioStreamPlayer`` while it is already playing a sound, the new sound "
"interrupts the first."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:26
msgid ""
"A solution is to code a global, auto-loaded sound manager class. It "
"generates a pool of ``AudioStreamPlayer`` nodes that cycle through as each "
"new request for sound effects comes in. Say we call that class ``Sound``, "
"you can use it from anywhere in your project by calling ``Sound."
"play(\"coin_pickup.ogg\")``. This solves the problem in the short term but "
"causes more problems:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:32
msgid ""
"**Global state**: one object is now responsible for all objects' data. If "
"the ``Sound`` class has errors or doesn't have an AudioStreamPlayer "
"available, all the nodes calling it can break."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:36
msgid ""
"**Global access**: now that any object can call ``Sound.play(sound_path)`` "
"from anywhere, there's no longer an easy way to find the source of a bug."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:39
msgid ""
"**Global resource allocation**: with a pool of ``AudioStreamPlayer`` nodes "
"stored from the start, you can either have too few and face bugs, or too "
"many and use more memory than you need."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:45
msgid ""
"About global access, the problem is that Any code anywhere could pass wrong "
"data to the ``Sound`` autoload in our example. As a result, the domain to "
"explore to fix the bug spans the entire project."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:49
msgid ""
"When you keep code inside a scene, only one or two scripts may be involved "
"in audio."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:52
msgid ""
"Contrast this with each scene keeping as many ``AudioStreamPlayer`` nodes as "
"it needs within itself and all these problems go away:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:55
msgid ""
"Each scene manages its own state information. If there is a problem with the "
"data, it will only cause issues in that one scene."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:58
msgid ""
"Each scene accesses only its own nodes. Now, if there is a bug, it's easy to "
"find which node is at fault."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:61
msgid "Each scene allocates exactly the amount of resources it needs."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:64
msgid "Managing shared functionality or data"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:66
msgid ""
"Another reason to use an Autoload can be that you want to reuse the same "
"method or data across many scenes."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:69
msgid ""
"In the case of functions, you can create a new type of ``Node`` that "
"provides that feature for an individual scene using the :ref:`class_name "
"<doc_gdscript_basics_class_name>` keyword in GDScript."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:73
msgid "When it comes to data, you can either:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:75
msgid ""
"Create a new type of :ref:`Resource <class_Resource>` to share the data."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:77
msgid ""
"Store the data in an object to which each node has access, for example using "
"the ``owner`` property to access the scene's root node."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:81
msgid "When you should use an Autoload"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:83
msgid "Auto-loaded nodes can simplify your code in some cases:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:85
msgid ""
"**Static Data**: if you need data that is exclusive to one class, like a "
"database, then an autoload can be a good tool. There is no scripting API in "
"Godot to create and manage static data otherwise."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:89
msgid ""
"**Static functions**: creating a library of functions that only return "
"values."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:91
msgid ""
"**Systems with a wide scope**: If the singleton is managing its own "
"information and not invading the data of other objects, then it's a great "
"way to create systems that handle broad-scoped tasks. For example, a quest "
"or a dialogue system."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:96
msgid ""
"Until Godot 3.1, another use was just for convenience: autoloads have a "
"global variable for their name generated in GDScript, allowing you to call "
"them from any script file in your project. But now, you can use the "
"``class_name`` keyword instead to get auto-completion for a type in your "
"entire project."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:103
msgid ""
"Autoload is not exactly a Singleton. Nothing prevents you from instantiating "
"copies of an auto-loaded node. It is only a tool that makes a node load "
"automatically as a child of the root of your scene tree, regardless of your "
"game's node structure or which scene you run, e.g. by pressing :kbd:`F6` key."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:108
msgid ""
"As a result, you can get the auto-loaded node, for example an autoload "
"called ``Sound``, by calling ``get_node(\"/root/Sound\")``."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:4
msgid "When and how to avoid using nodes for everything"
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:7
msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:12
msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:16
msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:21
msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:26
msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:31
msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:36
msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:41
msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:44
msgid "**Advantages:** same as the Object."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:46
msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:50
msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""

#: ../../docs/tutorials/best_practices/node_alternatives.rst:54
msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:4
msgid "Godot interfaces"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:6
msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:9
msgid "Acquiring a reference to the object that presumably has the features."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:11
msgid "Accessing the data or logic from the object."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:13
msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:16
msgid "Acquiring object references"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:18
msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:32
msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:36
msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:115
msgid "Note the following:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:117
msgid "There are many ways in which a language can load such resources."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:119
msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:122
msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:127
msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:245
msgid "Accessing data or logic from an object"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:247
msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:251
msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:257
msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:262
msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:268
msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:271
msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:276
msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:281
msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:285
msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:288
msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:316
msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:454
msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_interfaces.rst:513
msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:4
msgid "Godot notifications"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:6
msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:13
msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:16
msgid "``_ready()`` : NOTIFICATION_READY"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:18
msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:20
msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:22
msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:24
msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:26
msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:28
msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:31
msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:34
msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:38
msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:42
msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:45
msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:48
msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:52
msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:57
msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:61
msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:64
msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:69
msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:73
msgid "_process vs. _physics_process vs. \\*_input"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:75
msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:93
msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:98
msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:104
msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:152
msgid "_init vs. initialization vs. export"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:154
msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:159
msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:206
msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:209
msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:213
msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:217
msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:221
msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:223
msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:230
msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""

#: ../../docs/tutorials/best_practices/godot_notifications.rst:235
msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:4
msgid "Data preferences"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:6
msgid ""
"Ever wondered whether one should approach problem X with data structure Y or "
"Z? This article covers a variety of topics related to these dilemmas."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:11
msgid ""
"This article makes references to \"[something]-time\" operations. This "
"terminology comes from algorithm analysis' `Big O Notation <https://rob-bell."
"net/2009/06/a-beginners-guide-to-big-o-notation/>`_."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:15
msgid ""
"Long-story short, it describes the worst-case scenario of runtime length. In "
"laymen's terms:"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:18
msgid ""
"\"As the size of a problem domain increases, the runtime length of the "
"algorithm...\""
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:21
msgid "Constant-time, ``O(1)``: \"...does not increase.\""
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:22
msgid "Logarithmic-time, ``O(log n)``: \"...increases at a slow rate.\""
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:23
msgid "Linear-time, ``O(n)``: \"...increases at the same rate.\""
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:24
msgid "Etc."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:26
msgid ""
"Imagine if one had to process 3 million data points within a single frame. "
"It would be impossible to craft the feature with a linear-time algorithm "
"since the sheer size of the data would increase the runtime far beyond the "
"time allotted. In comparison, using a constant-time algorithm could handle "
"the operation without issue."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:32
msgid ""
"By and large, developers want to avoid engaging in linear-time operations as "
"much as possible. But, if one keeps the scale of a linear-time operation "
"small, and if one does not need to perform the operation often, then it may "
"be acceptable. Balancing these requirements and choosing the right "
"algorithm / data structure for the job is part of what makes programmers' "
"skills valuable."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:40
msgid "Array vs. Dictionary vs. Object"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:42
msgid ""
"Godot stores all variables in the scripting API in the `Variant <https://"
"docs.godotengine.org/en/latest/development/cpp/variant_class.html>`_ class. "
"Variants can store Variant-compatible data structures such as :ref:`Array "
"<class_Array>` and :ref:`Dictionary <class_Dictionary>` as well as :ref:"
"`Object <class_Object>` s."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:48
msgid ""
"Godot implements Array as a ``Vector<Variant>``. The engine stores the Array "
"contents in a contiguous section of memory, i.e. they are in a row adjacent "
"to each other."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:53
msgid ""
"For those unfamiliar with C++, a Vector is the name of the array object in "
"traditional C++ libraries. It is a \"templated\" type, meaning that its "
"records can only contain a particular type (denoted by angled brackets). So, "
"for example, a :ref:`PoolStringArray <class_PoolStringArray>` would be "
"something like a ``Vector<String>``."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:60
msgid "Contiguous memory stores imply the following operation performance:"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:62
msgid "**Iterate:** Fastest. Great for loops."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:64
msgid "Op: All it does is increment a counter to get to the next record."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:66
msgid "**Insert, Erase, Move:** Position-dependent. Generally slow."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:68
msgid ""
"Op: Adding/removing/moving content involves moving the adjacent records over "
"(to make room / fill space)."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:71
msgid "Fast add/remove *from the end*."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:73
msgid "Slow add/remove *from an arbitrary position*."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:75
msgid "Slowest add/remove *from the front*."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:77
msgid "If doing many inserts/removals *from the front*, then..."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:79
msgid "invert the array."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:81
msgid "do a loop which executes the Array changes *at the end*."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:83
msgid "re-invert the array."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:85
msgid ""
"This makes only 2 copies of the array (still constant time, but slow) versus "
"copying roughly 1/2 of the array, on average, N times (linear time)."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:88
msgid ""
"**Get, Set:** Fastest *by position*. E.g. can request 0th, 2nd, 10th record, "
"etc. but cannot specify which record you want."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:91
msgid "Op: 1 addition operation from array start position up to desired index."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:93
msgid "**Find:** Slowest. Identifies the index/position of a value."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:95
msgid ""
"Op: Must iterate through array and compare values until one finds a match."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:97
msgid ""
"Performance is also dependent on whether one needs an exhaustive search."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:100
msgid ""
"If kept ordered, custom search operations can bring it to logarithmic time "
"(relatively fast). Laymen users won't be comfortable with this though. Done "
"by re-sorting the Array after every edit and writing an ordered-aware search "
"algorithm."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:105
msgid ""
"Godot implements Dictionary as an ``OrderedHashMap<Variant, Variant>``. The "
"engine stores a small array (initialized to 2^3 or 8 records) of key-value "
"pairs. When one attempts to access a value, they provide it a key. It then "
"*hashes* the key, i.e. converts it into a number. The \"hash\" is used to "
"calculate the index into the array. As an array, the OHM then has a quick "
"lookup within the \"table\" of keys mapped to values. When the HashMap "
"becomes too full, it increases to the next power of 2 (so, 16 records, then "
"32, etc.) and rebuilds the structure."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:113
msgid ""
"Hashes are to reduce the chance of a key collision. If one occurs, the table "
"must recalculate another index for the value that takes the previous "
"position into account. In all, this results in constant-time access to all "
"records at the expense of memory and some minor operational efficiency."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:118
msgid "Hashing every key an arbitrary number of times."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:120
msgid ""
"Hash operations are constant-time, so even if an algorithm must do more than "
"one, as long as the number of hash calculations doesn't become too dependent "
"on the density of the table, things will stay fast. Which leads to..."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:125
msgid "Maintaining an ever-growing size for the table."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:127
msgid ""
"HashMaps maintain gaps of unused memory interspersed in the table on purpose "
"to reduce hash collisions and maintain the speed of accesses. This is why it "
"constantly increases in size quadratically by powers of 2."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:132
msgid ""
"As one might be able to tell, Dictionaries specialize in tasks that Arrays "
"do not. An overview of their operational details is as follows:"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:135
msgid "**Iterate:** Fast."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:137
msgid ""
"Op: Iterate over the map's internal vector of hashes. Return each key. "
"Afterwards, users then use the key to jump to and return the desired value."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:141
msgid "**Insert, Erase, Move:** Fastest."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:143
msgid ""
"Op: Hash the given key. Do 1 addition operation to look up the appropriate "
"value (array start + offset). Move is two of these (one insert, one erase). "
"The map must do some maintenance to preserve its capabilities:"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:148
msgid "update ordered List of records."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:150
msgid "determine if table density mandates a need to expand table capacity."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:152
msgid ""
"The Dictionary remembers in what order users inserted its keys. This enables "
"it to execute reliable iterations."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:155
msgid "**Get, Set:** Fastest. Same as a lookup *by key*."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:157
msgid "Op: Same as insert/erase/move."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:159
msgid "**Find:** Slowest. Identifies the key of a value."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:161
msgid ""
"Op: Must iterate through records and compare the value until a match is "
"found."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:164
msgid ""
"Note that Godot does not provide this feature out-of-the-box (because they "
"aren't meant for this task)."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:167
msgid ""
"Godot implements Objects as stupid, but dynamic containers of data content. "
"Objects query data sources when posed questions. For example, to answer the "
"question, \"do you have a property called, 'position'?\", it might ask its :"
"ref:`script <class_Script>` or the :ref:`ClassDB <class_ClassDB>`. One can "
"find more information about what objects are and how they work in the :ref:"
"`doc_what_are_godot_classes` article."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:174
msgid ""
"The important detail here is the complexity of the Object's task. Every time "
"it performs one of these multi-source queries, it runs through *several* "
"iteration loops and HashMap lookups. What's more, the queries are linear-"
"time operations dependent on the Object's inheritance hierarchy size. If the "
"class the Object queries (its current class) doesn't find anything, the "
"request defers to the next base class, all the way up until the original "
"Object class. While these are each fast operations in isolation, the fact "
"that it must make so many checks is what makes them slower than both of the "
"alternatives for looking up data."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:186
msgid ""
"When developers mention how slow the scripting API is, it is this chain of "
"queries they refer to. Compared to compiled C++ code where the application "
"knows exactly where to go to find anything, it is inevitable that scripting "
"API operations will take much longer. They must locate the source of any "
"relevant data before they can attempt to access it."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:192
msgid ""
"The reason GDScript is slow is because every operation it performs passes "
"through this system."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:195
msgid ""
"C# can process some content at higher speeds via more optimized bytecode. "
"But, if the C# script calls into an engine class' content or if the script "
"tries to access something external to it, it will go through this pipeline."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:200
msgid ""
"NativeScript C++ goes even further and keeps everything internal by default. "
"Calls into external structures will go through the scripting API. In "
"NativeScript C++, registering methods to expose them to the scripting API is "
"a manual task. It is at this point that external, non-C++ classes will use "
"the API to locate them."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:206
msgid ""
"So, assuming one extends from Reference to create a data structure, like an "
"Array or Dictionary, why choose an Object over the other two options?"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:209
msgid ""
"**Control:** With objects comes the ability to create more sophisticated "
"structures. One can layer abstractions over the data to ensure the external "
"API doesn't change in response to internal data structure changes. What's "
"more, Objects can have signals, allowing for reactive behavior."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:214
msgid ""
"**Clarity:** Objects are a reliable data source when it comes to the data "
"that scripts and engine classes define for them. Properties may not hold the "
"values one expects, but one doesn't need to worry about whether the property "
"exists in the first place."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:219
msgid ""
"**Convenience:** If one already has a similar data structure in mind, then "
"extending from an existing class makes the task of building the data "
"structure much easier. In comparison, Arrays and Dictionaries don't fulfill "
"all use cases one might have."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:224
msgid ""
"Objects also give users the opportunity to create even more specialized data "
"structures. With it, one can design their own List, Binary Search Tree, "
"Heap, Splay Tree, Graph, Disjoint Set, and any host of other options."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:228
msgid ""
"\"Why not use Node for tree structures?\" one might ask. Well, the Node "
"class contains things that won't be relevant to one's custom data structure. "
"As such, it can be helpful to construct one's own node type when building "
"tree structures."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:276
msgid ""
"From here, one can then create their own structures with specific features, "
"limited only by their imagination."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:280
msgid "Enumerations: int vs. string"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:282
msgid ""
"Most languages offer an enumeration type option. GDScript is no different, "
"but unlike most other languages, it allows one to use either integers or "
"strings for the enum values (the latter only when using the ``export`` "
"keyword in GDScript). The question then arises, \"which should one use?\""
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:287
msgid ""
"The short answer is, \"whichever you are more comfortable with.\" This is a "
"feature specific to GDScript and not Godot scripting in general; The "
"languages prioritizes usability over performance."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:291
msgid ""
"On a technical level, integer comparisons (constant-time) will happen faster "
"than string comparisons (linear-time). If one wants to keep up other "
"languages' conventions though, then one should use integers."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:295
msgid ""
"The primary issue with using integers comes up when one wants to *print* an "
"enum value. As integers, attempting to print MY_ENUM will print ``5`` or "
"what-have-you, rather than something like ``\"MyEnum\"``. To print an "
"integer enum, one would have to write a Dictionary that maps the "
"corresponding string value for each enum."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:301
msgid ""
"If the primary purpose of using an enum is for printing values and one "
"wishes to group them together as related concepts, then it makes sense to "
"use them as strings. That way, a separate data structure to execute on the "
"printing is unnecessary."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:307
msgid ""
"AnimatedTexture vs. AnimatedSprite vs. AnimationPlayer vs. AnimationTree"
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:309
msgid ""
"Under what circumstances should one use each of Godot's animation classes? "
"The answer may not be immediately clear to new Godot users."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:312
msgid ""
":ref:`AnimatedTexture <class_AnimatedTexture>` is a texture that the engine "
"draws as an animated loop rather than a static image. Users can manipulate..."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:316
msgid "the rate at which it moves across each section of the texture (fps)."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:318
msgid "the number of regions contained within the texture (frames)."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:320
msgid ""
"Godot's :ref:`VisualServer <class_VisualServer>` then draws the regions in "
"sequence at the prescribed rate. The good news is that this involves no "
"extra logic on the part of the engine. The bad news is that users have very "
"little control."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:325
msgid ""
"Also note that AnimatedTexture is a :ref:`Resource <class_Resource>` unlike "
"the other :ref:`Node <class_Node>` objects discussed here. One might create "
"a :ref:`Sprite <class_Sprite>` node that uses AnimatedTexture as its "
"texture. Or (something the others can't do) one could add AnimatedTextures "
"as tiles in a :ref:`TileSet <class_TileSet>` and integrate it with a :ref:"
"`TileMap <class_TileMap>` for many auto-animating backgrounds that all "
"render in a single batched draw call."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:333
msgid ""
"The AnimatedSprite node, in combination with the :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, allows one to create a variety of animation "
"sequences through spritesheets, flip between animations, and control their "
"speed, regional offset, and orientation. This makes them well-suited to "
"controlling 2D frame-based animations."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:339
msgid ""
"If one needs trigger other effects in relation to animation changes (for "
"example, create particle effects, call functions, or manipulate other "
"peripheral elements besides the frame-based animation), then will need to "
"use an :ref:`AnimationPlayer <class_AnimationPlayer>` node in conjunction "
"with the AnimatedSprite."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:345
msgid ""
"AnimationPlayers are also the tool one will need to use if they wish to "
"design more complex 2D animation systems, such as..."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:348
msgid "**Cut-Out animations:** editing sprites' transforms at runtime."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:350
msgid ""
"**2D Mesh animations:** defining a region for the sprite's texture and "
"rigging a skeleton to it. Then one animates the bones which stretch and bend "
"the texture in proportion to the bones' relationships to each other."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:355
msgid "A mix of the above."
msgstr ""

#: ../../docs/tutorials/best_practices/data_preferences.rst:357
msgid ""
"While one needs an AnimationPlayer to design each of the individual "
"animation sequences for a game, it can also be useful to combine animations "
"for blending, i.e. enabling smooth transitions between these animations. "
"There may also be a hierarchical structure between animations that one plans "
"out for their object. These are the cases where the :ref:`AnimationTree "
"<class_AnimationTree>` shines. One can find an in-depth guide on using the "
"AnimationTree :ref:`here <doc_animation_tree>`."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:4
msgid "Logic preferences"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:6
msgid ""
"Ever wondered whether one should approach problem X with strategy Y or Z? "
"This article covers a variety of topics related to these dilemmas."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:10
msgid "Loading vs. preloading"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:12
msgid ""
"In GDScript, there exists the global :ref:`preload "
"<class_@GDScript_method_preload>` method. It loads resources as early as "
"possible to front-load the \"loading\" operations and avoid loading "
"resources while in the middle of performance-sensitive code."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:17
msgid ""
"Its counterpart, the :ref:`load <class_@GDScript_method_load>` method, loads "
"a resource only when it reaches the load statement. That is, it will load a "
"resource in-place which can cause slowdowns when it occurs in the middle of "
"sensitive processes. The ``load`` function is also an alias for :ref:"
"`ResourceLoader.load(path) <class_ResourceLoader_method_load>` which is "
"accessible to *all* scripting languages."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:24
msgid ""
"So, when exactly does preloading occur versus loading, and when should one "
"use either? Let's see an example:"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:88
msgid ""
"Preloading allows the script to handle all the loading the moment one loads "
"the script. Preloading is useful, but there are also times when one doesn't "
"wish for it. To distinguish these situations, there are a few things one can "
"consider:"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:93
msgid ""
"If one cannot determine when the script might load, then preloading a "
"resource, especially a scene or script, could result in further loads one "
"does not expect. This could lead to unintentional, variable-length load "
"times on top of the original script's load operations."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:98
msgid ""
"If something else could replace the value (like a scene's exported "
"initialization), then preloading the value has no meaning. This point isn't "
"a significant factor if one intends to always create the script on its own."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:102
msgid ""
"If one wishes only to 'import' another class resource (script or scene), "
"then using a preloaded constant is often the best course of action. However, "
"in exceptional cases, one may wish not to do this:"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:106
msgid ""
"If the 'imported' class is liable to change, then it should be a property "
"instead, initialized either using an ``export`` or a ``load`` (and perhaps "
"not even initialized until later)."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:110
msgid ""
"If the script requires a great many dependencies, and one does not wish to "
"consume so much memory, then one may wish to, load and unload various "
"dependencies at runtime as circumstances change. If one preloads resources "
"into constants, then the only way to unload these resources would be to "
"unload the entire script. If they are instead loaded properties, then one "
"can set them to ``null`` and remove all references to the resource entirely "
"(which, as a :ref:`Reference <class_Reference>`-extending type, will cause "
"the resources to delete themselves from memory)."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:121
msgid "Large levels: static vs. dynamic"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:123
msgid ""
"If one is creating a large level, which circumstances are most appropriate? "
"Should they create the level as one static space? Or should they load the "
"level in pieces and shift the world's content as needed?"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:127
msgid ""
"Well, the simple answer is , \"when the performance requires it.\" The "
"dilemma associated with the two options is one of the age-old programming "
"choices: does one optimize memory over speed, or vice versa?"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:131
msgid ""
"The naive answer is to use a static level that loads everything at once. "
"But, depending on the project, this could consume a large amount of memory. "
"Wasting users' RAM leads to programs running slow or outright crashing from "
"everything else the computer tries to do at the same time."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:136
msgid ""
"No matter what, one should break larger scenes into smaller ones (to aid in "
"reusability of assets). Developers can then design a node that manages the "
"creation/loading and deletion/unloading of resources and nodes in real-time. "
"Games with large and varied environments or procedurally generated elements "
"often implement these strategies to avoid wasting memory."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:142
msgid ""
"On the flip side, coding a dynamic system is more complex, i.e. uses more "
"programmed logic, which results in opportunities for errors and bugs. If one "
"isn't careful, they can develop a system that bloats the technical debt of "
"the application."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:147
msgid "As such, the best options would be..."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:149
msgid "To use a static level for smaller games."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:151
msgid ""
"If one has the time/resources on a medium/large game, create a library or "
"plugin that can code the management of nodes and resources. If refined over "
"time, so as to improve usability and stability, then it could evolve into a "
"reliable tool across projects."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:156
msgid ""
"Code the dynamic logic for a medium/large game because one has the coding "
"skills, but not the time or resources to refine the code (game's gotta get "
"done). Could potentially refactor later to outsource the code into a plugin."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:161
msgid ""
"For an example of the various ways one can swap scenes around at runtime, "
"please see the :ref:`\"Change scenes manually\" "
"<doc_change_scenes_manually>` documentation."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:4
msgid "Project organization"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:9
msgid ""
"Since Godot has no restrictions on project structure or filesystem usage, "
"organizing files when learning the engine can seem challenging. This "
"tutorial suggests a workflow which should be a good starting point. We will "
"also cover using version control with Godot."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:15
msgid "Organization"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:17
msgid ""
"Godot is scene-based in nature, and uses the filesystem as-is, without "
"metadata or an asset database."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:20
msgid ""
"Unlike other engines, many resources are contained within the scene itself, "
"so the amount of files in the filesystem is considerably lower."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:23
msgid ""
"Considering that, the most common approach is to group assets as close to "
"scenes as possible; when a project grows, it makes it more maintainable."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:27
msgid ""
"As an example, one can usually place into a single folder their basic "
"assets, such as sprite images, 3D model meshes, materials, and music, etc. "
"They can then use a separate folder to store built levels that use them."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:48
msgid "Style guide"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:50
msgid ""
"For consistency across projects, we recommend following these guidelines:"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:52
msgid ""
"Use **snake_case** for folder and file names (with the exception of C# "
"scripts). This sidesteps case sensitivity issues that can crop up after "
"exporting a project on Windows. C# scripts are an exception to this rule, as "
"the convention is to name them after the class name which should be in "
"PascalCase."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:57
msgid ""
"Use **PascalCase** for node names, as this matches built-in node casing."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:58
msgid ""
"In general, keep third-party resources in a top-level ``addons/`` folder, "
"even if they aren't editor plugins. This makes it easier to track which "
"files are third-party. There are some exceptions to this rule; for instance, "
"if you use third-party game assets for a character, it makes more sense to "
"include them within the same folder as the character scenes and scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:65
msgid "Importing"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:67
msgid ""
"Godot versions prior to 3.0 did the import process from files outside the "
"project. While this can be useful in large projects, it resulted in an "
"organization hassle for most developers."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:71
msgid ""
"Because of this, assets are now transparently imported from within the "
"project folder."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:75
msgid "Ignoring specific folders"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:77
msgid ""
"To prevent Godot from importing files contained in a specific folder, create "
"an empty file called ``.gdignore`` in the folder (the leading ``.`` is "
"required). This can be useful to speed up the initial project importing."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:83
msgid ""
"To create a file whose name starts with a dot on Windows, you can use a text "
"editor such as Notepad++ or use the following command in a command prompt: "
"``type nul > .gdignore``"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:87
msgid ""
"Once the folder is ignored, resources in that folder can't be loaded anymore "
"using the ``load()`` and ``preload()`` methods. Ignoring a folder will also "
"automatically hide it from the FileSystem dock, which can be useful to "
"reduce clutter."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:91
msgid ""
"Note that the ``.gdignore`` file's contents are ignored, which is why the "
"file should be empty. It does not support patterns like ``.gitignore`` files "
"do."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:97
msgid "Case sensitivity"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:99
msgid ""
"Windows and recent macOS versions use case-insensitive filesystems by "
"default, whereas Linux distributions use a case-sensitive filesystem by "
"default. This can cause issues after exporting a project, since Godot's PCK "
"virtual filesystem is case-sensitive. To avoid this, it's recommended to "
"stick to ``snake_case`` naming for all files in the project (and lowercase "
"characters in general)."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:108
msgid ""
"You can break this rule when style guides say otherwise (such as the C# "
"style guide). Still, be consistent to avoid mistakes."
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:111
msgid ""
"On Windows 10, to further avoid mistakes related to case sensitivity, you "
"can also make the project folder case-sensitive. After enabling the Windows "
"Subsystem for Linux feature, run the following command in a PowerShell "
"window::"
msgstr ""

#: ../../docs/tutorials/best_practices/project_organization.rst:121
msgid ""
"If you haven't enabled the Windows Subsystem for Linux, you can enter the "
"following line in a PowerShell window *running as Administrator* then reboot "
"when asked::"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:4
msgid "Version Control Systems"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:9
msgid ""
"Godot aims to be VCS friendly and generate mostly readable and mergeable "
"files. Godot also supports the use of version control systems in the editor "
"itself. However, VCS in the editor requires a plugin for the specific VCS "
"you are using. VCS can be setup or shut down in the editor under **Project > "
"Version Control**."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:17
msgid "Official Git plugin"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:19
msgid ""
"Using Git from inside the editor is supported with an official plugin. You "
"can find the latest releases `here <https://github.com/godotengine/godot-git-"
"plugin/releases>`__. Documentation on how to use the Git plugin can be found "
"`here <https://github.com/godotengine/godot-git-plugin/wiki>`__."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:26
msgid "Files to exclude from VCS"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:28
msgid "There are some folders Godot creates you should have your VCS ignore:"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:30
msgid ""
"``.import/``: This folder stores all the files it imports automatically "
"based on your source assets and their import flags."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:32
msgid ""
"``*.translation``: These files are binary imported translations generated "
"from CSV files."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:33
msgid ""
"``export_presets.cfg``: This file contains all the export presets for the "
"project, including sensitive information such as Android keystore "
"credentials."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:35
msgid ""
"``.mono/``: This folder stores automatically-generated Mono files. It only "
"exists in projects that use the Mono version of Godot."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:39
msgid "Working with Git on Windows"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:41
msgid ""
"Most Git for Windows clients are configured with the ``core.autocrlf`` set "
"to ``true``. This can lead to files unnecessarily being marked as modified "
"by Git due to their line endings being converted automatically. It is better "
"to set this option as::"
msgstr ""

#: ../../docs/tutorials/editor/index.rst:2
msgid "Editor manual"
msgstr ""

#: ../../docs/tutorials/editor/index.rst:4
msgid ""
"In this section, we cover the Godot editor in general, from its interface to "
"using it with the command line. We cover some specific editors' interface in "
"other sections where appropriate. For example, the :ref:`animation editor "
"<doc_introduction_animation>`."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:4
msgid "Command line tutorial"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:8
msgid ""
"Some developers like using the command line extensively. Godot is designed "
"to be friendly to them, so here are the steps for working entirely from the "
"command line. Given the engine relies on almost no external libraries, "
"initialization times are pretty fast, making it suitable for this workflow."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:16
msgid ""
"On Windows and Linux, you can run a Godot binary in a terminal by specifying "
"its relative or absolute path."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:19
msgid ""
"On macOS, the process is different due to Godot being contained within an ``."
"app`` bundle (which is a *folder*, not a file). To run a Godot binary from a "
"terminal on macOS, you have to ``cd`` to the folder where the Godot "
"application bundle is located, then run ``Godot.app/Contents/MacOS/Godot`` "
"followed by any command line arguments. If you've renamed the application "
"bundle from ``Godot`` to another name, make sure to edit this command line "
"accordingly."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:28
msgid "Command line reference"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:30
msgid "**General options**"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:33
#: ../../docs/tutorials/editor/command_line_tutorial.rst:47
#: ../../docs/tutorials/editor/command_line_tutorial.rst:75
#: ../../docs/tutorials/editor/command_line_tutorial.rst:103
#: ../../docs/tutorials/editor/command_line_tutorial.rst:133
#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:53
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:59
msgid "Command"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:35
msgid "``-h``, ``--help``, ``/?``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:35
msgid "Display the list of command line options."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:37
msgid "``--version``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:37
msgid "Display the version string."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:39
msgid "``-v``, ``--verbose``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:39
msgid "Use verbose stdout mode."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:41
msgid "``--quiet``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:41
msgid "Quiet mode, silences stdout messages. Errors are still displayed."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:44
msgid "**Run options**"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:49
msgid "``-e``, ``--editor``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:49
msgid ""
"Start the editor instead of running the scene (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:51
msgid "``-p``, ``--project-manager``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:51
msgid ""
"Start the project manager, even if a project is auto-detected (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:53
msgid "``-q``, ``--quit``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:53
msgid "Quit after the first iteration."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:55
msgid "``-l <locale>``, ``--language <locale>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:55
msgid ""
"Use a specific locale (<locale> being a two-letter code). See :ref:"
"`doc_locales` for more details."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:57
msgid "``--path <directory>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:57
msgid "Path to a project (<directory> must contain a 'project.godot' file)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:59
msgid "``-u``, ``--upwards``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:59
msgid "Scan folders upwards for 'project.godot' file."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:61
msgid "``--main-pack <file>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:61
msgid "Path to a pack (.pck) file to load."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:63
msgid "``--render-thread <mode>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:63
msgid ""
"Render thread mode ('unsafe', 'safe', 'separate'). See :ref:`Thread Model "
"<class_ProjectSettings_property_rendering/threads/thread_model>` for more "
"details."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:65
msgid "``--remote-fs <address>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:65
msgid "Remote filesystem (``<host/IP>[:<port>]`` address)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:67
msgid "``--audio-driver <driver>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:67
msgid ""
"Audio driver. Use ``--help`` first to display the list of available drivers."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:69
msgid "``--video-driver <driver>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:69
msgid ""
"Video driver. Use ``--help`` first to display the list of available drivers."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:72
msgid "**Display options**"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:77
msgid "``-f``, ``--fullscreen``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:77
msgid "Request fullscreen mode."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:79
msgid "``-m``, ``--maximized``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:79
msgid "Request a maximized window."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:81
msgid "``-w``, ``--windowed``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:81
msgid "Request windowed mode."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:83
msgid "``-t``, ``--always-on-top``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:83
msgid "Request an always-on-top window."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:85
msgid "``--resolution <W>x<H>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:85
msgid "Request window resolution."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:87
msgid "``--position <X>,<Y>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:87
msgid "Request window position."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:89
msgid "``--low-dpi``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:89
msgid "Force low-DPI mode (macOS and Windows only)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:91
msgid "``--no-window``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:91
msgid "Run with invisible window. Useful together with ``--script``."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:94
msgid "**Debug options**"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:98
msgid ""
"Debug options are only available in the editor and debug export templates "
"(they require ``debug`` or ``release_debug`` build targets, see :ref:"
"`doc_introduction_to_the_buildsystem_target` for more details)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:105
msgid "``-d``, ``--debug``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:105
msgid "Debug (local stdout debugger)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:107
msgid "``-b``, ``--breakpoints``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:107
msgid ""
"Breakpoint list as source::line comma-separated pairs, no spaces (use %%20 "
"instead)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:109
msgid "``--profiling``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:109
msgid "Enable profiling in the script debugger."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:111
msgid "``--remote-debug <address>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:111
msgid "Remote debug (``<host/IP>:<port>`` address)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:113
msgid "``--debug-collisions``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:113
msgid "Show collision shapes when running the scene."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:115
msgid "``--debug-navigation``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:115
msgid "Show navigation polygons when running the scene."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:117
msgid "``--frame-delay <ms>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:117
msgid "Simulate high CPU load (delay each frame by <ms> milliseconds)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:119
msgid "``--time-scale <scale>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:119
msgid "Force time scale (higher values are faster, 1.0 is normal speed)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:121
msgid "``--disable-render-loop``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:121
msgid ""
"Disable render loop so rendering only occurs when called explicitly from "
"script."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:123
msgid "``--disable-crash-handler``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:123
msgid "Disable crash handler when supported by the platform code."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:125
msgid "``--fixed-fps <fps>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:125
msgid ""
"Force a fixed number of frames per second. This setting disables real-time "
"synchronization."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:127
msgid "``--print-fps``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:127
msgid "Print the frames per second to the stdout."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:130
msgid "**Standalone tools**"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:135
msgid "``-s <script>``, ``--script <script>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:135
msgid "Run a script."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:137
msgid "``--check-only``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:137
msgid "Only parse for errors and quit (use with ``--script``)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:139
msgid "``--export <target>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:139
msgid ""
"Export the project using the given export target. Export only main pack if "
"path ends with .pck or .zip (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:141
msgid "``--export-debug <target>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:141
msgid ""
"Like ``--export``, but use debug template (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:143
msgid "``--doctool <path>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:143
msgid ""
"Dump the engine API reference to the given <path> in XML format, merging if "
"existing files are found (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:145
msgid "``--no-docbase``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:145
msgid ""
"Disallow dumping the base types (used with ``--doctool``, :ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:147
msgid "``--build-solutions``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:147
msgid ""
"Build the scripting solutions (e.g. for C# projects, :ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:149
msgid "``--gdnative-generate-json-api``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:149
msgid ""
"Generate JSON dump of the Godot API for GDNative bindings (:ref:`tools "
"<doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:151
msgid "``--test <test>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:151
msgid ""
"Run a unit test. Use ``--help`` first to display the list of tests. (:ref:"
"`tools <doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:153
msgid "``--export-pack <preset> <path>``"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:153
msgid ""
"Like ``--export``, but only export the game pack for the given preset. The "
"<path> extension determines whether it will be in PCK or ZIP format. (:ref:"
"`tools <doc_introduction_to_the_buildsystem_tools>` must be enabled)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:158
msgid "Path"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:160
msgid ""
"It is recommended that your Godot binary be in your PATH environment "
"variable, so it can be executed easily from any place by typing ``godot``. "
"You can do so on Linux by placing the Godot binary in ``/usr/local/bin`` and "
"making sure it is called ``godot``."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:166
msgid "Setting the project path"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:168
msgid ""
"Depending on where your Godot binary is located and what your current "
"working directory is, you may need to set the path to your project for any "
"of the following commands to work correctly."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:172
msgid ""
"This can be done by giving the path to the ``project.godot`` file of your "
"project as either the first argument, like this:"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:179
msgid "Or by using the ``--path`` argument:"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:185
msgid ""
"For example, the full command for exporting your game (as explained below) "
"might look like this:"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:192
msgid "Creating a project"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:195
msgid ""
"Creating a project from the command line can be done by navigating the shell "
"to the desired place and making a project.godot file."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:206
msgid "The project can now be opened with Godot."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:210
msgid "Running the editor"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:212
msgid ""
"Running the editor is done by executing Godot with the ``-e`` flag. This "
"must be done from within the project directory or a subdirectory, otherwise "
"the command is ignored and the project manager appears."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:220
msgid ""
"If a scene has been created and saved, it can be edited later by running the "
"same code with that scene as argument."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:228
msgid "Erasing a scene"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:230
msgid ""
"Godot is friends with your filesystem and will not create extra metadata "
"files. Use ``rm`` to erase a scene file. Make sure nothing references that "
"scene or else an error will be thrown upon opening."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:239
msgid "Running the game"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:241
msgid ""
"To run the game, simply execute Godot within the project directory or "
"subdirectory."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:248
msgid ""
"When a specific scene needs to be tested, pass that scene to the command "
"line."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:256
#: ../../docs/tutorials/export/exporting_for_macos.rst:136
#: ../../docs/tutorials/platform/customizing_html5_shell.rst:190
msgid "Debugging"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:258
msgid ""
"Catching errors in the command line can be a difficult task because they "
"just fly by. For this, a command line debugger is provided by adding ``-d``. "
"It works for running either the game or a simple scene."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:273
#: ../../docs/tutorials/export/exporting_basics.rst:4
msgid "Exporting"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:275
msgid ""
"Exporting the project from the command line is also supported. This is "
"especially useful for continuous integration setups. The version of Godot "
"that is headless (server build, no video) is ideal for this."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:284
msgid ""
"The preset name must match the name of an export preset defined in the "
"project's ``export_presets.cfg`` file. If the preset name contains spaces or "
"special characters (such as \"Windows Desktop\"), it must be surrounded with "
"quotes."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:288
msgid ""
"To export a debug version of the game, use the ``--export-debug`` switch "
"instead of ``--export``. Their parameters and usage are the same."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:291
msgid ""
"To export only a PCK file, use the ``--export-pack`` option followed by the "
"preset name and output path, with the file extension, instead of ``--"
"export``. The output path extension determines the package's format, either "
"PCK or ZIP."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:297
msgid ""
"When specifying a relative path as the path for `--export`, `--export-debug` "
"or `--export-pack`, the path will be relative to the directory containing "
"the ``project.godot`` file, **not** relative to the current working "
"directory."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:302
msgid "Running a script"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:304
msgid ""
"It is possible to run a simple ``.gd`` script from the command line. This "
"feature is especially useful in large projects, e.g. for batch conversion of "
"assets or custom import/export."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:308
msgid "The script must inherit from ``SceneTree`` or ``MainLoop``."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:310
msgid "Here is a simple ``sayhello.gd`` example of how it works:"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:321
msgid "And how to run it:"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:328
msgid ""
"If no ``project.godot`` exists at the path, current path is assumed to be "
"the current working directory (unless ``--path`` is specified)."
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:331
msgid ""
"The first line of ``sayhello.gd`` above is commonly referred to as a "
"*shebang*. If the Godot binary is in your ``PATH`` as ``godot``, it allows "
"you to run the script as follows in modern Linux distributions, as well as "
"macOS:"
msgstr ""

#: ../../docs/tutorials/editor/command_line_tutorial.rst:343
msgid ""
"If the above doesn't work in your current version of Linux or macOS, you can "
"always have the shebang run Godot straight from where it is located as "
"follows:"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:4
msgid "Using an external text editor"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:6
msgid "This page explains how to code using an external text editor."
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:8
msgid ""
"Godot can be used with an external text editor, such as Sublime Text or "
"Visual Studio Code. Browse to the relevant editor settings: ``Editor -> "
"Editor Settings -> Text Editor -> External``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:14
msgid ""
"There are two fields: the executable path and command-line flags. The flags "
"allow you to integrate the editor with Godot, passing it the file path to "
"open and other relevant arguments. Godot will replace the following "
"placeholders in the flags string:"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:20
msgid "Field in Exec Flags"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:20
msgid "Is replaced with"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:22
msgid "``{project}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:22
msgid "The absolute path to the project directory"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:24
msgid "``{file}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:24
msgid "The absolute path to the file"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:26
msgid "``{col}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:26
msgid "The column number of the error"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:28
msgid "``{line}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:28
msgid "The line number of the error"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:31
msgid "Some example Exec Flags for various editors include:"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:34
msgid "Exec Flags"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:36
msgid "Geany/Kate"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:36
msgid "``{file} --line {line} --column {col}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:38
msgid "Atom/Sublime Text"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:38
msgid "``{file}:{line}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:40
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:88
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:93
msgid "JetBrains Rider"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:40
msgid "``{project} --line {line} {file}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:42
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:85
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:109
#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:4
msgid "Visual Studio Code"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:42
msgid "``{project} --goto {file}:{line}:{col}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:44
msgid "Vim (gVim)"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:44
msgid "``\"+call cursor({line}, {col})\" {file}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:46
msgid "Emacs"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:46
msgid "``emacs +{line}:{col} {file}``"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:49
msgid ""
"For Visual Studio Code, you will have to point to the ``code.cmd`` file. For "
"Emacs, you can call ``emacsclient`` instead of ``emacs`` if you use the "
"server mode."
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:54
msgid "Official editor plugins"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:56
msgid "We have official plugins for the following code editors:"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:58
msgid ""
"`Visual Studio Code <https://github.com/godotengine/godot-vscode-plugin>`_"
msgstr ""

#: ../../docs/tutorials/editor/external_editor.rst:59
msgid "`Emacs <https://github.com/godotengine/emacs-gdscript-mode>`_"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:1
msgid "cheatsheet, cheat sheet, shortcut"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:7
msgid "Default editor shortcuts"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:8
msgid ""
"Many of Godot Editor functions can be executed with keyboard shortcuts. This "
"page lists functions which have associated shortcuts by default, but many "
"others are available for customization in editor settings as well. To change "
"keys associated with these and other actions navigate to ``Editor -> Editor "
"Settings -> Shortcuts``."
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:13
msgid ""
"While some actions are universal, a lot of shortcuts are specific to "
"individual tools. For this reason it is possible for some key combinations "
"to be assigned to more than one function. The correct action will be "
"performed depending on the context."
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:18
msgid ""
"While Windows and Linux builds of the editor share most of the default "
"settings, some shortcuts may differ for macOS version. This is done for "
"better integration of the editor into macOS ecosystem. Users fluent with "
"standard shortcuts on that OS should find Godot Editor's default key mapping "
"intuitive."
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:24
msgid "General Editor Actions"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:27
#: ../../docs/tutorials/editor/default_key_mapping.rst:92
#: ../../docs/tutorials/editor/default_key_mapping.rst:145
#: ../../docs/tutorials/editor/default_key_mapping.rst:220
#: ../../docs/tutorials/editor/default_key_mapping.rst:301
#: ../../docs/tutorials/editor/default_key_mapping.rst:348
#: ../../docs/tutorials/editor/default_key_mapping.rst:373
#: ../../docs/tutorials/editor/default_key_mapping.rst:384
#: ../../docs/tutorials/editor/default_key_mapping.rst:397
#: ../../docs/tutorials/editor/default_key_mapping.rst:428
#: ../../docs/tutorials/editor/default_key_mapping.rst:441
#: ../../docs/tutorials/editor/default_key_mapping.rst:464
#: ../../docs/tutorials/editor/default_key_mapping.rst:481
#: ../../docs/tutorials/editor/default_key_mapping.rst:516
msgid "Action name"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:27
#: ../../docs/tutorials/editor/default_key_mapping.rst:92
#: ../../docs/tutorials/editor/default_key_mapping.rst:145
#: ../../docs/tutorials/editor/default_key_mapping.rst:220
#: ../../docs/tutorials/editor/default_key_mapping.rst:301
#: ../../docs/tutorials/editor/default_key_mapping.rst:348
#: ../../docs/tutorials/editor/default_key_mapping.rst:373
#: ../../docs/tutorials/editor/default_key_mapping.rst:384
#: ../../docs/tutorials/editor/default_key_mapping.rst:397
#: ../../docs/tutorials/editor/default_key_mapping.rst:428
#: ../../docs/tutorials/editor/default_key_mapping.rst:441
#: ../../docs/tutorials/editor/default_key_mapping.rst:464
#: ../../docs/tutorials/editor/default_key_mapping.rst:481
#: ../../docs/tutorials/editor/default_key_mapping.rst:516
msgid "Windows, Linux"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:27
#: ../../docs/tutorials/editor/default_key_mapping.rst:92
#: ../../docs/tutorials/editor/default_key_mapping.rst:145
#: ../../docs/tutorials/editor/default_key_mapping.rst:220
#: ../../docs/tutorials/editor/default_key_mapping.rst:301
#: ../../docs/tutorials/editor/default_key_mapping.rst:348
#: ../../docs/tutorials/editor/default_key_mapping.rst:373
#: ../../docs/tutorials/editor/default_key_mapping.rst:384
#: ../../docs/tutorials/editor/default_key_mapping.rst:397
#: ../../docs/tutorials/editor/default_key_mapping.rst:428
#: ../../docs/tutorials/editor/default_key_mapping.rst:441
#: ../../docs/tutorials/editor/default_key_mapping.rst:464
#: ../../docs/tutorials/editor/default_key_mapping.rst:481
#: ../../docs/tutorials/editor/default_key_mapping.rst:516
msgid "Editor setting"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:29
msgid "Open 2D Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:29
msgid ":kbd:`Ctrl + F1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:29
msgid ":kbd:`Alt + 1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:29
msgid "``editor/editor_2d``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:31
msgid "Open 3D Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:31
#: ../../docs/tutorials/editor/default_key_mapping.rst:445
msgid ":kbd:`Ctrl + F2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:31
msgid ":kbd:`Alt + 2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:31
msgid "``editor/editor_3d``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:33
msgid "Open Script Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:33
msgid ":kbd:`Ctrl + F3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:33
msgid ":kbd:`Alt + 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:33
msgid "``editor/editor_script``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:35
msgid "Search Help"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:35
msgid ":kbd:`F1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:35
msgid ":kbd:`Alt + Space`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:35
msgid "``editor/editor_help``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:37
msgid "Distraction Free Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:37
msgid ":kbd:`Ctrl + Shift + F11`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:37
msgid ":kbd:`Cmd + Ctrl + D`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:37
msgid "``editor/distraction_free_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:39
msgid "Next tab"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:39
msgid ":kbd:`Ctrl + Tab`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:39
msgid ":kbd:`Cmd + Tab`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:39
msgid "``editor/next_tab``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:41
msgid "Previous tab"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:41
msgid ":kbd:`Ctrl + Shift + Tab`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:41
msgid ":kbd:`Cmd + Shift + Tab`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:41
msgid "``editor/prev_tab``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:43
msgid "Filter Files"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:43
msgid ":kbd:`Ctrl + Alt + P`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:43
msgid ":kbd:`Cmd + Alt + P`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:43
msgid "``editor/filter_files``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:45
msgid "Open Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:45
msgid ":kbd:`Ctrl + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:45
msgid ":kbd:`Cmd + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:45
msgid "``editor/open_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:47
msgid "Close Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:47
msgid ":kbd:`Ctrl + Shift + W`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:47
msgid ":kbd:`Cmd + Shift + W`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:47
msgid "``editor/close_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:49
msgid "Reopen Closed Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:49
#: ../../docs/tutorials/editor/default_key_mapping.rst:319
msgid ":kbd:`Ctrl + Shift + T`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:49
#: ../../docs/tutorials/editor/default_key_mapping.rst:319
msgid ":kbd:`Cmd + Shift + T`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:49
msgid "``editor/reopen_closed_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:51
msgid "Save Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:51
msgid ":kbd:`Ctrl + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:51
msgid ":kbd:`Cmd + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:51
msgid "``editor/save_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:53
msgid "Save Scene As"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:53
msgid ":kbd:`Ctrl + Shift + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:53
msgid ":kbd:`Cmd + Shift + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:53
msgid "``editor/save_scene_as``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:55
msgid "Save All Scenes"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:55
#: ../../docs/tutorials/editor/default_key_mapping.rst:323
msgid ":kbd:`Ctrl + Shift + Alt + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:55
#: ../../docs/tutorials/editor/default_key_mapping.rst:323
msgid ":kbd:`Cmd + Shift + Alt + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:55
msgid "``editor/save_all_scenes``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:57
msgid "Quick Open"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:57
msgid ":kbd:`Shift + Alt + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:57
msgid "``editor/quick_open``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:59
msgid "Quick Open Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:59
msgid ":kbd:`Ctrl + Shift + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:59
msgid ":kbd:`Cmd + Shift + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:59
msgid "``editor/quick_open_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:61
msgid "Quick Open Script"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:61
msgid ":kbd:`Ctrl + Alt + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:61
msgid ":kbd:`Cmd + Alt + O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:61
msgid "``editor/quick_open_script``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:63
#: ../../docs/tutorials/editor/default_key_mapping.rst:242
msgid "Undo"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:63
#: ../../docs/tutorials/editor/default_key_mapping.rst:242
msgid ":kbd:`Ctrl + Z`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:63
#: ../../docs/tutorials/editor/default_key_mapping.rst:242
msgid ":kbd:`Cmd + Z`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:63
msgid "``editor/undo``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:65
#: ../../docs/tutorials/editor/default_key_mapping.rst:244
msgid "Redo"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:65
msgid ":kbd:`Ctrl + Shift + Z`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:65
msgid ":kbd:`Cmd + Shift + Z`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:65
msgid "``editor/redo``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:67
msgid "Quit"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:67
msgid ":kbd:`Ctrl + Q`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:67
msgid ":kbd:`Cmd + Q`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:67
msgid "``editor/file_quit``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:69
msgid "Quit to Project List"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:69
msgid ":kbd:`Ctrl + Shift + Q`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:69
msgid ":kbd:`Shift + Alt + Q`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:69
msgid "``editor/quit_to_project_list``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:71
msgid "Take Screenshot"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:71
msgid ":kbd:`Ctrl + F12`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:71
msgid ":kbd:`Cmd + F12`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:71
msgid "``editor/take_screenshot``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:73
msgid "Toggle Fullscreen"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:73
msgid ":kbd:`Shift + F11`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:73
msgid ":kbd:`Cmd + Ctrl + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:73
msgid "``editor/fullscreen_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:75
msgid "Play"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:75
#: ../../docs/tutorials/editor/default_key_mapping.rst:405
msgid ":kbd:`F5`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:75
#: ../../docs/tutorials/editor/default_key_mapping.rst:278
msgid ":kbd:`Cmd + B`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:75
msgid "``editor/play``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:77
msgid "Pause Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:77
msgid ":kbd:`F7`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:77
msgid ":kbd:`Cmd + Ctrl + Y`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:77
msgid "``editor/pause_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:79
msgid "Stop"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:79
msgid ":kbd:`F8`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:79
#: ../../docs/tutorials/editor/default_key_mapping.rst:290
msgid ":kbd:`Cmd + .`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:79
msgid "``editor/stop``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:81
msgid "Play Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:81
msgid ":kbd:`F6`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:81
#: ../../docs/tutorials/editor/default_key_mapping.rst:364
msgid ":kbd:`Cmd + R`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:81
msgid "``editor/play_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:83
msgid "Play Custom Scene"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:83
msgid ":kbd:`Ctrl + Shift + F5`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:83
#: ../../docs/tutorials/editor/default_key_mapping.rst:240
#: ../../docs/tutorials/editor/default_key_mapping.rst:325
msgid ":kbd:`Cmd + Shift + R`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:83
msgid "``editor/play_custom_scene``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:85
msgid "Expand Bottom Panel"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:85
msgid ":kbd:`Shift + F12`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:85
msgid "``editor/bottom_panel_expand``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:89
msgid "2D / Canvas Item Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:94
#: ../../docs/tutorials/editor/default_key_mapping.rst:337
msgid "Zoom In"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:94
#: ../../docs/tutorials/editor/default_key_mapping.rst:337
msgid ":kbd:`Ctrl + =`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:94
#: ../../docs/tutorials/editor/default_key_mapping.rst:337
msgid ":kbd:`Cmd + =`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:94
msgid "``canvas_item_editor/zoom_plus``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:96
#: ../../docs/tutorials/editor/default_key_mapping.rst:339
msgid "Zoom Out"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:96
#: ../../docs/tutorials/editor/default_key_mapping.rst:339
msgid ":kbd:`Ctrl + -`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:96
#: ../../docs/tutorials/editor/default_key_mapping.rst:339
msgid ":kbd:`Cmd + -`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:96
msgid "``canvas_item_editor/zoom_minus``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:98
msgid "Zoom Reset"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:98
#: ../../docs/tutorials/editor/default_key_mapping.rst:341
msgid ":kbd:`Ctrl + 0`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:98
#: ../../docs/tutorials/editor/default_key_mapping.rst:341
msgid ":kbd:`Cmd + 0`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:98
msgid "``canvas_item_editor/zoom_reset``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:100
msgid "Pan View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:100
msgid ":kbd:`Space`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:100
msgid "``canvas_item_editor/pan_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:102
#: ../../docs/tutorials/editor/default_key_mapping.rst:165
msgid "Select Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:102
#: ../../docs/tutorials/editor/default_key_mapping.rst:159
#: ../../docs/tutorials/editor/default_key_mapping.rst:165
msgid ":kbd:`Q`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:102
msgid "``canvas_item_editor/select_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:104
#: ../../docs/tutorials/editor/default_key_mapping.rst:167
msgid "Move Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:104
#: ../../docs/tutorials/editor/default_key_mapping.rst:153
#: ../../docs/tutorials/editor/default_key_mapping.rst:167
#: ../../docs/tutorials/editor/default_key_mapping.rst:501
msgid ":kbd:`W`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:104
msgid "``canvas_item_editor/move_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:106
#: ../../docs/tutorials/editor/default_key_mapping.rst:169
msgid "Rotate Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:106
#: ../../docs/tutorials/editor/default_key_mapping.rst:157
#: ../../docs/tutorials/editor/default_key_mapping.rst:169
msgid ":kbd:`E`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:106
msgid "``canvas_item_editor/rotate_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:108
#: ../../docs/tutorials/editor/default_key_mapping.rst:171
msgid "Scale Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:108
#: ../../docs/tutorials/editor/default_key_mapping.rst:155
#: ../../docs/tutorials/editor/default_key_mapping.rst:499
msgid ":kbd:`S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:108
msgid "``canvas_item_editor/scale_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:110
msgid "Ruler Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:110
#: ../../docs/tutorials/editor/default_key_mapping.rst:171
msgid ":kbd:`R`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:110
msgid "``canvas_item_editor/ruler_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:112
msgid "Use Smart Snap"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:112
msgid ":kbd:`Shift + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:112
msgid "``canvas_item_editor/use_smart_snap``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:114
msgid "Use Grid Snap"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:114
msgid ":kbd:`Shift + G`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:114
msgid "``canvas_item_editor/use_grid_snap``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:116
msgid "Multiply grid step by 2"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:116
msgid ":kbd:`Num *`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:116
msgid "``canvas_item_editor/multiply_grid_step``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:118
msgid "Divide grid step by 2"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:118
msgid ":kbd:`Num /`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:118
msgid "``canvas_item_editor/divide_grid_step``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:120
msgid "Always Show Grid"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:120
#: ../../docs/tutorials/editor/default_key_mapping.rst:489
msgid ":kbd:`G`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:120
msgid "``canvas_item_editor/show_grid``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:122
msgid "Show Helpers"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:122
msgid ":kbd:`H`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:122
msgid "``canvas_item_editor/show_helpers``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:124
msgid "Show Guides"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:124
#: ../../docs/tutorials/editor/default_key_mapping.rst:175
msgid ":kbd:`Y`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:124
msgid "``canvas_item_editor/show_guides``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:126
msgid "Center Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:126
#: ../../docs/tutorials/editor/default_key_mapping.rst:197
msgid ":kbd:`F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:126
msgid "``canvas_item_editor/center_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:128
msgid "Frame Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:128
#: ../../docs/tutorials/editor/default_key_mapping.rst:147
msgid ":kbd:`Shift + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:128
msgid "``canvas_item_editor/frame_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:130
msgid "Preview Canvas Scale"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:130
msgid ":kbd:`Ctrl + Shift + P`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:130
msgid ":kbd:`Cmd + Shift + P`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:130
msgid "``canvas_item_editor/preview_canvas_scale``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:132
msgid "Insert Key"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:132
msgid ":kbd:`Ins`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:132
msgid "``canvas_item_editor/anim_insert_key``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:134
msgid "Insert Key (Existing Tracks)"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:134
msgid ":kbd:`Ctrl + Ins`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:134
msgid ":kbd:`Cmd + Ins`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:134
msgid "``canvas_item_editor/anim_insert_key_existing_tracks``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:136
msgid "Make Custom Bones from Nodes"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:136
#: ../../docs/tutorials/editor/default_key_mapping.rst:280
msgid ":kbd:`Ctrl + Shift + B`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:136
#: ../../docs/tutorials/editor/default_key_mapping.rst:280
#: ../../docs/tutorials/editor/default_key_mapping.rst:286
msgid ":kbd:`Cmd + Shift + B`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:136
msgid "``canvas_item_editor/skeleton_make_bones``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:138
msgid "Clear Pose"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:138
msgid ":kbd:`Shift + K`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:138
msgid "``canvas_item_editor/anim_clear_pose``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:142
msgid "3D / Spatial Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:147
msgid "Toggle Freelook"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:147
msgid "``spatial_editor/freelook_toggle``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:149
msgid "Freelook Left"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:149
#: ../../docs/tutorials/editor/default_key_mapping.rst:497
msgid ":kbd:`A`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:149
msgid "``spatial_editor/freelook_left``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:151
msgid "Freelook Right"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:151
msgid ":kbd:`D`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:151
msgid "``spatial_editor/freelook_right``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:153
msgid "Freelook Forward"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:153
msgid "``spatial_editor/freelook_forward``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:155
msgid "Freelook Backwards"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:155
msgid "``spatial_editor/freelook_backwards``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:157
msgid "Freelook Up"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:157
msgid "``spatial_editor/freelook_up``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:159
msgid "Freelook Down"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:159
msgid "``spatial_editor/freelook_down``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:161
msgid "Freelook Speed Modifier"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:161
msgid ":kbd:`Shift`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:161
msgid "``spatial_editor/freelook_speed_modifier``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:163
msgid "Freelook Slow Modifier"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:163
msgid ":kbd:`Alt`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:163
msgid "``spatial_editor/freelook_slow_modifier``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:165
msgid "``spatial_editor/tool_select``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:167
msgid "``spatial_editor/tool_move``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:169
msgid "``spatial_editor/tool_rotate``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:171
msgid "``spatial_editor/tool_scale``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:173
msgid "Use Local Space"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:173
#: ../../docs/tutorials/editor/default_key_mapping.rst:491
msgid ":kbd:`T`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:173
msgid "``spatial_editor/local_coords``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:175
msgid "Use Snap"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:175
msgid "``spatial_editor/snap``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:177
msgid "Snap Object to Floor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:177
#: ../../docs/tutorials/editor/default_key_mapping.rst:518
msgid ":kbd:`PgDown`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:177
msgid "``spatial_editor/snap_to_floor``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:179
msgid "Top View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:179
msgid ":kbd:`Num 7`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:179
msgid "``spatial_editor/top_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:181
msgid "Bottom View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:181
msgid ":kbd:`Alt + Num 7`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:181
msgid "``spatial_editor/bottom_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:183
msgid "Front View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:183
msgid ":kbd:`Num 1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:183
msgid "``spatial_editor/front_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:185
msgid "Rear View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:185
msgid ":kbd:`Alt + Num 1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:185
msgid "``spatial_editor/rear_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:187
msgid "Right View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:187
msgid ":kbd:`Num 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:187
msgid "``spatial_editor/right_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:189
msgid "Left View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:189
msgid ":kbd:`Alt + Num 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:189
msgid "``spatial_editor/left_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:191
msgid "Switch Perspective/Orthogonal View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:191
msgid ":kbd:`Num 5`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:191
msgid "``spatial_editor/switch_perspective_orthogonal``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:193
msgid "Insert Animation Key"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:193
msgid ":kbd:`K`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:193
msgid "``spatial_editor/insert_anim_key``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:195
msgid "Focus Origin"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:195
msgid ":kbd:`O`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:195
msgid "``spatial_editor/focus_origin``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:197
msgid "Focus Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:197
msgid "``spatial_editor/focus_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:199
msgid "Align Transform with View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:199
msgid ":kbd:`Ctrl + Alt + M`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:199
msgid ":kbd:`Cmd + Alt + M`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:199
msgid "``spatial_editor/align_transform_with_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:201
msgid "Align Rotation with View"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:201
#: ../../docs/tutorials/editor/default_key_mapping.rst:282
msgid ":kbd:`Ctrl + Alt + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:201
msgid ":kbd:`Cmd + Alt + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:201
msgid "``spatial_editor/align_rotation_with_view``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:203
msgid "1 Viewport"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:203
msgid ":kbd:`Ctrl + 1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:203
msgid ":kbd:`Cmd + 1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:203
msgid "``spatial_editor/1_viewport``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:205
msgid "2 Viewports"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:205
msgid ":kbd:`Ctrl + 2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:205
msgid ":kbd:`Cmd + 2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:205
msgid "``spatial_editor/2_viewports``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:207
msgid "2 Viewports (Alt)"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:207
msgid ":kbd:`Ctrl + Alt + 2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:207
msgid ":kbd:`Cmd + Alt + 2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:207
msgid "``spatial_editor/2_viewports_alt``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:209
msgid "3 Viewports"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:209
msgid ":kbd:`Ctrl + 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:209
msgid ":kbd:`Cmd + 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:209
msgid "``spatial_editor/3_viewports``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:211
msgid "3 Viewports (Alt)"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:211
msgid ":kbd:`Ctrl + Alt + 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:211
msgid ":kbd:`Cmd + Alt + 3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:211
msgid "``spatial_editor/3_viewports_alt``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:213
msgid "4 Viewports"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:213
msgid ":kbd:`Ctrl + 4`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:213
msgid ":kbd:`Cmd + 4`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:213
msgid "``spatial_editor/4_viewports``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:217
msgid "Text Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:222
msgid "Cut"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:222
#: ../../docs/tutorials/editor/default_key_mapping.rst:354
#: ../../docs/tutorials/editor/default_key_mapping.rst:505
msgid ":kbd:`Ctrl + X`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:222
#: ../../docs/tutorials/editor/default_key_mapping.rst:354
#: ../../docs/tutorials/editor/default_key_mapping.rst:505
msgid ":kbd:`Cmd + X`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:222
msgid "``script_text_editor/cut``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:224
msgid "Copy"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:224
#: ../../docs/tutorials/editor/default_key_mapping.rst:352
#: ../../docs/tutorials/editor/default_key_mapping.rst:375
#: ../../docs/tutorials/editor/default_key_mapping.rst:430
#: ../../docs/tutorials/editor/default_key_mapping.rst:447
#: ../../docs/tutorials/editor/default_key_mapping.rst:507
msgid ":kbd:`Ctrl + C`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:224
#: ../../docs/tutorials/editor/default_key_mapping.rst:352
#: ../../docs/tutorials/editor/default_key_mapping.rst:375
#: ../../docs/tutorials/editor/default_key_mapping.rst:430
#: ../../docs/tutorials/editor/default_key_mapping.rst:447
#: ../../docs/tutorials/editor/default_key_mapping.rst:507
msgid ":kbd:`Cmd + C`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:224
msgid "``script_text_editor/copy``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:226
msgid "Paste"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:226
#: ../../docs/tutorials/editor/default_key_mapping.rst:356
msgid ":kbd:`Ctrl + V`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:226
#: ../../docs/tutorials/editor/default_key_mapping.rst:356
msgid ":kbd:`Cmd + V`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:226
msgid "``script_text_editor/paste``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:228
msgid "Select All"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:228
#: ../../docs/tutorials/editor/default_key_mapping.rst:443
msgid ":kbd:`Ctrl + A`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:228
#: ../../docs/tutorials/editor/default_key_mapping.rst:443
msgid ":kbd:`Cmd + A`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:228
msgid "``script_text_editor/select_all``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:230
#: ../../docs/tutorials/editor/default_key_mapping.rst:303
msgid "Find"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:230
#: ../../docs/tutorials/editor/default_key_mapping.rst:303
#: ../../docs/tutorials/editor/default_key_mapping.rst:350
#: ../../docs/tutorials/editor/default_key_mapping.rst:483
msgid ":kbd:`Ctrl + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:230
#: ../../docs/tutorials/editor/default_key_mapping.rst:303
#: ../../docs/tutorials/editor/default_key_mapping.rst:350
#: ../../docs/tutorials/editor/default_key_mapping.rst:483
msgid ":kbd:`Cmd + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:230
msgid "``script_text_editor/find``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:232
#: ../../docs/tutorials/editor/default_key_mapping.rst:305
msgid "Find Next"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:232
#: ../../docs/tutorials/editor/default_key_mapping.rst:305
msgid ":kbd:`F3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:232
#: ../../docs/tutorials/editor/default_key_mapping.rst:360
msgid ":kbd:`Cmd + G`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:232
msgid "``script_text_editor/find_next``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:234
#: ../../docs/tutorials/editor/default_key_mapping.rst:307
msgid "Find Previous"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:234
#: ../../docs/tutorials/editor/default_key_mapping.rst:307
msgid ":kbd:`Shift + F3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:234
msgid ":kbd:`Cmd + Shift + G`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:234
msgid "``script_text_editor/find_previous``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:236
#: ../../docs/tutorials/editor/default_key_mapping.rst:309
msgid "Find in Files"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:236
#: ../../docs/tutorials/editor/default_key_mapping.rst:309
msgid ":kbd:`Ctrl + Shift + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:236
#: ../../docs/tutorials/editor/default_key_mapping.rst:309
msgid ":kbd:`Cmd + Shift + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:236
msgid "``script_text_editor/find_in_files``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:238
msgid "Replace"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:238
#: ../../docs/tutorials/editor/default_key_mapping.rst:364
msgid ":kbd:`Ctrl + R`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:238
msgid ":kbd:`Alt + Cmd + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:238
msgid "``script_text_editor/replace``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:240
msgid "Replace in Files"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:240
#: ../../docs/tutorials/editor/default_key_mapping.rst:325
msgid ":kbd:`Ctrl + Shift + R`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:240
msgid "``script_text_editor/replace_in_files``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:242
msgid "``script_text_editor/undo``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:244
msgid ":kbd:`Ctrl + Y`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:244
msgid ":kbd:`Cmd + Y`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:244
msgid "``script_text_editor/redo``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:246
#: ../../docs/tutorials/editor/default_key_mapping.rst:311
#: ../../docs/tutorials/editor/default_key_mapping.rst:455
msgid "Move Up"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:246
#: ../../docs/tutorials/editor/default_key_mapping.rst:403
msgid ":kbd:`Alt + Up Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:246
msgid "``script_text_editor/move_up``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:248
#: ../../docs/tutorials/editor/default_key_mapping.rst:313
#: ../../docs/tutorials/editor/default_key_mapping.rst:457
msgid "Move Down"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:248
msgid ":kbd:`Alt + Down Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:248
msgid "``script_text_editor/move_down``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:250
msgid "Delete Line"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:250
#: ../../docs/tutorials/editor/default_key_mapping.rst:377
msgid ":kbd:`Ctrl + Shift + K`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:250
#: ../../docs/tutorials/editor/default_key_mapping.rst:377
msgid ":kbd:`Cmd + Shift + K`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:250
msgid "``script_text_editor/delete_line``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:252
msgid "Toggle Comment"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:252
msgid ":kbd:`Ctrl + K`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:252
msgid ":kbd:`Cmd + K`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:252
msgid "``script_text_editor/toggle_comment``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:254
msgid "Fold/Unfold Line"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:254
#: ../../docs/tutorials/editor/default_key_mapping.rst:409
msgid ":kbd:`Alt + F`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:254
msgid "``script_text_editor/toggle_fold_line``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:256
msgid "Clone Down"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:256
#: ../../docs/tutorials/editor/default_key_mapping.rst:417
#: ../../docs/tutorials/editor/default_key_mapping.rst:432
#: ../../docs/tutorials/editor/default_key_mapping.rst:453
#: ../../docs/tutorials/editor/default_key_mapping.rst:466
msgid ":kbd:`Ctrl + D`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:256
msgid ":kbd:`Cmd + Shift + C`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:256
msgid "``script_text_editor/clone_down``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:258
msgid "Complete Symbol"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:258
msgid ":kbd:`Ctrl + Space`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:258
msgid "``script_text_editor/complete_symbol``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:260
msgid "Evaluate Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:260
msgid ":kbd:`Ctrl + Shift + E`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:260
msgid ":kbd:`Cmd + Shift + E`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:260
msgid "``script_text_editor/evaluate_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:262
msgid "Trim Trailing Whitespace"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:262
msgid ":kbd:`Ctrl + Alt + T`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:262
msgid ":kbd:`Cmd + Alt + T`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:262
msgid "``script_text_editor/trim_trailing_whitespace``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:264
msgid "Uppercase"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:264
msgid ":kbd:`Shift + F4`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:264
msgid "``script_text_editor/convert_to_uppercase``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:266
msgid "Lowercase"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:266
msgid ":kbd:`Shift + F5`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:266
msgid "``script_text_editor/convert_to_lowercase``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:268
msgid "Capitalize"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:268
msgid ":kbd:`Shift + F6`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:268
msgid "``script_text_editor/capitalize``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:270
msgid "Convert Indent to Spaces"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:270
msgid ":kbd:`Ctrl + Shift + Y`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:270
msgid ":kbd:`Cmd + Shift + Y`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:270
msgid "``script_text_editor/convert_indent_to_spaces``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:272
msgid "Convert Indent to Tabs"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:272
msgid ":kbd:`Ctrl + Shift + I`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:272
msgid ":kbd:`Cmd + Shift + I`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:272
msgid "``script_text_editor/convert_indent_to_tabs``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:274
msgid "Auto Indent"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:274
msgid ":kbd:`Ctrl + I`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:274
msgid ":kbd:`Cmd + I`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:274
msgid "``script_text_editor/auto_indent``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:276
msgid "Toggle Bookmark"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:276
msgid ":kbd:`Ctrl + Alt + B`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:276
msgid ":kbd:`Cmd + Alt + B`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:276
msgid "``script_text_editor/toggle_bookmark``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:278
msgid "Go to Next Bookmark"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:278
msgid ":kbd:`Ctrl + B`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:278
msgid "``script_text_editor/goto_next_bookmark``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:280
msgid "Go to Previous Bookmark"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:280
msgid "``script_text_editor/goto_previous_bookmark``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:282
msgid "Go to Function"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:282
msgid ":kbd:`Ctrl + Cmd + J`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:282
msgid "``script_text_editor/goto_function``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:284
msgid "Go to Line"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:284
msgid ":kbd:`Ctrl + L`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:284
msgid ":kbd:`Cmd + L`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:284
msgid "``script_text_editor/goto_line``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:286
#: ../../docs/tutorials/editor/default_key_mapping.rst:366
msgid "Toggle Breakpoint"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:286
#: ../../docs/tutorials/editor/default_key_mapping.rst:366
msgid ":kbd:`F9`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:286
msgid "``script_text_editor/toggle_breakpoint``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:288
msgid "Remove All Breakpoints"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:288
msgid ":kbd:`Ctrl + Shift + F9`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:288
msgid ":kbd:`Cmd + Shift + F9`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:288
msgid "``script_text_editor/remove_all_breakpoints``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:290
msgid "Go to Next Breakpoint"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:290
msgid ":kbd:`Ctrl + .`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:290
msgid "``script_text_editor/goto_next_breakpoint``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:292
msgid "Go to Previous Breakpoint"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:292
msgid ":kbd:`Ctrl + ,`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:292
msgid ":kbd:`Cmd + ,`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:292
msgid "``script_text_editor/goto_previous_breakpoint``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:294
msgid "Contextual Help"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:294
msgid ":kbd:`Alt + F1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:294
msgid ":kbd:`Alt + Shift + Space`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:294
msgid "``script_text_editor/contextual_help``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:298
msgid "Script Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:303
msgid "``script_editor/find``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:305
msgid "``script_editor/find_next``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:307
msgid "``script_editor/find_previous``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:309
msgid "``script_editor/find_in_files``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:311
msgid ":kbd:`Shift + Alt + Up Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:311
msgid "``script_editor/window_move_up``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:313
msgid ":kbd:`Shift + Alt + Down Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:313
msgid "``script_editor/window_move_down``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:315
msgid "Next Script"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:315
msgid ":kbd:`Ctrl + Shift + .`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:315
msgid ":kbd:`Cmd + Shift + .`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:315
msgid "``script_editor/next_script``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:317
msgid "Previous Script"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:317
msgid ":kbd:`Ctrl + Shift + ,`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:317
msgid ":kbd:`Cmd + Shift + ,`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:317
msgid "``script_editor/prev_script``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:319
msgid "Reopen Closed Script"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:319
msgid "``script_editor/reopen_closed_script``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:321
msgid "Save"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:321
msgid ":kbd:`Ctrl + Alt + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:321
msgid ":kbd:`Cmd + Alt + S`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:321
msgid "``script_editor/save``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:323
msgid "Save All"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:323
msgid "``script_editor/save_all``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:325
msgid "Soft Reload Script"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:325
msgid "``script_editor/reload_script_soft``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:327
msgid "History Previous"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:327
#: ../../docs/tutorials/editor/default_key_mapping.rst:399
msgid ":kbd:`Alt + Left Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:327
msgid "``script_editor/history_previous``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:329
msgid "History Next"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:329
#: ../../docs/tutorials/editor/default_key_mapping.rst:401
msgid ":kbd:`Alt + Right Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:329
msgid "``script_editor/history_next``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:331
msgid "Close"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:331
msgid ":kbd:`Ctrl + W`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:331
msgid ":kbd:`Cmd + W`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:331
msgid "``script_editor/close_file``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:333
#: ../../docs/development/compiling/compiling_for_ios.rst:79
msgid "Run"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:333
msgid ":kbd:`Ctrl + Shift + X`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:333
msgid ":kbd:`Cmd + Shift + X`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:333
msgid "``script_editor/run_file``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:335
msgid "Toggle Scripts Panel"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:335
msgid ":kbd:`Ctrl + \\\\`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:335
msgid ":kbd:`Cmd + \\\\`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:335
msgid "``script_editor/toggle_scripts_panel``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:337
msgid "``script_editor/zoom_in``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:339
msgid "``script_editor/zoom_out``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:341
msgid "Reset Zoom"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:341
msgid "``script_editor/reset_zoom``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:345
msgid "Visual Script Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:350
msgid "Find Node Type"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:350
msgid "``visual_script_editor/find_node_type``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:352
msgid "Copy Nodes"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:352
msgid "``visual_script_editor/copy_nodes``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:354
msgid "Cut Nodes"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:354
msgid "``visual_script_editor/cut_nodes``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:356
msgid "Paste Nodes"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:356
msgid "``visual_script_editor/paste_nodes``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:358
msgid "Delete Selected"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:358
#: ../../docs/tutorials/editor/default_key_mapping.rst:415
#: ../../docs/tutorials/editor/default_key_mapping.rst:434
#: ../../docs/tutorials/editor/default_key_mapping.rst:449
#: ../../docs/tutorials/editor/default_key_mapping.rst:470
#: ../../docs/tutorials/editor/default_key_mapping.rst:509
msgid ":kbd:`Del`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:358
#: ../../docs/tutorials/editor/default_key_mapping.rst:415
#: ../../docs/tutorials/editor/default_key_mapping.rst:434
#: ../../docs/tutorials/editor/default_key_mapping.rst:449
#: ../../docs/tutorials/editor/default_key_mapping.rst:470
#: ../../docs/tutorials/editor/default_key_mapping.rst:509
msgid ":kbd:`Cmd + BkSp`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:358
msgid "``visual_script_editor/delete_selected``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:360
msgid "Make Function"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:360
msgid ":kbd:`Ctrl + G`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:360
msgid "``visual_script_editor/create_function``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:362
msgid "Edit Member"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:362
msgid ":kbd:`Ctrl + E`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:362
msgid ":kbd:`Cmd + E`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:362
msgid "``visual_script_editor/edit_member``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:364
msgid "Refresh Graph"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:364
msgid "``visual_script_editor/refresh_nodes``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:366
msgid "``visual_script_editor/toggle_breakpoint``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:370
msgid "Editor Output"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:375
#: ../../docs/tutorials/editor/default_key_mapping.rst:507
msgid "Copy Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:375
msgid "``editor/copy_output``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:377
msgid "Clear Output"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:377
msgid "``editor/clear_output``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:381
#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:14
msgid "Debugger"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:386
msgid "Step Into"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:386
msgid ":kbd:`F11`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:386
msgid "``debugger/step_into``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:388
msgid "Step Over"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:388
msgid ":kbd:`F10`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:388
msgid "``debugger/step_over``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:390
msgid "Continue"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:390
msgid ":kbd:`F12`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:390
msgid "``debugger/continue``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:394
msgid "File Dialog"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:399
msgid "Go Back"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:399
msgid "``file_dialog/go_back``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:401
msgid "Go Forward"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:401
msgid "``file_dialog/go_forward``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:403
msgid "Go Up"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:403
msgid "``file_dialog/go_up``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:405
msgid "Refresh"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:405
msgid "``file_dialog/refresh``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:407
msgid "Toggle Hidden Files"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:407
msgid ":kbd:`Ctrl + H`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:407
msgid ":kbd:`Cmd + H`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:407
msgid "``file_dialog/toggle_hidden_files``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:409
msgid "Toggle Favorite"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:409
msgid "``file_dialog/toggle_favorite``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:411
msgid "Toggle Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:411
msgid ":kbd:`Alt + V`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:411
msgid "``file_dialog/toggle_mode``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:413
msgid "Create Folder"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:413
msgid ":kbd:`Ctrl + N`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:413
msgid ":kbd:`Cmd + N`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:413
msgid "``file_dialog/create_folder``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:415
#: ../../docs/tutorials/editor/default_key_mapping.rst:434
#: ../../docs/tutorials/editor/default_key_mapping.rst:449
msgid "Delete"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:415
msgid "``file_dialog/delete``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:417
msgid "Focus Path"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:417
#: ../../docs/tutorials/editor/default_key_mapping.rst:432
#: ../../docs/tutorials/editor/default_key_mapping.rst:453
#: ../../docs/tutorials/editor/default_key_mapping.rst:466
msgid ":kbd:`Cmd + D`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:417
msgid "``file_dialog/focus_path``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:419
msgid "Move Favorite Up"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:419
#: ../../docs/tutorials/editor/default_key_mapping.rst:455
msgid ":kbd:`Ctrl + Up Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:419
#: ../../docs/tutorials/editor/default_key_mapping.rst:455
msgid ":kbd:`Cmd + Up Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:419
msgid "``file_dialog/move_favorite_up``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:421
msgid "Move Favorite Down"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:421
#: ../../docs/tutorials/editor/default_key_mapping.rst:457
msgid ":kbd:`Ctrl + Down Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:421
#: ../../docs/tutorials/editor/default_key_mapping.rst:457
msgid ":kbd:`Cmd + Down Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:421
msgid "``file_dialog/move_favorite_down``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:425
msgid "FileSystem Dock"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:430
msgid "Copy Path"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:430
msgid "``filesystem_dock/copy_path``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:432
#: ../../docs/tutorials/editor/default_key_mapping.rst:453
msgid "Duplicate"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:432
msgid "``filesystem_dock/duplicate``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:434
msgid "``filesystem_dock/delete``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:438
msgid "Scene Tree Dock"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:443
msgid "Add Child Node"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:443
msgid "``scene_tree/add_child_node``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:445
msgid "Batch Rename"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:445
msgid ":kbd:`Cmd + F2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:445
msgid "``scene_tree/batch_rename``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:447
msgid "Copy Node Path"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:447
msgid "``scene_tree/copy_node_path``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:449
msgid "``scene_tree/delete``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:451
msgid "Force Delete"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:451
msgid ":kbd:`Shift + Del`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:451
msgid "``scene_tree/delete_no_confirm``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:453
msgid "``scene_tree/duplicate``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:455
msgid "``scene_tree/move_up``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:457
msgid "``scene_tree/move_down``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:461
msgid "Animation Track Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:466
msgid "Duplicate Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:466
msgid "``animation_editor/duplicate_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:468
msgid "Duplicate Transposed"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:468
msgid ":kbd:`Ctrl + Shift + D`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:468
msgid ":kbd:`Cmd + Shift + D`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:468
msgid "``animation_editor/duplicate_selection_transposed``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:470
msgid "Delete Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:470
msgid "``animation_editor/delete_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:472
msgid "Go to Next Step"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:472
msgid ":kbd:`Ctrl + Right Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:472
msgid ":kbd:`Cmd + Right Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:472
msgid "``animation_editor/goto_next_step``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:474
msgid "Go to Previous Step"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:474
msgid ":kbd:`Ctrl + Left Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:474
msgid ":kbd:`Cmd + Left Arrow`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:474
msgid "``animation_editor/goto_prev_step``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:478
msgid "Tile Map Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:483
msgid "Find Tile"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:483
msgid "``tile_map_editor/find_tile``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:485
msgid "Pick Tile"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:485
msgid ":kbd:`I`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:485
msgid "``tile_map_editor/pick_tile``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:487
msgid "Paint Tile"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:487
msgid ":kbd:`P`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:487
msgid "``tile_map_editor/paint_tile``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:489
msgid "Bucket Fill"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:489
msgid "``tile_map_editor/bucket_fill``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:491
msgid "Transpose"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:491
msgid "``tile_map_editor/transpose``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:493
msgid "Flip Horizontally"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:493
msgid ":kbd:`X`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:493
msgid "``tile_map_editor/flip_horizontal``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:495
msgid "Flip Vertically"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:495
msgid ":kbd:`Z`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:495
msgid "``tile_map_editor/flip_vertical``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:497
msgid "Rotate Left"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:497
msgid "``tile_map_editor/rotate_left``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:499
msgid "Rotate Right"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:499
msgid "``tile_map_editor/rotate_right``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:501
msgid "Clear Transform"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:501
msgid "``tile_map_editor/clear_transform``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:503
msgid "Select"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:503
msgid ":kbd:`M`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:503
msgid "``tile_map_editor/select``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:505
msgid "Cut Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:505
msgid "``tile_map_editor/cut_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:507
msgid "``tile_map_editor/copy_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:509
msgid "Erase Selection"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:509
msgid "``tile_map_editor/erase_selection``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:513
msgid "Tileset Editor"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:518
msgid "Next Coordinate"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:518
msgid "``tileset_editor/next_shape``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:520
msgid "Previous Coordinate"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:520
msgid ":kbd:`PgUp`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:520
msgid "``tileset_editor/previous_shape``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:522
msgid "Region Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:522
msgid ":kbd:`1`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:522
msgid "``tileset_editor/editmode_region``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:524
msgid "Collision Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:524
msgid ":kbd:`2`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:524
msgid "``tileset_editor/editmode_collision``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:526
msgid "Occlusion Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:526
msgid ":kbd:`3`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:526
msgid "``tileset_editor/editmode_occlusion``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:528
msgid "Navigation Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:528
msgid ":kbd:`4`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:528
msgid "``tileset_editor/editmode_navigation``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:530
msgid "Bitmask Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:530
msgid ":kbd:`5`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:530
msgid "``tileset_editor/editmode_bitmask``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:532
msgid "Priority Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:532
msgid ":kbd:`6`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:532
msgid "``tileset_editor/editmode_priority``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:534
msgid "Icon Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:534
msgid ":kbd:`7`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:534
msgid "``tileset_editor/editmode_icon``"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:536
msgid "Z Index Mode"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:536
msgid ":kbd:`8`"
msgstr ""

#: ../../docs/tutorials/editor/default_key_mapping.rst:536
msgid "``tileset_editor/editmode_z_index``"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:4
msgid "Using the Web editor"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:6
msgid ""
"Since Godot 3.3, there is a `Web editor <https://editor.godotengine.org/>`__ "
"you can use to work on new or existing projects."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:11
msgid ""
"The web editor is in a preliminary stage. While its feature set may be "
"sufficient for educational purposes, it is currently **not recommended for "
"production work**. See :ref:`doc_using_the_web_editor_limitations` below."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:16
msgid "Browser support"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:18
msgid ""
"The Web editor requires support for WebAssembly's SharedArrayBuffer. This is "
"in turn required to support threading in the browser. The following desktop "
"browsers support WebAssembly threading and can therefore run the web editor:"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:22
msgid "Chrome 68 or later"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:23
msgid "Firefox 79 or later"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:24
msgid "Edge 79 or later"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:26
msgid ""
"Opera and Safari are not supported yet. Safari may work in the future once "
"proper threading support is added."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:29
msgid "**Mobile browsers are currently not supported.**"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:31
msgid ""
"The web editor supports both the GLES3 and GLES2 renderers, although GLES2 "
"is recommended for better performance and compatibility with old/low-end "
"hardware."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:36
msgid ""
"If you use Linux, due to `poor Firefox WebGL performance <https://bugzilla."
"mozilla.org/show_bug.cgi?id=1010527>`__, it's recommended to use a Chromium-"
"based browser instead of Firefox."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:45
msgid ""
"Due to limitations on the Godot or Web platform side, the following features "
"are currently missing:"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:48
msgid "No C#/Mono support."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:49
msgid "No GDNative support."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:50
msgid ""
"No debugging support. This means GDScript debugging/profiling, live scene "
"editing, the Remote Scene tree dock and other features that rely on the "
"debugger protocol will not work."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:53
msgid ""
"No project exporting. As a workaround, you can download the project source "
"using **Project > Tools > Download Project Source** and export it using a "
"`native version of the Godot editor <https://godotengine.org/download>`__."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:56
msgid "The editor won't warn you when closing the tab with unsaved changes."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:57
msgid ""
"No lightmap baking support. You can still use existing lightmaps if they "
"were baked with a native version of the Godot editor (e.g. by importing an "
"existing project)."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:61
msgid ""
"The following features are unlikely to be supported due to inherent "
"limitations of the Web platform:"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:64
msgid "No support for external script editors."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:65
msgid "No support for Android one-click deploy."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:69
msgid ""
"See the `list of open issues on GitHub related to the web editor <https://"
"github.com/godotengine/godot/issues?"
"q=is%3Aopen+is%3Aissue+label%3Aplatform%3Ahtml5+label%3Atopic%3Aeditor>`__ "
"for a list of known bugs."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:73
msgid "Importing a project"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:75
msgid "To import an existing project, the current process is as follows:"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:77
msgid ""
"Specify a ZIP file to preload on the HTML5 filesystem using the **Preload "
"project ZIP** input."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:79
msgid ""
"Run the editor by clicking **Start Godot editor**. The Godot project manager "
"should appear after 10-20 seconds. On slower machines or connections, "
"loading may take up to a minute."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:82
msgid ""
"In the dialog that appears at the middle of the window, specify a name for "
"the folder to create then click the **Create Folder** button (it doesn't "
"have to match the ZIP archive's name)."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:85
msgid "Click **Install & Edit** and the project will open in the editor."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:89
msgid ""
"It's important to place the project folder somewhere in ``/home/web_user/``. "
"If your project folder is placed outside ``/home/web_user/``, you will lose "
"your project when closing the editor!"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:93
msgid ""
"When you follow the steps described above, the project folder will always be "
"located in ``/home/web_user/projects``, keeping it safe."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:97
msgid "Editing and running a project"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:99
msgid ""
"Unlike the native version of Godot, the web editor is constrained to a "
"single window. Therefore, it cannot open a new window when running the "
"project. Instead, when you run the project by clicking the Run button or "
"pressing :kbd:`F5`, it will appear to \"replace\" the editor window."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:104
msgid ""
"The web editor offers an alternative way to deal with the editor and game "
"windows (which are now \"tabs\"). You can switch between the **Editor** and "
"**Game** tabs using the buttons on the top. You can also close the running "
"game or editor by clicking the **×** button next to those tabs."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:110
msgid "Where are my project files?"
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:112
msgid ""
"Due to browser security limitations, the editor will save the project files "
"to the browser's IndexedDB storage. This storage isn't accessible as a "
"regular folder on your machine, but is abstracted away in a database."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:116
msgid ""
"You can download the project files as a ZIP archive by using **Project > "
"Tools > Download Project Source**. This can be used to export the project "
"using a `native Godot editor <https://godotengine.org/download>`__, since "
"exporting from the web editor isn't supported yet."
msgstr ""

#: ../../docs/tutorials/editor/using_the_web_editor.rst:121
msgid ""
"In the future, it may be possible to use the `HTML5 FileSystem API <https://"
"developer.mozilla.org/en-US/docs/Web/API/FileSystem>`__ to store the project "
"files on the user's filesystem as the native editor would do. However, this "
"isn't implemented yet."
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:4
msgid "Managing editor features"
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:9
msgid ""
"In certain situations, it may be desirable to limit what features can be "
"used in the Godot editor. For example, a UI designer on a team who doesn't "
"need to see 3D features, or an educator slowly introducing features to "
"students. Godot has a built in system called \"feature profiles\" to do this."
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:14
msgid ""
"With feature profiles, major features and nodes can be hidden from the "
"editor. This only hides parts of the interface and does not actually remove "
"support for these features, so scenes and scripts relying on those features "
"will still work fine. This also means feature profiles are not an "
"optimization technique. For information on how to optimize Godot see :ref:"
"`doc_optimization`."
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:21
msgid "Creating a profile"
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:23
msgid ""
"To manage editor features go to **Editor > Manage Editor Features**. This "
"will open the **Manage Editor Feature Profiles** window. By default there "
"will be no profile. Click on **Create Profile** and give it a name. You will "
"then see a list of all the features in the Godot editor."
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:28
msgid "..img:: img/configure_profile.png"
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:30
msgid ""
"The first section allows major editor features to be removed, such as the 3D "
"editor or scripting editor. Below the main features is every class and node "
"in Godot, which can be disabled as well. Click on a node and all of its "
"properties and options will be listed in the **Extra Items** box, these can "
"all be individually disabled."
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:36
msgid "..img:: img/node_features.png"
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:39
msgid "Sharing a profile"
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:41
msgid ""
"To share profiles between editors click on the **Export** button. Save the "
"custom profile somewhere as a ``.profile`` file. To use this in another "
"editor open that editor's **Manage Editor Feature Profiles** window and "
"click import, then select the ``.profile`` file."
msgstr ""

#: ../../docs/tutorials/editor/managing_editor_features.rst:46
msgid ""
"This process is potentially cumbersome however if a large amount of "
"computers need custom profiles. As an alternative, you can enable self-"
"contained mode for Godot, which allows putting all editor configuration in "
"the same folder as the editor binary. See :ref:"
"`doc_data_paths_self_contained_mode` for details."
msgstr ""

#: ../../docs/tutorials/export/index.rst:2
msgid "Export"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:9
msgid ""
"Now that you have a working game, you probably want to share your success "
"with others. However, it's not practical to ask your friends to download "
"Godot just so they can open your project. Instead, you can *export* your "
"project, converting it into a \"package\" that can be run by anyone."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:14
msgid ""
"The way you export your game depends on what platform you are targeting. In "
"this tutorial, you'll learn how to export the *Dodge the Creeps* game for a "
"variety of platforms. First, however, we need to make some changes to the "
"way the game works."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:19
msgid ""
"If you haven't made \"Dodge the Creeps\" yourself yet, please read :ref:"
"`doc_your_first_2d_game` before continuing with this tutorial."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:23
msgid "Preparing the project"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:25
msgid ""
"In *Dodge the Creeps*, we used keyboard controls to move the player's "
"character. This is fine if your game is being played on a PC platform, but "
"on a phone or tablet, you need to support touchscreen input. Because a click "
"event can be treated the same as a touch event, we'll convert the game to a "
"click-and-move input style."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:31
msgid ""
"By default, Godot emulates mouse input from touch input. That means that if "
"anything is coded to happen on a mouse event, touch will trigger it as well. "
"Godot can also emulate touch input from mouse clicks, which we will need to "
"be able to keep playing our game on our computer after we switch to touch "
"input."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:36
msgid ""
"In **Project > Project Settings**, under **Input Devices > Pointing**, "
"enable **Emulate Touch From Mouse**."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:41
msgid ""
"We also want to ensure that the game scales consistently on different-sized "
"screens, so in the project settings go to **Display**, then click on "
"**Window**. In the **Stretch** options, set **Mode** to ``2d`` and "
"**Aspect** to ``keep``."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:45
msgid ""
"Since we are already in the **Window** settings, we should also set under "
"**Handheld** the **Orientation** to ``portrait``."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:50
msgid ""
"Next, we need to modify the ``Player.gd`` script to change the input method. "
"We'll remove the key inputs and make the player move towards a \"target\" "
"that's set by the touch (or click) event."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:54
msgid ""
"Here is the full script for the player, with comments noting what we've "
"changed:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:242
msgid "Setting a main scene"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:244
msgid ""
"The main scene is the one that your game will start in. For this *Dodge the "
"Creeps* example, in **Project -> Project Settings -> Application -> Run**, "
"set **Main Scene** to ``Main.tscn`` by clicking the folder icon and "
"selecting it."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:250
#: ../../docs/tutorials/export/exporting_projects.rst:92
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:315
#: ../../docs/development/compiling/compiling_with_mono.rst:173
msgid "Export templates"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:252
msgid ""
"To export the project, you need to download the *export templates* from the "
"http://godotengine.org/download. These templates are optimized versions of "
"the engine without the editor pre-compiled for each platform. You can also "
"download them in Godot by clicking on **Editor -> Manage Export Templates**:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:261
msgid ""
"If you've downloaded Godot from `Steam <https://store.steampowered.com/"
"app/404790/Godot_Engine/>`__, export templates are already included. "
"Therefore, you don't need to download them using the **Manage Export "
"Templates** dialog."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:266
msgid ""
"In the window that appears, you can click **Download** to get the template "
"version that matches your version of Godot."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:273
msgid ""
"Export templates are bound to a specific Godot version. If you upgrade "
"Godot, you must download templates that match the new version."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:277
msgid "Export presets"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:279
msgid ""
"Next, you can configure the export settings by clicking on **Project -> "
"Export**."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:281
msgid ""
"Create a new export preset by clicking **Add...** and selecting a platform. "
"You can make as many presets as you like with different settings."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:286
msgid ""
"At the bottom of the window are two buttons. **Export PCK/ZIP** only creates "
"a packed version of your project's data. This doesn't include an executable "
"so the project can't be run on its own."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:290
msgid ""
"The second button, **Export Project**, creates a complete executable version "
"of your game, such as an ``.apk`` for Android or an ``.exe`` for Windows."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:293
msgid ""
"In the **Resources** and **Features** tabs, you can customize how the game "
"is exported for each platform. We can leave those settings alone for now."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:297
msgid "Exporting by platform"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:299
msgid ""
"In this section, we'll walk through the process for each platform, including "
"any additional software or requirements you'll need."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:303
msgid "PC (Linux/macOS/Windows)"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:305
msgid ""
"Exporting PC platforms works the same across the three supported operating "
"systems. Open the export window and click **Add...** to create the preset(s) "
"you want to make. Then click **Export Project** and choose a name and "
"destination folder. Choose a location *outside* of your project folder."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:310
msgid "Click **Save** and the engine will build the export files."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:314
msgid ""
"When exporting for macOS, if you export from a macOS computer, you'll end up "
"with a ``.dmg`` file, while using Linux or Windows produces a ``.zip``. In "
"either case, the compressed file contains a macOS ``.app`` that you can "
"double-click and run."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:321
msgid ""
"On Windows, if you want your exported executable to have a different icon "
"than the default one, you need to change it manually. See :ref:"
"`doc_changing_application_icon_for_windows`."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:330
msgid ""
"Mobile devices come with a wide variety of capabilities. In most cases, "
"Godot's default settings will work, but mobile development is sometimes more "
"art than science, and you may need to do some experimenting and searching "
"for help in order to get everything working."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:335
msgid ""
"Before you can export your project for Android, you must download the "
"following software:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:338
msgid "Android SDK: https://developer.android.com/studio/"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:339
msgid ""
"Open JDK (**version 8 is required**, more recent versions won't work): "
"https://adoptopenjdk.net/index.html"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:341
msgid ""
"When you run Android Studio for the first time, click on **Configure -> SDK "
"Manager** and install **Android SDK Platform Tools**. This installs the "
"``adb`` command-line tool that Godot uses to communicate with your device."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:345
msgid ""
"Next, create a debug keystore by running the following command on your "
"system's command line:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:352
msgid ""
"Click on *Editor -> Editor Settings* in Godot and select the *Export/"
"Android* section. Here, you need to set the paths to the Android SDK "
"applications on your system and the location of the keystore you just "
"created."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:358
msgid ""
"Now you're ready to export. Click on **Project -> Export** and add a preset "
"for Android (see above). Select the newly added Android preset. Under "
"**Options**, go to **Screen** and set **Orientation** to **Portrait**. If "
"your game is in landscape mode (i.e. the window width in pixels is greater "
"than the window height), leave this on **Landscape**."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:364
msgid ""
"Click the **Export Project** button and Godot will build an APK you can "
"download on your device. To do this on the command line, use the following:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:371
msgid ""
"Your device may need to be in *developer mode*. Consult your device's "
"documentation for details."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:374
msgid ""
"If your system supports it, connecting a compatible Android device will "
"cause a **One-click Deploy** button to appear in Godot's playtest button "
"area:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:379
msgid ""
"Clicking this button builds the APK and copies it onto your device in one "
"step."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:386
msgid ""
"To build your game for iOS, you must have a computer running macOS with "
"Xcode installed."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:389
msgid ""
"Before exporting, there are some settings that you *must* complete for the "
"project to export successfully. First, the **App Store Team Id**, which you "
"can find by logging in to your Apple developer account and looking in the "
"**Membership** section."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:393
msgid "You must also provide icons and splash screen images as shown below:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:397
msgid "Click **Export Project** and select a destination folder."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:399
msgid ""
"Once you have successfully exported the project, you'll find the following "
"folders and files have been created in your selected location:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:404
msgid ""
"You can now open the project in Xcode and build the project for iOS. The "
"Xcode build procedure is beyond the scope of this tutorial. See https://help."
"apple.com/xcode/mac/current/#/devc8c2a6be1 for more information."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:410
msgid "HTML5 (web)"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:412
msgid ""
"Click **Export Project** on the HTML5 preset. We don't need to change any of "
"the default settings."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:415
msgid ""
"When the export is complete, you'll have a folder containing the following "
"files:"
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:420
msgid ""
"Viewing the ``.html`` file in your browser lets you play the game. However, "
"you can't open the file directly. Instead, it needs to be served by a web "
"server. If you don't have one set up on your computer, you can search online "
"to find suggestions for your specific OS."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:425
msgid ""
"Point your browser at the URL where you've placed the HTML file. You may "
"have to wait a few moments while the game loads before you see the start "
"screen."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:430
msgid ""
"The console window beneath the game tells you if anything goes wrong. You "
"can disable it by disabling **Export With Debug** in the final file dialog "
"that appears when you export the project."
msgstr ""

#: ../../docs/tutorials/export/exporting_basics.rst:438
msgid ""
"While WebAssembly is supported in all major browsers, it is still an "
"emerging technology and you may find some things that don't work. Make sure "
"you have updated your browser to the most recent version, and report any "
"bugs you find on the `Godot GitHub repository <https://github.com/"
"godotengine/godot/issues>`_."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:4
msgid "Exporting projects"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:9
msgid "Why export?"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:11
msgid ""
"Originally, Godot did not have any means to export projects. The developers "
"would compile the proper binaries and build the packages for each platform "
"manually."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:15
msgid ""
"When more developers (and even non-programmers) started using it, and when "
"our company started taking more projects at the same time, it became evident "
"that this was a bottleneck."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:20
msgid "On PC"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:22
msgid ""
"Distributing a game project on PC with Godot is rather easy. Drop the Godot "
"binary in the same directory as the ``project.godot`` file, then compress "
"the project directory and you are done."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:26
msgid ""
"It sounds simple, but there are probably a few reasons why the developer may "
"not want to do this. The first one is that it may not be desirable to "
"distribute loads of files. Some developers may not like curious users "
"peeking at how the game was made, others may find it inelegant, and so on. "
"Another reason is that the developer might prefer a specially-compiled "
"binary, which is smaller in size, more optimized and does not include tools "
"like the editor and debugger."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:34
msgid ""
"Finally, Godot has a simple but efficient system for :ref:`creating DLCs as "
"extra package files <doc_exporting_pcks>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:38
msgid "On mobile"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:40
msgid ""
"The same scenario on mobile platforms is a little worse. To distribute a "
"project on those devices, a binary for each of those platforms is built, "
"then added to a native project together with the game data."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:45
msgid ""
"This can be troublesome because it means that the developer must be "
"familiarized with the SDK of each platform before even being able to export. "
"While learning each SDK is always encouraged, it can be frustrating to be "
"forced to do it at an undesired time."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:50
msgid ""
"There is also another problem with this approach: different devices prefer "
"some data in different formats to run. The main example of this is texture "
"compression. All PC hardware uses S3TC (BC) compression and that has been "
"standardized for more than a decade, but mobile devices use different "
"formats for texture compression, such as PVRTC (iOS) or ETC (Android)."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:58
msgid "Export menu"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:60
msgid ""
"After many attempts at different export workflows, the current one has "
"proven to work the best. At the time of this writing, not all platforms are "
"supported yet, but the supported platforms continue to grow."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:64
msgid "To open the export menu, click the **Export** button:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:68
msgid ""
"The export menu will open. However, it will be completely empty. This is "
"because we need to add an export preset."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:73
msgid ""
"To create an export preset, click the **Add…** button at the top of the "
"export menu. This will open a drop-down list of platforms to choose from for "
"an export preset."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:79
msgid ""
"The default options are often enough to export, so tweaking them is usually "
"not necessary. However, many platforms require additional tools (SDKs) to be "
"installed to be able to export. Additionally, Godot needs export templates "
"installed to create packages. The export menu will complain when something "
"is missing and will not allow the user to export for that platform until "
"they resolve it:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:88
msgid ""
"At that time, the user is expected to come back to the documentation and "
"follow instructions on how to properly set up that platform."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:94
msgid ""
"Apart from setting up the platform, the export templates must be installed "
"to be able to export projects. They can be obtained as a TPZ file (which is "
"a renamed ZIP archive) from the `download page of the website <https://www."
"godotengine.org/download>`_."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:99
msgid ""
"Once downloaded, they can be installed using the **Install Export "
"Templates** option in the editor:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:107
msgid "Resource options"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:109
msgid ""
"When exporting, Godot makes a list of all the files to export and then "
"creates the package. There are 3 different modes for exporting:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:112
msgid "Export all resources in the project"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:113
msgid "Export selected scenes (and dependencies)"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:114
msgid "Export selected resources (and dependencies)"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:118
msgid ""
"**Export all resources in the project** will export every resource in the "
"project. **Export selected scenes** and **Export selected resources** gives "
"you a list of the scenes or resources in the project, and you have to select "
"every scene or resource you want to export."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:127
msgid ""
"Files and folders whose name begin with a period will never be included in "
"the exported project. This is done to prevent version control folders like "
"``.git`` from being included in the exported PCK file."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:131
msgid ""
"Below the list of resources are two filters that can be setup. The first "
"allows non resource files such as ``.txt``,``.json`` and ``.csv`` to be "
"exported with the project. The second filter can be used to exclude every "
"file of a certain type without manually deselecting every one. For example, "
"``.png`` files."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:137
msgid "Exporting from the command line"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:139
msgid ""
"In production, it is useful to automate builds, and Godot supports this with "
"the ``--export`` and ``--export-debug`` command line parameters. Exporting "
"from the command line still requires an export preset to define the export "
"parameters. A basic invocation of the command would be:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:148
msgid ""
"This will export to ``some_name.exe``, assuming there is a preset called "
"\"Windows Desktop\" and the template can be found. (The export preset name "
"must be written within quotes if it contains spaces or special characters.) "
"The output path is *relative to the project path* or *absolute*; **it does "
"not respect the directory the command was invoked from**."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:154
msgid ""
"The output file extension should match the one used by the Godot export "
"process:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:156
msgid "Windows: ``.exe``"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:157
msgid ""
"macOS: ``.zip`` (from all platforms) or ``.dmg`` (only when exporting *from* "
"macOS). ``.app`` is not supported directly, although the generated ZIP "
"archive contains an ``.app`` bundle."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:159
msgid ""
"Linux: Any extension (including none). ``.x86_64`` is typically used for 64-"
"bit x86 binaries."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:160
msgid "HTML5: ``.zip``"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:161
msgid "Android: ``.apk``"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:162
msgid "iOS: ``.zip``"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:164
msgid ""
"You can also configure it to export *only* the PCK or ZIP file, allowing a "
"single exported main pack file to be used with multiple Godot executables. "
"When doing so, the export preset name must still be specified on the command "
"line:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:172
msgid ""
"It is often useful to combine the ``--export`` flag with the ``--path`` "
"flag, so that you do not need to ``cd`` to the project folder before running "
"the command:"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:182
msgid ""
"See :ref:`doc_command_line_tutorial` for more information about using Godot "
"from the command line."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:186
msgid "PCK versus ZIP pack file formats"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:188
msgid ""
"Each format has its upsides and downsides. PCK is the default and "
"recommended format for most use cases, but you may want to use a ZIP archive "
"instead depending on your needs."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:192
msgid "**PCK format:**"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:194
msgid "Uncompressed format. Larger file size, but faster to read/write."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:195
msgid ""
"Not readable and writable using tools normally present on the user's "
"operating system, even though there are `third-party tools <https://github."
"com/hhyyrylainen/GodotPckTool>`__ to extract and create PCK files."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:200
msgid "**ZIP format:**"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:202
msgid "Compressed format. Smaller file size, but slower to read/write."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:203
msgid ""
"Readable and writable using tools normally present on the user's operating "
"system. This can be useful to make modding easier (see also :ref:"
"`doc_exporting_pcks`)."
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:208
msgid ""
"Due to a `known bug <https://github.com/godotengine/godot/pull/42123>`__, "
"when using a ZIP file as a pack file, the exported binary will not try to "
"use it automatically. Therefore, you have to create a *launcher script* that "
"the player can double-click or run from a terminal to launch the project::"
msgstr ""

#: ../../docs/tutorials/export/exporting_projects.rst:220
msgid ""
"Save the launcher script and place it in the same folder as the exported "
"binary. On Linux, make sure to give executable permissions to the launcher "
"script using the command ``chmod +x launch.sh``."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:4
msgid "Exporting packs, patches, and mods"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:7
msgid "Use cases"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:9
msgid ""
"Oftentimes one would like to add functionality to one's game after it has "
"been deployed."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:12
msgid "Examples of this include..."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:14
msgid ""
"Downloadable Content: the ability to add features and content to one's game."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:15
msgid "Patches: the ability to fix a bug that is present in a shipped product."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:16
msgid "Mods: grant other people the ability to create content for one's game."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:18
msgid ""
"These tools help developers to extend their development beyond the initial "
"release."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:22
msgid "Overview of PCK files"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:24
msgid ""
"Godot enables this via a feature called **resource packs** (PCK files, with "
"extension ``.pck``)."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:27
msgid "**Advantages:**"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:29
msgid "incremental updates/patches"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:30
msgid "offer DLCs"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:31
msgid "offer mod support"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:32
msgid "no source code disclosure needed for mods"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:33
msgid "more modular project structure"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:34
msgid "users don't have to replace the entire game"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:36
msgid ""
"The first part of using them involves exporting and delivering the project "
"to players. Then, when one wants to add functionality or content later on, "
"they just deliver the updates via PCK files to the users."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:40
msgid "PCK files usually contain, but are not limited to:"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:42
msgid "scripts"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:43
msgid "scenes"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:44
msgid "shaders"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:45
msgid "models"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:46
msgid "textures"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:47
msgid "sound effects"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:48
msgid "music"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:49
msgid "any other asset suitable for import into the game"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:51
msgid ""
"The PCK files can even be an entirely different Godot project, which the "
"original game loads in at runtime."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:55
msgid "Generating PCK files"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:57
msgid ""
"In order to pack all resources of a project into a PCK file open the project "
"and go to Project/Export and click on “Export PCK/Zip”. Also make sure to "
"have an export template selected while doing so."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:63
msgid ""
"Another method would be to :ref:`export from the command line "
"<doc_command_line_tutorial_exporting>`. If the output file ends with a PCK "
"or ZIP file extension, then the export process will build that type of file "
"for the chosen platform."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:69
msgid ""
"If one wishes to support mods for their game, they will need their users to "
"create similarly exported files. Assuming the original game expects a "
"certain structure for the PCK's resources and/or a certain interface for its "
"scripts, then either..."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:74
msgid ""
"The developer must publicize documentation of these expected structures/ "
"interfaces, expect modders to install Godot Engine, and then also expect "
"those modders to conform to the documentation's defined API when building "
"mod content for the game (so that it will work). Users would then use "
"Godot's built in exporting tools to create a PCK file, as detailed above."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:80
msgid ""
"The developer uses Godot to build a GUI tool for adding their exact API "
"content to a project. This Godot tool must either run on a tools-enabled "
"build of the engine or have access to one (distributed alongside or perhaps "
"in the original game's files). The tool can then use the Godot executable to "
"export a PCK file from the command line with :ref:`OS.execute() "
"<class_OS_method_execute>`. The game itself shouldn't use a tool-build of "
"the engine (for security), so it's best to keep the modding tool and game "
"separate."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:90
msgid "Opening PCK files at runtime"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:92
msgid ""
"To import a PCK file, one uses the ProjectSettings singleton. The following "
"example expects a “mod.pck” file in the directory of the games executable. "
"The PCK file contains a “mod_scene.tscn” test scene in its root."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:123
msgid ""
"By default, if you import a file with the same file path/name as one you "
"already have in your project, the imported one will replace it. This is "
"something to watch out for when creating DLC or mods (solved easily with a "
"tool isolating mods to a specific mods subfolder). However, it is also a way "
"of creating patches for one's own game. A PCK file of this kind can fix the "
"content of a previously loaded PCK."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:129
msgid ""
"To opt out of this behavior, pass ``false`` as the second argument to :ref:"
"`ProjectSettings.load_resource_pack() "
"<class_ProjectSettings_method_load_resource_pack>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:133
msgid ""
"For a C# project, you need to build the DLL and place it in the project "
"directory first. Then, before loading the resource pack, you need to load "
"its DLL as follows: ``Assembly.LoadFile(\"mod.dll\")``"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:140
msgid ""
"This tutorial should illustrate how easy adding mods, patches or DLC to a "
"game is. The most important thing is to identify how one plans to distribute "
"future content for their game and develop a workflow that is customized for "
"that purpose. Godot should make that process smooth regardless of which "
"route a developer pursues."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:4
msgid "Feature tags"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:9
msgid ""
"Godot has a special system to tag availability of features. Each *feature* "
"is represented as a string, which can refer to many of the following:"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:12
msgid "Platform name."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:13
msgid "Platform architecture (64-bit or 32-bit, x86 or ARM)."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:14
msgid "Platform type (desktop, mobile, Web)."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:15
msgid "Supported texture compression algorithms on the platform."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:16
msgid ""
"Whether a build is ``debug`` or ``release`` (``debug`` includes the editor)."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:17
msgid ""
"Whether the project is running from the editor or a \"standalone\" binary."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:18
msgid "Many more things."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:20
msgid "Features can be queried at run-time from the singleton API by calling:"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:28
msgid "Default features"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:30
msgid ""
"Here is a list of most feature tags in Godot. Keep in mind they are **case-"
"sensitive**:"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:33
msgid "**Feature tag**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:33
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:230
msgid "**Description**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:35
msgid "**Android**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:35
msgid "Running on Android"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:37
msgid "**HTML5**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:37
msgid "Running on HTML5"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:39
msgid "**JavaScript**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:39
msgid ":ref:`JavaScript singleton <doc_javascript_eval>` is available"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:42
msgid "**OSX**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:42
msgid "Running on macOS"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:44
msgid "**iOS**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:44
msgid "Running on iOS"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:46
msgid "**UWP**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:46
msgid "Running on UWP"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:48
msgid "**Windows**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:48
msgid "Running on Windows"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:50
msgid "**X11**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:50
msgid "Running on X11 (Linux/BSD desktop)"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:52
msgid "**Server**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:52
msgid "Running on the headless server platform"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:54
msgid "**debug**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:54
msgid "Running on a debug build (including the editor)"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:56
msgid "**release**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:56
msgid "Running on a release build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:58
msgid "**editor**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:58
msgid "Running on an editor build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:60
msgid "**standalone**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:60
msgid "Running on a non-editor build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:62
msgid "**64**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:62
msgid "Running on a 64-bit build (any architecture)"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:64
msgid "**32**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:64
msgid "Running on a 32-bit build (any architecture)"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:66
msgid "**x86_64**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:66
msgid "Running on a 64-bit x86 build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:68
msgid "**x86**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:68
msgid "Running on a 32-bit x86 build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:70
msgid "**arm64**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:70
msgid "Running on a 64-bit ARM build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:72
msgid "**arm**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:72
msgid "Running on a 32-bit ARM build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:74
msgid "**mobile**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:74
msgid "Host OS is a mobile platform"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:76
msgid "**pc**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:76
msgid "Host OS is a PC platform (desktop/laptop)"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:78
msgid "**web**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:78
msgid "Host OS is a Web browser"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:80
msgid "**etc**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:80
msgid "Textures using ETC1 compression are supported"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:82
msgid "**etc2**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:82
msgid "Textures using ETC2 compression are supported"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:84
msgid "**s3tc**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:84
msgid "Textures using S3TC (DXT/BC) compression are supported"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:86
msgid "**pvrtc**"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:86
msgid "Textures using PVRTC compression are supported"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:91
msgid ""
"With the exception of texture compression feature tags, default feature tags "
"are **immutable**. This means that they will *not* change depending on run-"
"time conditions. For example, ``OS.has_feature(\"mobile\")`` will return "
"``false`` when running a project exported to HTML5 on a mobile device."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:96
msgid ""
"To check whether a project exported to HTML5 is running on a mobile device, :"
"ref:`call JavaScript code <doc_javascript_eval>` that reads the browser's "
"user agent."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:101
msgid "Custom features"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:103
msgid ""
"It is possible to add custom features to a build; use the relevant field in "
"the *export preset* used to generate it:"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:110
msgid ""
"Custom feature tags are only used when running the exported project "
"(including with :ref:`doc_one-click_deploy`). They are **not used** when "
"running the project from the editor, even if the export preset marked as "
"**Runnable** for your current platform has custom feature tags defined."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:116
msgid "Overriding project settings"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:118
msgid ""
"Features can be used to override specific configuration values in the "
"*Project Settings*. This allows you to better customize any configuration "
"when doing a build."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:121
msgid ""
"In the following example, a different icon is added for the demo build of "
"the game (which was customized in a special export preset, which, in turn, "
"includes only demo levels)."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:126
msgid "After overriding, a new field is added for this specific configuration:"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:132
msgid ""
"When using the :ref:`project settings \"override.cfg\" functionality "
"<class_ProjectSettings>` (which is unrelated to feature tags), remember that "
"feature tags still apply. Therefore, make sure to *also* override the "
"setting with the desired feature tag(s) if you want them to override base "
"project settings on all platforms and configurations."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:140
msgid "Default overrides"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:142
msgid ""
"There are already a lot of settings that come with overrides by default; "
"they can be found in many sections of the project settings."
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:148
msgid "Customizing the build"
msgstr ""

#: ../../docs/tutorials/export/feature_tags.rst:150
msgid ""
"Feature tags can be used to customize a build process too, by writing a "
"custom **ExportPlugin**. They are also used to specify which shared library "
"is loaded and exported in **GDNative**."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_linux.rst:4
msgid "Exporting for Linux"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_linux.rst:8
msgid ""
"This page describes how to export a Godot project to Linux. If you're "
"looking to compile editor or export template binaries from source instead, "
"read :ref:`doc_compiling_for_x11`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_linux.rst:12
msgid ""
"The simplest way to distribute a game for PC is to copy the executable "
"(``godot``), compress the folder and send it to someone else. However, this "
"is often not desired."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_linux.rst:16
msgid ""
"Godot offers a more elegant approach for PC distribution when using the "
"export system. When exporting for Linux, the exporter takes all the project "
"files and creates a ``data.pck`` file. This file is bundled with a specially "
"optimized binary that is smaller, faster and does not contain the editor and "
"debugger."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:4
msgid "Exporting for macOS"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:8
msgid ""
"This page describes how to export a Godot project to macOS. If you're "
"looking to compile editor or export template binaries from source instead, "
"read :ref:`doc_compiling_for_osx`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:12
msgid ""
"macOS apps are exported as an ``.app`` bundle, a folder with a specific "
"structure which stores the executable, libraries and all the project files. "
"This bundle can be exported as is, packed in a ZIP archive or DMG disk image "
"(only supported when exporting from a computer running macOS)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:18
msgid ""
"To enable code signing with Apple Developer ID and notarization, you must "
"export from a computer running macOS with Xcode command line tools installed."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:19
msgid ""
"Ad-hoc code signing is supported on all platforms, without additional tools."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:20
#: ../../docs/tutorials/export/exporting_for_windows.rst:25
msgid ""
"Download the Godot export templates. Use the Godot menu: ``Editor > Manage "
"Export Templates``."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:21
msgid ""
"A valid and unique ``Bundle identifier`` should be set in the "
"``Application`` section of the export options."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:25
msgid ""
"Projects exported without code signing and notarization will be blocked by "
"Gatekeeper if they are downloaded from unknown sources, see the :ref:"
"`Running Godot apps on macOS <doc_running_on_macos>` page for more "
"information."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:28
msgid "Code signing and notarization"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:30
msgid ""
"By default, macOS will run only applications that are signed and notarized. "
"If you use any other signing configuration, see :ref:`Running Godot apps on "
"macOS <doc_running_on_macos>` for workarounds."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:32
msgid ""
"To notarize an app, you **must** have a valid `Apple Developer ID "
"Certificate <https://developer.apple.com/>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:35
msgid "If you have an Apple Developer ID Certificate"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:37
msgid ""
"Export your project from a computer running macOS with Xcode command line "
"tools installed."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:38
msgid ""
"Enable ``Code Signing``, ``Notarization``, ``Hardened Runtime`` and "
"``Timestamp`` and disable the ``Debug`` entitlement."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:39
msgid "Provide valid Apple ID credentials and certificate identity."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:41
msgid ""
"If ``Notarization`` is enabled, Godot will automatically upload the exported "
"project for notarization."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:43
msgid ""
"You can use the ``xcrun notarytool history`` command to check notarization "
"status and use the ``xcrun notarytool log {ID}`` command to download the "
"notarization log."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:45
msgid ""
"If you encounter notarization issues, see `Resolving common notarization "
"issues <https://developer.apple.com/documentation/security/"
"notarizing_macos_software_before_distribution/"
"resolving_common_notarization_issues>`__ for more info."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:47
msgid ""
"After notarization is completed, `staple the ticket <https://developer.apple."
"com/documentation/security/notarizing_macos_software_before_distribution/"
"customizing_the_notarization_workflow>`__ to the exported project."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:50
msgid "If you do not have an Apple Developer ID Certificate"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:52
msgid ""
"Keep ``Code Signing`` enabled and leave the ``Identity`` option empty (when "
"exporting from a computer running macOS, on other platforms this option is "
"hidden). In this case Godot will use a ad-hoc signature, which will make "
"running an exported app easier for the end users, see the :ref:`Running "
"Godot apps on macOS <doc_running_on_macos>` page for more information."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:56
msgid "Signing Options"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:59
#: ../../docs/tutorials/export/exporting_for_macos.rst:85
msgid "Option"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:61
#: ../../docs/tutorials/export/exporting_for_macos.rst:87
#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:55
msgid "Enable"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:61
msgid "Enables code signing."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:63
msgid "Identity"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:63
msgid ""
"The \"Full Name\" or \"Common Name\" of the signing identity, store in the "
"macOS keychain. [1]_ [2]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:65
msgid "Timestamp"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:65
msgid ""
"Requests a timestamp server to authenticate the time of signing. Required "
"for notarization. [2]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:67
msgid "Hardened Runtime"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:67
msgid "Enables \"Hardened Runtime\". Required for notarization. [2]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:69
msgid "Replace Existing Signature"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:69
msgid ""
"Replaces existing signatures of the GDNative libraries and embedded helper "
"executables."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:74
msgid ""
"To notarize an app, you must enable the ``Hardened Runtime`` and "
"``Timestamp``."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:76
msgid ""
"The ``Hardened Runtime`` and ``Timestamp`` options are incompatible with ad-"
"hoc signing and will be ignored."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:78
msgid "Leave ``Identity`` option empty to use ad-hoc signature."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:79
msgid ""
"This option is visible only when exporting from a computer running macOS."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:82
msgid "Notarization Options"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:87
msgid "Enables automatic upload for notarization."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:89
msgid "Apple ID Name"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:89
msgid "Apple ID account name (email address)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:91
msgid "Apple ID Password"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:91
msgid ""
"Apple ID app-specific password. See `Using app-specific passwords <https://"
"support.apple.com/en-us/HT204397>`__ to enable two-factor authentication and "
"create app password."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:93
msgid "Apple Team ID"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:93
msgid "Team ID, if your Apple ID belongs to multiple teams"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:96
msgid ""
"See `Notarizing macOS Software Before Distribution <https://developer.apple."
"com/documentation/security/notarizing_macos_software_before_distribution?"
"language=objc>`__ for more info."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:100
msgid ""
"Notarization is supported when exporting from a computer running macOS, "
"these options are hidden on other platforms."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:103
msgid "Entitlements"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:106
msgid "Hardened Runtime Entitlements"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:108
msgid ""
"Hardened Runtime entitlements manage security options and resource access "
"policy. See `Hardened Runtime <https://developer.apple.com/documentation/"
"security/hardened_runtime?language=objc>`__ for more info."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:112
#: ../../docs/tutorials/export/exporting_for_macos.rst:155
msgid "Entitlement"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:114
msgid "Allow JIT Code Execution [3]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:114
msgid ""
"Allows creating writable and executable memory for JIT code. If you are "
"using add-ons with dynamic or self-modifying native code, enable them "
"according to the add-on documentation."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:116
msgid "Allow Unsigned Executable Memory [3]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:116
msgid ""
"Allows creating writable and executable memory without JIT restrictions. If "
"you are using add-ons with dynamic or self-modifying native code, enable "
"them according to the add-on documentation."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:118
msgid "Allow DYLD Environment Variables [3]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:118
msgid ""
"Allows app to uss dynamic linker environment variables to inject code.  f "
"you are using add-ons with dynamic or self-modifying native code, enable "
"them according to the add-on documentation."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:120
msgid "Disable Library Validation"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:120
msgid ""
"Allows app to load arbitrary libraries and frameworks. Enabled it if you are "
"using GDNative add-ons and ad-hoc signature, or want to support user-"
"provided external add-ons."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:122
msgid "Audio Input"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:122
msgid ""
"Enable if you need to use the microphone or other audio input sources, if "
"it's enabled you should also provide usage message in the `privacy/"
"microphone_usage_description` option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:124
msgid "Camera"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:124
msgid ""
"Enable if you need to use the camera, if it's enabled you should also "
"provide usage message in the `privacy/camera_usage_description` option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:126
msgid ""
"Enable if you need to use location information from Location Services, if "
"it's enabled you should also provide usage message in the `privacy/"
"location_usage_description` option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:128
msgid "Address Book"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:128
msgid ""
"[4]_ Enable to allow access contacts in the user's address book, if it's "
"enabled you should also provide usage message in the `privacy/"
"address_book_usage_description` option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:130
msgid "Calendars"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:130
msgid ""
"[4]_ Enable to allow access to the user's calendar, if it's enabled you "
"should also provide usage message in the `privacy/"
"calendar_usage_description` option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:132
msgid "Photo Library"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:132
msgid ""
"[4]_ Enable to allow access to the user's Photos library, if it's enabled "
"you should also provide usage message in the `privacy/"
"photos_library_usage_description` option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:134
msgid "Apple Events"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:134
msgid "[4]_ Enable to allow app to send Apple events to other apps."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:136
msgid ""
"[5]_ You can temporarily enable this entitlement to use native debugger "
"(GDB, LLDB) with the exported app. This entitlement should be disabled for "
"production export."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:139
msgid ""
"The ``Allow JIT Code Execution``, ``Allow Unsigned Executable Memory`` and "
"``Allow DYLD Environment Variables`` entitlements are always enabled for the "
"Godot Mono exports, and are not visible in the export options."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:140
msgid ""
"These features aren't supported by Godot out of the box, enable them only if "
"you are using add-ons which require them."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:141
msgid "To notarize an app, you must disable the ``Debugging`` entitlement."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:144
msgid "App Sandbox Entitlement"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:146
msgid ""
"The App Sandbox restricts access to user data, networking and devices. "
"Sandboxed apps can't access most of the file system, can't use custom file "
"dialogs and execute binaries (using ``OS.execute`` and ``OS."
"create_process``) outside the ``.app`` bundle. See `App Sandbox <https://"
"developer.apple.com/documentation/security/app_sandbox?language=objc>`__ for "
"more info."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:152
msgid ""
"To distribute an app through the App Store, you must enable the App Sandbox."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:157
msgid "Enabled"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:157
msgid "Enables App Sandbox."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:159
msgid "Network Server"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:159
msgid "Enable to allow app to listen for incoming network connections."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:161
msgid "Network Client"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:161
msgid "Enable to allow app to establish outgoing network connections."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:163
msgid "Device USB"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:163
msgid ""
"Enable to allow app to interact with USB devices. This entitlement is "
"required to use wired controllers."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:165
msgid "Device Bluetooth"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:165
msgid ""
"Enable to allow app to interact with Bluetooth devices. This entitlement is "
"required to use wireless controllers."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:167
msgid "Files Downloads [6]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:167
msgid "Allows read or write access to the user's \"Downloads\" folder."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:169
msgid "Files Pictures [6]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:169
msgid "Allows read or write access to the user's \"Pictures\" folder."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:171
msgid "Files Music [6]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:171
msgid "Allows read or write access to the user's \"Music\" folder."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:173
msgid "Files Movies [6]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:173
msgid "Allows read or write access to the user's \"Movies\" folder."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:175
msgid "Files User Selected [6]_"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:175
msgid ""
"Allows read or write access to arbitrary folder. To gain access, a folder "
"must be selected from the native file dialog by the user."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:177
msgid "Helper Executable"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:177
msgid ""
"List of helper executables to embedded to the app bundle. Sandboxed app are "
"limited to execute only these executable."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:180
msgid ""
"You can optionally provide usage messages for various folders in the "
"`privacy/*_folder_usage_description` options."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_macos.rst:182
msgid ""
"You can override default entitlements by selecting custom entitlements file, "
"in this case all other entitlement are ignored."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:4
msgid "Running Godot apps on macOS"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:8
msgid ""
"This page covers running Godot projects on macOS. If you haven't exported "
"your project yet, read :ref:`doc_exporting_for_macos` first."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:11
msgid ""
"By default, macOS will run only applications that are signed and notarized."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:13
msgid ""
"Depending on the way a macOS app is signed and distributed, the following "
"scenarios are possible:"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:16
msgid "App is signed, notarized and distributed via App Store"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:20
msgid ""
"App developers need to join the Apple Developer Program, and configure "
"signing and notarization options during export, then upload the app to the "
"App Store."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:22
msgid ""
"The app should run out of the box, without extra user interaction required."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:25
msgid "App is signed, notarized and distributed outside App Store"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:29
msgid ""
"App developers need to join the Apple Developer Program, and configure "
"signing and notarization options during export, then distribute the app as "
"\".DMG\" or \".ZIP\" archive."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:31
#: ../../docs/tutorials/export/running_on_macos.rst:52
#: ../../docs/tutorials/export/running_on_macos.rst:79
#: ../../docs/tutorials/export/running_on_macos.rst:100
msgid ""
"When you run the app for the first time, the following dialog is displayed:"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:35
msgid "Click ``Open`` to start the app."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:37
msgid ""
"If you see the following warning dialog, your Mac is set up to allow apps "
"only from the App Store."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:41
msgid ""
"To allow third-party apps, open ``System Preferences``, click ``Security & "
"Privacy``, then click ``General``, unlock settings, and select ``App Store "
"and identified developers``."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:46
msgid "App is signed (including ad-hoc signatures) but not notarized"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:50
msgid ""
"App developer used self-signed certificate or ad-hoc signing (default Godot "
"behavior for exported project)."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:56
msgid "To run this app, you can temporarily override Gatekeeper:"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:58
msgid ""
"Either open ``System Preferences``, click ``Security & Privacy``, then click "
"``General``, and click ``Open Anyway``."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:62
msgid ""
"Or, right-click (Control-click) on the app icon in the Finder window and "
"select ``Open`` from the menu."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:66
msgid "Then click ``Open`` in the confirmation dialog."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:70
msgid "Enter your password if you're prompted."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:73
msgid "App is not-signed, executable is linker-signed"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:77
msgid "App is built using official export templates, but it is not signed."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:83
msgid ""
"To run this app, you should remove the quarantine extended file attribute "
"manually:"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:85
#: ../../docs/tutorials/export/running_on_macos.rst:108
msgid "Open ``Terminal.app`` (press ``Cmd + Space``, and enter ``Terminal``)."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:87
#: ../../docs/tutorials/export/running_on_macos.rst:110
msgid "Navigate to the folder containing the target application."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:89
#: ../../docs/tutorials/export/running_on_macos.rst:112
msgid ""
"Use the ``cd path_to_the_app_folder`` command, e.g. ``cd ~/Downloads/`` if "
"it's in the ``Downloads`` folder."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:91
msgid ""
"Run the command ``xattr -dr com.apple.quarantine \"Unsigned Game.app\"`` "
"(including quotation marks and ``.app`` extension)."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:94
msgid ""
"Neither app nor executable is signed (relevant for Apple Silicon macs only)"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:98
msgid ""
"App is built using custom export templates, compiled using OSXCross, and it "
"is not signed at all."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:104
msgid "To run this app, you can ad-hoc sign it yourself:"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:106
msgid ""
"Install ``Xcode`` for the App Store, start it and confirm command line tools "
"installation."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:114
msgid "Run the following commands:"
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:116
msgid ""
"``xattr -dr com.apple.quarantine \"Unsigned Game.app\"`` (including "
"quotation marks and \".app\" extension)."
msgstr ""

#: ../../docs/tutorials/export/running_on_macos.rst:118
msgid ""
"``codesign -s - --force --deep \"Unsigned Game.app\"`` (including quotation "
"marks and \".app\" extension)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:4
msgid "Exporting for Windows"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:8
msgid ""
"This page describes how to export a Godot project to Windows. If you're "
"looking to compile editor or export template binaries from source instead, "
"read :ref:`doc_compiling_for_windows`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:12
msgid ""
"The simplest way to distribute a game for PC is to copy the executable "
"(``godot.exe``), compress the folder and send it to someone else. However, "
"this is often not desired."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:16
msgid ""
"Godot offers a more elegant approach for PC distribution when using the "
"export system. When exporting for Windows, the exporter takes all the "
"project files and creates a ``data.pck`` file. This file is bundled with a "
"specially optimized binary that is smaller, faster and does not contain the "
"editor and debugger."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:24
msgid ""
"To enable code signing, you must have the ``Windows 10 SDK`` (on Windows) or "
"`osslsigncode <https://github.com/mtrojnar/osslsigncode>`__ (on any other "
"OS) installed."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:29
msgid ""
"If you export for Windows with embedded PCK files, you will not be able to "
"sign the program as it will break."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_windows.rst:32
msgid ""
"On Windows, PCK embedding is also known to cause false positives in "
"antivirus programs. Therefore, it's recommended to avoid using it unless "
"you're distributing your project via Steam as it bypasses code signing and "
"antivirus checks."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:4
msgid "Changing application icon for Windows"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:6
msgid ""
"By default, the exported project's icon will be the Godot icon. You will "
"most likely want to change that for your project. There are two types of "
"icons that can be changed on Windows: the file icon and the taskbar icon."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:11
msgid "Creating an ICO file"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:13
msgid ""
"Windows does not use formats such as png or jpg for application icons. "
"Instead, it uses a Windows-only format called ICO. You can create your "
"application icon in any program but you will have to convert it to an ICO "
"file using a program such as GIMP."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:18
msgid ""
"`This video tutorial <https://www.youtube.com/watch?v=uqV3UfM-n5Y>`_ goes "
"over how to export an ICO file with GIMP."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:21
msgid ""
"It is also possible to convert a PNG image to an hiDPI-friendly ICO file "
"using this `ImageMagick <https://www.imagemagick.org/>`_ command:"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:28
msgid ""
"Depending on which version of ImageMagick you installed, you might need to "
"leave out the ``magick`` and run this command instead:"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:36
msgid ""
"For the ICO file to effectively replace the default Godot icon, it must "
"contain *all* the sizes included in the default Godot icon: 16×16, 32×32, "
"48×48, 64×64, 128×128, 256×256. If the ICO file does not contain all the "
"sizes, the default Godot icon will be kept for the sizes that weren't "
"overridden."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:41
msgid "The above ImageMagick command takes this into account."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:44
msgid "Changing the taskbar icon"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:46
msgid ""
"The taskbar icon is the icon that shows up on the taskbar when your project "
"is running."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:51
msgid ""
"To change the taskbar icon, go to **Project → Project Settings → Application "
"→ Config → Windows Native Icon**. Click on the folder icon and select your "
"ICO file."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:57
msgid ""
"This setting only changes the icon for your exported game on Windows. To set "
"the icon for macOS, use ``Macos Native Icon``. And for any other platform, "
"use the ``Icon`` setting."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:62
msgid "Changing the file icon"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:64
msgid ""
"In Godot 3.5 and later, you can change the file icon without external tools "
"using `godoticon <https://github.com/pkowal1982/godoticon>`__. Changing the "
"file icon this way should work for executables containing an embedded PCK."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:71
msgid ""
"There are `known issues <https://github.com/godotengine/godot/"
"issues/33466>`__ when changing the application icon in executables that "
"embed a PCK file. It's recommended to avoid using rcedit for now if you "
"choose to enable the **Embed Pck** option for your Windows export preset in "
"the Export dialog."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:76
msgid ""
"The file icon is the icon of the executable that you click on to start the "
"project."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:81
msgid ""
"Before selecting it in the export options, you will need to install an extra "
"tool called **rcedit**. You can download it `here <https://github.com/"
"electron/rcedit/releases>`_."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:85
msgid ""
"After downloading, you need to tell Godot the path to the rcedit executable "
"on your computer. Go to **Editor → Editor Settings → Export → Windows**. "
"Click on the folder icon for the **rcedit** entry. Navigate to and select "
"the rcedit executable."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:93
msgid ""
"Linux and macOS users will also need to install `WINE <https://www.winehq."
"org/>`_ to use rcedit."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:98
msgid ""
"You should now have everything in place to change the file icon. To do that, "
"you will need to specify the icon when exporting. Go to **Project → "
"Export**. Assuming you have already created a Windows Desktop preset, select "
"your icon in ICO format in the **Application → Icon** field."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:108
msgid ""
"If rcedit fails to change the icon, you can instead :ref:`compile your own "
"Windows export templates <doc_compiling_for_windows>` with the icon changed. "
"To do so, replace `platform/windows/godot.ico <https://github.com/"
"godotengine/godot/blob/master/platform/windows/godot.ico>`__ with your own "
"ICO file *before* compiling export templates."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:114
msgid ""
"Once this is done, you can specify your export templates as custom export "
"templates in your project's Windows export preset."
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:118
msgid "Testing the result"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:120
msgid ""
"You can now export the project. If it worked correctly, you should see this:"
msgstr ""

#: ../../docs/tutorials/export/changing_application_icon_for_windows.rst:126
msgid ""
"If your icon isn't showing up properly, on Windows 10, try clearing the icon "
"cache. To do so, open the **Run** dialog and enter ``ie4uinit.exe -"
"ClearIconCache`` or ``ie4uinit.exe -show``."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:4
msgid "Exporting for Universal Windows Platform"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:8
msgid ""
"This page describes how to export a Godot project to UWP. If you're looking "
"to compile export template binaries from source instead, read :ref:"
"`doc_compiling_for_uwp`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:12
msgid ""
"There's no extra requirement to export an ``.appx`` package that can be "
"installed as a Windows App or submitted to the Windows Store. Exporting UWP "
"packages also works from any platform, not only from Windows."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:16
msgid ""
"However, if you want to install and run the app, you need to sign it with a "
"trusted signature. Godot supports automatic signing of packages with "
"external tools."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:20
msgid ""
"Also, make sure the Publisher Name you set when exporting the package "
"matches the name used on the certificate."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:24
msgid "Limitations on Xbox One"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:26
msgid ""
"As described in the `UWP documentation <https://docs.microsoft.com/en-us/"
"windows/uwp/xbox-apps/system-resource-allocation>`__:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:31
msgid "Submitted as an \"App\""
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:29
msgid "available memory is 1GB"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:30
msgid "share of 2-4 CPU cores"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:31
msgid "shared access of GPU power (45%)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:36
msgid ""
"Submitted as a \"Game\" (through `Xbox Live Creators Program <https://www."
"xbox.com/en-US/developers/creators-program>`__)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:34
msgid "available memory is 5GB"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:35
msgid "4 exclusive CPU cores and 2 shared CPU cores"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:36
msgid "exclusive access to GPU power (100%)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:38
msgid ""
"Exceeding these memory limitations will cause allocation failures and the "
"application will crash."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:41
msgid "Creating a signing certificate"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:43
msgid ""
"This requires the ``MakeCert.exe`` and ``Pvk2Pfx.exe`` tools, which come "
"with the Windows SDK. If you use Visual Studio, you can open one of its "
"Developer Prompts, since it comes with these tools and they can be located "
"in the path."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:47
msgid ""
"You can get more detailed instructions from `Microsoft's documentation "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85)."
"aspx>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:50
msgid "First, run ``MakeCert`` to create a private key::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:54
msgid ""
"Where ``publisherName`` matches the Publisher Name of your package and "
"``expirationDate`` is in the ``mm/dd/yyyy`` format."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:57
msgid ""
"Next, create a Personal Information Exchange (.pfx) file using ``Pvk2Pfx."
"exe``::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:61
msgid ""
"If you don't specify a password with ``/po`` argument, the PFX will have the "
"same password as the private key."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:64
msgid ""
"You will also need to trust this certificate in order to be able to install "
"your app. Open the Command Prompt as Administrator and run the following "
"command::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:70
msgid "Setting up automatic signing"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:72
msgid ""
"To setup automatic signing on export you need to go to Editor Settings > "
"Export > Uwp. From there you need to click on the folder for ``Signtool``, "
"and navigate to the ``SignTool.exe`` file on your computer."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:78
msgid ""
"After setting that up close the editor settings, go to Project > Export, and "
"select the UWP preset. Under the ``Signing`` options click on the folder "
"next to ``Certificate`` and go to the certificate file. Then enter the "
"pfxPassword in the password field."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:85
msgid "Your project will now be automatically signed on export."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:87
msgid ""
"If you want to sign an exported app manually run ``SignTool.exe`` and use "
"the following command."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:90
msgid "SignTool sign /fd SHA256 /a /f MyKey.pfx /p pfxPassword package.appx"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:93
msgid "Installing the package"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:95
msgid ""
"As of the Windows 10 Anniversary Update, you are able to install packages "
"simply by double clicking the ``.appx`` file from Windows Explorer."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:98
msgid ""
"It's also possible to install by using the ``Add-AppxPackage`` PowerShell "
"cmdlet."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_uwp.rst:100
msgid ""
"If you want to update your already installed app, you must update the "
"version number on the new package or first uninstall the previous package."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:4
msgid "Exporting for iOS"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:8
msgid ""
"This page describes how to export a Godot project to iOS. If you're looking "
"to compile export template binaries from source instead, read :ref:"
"`doc_compiling_for_ios`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:12
msgid ""
"These are the steps to load a Godot project in Xcode. This allows you to "
"build and deploy to an iOS device, build a release for the App Store, and do "
"everything else you can normally do with Xcode."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:19
msgid ""
"You must export for iOS from a computer running macOS with Xcode installed."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:20
msgid ""
"Download the Godot export templates. Use the Godot menu: Editor > Manage "
"Export Templates"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:23
msgid "Export a Godot project to Xcode"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:25
msgid ""
"In the Godot editor, open the **Export** window from the **Project** menu. "
"When the Export window opens, click **Add..** and select **iOS**."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:28
msgid ""
"The **App Store Team ID** and (Bundle) **Identifier** options in the "
"**Application** category are required. Leaving them blank will cause the "
"exporter to throw an error."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:31
msgid ""
"After you click **Export Project**, there are still two important options "
"left:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:33
msgid ""
"**Path** is an empty folder that will contain the exported Xcode project "
"files."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:34
msgid ""
"**File** will be the name of the Xcode project and several project specific "
"files and directories."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:38
msgid ""
"This tutorial uses **exported_xcode_project_name**, but you will use your "
"project's name. When you see **exported_xcode_project_name** in the "
"following steps, replace it with the name you used instead."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:42
msgid ""
"Avoid using spaces when you choose your **exported_xcode_project_name** as "
"this can lead to corruption in your XCode project file."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:45
msgid "When the export completes, the output folder should look like this:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:49
msgid ""
"Opening **exported_xcode_project_name.xcodeproj** lets you build and deploy "
"like any other iOS app."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:53
msgid "Active development considerations"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:55
msgid ""
"The above method creates an exported project that you can build for release, "
"but you have to re-export every time you make a change in Godot."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:58
msgid ""
"While developing, you can speed this process up by linking your Godot "
"project files directly into your app."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:61
msgid "In the following example:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:63
msgid ""
"**exported_xcode_project_name** is the name of the exported iOS application "
"(as above)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:64
msgid "**godot_project_to_export** is the name of the Godot project."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:66
msgid ""
"**godot_project_to_export** must not be the same as "
"**exported_xcode_project_name** to prevent signing issues in Xcode."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:70
msgid "Steps to link a Godot project folder to Xcode"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:72
msgid "Start from an exported iOS project (follow the steps above)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:73
msgid "In Finder, drag the Godot project folder into the Xcode file browser."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:77
msgid ""
"3. In the dialog, make sure **Create folder references** is selected. This "
"means you will be able to continue to edit your Godot project in its current "
"location."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:82
msgid "See the **godot_project_to_export** folder in the Xcode file browser."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:83
msgid "Delete **exported_xcode_project_name.pck** from the Xcode project."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:87
msgid ""
"6. Open **exported_xcode_project_name-Info.plist** and add a string property "
"named **godot_path** (this is the real key name) with a value "
"**godot_project_to_export** (this is the name of your project)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:93
msgid ""
"That's it! You can now edit your project in the Godot editor and build it in "
"Xcode when you want to run it on a device."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:97
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:4
msgid "Plugins for iOS"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:99
msgid ""
"Special iOS plugins can be used in Godot. Check out the :ref:"
"`doc_plugins_for_ios` page."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:103
#: ../../docs/tutorials/export/exporting_for_android.rst:175
msgid "Troubleshooting rendering issues"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:105
#: ../../docs/tutorials/export/exporting_for_android.rst:177
msgid ""
"To improve out-of-the-box performance on mobile devices, Godot automatically "
"uses low-end-friendly settings by default on both Android and iOS."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_ios.rst:108
#: ../../docs/tutorials/export/exporting_for_android.rst:180
msgid ""
"This can cause rendering issues that do not occur when running the project "
"on a desktop platform. See :ref:`doc_mobile_rendering_limitations` for more "
"information."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:4
msgid "Exporting for Android"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:9
msgid ""
"This page describes how to export a Godot project to Android. If you're "
"looking to compile export template binaries from source instead, read :ref:"
"`doc_compiling_for_android`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:13
msgid ""
"Exporting for Android has fewer requirements than compiling Godot for "
"Android. The following steps detail what is needed to set up the Android SDK "
"and the engine."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:17
msgid "Install OpenJDK 11"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:19
msgid ""
"Download and install  `OpenJDK 11 <https://adoptium.net/?"
"variant=openjdk11>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:22
msgid "Download the Android SDK"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:24
msgid "Download and install the Android SDK."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:26
msgid ""
"You can install it using `Android Studio version 4.1 or later <https://"
"developer.android.com/studio/>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:28
msgid ""
"Run it once to complete the SDK setup using these `instructions <https://"
"developer.android.com/studio/intro/update#sdk-manager>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:29
msgid ""
"Ensure that the `required packages <https://developer.android.com/studio/"
"intro/update#recommended>`__ are installed as well."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:31
msgid "Android SDK Platform-Tools version 30.0.5 or later"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:32
msgid "Android SDK Build-Tools version 30.0.3"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:33
msgid "Android SDK Platform 31"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:34
msgid "Android SDK Command-line Tools (latest)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:35
msgid "CMake version 3.10.2.4988404"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:36
msgid "NDK version r23c (23.2.8568313)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:38
msgid ""
"You can install it using the `command line tools <https://developer.android."
"com/studio/#command-tools>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:40
msgid ""
"Once the command line tools are installed, run the `sdkmanager <https://"
"developer.android.com/studio/command-line/sdkmanager>`__ command to complete "
"the setup process:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:48
msgid ""
"If you are using Linux, **do not use an Android SDK provided by your "
"distribution's repositories as it will often be outdated**."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:53
msgid "Create a debug.keystore"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:55
msgid ""
"Android needs a debug keystore file to install to devices and distribute non-"
"release APKs. If you have used the SDK before and have built projects, ant "
"or eclipse probably generated one for you (in the ``~/.android`` directory "
"on Linux and macOS, in the ``C:\\Users\\<user>\\.android\\`` directory on "
"Windows)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:60
msgid ""
"If you can't find it or need to generate one, the keytool command from the "
"JDK can be used for this purpose::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:65
msgid ""
"This will create a ``debug.keystore`` file in your current directory. You "
"should move it to a memorable location such as ``%USERPROFILE%\\."
"android\\``, because you will need its location in a later step. For more "
"information on ``keytool`` usage, see `this Q&A article <https://godotengine."
"org/qa/21349/jdk-android-file-missing>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:68
msgid "Setting it up in Godot"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:70
msgid ""
"Enter the Editor Settings screen. This screen contains the editor settings "
"for the user account in the computer (it's independent of the project)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:76
msgid "Scroll down to the section where the Android settings are located:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:80
msgid "In that screen, 2 paths need to be set:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:82
msgid ""
"The ``Android Sdk Path`` should be the location where the Android SDK was "
"installed. - For example ``%LOCALAPPDATA%\\Android\\Sdk\\`` on Windows or ``/"
"Users/$USER/Library/Android/sdk/`` on macOS."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:85
msgid ""
"The debug ``.keystore`` file - It can be found in the folder where you put "
"the ``debug.keystore`` file you created above."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:88
msgid "Once that is configured, everything is ready to export to Android!"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:92
msgid ""
"If you get an error saying *\"Could not install to device.\"*, make sure you "
"do not have an application with the same Android package name already "
"installed on the device (but signed with a different key)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:96
msgid ""
"If you have an application with the same Android package name but a "
"different signing key already installed on the device, you **must** remove "
"the application in question from the Android device before exporting to "
"Android again."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:102
msgid "Providing launcher icons"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:104
msgid ""
"Launcher icons are used by Android launcher apps to represent your "
"application to users. Godot only requires high-resolution icons (for "
"``xxxhdpi`` density screens) and will automatically generate lower-"
"resolution variants."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:106
msgid "There are two types of icons required by Godot:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:108
msgid ""
"**Main Icon:** The \"classic\" icon. This will be used on all Android "
"versions up to Android 8 (Oreo), exclusive. Must be at least 192×192 px."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:109
msgid ""
"**Adaptive Icons:** Starting from Android 8 (inclusive), `Adaptive Icons "
"<https://developer.android.com/guide/practices/ui_guidelines/"
"icon_design_adaptive>`_ were introduced. Applications will need to include "
"separate background and foreground icons to have a native look. The user's "
"launcher application will control the icon's animation and masking. Must be "
"at least 432×432 px."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:111
msgid ""
"It's important to adhere to some rules when designing adaptive icons. "
"`Google Design has provided a nice article <https://medium.com/google-design/"
"designing-adaptive-icons-515af294c783>`_ that helps to understand those "
"rules and some of the capabilities of adaptive icons."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:113
msgid ""
"The most important adaptive icon design rule is to have your icon critical "
"elements inside the safe zone: a centered circle with a diameter of 66dp "
"(264 pixels on ``xxxhdpi``) to avoid being clipped by the launcher."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:115
msgid ""
"If you don't provide some of the requested icons, Godot will replace them "
"using a fallback chain, trying the next in line when the current one fails:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:117
msgid ""
"**Main Icon:** Provided main icon -> Project icon -> Default Godot main icon."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:118
msgid ""
"**Adaptive Icon Foreground:** Provided foreground icon -> Provided main icon "
"-> Project icon -> Default Godot foreground icon."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:119
msgid ""
"**Adaptive Icon Background:** Provided background icon -> Default Godot "
"background icon."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:121
msgid ""
"It's highly recommended to provide all the requested icons with their "
"specified resolutions. This way, your application will look great on all "
"Android devices and versions."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:125
msgid "Exporting for Google Play Store"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:127
msgid ""
"Uploading an APK to Google's Play Store requires you to sign using a non-"
"debug keystore file; such file can be generated like this:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:134
msgid ""
"This keystore and key are used to verify your developer identity, remember "
"the password and keep it in a safe place! Use Google's Android Developer "
"guides to learn more about `APK signing <https://developer.android.com/"
"studio/publish/app-signing>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:137
msgid "Now fill in the following forms in your Android Export Presets:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:141
msgid "**Release:** Enter the path to the keystore file you just generated."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:142
msgid "**Release User:** Replace with the key alias."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:143
msgid ""
"**Release Password:** Key password. Note that the keystore password and the "
"key password currently have to be the same."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:145
msgid ""
"**Your export_presets.cfg file now contains sensitive information.** If you "
"use a version control system, you should remove it from public repositories "
"and add it to your ``.gitignore`` file or equivalent."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:149
msgid ""
"Don't forget to uncheck the **Export With Debug** checkbox while exporting."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:154
msgid "Optimizing the APK size"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:156
msgid ""
"By default, the APK will contain native libraries for both ARMv7 and ARMv8 "
"architectures. This increases its size significantly. To create a smaller "
"APK, uncheck either **Armeabi-v 7a** or **Arm 64 -v 8a** in your project's "
"Android export preset. This will create an APK that only contains a library "
"for a single architecture. Note that applications targeting ARMv7 can also "
"run on ARMv8 devices, but the opposite is not true."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:163
msgid ""
"Since August 2019, Google Play requires all applications to be available in "
"64-bit form. This means you cannot upload an APK that contains *just* an "
"ARMv7 library. To solve this, you can upload several APKs to Google Play "
"using its `Multiple APK support <https://developer.android.com/google/play/"
"publishing/multiple-apks>`__. Each APK should target a single architecture; "
"creating an APK for ARMv7 and ARMv8 is usually sufficient to cover most "
"devices in use today."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_android.rst:170
msgid ""
"You can optimize the size further by compiling an Android export template "
"with only the features you need. See :ref:`doc_optimizing_for_size` for more "
"information."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:4
msgid "Custom builds for Android"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:6
msgid ""
"Godot provides the option to use custom build Android templates. Instead of "
"using the already pre-built template that ships with Godot, an actual "
"Android Java project gets installed into your project folder. Godot will "
"then build it and use it as an export template every time you export the "
"project."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:11
msgid "There are some reasons why you may want to do this:"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:13
msgid "Modify the project before it's built."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:14
msgid "Add external SDKs that build with your project."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:16
msgid ""
"Configuring the custom build is a fairly straightforward process. But first "
"you need to follow the steps in :ref:`exporting for "
"android<doc_exporting_for_android>` up to **Setting it up in Godot**. After "
"doing that, follow the steps below."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:21
msgid "Set up the custom build environment"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:23
msgid "Go to the Project menu, and install the *Custom Build* template:"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:27
msgid ""
"Make sure export templates are downloaded. If not, this menu will help you "
"download them."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:30
msgid ""
"A Gradle-based Android project will be created under ``res://android/"
"build``. Editing these files is not needed unless you want to :ref:`create "
"your own add-ons<doc_android_plugin>`, or you really need to modify the "
"project."
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:36
msgid "Enabling the custom build and exporting"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:38
msgid ""
"When setting up the Android project in the **Project > Export** dialog, "
"**Custom Build** needs to be enabled:"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:43
msgid ""
"From now on, attempting to export the project or one-click deploy will call "
"the `Gradle <https://gradle.org/>`__ build system to generate fresh "
"templates (this window will appear every time):"
msgstr ""

#: ../../docs/tutorials/export/android_custom_build.rst:49
msgid ""
"The templates built will be used automatically afterwards, so no further "
"configuration is needed."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:4
msgid "Exporting for the Web"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:8
msgid ""
"This page describes how to export a Godot project to HTML5. If you're "
"looking to compile editor or export template binaries from source instead, "
"read :ref:`doc_compiling_for_web`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:12
msgid ""
"HTML5 export allows publishing games made in Godot Engine to the browser. "
"This requires support for `WebAssembly <https://webassembly.org/>`__ and "
"`WebGL <https://www.khronos.org/webgl/>`__ in the user's browser."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:17
msgid ""
"Use the browser-integrated developer console, usually opened with :kbd:"
"`F12`, to view **debug information** like JavaScript, engine, and WebGL "
"errors."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:21
msgid ""
"`There are significant bugs when running HTML5 projects on iOS <https://"
"github.com/godotengine/godot/issues?q=is:issue+is:open+label:platform:"
"html5+ios>`__ (regardless of the browser). We recommend using :ref:`iOS' "
"native export functionality <doc_exporting_for_ios>` instead, as it will "
"also result in better performance."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:28
msgid "WebGL version"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:30
msgid ""
"Depending on your choice of renderer, Godot can target WebGL 1.0 (*GLES2*) "
"or WebGL 2.0 (*GLES3*)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:33
msgid ""
"WebGL 1.0 is the recommended option if you want your project to be supported "
"on all browsers with the best performance."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:36
msgid ""
"Godot's GLES3 renderer targets high end devices, and the performance using "
"WebGL 2.0 can be subpar. Some features are also not supported in WebGL 2.0 "
"specifically."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:40
msgid ""
"Additionally, while most browsers support WebGL 2.0, this is not yet the "
"case for **Safari**. WebGL 2.0 support is coming in Safari 15 for macOS, and "
"is not available yet for any **iOS** browser (all WebKit-based like Safari). "
"See `Can I use WebGL 2.0 <https://caniuse.com/webgl2>`__ for details."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:48
msgid "Export options"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:50
msgid ""
"If a runnable web export template is available, a button appears between the "
"*Stop scene* and *Play edited Scene* buttons in the editor to quickly open "
"the game in the default browser for testing."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:54
msgid ""
"You can choose the **Export Type** to select which features will be "
"available:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:56
msgid ""
"*Regular*: is the most compatible across browsers, will not support threads, "
"nor GDNative."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:58
msgid ""
"*Threads*: will require the browser to support `SharedArrayBuffer <https://"
"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/"
"SharedArrayBuffer>`__. See `Can I use SharedArrayBuffer <https://caniuse.com/"
"sharedarraybuffer>`__ for details."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:62
msgid ""
"*GDNative*: enables GDNative support but makes the binary bigger and slower "
"to load."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:65
msgid ""
"If you plan to use :ref:`VRAM compression <doc_import_images>` make sure "
"that **Vram Texture Compression** is enabled for the targeted platforms "
"(enabling both **For Desktop** and **For Mobile** will result in a bigger, "
"but more compatible export)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:70
msgid ""
"If a path to a **Custom HTML shell** file is given, it will be used instead "
"of the default HTML page. See :ref:`doc_customizing_html5_shell`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:73
msgid ""
"**Head Include** is appended into the ``<head>`` element of the generated "
"HTML page. This allows to, for example, load webfonts and third-party "
"JavaScript APIs, include CSS, or run JavaScript code."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:77
msgid ""
"Each project must generate their own HTML file. On export, several text "
"placeholders are replaced in the generated HTML file specifically for the "
"given export options. Any direct modifications to that HTML file will be "
"lost in future exports. To customize the generated file, use the **Custom "
"HTML shell** option."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:84
msgid ""
"**Export types** other than *Regular* are not yet supported by the C# "
"version."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:90
msgid ""
"For security and privacy reasons, many features that work effortlessly on "
"native platforms are more complicated on the web platform. Following is a "
"list of limitations you should be aware of when porting a Godot game to the "
"web."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:96
msgid ""
"Browser vendors are making more and more functionalities only available in "
"`secure contexts <https://developer.mozilla.org/en-US/docs/Web/Security/"
"Secure_Contexts>`_, this means that such features are only be available if "
"the web page is served via a secure HTTPS connection (localhost is usually "
"exempt from such requirement)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:102
msgid ""
"Check the `list of open HTML5 issues on GitHub <https://github.com/"
"godotengine/godot/issues?q=is:open+is:issue+label:platform:html5>`__ to see "
"if the functionality you're interested in has an issue yet. If not, open one "
"to communicate your interest."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:108
msgid "Using cookies for data persistence"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:110
msgid ""
"Users must **allow cookies** (specifically IndexedDB) if persistence of the "
"``user://`` file system is desired. When playing a game presented in an "
"``iframe``, **third-party** cookies must also be enabled. Incognito/private "
"browsing mode also prevents persistence."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:115
msgid ""
"The method ``OS.is_userfs_persistent()`` can be used to check if the "
"``user://`` file system is persistent, but can give false positives in some "
"cases."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:120
msgid "Background processing"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:122
msgid ""
"The project will be paused by the browser when the tab is no longer the "
"active tab in the user's browser. This means functions such as "
"``_process()`` and ``_physics_process()`` will no longer run until the tab "
"is made active again by the user (by switching back to the tab). This can "
"cause networked games to disconnect if the user switches tabs for a long "
"duration."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:128
msgid ""
"This limitation does not apply to unfocused browser *windows*. Therefore, on "
"the user's side, this can be worked around by running the project in a "
"separate *window* instead of a separate tab."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:133
#: ../../docs/tutorials/performance/cpu_optimization.rst:205
#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:7
#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:7
msgid "Threads"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:135
msgid ""
"As mentioned :ref:`above <doc_javascript_export_options>` multi-threading is "
"only available if the appropriate **Export Type** is set and support for it "
"across browsers is still limited."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:139
msgid ""
"Requires a :ref:`secure context <doc_javascript_secure_contexts>`. Browsers "
"also require that the web page is served with specific `cross-origin "
"isolation headers <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/"
"Cross-Origin-Embedder-Policy>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:144
#: ../../docs/tutorials/scripting/gdnative/index.rst:2
msgid "GDNative"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:146
msgid ""
"As mentioned :ref:`above <doc_javascript_export_options>` GDNative is only "
"available if the appropriate **Export Type** is set."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:149
msgid ""
"The export will also copy the required GDNative ``.wasm`` files to the "
"output folder (and must be uploaded to your server along with your game)."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:153
msgid "Full screen and mouse capture"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:155
msgid ""
"Browsers do not allow arbitrarily **entering full screen**. The same goes "
"for **capturing the cursor**. Instead, these actions have to occur as a "
"response to a JavaScript input event. In Godot, this means entering full "
"screen from within a pressed input event callback such as ``_input`` or "
"``_unhandled_input``. Querying the :ref:`class_Input` singleton is not "
"sufficient, the relevant input event must currently be active."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:162
msgid ""
"For the same reason, the full screen project setting doesn't work unless the "
"engine is started from within a valid input event handler. This requires :"
"ref:`customization of the HTML page <doc_customizing_html5_shell>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:169
msgid ""
"Chrome restricts how websites may play audio. It may be necessary for the "
"player to click or tap or press a key to enable audio."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:172
msgid ""
"Google offers additional information about their `Web Audio autoplay "
"policies <https://sites.google.com/a/chromium.org/dev/audio-video/"
"autoplay>`__."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:175
msgid ""
"Access to microphone requires a :ref:`secure context "
"<doc_javascript_secure_contexts>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:181
msgid ""
"Low level networking is not implemented due to lacking support in browsers."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:183
msgid ""
"Currently, only :ref:`HTTP client <doc_http_client_class>`, :ref:`HTTP "
"requests <doc_http_request_class>`, :ref:`WebSocket (client) "
"<doc_websocket>` and :ref:`WebRTC <doc_webrtc>` are supported."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:188
msgid "The HTTP classes also have several restrictions on the HTML5 platform:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:190
msgid "Accessing or changing the ``StreamPeer`` is not possible"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:191
msgid "Threaded/Blocking mode is not available"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:192
msgid ""
"Cannot progress more than once per frame, so polling in a loop will freeze"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:193
msgid "No chunked responses"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:194
msgid "Host verification cannot be disabled"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:195
msgid ""
"Subject to `same-origin policy <https://developer.mozilla.org/en-US/docs/Web/"
"Security/Same-origin_policy>`__"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:198
msgid "Clipboard"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:200
msgid ""
"Clipboard synchronization between engine and the operating system requires a "
"browser supporting the `Clipboard API <https://developer.mozilla.org/en-US/"
"docs/Web/API/Clipboard_API>`__, additionally, due to the API asynchronous "
"nature might not be reliable when accessed from GDScript."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:205
#: ../../docs/tutorials/export/exporting_for_web.rst:216
msgid "Requires a :ref:`secure context <doc_javascript_secure_contexts>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:208
msgid "Gamepads"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:210
msgid ""
"Gamepads will not be detected until one of their button is pressed. Gamepads "
"might have the wrong mapping depending on the browser/OS/gamepad "
"combination, sadly the `Gamepad API <https://developer.mozilla.org/en-US/"
"docs/Web/API/Gamepad_API/Using_the_Gamepad_API>`__ does not provide a "
"reliable way to detect the gamepad information necessary to remap them based "
"on model/vendor/OS due to privacy considerations."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:219
msgid "Boot splash is not displayed"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:221
msgid ""
"The default HTML page does not display the boot splash while loading. "
"However, the image is exported as a PNG file, so :ref:`custom HTML pages "
"<doc_customizing_html5_shell>` can display it."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:226
msgid "Shader language limitations"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:228
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:377
msgid ""
"When exporting a GLES2 project to HTML5, WebGL 1.0 will be used. WebGL 1.0 "
"doesn't support dynamic loops, so shaders using those won't work there."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:232
msgid "Serving the files"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:234
msgid ""
"Exporting for the web generates several files to be served from a web "
"server, including a default HTML page for presentation. A custom HTML file "
"can be used, see :ref:`doc_customizing_html5_shell`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:238
msgid ""
"The generated ``.html`` file can be used as ``DirectoryIndex`` in Apache "
"servers and can be renamed to e.g. ``index.html`` at any time, its name is "
"never depended on by default."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:242
msgid ""
"The HTML page draws the game at maximum size within the browser window. This "
"way it can be inserted into an ``<iframe>`` with the game's size, as is "
"common on most web game hosting sites."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:246
msgid ""
"The other exported files are served as they are, next to the ``.html`` file, "
"names unchanged. The ``.wasm`` file is a binary WebAssembly module "
"implementing the engine. The ``.pck`` file is the Godot main pack containing "
"your game. The ``.js`` file contains start-up code and is used by the ``."
"html`` file to access the engine. The ``.png`` file contains the boot splash "
"image. It is not used in the default HTML page, but is included for :ref:"
"`custom HTML pages <doc_customizing_html5_shell>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:254
msgid ""
"The ``.pck`` file is binary, usually delivered with the MIME-type :mimetype:"
"`application/octet-stream`. The ``.wasm`` file is delivered as :mimetype:"
"`application/wasm`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:258
msgid ""
"Delivering the WebAssembly module (``.wasm``) with a MIME-type other than :"
"mimetype:`application/wasm` can prevent some start-up optimizations."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:262
msgid ""
"Delivering the files with server-side compression is recommended especially "
"for the ``.pck`` and ``.wasm`` files, which are usually large in size. The "
"WebAssembly module compresses particularly well, down to around a quarter of "
"its original size with gzip compression."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:267
msgid "**Hosts that provide on-the-fly compression:** GitHub Pages (gzip)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:269
msgid ""
"**Hosts that don't provide on-the-fly compression:** itch.io, GitLab Pages "
"(`supports manual gzip precompression <https://webd97.de/post/gitlab-pages-"
"compression/>`__)"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:275
msgid "Calling JavaScript from script"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:277
msgid ""
"In web builds, the ``JavaScript`` singleton is implemented. It offers a "
"single method called ``eval`` that works similarly to the JavaScript "
"function of the same name. It takes a string as an argument and executes it "
"as JavaScript code. This allows interacting with the browser in ways not "
"possible with script languages integrated into Godot."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:288
msgid ""
"The value of the last JavaScript statement is converted to a GDScript value "
"and returned by ``eval()`` under certain circumstances:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:291
msgid "JavaScript ``number`` is returned as GDScript :ref:`class_float`"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:292
msgid "JavaScript ``boolean`` is returned as GDScript :ref:`class_bool`"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:293
msgid "JavaScript ``string`` is returned as GDScript :ref:`class_String`"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:294
msgid ""
"JavaScript ``ArrayBuffer``, ``TypedArray`` and ``DataView`` are returned as "
"GDScript :ref:`class_PoolByteArray`"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:303
msgid "Any other JavaScript value is returned as ``null``."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:305
msgid ""
"HTML5 export templates may be :ref:`built <doc_compiling_for_web>` without "
"support for the singleton to improve security. With such templates, and on "
"platforms other than HTML5, calling ``JavaScript.eval`` will also return "
"``null``. The availability of the singleton can be checked with the "
"``JavaScript`` :ref:`feature tag <doc_feature_tags>`::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:319
msgid ""
"GDScript's multi-line strings, surrounded by 3 quotes ``\"\"\"`` as in "
"``my_func3()`` above, are useful to keep JavaScript code readable."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_web.rst:322
msgid ""
"The ``eval`` method also accepts a second, optional Boolean argument, which "
"specifies whether to execute the code in the global execution context, "
"defaulting to ``false`` to prevent polluting the global namespace::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:4
#: ../../docs/tutorials/networking/high_level_multiplayer.rst:473
msgid "Exporting for dedicated servers"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:6
msgid ""
"If you want to run a dedicated server for your project on a machine that "
"doesn't have a GPU or display server available, you'll need to use a server "
"build of Godot."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:10
msgid "Platform support"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:12
msgid ""
"**Linux:** `Download an official Linux server binary <https://godotengine."
"org/download/server>`__. To compile a server binary from source, follow "
"instructions in :ref:`doc_compiling_for_x11`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:15
msgid ""
"**macOS:** :ref:`Compile a server binary from source for macOS "
"<doc_compiling_for_osx>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:16
msgid ""
"**Windows:** There is no dedicated server build for Windows yet. As an "
"alternative, you can use the ``--no-window`` command-line argument to "
"prevent Godot from spawning a window. Note that even with the ``--no-"
"window`` command-line argument, you'll need to have OpenGL support available "
"on the Windows machine."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:21
msgid ""
"If your project uses C#, you'll have to use a Mono-enabled server binary."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:24
msgid "\"Headless\" versus \"server\" binaries"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:26
msgid ""
"The `server download page <https://godotengine.org/download/server>`__ "
"offers two kinds of binaries with several differences."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:29
msgid ""
"**Server:** Use this one for running dedicated servers. It does not contain "
"editor functionality, and is therefore smaller and more optimized."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:32
msgid ""
"**Headless:** This binary contains editor functionality and is intended to "
"be used for exporting projects. This binary *can* be used to run dedicated "
"servers, but it's not recommended as it's larger and less optimized."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:37
msgid "Exporting a PCK file"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:39
msgid "There are two ways to export a project for a server:"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:41
msgid ""
"Create a Linux/X11 export preset, define a custom Release export template "
"that points to the server binary then export the project as usual."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:43
msgid "Export a PCK file only, preferably from a Linux/X11 export preset."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:45
msgid ""
"Both methods should result in identical output. The text below describes the "
"PCK file approach."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:48
msgid ""
"Once you've downloaded a server binary, you should export a PCK file "
"containing your project data. After creating the export preset, click "
"**Export PCK/ZIP** at the bottom of the Export dialog then choose a "
"destination path. The **Export With Debug** checkbox in the file dialog has "
"no bearing on the final PCK file, so you can leave it as-is."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:54
msgid "See :ref:`doc_exporting_projects` for more information."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:58
msgid ""
"If you're exporting the project from a headless editor, call the headless "
"editor with the `--export-pack` option while in the project folder to export "
"only a PCK file."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:64
msgid ""
"The PCK file will include resources not normally needed by the server, such "
"as textures and sounds. This means the PCK file will be larger than it could "
"possibly be. Support for stripping unneeded resources from a PCK for server "
"usage is planned in a future Godot release."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:69
msgid ""
"On the bright side, this allows the same PCK file to be used both by a "
"client and dedicated server build. This can be useful if you want to ship a "
"single archive that can be used both as a client and dedicated server."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:74
msgid "Preparing the server distribution"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:76
msgid ""
"After downloading or compiling a server binary, you should now place it in "
"the same folder as the PCK file you've exported. The server binary should "
"have the same name as the PCK (excluding the extension). This lets Godot "
"detect and use the PCK file automatically. If you want to start a server "
"with a PCK that has a different name, you can specify the path to the PCK "
"file using the ``--main-pack`` command-line argument::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:86
msgid "Starting the dedicated server"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:88
msgid ""
"If both your client and server are part of the same Godot project, you will "
"have to add a way to start the server directly using a command-line "
"argument. This can be done by adding the following code snippet in your main "
"scene (or a singleton)'s ``_ready()`` method::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:99
msgid ""
"Alternatively, you can make the dedicated server always start up if a "
"headless or server binary is detected::"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:109
msgid ""
"If your client and server are separate Godot projects, your server should "
"most likely be configured in a way where running the main scene starts a "
"server automatically."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:114
#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:650
#: ../../docs/tutorials/vr/openxr/index.rst:45
msgid "Next steps"
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:116
msgid ""
"On Linux, to make your dedicated server restart after a crash or system "
"reboot, you can `create a systemd service <https://medium.com/@benmorel/"
"creating-a-linux-service-with-systemd-611b5c8b91d6>`__. This also lets you "
"view server logs in a more convenient fashion, with automatic log rotation "
"provided by systemd."
msgstr ""

#: ../../docs/tutorials/export/exporting_for_dedicated_servers.rst:122
msgid ""
"If you have experience with containers, you could also look into wrapping "
"your dedicated server in a `Docker <https://www.docker.com/>`__ container. "
"This way, it can be used more easily in an automatic scaling setup (which is "
"outside the scope of this tutorial)."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:4
msgid "One-click deploy"
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:7
msgid "What is one-click deploy?"
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:9
msgid ""
"One-click deploy is a feature that is available once a platform is properly "
"configured and a supported device is connected to the computer. Since things "
"can go wrong at many levels (platform may not be configured correctly, SDK "
"may be incorrectly installed, device may be improperly configured, etc.), "
"it's good to let the user know that it exists."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:15
msgid ""
"After adding an Android export preset marked as Runnable, Godot can detect "
"when a USB device is connected to the computer and offer the user to "
"automatically export, install and run the project (in debug mode) on the "
"device. This feature is called *one-click deploy*."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:22
msgid ""
"One-click deploy is only available once you've added an export template "
"marked as **Runnable** in the Export dialog. You can mark several export "
"presets as runnable, but only one preset per platform may be marked as "
"runnable. If you mark a second preset in a given platform as runnable, the "
"other preset will no longer be marked as runnable."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:29
msgid "Supported platforms"
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:31
msgid ""
"**Android:** Exports the project with debugging enabled and runs it on the "
"connected device."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:34
msgid ""
"Make sure to follow the steps described in :ref:`doc_exporting_for_android`. "
"Otherwise, the one-click deploy button won't appear."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:37
msgid ""
"If you have more than one device connected, Godot will ask you which device "
"the project should be exported to."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:40
msgid ""
"**HTML5:** Starts a local web server and runs the exported project by "
"opening the default web browser."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:43
msgid "Support for more platforms such as iOS is planned."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:46
msgid "Using one-click deploy"
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:48
msgid ""
"If deploying to Android, enable developer mode on your mobile device then "
"enable USB debugging in the device's settings."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:50
msgid ""
"After enabling USB debugging, connect the device to your PC using an USB "
"cable."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:52
msgid "For advanced users, it should also be possible to use wireless ADB."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:54
msgid ""
"Make sure there is an export preset marked as **Runnable** for the target "
"platform (Android or HTML5)."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:56
msgid ""
"If everything is configured correctly and with no errors, platform-specific "
"icons will appear in the top-right corner of the editor."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:58
msgid "Click the button to export to the desired platform in one click."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:68
msgid ""
"If you can't see the device in the list of devices when running the ``adb "
"devices`` command in a terminal, it will not be visible by Godot either. To "
"resolve this:"
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:72
msgid ""
"Check if USB debugging is enabled *and authorized on the device*. Try "
"unlocking your device and accepting the authorization prompt if you see any. "
"If you can't see this prompt, running ``adb devices`` on your PC should make "
"the authorization prompt appear on the device."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:76
msgid ""
"Try `revoking the debugging authorization <https://stackoverflow.com/"
"questions/23081263/adb-android-device-unauthorized>`__ in the device's "
"developer settings, then follow the steps again."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:78
msgid ""
"Try using USB debugging instead of wireless debugging or vice versa. "
"Sometimes, one of those can work better than the other."
msgstr ""

#: ../../docs/tutorials/export/one-click_deploy.rst:80
msgid ""
"On Linux, you may be missing the required `udev rules <https://github.com/"
"M0Rf30/android-udev-rules>`__ for your device to be recognized."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:4
msgid "Internationalizing games"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:9
msgid ""
"Sería excelente que el mundo hablara solo un idioma (It would be great if "
"the world spoke only one language). Unfortunately for us developers, that is "
"not the case. While indie or niche games usually do not need localization, "
"games targeting a more massive market often require localization. Godot "
"offers many tools to make this process more straightforward, so this "
"tutorial is more like a collection of tips and tricks."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:17
msgid ""
"Localization is usually done by specific studios hired for the job and, "
"despite the huge amount of software and file formats available for this, the "
"most common way to do localization to this day is still with spreadsheets. "
"The process of creating the spreadsheets and importing them is already "
"covered in the :ref:`doc_importing_translations` tutorial, so this one could "
"be seen more like a follow-up to that one."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:25
msgid ""
"We will be using the official demo as an example; you can `download it from "
"the Asset Library <https://godotengine.org/asset-library/asset/134>`_."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:29
msgid "Configuring the imported translation"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:31
msgid ""
"Translations can get updated and re-imported when they change, but they "
"still have to be added to the project. This is done in **Project → Project "
"Settings → Localization**:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:37
msgid "The above dialog is used to add or remove translations project-wide."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:40
msgid "Localizing resources"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:42
msgid ""
"It is also possible to instruct Godot to use alternate versions of assets "
"(resources) depending on the current language. The **Remaps** tab can be "
"used for this:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:48
msgid ""
"Select the resource to be remapped, then add some alternatives for each "
"locale."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:52
msgid "Converting keys to text"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:54
msgid ""
"Some controls, such as :ref:`Button <class_Button>` and :ref:`Label "
"<class_Label>`, will automatically fetch a translation if their text matches "
"a translation key. For example, if a label's text is "
"\"MAIN_SCREEN_GREETING1\" and that key exists in the current translation, "
"then the text will automatically be translated."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:59
msgid ""
"This automatic translation behavior may be undesirable in certain cases. For "
"instance, when using a Label to display a player's name, you most likely "
"don't want the player's name to be translated if it matches a translation "
"key. To disable automatic translation on a specific node, use :ref:`Object."
"set_message_translation<class_Object_method_set_message_translation>` and "
"send a :ref:`Object.notification<class_Object_method_notification>` to "
"update the translation::"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:74
msgid ""
"For more complex UI nodes such as OptionButtons, you may have to use this "
"instead::"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:83
msgid ""
"In code, the :ref:`Object.tr() <class_Object_method_tr>` function can be "
"used. This will just look up the text in the translations and convert it if "
"found:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:93
msgid "Making controls resizable"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:95
msgid ""
"The same text in different languages can vary greatly in length. For this, "
"make sure to read the tutorial on :ref:`doc_size_and_anchors`, as "
"dynamically adjusting control sizes may help. :ref:`Container "
"<class_Container>` can be useful, as well as the text wrapping options "
"available in :ref:`Label <class_Label>`."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:102
msgid "TranslationServer"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:104
msgid ""
"Godot has a server handling low-level translation management called the :ref:"
"`TranslationServer <class_TranslationServer>`. Translations can be added or "
"removed during run-time; the current language can also be changed at run-"
"time."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:110
msgid "Testing translations"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:112
msgid ""
"You may want to test a project's translation before releasing it. Godot "
"provides two ways to do this."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:115
msgid ""
"First, in the Project Settings, under **Input Devices > Locale**, there is a "
"**Test** property. Set this property to the locale code of the language you "
"want to test. Godot will run the project with that locale when the project "
"is run (either from the editor or when exported)."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:122
msgid ""
"Keep in mind that since this is a project setting, it will show up in "
"version control when it is set to a non-empty value. Therefore, it should be "
"set back to an empty value before committing changes to version control."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:126
msgid ""
"Translations can also be tested when running Godot from the command line. "
"For example, to test a game in French, the following argument can be "
"supplied:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:135
msgid "Translating the project name"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:137
msgid ""
"The project name becomes the app name when exporting to different operating "
"systems and platforms. To specify the project name in more than one "
"language, create a new setting ``application/name`` in the **Project "
"Settings** and append the locale identifier to it. For instance, for "
"Spanish, this would be ``application/name_es``:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:145
msgid ""
"If you are unsure about the language code to use, refer to the :ref:`list of "
"locale codes <doc_locales>`."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:4
msgid "Localization using gettext"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:6
msgid ""
"In addition to :ref:`doc_importing_translations` in CSV format, Godot also "
"supports loading translation files written in the GNU gettext format (text-"
"based ``.po`` and compiled ``.mo`` since Godot 3.5)."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:10
msgid ""
"For an introduction to gettext, check out `A Quick Gettext Tutorial <https://"
"www.labri.fr/perso/fleury/posts/programming/a-quick-gettext-tutorial."
"html>`_. It's written with C projects in mind, but much of the advice also "
"applies to Godot (with the exception of ``xgettext``)."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:16
msgid "Advantages"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:18
msgid ""
"gettext is a standard format, which can be edited using any text editor or "
"GUI editors such as `Poedit <https://poedit.net/>`_."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:20
msgid ""
"gettext is supported by translation platforms such as `Transifex <https://"
"www.transifex.com/>`_ and `Weblate <https://weblate.org/>`_, which makes it "
"easier for people to collaborate to localization."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:23
msgid ""
"Compared to CSV, gettext works better with version control systems like Git, "
"as each locale has its own messages file."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:25
msgid ""
"Multiline strings are more convenient to edit in gettext files compared to "
"CSV files."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:29
msgid "Disadvantages"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:31
msgid ""
"gettext is a more complex format than CSV and can be harder to grasp for "
"people new to software localization."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:33
msgid ""
"People who maintain localization files will have to install gettext tools on "
"their system. However, as Godot supports using text-based message files (``."
"po``), translators can test their work without having to install gettext "
"tools."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:38
msgid "Caveats"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:40
msgid ""
"As Godot uses its own PO file parser behind the scenes (which is more "
"limited than the reference GNU gettext implementation), some features such "
"as pluralization aren't supported."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:45
msgid "Installing gettext tools"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:47
msgid ""
"The command line gettext tools are required to perform maintenance "
"operations, such as updating message files. Therefore, it's strongly "
"recommended to install them."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:51
msgid ""
"**Windows:** Download an installer from `this page <https://mlocati.github."
"io/articles/gettext-iconv-windows.html>`_. Any architecture and binary type "
"(shared or static) works; if in doubt, choose the 64-bit static installer."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:55
msgid ""
"**macOS:** Install gettext either using `Homebrew <https://brew.sh/>`_ with "
"the ``brew install gettext`` command, or using `MacPorts <https://www."
"macports.org/>`_ with the ``sudo port install gettext`` command."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:59
msgid ""
"**Linux:** On most distributions, install the ``gettext`` package from your "
"distribution's package manager."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:63
msgid "Creating the PO template (POT) manually"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:65
msgid ""
"Godot currently doesn't support extracting source strings using "
"``xgettext``, so the ``.pot`` file must be created manually. This file can "
"be placed anywhere in the project directory, but it's recommended to keep it "
"in a subdirectory, as each locale will be defined in its own file."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:70
msgid ""
"Create a directory named `locale` in the project directory. In this "
"directory, save a file named ``messages.pot`` with the following contents:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:82
msgid ""
"Messages in gettext are made of ``msgid`` and ``msgstr`` pairs. ``msgid`` is "
"the source string (usually in English), ``msgstr`` will be the translated "
"string."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:86
msgid ""
"The ``msgstr`` value in PO template files (``.pot``) should **always** be "
"empty. Localization will be done in the generated ``.po`` files instead."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:90
msgid "Creating the PO template (POT) using pybabel"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:92
msgid ""
"The Python tool pybabel has support for Godot and can be used to "
"automatically create and update the POT file from your scene files and "
"scripts."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:95
msgid "After installing ``babel`` and ``babel-godot``, for example using pip:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:101
msgid ""
"Write a mapping file (for example ``babelrc``) which will indicate which "
"files pybabel needs to process (note that we process GDScript as Python, "
"which is generally sufficient):"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:113
msgid "You can then run pybabel like so:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:119
msgid ""
"Use the ``-k`` option to specify what needs to be extracted. In this case, "
"arguments to :ref:`tr() <class_Object_method_tr>` will be translated, as "
"well as properties named \"text\" (commonly used by Control nodes) and "
"LineEdit's \"placeholder_text\" property."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:125
msgid "Creating a messages file from a PO template"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:127
msgid ""
"The ``msginit`` command is used to turn a PO template into a messages file. "
"For instance, to create a French localization file, use the following "
"command while in the ``locale`` directory:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:135
msgid ""
"The command above will create a file named ``fr.po`` in the same directory "
"as the PO template."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:138
msgid ""
"Alternatively, you can do that graphically using Poedit, or by uploading the "
"POT file to your web platform of choice."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:142
msgid "Loading a messages file in Godot"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:144
msgid ""
"To register a messages file as a translation in a project, open the "
"**Project Settings**, then go to the **Localization** tab. In "
"**Translations**, click **Add…** then choose the ``.po`` or ``.mo`` file in "
"the file dialog. The locale will be inferred from the ``\"Language: "
"<code>\\n\"`` property in the messages file."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:150
msgid ""
"See :ref:`doc_internationalizing_games` for more information on importing "
"and testing translations in Godot."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:154
msgid "Updating message files to follow the PO template"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:156
msgid ""
"After updating the PO template, you will have to update message files so "
"that they contain new strings, while removing strings that are no longer "
"present in the PO template. This can be done automatically using the "
"``msgmerge`` tool:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:166
msgid ""
"If you want to keep a backup of the original message file (which would be "
"saved as ``fr.po~`` in this example), remove the ``--backup=none`` argument."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:171
msgid ""
"After running ``msgmerge``, strings which were modified in the source "
"language will have a \"fuzzy\" comment added before them in the ``.po`` "
"file. This comment denotes that the translation should be updated to match "
"the new source string, as the translation will most likely be inaccurate "
"until it's updated."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:176
msgid ""
"Strings with \"fuzzy\" comments will **not** be read by Godot until the "
"translation is updated and the \"fuzzy\" comment is removed."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:180
msgid "Checking the validity of a PO file or template"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:182
msgid ""
"It is possible to check whether a gettext file's syntax is valid by running "
"the command below:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:189
msgid ""
"If there are syntax errors or warnings, they will be displayed in the "
"console. Otherwise, ``msgfmt`` won't output anything."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:193
msgid "Using binary MO files (useful for large projects only)"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:195
msgid ""
"For large projects with several thousands of strings to translate or more, "
"it can be worth it to use binary (compiled) MO message files instead of text-"
"based PO files. Binary MO files are smaller and faster to read than the "
"equivalent PO files."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:200
msgid "You can generate a MO file with the command below:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:206
msgid ""
"If the PO file is valid, this command will create a ``fr.mo`` file besides "
"the PO file. This MO file can then be loaded in Godot as described below."
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:209
msgid ""
"The original PO file should be kept in version control so you can update "
"your translation in the future. In case you lose the original PO file and "
"wish to decompile a MO file into a text-based PO file, you can do so with:"
msgstr ""

#: ../../docs/tutorials/i18n/localization_using_gettext.rst:217
msgid ""
"The decompiled file will not include comments or fuzzy strings, as these are "
"never compiled in the MO file in the first place."
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:4
msgid "Locales"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:8
msgid ""
"This is the list of supported locales and variants in the engine. It's based "
"on the Unix standard locale strings:"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:12
msgid "Locale"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:12
msgid "Language and Variant"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:14
msgid "aa"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:14
msgid "Afar"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:16
msgid "aa_DJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:16
msgid "Afar (Djibouti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:18
msgid "aa_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:18
msgid "Afar (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:20
msgid "aa_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:20
msgid "Afar (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:22
msgid "af"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:22
msgid "Afrikaans"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:24
msgid "af_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:24
msgid "Afrikaans (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:26
msgid "agr_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:26
msgid "Aguaruna (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:28
msgid "ak_GH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:28
msgid "Akan (Ghana)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:30
msgid "am_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:30
msgid "Amharic (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:32
msgid "an_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:32
msgid "Aragonese (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:34
msgid "anp_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:34
msgid "Angika (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:36
msgid "ar"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:36
msgid "Arabic"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:38
msgid "ar_AE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:38
msgid "Arabic (United Arab Emirates)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:40
msgid "ar_BH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:40
msgid "Arabic (Bahrain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:42
msgid "ar_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:42
msgid "Arabic (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:44
msgid "ar_EG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:44
msgid "Arabic (Egypt)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:46
msgid "ar_IQ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:46
msgid "Arabic (Iraq)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:48
msgid "ar_JO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:48
msgid "Arabic (Jordan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:50
msgid "ar_KW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:50
msgid "Arabic (Kuwait)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:52
msgid "ar_LB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:52
msgid "Arabic (Lebanon)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:54
msgid "ar_LY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:54
msgid "Arabic (Libya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:56
msgid "ar_MA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:56
msgid "Arabic (Morocco)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:58
msgid "ar_OM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:58
msgid "Arabic (Oman)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:60
msgid "ar_QA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:60
msgid "Arabic (Qatar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:62
msgid "ar_SA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:62
msgid "Arabic (Saudi Arabia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:64
msgid "ar_SD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:64
msgid "Arabic (Sudan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:66
msgid "ar_SS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:66
msgid "Arabic (South Sudan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:68
msgid "ar_SY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:68
msgid "Arabic (Syria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:70
msgid "ar_TN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:70
msgid "Arabic (Tunisia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:72
msgid "ar_YE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:72
msgid "Arabic (Yemen)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:74
msgid "as_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:74
msgid "Assamese (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:76
msgid "ast_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:76
msgid "Asturian (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:78
msgid "ayc_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:78
msgid "Southern Aymara (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:80
msgid "ay_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:80
msgid "Aymara (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:82
msgid "az_AZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:82
msgid "Azerbaijani (Azerbaijan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:84
msgid "be"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:84
msgid "Belarusian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:86
msgid "be_BY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:86
msgid "Belarusian (Belarus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:88
msgid "bem_ZM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:88
msgid "Bemba (Zambia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:90
msgid "ber_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:90
msgid "Berber languages (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:92
msgid "ber_MA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:92
msgid "Berber languages (Morocco)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:94
msgid "bg"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:94
msgid "Bulgarian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:96
msgid "bg_BG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:96
msgid "Bulgarian (Bulgaria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:98
msgid "bhb_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:98
msgid "Bhili (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:100
msgid "bho_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:100
msgid "Bhojpuri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:102
msgid "bi_TV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:102
msgid "Bislama (Tuvalu)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:104
msgid "bn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:104
msgid "Bengali"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:106
msgid "bn_BD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:106
msgid "Bengali (Bangladesh)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:108
msgid "bn_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:108
msgid "Bengali (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:110
msgid "bo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:110
msgid "Tibetan"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:112
msgid "bo_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:112
msgid "Tibetan (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:114
msgid "bo_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:114
msgid "Tibetan (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:116
msgid "br_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:116
msgid "Breton (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:118
msgid "brx_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:118
msgid "Bodo (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:120
msgid "bs_BA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:120
msgid "Bosnian (Bosnia and Herzegovina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:122
msgid "byn_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:122
msgid "Bilin (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:124
msgid "ca"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:124
msgid "Catalan"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:126
msgid "ca_AD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:126
msgid "Catalan (Andorra)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:128
msgid "ca_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:128
msgid "Catalan (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:130
msgid "ca_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:130
msgid "Catalan (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:132
msgid "ca_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:132
msgid "Catalan (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:134
msgid "ce_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:134
msgid "Chechen (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:136
msgid "chr_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:136
msgid "Cherokee (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:138
msgid "cmn_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:138
msgid "Mandarin Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:140
msgid "crh_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:140
msgid "Crimean Tatar (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:142
msgid "csb_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:142
msgid "Kashubian (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:144
msgid "cs"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:144
msgid "Czech"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:146
msgid "cs_CZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:146
msgid "Czech (Czech Republic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:148
msgid "cv_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:148
msgid "Chuvash (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:150
msgid "cy_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:150
msgid "Welsh (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:152
msgid "da"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:152
msgid "Danish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:154
msgid "da_DK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:154
msgid "Danish (Denmark)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:156
msgid "de"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:156
msgid "German"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:158
msgid "de_AT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:158
msgid "German (Austria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:160
msgid "de_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:160
msgid "German (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:162
msgid "de_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:162
msgid "German (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:164
msgid "de_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:164
msgid "German (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:166
msgid "de_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:166
msgid "German (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:168
msgid "de_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:168
msgid "German (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:170
msgid "doi_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:170
msgid "Dogri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:172
msgid "dv_MV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:172
msgid "Dhivehi (Maldives)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:174
msgid "dz_BT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:174
msgid "Dzongkha (Bhutan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:176
msgid "el"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:176
msgid "Greek"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:178
msgid "el_CY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:178
msgid "Greek (Cyprus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:180
msgid "el_GR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:180
msgid "Greek (Greece)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:182
msgid "English"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:184
msgid "en_AG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:184
msgid "English (Antigua and Barbuda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:186
msgid "en_AU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:186
msgid "English (Australia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:188
msgid "en_BW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:188
msgid "English (Botswana)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:190
msgid "en_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:190
msgid "English (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:192
msgid "en_DK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:192
msgid "English (Denmark)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:194
msgid "en_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:194
msgid "English (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:196
msgid "en_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:196
msgid "English (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:198
msgid "en_IE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:198
msgid "English (Ireland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:200
msgid "en_IL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:200
msgid "English (Israel)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:202
msgid "en_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:202
msgid "English (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:204
msgid "en_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:204
msgid "English (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:206
msgid "en_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:206
msgid "English (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:208
msgid "en_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:208
msgid "English (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:210
msgid "en_SG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:210
msgid "English (Singapore)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:212
msgid "en_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:212
msgid "English (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:214
msgid "en_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:214
msgid "English (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:216
msgid "en_ZM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:216
msgid "English (Zambia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:218
msgid "en_ZW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:218
msgid "English (Zimbabwe)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:220
msgid "eo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:220
msgid "Esperanto"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:222
msgid "Spanish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:224
msgid "es_AR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:224
msgid "Spanish (Argentina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:226
msgid "es_BO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:226
msgid "Spanish (Bolivia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:228
msgid "es_CL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:228
msgid "Spanish (Chile)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:230
msgid "es_CO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:230
msgid "Spanish (Colombia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:232
msgid "es_CR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:232
msgid "Spanish (Costa Rica)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:234
msgid "es_CU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:234
msgid "Spanish (Cuba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:236
msgid "es_DO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:236
msgid "Spanish (Dominican Republic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:238
msgid "es_EC"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:238
msgid "Spanish (Ecuador)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:240
msgid "es_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:240
msgid "Spanish (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:242
msgid "es_GT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:242
msgid "Spanish (Guatemala)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:244
msgid "es_HN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:244
msgid "Spanish (Honduras)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:246
msgid "es_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:246
msgid "Spanish (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:248
msgid "es_NI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:248
msgid "Spanish (Nicaragua)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:250
msgid "es_PA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:250
msgid "Spanish (Panama)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:252
msgid "es_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:252
msgid "Spanish (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:254
msgid "es_PR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:254
msgid "Spanish (Puerto Rico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:256
msgid "es_PY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:256
msgid "Spanish (Paraguay)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:258
msgid "es_SV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:258
msgid "Spanish (El Salvador)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:260
msgid "es_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:260
msgid "Spanish (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:262
msgid "es_UY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:262
msgid "Spanish (Uruguay)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:264
msgid "es_VE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:264
msgid "Spanish (Venezuela)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:266
msgid "et"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:266
msgid "Estonian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:268
msgid "et_EE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:268
msgid "Estonian (Estonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:270
msgid "eu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:270
msgid "Basque"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:272
msgid "eu_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:272
msgid "Basque (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:274
msgid "fa"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:274
msgid "Persian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:276
msgid "fa_IR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:276
msgid "Persian (Iran)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:278
msgid "ff_SN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:278
msgid "Fulah (Senegal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:280
msgid "fi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:280
msgid "Finnish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:282
msgid "fi_FI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:282
msgid "Finnish (Finland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:284
msgid "fil"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:284
msgid "Filipino"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:286
msgid "fil_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:286
msgid "Filipino (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:288
msgid "fo_FO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:288
msgid "Faroese (Faroe Islands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:290
msgid "fr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:290
msgid "French"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:292
msgid "fr_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:292
msgid "French (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:294
msgid "fr_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:294
msgid "French (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:296
msgid "fr_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:296
msgid "French (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:298
msgid "fr_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:298
msgid "French (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:300
msgid "fr_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:300
msgid "French (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:302
msgid "fur_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:302
msgid "Friulian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:304
msgid "fy_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:304
msgid "Western Frisian (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:306
msgid "fy_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:306
msgid "Western Frisian (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:308
msgid "ga"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:308
msgid "Irish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:310
msgid "ga_IE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:310
msgid "Irish (Ireland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:312
msgid "gd_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:312
msgid "Scottish Gaelic (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:314
msgid "gez_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:314
msgid "Geez (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:316
msgid "gez_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:316
msgid "Geez (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:318
msgid "gl_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:318
msgid "Galician (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:320
msgid "gu_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:320
msgid "Gujarati (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:322
msgid "gv_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:322
msgid "Manx (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:324
msgid "hak_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:324
msgid "Hakka Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:326
msgid "ha_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:326
msgid "Hausa (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:328
msgid "he"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:328
msgid "Hebrew"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:330
msgid "he_IL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:330
msgid "Hebrew (Israel)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:332
msgid "hi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:332
msgid "Hindi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:334
msgid "hi_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:334
msgid "Hindi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:336
msgid "hne_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:336
msgid "Chhattisgarhi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:338
msgid "hr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:338
msgid "Croatian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:340
msgid "hr_HR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:340
msgid "Croatian (Croatia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:342
msgid "hsb_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:342
msgid "Upper Sorbian (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:344
msgid "ht_HT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:344
msgid "Haitian (Haiti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:346
msgid "hu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:346
msgid "Hungarian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:348
msgid "hu_HU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:348
msgid "Hungarian (Hungary)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:350
msgid "hus_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:350
msgid "Huastec (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:352
msgid "hy_AM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:352
msgid "Armenian (Armenia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:354
msgid "ia_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:354
msgid "Interlingua (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:356
msgid "id"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:356
msgid "Indonesian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:358
msgid "id_ID"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:358
msgid "Indonesian (Indonesia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:360
msgid "ig_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:360
msgid "Igbo (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:362
msgid "ik_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:362
msgid "Inupiaq (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:364
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:169
msgid "is"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:364
msgid "Icelandic"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:366
msgid "is_IS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:366
msgid "Icelandic (Iceland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:368
msgid "it"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:368
msgid "Italian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:370
msgid "it_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:370
msgid "Italian (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:372
msgid "it_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:372
msgid "Italian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:374
msgid "iu_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:374
msgid "Inuktitut (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:376
msgid "Japanese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:378
msgid "ja_JP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:378
msgid "Japanese (Japan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:380
msgid "kab_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:380
msgid "Kabyle (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:382
msgid "ka"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:382
msgid "Georgian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:384
msgid "ka_GE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:384
msgid "Georgian (Georgia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:386
msgid "kk_KZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:386
msgid "Kazakh (Kazakhstan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:388
msgid "kl_GL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:388
msgid "Kalaallisut (Greenland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:390
msgid "km_KH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:390
msgid "Central Khmer (Cambodia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:392
msgid "kn_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:392
msgid "Kannada (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:394
msgid "kok_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:394
msgid "Konkani (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:396
msgid "ko"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:396
msgid "Korean"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:398
msgid "ko_KR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:398
msgid "Korean (South Korea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:400
msgid "ks_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:400
msgid "Kashmiri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:402
msgid "ku"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:402
msgid "Kurdish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:404
msgid "ku_TR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:404
msgid "Kurdish (Turkey)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:406
msgid "kw_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:406
msgid "Cornish (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:408
msgid "ky_KG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:408
msgid "Kirghiz (Kyrgyzstan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:410
msgid "lb_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:410
msgid "Luxembourgish (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:412
msgid "lg_UG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:412
msgid "Ganda (Uganda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:414
msgid "li_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:414
msgid "Limburgan (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:416
msgid "li_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:416
msgid "Limburgan (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:418
msgid "lij_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:418
msgid "Ligurian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:420
msgid "ln_CD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:420
msgid "Lingala (Congo)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:422
msgid "lo_LA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:422
msgid "Lao (Laos)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:424
msgid "lt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:424
msgid "Lithuanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:426
msgid "lt_LT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:426
msgid "Lithuanian (Lithuania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:428
msgid "lv"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:428
msgid "Latvian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:430
msgid "lv_LV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:430
msgid "Latvian (Latvia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:432
msgid "lzh_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:432
msgid "Literary Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:434
msgid "mag_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:434
msgid "Magahi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:436
msgid "mai_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:436
msgid "Maithili (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:438
msgid "mg_MG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:438
msgid "Malagasy (Madagascar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:440
msgid "mh_MH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:440
msgid "Marshallese (Marshall Islands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:442
msgid "mhr_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:442
msgid "Eastern Mari (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:444
msgid "mi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:444
msgid "Maori"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:446
msgid "mi_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:446
msgid "Maori (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:448
msgid "miq_NI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:448
msgid "Mískito (Nicaragua)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:450
msgid "mk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:450
msgid "Macedonian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:452
msgid "mk_MK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:452
msgid "Macedonian (Macedonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:454
msgid "ml"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:454
msgid "Malayalam"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:456
msgid "ml_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:456
msgid "Malayalam (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:458
msgid "mni_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:458
msgid "Manipuri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:460
msgid "mn_MN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:460
msgid "Mongolian (Mongolia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:462
msgid "mr_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:462
msgid "Marathi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:464
msgid "ms"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:464
msgid "Malay"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:466
msgid "ms_MY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:466
msgid "Malay (Malaysia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:468
msgid "mt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:468
msgid "Maltese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:470
msgid "mt_MT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:470
msgid "Maltese (Malta)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:472
msgid "my_MM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:472
msgid "Burmese (Myanmar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:474
msgid "myv_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:474
msgid "Erzya (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:476
msgid "nah_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:476
msgid "Nahuatl languages (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:478
msgid "nan_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:478
msgid "Min Nan Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:480
msgid "nb"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:480
msgid "Norwegian Bokmål"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:482
msgid "nb_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:482
msgid "Norwegian Bokmål (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:484
msgid "nds_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:484
msgid "Low German (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:486
msgid "nds_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:486
msgid "Low German (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:488
msgid "ne_NP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:488
msgid "Nepali (Nepal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:490
msgid "nhn_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:490
msgid "Central Nahuatl (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:492
msgid "niu_NU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:492
msgid "Niuean (Niue)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:494
msgid "niu_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:494
msgid "Niuean (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:496
msgid "nl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:496
msgid "Dutch"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:498
msgid "nl_AW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:498
msgid "Dutch (Aruba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:500
msgid "nl_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:500
msgid "Dutch (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:502
msgid "nl_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:502
msgid "Dutch (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:504
msgid "nn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:504
msgid "Norwegian Nynorsk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:506
msgid "nn_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:506
msgid "Norwegian Nynorsk (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:508
msgid "nr_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:508
msgid "South Ndebele (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:510
msgid "nso_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:510
msgid "Pedi (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:512
msgid "oc_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:512
msgid "Occitan (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:514
msgid "om"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:514
msgid "Oromo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:516
msgid "om_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:516
msgid "Oromo (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:518
msgid "om_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:518
msgid "Oromo (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:520
msgid "or_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:520
msgid "Oriya (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:522
msgid "os_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:522
msgid "Ossetian (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:524
msgid "pa_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:524
msgid "Panjabi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:526
msgid "pa_PK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:526
msgid "Panjabi (Pakistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:528
msgid "pap"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:528
msgid "Papiamento"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:530
msgid "pap_AN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:530
msgid "Papiamento (Netherlands Antilles)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:532
msgid "pap_AW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:532
msgid "Papiamento (Aruba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:534
msgid "pap_CW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:534
msgid "Papiamento (Curaçao)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:536
msgid "pl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:536
msgid "Polish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:538
msgid "pl_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:538
msgid "Polish (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:540
msgid "pr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:540
msgid "Pirate"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:542
msgid "ps_AF"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:542
msgid "Pushto (Afghanistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:544
msgid "pt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:544
msgid "Portuguese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:546
msgid "pt_BR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:546
msgid "Portuguese (Brazil)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:548
msgid "pt_PT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:548
msgid "Portuguese (Portugal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:550
msgid "quy_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:550
msgid "Ayacucho Quechua (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:552
msgid "quz_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:552
msgid "Cusco Quechua (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:554
msgid "raj_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:554
msgid "Rajasthani (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:556
msgid "ro"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:556
msgid "Romanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:558
msgid "ro_RO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:558
msgid "Romanian (Romania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:560
msgid "ru"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:560
msgid "Russian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:562
msgid "ru_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:562
msgid "Russian (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:564
msgid "ru_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:564
msgid "Russian (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:566
msgid "rw_RW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:566
msgid "Kinyarwanda (Rwanda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:568
msgid "sa_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:568
msgid "Sanskrit (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:570
msgid "sat_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:570
msgid "Santali (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:572
msgid "sc_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:572
msgid "Sardinian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:574
msgid "sco"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:574
msgid "Scots"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:576
msgid "sd_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:576
msgid "Sindhi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:578
msgid "se_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:578
msgid "Northern Sami (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:580
msgid "sgs_LT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:580
msgid "Samogitian (Lithuania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:582
msgid "shs_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:582
msgid "Shuswap (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:584
msgid "sid_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:584
msgid "Sidamo (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:586
msgid "si"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:586
msgid "Sinhala"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:588
msgid "si_LK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:588
msgid "Sinhala (Sri Lanka)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:590
msgid "sk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:590
msgid "Slovak"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:592
msgid "sk_SK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:592
msgid "Slovak (Slovakia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:594
msgid "sl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:594
msgid "Slovenian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:596
msgid "sl_SI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:596
msgid "Slovenian (Slovenia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:598
msgid "so"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:598
msgid "Somali"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:600
msgid "so_DJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:600
msgid "Somali (Djibouti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:602
msgid "so_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:602
msgid "Somali (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:604
msgid "so_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:604
msgid "Somali (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:606
msgid "so_SO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:606
msgid "Somali (Somalia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:608
msgid "son_ML"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:608
msgid "Songhai languages (Mali)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:610
msgid "sq"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:610
msgid "Albanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:612
msgid "sq_AL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:612
msgid "Albanian (Albania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:614
msgid "sq_KV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:614
msgid "Albanian (Kosovo)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:616
msgid "sq_MK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:616
msgid "Albanian (Macedonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:618
msgid "sr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:618
msgid "Serbian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:620
msgid "sr_Cyrl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:620
msgid "Serbian (Cyrillic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:622
msgid "sr_Latn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:622
msgid "Serbian (Latin)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:624
msgid "sr_ME"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:624
msgid "Serbian (Montenegro)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:626
msgid "sr_RS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:626
msgid "Serbian (Serbia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:628
msgid "ss_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:628
msgid "Swati (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:630
msgid "st_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:630
msgid "Southern Sotho (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:632
msgid "sv"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:632
msgid "Swedish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:634
msgid "sv_FI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:634
msgid "Swedish (Finland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:636
msgid "sv_SE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:636
msgid "Swedish (Sweden)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:638
msgid "sw_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:638
msgid "Swahili (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:640
msgid "sw_TZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:640
msgid "Swahili (Tanzania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:642
msgid "szl_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:642
msgid "Silesian (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:644
msgid "ta"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:644
msgid "Tamil"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:646
msgid "ta_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:646
msgid "Tamil (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:648
msgid "ta_LK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:648
msgid "Tamil (Sri Lanka)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:650
msgid "tcy_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:650
msgid "Tulu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:652
msgid "te"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:652
msgid "Telugu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:654
msgid "te_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:654
msgid "Telugu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:656
msgid "tg_TJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:656
msgid "Tajik (Tajikistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:658
msgid "the_NP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:658
msgid "Chitwania Tharu (Nepal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:660
msgid "th"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:660
msgid "Thai"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:662
msgid "th_TH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:662
msgid "Thai (Thailand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:664
msgid "ti"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:664
msgid "Tigrinya"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:666
msgid "ti_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:666
msgid "Tigrinya (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:668
msgid "ti_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:668
msgid "Tigrinya (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:670
msgid "tig_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:670
msgid "Tigre (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:672
msgid "tk_TM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:672
msgid "Turkmen (Turkmenistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:674
msgid "tl_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:674
msgid "Tagalog (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:676
msgid "tn_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:676
msgid "Tswana (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:678
msgid "tr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:678
msgid "Turkish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:680
msgid "tr_CY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:680
msgid "Turkish (Cyprus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:682
msgid "tr_TR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:682
msgid "Turkish (Turkey)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:684
msgid "ts_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:684
msgid "Tsonga (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:686
msgid "tt_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:686
msgid "Tatar (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:688
msgid "ug_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:688
msgid "Uighur (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:690
msgid "uk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:690
msgid "Ukrainian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:692
msgid "uk_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:692
msgid "Ukrainian (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:694
msgid "unm_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:694
msgid "Unami (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:696
msgid "ur"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:696
msgid "Urdu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:698
msgid "ur_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:698
msgid "Urdu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:700
msgid "ur_PK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:700
msgid "Urdu (Pakistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:702
msgid "uz"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:702
msgid "Uzbek"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:704
msgid "uz_UZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:704
msgid "Uzbek (Uzbekistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:706
msgid "ve_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:706
msgid "Venda (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:708
msgid "vi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:708
msgid "Vietnamese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:710
msgid "vi_VN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:710
msgid "Vietnamese (Vietnam)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:712
msgid "wa_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:712
msgid "Walloon (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:714
msgid "wae_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:714
msgid "Walser (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:716
msgid "wal_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:716
msgid "Wolaytta (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:718
msgid "wo_SN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:718
msgid "Wolof (Senegal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:720
msgid "xh_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:720
msgid "Xhosa (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:722
msgid "yi_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:722
msgid "Yiddish (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:724
msgid "yo_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:724
msgid "Yoruba (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:726
msgid "yue_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:726
msgid "Yue Chinese (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:728
msgid "zh"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:728
msgid "Chinese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:730
msgid "zh_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:730
msgid "Chinese (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:732
msgid "zh_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:732
msgid "Chinese (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:734
msgid "zh_SG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:734
msgid "Chinese (Singapore)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:736
msgid "zh_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:736
msgid "Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:738
msgid "zu_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:738
msgid "Zulu (South Africa)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:4
msgid "Using InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:9
msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:15
msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:34
msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:40
msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:60
msgid "How does it work?"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:62
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:70
msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:77
msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:82
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"gui_input\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:92
msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:97
msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport with :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` turned on, a ray to the "
"physics world (in the ray direction from the click) will be cast. (For the "
"root viewport, this can also be enabled in :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) If "
"this ray hits an object, it will call the :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` function in the "
"relevant physics object (bodies receive this callback by default, but areas "
"do not. This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:103
msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:106
msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:112
msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:115
msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:121
msgid "Anatomy of an InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:123
msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:127
msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Event"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Type Index"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "NONE"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "Empty Input Event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "KEY"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "Contains a scancode and Unicode value, as well as modifiers."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "MOUSE_BUTTON"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "Contains click information, such as button, modifiers, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid "MOUSE_MOTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "JOYSTICK_MOTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "Contains Joystick/Joypad analog axis information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "JOYSTICK_BUTTON"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "Contains Joystick/Joypad button information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid "SCREEN_TOUCH"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid "SCREEN_DRAG"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid "SCREEN_ACTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:162
msgid "Actions"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:164
msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:168
msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:170
msgid "Input to be reconfigured at run-time."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:172
msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:175
msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:178
msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:203
#: ../../docs/tutorials/inputs/input_examples.rst:149
msgid "InputMap"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:205
msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:4
msgid "Input examples"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:9
msgid ""
"In this tutorial, you'll learn how to use Godot's :ref:`InputEvent "
"<class_InputEvent>` system to capture player input. There are many different "
"types of input your game may use - keyboard, gamepad, mouse, etc. - and many "
"different ways to turn those inputs into actions in your game. This document "
"will show you some of the most common scenarios, which you can use as "
"starting points for your own projects."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:16
msgid ""
"For a detailed overview of how Godot's input event system works, see :ref:"
"`doc_inputevent`."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:20
msgid "Events versus polling"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:22
msgid ""
"Sometimes you want your game to respond to a certain input event - pressing "
"the \"jump\" button, for example. For other situations, you might want "
"something to happen as long as a key is pressed, such as movement. In the "
"first case, you can use the ``_input()`` function, which will be called "
"whenever an input event occurs. In the second case, Godot provides the :ref:"
"`Input <class_Input>` singleton, which you can use to query the state of an "
"input."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:29
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:507
msgid "Examples:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:63
msgid ""
"This gives you the flexibility to mix-and-match the type of input processing "
"you do."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:66
msgid ""
"For the remainder of this tutorial, we'll focus on capturing individual "
"events in ``_input()``."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:70
#: ../../docs/tutorials/ui/custom_gui_controls.rst:118
msgid "Input events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:72
msgid ""
"Input events are objects that inherit from :ref:`InputEvent "
"<class_InputEvent>`. Depending on the event type, the object will contain "
"specific properties related to that event. To see what events actually look "
"like, add a Node and attach the following script:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:99
msgid ""
"As you press keys, move the mouse, and perform other inputs, you'll see each "
"event scroll by in the output window. Here's an example of the output:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:113
msgid ""
"As you can see, the results are very different for the different types of "
"input. Key events are even printed as their key symbols. For example, let's "
"consider :ref:`InputEventMouseButton <class_InputEventMouseButton>`. It "
"inherits from the following classes:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:118
msgid ""
":ref:`InputEvent <class_InputEvent>` - the base class for all input events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:119
msgid ""
":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` - adds the "
"ability to check if modifiers are pressed, such as :kbd:`Shift` or :kbd:"
"`Alt`."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:120
msgid ""
":ref:`InputEventMouse <class_InputEventMouse>` - adds mouse event "
"properties, such as ``position``"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:121
msgid ""
":ref:`InputEventMouseButton <class_InputEventMouseButton>` - contains the "
"index of the button that was pressed, whether it was a double-click, etc."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:123
msgid ""
"It's a good idea to keep the class reference open while you're working with "
"events so you can check the event type's available properties and methods."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:127
msgid ""
"You can encounter errors if you try to access a property on an input type "
"that doesn't contain it - calling ``position`` on ``InputEventKey`` for "
"example. To avoid this, make sure to test the event type first:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:151
msgid ""
"The :ref:`InputMap <class_InputMap>` is the most flexible way to handle a "
"variety of inputs. You use this by creating named input *actions*, to which "
"you can assign any number of input events, such as keypresses or mouse "
"clicks. A new Godot project includes a number of default actions already "
"defined. To see them, and to add your own, open Project -> Project Settings "
"and select the InputMap tab:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:161
msgid "Capturing actions"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:163
msgid ""
"Once you've defined your actions, you can process them in your scripts using "
"``is_action_pressed()`` and ``is_action_released()`` by passing the name of "
"the action you're looking for:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:185
msgid "Keyboard events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:187
msgid ""
"Keyboard events are captured in :ref:`InputEventKey <class_InputEventKey>`. "
"While it's recommended to use input actions instead, there may be cases "
"where you want to specifically look at key events. For this example, let's "
"check for the :kbd:`T`:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:213
#: ../../docs/tutorials/inputs/input_examples.rst:264
msgid ""
"See :ref:`@GlobalScope_KeyList <enum_@GlobalScope_KeyList>` for a list of "
"scancode constants."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:218
msgid ""
"Due to *keyboard ghosting*, not all key inputs may be registered at a given "
"time if you press too many keys at once. Due to their location on the "
"keyboard, certain keys are more prone to ghosting than others. Some "
"keyboards feature antighosting at a hardware level, but this feature is "
"generally not present on low-end keyboards and laptop keyboards."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:224
msgid ""
"As a result, it's recommended to use a default keyboard layout that is "
"designed to work well on a keyboard without antighosting. See `this Gamedev "
"Stack Exchange question <https://gamedev.stackexchange.com/a/109002>`__ for "
"more information."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:230
msgid "Keyboard modifiers"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:232
msgid ""
"Modifier properties are inherited from :ref:`InputEventWithModifiers "
"<class_InputEventWithModifiers>`. This allows you to check for modifier "
"combinations using boolean properties. Let's imagine you want one thing to "
"happen when the :kbd:`T` is pressed, but something different when it's :kbd:"
"`Shift + T`:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:268
msgid "Mouse events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:270
msgid ""
"Mouse events stem from the :ref:`InputEventMouse <class_InputEventMouse>` "
"class, and are separated into two types: :ref:`InputEventMouseButton "
"<class_InputEventMouseButton>` and :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`. Note that this means that all mouse events "
"will contain a ``position`` property."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:276
msgid "Mouse buttons"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:278
msgid ""
"Capturing mouse buttons is very similar to handling key events. :ref:"
"`@GlobalScope_ButtonList <enum_@GlobalScope_ButtonList>` contains a list of "
"``BUTTON_*`` constants for each possible button, which will be reported in "
"the event's ``button_index`` property. Note that the scrollwheel also counts "
"as a button - two buttons, to be precise, with both ``BUTTON_WHEEL_UP`` and "
"``BUTTON_WHEEL_DOWN`` being separate events."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:313
msgid "Mouse motion"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:315
msgid ""
":ref:`InputEventMouseMotion <class_InputEventMouseMotion>` events occur "
"whenever the mouse moves. You can find the move's distance with the "
"``relative`` property."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:319
msgid ""
"Here's an example using mouse events to drag-and-drop a :ref:`Sprite "
"<class_Sprite>` node:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:392
msgid "Touch events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:394
msgid ""
"If you are using a touchscreen device, you can generate touch events. :ref:"
"`InputEventScreenTouch <class_InputEventScreenTouch>` is equivalent to a "
"mouse click event, and :ref:`InputEventScreenDrag "
"<class_InputEventScreenDrag>` works much the same as mouse motion."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:399
msgid ""
"To test your touch events on a non-touchscreen device, open Project Settings "
"and go to the \"Input Devices/Pointing\" section. Enable \"Emulate Touch "
"From Mouse\" and your project will interpret mouse clicks and motion as "
"touch events."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:4
msgid "Mouse and input coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:9
msgid ""
"The reason for this small tutorial is to clear up many common mistakes about "
"input coordinates, obtaining mouse position and screen resolution, etc."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:14
msgid "Hardware display coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:16
msgid ""
"Using hardware coordinates makes sense in the case of writing complex UIs "
"meant to run on PC, such as editors, MMOs, tools, etc. However, it does not "
"make as much sense outside of that scope."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:21
msgid "Viewport display coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:23
msgid ""
"Godot uses viewports to display content, and viewports can be scaled by "
"several options (see :ref:`doc_multiple_resolutions` tutorial). Use, then, "
"the functions in nodes to obtain the mouse coordinates and viewport size, "
"for example:"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:55
msgid ""
"Alternatively, it's possible to ask the viewport for the mouse position:"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:66
msgid ""
"When the mouse mode is set to ``Input.MOUSE_MODE_CAPTURED``, the ``event."
"position`` value from ``InputEventMouseMotion`` is the center of the screen. "
"Use ``event.relative`` instead of ``event.position`` and ``event.speed`` to "
"process mouse movement and position changes."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:4
msgid "Customizing the mouse cursor"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:6
msgid ""
"You might want to change the appearance of the mouse cursor in your game in "
"order to suit the overall design. There are two ways to customize the mouse "
"cursor:"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:8
#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:25
msgid "Using project settings"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:9
#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:37
msgid "Using a script"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:11
msgid ""
"Using project settings is a simpler (but more limited) way to customize the "
"mouse cursor. The second way is more customizable, but involves scripting."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:15
msgid ""
"You could display a \"software\" mouse cursor by hiding the mouse cursor and "
"moving a Sprite to the cursor position in a ``_process`` method, but this "
"will add at least one frame of latency compared to an \"hardware\" mouse "
"cursor. Therefore, it's recommended to use the approach described here "
"whenever possible."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:21
msgid ""
"If you have to use the \"software\" approach, consider adding an "
"extrapolation step to better display the actual mouse input."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:27
msgid ""
"Open project settings, go to Display>Mouse Cursor. You will see Custom Image "
"and Custom Image Hotspot."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:31
msgid ""
"Custom Image is the desired image that you would like to set as the mouse "
"cursor. Custom Hotspot is the point in the image that you would like to use "
"as the cursor's detection point."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:34
msgid "The custom image **must** be less than 256x256."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:39
msgid "Create a Node and attach the following script."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:77
msgid ""
"Check :ref:`Input.set_custom_mouse_cursor() "
"<class_Input_method_set_custom_mouse_cursor>`."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:81
msgid "Demo project"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:83
msgid ""
"Find out more by studying this demo project: https://github.com/"
"guilhermefelipecgs/custom_hardware_cursor"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:87
msgid "Cursor list"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:89
msgid ""
"As documented in the :ref:`Input <class_Input>` class (see the "
"**CursorShape** enum), there are multiple mouse cursors you can define. "
"Which ones you want to use depends on your use case."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:4
msgid "Handling quit requests"
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:7
msgid "Quitting"
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:9
msgid ""
"Most platforms have the option to request the application to quit. On "
"desktops, this is usually done with the \"x\" icon on the window title bar. "
"On Android, the back button is used to quit when on the main screen (and to "
"go back otherwise)."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:15
msgid "Handling the notification"
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:17
msgid ""
"On desktop platforms, the :ref:`MainLoop <class_MainLoop>` has a special "
"``MainLoop.NOTIFICATION_WM_QUIT_REQUEST`` notification that is sent to all "
"nodes when quitting is requested."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:21
msgid ""
"On Android, ``MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST`` is sent instead. "
"Pressing the Back button will exit the application if **Application > Config "
"> Quit On Go Back** is checked in the Project Settings (which is the "
"default)."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:28
msgid ""
"``MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST`` isn't supported on iOS, as iOS "
"devices don't have a physical Back button."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:31
msgid "Handling the notification is done as follows (on any node):"
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:48
msgid ""
"When developing mobile apps, quitting is not desired unless the user is on "
"the main screen, so the behavior can be changed."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:51
msgid ""
"It is important to note that by default, Godot apps have the built-in "
"behavior to quit when quit is requested, this can be changed:"
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:64
msgid "Sending your own quit notification"
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:66
msgid ""
"While forcing the application to close can be done by calling :ref:"
"`SceneTree.quit <class_SceneTree_method_quit>`, doing so will not send the "
"quit *notification*. This means the function described above won't be "
"called. Quitting by calling :ref:`SceneTree.quit "
"<class_SceneTree_method_quit>` will not allow custom actions to complete "
"(such as saving, confirming the quit, or debugging), even if you try to "
"delay the line that forces the quit."
msgstr ""

#: ../../docs/tutorials/inputs/handling_quit_requests.rst:73
msgid "Instead, you should send a quit request:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:4
msgid "Controllers, gamepads, and joysticks"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:6
msgid ""
"Godot supports hundreds of controller models thanks to the community-sourced "
"`SDL game controller database <https://github.com/gabomdq/"
"SDL_GameControllerDB>`__."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:9
msgid ""
"Controllers are supported on Windows, macOS, Linux, Android, iOS, and HTML5."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:11
msgid ""
"Note that more specialized devices such as steering wheels, rudder pedals "
"and `HOTAS <https://en.wikipedia.org/wiki/HOTAS>`__ are less tested and may "
"not always work as expected. Overriding force feedback for those devices is "
"also not implemented yet. If you have access to one of those devices, don't "
"hesitate to `report bugs on GitHub <https://github.com/godotengine/godot/"
"blob/master/CONTRIBUTING.md#reporting-bugs>`__."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:18
#: ../../docs/tutorials/physics/physics_introduction.rst:16
#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:6
msgid "In this guide, you will learn:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:20
msgid ""
"**How to write your input logic to support both keyboard and controller "
"inputs.**"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:21
msgid "**How controllers can behave differently from keyboard/mouse input.**"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:22
msgid "**Troubleshooting issues with controllers in Godot.**"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:25
msgid "Supporting universal input"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:27
msgid ""
"Thanks to Godot's input action system, Godot makes it possible to support "
"both keyboard and controller input without having to write separate code "
"paths. Instead of hardcoding keys or controller buttons in your scripts, you "
"should create *input actions* in the Project Settings which will then refer "
"to specified key and controller inputs."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:33
msgid ""
"Input actions are explained in detail on the :ref:`doc_inputevent` page."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:37
msgid ""
"Unlike keyboard input, supporting both mouse and controller input for an "
"action (such as looking around in a first-person game) will require "
"different code paths since these have to be handled separately."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:42
msgid "Which Input singleton method should I use?"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:44
msgid "There are 3 ways to get input in an analog-aware way:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:46
msgid ""
"When you have two axes (such as joystick or WASD movement) and want both "
"axes to behave as a single input, use ``Input.get_vector()``:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:76
msgid ""
"When you have one axis that can go both ways (such as a throttle on a flight "
"stick), or when you want to handle separate axes individually, use ``Input."
"get_axis()``:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:97
msgid ""
"For other types of analog input, such as handling a trigger or handling one "
"direction at a time, use ``Input.get_action_strength()``:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:111
msgid ""
"For non-analog digital/boolean input (only \"pressed\" or \"not pressed\" "
"values), such as controller buttons, mouse buttons or keyboard keys, use "
"``Input.is_action_pressed()``:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:127
msgid ""
"In Godot versions before 3.4, such as 3.3, ``Input.get_vector()`` and "
"``Input.get_axis()`` aren't available. Only ``Input.get_action_strength()`` "
"and ``Input.is_action_pressed()`` are available in Godot 3.3."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:132
msgid "Differences between keyboard/mouse and controller input"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:134
msgid ""
"If you're used to handling keyboard and mouse input, you may be surprised by "
"how controllers handle specific situations."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:138
msgid "Dead zone"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:140
msgid ""
"Unlike keyboards and mice, controllers offer axes with *analog* inputs. The "
"upside of analog inputs is that they offer additional flexibility for "
"actions. Unlike digital inputs which can only provide strengths of ``0.0`` "
"and ``1.0``, an analog input can provide *any* strength between ``0.0`` and "
"``1.0``. The downside is that without a deadzone system, an analog axis' "
"strength will never be equal to ``0.0`` due to how the controller is "
"physically built. Instead, it will linger at a low value such as ``0.062``. "
"This phenomenon is known as *drifting* and can be more noticeable on old or "
"faulty controllers."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:149
msgid ""
"Let's take a racing game as a real-world example. Thanks to analog inputs, "
"we can steer the car slowly in one direction or another. However, without a "
"deadzone system, the car would slowly steer by itself even if the player "
"isn't touching the joystick. This is because the directional axis strength "
"won't be equal to ``0.0`` when we expect it to. Since we don't want our car "
"to steer by itself in this case, we define a \"dead zone\" value of ``0.2`` "
"which will ignore all input whose strength is lower than ``0.2``. An ideal "
"dead zone value is high enough to ignore the input caused by joystick "
"drifting, but is low enough to not ignore actual input from the player."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:159
msgid ""
"Godot features a built-in dead zone system to tackle this problem. The "
"default value is ``0.2``, but you can increase it or decrease it on a per-"
"action basis in the Project Settings' Input Map tab. For ``Input."
"get_vector()``, the deadzone can be specified, or otherwise it will "
"calculate the average deadzone value from all of the actions in the vector."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:166
msgid "\"Echo\" events"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:168
msgid ""
"Unlike keyboard input, holding down a controller button such as a D-pad "
"direction will **not** generate repeated input events at fixed intervals "
"(also known as \"echo\" events). This is because the operating system never "
"sends \"echo\" events for controller input in the first place."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:173
msgid ""
"If you want controller buttons to send echo events, you will have to "
"generate :ref:`class_InputEvent` objects by code and parse them using :ref:"
"`Input.parse_input_event() <class_Input_method_parse_input_event>` at "
"regular intervals. This can be accomplished with the help of a :ref:"
"`class_Timer` node."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:184
msgid ""
"You can view a list of `known issues with controller support <https://github."
"com/godotengine/godot/issues?"
"q=is%3Aopen+is%3Aissue+label%3Atopic%3Ainput+gamepad>`__ on GitHub."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:189
msgid "My controller isn't recognized by Godot."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:191
msgid ""
"First, check that your controller is recognized by other applications. You "
"can use the `Gamepad Tester <https://gamepad-tester.com/>`__ website to "
"confirm that your controller is recognized."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:196
msgid "My controller has incorrectly mapped buttons or axes."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:198
msgid ""
"If buttons are incorrectly mapped, this may be due to an erroneous mapping "
"from the `SDL game controller database <https://github.com/gabomdq/"
"SDL_GameControllerDB>`__. You can contribute an updated mapping to be "
"included in the next Godot version by opening a pull request on the linked "
"repository."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:203
msgid ""
"There are many ways to create mappings. One option is to use the mapping "
"wizard in the `official Joypads demo <https://godotengine.org/asset-library/"
"asset/140>`__. Once you have a working mapping for your controller, you can "
"test it by defining the ``SDL_GAMECONTROLLERCONFIG`` environment variable "
"before running Godot:"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:224
msgid ""
"To test mappings on non-desktop platforms or to distribute your project with "
"additional controller mappings, you can add them by calling :ref:`Input."
"add_joy_mapping() <class_Input_method_add_joy_mapping>` as early as possible "
"in a script's ``_ready()`` function."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:230
msgid "My controller works on a given platform, but not on another platform."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:235
msgid ""
"Prior to Godot 3.3, official Godot binaries were compiled with udev support "
"but self-compiled binaries were compiled *without* udev support unless "
"``udev=yes`` was passed on the SCons command line. This made controller "
"hotplugging support unavailable in self-compiled binaries."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:241
#: ../../docs/tutorials/platform/platform_html5.rst:4
msgid "HTML5"
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:243
msgid ""
"HTML5 controller support is often less reliable compared to \"native\" "
"platforms. The quality of controller support tends to vary wildly across "
"browsers. As a result, you may have to instruct your players to use a "
"different browser if they can't get their controller to work."
msgstr ""

#: ../../docs/tutorials/inputs/controllers_gamepads_joysticks.rst:248
msgid ""
"Also, note that `controller support was significantly improved <https://"
"github.com/godotengine/godot/pull/45078>`__ in Godot 3.3 and later."
msgstr ""

#: ../../docs/tutorials/io/index.rst:2
msgid "Input and Output (I/O)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:4
msgid "Background loading"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:6
msgid ""
"When switching the main scene of your game (e.g. going to a new level), you "
"might want to show a loading screen with some indication that progress is "
"being made. The main load method (``ResourceLoader::load`` or just ``load`` "
"from GDScript) blocks your thread, making your game appear frozen and "
"unresponsive while the resource is being loaded. This document discusses the "
"alternative of using the ``ResourceInteractiveLoader`` class for smoother "
"load screens."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:15
msgid "ResourceInteractiveLoader"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:17
msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, and "
"control is returned to the caller. Each stage is generally a sub-resource "
"that is loaded by the main resource. For example, if you're loading a scene "
"that loads 10 images, each image will be one stage."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:24
#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:32
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:126
msgid "Usage"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:26
msgid "Usage is generally as follows"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:29
msgid "Obtaining a ResourceInteractiveLoader"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:35
msgid ""
"This method will give you a ResourceInteractiveLoader that you will use to "
"manage the load operation."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:39
msgid "Polling"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:45
msgid ""
"Use this method to advance the progress of the load. Each call to ``poll`` "
"will load the next stage of your resource. Keep in mind that each stage is "
"one entire \"atomic\" resource, such as an image, or a mesh, so it will take "
"several frames to load."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:50
msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. Any "
"other return value means there was an error and loading has stopped."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:54
msgid "Load progress (optional)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:56
msgid "To query the progress of the load, use the following methods:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:63
msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:67
msgid "Forcing completion (optional)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:73
msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:77
msgid "Obtaining the resource"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:83
msgid ""
"If everything goes well, use this method to retrieve your loaded resource."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:87
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:200
msgid "Example"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:89
msgid ""
"This example demonstrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:92
msgid ""
"First, we set up some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:107
msgid ""
"The function ``goto_scene`` is called from the game when the scene needs to "
"be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which could show a "
"progress bar or loading screen."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:129
msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then we "
"deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means loading is done, anything else means there was an "
"error. Also note we skip one frame (via ``wait_frames``, set on the "
"``goto_scene`` function) to allow the loading screen to show up."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:135
msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load fast, which means we might be able to cram "
"more than one call to ``poll`` in one frame; some might take way more than "
"your value for ``time_max``, so keep in mind we won't have precise control "
"over the timings."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:172
msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, or "
"can also update a paused animation (the animation represents the entire load "
"process from beginning to end). ``set_new_scene`` puts the newly loaded "
"scene on the tree. Because it's a scene being loaded, ``instance()`` needs "
"to be called on the resource obtained from the loader."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:199
#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:4
msgid "Using multiple threads"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:201
msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:205
msgid "Use a semaphore"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:207
msgid ""
"While your thread waits for the main thread to request a new resource, use a "
"``Semaphore`` to sleep (instead of a busy loop or anything similar)."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:211
msgid "Not blocking main thread during the polling"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:213
msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock the main thread while you call ``poll`` on your loader "
"class. When a resource is done loading, it might require some resources from "
"the low-level APIs (VisualServer, etc), which might need to lock the main "
"thread to acquire them. This might cause a deadlock if the main thread is "
"waiting for your mutex while your thread is waiting to load a resource."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:222
msgid "Example class"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:224
msgid ""
"You can find an example class for loading resources in threads here: :"
"download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as follows:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:231
msgid "Call after you instance the class to start the thread."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:237
msgid ""
"Queue a resource. Use optional argument \"p_in_front\" to put it in front of "
"the queue."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:244
msgid "Remove a resource from the queue, discarding any loading done."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:250
msgid ""
"Returns ``true`` if a resource is fully loaded and ready to be retrieved."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:256
msgid ""
"Get the progress of a resource. Returns -1 if there was an error (for "
"example if the resource is not in the queue), or a number between 0.0 and "
"1.0 with the progress of the load. Use mostly for cosmetic purposes "
"(updating progress bars, etc), use ``is_ready`` to find out if a resource is "
"actually ready."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:266
msgid ""
"Returns the fully loaded resource, or ``null`` on error. If the resource is "
"not fully loaded (``is_ready`` returns ``false``), it will block your thread "
"and finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:272
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:313
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:360
#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:41
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:71
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:92
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:154
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:165
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:177
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:335
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:90
#: ../../docs/community/contributing/code_style_guidelines.rst:159
msgid "Example:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:305
msgid ""
"**Note**: this code, in its current form, is not tested in real world "
"scenarios. If you run into any issues, ask for help in one of `Godot's "
"community channels <https://godotengine.org/community>`__."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:4
msgid "File paths in Godot projects"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:6
msgid ""
"This page explains how file paths work inside Godot projects. You will learn "
"how to access paths in your projects using the ``res://`` and ``user://`` "
"notations, and where Godot stores project and editor files on your and your "
"users' systems."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:11
msgid "Path separators"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:13
msgid ""
"To make supporting multiple platforms easier, Godot uses **UNIX-style path "
"separators** (forward slash ``/``). These work on all platforms, **including "
"Windows**."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:17
msgid ""
"Instead of writing paths like ``C:\\Projects\\Game``, in Godot, you should "
"write ``C:/Projects/Game``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:20
msgid ""
"Windows-style path separators (backward slash ``\\``) are also supported in "
"some path-related methods, but they need to be doubled (``\\\\``), as ``\\`` "
"is normally used as an escape for characters with a special meaning."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:24
msgid ""
"This makes it possible to work with paths returned by other Windows "
"applications. We still recommend using only forward slashes in your own code "
"to guarantee that everything will work as intended."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:29
msgid "Accessing files in the project folder (``res://``)"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:31
msgid ""
"Godot considers that a project exists in any folder that contains a "
"``project.godot`` text file, even if the file is empty. The folder that "
"contains this file is your project's root folder."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:35
msgid ""
"You can access any file relative to it by writing paths starting with "
"``res://``, which stands for resources. For example, you can access an image "
"file ``character.png`` located in the project's root folder in code with the "
"following path: ``res://character.png``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:41
msgid "Accessing persistent user data (``user://``)"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:43
msgid ""
"To store persistent data files, like the player's save or settings, you want "
"to use ``user://`` instead of ``res://`` as your path's prefix. This is "
"because when the game is running, the project's file system will likely be "
"read-only."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:47
msgid ""
"The ``user://`` prefix points to a different directory on the user's device. "
"Unlike ``res://``, the directory pointed at by ``user://`` is created "
"automatically and *guaranteed* to be writable to, even in an exported "
"project."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:51
msgid ""
"The location of the ``user://`` folder depends on what is configured in the "
"Project Settings:"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:54
msgid ""
"By default, the ``user://`` folder is created within Godot's :ref:`editor "
"data path <doc_data_paths_editor_data_paths>` in the ``app_userdata/"
"[project_name]`` folder. This is the default so that prototypes and test "
"projects stay self-contained within Godot's data folder."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:58
msgid ""
"If :ref:`application/config/use_custom_user_dir "
"<class_ProjectSettings_property_application/config/use_custom_user_dir>` is "
"enabled in the Project Settings, the ``user://`` folder is created **next "
"to** Godot's editor data path, i.e. in the standard location for "
"applications data."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:63
msgid ""
"By default, the folder name will be inferred from the project name, but it "
"can be further customized with :ref:`application/config/custom_user_dir_name "
"<class_ProjectSettings_property_application/config/custom_user_dir_name>`. "
"This path can contain path separators, so you can use it e.g. to group "
"projects of a given studio with a ``Studio Name/Game Name`` structure."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:69
msgid "On desktop platforms, the actual directory paths for ``user://`` are:"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:74
msgid "Default"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Windows: ``%APPDATA%\\Godot\\app_userdata\\[project_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid ""
"macOS: ``~/Library/Application Support/Godot/app_userdata/[project_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Linux: ``~/.local/share/godot/app_userdata/[project_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:78
msgid "Custom dir"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Windows: ``%APPDATA%\\[project_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "macOS: ``~/Library/Application Support/[project_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Linux: ``~/.local/share/[project_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:82
msgid "Custom dir and name"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Windows: ``%APPDATA%\\[custom_user_dir_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "macOS: ``~/Library/Application Support/[custom_user_dir_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Linux: ``~/.local/share/[custom_user_dir_name]``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:87
msgid ""
"``[project_name]`` is based on the application name defined in the Project "
"Settings, but you can override it on a per-platform basis using :ref:"
"`feature tags <doc_feature_tags>`."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:90
msgid ""
"On mobile platforms, this path is unique to the project and is not "
"accessible by other applications for security reasons."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:93
msgid ""
"On HTML5 exports, ``user://`` will refer to a virtual filesystem stored on "
"the device via IndexedDB. (Interaction with the main filesystem can still be "
"performed through the :ref:`JavaScript <class_JavaScript>` singleton.)"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:98
msgid "Converting paths to absolute paths or \"local\" paths"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:100
msgid ""
"You can use :ref:`ProjectSettings.globalize_path() "
"<class_ProjectSettings_method_globalize_path>` to convert a \"local\" path "
"like ``res://path/to/file.txt`` to an absolute OS path. For example, :ref:"
"`ProjectSettings.globalize_path() "
"<class_ProjectSettings_method_globalize_path>` can be used to open \"local\" "
"paths in the OS file manager using :ref:`OS.shell_open() "
"<class_OS_method_shell_open>` since it only accepts native OS paths."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:107
msgid ""
"To convert an absolute OS path to a \"local\" path starting with ``res://`` "
"or ``user://``, use :ref:`ProjectSettings.localize_path() "
"<class_ProjectSettings_method_localize_path>`. This only works for absolute "
"paths that point to files or folders in your project's root or ``user://`` "
"folders."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:115
msgid "Editor data paths"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:117
msgid ""
"The editor uses different paths for editor data, editor settings, and cache, "
"depending on the platform. By default, these paths are:"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:123
msgid "Editor data"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Windows: ``%APPDATA%\\Godot\\``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "macOS: ``~/Library/Application Support/Godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Linux: ``~/.local/share/godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:127
msgid "Editor settings"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Linux: ``~/.config/godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:131
msgid "Cache"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Windows: ``%TEMP%\\Godot\\``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "macOS: ``~/Library/Caches/Godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:0
msgid "Linux: ``~/.cache/godot/``"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:136
msgid "**Editor data** contains export templates and project-specific data."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:137
msgid ""
"**Editor settings** contains the main editor settings configuration file as "
"well as various other user-specific customizations (editor layouts, feature "
"profiles, script templates, etc.)."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:140
msgid ""
"**Cache** contains data generated by the editor, or stored temporarily. It "
"can safely be removed when Godot is closed."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:143
msgid ""
"Godot complies with the `XDG Base Directory Specification <https://"
"specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`__ on "
"all platforms. You can override environment variables following the "
"specification to change the editor and project data paths."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:148
msgid ""
"If you use `Godot packaged as a Flatpak <https://flathub.org/apps/details/"
"org.godotengine.Godot>`__, the editor data paths will be located in "
"subfolders in ``~/.var/app/org.godotengine.Godot/``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:156
msgid "Self-contained mode"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:158
msgid ""
"If you create a file called ``._sc_`` or ``_sc_`` in the same directory as "
"the editor binary (or in `MacOS/Contents/` for a macOS editor .app bundle), "
"Godot will enable *self-contained mode*. This mode makes Godot write all "
"editor data, settings, and cache to a directory named ``editor_data/`` in "
"the same directory as the editor binary. You can use it to create a portable "
"installation of the editor."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:165
msgid ""
"The `Steam release of Godot <https://store.steampowered.com/app/404790/>`__ "
"uses self-contained mode by default."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:170
msgid ""
"Self-contained mode is not supported in exported projects yet. To read and "
"write files relative to the executable path, use :ref:`OS."
"get_executable_path() <class_OS_method_get_executable_path>`. Note that "
"writing files in the executable path only works if the executable is placed "
"in a writable location (i.e. **not** Program Files or another directory that "
"is read-only for regular users)."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:4
msgid "Saving games"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:9
msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:17
msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:21
msgid "Identify persistent objects"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:23
msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:28
msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. We "
"can do this through either the GUI or script. Let's add the relevant nodes "
"using the GUI:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:34
msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:54
msgid "Serializing"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:56
msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper "
"functions for this, such as :ref:`to_json() "
"<class_@GDScript_method_to_json>` and :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, so we will use a dictionary. Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:119
msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:124
msgid "Saving and reading data"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:126
msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"so we can write to it or read from it. Now that we have a way to call our "
"groups and get their relevant data, let's use :ref:`to_json() "
"<class_@GDScript_method_to_json>` to convert it into an easily stored string "
"and store them in a file. Doing it this way ensures that each line is its "
"own object, so we have an easy way to pull the data out of the file as well."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:202
msgid ""
"Game saved! Loading is fairly simple as well. For that, we'll read each "
"line, use parse_json() to read it back to a dict, and then iterate over the "
"dict to read our values. But we'll need to first create the object and we "
"can use the filename and parent values to achieve that. Here is our load "
"function:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:293
msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:298
msgid "Some notes"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:300
msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:305
msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:4
msgid "Binary serialization API"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:9
msgid ""
"Godot has a simple serialization API based on Variant. It's used for "
"converting data types to an array of bytes efficiently. This API is used in "
"the functions ``get_var`` and ``store_var`` of :ref:`class_File` as well as "
"the packet APIs for :ref:`class_PacketPeer`. This format is *not* used for "
"binary scenes and resources."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:16
msgid "Packet specification"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:18
msgid ""
"The packet is designed to be always padded to 4 bytes. All values are little-"
"endian-encoded. All packets have a 4-byte header representing an integer, "
"specifying the type of data."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:22
msgid ""
"The lowest value two bytes are used to determine the type, while the highest "
"value two bytes contain flags::"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:29
#: ../../docs/tutorials/scripting/creating_script_templates.rst:147
msgid "Value"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:31
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:346
msgid "null"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:33
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:110
msgid "bool"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:35
msgid "integer"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:37
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:106
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:179
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:181
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:183
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:185
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:244
msgid "float"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:41
msgid "vector2"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:43
msgid "rect2"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:45
msgid "vector3"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:47
msgid "transform2d"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:49
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:320
msgid "9"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:49
msgid "plane"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:51
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:322
msgid "10"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:51
msgid "quat"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:53
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:324
msgid "11"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:53
msgid "aabb"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:55
#: ../../docs/tutorials/io/binary_serialization_api.rst:181
#: ../../docs/tutorials/io/binary_serialization_api.rst:196
#: ../../docs/tutorials/io/binary_serialization_api.rst:209
#: ../../docs/tutorials/io/binary_serialization_api.rst:228
#: ../../docs/tutorials/io/binary_serialization_api.rst:243
#: ../../docs/tutorials/io/binary_serialization_api.rst:258
#: ../../docs/tutorials/io/binary_serialization_api.rst:277
#: ../../docs/tutorials/io/binary_serialization_api.rst:302
#: ../../docs/tutorials/io/binary_serialization_api.rst:333
msgid "12"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:55
msgid "basis"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:57
msgid "13"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:57
msgid "transform"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:59
msgid "14"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:59
msgid "color"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:61
msgid "15"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:61
msgid "node path"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:63
#: ../../docs/tutorials/io/binary_serialization_api.rst:183
#: ../../docs/tutorials/io/binary_serialization_api.rst:211
#: ../../docs/tutorials/io/binary_serialization_api.rst:230
#: ../../docs/tutorials/io/binary_serialization_api.rst:245
#: ../../docs/tutorials/io/binary_serialization_api.rst:260
#: ../../docs/tutorials/io/binary_serialization_api.rst:279
#: ../../docs/tutorials/io/binary_serialization_api.rst:304
#: ../../docs/tutorials/io/binary_serialization_api.rst:335
msgid "16"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:63
msgid "rid"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:65
msgid "17"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:65
msgid "object"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:67
msgid "18"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:67
msgid "dictionary"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:69
msgid "19"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:69
msgid "array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:71
#: ../../docs/tutorials/io/binary_serialization_api.rst:213
#: ../../docs/tutorials/io/binary_serialization_api.rst:262
#: ../../docs/tutorials/io/binary_serialization_api.rst:281
#: ../../docs/tutorials/io/binary_serialization_api.rst:306
msgid "20"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:71
msgid "raw array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:73
msgid "21"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:73
msgid "int array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:75
msgid "22"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:75
msgid "real array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:77
msgid "23"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:77
msgid "string array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:79
#: ../../docs/tutorials/io/binary_serialization_api.rst:215
#: ../../docs/tutorials/io/binary_serialization_api.rst:264
#: ../../docs/tutorials/io/binary_serialization_api.rst:283
#: ../../docs/tutorials/io/binary_serialization_api.rst:308
msgid "24"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:79
msgid "vector2 array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:81
msgid "25"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:81
msgid "vector3 array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:83
msgid "26"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:83
msgid "color array"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:85
msgid "27"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:85
msgid "max"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:88
msgid ""
"Following this is the actual packet contents, which varies for each type of "
"packet. Note that this assumes Godot is compiled with single-precision "
"floats, which is the default. If Godot was compiled with double-precision "
"floats, the length of \"Float\" fields within data structures should be 8, "
"and the offset should be ``(offset - 4) * 2 + 4``. The \"float\" type itself "
"always uses double precision."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:96
msgid "0: null"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:99
msgid "1: :ref:`bool<class_bool>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:102
#: ../../docs/tutorials/io/binary_serialization_api.rst:113
#: ../../docs/tutorials/io/binary_serialization_api.rst:122
#: ../../docs/tutorials/io/binary_serialization_api.rst:133
#: ../../docs/tutorials/io/binary_serialization_api.rst:142
#: ../../docs/tutorials/io/binary_serialization_api.rst:151
#: ../../docs/tutorials/io/binary_serialization_api.rst:164
#: ../../docs/tutorials/io/binary_serialization_api.rst:175
#: ../../docs/tutorials/io/binary_serialization_api.rst:190
#: ../../docs/tutorials/io/binary_serialization_api.rst:203
#: ../../docs/tutorials/io/binary_serialization_api.rst:222
#: ../../docs/tutorials/io/binary_serialization_api.rst:237
#: ../../docs/tutorials/io/binary_serialization_api.rst:252
#: ../../docs/tutorials/io/binary_serialization_api.rst:271
#: ../../docs/tutorials/io/binary_serialization_api.rst:296
#: ../../docs/tutorials/io/binary_serialization_api.rst:327
#: ../../docs/tutorials/io/binary_serialization_api.rst:342
#: ../../docs/tutorials/io/binary_serialization_api.rst:351
#: ../../docs/tutorials/io/binary_serialization_api.rst:362
#: ../../docs/tutorials/io/binary_serialization_api.rst:372
#: ../../docs/tutorials/io/binary_serialization_api.rst:391
#: ../../docs/tutorials/io/binary_serialization_api.rst:403
#: ../../docs/tutorials/io/binary_serialization_api.rst:415
#: ../../docs/tutorials/io/binary_serialization_api.rst:428
#: ../../docs/tutorials/io/binary_serialization_api.rst:439
#: ../../docs/tutorials/io/binary_serialization_api.rst:450
#: ../../docs/tutorials/io/binary_serialization_api.rst:458
#: ../../docs/tutorials/io/binary_serialization_api.rst:471
#: ../../docs/tutorials/io/binary_serialization_api.rst:484
#: ../../docs/tutorials/io/binary_serialization_api.rst:499
msgid "Offset"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:102
#: ../../docs/tutorials/io/binary_serialization_api.rst:113
#: ../../docs/tutorials/io/binary_serialization_api.rst:122
#: ../../docs/tutorials/io/binary_serialization_api.rst:133
#: ../../docs/tutorials/io/binary_serialization_api.rst:142
#: ../../docs/tutorials/io/binary_serialization_api.rst:151
#: ../../docs/tutorials/io/binary_serialization_api.rst:164
#: ../../docs/tutorials/io/binary_serialization_api.rst:175
#: ../../docs/tutorials/io/binary_serialization_api.rst:190
#: ../../docs/tutorials/io/binary_serialization_api.rst:203
#: ../../docs/tutorials/io/binary_serialization_api.rst:222
#: ../../docs/tutorials/io/binary_serialization_api.rst:237
#: ../../docs/tutorials/io/binary_serialization_api.rst:252
#: ../../docs/tutorials/io/binary_serialization_api.rst:271
#: ../../docs/tutorials/io/binary_serialization_api.rst:296
#: ../../docs/tutorials/io/binary_serialization_api.rst:327
#: ../../docs/tutorials/io/binary_serialization_api.rst:342
#: ../../docs/tutorials/io/binary_serialization_api.rst:351
#: ../../docs/tutorials/io/binary_serialization_api.rst:362
#: ../../docs/tutorials/io/binary_serialization_api.rst:372
#: ../../docs/tutorials/io/binary_serialization_api.rst:391
#: ../../docs/tutorials/io/binary_serialization_api.rst:403
#: ../../docs/tutorials/io/binary_serialization_api.rst:415
#: ../../docs/tutorials/io/binary_serialization_api.rst:428
#: ../../docs/tutorials/io/binary_serialization_api.rst:439
#: ../../docs/tutorials/io/binary_serialization_api.rst:450
#: ../../docs/tutorials/io/binary_serialization_api.rst:458
#: ../../docs/tutorials/io/binary_serialization_api.rst:471
#: ../../docs/tutorials/io/binary_serialization_api.rst:484
#: ../../docs/tutorials/io/binary_serialization_api.rst:499
msgid "Len"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:104
#: ../../docs/tutorials/io/binary_serialization_api.rst:115
#: ../../docs/tutorials/io/binary_serialization_api.rst:124
#: ../../docs/tutorials/io/binary_serialization_api.rst:153
#: ../../docs/tutorials/io/binary_serialization_api.rst:344
#: ../../docs/tutorials/io/binary_serialization_api.rst:364
#: ../../docs/tutorials/io/binary_serialization_api.rst:366
#: ../../docs/tutorials/io/binary_serialization_api.rst:374
#: ../../docs/tutorials/io/binary_serialization_api.rst:393
#: ../../docs/tutorials/io/binary_serialization_api.rst:405
#: ../../docs/tutorials/io/binary_serialization_api.rst:417
#: ../../docs/tutorials/io/binary_serialization_api.rst:430
#: ../../docs/tutorials/io/binary_serialization_api.rst:432
#: ../../docs/tutorials/io/binary_serialization_api.rst:441
#: ../../docs/tutorials/io/binary_serialization_api.rst:443
#: ../../docs/tutorials/io/binary_serialization_api.rst:452
#: ../../docs/tutorials/io/binary_serialization_api.rst:460
#: ../../docs/tutorials/io/binary_serialization_api.rst:473
#: ../../docs/tutorials/io/binary_serialization_api.rst:486
#: ../../docs/tutorials/io/binary_serialization_api.rst:501
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:136
msgid "Integer"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:104
msgid "0 for False, 1 for True"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:108
msgid "2: :ref:`int<class_int>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:110
msgid ""
"If no flags are set (flags == 0), the integer is sent as a 32 bit integer:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:115
#: ../../docs/tutorials/io/binary_serialization_api.rst:432
msgid "32-bit signed integer"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:118
msgid ""
"If flag ``ENCODE_FLAG_64`` is set (``flags & 1 == 1``), the integer is sent "
"as a 64-bit integer:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:124
msgid "64-bit signed integer"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:128
msgid "3: :ref:`float<class_float>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:130
msgid ""
"If no flags are set (flags == 0), the float is sent as a 32 bit single "
"precision:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:135
#: ../../docs/tutorials/io/binary_serialization_api.rst:144
#: ../../docs/tutorials/io/binary_serialization_api.rst:166
#: ../../docs/tutorials/io/binary_serialization_api.rst:168
#: ../../docs/tutorials/io/binary_serialization_api.rst:177
#: ../../docs/tutorials/io/binary_serialization_api.rst:179
#: ../../docs/tutorials/io/binary_serialization_api.rst:181
#: ../../docs/tutorials/io/binary_serialization_api.rst:183
#: ../../docs/tutorials/io/binary_serialization_api.rst:192
#: ../../docs/tutorials/io/binary_serialization_api.rst:194
#: ../../docs/tutorials/io/binary_serialization_api.rst:196
#: ../../docs/tutorials/io/binary_serialization_api.rst:205
#: ../../docs/tutorials/io/binary_serialization_api.rst:207
#: ../../docs/tutorials/io/binary_serialization_api.rst:209
#: ../../docs/tutorials/io/binary_serialization_api.rst:211
#: ../../docs/tutorials/io/binary_serialization_api.rst:213
#: ../../docs/tutorials/io/binary_serialization_api.rst:215
#: ../../docs/tutorials/io/binary_serialization_api.rst:224
#: ../../docs/tutorials/io/binary_serialization_api.rst:226
#: ../../docs/tutorials/io/binary_serialization_api.rst:228
#: ../../docs/tutorials/io/binary_serialization_api.rst:230
#: ../../docs/tutorials/io/binary_serialization_api.rst:239
#: ../../docs/tutorials/io/binary_serialization_api.rst:241
#: ../../docs/tutorials/io/binary_serialization_api.rst:243
#: ../../docs/tutorials/io/binary_serialization_api.rst:245
#: ../../docs/tutorials/io/binary_serialization_api.rst:254
#: ../../docs/tutorials/io/binary_serialization_api.rst:256
#: ../../docs/tutorials/io/binary_serialization_api.rst:258
#: ../../docs/tutorials/io/binary_serialization_api.rst:260
#: ../../docs/tutorials/io/binary_serialization_api.rst:262
#: ../../docs/tutorials/io/binary_serialization_api.rst:264
#: ../../docs/tutorials/io/binary_serialization_api.rst:273
#: ../../docs/tutorials/io/binary_serialization_api.rst:275
#: ../../docs/tutorials/io/binary_serialization_api.rst:277
#: ../../docs/tutorials/io/binary_serialization_api.rst:279
#: ../../docs/tutorials/io/binary_serialization_api.rst:281
#: ../../docs/tutorials/io/binary_serialization_api.rst:283
#: ../../docs/tutorials/io/binary_serialization_api.rst:285
#: ../../docs/tutorials/io/binary_serialization_api.rst:287
#: ../../docs/tutorials/io/binary_serialization_api.rst:289
#: ../../docs/tutorials/io/binary_serialization_api.rst:298
#: ../../docs/tutorials/io/binary_serialization_api.rst:300
#: ../../docs/tutorials/io/binary_serialization_api.rst:302
#: ../../docs/tutorials/io/binary_serialization_api.rst:304
#: ../../docs/tutorials/io/binary_serialization_api.rst:306
#: ../../docs/tutorials/io/binary_serialization_api.rst:308
#: ../../docs/tutorials/io/binary_serialization_api.rst:310
#: ../../docs/tutorials/io/binary_serialization_api.rst:312
#: ../../docs/tutorials/io/binary_serialization_api.rst:314
#: ../../docs/tutorials/io/binary_serialization_api.rst:316
#: ../../docs/tutorials/io/binary_serialization_api.rst:318
#: ../../docs/tutorials/io/binary_serialization_api.rst:320
#: ../../docs/tutorials/io/binary_serialization_api.rst:329
#: ../../docs/tutorials/io/binary_serialization_api.rst:331
#: ../../docs/tutorials/io/binary_serialization_api.rst:333
#: ../../docs/tutorials/io/binary_serialization_api.rst:335
#: ../../docs/tutorials/io/binary_serialization_api.rst:475
#: ../../docs/tutorials/io/binary_serialization_api.rst:477
#: ../../docs/tutorials/io/binary_serialization_api.rst:488
#: ../../docs/tutorials/io/binary_serialization_api.rst:490
#: ../../docs/tutorials/io/binary_serialization_api.rst:492
#: ../../docs/tutorials/io/binary_serialization_api.rst:503
#: ../../docs/tutorials/io/binary_serialization_api.rst:505
#: ../../docs/tutorials/io/binary_serialization_api.rst:507
#: ../../docs/tutorials/io/binary_serialization_api.rst:509
msgid "Float"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:135
msgid "IEEE 754 single-precision float"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:138
msgid ""
"If flag ``ENCODE_FLAG_64`` is set (``flags & 1 == 1``), the float is sent as "
"a 64-bit double precision number:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:144
msgid "IEEE 754 double-precision float"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:148
msgid "4: :ref:`String<class_string>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:153
msgid "String length (in bytes)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:155
#: ../../docs/tutorials/io/binary_serialization_api.rst:353
#: ../../docs/tutorials/io/binary_serialization_api.rst:376
#: ../../docs/tutorials/io/binary_serialization_api.rst:462
msgid "X"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:155
#: ../../docs/tutorials/io/binary_serialization_api.rst:353
#: ../../docs/tutorials/io/binary_serialization_api.rst:376
#: ../../docs/tutorials/io/binary_serialization_api.rst:462
msgid "Bytes"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:155
#: ../../docs/tutorials/io/binary_serialization_api.rst:353
#: ../../docs/tutorials/io/binary_serialization_api.rst:376
#: ../../docs/tutorials/io/binary_serialization_api.rst:462
msgid "UTF-8 encoded string"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:158
msgid "This field is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:161
msgid "5: :ref:`Vector2<class_vector2>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:166
#: ../../docs/tutorials/io/binary_serialization_api.rst:177
#: ../../docs/tutorials/io/binary_serialization_api.rst:192
#: ../../docs/tutorials/io/binary_serialization_api.rst:254
#: ../../docs/tutorials/io/binary_serialization_api.rst:475
#: ../../docs/tutorials/io/binary_serialization_api.rst:488
msgid "X coordinate"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:168
#: ../../docs/tutorials/io/binary_serialization_api.rst:179
#: ../../docs/tutorials/io/binary_serialization_api.rst:194
#: ../../docs/tutorials/io/binary_serialization_api.rst:256
#: ../../docs/tutorials/io/binary_serialization_api.rst:477
#: ../../docs/tutorials/io/binary_serialization_api.rst:490
msgid "Y coordinate"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:172
msgid "6: :ref:`Rect2<class_rect2>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:181
#: ../../docs/tutorials/io/binary_serialization_api.rst:260
msgid "X size"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:183
#: ../../docs/tutorials/io/binary_serialization_api.rst:262
msgid "Y size"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:187
msgid "7: :ref:`Vector3<class_vector3>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:196
#: ../../docs/tutorials/io/binary_serialization_api.rst:258
#: ../../docs/tutorials/io/binary_serialization_api.rst:492
msgid "Z coordinate"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:200
msgid "8: :ref:`Transform2D<class_transform2d>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:205
#: ../../docs/tutorials/io/binary_serialization_api.rst:273
#: ../../docs/tutorials/io/binary_serialization_api.rst:298
msgid "The X component of the X column vector, accessed via [0][0]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:207
#: ../../docs/tutorials/io/binary_serialization_api.rst:275
#: ../../docs/tutorials/io/binary_serialization_api.rst:300
msgid "The Y component of the X column vector, accessed via [0][1]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:209
#: ../../docs/tutorials/io/binary_serialization_api.rst:279
#: ../../docs/tutorials/io/binary_serialization_api.rst:304
msgid "The X component of the Y column vector, accessed via [1][0]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:211
#: ../../docs/tutorials/io/binary_serialization_api.rst:281
#: ../../docs/tutorials/io/binary_serialization_api.rst:306
msgid "The Y component of the Y column vector, accessed via [1][1]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:213
msgid "The X component of the origin vector, accessed via [2][0]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:215
msgid "The Y component of the origin vector, accessed via [2][1]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:219
msgid "9: :ref:`Plane<class_plane>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:224
msgid "Normal X"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:226
msgid "Normal Y"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:228
msgid "Normal Z"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:230
msgid "Distance"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:234
msgid "10: :ref:`Quat<class_quat>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:239
msgid "Imaginary X"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:241
msgid "Imaginary Y"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:243
msgid "Imaginary Z"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:245
msgid "Real W"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:249
msgid "11: :ref:`AABB<class_aabb>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:264
msgid "Z size"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:268
msgid "12: :ref:`Basis<class_basis>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:277
#: ../../docs/tutorials/io/binary_serialization_api.rst:302
msgid "The Z component of the X column vector, accessed via [0][2]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:283
#: ../../docs/tutorials/io/binary_serialization_api.rst:308
msgid "The Z component of the Y column vector, accessed via [1][2]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:285
#: ../../docs/tutorials/io/binary_serialization_api.rst:310
msgid "28"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:285
#: ../../docs/tutorials/io/binary_serialization_api.rst:310
msgid "The X component of the Z column vector, accessed via [2][0]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:287
#: ../../docs/tutorials/io/binary_serialization_api.rst:312
msgid "32"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:287
#: ../../docs/tutorials/io/binary_serialization_api.rst:312
msgid "The Y component of the Z column vector, accessed via [2][1]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:289
#: ../../docs/tutorials/io/binary_serialization_api.rst:314
msgid "36"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:289
#: ../../docs/tutorials/io/binary_serialization_api.rst:314
msgid "The Z component of the Z column vector, accessed via [2][2]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:293
msgid "13: :ref:`Transform<class_transform>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:316
msgid "40"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:316
msgid "The X component of the origin vector, accessed via [3][0]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:318
msgid "44"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:318
msgid "The Y component of the origin vector, accessed via [3][1]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:320
msgid "48"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:320
msgid "The Z component of the origin vector, accessed via [3][2]"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:324
msgid "14: :ref:`Color<class_color>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:329
#: ../../docs/tutorials/io/binary_serialization_api.rst:503
msgid "Red (typically 0..1, can be above 1 for overbright colors)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:331
#: ../../docs/tutorials/io/binary_serialization_api.rst:505
msgid "Green (typically 0..1, can be above 1 for overbright colors)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:333
#: ../../docs/tutorials/io/binary_serialization_api.rst:507
msgid "Blue (typically 0..1, can be above 1 for overbright colors)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:335
#: ../../docs/tutorials/io/binary_serialization_api.rst:509
msgid "Alpha (0..1)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:339
msgid "15: :ref:`NodePath<class_nodepath>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:344
msgid ""
"String length, or new format (val&0x80000000!=0 and NameCount=val&0x7FFFFFFF)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:348
msgid "For old format:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:356
msgid "Padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:359
msgid "For new format:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:364
msgid "Sub-name count"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:366
msgid "Flags (absolute: val&1 != 0 )"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:369
msgid "For each Name and Sub-Name"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:374
#: ../../docs/tutorials/io/binary_serialization_api.rst:460
msgid "X+0"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:374
#: ../../docs/tutorials/io/binary_serialization_api.rst:460
msgid "String length"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:376
#: ../../docs/tutorials/io/binary_serialization_api.rst:462
msgid "X+4"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:379
msgid "Every name string is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:382
msgid "16: :ref:`RID<class_rid>` (unsupported)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:385
msgid "17: :ref:`Object<class_object>` (unsupported)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:388
msgid "18: :ref:`Dictionary<class_dictionary>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:393
#: ../../docs/tutorials/io/binary_serialization_api.rst:405
msgid "val&0x7FFFFFFF = elements, val&0x80000000 = shared (bool)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:396
msgid ""
"Then what follows is, for amount of \"elements\", pairs of key and value, "
"one after the other, using this same format."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:400
msgid "19: :ref:`Array<class_array>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:408
msgid ""
"Then what follows is, for amount of \"elements\", values one after the "
"other, using this same format."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:412
msgid "20: :ref:`PoolByteArray<class_poolbytearray>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:417
msgid "Array length (Bytes)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:419
msgid "8..8+length"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:419
msgid "Byte"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:419
msgid "Byte (0..255)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:422
msgid "The array data is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:425
msgid "21: :ref:`PoolIntArray<class_poolintarray>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:430
msgid "Array length (Integers)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:432
#: ../../docs/tutorials/io/binary_serialization_api.rst:443
msgid "8..8+length\\*4"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:436
msgid "22: :ref:`PoolRealArray<class_poolrealarray>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:441
msgid "Array length (Floats)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:443
msgid "32-bits IEEE 754 float"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:447
msgid "23: :ref:`PoolStringArray<class_poolstringarray>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:452
msgid "Array length (Strings)"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:455
msgid "For each String:"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:465
msgid "Every string is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:468
msgid "24: :ref:`PoolVector2Array<class_poolvector2array>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:473
#: ../../docs/tutorials/io/binary_serialization_api.rst:486
#: ../../docs/tutorials/io/binary_serialization_api.rst:501
msgid "Array length"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:475
msgid "8..8+length\\*8"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:477
msgid "8..12+length\\*8"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:481
msgid "25: :ref:`PoolVector3Array<class_poolvector3array>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:488
msgid "8..8+length\\*12"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:490
msgid "8..12+length\\*12"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:492
msgid "8..16+length\\*12"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:496
msgid "26: :ref:`PoolColorArray<class_poolcolorarray>`"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:503
msgid "8..8+length\\*16"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:505
msgid "8..12+length\\*16"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:507
msgid "8..16+length\\*16"
msgstr ""

#: ../../docs/tutorials/io/binary_serialization_api.rst:509
msgid "8..20+length\\*16"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:4
msgid "Vector math"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:9
msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:15
msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:21
msgid "Coordinate systems (2D)"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:23
msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:29
msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:34
msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:41
msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` and a length (or magnitude) ``m``. In this case, the arrow "
"is a **position vector** - it denotes a position in space, relative to the "
"origin."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:47
msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:53
msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:58
msgid "Vector operations"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:60
msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:76
msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:81
msgid "Member access"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:83
msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:105
msgid "Adding vectors"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:107
msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:118
msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:123
msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:126
msgid "Scalar multiplication"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:128
msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:131
msgid "A vector can be multiplied by a **scalar**:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:146
msgid ""
"Multiplying a vector by a scalar does not change its direction, only its "
"magnitude. This is how you **scale** a vector."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:150
msgid "Practical applications"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:152
msgid "Let's look at two common uses for vector addition and subtraction."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:155
msgid "Movement"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:157
msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1,3)`` and a "
"velocity vector of ``(2,1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:165
msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding velocity to the previous position."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:169
msgid "Pointing toward a target"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:171
msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:177
msgid "To find a vector pointing from ``A`` to ``B`` use ``B - A``."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:180
msgid "Unit vectors"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:182
msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:187
msgid "Normalization"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:189
msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude. Because this is such a common operation, ``Vector2`` and "
"``Vector3`` provide a method for normalizing:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:204
msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so will result in an "
"error."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:209
msgid "Reflection"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:211
msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:216
msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:221
msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, the :ref:`Vector2 <class_Vector2>` class has a ``bounce()`` method to "
"handle this. Here is a GDScript example of the diagram above using a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:251
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:754
msgid "Dot product"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:253
msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:258
msgid "The formula for dot product takes two common forms:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:262
#: ../../docs/tutorials/scripting/singletons_autoload.rst:273
msgid "and"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:266
msgid ""
"However, in most cases it is easiest to use the built-in method. Note that "
"the order of the two vectors does not matter:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:280
msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cosθ``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:286
msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:290
msgid "Facing"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:292
msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:298
msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombies' facing directions and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it, however, Godot has a helper method "
"to do this called ``direction_to``. If the angle between this vector and the "
"facing vector is less than 90°, then the zombie can see the player."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:306
msgid "In code it would look like this:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:324
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:756
msgid "Cross product"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:326
msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:335
msgid "The cross product is calculated like this:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:354
msgid "With Godot, you can use the built-in method:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:365
msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:370
msgid "Calculating normals"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:372
msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB x AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:377
msgid "Here is a function to calculate a triangle's normal:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:401
msgid "Pointing to a target"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:403
msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:411
#: ../../docs/tutorials/math/vectors_advanced.rst:589
msgid "More information"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:413
msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:415
msgid ":ref:`doc_vectors_advanced`"
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:416
#: ../../docs/tutorials/math/vectors_advanced.rst:593
msgid ":ref:`doc_matrices_and_transforms`"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:4
msgid "Advanced vector math"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:7
msgid "Planes"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:9
msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:17
msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:24
msgid ""
"It's as simple as it looks. The plane passes by the origin and the surface "
"of it is perpendicular to the unit vector (or *normal*). The side towards "
"the vector points to is the positive half-space, while the other side is the "
"negative half-space. In 3D this is exactly the same, except that the plane "
"is an infinite surface (imagine an infinite, flat sheet of paper that you "
"can orient and is pinned to the origin) instead of a line."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:33
msgid "Distance to plane"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:35
msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:49
msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:54
msgid "This allows us to tell which side of the plane a point is."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:57
msgid "Away from the origin"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:59
msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:63
msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:67
msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:73
msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:76
msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:91
msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:105
msgid "The same thing, using a built-in function:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:116
msgid "This will, again, return either a positive or negative distance."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:118
msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:133
msgid ""
"Of course, Godot also implements this operator in :ref:`Plane "
"<class_Plane>`, so doing:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:145
msgid "Will work as expected."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:147
msgid ""
"So, remember, a plane is just that and its main practical use is calculating "
"the distance to it. So, why is it useful to calculate the distance from a "
"point to a plane? It's extremely useful! Let's see some simple examples.."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:153
msgid "Constructing a plane in 2D"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:155
msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:159
msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so just calculate D from the dot product of the normal "
"and the point."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:174
msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:199
msgid ""
"The rest is the same as the previous example, either point_a or point_b will "
"work since they are in the same plane:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:217
msgid ""
"Doing the same in 3D is a little more complex and will be explained further "
"down."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:221
msgid "Some examples of planes"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:223
msgid ""
"Here is a simple example of what planes are useful for. Imagine you have a "
"`convex <https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:228
msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:232
msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:238
#: ../../docs/tutorials/math/vectors_advanced.rst:277
msgid "Code should be something like this:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:263
msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:268
msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:368
msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:375
msgid "Collision detection in 3D"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:377
msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:383
msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:387
msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:391
msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:396
msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:402
msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:408
msgid "So the final algorithm is something like:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:591
msgid ""
"For more information on using vector math in Godot, see the following "
"article:"
msgstr ""

#: ../../docs/tutorials/math/vectors_advanced.rst:595
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video series \"Essence of Linear Algebra\": https://www.youtube."
"com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:4
msgid "Matrices and transforms"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:9
msgid ""
"Before reading this tutorial, we recommend that you thoroughly read and "
"understand the :ref:`doc_vector_math` tutorial, as this tutorial requires a "
"knowledge of vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:13
msgid ""
"This tutorial is about *transformations* and how we represent them in Godot "
"using matrices. It is not a full in-depth guide to matrices. Transformations "
"are most of the time applied as translation, rotation, and scale, so we will "
"focus on how to represent those with matrices."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:18
msgid ""
"Most of this guide focuses on 2D, using :ref:`class_Transform2D` and :ref:"
"`class_Vector2`, but the way things work in 3D is very similar."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:21
msgid ""
"As mentioned in the previous tutorial, it is important to remember that in "
"Godot, the Y axis points *down* in 2D. This is the opposite of how most "
"schools teach linear algebra, with the Y axis pointing up."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:26
msgid ""
"The convention is that the X axis is red, the Y axis is green, and the Z "
"axis is blue. This tutorial is color-coded to match these conventions, but "
"we will also represent the origin vector with a blue color."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:32
msgid "Matrix components and the Identity matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:34
msgid ""
"The identity matrix represents a transform with no translation, no rotation, "
"and no scale. Let's start by looking at the identity matrix and how its "
"components relate to how it visually appears."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:40
msgid ""
"Matrices have rows and columns, and a transformation matrix has specific "
"conventions on what each does."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:43
msgid ""
"In the image above, we can see that the red X vector is represented by the "
"first column of the matrix, and the green Y vector is likewise represented "
"by the second column. A change to the columns will change these vectors. We "
"will see how they can be manipulated in the next few examples."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:49
msgid ""
"You should not worry about manipulating rows directly, as we usually work "
"with columns. However, you can think of the rows of the matrix as showing "
"which vectors contribute to moving in a given direction."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:53
msgid ""
"When we refer to a value such as `t.x.y`, that's the Y component of the X "
"column vector. In other words, the bottom-left of the matrix. Similarly, `t."
"x.x` is top-left, `t.y.x` is top-right, and `t.y.y` is bottom-right, where "
"`t` is the Transform2D."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:59
msgid "Scaling the transformation matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:61
msgid ""
"Applying a scale is one of the easiest operations to understand. Let's start "
"by placing the Godot logo underneath our vectors so that we can visually see "
"the effects on an object:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:67
msgid ""
"Now, to scale the matrix, all we need to do is multiply each component by "
"the scale we want. Let's scale it up by 2. 1 times 2 becomes 2, and 0 times "
"2 becomes 0, so we end up with this:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:73
msgid "To do this in code, we can simply multiply each of the vectors:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:92
msgid ""
"If we wanted to return it to its original scale, we can multiply each "
"component by 0.5. That's pretty much all there is to scaling a "
"transformation matrix."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:96
msgid ""
"To calculate the object's scale from an existing transformation matrix, you "
"can use `length()` on each of the column vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:99
msgid ""
"In actual projects, you can use the `scaled()` method to perform scaling."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:103
msgid "Rotating the transformation matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:105
msgid ""
"We'll start the same way as earlier, with the Godot logo underneath the "
"identity matrix:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:110
msgid ""
"As an example, let's say we want to rotate our Godot logo clockwise by 90 "
"degrees. Right now the X axis points right and the Y axis points down. If we "
"rotate these in our head, we would logically see that the new X axis should "
"point down and the new Y axis should point left."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:116
msgid ""
"You can imagine that you grab both the Godot logo and its vectors, and then "
"spin it around the center. Wherever you finish spinning, the orientation of "
"the vectors determines what the matrix is."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:120
msgid ""
"We need to represent \"down\" and \"left\" in normal coordinates, so means "
"we'll set X to (0, 1) and Y to (-1, 0). These are also the values of "
"`Vector2.DOWN` and `Vector2.LEFT`. When we do this, we get the desired "
"result of rotating the object:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:127
msgid ""
"If you have trouble understanding the above, try this exercise: Cut a square "
"of paper, draw X and Y vectors on top of it, place it on graph paper, then "
"rotate it and note the endpoints."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:131
msgid ""
"To perform rotation in code, we need to be able to calculate the values "
"programmatically. This image shows the formulas needed to calculate the "
"transformation matrix from a rotation angle. Don't worry if this part seems "
"complicated, I promise it's the hardest thing you need to know."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:139
msgid ""
"Godot represents all rotations with radians, not degrees. A full turn is "
"`TAU` or `PI*2` radians, and a quarter turn of 90 degrees is `TAU/4` or "
"`PI/2` radians. Working with `TAU` usually results in more readable code."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:144
msgid ""
"Fun fact: In addition to Y being *down* in Godot, rotation is represented "
"clockwise. This means that all the math and trig functions behave the same "
"as a Y-is-up CCW system, since these differences \"cancel out\". You can "
"think of rotations in both systems being \"from X to Y\"."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:150
msgid ""
"In order to perform a rotation of 0.5 radians (about 28.65 degrees), we "
"simply plug in a value of 0.5 to the formula above and evaluate to find what "
"the actual values should be:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:156
msgid "Here's how that would be done in code (place the script on a Node2D):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:178
msgid ""
"To calculate the object's rotation from an existing transformation matrix, "
"you can use `atan2(t.x.y, t.x.x)`, where t is the Transform2D."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:181
msgid ""
"In actual projects, you can use the `rotated()` method to perform rotations."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:185
msgid "Basis of the transformation matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:187
msgid ""
"So far we have only been working with the `x` and `y`, vectors, which are in "
"charge of representing rotation, scale, and/or shearing (advanced, covered "
"at the end). The X and Y vectors are together called the *basis* of the "
"transformation matrix. The terms \"basis\" and \"basis vectors\" are "
"important to know."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:193
msgid ""
"You might have noticed that :ref:`class_Transform2D` actually has three :ref:"
"`class_Vector2` values: `x`, `y`, and `origin`. The `origin` value is not "
"part of the basis, but it is part of the transform, and we need it to "
"represent position. From now on we'll keep track of the origin vector in all "
"examples. You can think of origin as another column, but it's often better "
"to think of it as completely separate."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:201
msgid ""
"Note that in 3D, Godot has a separate :ref:`class_Basis` structure for "
"holding the three :ref:`class_Vector3` values of the basis, since the code "
"can get complex and it makes sense to separate it from :ref:"
"`class_Transform` (which is composed of one :ref:`class_Basis` and one "
"extra :ref:`class_Vector3` for the origin)."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:208
msgid "Translating the transformation matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:210
msgid ""
"Changing the `origin` vector is called a *translating* the transformation "
"matrix. Translating is basically a technical term for \"moving\" the object, "
"but it explicitly does not involve any rotation."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:214
msgid ""
"Let's work through an example to help understand this. We will start with "
"the identity transform like last time, except we will keep track of the "
"origin vector this time."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:220
msgid ""
"If we want the object to move to a position of (1, 2), we simply need to set "
"its `origin` vector to (1, 2):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:225
msgid ""
"There is also a `translated()` method, which performs a different operation "
"to adding or changing `origin` directly. The `translated()` method will "
"translate the object *relative to its own rotation*. For example, an object "
"rotated 90 degrees clockwise will move to the right when `translated()` with "
"`Vector2.UP`."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:231
msgid ""
"Godot's 2D uses coordinates based on pixels, so in actual projects you will "
"want to translate by hundreds of units."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:235
msgid "Putting it all together"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:237
msgid ""
"We're going to apply everything we mentioned so far onto one transform. To "
"follow along, create a simple project with a Sprite node and use the Godot "
"logo for the texture resource."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:241
msgid ""
"Let's set the translation to (350, 150), rotate by -0.5 rad, and scale by 3. "
"I've posted a screenshot, and the code to reproduce it, but I encourage you "
"to try and reproduce the screenshot without looking at the code!"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:280
msgid "Shearing the transformation matrix (advanced)"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:282
msgid ""
"If you are only looking for how to *use* transformation matrices, feel free "
"to skip this section of the tutorial. This section explores an uncommonly "
"used aspect of transformation matrices for the purpose of building an "
"understanding of them."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:287
msgid ""
"You may have noticed that a transform has more degrees of freedom than the "
"combination of the above actions. The basis of a 2D transformation matrix "
"has four total numbers in two :ref:`class_Vector2` values, while a rotation "
"value and a Vector2 for scale only has 3 numbers. The high-level concept for "
"the missing degree of freedom is called *shearing*."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:293
msgid ""
"Normally, you will always have the basis vectors perpendicular to each "
"other. However, shearing can be useful in some situations, and understanding "
"shearing helps you understand how transforms work."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:297
msgid ""
"To show you visually how it will look, let's overlay a grid onto the Godot "
"logo:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:302
msgid ""
"Each point on this grid is obtained by adding the basis vectors together. "
"The bottom-right corner is X + Y, while the top-right corner is X - Y. If we "
"change the basis vectors, the entire grid moves with it, as the grid is "
"composed of the basis vectors. All lines on the grid that are currently "
"parallel will remain parallel no matter what changes we make to the basis "
"vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:309
msgid "As an example, let's set Y to (1, 1):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:328
msgid ""
"You can't set the raw values of a Transform2D in the editor, so you *must* "
"use code if you want to shear the object."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:331
msgid ""
"Due to the vectors no longer being perpendicular, the object has been "
"sheared. The bottom-center of the grid, which is (0, 1) relative to itself, "
"is now located at a world position of (1, 1)."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:335
msgid ""
"The intra-object coordinates are called UV coordinates in textures, so let's "
"borrow that terminology for here. To find the world position from a relative "
"position, the formula is U * X + V * Y, where U and V are numbers and X and "
"Y are the basis vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:340
msgid ""
"The bottom-right corner of the grid, which is always at the UV position of "
"(1, 1), is at the world position of (2, 1), which is calculated from X*1 + "
"Y*1, which is (1, 0) + (1, 1), or (1 + 1, 0 + 1), or (2, 1). This matches up "
"with our observation of where the bottom-right corner of the image is."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:346
msgid ""
"Similarly, the top-right corner of the grid, which is always at the UV "
"position of (1, -1), is at the world position of (0, -1), which is "
"calculated from X*1 + Y*-1, which is (1, 0) - (1, 1), or (1 - 1, 0 - 1), or "
"(0, -1). This matches up with our observation of where the top-right corner "
"of the image is."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:352
msgid ""
"Hopefully you now fully understand the how a transformation matrix affects "
"the object, and the relationship between the basis vectors and how the "
"object's \"UV\" or \"intra-coordinates\" have their world position changed."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:356
msgid ""
"In Godot, all transform math is done relative to the parent node. When we "
"refer to \"world position\", that would be relative to the node's parent "
"instead, if the node had a parent."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:360
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about linear transformations: https://www.youtube.com/watch?"
"v=kYB8IZa5AuE"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:365
msgid "Practical applications of transforms"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:367
msgid ""
"In actual projects, you will usually be working with transforms inside "
"transforms by having multiple :ref:`class_Node2D` or :ref:`class_Spatial` "
"nodes parented to each other."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:371
msgid ""
"However, sometimes it's very useful to manually calculate the values we "
"need. We will go over how you could use :ref:`class_Transform2D` or :ref:"
"`class_Transform` to manually calculate transforms of nodes."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:376
msgid "Converting positions between transforms"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:378
msgid ""
"There are many cases where you'd want to convert a position in and out of a "
"transform. For example, if you have a position relative to the player and "
"would like to find the world (parent-relative) position, or if you have a "
"world position and want to know where it is relative to the player."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:383
msgid ""
"We can find what a vector relative to the player would be defined in world "
"space as using the \"xform\" method:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:397
msgid ""
"And we can use the \"xform_inv\" method to find a what world space position "
"would be if it was instead defined relative to the player:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:411
msgid ""
"If you know in advance that the transform is positioned at (0, 0), you can "
"use the \"basis_xform\" or \"basis_xform_inv\" methods instead, which skip "
"dealing with translation."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:416
msgid "Moving an object relative to itself"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:418
msgid ""
"A common operation, especially in 3D games, is to move an object relative to "
"itself. For example, in first-person shooter games, you would want the "
"character to move forward (-Z axis) when you press :kbd:`W`."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:422
msgid ""
"Since the basis vectors are the orientation relative to the parent, and the "
"origin vector is the position relative to the parent, we can simply add "
"multiples of the basis vectors to move an object relative to itself."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:426
msgid "This code moves an object 100 units to its own right:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:439
msgid "For moving in 3D, you would need to replace \"x\" with \"basis.x\"."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:441
msgid ""
"In actual projects, you can use `translate_object_local` in 3D or "
"`move_local_x` and `move_local_y` in 2D to do this."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:445
msgid "Applying transforms onto transforms"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:447
msgid ""
"One of the most important things to know about transforms is how you can use "
"several of them together. A parent node's transform affects all of its "
"children. Let's dissect an example."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:451
msgid ""
"In this image, the child node has a \"2\" after the component names to "
"distinguish them from the parent node. It might look a bit overwhelming with "
"so many numbers, but remember that each number is displayed twice (next to "
"the arrows and also in the matrices), and that almost half of the numbers "
"are zero."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:459
msgid ""
"The only transformations going on here are that the parent node has been "
"given a scale of (2, 1), the child has been given a scale of (0.5, 0.5), and "
"both nodes have been given positions."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:463
msgid ""
"All child transformations are affected by the parent transformations. The "
"child has a scale of (0.5, 0.5), so you would expect it to be a 1:1 ratio "
"square, and it is, but only relative to the parent. The child's X vector "
"ends up being (1, 0) in world space, because it is scaled by the parent's "
"basis vectors. Similarly, the child node's `origin` vector is set to (1, 1), "
"but this actually moves it (2, 1) in world space, due to the parent node's "
"basis vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:472
msgid ""
"To calculate a child transform's world space transform manually, this is the "
"code we would use:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:510
msgid ""
"In actual projects, we can find the world transform of the child by applying "
"one transform onto another using the `*` operator:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:532
msgid "When multiplying matrices, order matters! Don't mix them up."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:534
msgid "Lastly, applying the identity transform will always do nothing."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:536
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about matrix composition: https://www.youtube.com/watch?"
"v=XkY2DOUCWMU"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:541
msgid "Inverting a transformation matrix"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:543
msgid ""
"The \"affine_inverse\" function returns a transform that \"undoes\" the "
"previous transform. This can be useful in some situations, but it's easier "
"to just provide a few examples."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:547
msgid ""
"Multiplying an inverse transform by the normal transform undoes all "
"transformations:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:563
msgid ""
"Transforming a position by a transform and its inverse results in the same "
"position (same for \"xform_inv\"):"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:582
msgid "How does it all work in 3D?"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:584
msgid ""
"One of the great things about transformation matrices is that they work very "
"similarly between 2D and 3D transformations. All the code and formulas used "
"above for 2D work the same in 3D, with 3 exceptions: the addition of a third "
"axis, that each axis is of type :ref:`class_Vector3`, and also that Godot "
"stores the :ref:`class_Basis` separately from the :ref:`class_Transform`, "
"since the math can get complex and it makes sense to separate it."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:592
msgid ""
"All of the concepts for how translation, rotation, scale, and shearing work "
"in 3D are all the same compared to 2D. To scale, we take each component and "
"multiply it; to rotate, we change where each basis vector is pointing; to "
"translate, we manipulate the origin; and to shear, we change the basis "
"vectors to be non-perpendicular."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:600
msgid ""
"If you would like, it's a good idea to play around with transforms to get an "
"understanding of how they work. Godot allows you to edit 3D transform "
"matrices directly from the inspector. You can download this project which "
"has colored lines and cubes to help visualize the :ref:`class_Basis` vectors "
"and the origin in both 2D and 3D: https://github.com/godotengine/godot-demo-"
"projects/tree/master/misc/matrix_transform"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:607
msgid ""
"Spatial's \"Matrix\" section in Godot 3.2's inspector displays the matrix as "
"transposed, with the columns horizontal and the rows vertical. This may be "
"changed to be less confusing in a future release of Godot."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:612
msgid ""
"You cannot edit Node2D's transform matrix directly in Godot 3.2's inspector. "
"This may be changed in a future release of Godot."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:615
msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about 3D linear transformations: https://www.youtube.com/"
"watch?v=rHLEWRxRGiM"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:620
msgid "Representing rotation in 3D (advanced)"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:622
msgid ""
"The biggest difference between 2D and 3D transformation matrices is how you "
"represent rotation by itself without the basis vectors."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:625
msgid ""
"With 2D, we have an easy way (atan2) to switch between a transformation "
"matrix and an angle. In 3D, we can't simply represent rotation as one "
"number. There is something called Euler angles, which can represent "
"rotations as a set of 3 numbers, however, they are limited and not very "
"useful, except for trivial cases."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:631
msgid ""
"In 3D we do not typically use angles, we either use a transformation basis "
"(used pretty much everywhere in Godot), or we use quaternions. Godot can "
"represent quaternions using the :ref:`class_Quat` struct. My suggestion to "
"you is to completely ignore how they work under-the-hood, because they are "
"very complicated and unintuitive."
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:637
msgid ""
"However, if you really must know how it works, here are some great "
"resources, which you can follow in order:"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:640
msgid "https://www.youtube.com/watch?v=mvmuCPvRoWQ"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:642
msgid "https://www.youtube.com/watch?v=d4EgbgTm0Bg"
msgstr ""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:644
msgid "https://eater.net/quaternions"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:6
msgid ""
"Interpolation is a very basic operation in graphics programming. It's good "
"to become familiar with it in order to expand your horizons as a graphics "
"developer."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:8
msgid ""
"The basic idea is that you want to transition from A to B. A value ``t``, "
"represents the states in-between."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:10
msgid ""
"As an example if ``t`` is 0, then the state is A. If ``t`` is 1, then the "
"state is B. Anything in-between is an *interpolation*."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:12
msgid ""
"Between two real (floating-point) numbers, a simple interpolation is usually "
"described as:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:18
msgid "And often simplified to:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:24
msgid ""
"The name of this type of interpolation, which transforms a value into "
"another at *constant speed* is *\"linear\"*. So, when you hear about *Linear "
"Interpolation*, you know they are referring to this simple formula."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:26
msgid ""
"There are other types of interpolations, which will not be covered here. A "
"recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` "
"page."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:29
msgid "Vector interpolation"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:31
msgid ""
"Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>`) can also be interpolated, they come with handy functions "
"to do it :ref:`Vector2.linear_interpolate() "
"<class_Vector2_method_linear_interpolate>` and :ref:`Vector3."
"linear_interpolate() <class_Vector3_method_linear_interpolate>`."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:34
msgid ""
"For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_cubic_interpolate>` and :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_cubic_interpolate>`, which do a :"
"ref:`Bezier <doc_beziers_and_curves>` style interpolation."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:36
msgid ""
"Here is simple pseudo-code for going from point A to B using interpolation:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:63
msgid "It will produce the following motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:68
msgid "Transform interpolation"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:70
msgid ""
"It is also possible to interpolate whole transforms (make sure they have "
"either uniform scale or, at least, the same non-uniform scale). For this, "
"the function :ref:`Transform.interpolate_with() "
"<class_Transform_method_interpolate_with>` can be used."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:73
msgid ""
"Here is an example of transforming a monkey from Position1 to Position2:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:77
msgid "Using the following pseudocode:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:104
msgid "And again, it will produce the following motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:110
msgid "Smoothing motion"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:112
msgid ""
"Interpolation can be used to smooth movement, rotation, etc. Here is an "
"example of a circle following the mouse using smoothed motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:137
msgid "Here is how it looks:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:141
msgid ""
"This useful for smoothing camera movement, allies following you (ensuring "
"they stay within a certain range), and many other common game patterns."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:4
msgid "Beziers, curves and paths"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:6
msgid ""
"Bezier curves are a mathematical approximation of natural geometric shapes. "
"We use them to represent a curve with as little information as possible and "
"with a high level of flexibility."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:10
msgid ""
"Unlike more abstract mathematical concepts, Bezier curves were created for "
"industrial design. They are a popular tool in the graphics software industry."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:13
msgid ""
"They rely on :ref:`interpolation<doc_interpolation>`, which we saw in the "
"previous article, combining multiple steps to create smooth curves. To "
"better understand how Bezier curves work, let's start from its simplest "
"form: Quadratic Bezier."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:19
msgid "Quadratic Bezier"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:21
msgid "Take three points, the minimum required for Quadratic Bezier to work:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:25
msgid ""
"To draw a curve between them, we first interpolate gradually over the two "
"vertices of each of the two segments formed by the three points, using "
"values ranging from 0 to 1. This gives us two points that move along the "
"segments as we change the value of ``t`` from 0 to 1."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:45
msgid ""
"We then interpolate ``q0`` and ``q1`` to obtain a single point ``r`` that "
"moves along a curve."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:59
msgid "This type of curve is called a *Quadratic Bezier* curve."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:63
#: ../../docs/tutorials/math/beziers_and_curves.rst:165
msgid "*(Image credit: Wikipedia)*"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:66
msgid "Cubic Bezier"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:68
msgid ""
"Building upon the previous example, we can get more control by interpolating "
"between four points."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:73
msgid ""
"We first use a function with four parameters to take four points as an "
"input, ``p0``, ``p1``, ``p2`` and ``p3``:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:88
msgid ""
"We apply a linear interpolation to each couple of points to reduce them to "
"three:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:104
msgid "We then take our three points and reduce them to two:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:117
msgid "And to one:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:130
msgid "Here is the full function:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:161
msgid ""
"The result will be a smooth curve interpolating between all four points:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:167
msgid ""
"Cubic Bezier interpolation works the same in 3D, just use ``Vector3`` "
"instead of ``Vector2``."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:171
msgid "Adding control points"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:173
msgid ""
"Building upon Cubic Bezier, we can change the way two of the points work to "
"control the shape of our curve freely. Instead of having ``p0``, ``p1``, "
"``p2`` and ``p3``, we will store them as:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:177
msgid "``point0 = p0``: Is the first point, the source"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:178
msgid "``control0 = p1 - p0``: Is a vector relative to the first control point"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:179
msgid ""
"``control1 = p3 - p2``: Is a vector relative to the second control point"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:180
msgid "``point1 = p3``: Is the second point, the destination"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:182
msgid ""
"This way, we have two points and two control points which are relative "
"vectors to the respective points. If you've used graphics or animation "
"software before, this might look familiar:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:188
msgid ""
"This is how graphics software presents Bezier curves to the users, and how "
"they work and look in Godot."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:192
msgid "Curve2D, Curve3D, Path and Path2D"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:194
msgid ""
"There are two objects that contain curves: :ref:`Curve3D <class_Curve3D>` "
"and :ref:`Curve2D <class_Curve2D>` (for 3D and 2D respectively)."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:196
msgid ""
"They can contain several points, allowing for longer paths. It is also "
"possible to set them to nodes: :ref:`Path <class_Path>` and :ref:`Path2D "
"<class_Path2D>` (also for 3D and 2D respectively):"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:200
msgid ""
"Using them, however, may not be completely obvious, so following is a "
"description of the most common use cases for Bezier curves."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:203
msgid "Evaluating"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:205
msgid ""
"Just evaluating them may be an option, but in most cases it's not very "
"useful. The big drawback with Bezier curves is that if you traverse them at "
"constant speed, from ``t = 0`` to ``t = 1``, the actual interpolation will "
"*not* move at constant speed. The speed is also an interpolation between the "
"distances between points ``p0``, ``p1``, ``p2`` and ``p3`` and there is not "
"a mathematically simple way to traverse the curve at constant speed."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:207
msgid "Let's do a simple example with the following pseudocode:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:230
msgid ""
"As you can see, the speed (in pixels per second) of the circle varies, even "
"though ``t`` is increased at constant speed. This makes beziers difficult to "
"use for anything practical out of the box."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:235
msgid ""
"Drawing beziers (or objects based on the curve) is a very common use case, "
"but it's also not easy. For pretty much any case, Bezier curves need to be "
"converted to some sort of segments. This is normally difficult, however, "
"without creating a very high amount of them."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:237
msgid ""
"The reason is that some sections of a curve (specifically, corners) may "
"require considerable amounts of points, while other sections may not:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:241
msgid ""
"Additionally, if both control points were ``0, 0`` (remember they are "
"relative vectors), the Bezier curve would just be a straight line (so "
"drawing a high amount of points would be wasteful)."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:243
msgid ""
"Before drawing Bezier curves, *tessellation* is required. This is often done "
"with a recursive or divide and conquer function that splits the curve until "
"the curvature amount becomes less than a certain threshold."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:245
msgid ""
"The *Curve* classes provide this via the :ref:`Curve2D.tessellate() "
"<class_Curve2D_method_tessellate>` function (which receives optional "
"``stages`` of recursion and angle ``tolerance`` arguments). This way, "
"drawing something based on a curve is easier."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:249
msgid "Traversal"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:251
msgid ""
"The last common use case for the curves is to traverse them. Because of what "
"was mentioned before regarding constant speed, this is also difficult."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:253
msgid ""
"To make this easier, the curves need to be *baked* into equidistant points. "
"This way, they can be approximated with regular interpolation (which can be "
"improved further with a cubic option). To do this, just use the :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` method together "
"with :ref:`Curve2D."
"get_baked_length()<class_Curve2D_method_get_baked_length>`. The first call "
"to either of them will bake the curve internally."
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:256
msgid ""
"Traversal at constant speed, then, can be done with the following pseudo-"
"code:"
msgstr ""

#: ../../docs/tutorials/math/beziers_and_curves.rst:277
msgid "And the output will, then, move at constant speed:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:4
msgid "Random number generation"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:6
msgid ""
"Many games rely on randomness to implement core game mechanics. This page "
"guides you through common types of randomness and how to implement them in "
"Godot."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:10
msgid ""
"After giving you a brief overview of useful functions that generate random "
"numbers, you will learn how to get random elements from arrays, "
"dictionaries, and how to use a noise generator in GDScript."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:16
msgid ""
"Computers cannot generate \"true\" random numbers. Instead, they rely on "
"`pseudorandom number generators <https://en.wikipedia.org/wiki/"
"Pseudorandom_number_generator>`__ (PRNGs)."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:21
msgid "Global scope versus RandomNumberGenerator class"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:23
msgid ""
"Godot exposes two ways to generate random numbers: via *global scope* "
"methods or using the :ref:`class_RandomNumberGenerator` class."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:26
msgid ""
"Global scope methods are easier to set up, but they don't offer as much "
"control."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:28
msgid ""
"RandomNumberGenerator requires more code to use, but exposes many methods "
"not found in global scope such as :ref:`randi_range() "
"<class_RandomNumberGenerator_method_randi_range>` and :ref:`randfn() "
"<class_RandomNumberGenerator_method_randfn>`. On top of that, it allows "
"creating multiple instances each with their own seed."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:34
msgid ""
"This tutorial uses global scope methods, except when the method only exists "
"in the RandomNumberGenerator class."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:38
msgid "The randomize() method"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:40
msgid ""
"In global scope, you can find a :ref:`randomize() "
"<class_@GDScript_method_randomize>` method. **This method should be called "
"only once when your project starts to initialize the random seed.** Calling "
"it multiple times is unnecessary and may impact performance negatively."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:45
msgid ""
"Putting it in your main scene script's ``_ready()`` method is a good choice:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:60
msgid ""
"You can also set a fixed random seed instead using :ref:`seed() "
"<class_@GDScript_method_seed>`. Doing so will give you *deterministic* "
"results across runs:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:80
msgid ""
"When using the RandomNumberGenerator class, you should call ``randomize()`` "
"on the instance since it has its own seed:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:95
msgid "Getting a random number"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:97
msgid ""
"Let's look at some of the most commonly used functions and methods to "
"generate random numbers in Godot."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:100
msgid ""
"The function :ref:`randi() <class_@GDScript_method_randi>` returns a random "
"number between 0 and 2^32-1. Since the maximum value is huge, you most "
"likely want to use the modulo operator (``%``) to bound the result between 0 "
"and the denominator:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:122
msgid ""
":ref:`randf() <class_@GDScript_method_randf>` returns a random floating-"
"point number between 0 and 1. This is useful to implement a :ref:"
"`doc_random_number_generation_weighted_random_probability` system, among "
"other things."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:127
msgid ""
":ref:`randfn() <class_RandomNumberGenerator_method_randfn>` returns a random "
"floating-point number following a `normal distribution <https://en.wikipedia."
"org/wiki/Normal_distribution>`__. This means the returned value is more "
"likely to be around the mean (0.0 by default), varying by the deviation (1.0 "
"by default):"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:148
msgid ""
":ref:`rand_range() <class_@GDScript_method_rand_range>` takes two arguments "
"``from`` and ``to``, and returns a random floating-point number between "
"``from`` and ``to``:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:163
msgid ""
":ref:`RandomNumberGenerator.randi_range() "
"<class_RandomNumberGenerator_method_randi_range>` takes two arguments "
"``from`` and ``to``, and returns a random integer between ``from`` and "
"``to``:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:182
msgid "Get a random array element"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:184
msgid ""
"We can use random integer generation to get a random element from an array:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:228
msgid ""
"To prevent the same fruit from being picked more than once in a row, we can "
"add more logic to this method:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:293
msgid ""
"This approach can be useful to make random number generation feel less "
"repetitive. Still, it doesn't prevent results from \"ping-ponging\" between "
"a limited set of values. To prevent this, use the :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` pattern instead."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:299
msgid "Get a random dictionary value"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:301
msgid "We can apply similar logic from arrays to dictionaries as well:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:329
msgid "Weighted random probability"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:331
msgid ""
"The :ref:`randf() <class_@GDScript_method_randf>` method returns a floating-"
"point number between 0.0 and 1.0. We can use this to create a \"weighted\" "
"probability where different outcomes have different likelihoods:"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:394
msgid "\"Better\" randomness using shuffle bags"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:396
msgid ""
"Taking the same example as above, we would like to pick fruits at random. "
"However, relying on random number generation every time a fruit is selected "
"can lead to a less *uniform* distribution. If the player is lucky (or "
"unlucky), they could get the same fruit three or more times in a row."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:401
msgid ""
"You can accomplish this using the *shuffle bag* pattern. It works by "
"removing an element from the array after choosing it. After multiple "
"selections, the array ends up empty. When that happens, you reinitialize it "
"to its default value::"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:431
msgid ""
"When running the above code, there is a chance to get the same fruit twice "
"in a row. Once we picked a fruit, it will no longer be a possible return "
"value unless the array is now empty. When the array is empty, we reset it "
"back to its default value, making it possible to have the same fruit again, "
"but only once."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:437
msgid "Random noise"
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:439
msgid ""
"The random number generation shown above can show its limits when you need a "
"value that *slowly* changes depending on the input. The input can be a "
"position, time, or anything else."
msgstr ""

#: ../../docs/tutorials/math/random_number_generation.rst:443
msgid ""
"To achieve this, you can use random *noise* functions. Noise functions are "
"especially popular in procedural generation to generate realistic-looking "
"terrain. Godot provides :ref:`class_opensimplexnoise` for this, which "
"supports 1D, 2D, 3D, and 4D noise. Here's an example with 1D noise:"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:4
msgid "Real Time Navigation (3D)"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:9
msgid ""
"Pathfinding in a 3D environment is crucial for many games, it's commonly how "
"non directly controlled characters or entities find their way around an "
"environment. Godot provides several nodes for this purpose:"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:13
msgid ":ref:`Navigation<class_Navigation>` (deprecated)"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:14
msgid ":ref:`NavigationMeshInstance<class_NavigationMeshInstance>`"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:15
msgid ":ref:`NavigationAgent<class_NavigationAgent>`"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:16
msgid ":ref:`NavigationObstacle<class_NavigationObstacle>`"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:19
msgid "The map and navigation regions"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:21
msgid ""
"The \"map\" is the entire world for navigation, it's similar to \"space\" "
"for the physics engine. It's comprised of navigation regions, these regions "
"define parts of the world that can be navigated around by navigation agents."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:26
msgid ""
"To create a navigation region add the :ref:"
"`NavigationMeshInstance<class_NavigationMeshInstance>` node to a 3D scene. "
"Next in the inspector for that mesh create or add a :ref:"
"`NavigationMesh<class_NavigationMesh>`. The navmesh contains options for how "
"it will be generated when it's baked. The geometry options control which "
"nodes, and types of nodes, are used to bake the mesh. A full description of "
"each setting and how it works can be found in the :ref:`NavigationMesh class "
"reference<class_NavigationMesh>`."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:33
msgid ""
"Once the settings have been properly configured press the \"Bake NavMesh\" "
"button at the top of the inspector to generate it."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:40
msgid ""
"It can also be generated at runtime using the `bake_navigation_region()` "
"method of the navigation region node."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:43
msgid ""
"Once the mesh has finished generating you should see the transparent "
"navigation mesh above the areas in the scene that can be navigated to."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:48
msgid ""
"Keep in mind that the navmesh shows where the center of an entity can go. "
"For example, if you set the agent radius to 0.5 then the navigation mesh "
"will have a distance of 0.5 from any ledges or walls to prevent clipping "
"into the wall or hanging off of the edge."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:53
msgid ""
"Navigation agents can moved from one region to another if they are next to "
"each other. Additionally a baked navmesh can be moved at runtime and agents "
"will still be able to navigate onto it from another region. For example, "
"navigating onto a moving platform that has stopped will work."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:59
msgid "NavigationAgent3D"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:61
msgid ""
"Navigation agent nodes are what actually does the pathfinding in a scene, "
"one can be attached to the root node of an entity that needs to navigate."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:64
msgid ""
"To have it pathfind use its `set_target_location` method. Once the target "
"has been set a path will be generated to the node using navigation regions, "
"with several points on the way to the final destination."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:69
msgid "RVO processing"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:71
msgid ""
"RVO stands for reciprocal velocity obstacle. RVO processing is a way to "
"pathfind while taking into account other agents and physics bodies that are "
"also moving."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:75
msgid ""
"To use it set a target like normal. Then an agent needs to fetch its next "
"nav path location, and compute its velocity to that location. Instead of "
"using that value to move use it to set the velocity on the agent with "
"`set_velocity`. Then a new velocity that takes into account other agents and "
"obstacles is generated and emitted with the signal `velocity_computed`."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:81
msgid ""
"However agents can only take into account a set number of other nearby "
"agents, this is the :ref:`max "
"neighbors<class_NavigationAgent_property_max_neighbors>` property of an "
"agent and can be adjusted. This is **not** a limit for how many agents can "
"use a navigation region at the same time."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:87
msgid "NavigationObstacle3D"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:89
msgid ""
"This node is used to mark physics bodies that move around a navigation area "
"that agents need to avoid (this will only work if you use RVO processing). "
"For example, this node would be useful for pieces of debris in a "
"destructible environment. Add it as the child of a physics body and "
"navigation agent nodes will avoid it while pathfinding."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:96
msgid "Generating a path (old method)"
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:98
msgid ""
"This is the old method for generating a navigation path, it will be removed "
"in Godot 4. First, add a navigation node to the scene, then add a navigation "
"mesh instance as it's child and set up a navigation mesh."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:103
msgid ""
"To get a path between two areas on a map you use the navigation node method "
"``get_simple_path()``. The first argument is a Vector3 of the starting "
"location, the next is a Vector3 of the end location. And the last argument "
"is a boolean for whether or not agent properties of a navmesh are considered "
"when generating a path."
msgstr ""

#: ../../docs/tutorials/navigation/real_time_navigation_3d.rst:109
msgid ""
"The method will return a :ref:`PoolVector3Array <class_PoolVector3Array>` "
"consisting of points that make a path. If there is no way to navigate to the "
"end location the method will return a blank :ref:`PoolVector3Array "
"<class_PoolVector3Array>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:4
msgid "High-level multiplayer"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:7
msgid "High-level vs low-level API"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:9
msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:11
msgid ""
"Godot always supported standard low-level networking via UDP, TCP and some "
"higher level protocols such as SSL and HTTP. These protocols are flexible "
"and can be used for almost anything. However, using them to synchronize game "
"state manually can be a large amount of work. Sometimes that work can't be "
"avoided or is worth it, for example when working with a custom server "
"implementation on the backend. But in most cases, it's worthwhile to "
"consider Godot's high-level networking API, which sacrifices some of the "
"fine-grained control of low-level networking for greater ease of use."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:14
msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:16
msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:18
msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:23
msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:26
msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:28
msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently offers WebSockets and WebRTC support but lacks some of the higher-"
"level features, as well as raw access to low-level protocols like TCP and "
"UDP."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:34
msgid ""
"More about TCP/IP, UDP, and networking: https://gafferongames.com/post/"
"udp_vs_tcp/"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:37
msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://gafferongames.com/categories/game-networking/>`__), "
"including the comprehensive `introduction to networking models in games "
"<https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:41
msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:45
msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users data if they play your game."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:50
msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:55
msgid "Mid level abstraction"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:57
msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:59
msgid ""
"Godot uses a mid-level object :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`. This object is not meant to be created "
"directly, but is designed so that several C++ implementations can provide it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:62
msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:64
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), one based "
"on WebRTC (:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`), and one "
"based on WebSocket (:ref:`WebSocketMultiplayerPeer "
"<class_WebSocketMultiplayerPeer>`), but this could be used to implement "
"mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/console-specific "
"networking APIs."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:70
msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. Yet it is made available "
"in case a game has specific needs for a lower level API."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:74
msgid "Initializing the network"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:76
msgid ""
"The object that controls networking in Godot is the same one that controls "
"everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:78
msgid ""
"To initialize high-level networking, the SceneTree must be provided a "
"NetworkedMultiplayerPeer object."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:80
msgid ""
"To create that object, it first has to be initialized as a server or client."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:82
msgid ""
"Initializing as a server, listening on the given port, with a given maximum "
"number of peers:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:90
msgid "Initializing as a client, connecting to a given IP and port:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:98
msgid "Get the previously set network peer:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:104
msgid "Checking whether the tree is initialized as a server or client:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:110
msgid "Terminating the networking feature:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:116
msgid ""
"(Although it may make sense to send a message first to let the other peers "
"know you're going away instead of letting the connection close or timeout, "
"depending on your game.)"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:120
#: ../../docs/tutorials/networking/http_request_class.rst:13
#: ../../docs/tutorials/networking/http_client_class.rst:12
#: ../../docs/tutorials/networking/websocket.rst:25
#: ../../docs/tutorials/networking/webrtc.rst:42
msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:126
msgid "Managing connections"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:128
msgid ""
"Some games accept connections at any time, others during the lobby phase. "
"Godot can be requested to no longer accept connections at any point (see "
"``set_refuse_new_network_connections(bool)`` and related methods on :ref:"
"`SceneTree <class_SceneTree>`). To manage who connects, Godot provides the "
"following signals in SceneTree:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:131
msgid "Server and Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:133
msgid "``network_peer_connected(int id)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:134
msgid "``network_peer_disconnected(int id)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:136
msgid ""
"The above signals are called on every peer connected to the server "
"(including on the server) when a new peer connects or disconnects. Clients "
"will connect with a unique ID greater than 1, while network peer ID 1 is "
"always the server. Anything below 1 should be handled as invalid. You can "
"retrieve the ID for the local system via :ref:`SceneTree."
"get_network_unique_id() <class_SceneTree_method_get_network_unique_id>`. "
"These IDs will be useful mostly for lobby management and should generally be "
"stored, as they identify connected peers and thus players. You can also use "
"IDs to send messages only to certain peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:142
msgid "Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:144
msgid "``connected_to_server``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:145
msgid "``connection_failed``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:146
msgid "``server_disconnected``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:148
msgid ""
"Again, all these functions are mainly useful for lobby management or for "
"adding/removing players on the fly. For these tasks, the server clearly has "
"to work as a server and you have to perform tasks manually such as sending a "
"newly connected player information about other already connected players (e."
"g. their names, stats, etc)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:152
msgid ""
"Lobbies can be implemented any way you want, but the most common way is to "
"use a node with the same name across scenes in all peers. Generally, an "
"autoloaded node/singleton is a great fit for this, to always have access to, "
"e.g. \"/root/lobby\"."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:156
msgid "RPC"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:158
msgid ""
"To communicate between peers, the easiest way is to use RPCs (remote "
"procedure calls). This is implemented as a set of functions in :ref:`Node "
"<class_Node>`:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:161
msgid "``rpc(\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:162
msgid "``rpc_id(<peer_id>,\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:163
msgid "``rpc_unreliable(\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:164
msgid "``rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:166
msgid "Synchronizing member variables is also possible:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:168
msgid "``rset(\"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:169
msgid "``rset_id(<peer_id>, \"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:170
msgid "``rset_unreliable(\"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:171
msgid "``rset_unreliable_id(<peer_id>, \"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:173
msgid "Functions can be called in two fashions:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:175
msgid ""
"Reliable: when the function call arrives, an acknowledgement will be sent "
"back; if the acknowledgement isn't received after a certain amount of time, "
"the function call will be re-transmitted."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:176
msgid ""
"Unreliable: the function call is sent only once, without checking to see if "
"it arrived or not, but also without any extra overhead."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:178
msgid ""
"In most cases, reliable is desired. Unreliable is mostly useful when "
"synchronizing object positions (sync must happen constantly, and if a packet "
"is lost, it's not that bad because a new one will eventually arrive and it "
"would likely be outdated because the object moved further in the meantime, "
"even if it was resent reliably)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:181
msgid ""
"There is also :ref:`SceneTree.get_rpc_sender_id() "
"<class_SceneTree_method_get_rpc_sender_id>`, which can be used to check "
"which peer (or peer ID) sent an RPC."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:184
msgid "Back to lobby"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:186
msgid ""
"Let's get back to the lobby. Imagine that each player that connects to the "
"server will tell everyone about it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:232
msgid ""
"You might have already noticed something different, which is the usage of "
"the ``remote`` keyword on the ``register_player`` function:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:238
msgid ""
"This keyword is one of many that allow a function to be called by a remote "
"procedure call (RPC). There are six of them total:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:240
msgid "``remote``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:241
msgid "``remotesync``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:242
msgid "``puppet``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:243
msgid "``puppetsync``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:244
msgid "``master``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:245
msgid "``mastersync``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:247
msgid ""
"Each of them designate who can call the rpc, and optionally ``sync`` if the "
"RPC can be called locally."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:249
msgid ""
"If no rpc keywords are added, Godot will block any attempts to call "
"functions remotely. This makes security work a lot easier (so a client can't "
"call a function to delete a file on another client's system)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:252
msgid ""
"The ``remote`` keyword can be called by any peer, including the server and "
"all clients. The ``puppet`` keyword means a call can be made from the "
"network master to any network puppet. The ``master`` keyword means a call "
"can be made from any network puppet to the network master."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:256
msgid ""
"If ``sync`` is included, the call can also be made locally. For example, to "
"allow the network master to change the player's position on all peers:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:263
msgid ""
"You can also use :ref:`SceneTree.get_rpc_sender_id() "
"<class_SceneTree_method_get_rpc_sender_id>` to have more advanced rules on "
"how an rpc can be called."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:265
msgid ""
"These keywords are further explained in :ref:`Synchronizing the game "
"<doc_high_level_multiplayer_synchronizing>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:267
msgid ""
"With this, lobby management should be more or less explained. Once you have "
"your game going, you will most likely want to add some extra security to "
"make sure clients don't do anything funny (just validate the info they send "
"from time to time, or before game start). For the sake of simplicity and "
"because each game will share different information, this is not shown here."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:272
msgid "Starting the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:274
msgid ""
"Once enough players have gathered in the lobby, the server should probably "
"start the game. This is nothing special in itself, but we'll explain a few "
"nice tricks that can be done at this point to make your life much easier."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:278
msgid "Player scenes"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:280
msgid ""
"In most games, each player will likely have its own scene. Remember that "
"this is a multiplayer game, so in every peer you need to instance **one "
"scene for each player connected to it**. For a 4 player game, each peer "
"needs to instance 4 player nodes."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:283
msgid ""
"So, how to name such nodes? In Godot, nodes need to have a unique name. It "
"must also be relatively easy for a player to tell which node represents each "
"player ID."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:286
msgid ""
"The solution is to simply name the *root nodes of the instanced player "
"scenes as their network ID*. This way, they will be the same in every peer "
"and RPC will work great! Here is an example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:316
msgid ""
"Depending on when you execute pre_configure_game(), you may need to change "
"any calls to ``add_child()`` to be deferred via ``call_deferred()``, as the "
"SceneTree is locked while the scene is being created (e.g. when ``_ready()`` "
"is being called)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:320
msgid "Synchronizing game start"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:322
msgid ""
"Setting up players might take different amounts of time for every peer due "
"to lag, different hardware, or other reasons. To make sure the game will "
"actually start when everyone is ready, pausing the game until all players "
"are ready can be useful:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:331
msgid ""
"When the server gets the OK from all the peers, it can tell them to start, "
"as for example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:357
msgid "Synchronizing the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:359
msgid ""
"In most games, the goal of multiplayer networking is that the game runs "
"synchronized on all the peers playing it. Besides supplying an RPC and "
"remote member variable set implementation, Godot adds the concept of network "
"masters."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:363
msgid "Network master"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:365
msgid ""
"The network master of a node is the peer that has the ultimate authority "
"over it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:367
msgid ""
"When not explicitly set, the network master is inherited from the parent "
"node, which if not changed, is always going to be the server (ID 1). Thus "
"the server has authority over all nodes by default."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:369
msgid ""
"The network master can be set with the function :ref:`Node."
"set_network_master(id, recursive) <class_Node_method_set_network_master>` "
"(recursive is ``true`` by default and means the network master is "
"recursively set on all child nodes of the node as well)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:372
msgid ""
"Checking that a specific node instance on a peer is the network master for "
"this node for all connected peers is done by calling :ref:`Node."
"is_network_master() <class_Node_method_is_network_master>`. This will return "
"``true`` when executed on the server and ``false`` on all client peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:374
msgid ""
"If you have paid attention to the previous example, it's possible you "
"noticed that each peer was set to have network master authority for their "
"own player (Node) instead of the server:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:394
msgid ""
"Each time this piece of code is executed on each peer, the peer makes itself "
"master on the node it controls, and all other nodes remain as puppets with "
"the server being their network master."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:396
msgid ""
"To clarify, here is an example of how this looks in the `bomber demo "
"<https://github.com/godotengine/godot-demo-projects/tree/master/networking/"
"multiplayer_bomber>`_:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:403
msgid "Master and puppet keywords"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:407
msgid ""
"The real advantage of this model is when used with the ``master``/``puppet`` "
"keywords in GDScript (or their equivalent in C# and Visual Script). "
"Similarly to the ``remote`` keyword, functions can also be tagged with them:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:410
msgid "Example bomb code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:418
msgid "Example player code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:435
msgid ""
"In the above example, a bomb explodes somewhere (likely managed by whoever "
"is the master of this bomb-node, e.g. the host). The bomb knows the bodies "
"(player nodes) in the area, so it checks that they contain an ``exploded`` "
"method before calling it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:438
msgid ""
"Recall that each peer has a complete set of instances of player nodes, one "
"instance for each peer (including itself and the host). Each peer has set "
"itself as the master of the instance corresponding to itself, and it has set "
"a different peer as the master for each of the other instances."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:442
msgid ""
"Now, going back to the call to the ``exploded`` method, the bomb on the host "
"has called it remotely on all bodies in the area that have the method. "
"However, this method is in a player node and has a ``master`` keyword."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:445
msgid ""
"The ``master`` keyword on the ``exploded`` method in the player node means "
"two things for how this call is made. Firstly, from the perspective of the "
"calling peer (the host), the calling peer will only attempt to remotely call "
"the method on the peer that it has set as the network master of the player "
"node in question. Secondly, from the perspective of the peer the host is "
"sending the call to, the peer will only accept the call if it set itself as "
"the network master of the player node with the method being called (which "
"has the ``master`` keyword). This works well as long as all peers agree on "
"who is the master of what."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:452
msgid ""
"The above setup means that only the peer who owns the affected body will be "
"responsible for telling all the other peers that its body was stunned, after "
"being remotely instructed to do so by the host's bomb. The owning peer "
"therefore (still in the ``exploded`` method) tells all the other peers that "
"its player node was stunned. The peer does this by remotely calling the "
"``stun`` method on all instances of that player node (on the other peers). "
"Because the ``stun`` method has the ``puppet`` keyword, only peers who did "
"not set themselves as the network master of the node will call it (in other "
"words, those peers are set as puppets for that node by virtue of not being "
"the network master of it)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:459
msgid ""
"The result of this call to ``stun`` is to make the player look stunned on "
"the screen of all the peers, including the current network master peer (due "
"to the local call to ``stun`` after ``rpc(\"stun\")``)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:462
msgid ""
"The master of the bomb (the host) repeats the above steps for each of the "
"bodies in the area, such that all the instances of any player in the bomb "
"area get stunned on the screens of all the peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:465
msgid ""
"Note that you could also send the ``stun()`` message only to a specific "
"player by using ``rpc_id(<id>, \"exploded\", bomb_owner)``. This may not "
"make much sense for an area-of-effect case like the bomb, but might in other "
"cases, like single target damage."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:475
msgid ""
"Once you've made a multiplayer game, you may want to export it to run it on "
"a dedicated server with no GPU available. See :ref:"
"`doc_exporting_for_dedicated_servers` for more information."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:481
msgid ""
"The code samples on this page aren't designed to run on a dedicated server. "
"You'll have to modify them so the server isn't considered to be a player. "
"You'll also have to modify the game starting mechanism so that the first "
"player who joins can start the game."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:488
msgid ""
"The bomberman example here is largely for illustrational purposes, and does "
"not do anything on the host-side to handle the case where a peer uses a "
"custom client to cheat by for example refusing to stun itself. In the "
"current implementation such cheating is perfectly possible because each "
"client is the network master of its own player, and the network master of a "
"player is the one which decides whether to call the I-was-stunned method "
"(``stun``) on all of the other peers and itself."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:4
msgid "Making HTTP requests"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:6
msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:9
msgid ""
"For the sake of this example, we will create a simple UI with a button, that "
"when pressed will start the HTTP request to the specified URL."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:19
msgid "Preparing scene"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:21
msgid ""
"Create a new empty scene, add a CanvasLayer as the root node and add a "
"script to it. Then add two child nodes to it: a Button and an HTTPRequest "
"node. You will need to connect the following signals to the CanvasLayer "
"script:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:23
msgid "Button.pressed: When the button is pressed, we will start the request."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:24
msgid ""
"HTTPRequest.request_completed: When the request is completed, we will get "
"the requested data as an argument."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:31
msgid ""
"Below is all the code we need to make it work. The URL points to an online "
"API mocker; it returns a pre-defined JSON string, which we will then parse "
"to get access to the data."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:72
msgid ""
"With this, you should see ``(hello:world)`` printed on the console; hello "
"being a key, and world being a value, both of them strings."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:74
msgid ""
"For more information on parsing JSON, see the class references for :ref:"
"`JSON <class_JSON>` and :ref:`JSONParseResult <class_JSONParseResult>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:76
msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:78
msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: "
"value\"``. For example, to set a custom user agent (the HTTP ``user-agent`` "
"header) you could use the following:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:92
msgid ""
"Please note that, for SSL/TLS encryption and thus HTTPS URLs to work, you "
"may need to take some steps as described :ref:`here <doc_ssl_certificates>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:94
msgid ""
"Also, when calling APIs using authorization, be aware that someone might "
"analyse and decompile your released application and thus may gain access to "
"any embedded authorization information like tokens, usernames or passwords. "
"That means it is usually not a good idea to embed things such as database "
"access credentials inside your game. Avoid providing information useful to "
"an attacker whenever possible."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:98
msgid "Sending data to server"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:100
msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:123
msgid ""
"Keep in mind that you have to wait for a request to finish before sending "
"another one. Making multiple request at once requires you to have one node "
"per request. A common strategy is to create and delete HTTPRequest nodes at "
"runtime as necessary."
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:4
msgid "HTTP client class"
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:6
msgid ""
":ref:`HTTPClient <class_HTTPClient>` provides low-level access to HTTP "
"communication. For a higher-level interface, you may want to take a look at :"
"ref:`HTTPRequest <class_HTTPRequest>` first, which has a tutorial available :"
"ref:`here <doc_http_request_class>`."
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:17
msgid ""
"Here's an example of using the :ref:`HTTPClient <class_HTTPClient>` class. "
"It's just a script, so it can be run by executing:"
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:30
msgid "It will connect and fetch a website."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:4
msgid "SSL certificates"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:9
msgid ""
"It is often desired to use SSL connections for communications to avoid \"man "
"in the middle\" attacks. Godot has a connection wrapper, :ref:`StreamPeerSSL "
"<class_StreamPeerSSL>`, which can take a regular connection and add security "
"around it. The :ref:`HTTPClient <class_HTTPClient>` class also supports "
"HTTPS by using this same wrapper."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:16
msgid ""
"Godot includes SSL certificates from Mozilla, but you can provide your own "
"with a .crt file in the project settings:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:21
msgid ""
"This file should contain any number of public certificates in `PEM format "
"<https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail>`__."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:24
msgid ""
"Of course, remember to add .crt as filter so the exporter recognizes this "
"when exporting your project."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:29
msgid "There are two ways to obtain certificates:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:32
msgid "Approach 1: self signed cert"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:34
msgid ""
"The first approach is the simplest: generate a private and public key pair "
"and add the public key (in PEM format) to the .crt file. The private key "
"should go to your server."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:38
msgid ""
"OpenSSL has `some documentation <https://raw.githubusercontent.com/openssl/"
"openssl/master/doc/HOWTO/keys.txt>`__ about this. This approach also **does "
"not require domain validation** nor requires you to spend a considerable "
"amount of money in purchasing certificates from a CA."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:45
msgid "Approach 2: CA cert"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:47
msgid ""
"The second approach consists of using a certificate authority (CA) such as "
"Verisign, Geotrust, etc. This is a more cumbersome process, but it's more "
"\"official\" and ensures your identity is clearly represented."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:52
msgid ""
"Unless you are working with large companies or corporations, or need to "
"connect to someone else's servers (i.e., connecting to Google or some other "
"REST API provider via HTTPS), this method is not as useful."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:56
msgid ""
"Also, when using a CA issued cert, **you must enable domain validation**, to "
"ensure the domain you are connecting to is the one intended, otherwise any "
"website can issue any certificate in the same CA and it will work."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:61
msgid ""
"If you are using Linux, you can use the supplied certs file, generally "
"located in:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:68
msgid ""
"This file allows HTTPS connections to virtually any website (i.e., Google, "
"Microsoft, etc.)."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:71
msgid ""
"Or pick any of the more specific certificates there if you are connecting to "
"a specific one."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:4
#: ../../docs/tutorials/networking/webrtc.rst:14
msgid "WebSocket"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:7
msgid "HTML5 and WebSocket"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:9
msgid ""
"The WebSocket protocol was standardized in 2011 with the original goal of "
"allowing browsers to create stable and bidirectional connections with a "
"server. Before that, browsers used to only support HTTPRequests, which is "
"not well-suited for bidirectional communication."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:12
msgid ""
"The protocol is quite simple, message based, and a very powerful tool to "
"send push notifications to browsers, and has been used to implement chats, "
"turn-based games, etc. It still uses a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games (see :ref:`WebRTC <doc_webrtc>` for those use "
"cases)."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:14
msgid ""
"Due to its simplicity, its wide compatibility, and being easier to use than "
"a raw TCP connection, WebSocket soon started to spread outside the browsers, "
"in native applications as a mean to communicate with network servers."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:16
msgid "Godot supports WebSocket in both native and HTML5 exports."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:19
msgid "Using WebSocket in Godot"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:21
msgid ""
"WebSocket is implemented in Godot via three main classes :ref:"
"`WebSocketClient <class_WebSocketClient>`, :ref:`WebSocketServer "
"<class_WebSocketServer>`, and :ref:`WebSocketPeer <class_WebSocketPeer>`. "
"The WebSocket implementation is compatible with the High Level Multiplayer. "
"See section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` "
"for more details."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:31
msgid "Minimal client example"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:33
msgid ""
"This example will show you how to create a WebSocket connection to a remote "
"server, and how to send and receive data."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:86
#: ../../docs/tutorials/networking/webrtc.rst:98
msgid "This will print:"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:94
msgid "Minimal server example"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:96
msgid ""
"This example will show you how to create a WebSocket server that listens for "
"remote connections, and how to send and receive data."
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:152
msgid "This will print (when a client connects) something similar to this:"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:160
msgid "Advanced chat demo"
msgstr ""

#: ../../docs/tutorials/networking/websocket.rst:162
msgid ""
"A more advanced chat demo which optionally uses the multiplayer mid-level "
"abstraction and a high level multiplayer demo are available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/websocket_chat` and `networking/websocket_multiplayer`."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:4
#: ../../docs/tutorials/networking/webrtc.rst:21
msgid "WebRTC"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:7
msgid "HTML5, WebSocket, WebRTC"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:9
msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:11
msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:16
msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is quite simple, but a very powerful tool to send push "
"notifications to browsers, and has been used to implement chats, turn-based "
"games, etc."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:18
msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:23
msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:25
msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:27
msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:31
msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:34
msgid "Using WebRTC in Godot"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:36
msgid ""
"WebRTC is implemented in Godot via two main classes :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API "
"implementation :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`. See "
"section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` for "
"more details."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:38
msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDNative plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://github."
"com/godotengine/webrtc-native/releases>`__."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:48
msgid "Minimal connection example"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:50
msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:106
msgid "Local signaling example"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:108
msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:148
msgid "And now for the local signaling server:"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:150
msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:184
msgid "Then you can use it like this:"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:205
msgid "This will print something similar to this:"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:213
msgid "Remote signaling with WebSocket"
msgstr ""

#: ../../docs/tutorials/networking/webrtc.rst:215
msgid ""
"A more advanced demo using WebSocket for signaling peers and :ref:"
"`WebRTCMultiplayer <class_WebRTCMultiplayer>` is available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/webrtc_signaling`."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:9
msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always trade-offs, which consist of trading speed for usability "
"and flexibility. Some practical examples of this are:"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:13
msgid ""
"Rendering large amounts of objects efficiently is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering. This makes rendering less "
"efficient, but at the same time, fewer objects are rendered. Therefore, the "
"overall rendering efficiency is improved."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:19
msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs. At the same time, sorting has a cost."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:23
msgid ""
"In 3D physics, a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and raycasting. Algorithms that allow faster insertion and "
"removal, as well as raycasting, will not be able to handle as many active "
"objects."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:29
msgid ""
"And there are many more examples of this! Game engines strive to be general-"
"purpose in nature. Balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others, or algorithms that "
"are fast but are more difficult to use."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:34
msgid ""
"Godot is not an exception to this. While it is designed to have backends "
"swappable for different algorithms, the default backends prioritize balance "
"and flexibility over performance."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:38
msgid ""
"With this clear, the aim of this tutorial section is to explain how to get "
"the maximum performance out of Godot. While the tutorials can be read in any "
"order, it is a good idea to start from :ref:`doc_general_optimization`."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:43
msgid "Common"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:53
msgid "CPU"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:62
msgid "GPU"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:4
msgid "General optimization tips"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:9
msgid ""
"In an ideal world, computers would run at infinite speed. The only limit to "
"what we could achieve would be our imagination. However, in the real world, "
"it's all too easy to produce software that will bring even the fastest "
"computer to its knees."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:14
msgid ""
"Thus, designing games and other software is a compromise between what we "
"would like to be possible, and what we can realistically achieve while "
"maintaining good performance."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:18
msgid "To achieve the best results, we have two approaches:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:20
msgid "Work faster."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:21
msgid "Work smarter."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:23
msgid "And preferably, we will use a blend of the two."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:26
msgid "Smoke and mirrors"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:28
msgid ""
"Part of working smarter is recognizing that, in games, we can often get the "
"player to believe they're in a world that is far more complex, interactive, "
"and graphically exciting than it really is. A good programmer is a magician, "
"and should strive to learn the tricks of the trade while trying to invent "
"new ones."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:34
msgid "The nature of slowness"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:36
msgid ""
"To the outside observer, performance problems are often lumped together. But "
"in reality, there are several different kinds of performance problems:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:39
msgid ""
"A slow process that occurs every frame, leading to a continuously low frame "
"rate."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:41
msgid ""
"An intermittent process that causes \"spikes\" of slowness, leading to "
"stalls."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:43
msgid ""
"A slow process that occurs outside of normal gameplay, for instance, when "
"loading a level."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:46
msgid "Each of these are annoying to the user, but in different ways."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:49
#: ../../docs/tutorials/performance/cpu_optimization.rst:7
msgid "Measuring performance"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:51
msgid ""
"Probably the most important tool for optimization is the ability to measure "
"performance - to identify where bottlenecks are, and to measure the success "
"of our attempts to speed them up."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:55
msgid "There are several methods of measuring performance, including:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:57
msgid "Putting a start/stop timer around code of interest."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:58
msgid "Using the Godot profiler."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:59
msgid "Using external third-party CPU profilers."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:60
msgid ""
"Using GPU profilers/debuggers such as `NVIDIA Nsight Graphics <https://"
"developer.nvidia.com/nsight-graphics>`__ or `apitrace <https://apitrace."
"github.io/>`__."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:63
msgid "Checking the frame rate (with V-Sync disabled)."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:65
msgid ""
"Be very aware that the relative performance of different areas can vary on "
"different hardware. It's often a good idea to measure timings on more than "
"one device. This is especially the case if you're targeting mobile devices."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:72
msgid ""
"CPU profilers are often the go-to method for measuring performance. However, "
"they don't always tell the whole story."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:75
msgid ""
"Bottlenecks are often on the GPU, \"as a result\" of instructions given by "
"the CPU."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:77
msgid ""
"Spikes can occur in the operating system processes (outside of Godot) \"as a "
"result\" of instructions used in Godot (for example, dynamic memory "
"allocation)."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:79
msgid ""
"You may not always be able to profile specific devices like a mobile phone "
"due to the initial setup required."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:81
msgid ""
"You may have to solve performance problems that occur on hardware you don't "
"have access to."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:84
msgid ""
"As a result of these limitations, you often need to use detective work to "
"find out where bottlenecks are."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:88
msgid "Detective work"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:90
msgid ""
"Detective work is a crucial skill for developers (both in terms of "
"performance, and also in terms of bug fixing). This can include hypothesis "
"testing, and binary search."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:95
msgid "Hypothesis testing"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:97
msgid ""
"Say, for example, that you believe sprites are slowing down your game. You "
"can test this hypothesis by:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:100
msgid "Measuring the performance when you add more sprites, or take some away."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:102
msgid ""
"This may lead to a further hypothesis: does the size of the sprite determine "
"the performance drop?"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:105
msgid ""
"You can test this by keeping everything the same, but changing the sprite "
"size, and measuring performance."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:109
msgid "Binary search"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:111
msgid ""
"If you know that frames are taking much longer than they should, but you're "
"not sure where the bottleneck lies. You could begin by commenting out "
"approximately half the routines that occur on a normal frame. Has the "
"performance improved more or less than expected?"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:116
msgid ""
"Once you know which of the two halves contains the bottleneck, you can "
"repeat this process until you've pinned down the problematic area."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:120
msgid "Profilers"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:122
msgid ""
"Profilers allow you to time your program while running it. Profilers then "
"provide results telling you what percentage of time was spent in different "
"functions and areas, and how often functions were called."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:126
msgid ""
"This can be very useful both to identify bottlenecks and to measure the "
"results of your improvements. Sometimes, attempts to improve performance can "
"backfire and lead to slower performance. **Always use profiling and timing "
"to guide your efforts.**"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:131
#: ../../docs/tutorials/performance/cpu_optimization.rst:48
msgid ""
"For more info about using Godot's built-in profiler, see :ref:"
"`doc_debugger_panel`."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:134
msgid "Principles"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:136
msgid "`Donald Knuth <https://en.wikipedia.org/wiki/Donald_Knuth>`__ said:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:138
msgid ""
"*Programmers waste enormous amounts of time thinking about, or worrying "
"about, the speed of noncritical parts of their programs, and these attempts "
"at efficiency actually have a strong negative impact when debugging and "
"maintenance are considered. We should forget about small efficiencies, say "
"about 97% of the time: premature optimization is the root of all evil. Yet "
"we should not pass up our opportunities in that critical 3%.*"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:145
msgid "The messages are very important:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:147
msgid ""
"Developer time is limited. Instead of blindly trying to speed up all aspects "
"of a program, we should concentrate our efforts on the aspects that really "
"matter."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:150
msgid ""
"Efforts at optimization often end up with code that is harder to read and "
"debug than non-optimized code. It is in our interests to limit this to areas "
"that will really benefit."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:154
msgid ""
"Just because we *can* optimize a particular bit of code, it doesn't "
"necessarily mean that we *should*. Knowing when and when not to optimize is "
"a great skill to develop."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:158
msgid ""
"One misleading aspect of the quote is that people tend to focus on the "
"subquote *\"premature optimization is the root of all evil\"*. While "
"*premature* optimization is (by definition) undesirable, performant software "
"is the result of performant design."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:164
msgid "Performant design"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:166
msgid ""
"The danger with encouraging people to ignore optimization until necessary, "
"is that it conveniently ignores that the most important time to consider "
"performance is at the design stage, before a key has even hit a keyboard. If "
"the design or algorithms of a program are inefficient, then no amount of "
"polishing the details later will make it run fast. It may run *faster*, but "
"it will never run as fast as a program designed for performance."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:173
msgid ""
"This tends to be far more important in game or graphics programming than in "
"general programming. A performant design, even without low-level "
"optimization, will often run many times faster than a mediocre design with "
"low-level optimization."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:179
msgid "Incremental design"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:181
msgid ""
"Of course, in practice, unless you have prior knowledge, you are unlikely to "
"come up with the best design the first time. Instead, you'll often make a "
"series of versions of a particular area of code, each taking a different "
"approach to the problem, until you come to a satisfactory solution. It's "
"important not to spend too much time on the details at this stage until you "
"have finalized the overall design. Otherwise, much of your work will be "
"thrown out."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:188
msgid ""
"It's difficult to give general guidelines for performant design because this "
"is so dependent on the problem. One point worth mentioning though, on the "
"CPU side, is that modern CPUs are nearly always limited by memory bandwidth. "
"This has led to a resurgence in data-oriented design, which involves "
"designing data structures and algorithms for *cache locality* of data and "
"linear access, rather than jumping around in memory."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:196
msgid "The optimization process"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:198
msgid ""
"Assuming we have a reasonable design, and taking our lessons from Knuth, our "
"first step in optimization should be to identify the biggest bottlenecks - "
"the slowest functions, the low-hanging fruit."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:202
msgid ""
"Once we've successfully improved the speed of the slowest area, it may no "
"longer be the bottleneck. So we should test/profile again and find the next "
"bottleneck on which to focus."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:206
msgid "The process is thus:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:208
msgid "Profile / Identify bottleneck."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:209
msgid "Optimize bottleneck."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:210
msgid "Return to step 1."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:213
msgid "Optimizing bottlenecks"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:215
msgid ""
"Some profilers will even tell you which part of a function (which data "
"accesses, calculations) are slowing things down."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:218
msgid ""
"As with design, you should concentrate your efforts first on making sure the "
"algorithms and data structures are the best they can be. Data access should "
"be local (to make best use of CPU cache), and it can often be better to use "
"compact storage of data (again, always profile to test results). Often, you "
"precalculate heavy computations ahead of time. This can be done by "
"performing the computation when loading a level, by loading a file "
"containing precalculated data or simply by storing the results of complex "
"calculations into a script constant and reading its value."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:227
msgid ""
"Once algorithms and data are good, you can often make small changes in "
"routines which improve performance. For instance, you can move some "
"calculations outside of loops or transform nested ``for`` loops into non-"
"nested loops. (This should be feasible if you know a 2D array's width or "
"height in advance.)"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:232
msgid ""
"Always retest your timing/bottlenecks after making each change. Some changes "
"will increase speed, others may have a negative effect. Sometimes, a small "
"positive effect will be outweighed by the negatives of more complex code, "
"and you may choose to leave out that optimization."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:238
#: ../../docs/tutorials/performance/batching.rst:515
msgid "Appendix"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:241
msgid "Bottleneck math"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:243
msgid ""
"The proverb *\"a chain is only as strong as its weakest link\"* applies "
"directly to performance optimization. If your project is spending 90% of the "
"time in function ``A``, then optimizing ``A`` can have a massive effect on "
"performance."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:259
msgid ""
"In this example, improving this bottleneck ``A`` by a factor of 9× decreases "
"overall frame time by 5× while increasing frames per second by 5×."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:262
msgid ""
"However, if something else is running slowly and also bottlenecking your "
"project, then the same improvement can lead to less dramatic gains:"
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:277
msgid ""
"In this example, even though we have hugely optimized function ``A``, the "
"actual gain in terms of frame rate is quite small."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:280
msgid ""
"In games, things become even more complicated because the CPU and GPU run "
"independently of one another. Your total frame time is determined by the "
"slower of the two."
msgstr ""

#: ../../docs/tutorials/performance/general_optimization.rst:296
msgid ""
"In this example, we optimized the CPU hugely again, but the frame time "
"didn't improve because we are GPU-bottlenecked."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:4
msgid "Optimization using Servers"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:6
msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:10
msgid "There are, of course, always drawbacks:"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:12
msgid "There is an extra layer of complexity"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:13
msgid "Performance is lower than using simple APIs directly"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:14
msgid "It is not possible to use multiple threads to control them"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:15
msgid "More memory is needed."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:17
msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:21
msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:24
msgid "Still, Godot is designed to work around this problem."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:27
msgid "Servers"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:29
msgid ""
"One of the most interesting design decisions for Godot is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:32
msgid ""
"At the core, Godot uses the concept of Servers. They are very low-level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:36
msgid ""
":ref:`VisualServer <class_VisualServer>`: handles everything related to "
"graphics."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:37
msgid ""
":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D "
"physics."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:38
msgid ""
":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related "
"to 2D physics."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:39
msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:41
msgid ""
"Explore their APIs and you will realize that all the functions provided are "
"low-level implementations of everything Godot allows you to do."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:45
msgid "RIDs"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:47
msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:51
msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID. Not all resources contain an RID, though: in such cases, "
"the RID will be empty. The resource can then be passed to server APIs as an "
"RID."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:55
msgid ""
"Resources are reference-counted (see :ref:`Reference <class_Reference>`), "
"and references to a resource's RID are *not* counted when determining "
"whether the resource is still in use. Make sure to keep a reference to the "
"resource outside the server, or else both it and its RID will be erased."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:60
msgid "For nodes, there are many functions available:"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:62
msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:64
msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:66
msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:68
msgid ""
"For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) "
"contains functions to get the *VisualServer Scenario*, and the "
"*PhysicsServer Space*. This allows creating 3D objects directly with the "
"server API and using them."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:72
msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *VisualServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:76
msgid ""
"The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the "
"scenario *instance* and *instance base* via the :ref:`VisualInstance."
"get_instance() <class_VisualInstance_method_get_instance>` and :ref:"
"`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"respectively."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:80
msgid ""
"Try exploring the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:82
msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:86
msgid "Creating a sprite"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:88
msgid ""
"This is a simple example of how to create a sprite from code and move it "
"using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:115
msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:119
msgid "Primitives are cleared this way:"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:128
msgid "Instantiating a Mesh into 3D space"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:130
msgid ""
"The 3D APIs are different from the 2D ones, so the instantiation API must be "
"used."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:158
msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:160
msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:195
msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer "
"<class_PhysicsServer>` respectively)."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:199
msgid "Getting data from the servers"
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:201
msgid ""
"Try to **never** request any information from ``VisualServer``, "
"``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""

#: ../../docs/tutorials/performance/using_servers.rst:207
msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:4
msgid "CPU optimization"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:9
msgid ""
"We have to know where the \"bottlenecks\" are to know how to speed up our "
"program. Bottlenecks are the slowest parts of the program that limit the "
"rate that everything can progress. Focussing on bottlenecks allows us to "
"concentrate our efforts on optimizing the areas which will give us the "
"greatest speed improvement, instead of spending a lot of time optimizing "
"functions that will lead to small performance improvements."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:16
msgid ""
"For the CPU, the easiest way to identify bottlenecks is to use a profiler."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:19
msgid "CPU profilers"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:21
msgid ""
"Profilers run alongside your program and take timing measurements to work "
"out what proportion of time is spent in each function."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:24
msgid ""
"The Godot IDE conveniently has a built-in profiler. It does not run every "
"time you start your project: it must be manually started and stopped. This "
"is because, like most profilers, recording these timing measurements can "
"slow down your project significantly."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:29
msgid "After profiling, you can look back at the results for a frame."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:35
msgid "Screenshot of the Godot profiler"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:35
msgid "Results of a profile of one of the demo projects."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:37
msgid ""
"We can see the cost of built-in processes such as physics and audio, as well "
"as seeing the cost of our own scripting functions at the bottom."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:41
msgid ""
"Time spent waiting for various built-in servers may not be counted in the "
"profilers. This is a known bug."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:44
msgid ""
"When a project is running slowly, you will often see an obvious function or "
"process taking a lot more time than others. This is your primary bottleneck, "
"and you can usually increase speed by optimizing this area."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:52
msgid "External profilers"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:54
msgid ""
"Although the Godot IDE profiler is very convenient and useful, sometimes you "
"need more power, and the ability to profile the Godot engine source code "
"itself."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:57
msgid ""
"You can use a number of third party profilers to do this including `Valgrind "
"<https://www.valgrind.org/>`__, `VerySleepy <http://www.codersnotes.com/"
"sleepy/>`__, `HotSpot <https://github.com/KDAB/hotspot>`__, `Visual Studio "
"<https://visualstudio.microsoft.com/>`__ and `Intel VTune <https://software."
"intel.com/content/www/us/en/develop/tools/vtune-profiler.html>`__."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:64
msgid ""
"You will need to compile Godot from source to use a third-party profiler. "
"This is required to obtain debugging symbols. You can also use a debug "
"build, however, note that the results of profiling a debug build will be "
"different to a release build, because debug builds are less optimized. "
"Bottlenecks are often in a different place in debug builds, so you should "
"profile release builds whenever possible."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:74
msgid "Screenshot of Callgrind"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:74
msgid "Example results from Callgrind, which is part of Valgrind."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:76
msgid ""
"From the left, Callgrind is listing the percentage of time within a function "
"and its children (Inclusive), the percentage of time spent within the "
"function itself, excluding child functions (Self), the number of times the "
"function is called, the function name, and the file or module."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:81
msgid ""
"In this example, we can see nearly all time is spent under the `Main::"
"iteration()` function. This is the master function in the Godot source code "
"that is called repeatedly. It causes frames to be drawn, physics ticks to be "
"simulated, and nodes and scripts to be updated. A large proportion of the "
"time is spent in the functions to render a canvas (66%), because this "
"example uses a 2D benchmark. Below this, we see that almost 50% of the time "
"is spent outside Godot code in ``libglapi`` and ``i965_dri`` (the graphics "
"driver). This tells us the a large proportion of CPU time is being spent in "
"the graphics driver."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:91
msgid ""
"This is actually an excellent example because, in an ideal world, only a "
"very small proportion of time would be spent in the graphics driver. This is "
"an indication that there is a problem with too much communication and work "
"being done in the graphics API. This specific profiling led to the "
"development of 2D batching, which greatly speeds up 2D rendering by reducing "
"bottlenecks in this area."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:99
msgid "Manually timing functions"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:101
msgid ""
"Another handy technique, especially once you have identified the bottleneck "
"using a profiler, is to manually time the function or area under test. The "
"specifics vary depending on the language, but in GDScript, you would do the "
"following:"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:116
msgid ""
"When manually timing functions, it is usually a good idea to run the "
"function many times (1,000 or more times), instead of just once (unless it "
"is a very slow function). The reason for doing this is that timers often "
"have limited accuracy. Moreover, CPUs will schedule processes in a haphazard "
"manner. Therefore, an average over a series of runs is more accurate than a "
"single measurement."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:122
msgid ""
"As you attempt to optimize functions, be sure to either repeatedly profile "
"or time them as you go. This will give you crucial feedback as to whether "
"the optimization is working (or not)."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:127
msgid "Caches"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:129
msgid ""
"CPU caches are something else to be particularly aware of, especially when "
"comparing timing results of two different versions of a function. The "
"results can be highly dependent on whether the data is in the CPU cache or "
"not. CPUs don't load data directly from the system RAM, even though it's "
"huge in comparison to the CPU cache (several gigabytes instead of a few "
"megabytes). This is because system RAM is very slow to access. Instead, CPUs "
"load data from a smaller, faster bank of memory called cache. Loading data "
"from cache is very fast, but every time you try and load a memory address "
"that is not stored in cache, the cache must make a trip to main memory and "
"slowly load in some data. This delay can result in the CPU sitting around "
"idle for a long time, and is referred to as a \"cache miss\"."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:141
msgid ""
"This means that the first time you run a function, it may run slowly because "
"the data is not in the CPU cache. The second and later times, it may run "
"much faster because the data is in the cache. Due to this, always use "
"averages when timing, and be aware of the effects of cache."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:146
msgid ""
"Understanding caching is also crucial to CPU optimization. If you have an "
"algorithm (routine) that loads small bits of data from randomly spread out "
"areas of main memory, this can result in a lot of cache misses, a lot of the "
"time, the CPU will be waiting around for data instead of doing any work. "
"Instead, if you can make your data accesses localised, or even better, "
"access memory in a linear fashion (like a continuous list), then the cache "
"will work optimally and the CPU will be able to work as fast as possible."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:154
msgid ""
"Godot usually takes care of such low-level details for you. For example, the "
"Server APIs make sure data is optimized for caching already for things like "
"rendering and physics. Still, you should be especially aware of caching when "
"using :ref:`GDNative <toc-tutorials-gdnative>`."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:160
msgid "Languages"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:162
msgid ""
"Godot supports a number of different languages, and it is worth bearing in "
"mind that there are trade-offs involved. Some languages are designed for "
"ease of use at the cost of speed, and others are faster but more difficult "
"to work with."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:166
msgid ""
"Built-in engine functions run at the same speed regardless of the scripting "
"language you choose. If your project is making a lot of calculations in its "
"own code, consider moving those calculations to a faster language."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:173
msgid ""
":ref:`GDScript <toc-learn-scripting-gdscript>` is designed to be easy to use "
"and iterate, and is ideal for making many types of games. However, in this "
"language, ease of use is considered more important than performance. If you "
"need to make heavy calculations, consider moving some of your project to one "
"of the other languages."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:182
msgid ""
":ref:`C# <toc-learn-scripting-C#>` is popular and has first-class support in "
"Godot.It offers a good compromise between speed and ease of use. Beware of "
"possible garbage collection pauses and leaks that can occur during gameplay, "
"though. A common approach to workaround issues with garbage collection is to "
"use *object pooling*, which is outside the scope of this guide."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:189
msgid "Other languages"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:191
msgid ""
"Third parties provide support for several other languages, including `Rust "
"<https://github.com/godot-rust/godot-rust>`_ and `Javascript <https://github."
"com/GodotExplorer/ECMAScript>`_."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:196
msgid "C++"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:198
msgid ""
"Godot is written in C++. Using C++ will usually result in the fastest code. "
"However, on a practical level, it is the most difficult to deploy to end "
"users' machines on different platforms. Options for using C++ include :ref:"
"`GDNative <toc-tutorials-gdnative>` and :ref:`custom modules "
"<doc_custom_modules_in_c++>`."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:207
msgid ""
"Consider using threads when making a lot of calculations that can run in "
"parallel to each other. Modern CPUs have multiple cores, each one capable of "
"doing a limited amount of work. By spreading work over multiple threads, you "
"can move further towards peak CPU efficiency."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:212
msgid ""
"The disadvantage of threads is that you have to be incredibly careful. As "
"each CPU core operates independently, they can end up trying to access the "
"same memory at the same time. One thread can be reading to a variable while "
"another is writing: this is called a *race condition*. Before you use "
"threads, make sure you understand the dangers and how to try and prevent "
"these race conditions."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:218
msgid ""
"Threads can also make debugging considerably more difficult. The GDScript "
"debugger doesn't support setting up breakpoints in threads yet."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:221
msgid "For more information on threads, see :ref:`doc_using_multiple_threads`."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:224
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:288
#: ../../docs/tutorials/scripting/scene_tree.rst:33
msgid "SceneTree"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:226
msgid ""
"Although Nodes are an incredibly powerful and versatile concept, be aware "
"that every node has a cost. Built-in functions such as `_process()` and "
"`_physics_process()` propagate through the tree. This housekeeping can "
"reduce performance when you have very large numbers of nodes (usually in the "
"thousands)."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:231
msgid ""
"Each node is handled individually in the Godot renderer. Therefore, a "
"smaller number of nodes with more in each can lead to better performance."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:234
msgid ""
"One quirk of the :ref:`SceneTree <class_SceneTree>` is that you can "
"sometimes get much better performance by removing nodes from the SceneTree, "
"rather than by pausing or hiding them. You don't have to delete a detached "
"node. You can for example, keep a reference to a node, detach it from the "
"scene tree using :ref:`Node.remove_child(node) "
"<class_Node_method_remove_child>`, then reattach it later using :ref:`Node."
"add_child(node) <class_Node_method_add_child>`. This can be very useful for "
"adding and removing areas from a game, for example."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:242
msgid ""
"You can avoid the SceneTree altogether by using Server APIs. For more "
"information, see :ref:`doc_using_servers`."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:248
msgid ""
"In some situations, physics can end up becoming a bottleneck. This is "
"particularly the case with complex worlds and large numbers of physics "
"objects."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:251
msgid "Here are some techniques to speed up physics:"
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:253
msgid ""
"Try using simplified versions of your rendered geometry for collision "
"shapes. Often, this won't be noticeable for end users, but can greatly "
"increase performance."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:256
msgid ""
"Try removing objects from physics when they are out of view / outside the "
"current area, or reusing physics objects (maybe you allow 8 monsters per "
"area, for example, and reuse these)."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:260
msgid ""
"Another crucial aspect to physics is the physics tick rate. In some games, "
"you can greatly reduce the tick rate, and instead of for example, updating "
"physics 60 times per second, you may update them only 30 or even 20 times "
"per second. This can greatly reduce the CPU load."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:265
msgid ""
"The downside of changing physics tick rate is you can get jerky movement or "
"jitter when the physics update rate does not match the frames per second "
"rendered. Also, decreasing the physics tick rate will increase input lag. "
"It's recommended to stick to the default physics tick rate (60 Hz) in most "
"games that feature real-time player movement."
msgstr ""

#: ../../docs/tutorials/performance/cpu_optimization.rst:271
msgid ""
"The solution to jitter is to use *fixed timestep interpolation*, which "
"involves smoothing the rendered positions and rotations over multiple frames "
"to match the physics. You can either implement this yourself or use a `third-"
"party addon <https://github.com/lawnjelly/smoothing-addon>`__. Performance-"
"wise, interpolation is a very cheap operation compared to running a physics "
"tick. It's orders of magnitude faster, so this can be a significant "
"performance win while also reducing jitter."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:4
msgid "GPU optimization"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:9
msgid ""
"The demand for new graphics features and progress almost guarantees that you "
"will encounter graphics bottlenecks. Some of these can be on the CPU side, "
"for instance in calculations inside the Godot engine to prepare objects for "
"rendering. Bottlenecks can also occur on the CPU in the graphics driver, "
"which sorts instructions to pass to the GPU, and in the transfer of these "
"instructions. And finally, bottlenecks also occur on the GPU itself."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:16
msgid ""
"Where bottlenecks occur in rendering is highly hardware-specific. Mobile "
"GPUs in particular may struggle with scenes that run easily on desktop."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:19
msgid ""
"Understanding and investigating GPU bottlenecks is slightly different to the "
"situation on the CPU. This is because, often, you can only change "
"performance indirectly by changing the instructions you give to the GPU. "
"Also, it may be more difficult to take measurements. In many cases, the only "
"way of measuring performance is by examining changes in the time spent "
"rendering each frame."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:26
msgid "Draw calls, state changes, and APIs"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:28
msgid ""
"The following section is not relevant to end-users, but is useful to provide "
"background information that is relevant in later sections."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:31
msgid ""
"Godot sends instructions to the GPU via a graphics API (OpenGL, OpenGL ES or "
"Vulkan). The communication and driver activity involved can be quite costly, "
"especially in OpenGL and OpenGL ES. If we can provide these instructions in "
"a way that is preferred by the driver and GPU, we can greatly increase "
"performance."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:37
msgid ""
"Nearly every API command in OpenGL requires a certain amount of validation "
"to make sure the GPU is in the correct state. Even seemingly simple commands "
"can lead to a flurry of behind-the-scenes housekeeping. Therefore, the goal "
"is to reduce these instructions to a bare minimum and group together similar "
"objects as much as possible so they can be rendered together, or with the "
"minimum number of these expensive state changes."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:45
msgid "2D batching"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:47
msgid ""
"In 2D, the costs of treating each item individually can be prohibitively "
"high - there can easily be thousands of them on the screen. This is why 2D "
"*batching* is used. Multiple similar items are grouped together and rendered "
"in a batch, via a single draw call, rather than making a separate draw call "
"for each item. In addition, this means state changes, material and texture "
"changes can be kept to a minimum."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:54
msgid "For more information on 2D batching, see :ref:`doc_batching`."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:57
msgid "3D batching"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:59
msgid ""
"In 3D, we still aim to minimize draw calls and state changes. However, it "
"can be more difficult to batch together several objects into a single draw "
"call. 3D meshes tend to comprise hundreds or thousands of triangles, and "
"combining large meshes in real-time is prohibitively expensive. The costs of "
"joining them quickly exceeds any benefits as the number of triangles grows "
"per mesh. A much better alternative is to **join meshes ahead of time** "
"(static meshes in relation to each other). This can either be done by "
"artists, or programmatically within Godot."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:67
msgid ""
"There is also a cost to batching together objects in 3D. Several objects "
"rendered as one cannot be individually culled. An entire city that is off-"
"screen will still be rendered if it is joined to a single blade of grass "
"that is on screen. Thus, you should always take objects' location and "
"culling into account when attempting to batch 3D objects together. Despite "
"this, the benefits of joining static objects often outweigh other "
"considerations, especially for large numbers of distant or low-poly objects."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:75
msgid ""
"For more information on 3D specific optimizations, see :ref:"
"`doc_optimizing_3d_performance`."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:79
msgid "Reuse Shaders and Materials"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:81
msgid ""
"The Godot renderer is a little different to what is out there. It's designed "
"to minimize GPU state changes as much as possible. :ref:`SpatialMaterial "
"<class_SpatialMaterial>` does a good job at reusing materials that need "
"similar shaders. If custom shaders are used, make sure to reuse them as much "
"as possible. Godot's priorities are:"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:87
msgid ""
"**Reusing Materials:** The fewer different materials in the scene, the "
"faster the rendering will be. If a scene has a huge amount of objects (in "
"the hundreds or thousands), try reusing the materials. In the worst case, "
"use atlases to decrease the amount of texture changes."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:91
msgid ""
"**Reusing Shaders:** If materials can't be reused, at least try to re-use "
"shaders. Note: shaders are automatically reused between SpatialMaterials "
"that share the same configuration (features that are enabled or disabled "
"with a check box) even if they have different parameters."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:97
msgid ""
"If a scene has, for example, ``20,000`` objects with ``20,000`` different "
"materials each, rendering will be slow. If the same scene has ``20,000`` "
"objects, but only uses ``100`` materials, rendering will be much faster."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:102
msgid "Pixel cost versus vertex cost"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:104
msgid ""
"You may have heard that the lower the number of polygons in a model, the "
"faster it will be rendered. This is *really* relative and depends on many "
"factors."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:107
msgid ""
"On a modern PC and console, vertex cost is low. GPUs originally only "
"rendered triangles. This meant that every frame:"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:110
msgid "All vertices had to be transformed by the CPU (including clipping)."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:111
msgid "All vertices had to be sent to the GPU memory from the main RAM."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:113
msgid ""
"Nowadays, all this is handled inside the GPU, greatly increasing "
"performance. 3D artists usually have the wrong feeling about polycount "
"performance because 3D DCCs (such as Blender, Max, etc.) need to keep "
"geometry in CPU memory for it to be edited, reducing actual performance. "
"Game engines rely on the GPU more, so they can render many triangles much "
"more efficiently."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:119
msgid ""
"On mobile devices, the story is different. PC and console GPUs are brute-"
"force monsters that can pull as much electricity as they need from the power "
"grid. Mobile GPUs are limited to a tiny battery, so they need to be a lot "
"more power efficient."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:124
msgid ""
"To be more efficient, mobile GPUs attempt to avoid *overdraw*. Overdraw "
"occurs when the same pixel on the screen is being rendered more than once. "
"Imagine a town with several buildings. GPUs don't know what is visible and "
"what is hidden until they draw it. For example, a house might be drawn and "
"then another house in front of it (which means rendering happened twice for "
"the same pixel). PC GPUs normally don't care much about this and just throw "
"more pixel processors to the hardware to increase performance (which also "
"increases power consumption)."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:132
msgid ""
"Using more power is not an option on mobile so mobile devices use a "
"technique called *tile-based rendering* which divides the screen into a "
"grid. Each cell keeps the list of triangles drawn to it and sorts them by "
"depth to minimize *overdraw*. This technique improves performance and "
"reduces power consumption, but takes a toll on vertex performance. As a "
"result, fewer vertices and triangles can be processed for drawing."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:139
msgid ""
"Additionally, tile-based rendering struggles when there are small objects "
"with a lot of geometry within a small portion of the screen. This forces "
"mobile GPUs to put a lot of strain on a single screen tile, which "
"considerably decreases performance as all the other cells must wait for it "
"to complete before displaying the frame."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:145
msgid ""
"To summarize, don't worry about vertex count on mobile, but **avoid "
"concentration of vertices in small parts of the screen**. If a character, "
"NPC, vehicle, etc. is far away (which means it looks tiny), use a smaller "
"level of detail (LOD) model. Even on desktop GPUs, it's preferable to avoid "
"having triangles smaller than the size of a pixel on screen."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:151
msgid "Pay attention to the additional vertex processing required when using:"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:153
msgid "Skinning (skeletal animation)"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:154
msgid "Morphs (shape keys)"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:155
msgid "Vertex-lit objects (common on mobile)"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:158
msgid "Pixel/fragment shaders and fill rate"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:160
msgid ""
"In contrast to vertex processing, the costs of fragment (per-pixel) shading "
"have increased dramatically over the years. Screen resolutions have "
"increased (the area of a 4K screen is 8,294,400 pixels, versus 307,200 for "
"an old 640×480 VGA screen, that is 27x the area), but also the complexity of "
"fragment shaders has exploded. Physically-based rendering requires complex "
"calculations for each fragment."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:167
msgid ""
"You can test whether a project is fill rate-limited quite easily. Turn off V-"
"Sync to prevent capping the frames per second, then compare the frames per "
"second when running with a large window, to running with a very small "
"window. You may also benefit from similarly reducing your shadow map size if "
"using shadows. Usually, you will find the FPS increases quite a bit using a "
"small window, which indicates you are to some extent fill rate-limited. On "
"the other hand, if there is little to no increase in FPS, then your "
"bottleneck lies elsewhere."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:176
msgid ""
"You can increase performance in a fill rate-limited project by reducing the "
"amount of work the GPU has to do. You can do this by simplifying the shader "
"(perhaps turn off expensive options if you are using a :ref:`SpatialMaterial "
"<class_SpatialMaterial>`), or reducing the number and size of textures used."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:181
msgid ""
"**When targeting mobile devices, consider using the simplest possible "
"shaders you can reasonably afford to use.**"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:185
msgid "Reading textures"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:187
msgid ""
"The other factor in fragment shaders is the cost of reading textures. "
"Reading textures is an expensive operation, especially when reading from "
"several textures in a single fragment shader. Also, consider that filtering "
"may slow it down further (trilinear filtering between mipmaps, and "
"averaging). Reading textures is also expensive in terms of power usage, "
"which is a big issue on mobiles."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:194
msgid ""
"**If you use third-party shaders or write your own shaders, try to use "
"algorithms that require as few texture reads as possible.**"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:198
#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:111
msgid "Texture compression"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:200
msgid ""
"By default, Godot compresses textures of 3D models when imported using video "
"RAM (VRAM) compression. Video RAM compression isn't as efficient in size as "
"PNG or JPG when stored, but increases performance enormously when drawing "
"large enough textures."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:205
msgid ""
"This is because the main goal of texture compression is bandwidth reduction "
"between memory and the GPU."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:208
msgid ""
"In 3D, the shapes of objects depend more on the geometry than the texture, "
"so compression is generally not noticeable. In 2D, compression depends more "
"on shapes inside the textures, so the artifacts resulting from 2D "
"compression are more noticeable."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:213
msgid ""
"As a warning, most Android devices do not support texture compression of "
"textures with transparency (only opaque), so keep this in mind."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:218
msgid ""
"Even in 3D, \"pixel art\" textures should have VRAM compression disabled as "
"it will negatively affect their appearance, without improving performance "
"significantly due to their low resolution."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:224
msgid "Post-processing and shadows"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:226
msgid ""
"Post-processing effects and shadows can also be expensive in terms of "
"fragment shading activity. Always test the impact of these on different "
"hardware."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:229
msgid ""
"**Reducing the size of shadowmaps can increase performance**, both in terms "
"of writing and reading the shadowmaps. On top of that, the best way to "
"improve performance of shadows is to turn shadows off for as many lights and "
"objects as possible. Smaller or distant OmniLights/SpotLights can often have "
"their shadows disabled with only a small visual impact."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:236
msgid "Transparency and blending"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:238
msgid ""
"Transparent objects present particular problems for rendering efficiency. "
"Opaque objects (especially in 3D) can be essentially rendered in any order "
"and the Z-buffer will ensure that only the front most objects get shaded. "
"Transparent or blended objects are different. In most cases, they cannot "
"rely on the Z-buffer and must be rendered in \"painter's order\" (i.e. from "
"back to front) to look correct."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:245
msgid ""
"Transparent objects are also particularly bad for fill rate, because every "
"item has to be drawn even if other transparent objects will be drawn on top "
"later on."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:249
msgid ""
"Opaque objects don't have to do this. They can usually take advantage of the "
"Z-buffer by writing to the Z-buffer only first, then only performing the "
"fragment shader on the \"winning\" fragment, the object that is at the front "
"at a particular pixel."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:254
msgid ""
"Transparency is particularly expensive where multiple transparent objects "
"overlap. It is usually better to use transparent areas as small as possible "
"to minimize these fill rate requirements, especially on mobile, where fill "
"rate is very expensive. Indeed, in many situations, rendering more complex "
"opaque geometry can end up being faster than using transparency to \"cheat\"."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:261
msgid "Multi-platform advice"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:263
msgid ""
"If you are aiming to release on multiple platforms, test *early* and test "
"*often* on all your platforms, especially mobile. Developing a game on "
"desktop but attempting to port it to mobile at the last minute is a recipe "
"for disaster."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:267
msgid ""
"In general, you should design your game for the lowest common denominator, "
"then add optional enhancements for more powerful platforms. For example, you "
"may want to use the GLES2 backend for both desktop and mobile platforms "
"where you target both."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:273
msgid "Mobile/tiled renderers"
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:275
msgid ""
"As described above, GPUs on mobile devices work in dramatically different "
"ways from GPUs on desktop. Most mobile devices use tile renderers. Tile "
"renderers split up the screen into regular-sized tiles that fit into super "
"fast cache memory, which reduces the number of read/write operations to the "
"main memory."
msgstr ""

#: ../../docs/tutorials/performance/gpu_optimization.rst:280
msgid ""
"There are some downsides though. Tiled rendering can make certain techniques "
"much more complicated and expensive to perform. Tiles that rely on the "
"results of rendering in different tiles or on the results of earlier "
"operations being preserved can be very slow. Be very careful to test the "
"performance of shaders, viewport textures and post processing."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:4
msgid "Optimization using MultiMeshes"
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:6
msgid ""
"For large amount of instances (in the thousands), that need to be constantly "
"processed (and certain amount of control needs to be retained), :ref:`using "
"servers directly <doc_using_servers>` is the recommended optimization."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:10
msgid ""
"When the amount of objects reach the hundreds of thousands or millions, none "
"of these approaches are efficient anymore. Still, depending on the "
"requirements, there is one more optimization possible."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:15
#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:112
msgid "MultiMeshes"
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:17
msgid ""
"A :ref:`MultiMesh<class_MultiMesh>` is a single draw primitive that can draw "
"up to millions of objects in one go. It's extremely efficient because it "
"uses the GPU hardware to do this (in OpenGL ES 2.0, it's less efficient "
"because there is no hardware support for it, though)."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:21
msgid ""
"The only drawback is that there is no *screen* or *frustum* culling possible "
"for individual instances. This means, that millions of objects will be "
"*always* or *never* drawn, depending on the visibility of the whole "
"MultiMesh. It is possible to provide a custom visibility rect for them, but "
"it will always be *all-or-none* visibility."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:26
msgid ""
"If the objects are simple enough (just a couple of vertices), this is "
"generally not much of a problem as most modern GPUs are optimized for this "
"use case. A workaround is to create several MultiMeshes for different areas "
"of the world."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:30
msgid ""
"It is also possible to execute some logic inside the vertex shader (using "
"the ``INSTANCE_ID`` or ``INSTANCE_CUSTOM`` built-in constants). For an "
"example of animating thousands of objects in a MultiMesh, see the :ref:"
"`Animating thousands of fish <doc_animating_thousands_of_fish>` tutorial. "
"Information to the shader can be provided via textures (there are floating-"
"point :ref:`Image<class_Image>` formats which are ideal for this)."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:36
msgid ""
"Another alternative is to use GDNative and C++, which should be extremely "
"efficient (it's possible to set the entire state for all objects using "
"linear memory via the :ref:`VisualServer.multimesh_set_as_bulk_array() "
"<class_VisualServer_method_multimesh_set_as_bulk_array>` function). This "
"way, the array can be created with multiple threads, then set in one call, "
"providing high cache efficiency."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:42
msgid ""
"Finally, it's not required to have all MultiMesh instances visible. The "
"amount of visible ones can be controlled with the :ref:`MultiMesh."
"visible_instance_count <class_MultiMesh_property_visible_instance_count>` "
"property. The typical workflow is to allocate the maximum amount of "
"instances that will be used, then change the amount visible depending on how "
"many are currently needed."
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:48
msgid "Multimesh example"
msgstr ""

#: ../../docs/tutorials/performance/using_multimesh.rst:50
msgid ""
"Here is an example of using a MultiMesh from code. Languages other than "
"GDScript may be more efficient for millions of objects, but for a few "
"thousands, GDScript should be fine."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:4
msgid "Optimization using batching"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:9
msgid ""
"Game engines have to send a set of instructions to the GPU to tell the GPU "
"what and where to draw. These instructions are sent using common "
"instructions called :abbr:`APIs (Application Programming Interfaces)`. "
"Examples of graphics APIs are OpenGL, OpenGL ES, and Vulkan."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:14
msgid ""
"Different APIs incur different costs when drawing objects. OpenGL handles a "
"lot of work for the user in the GPU driver at the cost of more expensive "
"draw calls. As a result, applications can often be sped up by reducing the "
"number of draw calls."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:20
msgid "Draw calls"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:22
msgid ""
"In 2D, we need to tell the GPU to render a series of primitives (rectangles, "
"lines, polygons etc). The most obvious technique is to tell the GPU to "
"render one primitive at a time, telling it some information such as the "
"texture used, the material, the position, size, etc. then saying \"Draw!"
"\" (this is called a draw call)."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:28
msgid ""
"While this is conceptually simple from the engine side, GPUs operate very "
"slowly when used in this manner. GPUs work much more efficiently if you tell "
"them to draw a number of similar primitives all in one draw call, which we "
"will call a \"batch\"."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:33
msgid ""
"It turns out that they don't just work a bit faster when used in this "
"manner; they work a *lot* faster."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:36
msgid ""
"As Godot is designed to be a general-purpose engine, the primitives coming "
"into the Godot renderer can be in any order, sometimes similar, and "
"sometimes dissimilar. To match Godot's general-purpose nature with the "
"batching preferences of GPUs, Godot features an intermediate layer which can "
"automatically group together primitives wherever possible and send these "
"batches on to the GPU. This can give an increase in rendering performance "
"while requiring few (if any) changes to your Godot project."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:45
msgid "How it works"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:47
msgid ""
"Instructions come into the renderer from your game in the form of a series "
"of items, each of which can contain one or more commands. The items "
"correspond to Nodes in the scene tree, and the commands correspond to "
"primitives such as rectangles or polygons. Some items such as TileMaps and "
"text can contain a large number of commands (tiles and glyphs respectively). "
"Others, such as sprites, may only contain a single command (a rectangle)."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:54
msgid "The batcher uses two main techniques to group together primitives:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:56
msgid "Consecutive items can be joined together."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:57
msgid "Consecutive commands within an item can be joined to form a batch."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:60
msgid "Breaking batching"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:62
msgid ""
"Batching can only take place if the items or commands are similar enough to "
"be rendered in one draw call. Certain changes (or techniques), by necessity, "
"prevent the formation of a contiguous batch, this is referred to as "
"\"breaking batching\"."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:66
msgid "Batching will be broken by (amongst other things):"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:68
msgid "Change of texture."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:69
msgid "Change of material."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:70
msgid "Change of primitive type (say, going from rectangles to lines)."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:74
msgid ""
"For example, if you draw a series of sprites each with a different texture, "
"there is no way they can be batched."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:78
msgid "Determining the rendering order"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:80
msgid ""
"The question arises, if only similar items can be drawn together in a batch, "
"why don't we look through all the items in a scene, group together all the "
"similar items, and draw them together?"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:84
msgid ""
"In 3D, this is often exactly how engines work. However, in Godot's 2D "
"renderer, items are drawn in \"painter's order\", from back to front. This "
"ensures that items at the front are drawn on top of earlier items when they "
"overlap."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:88
msgid ""
"This also means that if we try and draw objects on a per-texture basis, then "
"this painter's order may break and objects will be drawn in the wrong order."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:91
msgid "In Godot, this back-to-front order is determined by:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:93
msgid "The order of objects in the scene tree."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:94
msgid "The Z index of objects."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:95
msgid "The canvas layer."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:96
msgid ":ref:`class_YSort` nodes."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:100
msgid ""
"You can group similar objects together for easier batching. While doing so "
"is not a requirement on your part, think of it as an optional approach that "
"can improve performance in some cases. See the :ref:"
"`doc_batching_diagnostics` section to help you make this decision."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:106
msgid "A trick"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:108
msgid ""
"And now, a sleight of hand. Even though the idea of painter's order is that "
"objects are rendered from back to front, consider 3 objects ``A``, ``B`` and "
"``C``, that contain 2 different textures: grass and wood."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:114
msgid "In painter's order they are ordered::"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:120
msgid ""
"Because of the texture changes, they can't be batched and will be rendered "
"in 3 draw calls."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:123
msgid ""
"However, painter's order is only needed on the assumption that they will be "
"drawn *on top* of each other. If we relax that assumption, i.e. if none of "
"these 3 objects are overlapping, there is *no need* to preserve painter's "
"order. The rendered result will be the same. What if we could take advantage "
"of this?"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:129
msgid "Item reordering"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:133
msgid ""
"It turns out that we can reorder items. However, we can only do this if the "
"items satisfy the conditions of an overlap test, to ensure that the end "
"result will be the same as if they were not reordered. The overlap test is "
"very cheap in performance terms, but not absolutely free, so there is a "
"slight cost to looking ahead to decide whether items can be reordered. The "
"number of items to lookahead for reordering can be set in project settings "
"(see below), in order to balance the costs and benefits in your project."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:147
msgid ""
"Since the texture only changes once, we can render the above in only 2 draw "
"calls."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:153
msgid ""
"Although the batching system's job is normally quite straightforward, it "
"becomes considerably more complex when 2D lights are used. This is because "
"lights are drawn using additional passes, one for each light affecting the "
"primitive. Consider 2 sprites ``A`` and ``B``, with identical texture and "
"material. Without lights, they would be batched together and drawn in one "
"draw call. But with 3 lights, they would be drawn as follows, each line "
"being a draw call:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:173
msgid ""
"That is a lot of draw calls: 8 for only 2 sprites. Now, consider we are "
"drawing 1,000 sprites. The number of draw calls quickly becomes astronomical "
"and performance suffers. This is partly why lights have the potential to "
"drastically slow down 2D rendering."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:178
msgid ""
"However, if you remember our magician's trick from item reordering, it turns "
"out we can use the same trick to get around painter's order for lights!"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:181
msgid ""
"If ``A`` and ``B`` are not overlapping, we can render them together in a "
"batch, so the drawing process is as follows:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:194
msgid ""
"That is only 4 draw calls. Not bad, as that is a 2× reduction. However, "
"consider that in a real game, you might be drawing closer to 1,000 sprites."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:197
msgid "**Before:** 1000 × 4 = 4,000 draw calls."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:198
msgid "**After:** 1 × 4 = 4 draw calls."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:200
msgid ""
"That is a 1000× decrease in draw calls, and should give a huge increase in "
"performance."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:204
msgid "Overlap test"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:206
msgid ""
"However, as with the item reordering, things are not that simple. We must "
"first perform the overlap test to determine whether we can join these "
"primitives. This overlap test has a small cost. Again, you can choose the "
"number of primitives to lookahead in the overlap test to balance the "
"benefits against the cost. With lights, the benefits usually far outweigh "
"the costs."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:212
msgid ""
"Also consider that depending on the arrangement of primitives in the "
"viewport, the overlap test will sometimes fail (because the primitives "
"overlap and therefore shouldn't be joined). In practice, the decrease in "
"draw calls may be less dramatic than in a perfect situation with no "
"overlapping at all. However, performance is usually far higher than without "
"this lighting optimization."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:219
msgid "Light scissoring"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:221
msgid ""
"Batching can make it more difficult to cull out objects that are not "
"affected or partially affected by a light. This can increase the fill rate "
"requirements quite a bit and slow down rendering. *Fill rate* is the rate at "
"which pixels are colored. It is another potential bottleneck unrelated to "
"draw calls."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:226
msgid ""
"In order to counter this problem (and speed up lighting in general), "
"batching introduces light scissoring. This enables the use of the OpenGL "
"command ``glScissor()``, which identifies an area outside of which the GPU "
"won't render any pixels. We can greatly optimize fill rate by identifying "
"the intersection area between a light and a primitive, and limit rendering "
"the light to *that area only*."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:233
msgid ""
"Light scissoring is controlled with the :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` project setting. This value is between 1.0 and 0.0, "
"with 1.0 being off (no scissoring), and 0.0 being scissoring in every "
"circumstance. The reason for the setting is that there may be some small "
"cost to scissoring on some hardware. That said, scissoring should usually "
"result in performance gains when you're using 2D lighting."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:241
msgid ""
"The relationship between the threshold and whether a scissor operation takes "
"place is not always straightforward. Generally, it represents the pixel area "
"that is potentially \"saved\" by a scissor operation (i.e. the fill rate "
"saved). At 1.0, the entire screen's pixels would need to be saved, which "
"rarely (if ever) happens, so it is switched off. In practice, the useful "
"values are close to 0.0, as only a small percentage of pixels need to be "
"saved for the operation to be useful."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:249
msgid ""
"The exact relationship is probably not necessary for users to worry about, "
"but is included in the appendix out of interest: :ref:"
"`doc_batching_light_scissoring_threshold_calculation`"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:256
msgid "Light scissoring example diagram"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:256
msgid ""
"Bottom right is a light, the red area is the pixels saved by the scissoring "
"operation. Only the intersection needs to be rendered."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:260
msgid "Vertex baking"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:262
msgid "The GPU shader receives instructions on what to draw in 2 main ways:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:264
msgid "Shader uniforms (e.g. modulate color, item transform)."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:265
msgid "Vertex attributes (vertex color, local transform)."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:267
msgid ""
"However, within a single draw call (batch), we cannot change uniforms. This "
"means that naively, we would not be able to batch together items or commands "
"that change ``final_modulate`` or an item's transform. Unfortunately, that "
"happens in an awful lot of cases. For instance, sprites are typically "
"individual nodes with their own item transform, and they may have their own "
"color modulate as well."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:274
msgid ""
"To get around this problem, the batching can \"bake\" some of the uniforms "
"into the vertex attributes."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:277
msgid ""
"The item transform can be combined with the local transform and sent in a "
"vertex attribute."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:279
msgid ""
"The final modulate color can be combined with the vertex colors, and sent in "
"a vertex attribute."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:282
msgid ""
"In most cases, this works fine, but this shortcut breaks down if a shader "
"expects these values to be available individually rather than combined. This "
"can happen in custom shaders."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:287
msgid "Custom shaders"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:289
msgid ""
"As a result of the limitation described above, certain operations in custom "
"shaders will prevent vertex baking and therefore decrease the potential for "
"batching. While we are working to decrease these cases, the following "
"caveats currently apply:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:294
msgid ""
"Reading or writing ``COLOR`` or ``MODULATE`` disables vertex color baking."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:295
msgid "Reading ``VERTEX``  disables vertex position baking."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:298
msgid "Project Settings"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:300
msgid ""
"To fine-tune batching, a number of project settings are available. You can "
"usually leave these at default during development, but it's a good idea to "
"experiment to ensure you are getting maximum performance. Spending a little "
"time tweaking parameters can often give considerable performance gains for "
"very little effort. See the on-hover tooltips in the Project Settings for "
"more information."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:308
msgid "rendering/batching/options"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:310
msgid ""
":ref:`use_batching <class_ProjectSettings_property_rendering/batching/"
"options/use_batching>` - Turns batching on or off."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:314
msgid ""
":ref:`use_batching_in_editor <class_ProjectSettings_property_rendering/"
"batching/options/use_batching_in_editor>` Turns batching on or off in the "
"Godot editor. This setting doesn't affect the running project in any way."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:319
msgid ""
":ref:`single_rect_fallback <class_ProjectSettings_property_rendering/"
"batching/options/single_rect_fallback>` - This is a faster way of drawing "
"unbatchable rectangles. However, it may lead to flicker on some hardware so "
"it's not recommended."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:325
msgid "rendering/batching/parameters"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:327
msgid ""
":ref:`max_join_item_commands <class_ProjectSettings_property_rendering/"
"batching/parameters/max_join_item_commands>` - One of the most important "
"ways of achieving batching is to join suitable adjacent items (nodes) "
"together, however they can only be joined if the commands they contain are "
"compatible. The system must therefore do a lookahead through the commands in "
"an item to determine whether it can be joined. This has a small cost per "
"command, and items with a large number of commands are not worth joining, so "
"the best value may be project dependent."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:335
msgid ""
":ref:`colored_vertex_format_threshold "
"<class_ProjectSettings_property_rendering/batching/parameters/"
"colored_vertex_format_threshold>` - Baking colors into vertices results in a "
"larger vertex format. This is not necessarily worth doing unless there are a "
"lot of color changes going on within a joined item. This parameter "
"represents the proportion of commands containing color changes / the total "
"commands, above which it switches to baked colors."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:343
msgid ""
":ref:`batch_buffer_size <class_ProjectSettings_property_rendering/batching/"
"parameters/batch_buffer_size>` - This determines the maximum size of a "
"batch, it doesn't have a huge effect on performance but can be worth "
"decreasing for mobile if RAM is at a premium."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:348
msgid ""
":ref:`item_reordering_lookahead <class_ProjectSettings_property_rendering/"
"batching/parameters/item_reordering_lookahead>` - Item reordering can help "
"especially with interleaved sprites using different textures. The lookahead "
"for the overlap test has a small cost, so the best value may change per "
"project."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:355
msgid "rendering/batching/lights"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:357
msgid ""
":ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` - See light scissoring."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:361
msgid ""
":ref:`max_join_items <class_ProjectSettings_property_rendering/batching/"
"lights/max_join_items>` - Joining items before lighting can significantly "
"increase performance. This requires an overlap test, which has a small cost, "
"so the costs and benefits may be project dependent, and hence the best value "
"to use here."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:369
msgid "rendering/batching/debug"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:371
msgid ""
":ref:`flash_batching <class_ProjectSettings_property_rendering/batching/"
"debug/flash_batching>` - This is purely a debugging feature to identify "
"regressions between the batching and legacy renderer. When it is switched "
"on, the batching and legacy renderer are used alternately on each frame. "
"This will decrease performance, and should not be used for your final "
"export, only for testing."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:378
msgid ""
":ref:`diagnose_frame <class_ProjectSettings_property_rendering/batching/"
"debug/diagnose_frame>` - This will periodically print a diagnostic batching "
"log to the Godot IDE / console."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:384
msgid "rendering/batching/precision"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:386
msgid ""
":ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` - On some hardware (notably some Android devices) "
"there have been reports of tilemap tiles drawing slightly outside their UV "
"range, leading to edge artifacts such as lines around tiles. If you see this "
"problem, try enabling uv contract. This makes a small contraction in the UV "
"coordinates to compensate for precision errors on devices."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:394
msgid ""
":ref:`uv_contract_amount <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract_amount>` - Hopefully, the default amount should cure "
"artifacts on most devices, but this value remains adjustable just in case."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:402
msgid "Diagnostics"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:404
msgid ""
"Although you can change parameters and examine the effect on frame rate, "
"this can feel like working blindly, with no idea of what is going on under "
"the hood. To help with this, batching offers a diagnostic mode, which will "
"periodically print out (to the IDE or console) a list of the batches that "
"are being processed. This can help pinpoint situations where batching isn't "
"occurring as intended, and help you fix these situations to get the best "
"possible performance."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:412
msgid "Reading a diagnostic"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:437
msgid "This is a typical diagnostic."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:439
msgid ""
"**joined_item:** A joined item can contain 1 or more references to items "
"(nodes). Generally, joined_items containing many references is preferable to "
"many joined_items containing a single reference. Whether items can be joined "
"will be determined by their contents and compatibility with the previous "
"item."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:444
msgid ""
"**batch R:** A batch containing rectangles. The second number is the number "
"of rects. The second number in square brackets is the Godot texture ID, and "
"the numbers in curly braces is the color. If the batch contains more than "
"one rect, ``MULTI`` is added to the line to make it easy to identify. Seeing "
"``MULTI`` is good as it indicates successful batching."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:449
msgid ""
"**batch D:** A default batch, containing everything else that is not "
"currently batched."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:453
msgid "Default batches"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:455
msgid ""
"The second number following default batches is the number of commands in the "
"batch, and it is followed by a brief summary of the contents::"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:471
msgid ""
"You may see \"dummy\" default batches containing no commands; you can ignore "
"those."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:477
msgid "I don't get a large performance increase when enabling batching."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:479
msgid ""
"Try the diagnostics, see how much batching is occurring, and whether it can "
"be improved"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:481
msgid "Try changing batching parameters in the Project Settings."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:482
msgid "Consider that batching may not be your bottleneck (see bottlenecks)."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:485
msgid "I get a decrease in performance with batching."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:487
msgid ""
"Try the steps described above to increase the number of batching "
"opportunities."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:488
msgid ""
"Try enabling :ref:`single_rect_fallback "
"<class_ProjectSettings_property_rendering/batching/options/"
"single_rect_fallback>`."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:490
msgid ""
"The single rect fallback method is the default used without batching, and it "
"is approximately twice as fast. However, it can result in flickering on some "
"hardware, so its use is discouraged."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:493
msgid ""
"After trying the above, if your scene is still performing worse, consider "
"turning off batching."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:497
msgid "I use custom shaders and the items are not batching."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:499
msgid ""
"Custom shaders can be problematic for batching, see the custom shaders "
"section"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:502
msgid "I am seeing line artifacts appear on certain hardware."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:504
msgid ""
"See the :ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` project setting which can be used to solve this "
"problem."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:509
msgid "I use a large number of textures, so few items are being batched."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:511
msgid ""
"Consider using texture atlases. As well as allowing batching, these reduce "
"the need for state changes associated with changing textures."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:518
msgid "Batched primitives"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:520
msgid ""
"Not all primitives can be batched. Batching is not guaranteed either, "
"especially with primitives using an antialiased border. The following "
"primitive types are currently available:"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:524
msgid "RECT"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:525
msgid "NINEPATCH (depending on wrapping mode)"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:526
msgid "POLY"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:527
msgid "LINE"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:529
msgid ""
"With non-batched primitives, you may be able to get better performance by "
"drawing them manually with polys in a ``_draw()`` function. See :ref:"
"`doc_custom_drawing_in_2d` for more information."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:536
msgid "Light scissoring threshold calculation"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:538
msgid ""
"The actual proportion of screen pixel area used as the threshold is the :ref:"
"`scissor_area_threshold <class_ProjectSettings_property_rendering/batching/"
"lights/scissor_area_threshold>` value to the power of 4."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:543
msgid "For example, on a screen size of 1920×1080, there are 2,073,600 pixels."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:545
msgid "At a threshold of 1,000 pixels, the proportion would be::"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:550
msgid ""
"So a :ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` of ``0.15`` would be a reasonable "
"value to try."
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:554
msgid ""
"Going the other way, for instance with a :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` of ``0.5``::"
msgstr ""

#: ../../docs/tutorials/performance/batching.rst:561
msgid ""
"If the number of pixels saved is greater than this threshold, the scissor is "
"activated."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:1
msgid "optimization"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:7
msgid "Optimizing 3D performance"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:10
msgid "Culling"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:12
msgid ""
"Godot will automatically perform view frustum culling in order to prevent "
"rendering objects that are outside the viewport. This works well for games "
"that take place in a small area, however things can quickly become "
"problematic in larger levels."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:18
msgid "Occlusion culling"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:20
msgid ""
"Walking around a town for example, you may only be able to see a few "
"buildings in the street you are in, as well as the sky and a few birds "
"flying overhead. As far as a naive renderer is concerned however, you can "
"still see the entire town. It won't just render the buildings in front of "
"you, it will render the street behind that, with the people on that street, "
"the buildings behind that. You quickly end up in situations where you are "
"attempting to render 10× or 100× more than what is visible."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:28
msgid ""
"Things aren't quite as bad as they seem, because the Z-buffer usually allows "
"the GPU to only fully shade the objects that are at the front. This is "
"called *depth prepass* and is enabled by default in Godot when using the "
"GLES3 renderer. However, unneeded objects are still reducing performance."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:33
msgid ""
"One way we can potentially reduce the amount to be rendered is to take "
"advantage of occlusion."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:36
msgid ""
"For instance, in our city street scenario, you may be able to work out in "
"advance that you can only see two other streets, ``B`` and ``C``, from "
"street ``A``. Streets ``D`` to ``Z`` are hidden. In order to take advantage "
"of occlusion, all you have to do is work out when your viewer is in street "
"``A`` (perhaps using Godot Areas), then you can hide the other streets."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:42
msgid ""
"This example is a manual version of what is known as a *potentially visible "
"set*. It is a very powerful technique for speeding up rendering. You can "
"also use it to restrict physics or AI to the local area, and speed these up "
"as well as rendering."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:48
msgid "Portal Rendering"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:50
msgid ""
"However, there is a much easier way to take advantage of occlusion. Godot "
"features an advanced portal rendering system, which can perform occlusion "
"culling from cameras and lights. See :ref:`doc_rooms_and_portals`."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:54
msgid ""
"This is not a fully automatic system and it requires some manual setup. "
"However, it potentially offers significant performance increases."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:59
msgid ""
"In some cases, you can adapt your level design to add more occlusion "
"opportunities. For example, you can add more walls to prevent the player "
"from seeing too far away, which would decrease performance due to the lost "
"opportunities for occlusion culling."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:65
msgid "Other occlusion techniques"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:67
msgid ""
"As well as the portal system and manual methods, there are various other "
"occlusion techniques such as raster-based occlusion culling. Some of these "
"may be available through add-ons or may be available in core Godot in the "
"future."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:72
msgid "Transparent objects"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:74
msgid ""
"Godot sorts objects by :ref:`Material <class_Material>` and :ref:`Shader "
"<class_Shader>` to improve performance. This, however, can not be done with "
"transparent objects. Transparent objects are rendered from back to front to "
"make blending with what is behind work. As a result, **try to use as few "
"transparent objects as possible**. If an object has a small section with "
"transparency, try to make that section a separate surface with its own "
"material."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:82
msgid ""
"For more information, see the :ref:`GPU optimizations "
"<doc_gpu_optimization>` doc."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:86
msgid "Level of detail (LOD)"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:88
msgid ""
"In some situations, particularly at a distance, it can be a good idea to "
"**replace complex geometry with simpler versions**. The end user will "
"probably not be able to see much difference. Consider looking at a large "
"number of trees in the far distance. There are several strategies for "
"replacing models at varying distance. You could use lower poly models, or "
"use transparency to simulate more complex geometry."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:96
msgid "Billboards and imposters"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:98
msgid ""
"The simplest version of using transparency to deal with LOD is billboards. "
"For example, you can use a single transparent quad to represent a tree at "
"distance. This can be very cheap to render, unless of course, there are many "
"trees in front of each other. In which case transparency may start eating "
"into fill rate (for more information on fill rate, see :ref:"
"`doc_gpu_optimization`)."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:104
msgid ""
"An alternative is to render not just one tree, but a number of trees "
"together as a group. This can be especially effective if you can see an area "
"but cannot physically approach it in a game."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:108
msgid ""
"You can make imposters by pre-rendering views of an object at different "
"angles. Or you can even go one step further, and periodically re-render a "
"view of an object onto a texture to be used as an imposter. At a distance, "
"you need to move the viewer a considerable distance for the angle of view to "
"change significantly. This can be complex to get working, but may be worth "
"it depending on the type of project you are making."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:116
msgid "Use instancing (MultiMesh)"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:118
msgid ""
"If several identical objects have to be drawn in the same place or nearby, "
"try using :ref:`MultiMesh <class_MultiMesh>` instead. MultiMesh allows the "
"drawing of many thousands of objects at very little performance cost, making "
"it ideal for flocks, grass, particles, and anything else where you have "
"thousands of identical objects."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:124
msgid "Also see the :ref:`Using MultiMesh <doc_using_multimesh>` doc."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:127
msgid "Bake lighting"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:129
msgid ""
"Lighting objects is one of the most costly rendering operations. Realtime "
"lighting, shadows (especially multiple lights), and GI are especially "
"expensive. They may simply be too much for lower power mobile devices to "
"handle."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:133
msgid ""
"**Consider using baked lighting**, especially for mobile. This can look "
"fantastic, but has the downside that it will not be dynamic. Sometimes, this "
"is a trade-off worth making."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:137
msgid ""
"In general, if several lights need to affect a scene, it's best to use :ref:"
"`doc_baked_lightmaps`. Baking can also improve the scene quality by adding "
"indirect light bounces."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:142
msgid "Animation and skinning"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:144
msgid ""
"Animation and vertex animation such as skinning and morphing can be very "
"expensive on some platforms. You may need to lower the polycount "
"considerably for animated models or limit the number of them on screen at "
"any one time."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:149
msgid "Large worlds"
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:151
msgid ""
"If you are making large worlds, there are different considerations than what "
"you may be familiar with from smaller games."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:154
msgid ""
"Large worlds may need to be built in tiles that can be loaded on demand as "
"you move around the world. This can prevent memory use from getting out of "
"hand, and also limit the processing needed to the local area."
msgstr ""

#: ../../docs/tutorials/performance/optimizing_3d_performance.rst:158
msgid ""
"There may also be rendering and physics glitches due to floating point error "
"in large worlds. You may be able to use techniques such as orienting the "
"world around the player (rather than the other way around), or shifting the "
"origin periodically to keep things centred around ``Vector3(0, 0, 0)``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/index.rst:2
msgid "Animating thousands of objects"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:4
msgid "Animating thousands of fish with MultiMeshInstance"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:6
msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:10
msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance <class_MultiMeshInstance>`. "
"Using the following technique you can render thousands of animated objects, "
"even on low end hardware."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:14
msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:18
msgid "Animating one Fish"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:20
msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance <class_MeshInstance>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:23
msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:27
msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <http://quaternius."
"com>`_ and is shared with a creative commons license. CC0 1.0 Universal (CC0 "
"1.0) Public Domain Dedication https://creativecommons.org/publicdomain/"
"zero/1.0/"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:31
msgid ""
"Typically, you would use bones and a :ref:`Skeleton <class_Skeleton>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:37
msgid "The animation will be made of four key motions:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:39
msgid "A side to side motion"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:40
msgid "A pivot motion around the center of the fish"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:41
msgid "A panning wave motion"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:42
msgid "A panning twist motion"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:44
msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:48
msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:53
msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:60
msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:69
msgid "The resulting animation should look something like this:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:73
msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:76
msgid "We construct a rotation matrix like so:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:85
msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:91
msgid "With only the pivot applied you should see something like this:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:95
msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:102
msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:111
msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:117
msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first construct a rotation matrix."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:126
msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fish's spine needs to be centered on "
"the ``z`` axis."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:133
msgid "Here is the fish with twist applied:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:137
msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:141
msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:144
msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end using ``smoothstep`` to control the point at which the transition "
"from ``0`` to ``1`` happens."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:152
msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:156
msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:163
msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask``, we would shrink the fish."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:174
msgid "Putting the four motions together gives us the final animation."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:178
msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:182
msgid "Making a school of fish"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:184
msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance node."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:186
msgid ""
"A MultiMeshInstance node is created and used the same way you would make a "
"MeshInstance node. For this tutorial, we will name the MultiMeshInstance "
"node ``School``, because it will contain a school of fish."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:190
msgid ""
"Once you have a MultiMeshInstance add a :ref:`MultiMesh <class_MultiMesh>`, "
"and to that MultiMesh add your :ref:`Mesh <class_Mesh>` with the shader from "
"above."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:193
msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:197
msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:201
msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:203
msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating-point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:210
msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:212
msgid "Next we need to set the per-instance transforms."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:214
msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:217
msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:227
msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:230
msgid ""
"If performance is an issue for you, try running the scene with GLES2 or with "
"fewer fish."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:232
msgid ""
"Notice how all the fish are all in the same position in their swim cycle? It "
"makes them look very robotic. The next step is to give each fish a different "
"position in the swim cycle so the entire school looks more organic."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:237
msgid "Animating a school of fish"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:239
msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:243
msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:249
msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:257
msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:266
msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:269
msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster than moving thousands of MeshInstances per frame, it'll still likely "
"be slow."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/animating_thousands_of_fish.rst:274
msgid ""
"In the next tutorial we will cover how to use :ref:`Particles "
"<class_Particles>` to take advantage of the GPU and move each fish around "
"individually while still receiving the benefits of instancing."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:4
msgid "Controlling thousands of fish with Particles"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:6
msgid ""
"The problem with :ref:`MeshInstances <class_MeshInstance>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:10
msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`Particles <class_Particles>` node. Particles take advantage of GPU "
"acceleration by computing and setting the per-instance information in a :ref:"
"`Shader <class_Shader>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:14
msgid ""
"Particles are not available in GLES2, instead use :ref:`CPUParticles "
"<class_CPUParticles>`, which do the same thing as Particles, but do not "
"benefit from GPU acceleration."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:17
msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:21
msgid "Set the ``shader_type`` to ``particles``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:27
msgid "Then add the following two functions:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:51
msgid ""
"These functions come from the default :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>`. They are used to generate a random number from "
"each particle's ``RANDOM_SEED``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:54
msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the Spatial shader of the mesh, and also in the particle shader "
"the next time it is run."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:58
msgid ""
"Next, setup your ``vertex`` function. Particles shaders only contain a "
"vertex function and no others."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:61
msgid ""
"First we will distinguish between code that needs to be run only when the "
"particle system starts and code that should always run. We want to give each "
"fish a random position and a random animation offset when the system is "
"first run. To do so, we wrap that code in an ``if`` statement that checks "
"the built-in variable ``RESTART`` which becomes ``true`` for one frame when "
"the particle system is restarted."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:66
msgid "From a high level, this looks like:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:78
msgid ""
"Next, we need to generate 4 random numbers: 3 to create a random position "
"and one for the random offset of the swim cycle."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:81
msgid ""
"First, generate 4 seeds inside the ``RESTART`` block using the ``hash`` "
"function provided above:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:90
msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:99
msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:106
msgid "Remember, all this code so far goes inside the ``RESTART`` block."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:108
msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:110
msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:113
msgid "Let's transform the fish by setting their ``VELOCITY``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:119
msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:121
msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:128
msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:130
msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:137
msgid "This code gives you the following behavior:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:141
msgid ""
"Using a ParticlesMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:4
msgid "Thread-safe APIs"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:9
msgid ""
"Threads are used to balance processing power across CPUs and cores. Godot "
"supports multithreading, but not in the whole engine."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:12
msgid ""
"Below is a list of ways multithreading can be used in different areas of "
"Godot."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:15
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:15
msgid "Global scope"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:17
msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread-safe. "
"Accessing servers from threads is supported (for VisualServer and Physics "
"servers, ensure threaded or thread-safe operation is enabled in the project "
"settings!)."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:19
msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:22
#: ../../docs/tutorials/scripting/scene_tree.rst:90
msgid "Scene tree"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:24
msgid ""
"Interacting with the active scene tree is **NOT** thread-safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:33
msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:42
msgid ""
"Still, this is only really useful if you have **one** thread loading data. "
"Attempting to load or create scene chunks from multiple threads may work, "
"but you risk resources (which are only loaded once in Godot) tweaked by the "
"multiple threads, resulting in unexpected behaviors or crashes."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:47
msgid ""
"Only use more than one thread to generate scene data if you *really* know "
"what you are doing and you are sure that a single resource is not being used "
"or set in multiple ones. Otherwise, you are safer just using the servers API "
"(which is fully thread-safe) directly and not touching scene or resources."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:53
#: ../../docs/tutorials/rendering/index.rst:2
#: ../../docs/tutorials/rendering/viewports.rst:174
msgid "Rendering"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:55
msgid ""
"Instancing nodes that render anything in 2D or 3D (such as Sprite) is *not* "
"thread-safe by default. To make rendering thread-safe, set the **Rendering > "
"Threads > Thread Model** project setting to **Multi-Threaded**."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:58
msgid ""
"Note that the Multi-Threaded thread model has several known bugs, so it may "
"not be usable in all scenarios."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:62
msgid "GDScript arrays, dictionaries"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:64
msgid ""
"In GDScript, reading and writing elements from multiple threads is OK, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:67
#: ../../docs/tutorials/scripting/resources.rst:4
#: ../../docs/development/file_formats/tscn.rst:263
#: ../../docs/community/tutorials.rst:64
msgid "Resources"
msgstr ""

#: ../../docs/tutorials/performance/threads/thread_safe_apis.rst:69
msgid ""
"Modifying a unique resource from multiple threads is not supported. However "
"handling references on multiple threads is supported, hence loading "
"resources on a thread is as well - scenes, textures, meshes, etc - can be "
"loaded and manipulated on a thread and then added to the active scene on the "
"main thread. The limitation here is as described above, one must be careful "
"not to load the same resource from multiple threads at once, therefore it is "
"easiest to use **one** thread for loading and modifying resources, and then "
"the main thread for adding them."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:9
msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:12
msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:14
msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:19
msgid ""
"Before using a built-in class in a thread, read :ref:`doc_thread_safe_apis` "
"first to check whether it can be safely used in a thread."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:23
msgid "Creating a Thread"
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:25
msgid "Creating a thread is very simple, just use the following code:"
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:51
msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:57
msgid "Mutexes"
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:59
msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`doc_thread_safe_apis` documentation to understand which engine APIs support "
"multiple thread access."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:64
msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:70
msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:76
msgid "Here is an example of using a Mutex:"
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:111
msgid "Semaphores"
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:113
msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""

#: ../../docs/tutorials/performance/threads/using_multiple_threads.rst:119
msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:4
msgid "Physics introduction"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:6
msgid ""
"In game development, you often need to know when two objects in the game "
"intersect or come into contact. This is known as **collision detection**. "
"When a collision is detected, you typically want something to happen. This "
"is known as **collision response**."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:11
msgid ""
"Godot offers a number of collision objects in 2D and 3D to provide both "
"collision detection and response. Trying to decide which one to use for your "
"project can be confusing. You can avoid problems and simplify development if "
"you understand how each works and what their pros and cons are."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:18
msgid "Godot's four collision object types"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:19
msgid "How each collision object works"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:20
msgid "When and why to choose one type over another"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:22
msgid ""
"This document's examples will use 2D objects. Every 2D physics object and "
"collision shape has a direct equivalent in 3D and in most cases they work in "
"much the same way."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:27
msgid "Collision objects"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:29
msgid ""
"Godot offers four kinds of physics bodies, extending :ref:`CollisionObject2D "
"<class_CollisionObject2D>`:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:35
msgid ":ref:`Area2D <class_Area2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:32
msgid ""
"``Area2D`` nodes provide **detection** and **influence**. They can detect "
"when objects overlap and can emit signals when bodies enter or exit. An "
"``Area2D`` can also be used to override physics properties, such as gravity "
"or damping, in a defined area."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:37
msgid ""
"The other three bodies extend :ref:`PhysicsBody2D <class_PhysicsBody2D>`:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:43
msgid ":ref:`StaticBody2D <class_StaticBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:40
msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. They are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:48
msgid ":ref:`RigidBody2D <class_RigidBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:46
msgid ""
"This is the node that implements simulated 2D physics. You do not control a "
"``RigidBody2D`` directly, but instead you apply forces to it (gravity, "
"impulses, etc.) and the physics engine calculates the resulting movement. :"
"ref:`Read more about using rigid bodies. <doc_rigid_body>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:52
msgid ":ref:`KinematicBody2D <class_KinematicBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:51
msgid ""
"A body that provides collision detection, but no physics. All movement and "
"collision response must be implemented in code."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:55
msgid "Physics material"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:57
msgid ""
"Static bodies and rigid bodies can be configured to use a :ref:`physics "
"material <class_PhysicsMaterial>`. This allows adjusting the friction and "
"bounce of an object, and set if it's absorbent and/or rough."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:64
msgid ""
"A physics body can hold any number of :ref:`Shape2D <class_Shape2D>` objects "
"as children. These shapes are used to define the object's collision bounds "
"and to detect contact with other objects."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:68
msgid ""
"In order to detect collisions, at least one ``Shape2D`` must be assigned to "
"the object."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:71
msgid ""
"The most common way to assign a shape is by adding a :ref:`CollisionShape2D "
"<class_CollisionShape2D>` or :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>` as a child of the object. These nodes allow you "
"to draw the shape directly in the editor workspace."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:75
msgid ""
"Be careful to never scale your collision shapes in the editor. The \"Scale\" "
"property in the Inspector should remain ``(1, 1)``. When changing the size "
"of the collision shape, you should always use the size handles, **not** the "
"``Node2D`` scale handles. Scaling a shape can result in unexpected collision "
"behavior."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:84
msgid "Physics process callback"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:86
msgid ""
"The physics engine may spawn multiple threads to improve performance, so it "
"can use up to a full frame to process physics. Because of this, the value of "
"a body's state variables such as ``position`` or ``linear velocity`` may not "
"be accurate for the current frame."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:91
msgid ""
"In order to avoid this inaccuracy, any code that needs to access a body's "
"properties should be run in the :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` callback, which is called before each "
"physics step at a constant frame rate (60 times per second by default). This "
"method will be passed a ``delta`` parameter, which is a floating-point "
"number equal to the time passed in *seconds* since the last step. When using "
"the default 60 Hz physics update rate, it will typically be equal to "
"``0.01666...`` (but not always, see below)."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:101
msgid ""
"It's recommended to always use the ``delta`` parameter when relevant in your "
"physics calculations, so that the game behaves correctly if you change the "
"physics update rate or if the player's device can't keep up."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:108
msgid "Collision layers and masks"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:110
msgid ""
"One of the most powerful, but frequently misunderstood, collision features "
"is the collision layer system. This system allows you to build up complex "
"interactions between a variety of objects. The key concepts are **layers** "
"and **masks**. Each ``CollisionObject2D`` has 20 different physics layers it "
"can interact with."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:116
msgid "Let's look at each of the properties in turn:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:120
msgid "collision_layer"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:119
msgid ""
"This describes the layers that the object appears **in**. By default, all "
"bodies are on layer ``1``."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:125
msgid "collision_mask"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:123
msgid ""
"This describes what layers the body will **scan** for collisions. If an "
"object isn't in one of the mask layers, the body will ignore it. By default, "
"all bodies scan layer ``1``."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:127
msgid ""
"These properties can be configured via code, or by editing them in the "
"Inspector."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:129
msgid ""
"Keeping track of what you're using each layer for can be difficult, so you "
"may find it useful to assign names to the layers you're using. Names can be "
"assigned in Project Settings -> Layer Names."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:136
msgid "GUI example"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:138
msgid ""
"You have four node types in your game: Walls, Player, Enemy, and Coin. Both "
"Player and Enemy should collide with Walls. The Player node should detect "
"collisions with both Enemy and Coin, but Enemy and Coin should ignore each "
"other."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:143
msgid ""
"Start by naming layers 1-4 \"walls\", \"player\", \"enemies\", and \"coins\" "
"and place each node type in its respective layer using the \"Layer\" "
"property. Then set each node's \"Mask\" property by selecting the layers it "
"should interact with. For example, the Player's settings would look like "
"this:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:154
msgid "Code example"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:156
msgid ""
"In function calls, layers are specified as a bitmask. Where a function "
"enables all layers by default, the layer mask will be given as "
"``0x7fffffff``. Your code can use binary, hexadecimal, or decimal notation "
"for layer masks, depending on your preference."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:161
msgid ""
"The code equivalent of the above example where layers 1, 3 and 4 were "
"enabled would be as follows::"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:181
msgid "Area2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:183
msgid ""
"Area nodes provide **detection** and **influence**. They can detect when "
"objects overlap and emit signals when bodies enter or exit. Areas can also "
"be used to override physics properties, such as gravity or damping, in a "
"defined area."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:188
msgid "There are three main uses for :ref:`Area2D <class_Area2D>`:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:190
msgid "Overriding physics parameters (such as gravity) in a given region."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:192
msgid ""
"Detecting when other bodies enter or exit a region or what bodies are "
"currently in a region."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:194
msgid "Checking other areas for overlap."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:196
msgid "By default, areas also receive mouse and touchscreen input."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:199
msgid "StaticBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:201
msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. However, it can impart motion or rotation to a colliding body "
"**as if** it were moving, using its ``constant_linear_velocity`` and "
"``constant_angular_velocity`` properties."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:206
msgid ""
"``StaticBody2D`` nodes are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:209
msgid "Example uses for ``StaticBody2D``:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:211
msgid "Platforms (including moving platforms)"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:212
msgid "Conveyor belts"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:213
msgid "Walls and other obstacles"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:216
msgid "RigidBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:218
msgid ""
"This is the node that implements simulated 2D physics. You do not control a :"
"ref:`RigidBody2D <class_RigidBody2D>` directly. Instead, you apply forces to "
"it and the physics engine calculates the resulting movement, including "
"collisions with other bodies, and collision responses, such as bouncing, "
"rotating, etc."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:224
msgid ""
"You can modify a rigid body's behavior via properties such as \"Mass\", "
"\"Friction\", or \"Bounce\", which can be set in the Inspector."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:227
msgid ""
"The body's behavior is also affected by the world's properties, as set in "
"`Project Settings -> Physics`, or by entering an :ref:`Area2D "
"<class_Area2D>` that is overriding the global physics properties."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:231
msgid ""
"When a rigid body is at rest and hasn't moved for a while, it goes to sleep. "
"A sleeping body acts like a static body, and its forces are not calculated "
"by the physics engine. The body will wake up when forces are applied, either "
"by a collision or via code."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:237
msgid "Rigid body modes"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:239
msgid "A rigid body can be set to one of four modes:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:241
msgid ""
"**Rigid** - The body behaves as a physical object. It collides with other "
"bodies and responds to forces applied to it. This is the default mode."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:242
msgid ""
"**Static** - The body behaves like a :ref:`StaticBody2D "
"<class_StaticBody2D>` and does not move."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:243
msgid "**Character** - Similar to \"Rigid\" mode, but the body cannot rotate."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:244
msgid ""
"**Kinematic** - The body behaves like a :ref:`KinematicBody2D "
"<class_KinematicBody2D>` and must be moved by code."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:247
msgid "Using RigidBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:249
msgid ""
"One of the benefits of using a rigid body is that a lot of behavior can be "
"had \"for free\" without writing any code. For example, if you were making "
"an \"Angry Birds\"-style game with falling blocks, you would only need to "
"create RigidBody2Ds and adjust their properties. Stacking, falling, and "
"bouncing would automatically be calculated by the physics engine."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:255
msgid ""
"However, if you do wish to have some control over the body, you should take "
"care - altering the ``position``, ``linear_velocity``, or other physics "
"properties of a rigid body can result in unexpected behavior. If you need to "
"alter any of the physics-related properties, you should use the :ref:"
"`_integrate_forces() <class_RigidBody2D_method__integrate_forces>` callback "
"instead of ``_physics_process()``. In this callback, you have access to the "
"body's :ref:`Physics2DDirectBodyState <class_Physics2DDirectBodyState>`, "
"which allows for safely changing properties and synchronizing them with the "
"physics engine."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:264
msgid "For example, here is the code for an \"Asteroids\" style spaceship:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:309
msgid ""
"Note that we are not setting the ``linear_velocity`` or ``angular_velocity`` "
"properties directly, but rather applying forces (``thrust`` and ``torque``) "
"to the body and letting the physics engine calculate the resulting movement."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:313
msgid ""
"When a rigid body goes to sleep, the ``_integrate_forces()`` function will "
"not be called. To override this behavior, you will need to keep the body "
"awake by creating a collision, applying a force to it, or by disabling the :"
"ref:`can_sleep <class_RigidBody2D_property_can_sleep>` property. Be aware "
"that this can have a negative effect on performance."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:320
msgid "Contact reporting"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:322
msgid ""
"By default, rigid bodies do not keep track of contacts, because this can "
"require a huge amount of memory if many bodies are in the scene. To enable "
"contact reporting, set the :ref:`contacts_reported "
"<class_RigidBody2D_property_contacts_reported>` property to a non-zero "
"value. The contacts can then be obtained via :ref:`Physics2DDirectBodyState."
"get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>` and related "
"functions."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:329
msgid ""
"Contact monitoring via signals can be enabled via the :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` property. See :ref:"
"`RigidBody2D <class_RigidBody2D>` for the list of available signals."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:334
msgid "KinematicBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:336
msgid ""
":ref:`KinematicBody2D <class_KinematicBody2D>` bodies detect collisions with "
"other bodies, but are not affected by physics properties like gravity or "
"friction. Instead, they must be controlled by the user via code. The physics "
"engine will not move a kinematic body."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:341
msgid ""
"When moving a kinematic body, you should not set its ``position`` directly. "
"Instead, you use the ``move_and_collide()`` or ``move_and_slide()`` methods. "
"These methods move the body along a given vector, and it will instantly stop "
"if a collision is detected with another body. After the body has collided, "
"any collision response must be coded manually."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:348
msgid "Kinematic collision response"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:350
msgid ""
"After a collision, you may want the body to bounce, to slide along a wall, "
"or to alter the properties of the object it hit. The way you handle "
"collision response depends on which method you used to move the "
"KinematicBody2D."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:355
msgid ":ref:`move_and_collide <class_KinematicBody2D_method_move_and_collide>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:357
msgid ""
"When using ``move_and_collide()``, the function returns a :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` object, which contains "
"information about the collision and the colliding body. You can use this "
"information to determine the response."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:362
msgid ""
"For example, if you want to find the point in space where the collision "
"occurred:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:393
msgid "Or to bounce off of the colliding object:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:422
msgid ":ref:`move_and_slide <class_KinematicBody2D_method_move_and_slide>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:424
msgid ""
"Sliding is a common collision response; imagine a player moving along walls "
"in a top-down game or running up and down slopes in a platformer. While it's "
"possible to code this response yourself after using ``move_and_collide()``, "
"``move_and_slide()`` provides a convenient way to implement sliding movement "
"without writing much code."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:430
msgid ""
"``move_and_slide()`` automatically includes the timestep in its calculation, "
"so you should **not** multiply the velocity vector by ``delta``."
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:434
msgid ""
"For example, use the following code to make a character that can walk along "
"the ground (including slopes) and jump when standing on the ground:"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:501
msgid ""
"See :ref:`doc_kinematic_character_2d` for more details on using "
"``move_and_slide()``, including a demo project with detailed code."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:4
msgid "Using RigidBody"
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:7
msgid "What is a rigid body?"
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:9
msgid ""
"A rigid body is one that is directly controlled by the physics engine in "
"order to simulate the behavior of physical objects. In order to define the "
"shape of the body, it must have one or more :ref:`Shape <class_Shape>` "
"objects assigned. Note that setting the position of these shapes will affect "
"the body's center of mass."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:13
msgid "How to control a rigid body"
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:15
msgid ""
"A rigid body's behavior can be altered by setting its properties, such as "
"mass and weight. A physics material needs to be added to the rigid body to "
"adjust its friction and bounce, and set if it's absorbent and/or rough. "
"These properties can be set in the Inspector or via code. See :ref:"
"`RigidBody <class_RigidBody>` and :ref:`PhysicsMaterial "
"<class_PhysicsMaterial>` for the full list of properties and their effects."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:21
msgid ""
"There are several ways to control a rigid body's movement, depending on your "
"desired application."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:23
msgid ""
"If you only need to place a rigid body once, for example to set its initial "
"location, you can use the methods provided by the :ref:`Spatial "
"<class_Spatial>` node, such as ``set_global_transform()`` or ``look_at()``. "
"However, these methods cannot be called every frame or the physics engine "
"will not be able to correctly simulate the body's state. As an example, "
"consider a rigid body that you want to rotate so that it points towards "
"another object. A common mistake when implementing this kind of behavior is "
"to use ``look_at()`` every frame, which breaks the physics simulation. "
"Below, we'll demonstrate how to implement this correctly."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:26
msgid ""
"The fact that you can't use ``set_global_transform()`` or ``look_at()`` "
"methods doesn't mean that you can't have full control of a rigid body. "
"Instead, you can control it by using the ``_integrate_forces()`` callback. "
"In this method, you can add *forces*, apply *impulses*, or set the "
"*velocity* in order to achieve any movement you desire."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:29
msgid "The \"look at\" method"
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:31
msgid ""
"As described above, using the Spatial node's ``look_at()`` method can't be "
"used each frame to follow a target. Here is a custom ``look_at()`` method "
"that will work reliably with rigid bodies:"
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:73
msgid ""
"This method uses the rigid body's ``set_angular_velocity()`` method to "
"rotate the body. It first calculates the difference between the current and "
"desired angle and then adds the velocity needed to rotate by that amount in "
"one frame's time."
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:75
msgid ""
"This script will not work with rigid bodies in *character mode* because "
"then, the body's rotation is locked. In that case, you would have to rotate "
"the attached mesh node instead using the standard Spatial methods."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:4
msgid "Using Area2D"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:9
msgid ""
"Godot offers a number of collision objects to provide both collision "
"detection and response. Trying to decide which one to use for your project "
"can be confusing. You can avoid problems and simplify development if you "
"understand how each of them works and what their pros and cons are. In this "
"tutorial, we'll look at the :ref:`Area2D <class_Area2D>` node and show some "
"examples of how it can be used."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:15
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:16
msgid ""
"This document assumes you're familiar with Godot's various physics bodies. "
"Please read :ref:`doc_physics_introduction` first."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:19
msgid "What is an area?"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:21
msgid ""
"An Area2D defines a region of 2D space. In this space you can detect other :"
"ref:`CollisionObject2D <class_CollisionObject2D>` nodes overlapping, "
"entering, and exiting. Areas also allow for overriding local physics "
"properties. We'll explore each of these functions below."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:27
msgid "Area properties"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:29
msgid "Areas have many properties you can use to customize their behavior."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:33
msgid ""
"The first eight properties are used to configure the area's physics override "
"behavior. We'll look at how to use those in the section below."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:36
msgid "*Monitoring* and *Monitorable* are used to enable and disable the area."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:38
msgid ""
"The \"Collision\" section is where you configure the area's collision "
"layer(s) and mask(s)."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:41
msgid ""
"The \"Audio Bus\" section allows you to override audio in the area, for "
"example to apply an audio effect when the player moves through."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:44
msgid ""
"Note that Area2D extends :ref:`CollisionObject2D <class_CollisionObject2D>`, "
"so it also provides properties inherited from that class, such as "
"``input_pickable``."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:48
msgid "Overlap detection"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:50
msgid ""
"Perhaps the most common use of Area2D nodes is for contact and overlap "
"detection. When you need to know that two objects have touched, but don't "
"need physical collision, you can use an area to notify you of the contact."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:54
msgid ""
"For example, let's say we're making a coin for the player to pick up. The "
"coin is not a solid object - the player can't stand on it or push it - we "
"just want it to disappear when the player touches it."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:58
msgid "Here's the node setup for the coin:"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:62
msgid ""
"To detect the overlap, we'll connect the appropriate signal on the Area2d. "
"Which signal to use depends on the player's node type. If the player is "
"another area, use ``area_entered``. However, let's assume our player is a "
"``KinematicBody2D`` (and therefore a ``CollisionObject2D`` type), so we'll "
"connect the ``body_entered`` signal."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:68
msgid ""
"If you're not familiar with using signals, see :ref:`doc_signals` for an "
"introduction."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:90
msgid "Now our player can collect the coins!"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:92
msgid "Some other usage examples:"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:94
msgid ""
"Areas are great for bullets and other projectiles that hit and deal damage, "
"but don't need any other physics such as bouncing."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:95
msgid ""
"Use a large circular area around an enemy to define its \"detect\" radius. "
"When the player is outside the area, the enemy can't \"see\" it."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:96
msgid ""
"\"Security cameras\" - In a large level with multiple cameras, attach areas "
"to each camera and activate them when the player enters."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:98
msgid ""
"See the :ref:`doc_your_first_2d_game` for an example of using Area2D in a "
"game."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:101
msgid "Area influence"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:103
msgid ""
"The second major use for area nodes is to alter physics. By default, the "
"area won't do this, but you can enable this with the *Space Override* "
"property. When areas overlap, they are processed in *Priority* order (higher "
"priority areas are processed first). There are four options for override:"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:108
msgid ""
"*Combine* - The area adds its values to what has been calculated so far."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:109
msgid ""
"*Replace* - The area replaces physics properties, and lower priority areas "
"are ignored."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:110
msgid ""
"*Combine-Replace* - The area adds its gravity/damping values to whatever has "
"been calculated so far (in priority order), ignoring any lower priority "
"areas."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:111
msgid ""
"*Replace-Combine* - The area replaces any gravity/damping calculated so far, "
"but keeps calculating the rest of the areas."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:113
msgid ""
"Using these properties, you can create very complex behavior with multiple "
"overlapping areas."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:116
msgid "The physics properties that can be overridden are:"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:118
msgid "*Gravity* - Gravity's strength inside the area."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:119
msgid ""
"*Gravity Vec* - Gravity's direction. This vector does not need to be "
"normalized."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:120
msgid ""
"*Linear Damp* - How quickly objects stop moving - linear velocity lost per "
"second."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:121
msgid ""
"*Angular Damp* - How quickly objects stop spinning - angular velocity lost "
"per second."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:124
msgid "Point gravity"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:126
msgid ""
"The *Gravity Point* property allows you to create an \"attractor\". Gravity "
"in the area will be calculated towards a point, given by the *Gravity Vec* "
"property. Values are relative to the Area2D, so for example using ``(0, 0)`` "
"will attract objects to the center of the area."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:132
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:209
#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:36
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:184
#: ../../docs/development/compiling/compiling_with_mono.rst:124
msgid "Examples"
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:134
msgid ""
"The example project attached below has three areas demonstrating physics "
"override."
msgstr ""

#: ../../docs/tutorials/physics/using_area_2d.rst:139
msgid ""
"You can download this project here: :download:`using_area_2d.zip <files/"
"using_area_2d.zip>`"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:4
msgid "Using KinematicBody2D"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:9
msgid ""
"Godot offers several collision objects to provide both collision detection "
"and response. Trying to decide which one to use for your project can be "
"confusing. You can avoid problems and simplify development if you understand "
"how each of them works and what their pros and cons are. In this tutorial, "
"we'll look at the :ref:`KinematicBody2D <class_KinematicBody2D>` node and "
"show some examples of how to use it."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:20
msgid "What is a kinematic body?"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:22
msgid ""
"``KinematicBody2D`` is for implementing bodies that are controlled via code. "
"Kinematic bodies detect collisions with other bodies when moving, but are "
"not affected by engine physics properties, like gravity or friction. While "
"this means that you have to write some code to create their behavior, it "
"also means you have more precise control over how they move and react."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:28
msgid ""
"A `KinematicBody2D` can be affected by gravity and other forces, but you "
"must calculate the movement in code. The physics engine will not move a "
"`KinematicBody2D`."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:33
msgid "Movement and collision"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:35
msgid ""
"When moving a ``KinematicBody2D``, you should not set its ``position`` "
"property directly. Instead, you use the ``move_and_collide()`` or "
"``move_and_slide()`` methods. These methods move the body along a given "
"vector and instantly stop if a collision is detected with another body. "
"After a KinematicBody2D has collided, any *collision response* must be coded "
"manually."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:41
msgid ""
"You should only do Kinematic body movement in the ``_physics_process()`` "
"callback."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:43
msgid ""
"The two movement methods serve different purposes, and later in this "
"tutorial, you'll see examples of how they work."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:47
msgid "``move_and_collide``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:49
msgid ""
"This method takes one parameter: a :ref:`Vector2 <class_Vector2>` indicating "
"the body's relative movement. Typically, this is your velocity vector "
"multiplied by the frame timestep (``delta``). If the engine detects a "
"collision anywhere along this vector, the body will immediately stop moving. "
"If this happens, the method will return a :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` object."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:55
msgid ""
"``KinematicCollision2D`` is an object containing data about the collision "
"and the colliding object. Using this data, you can calculate your collision "
"response."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:60
msgid "``move_and_slide``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:62
msgid ""
"The ``move_and_slide()`` method is intended to simplify the collision "
"response in the common case where you want one body to slide along the "
"other. It is especially useful in platformers or top-down games, for example."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:66
msgid ""
"``move_and_slide()`` automatically calculates frame-based movement using "
"``delta``. Do *not* multiply your velocity vector by ``delta`` before "
"passing it to ``move_and_slide()``."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:70
msgid ""
"In addition to the velocity vector, ``move_and_slide()`` takes a number of "
"other parameters allowing you to customize the slide behavior:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:73
msgid "``up_direction`` - *default value:* ``Vector2( 0, 0 )``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:75
msgid ""
"This parameter allows you to define what surfaces the engine should consider "
"being the floor. Setting this lets you use the ``is_on_floor()``, "
"``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of "
"surface the body is in contact with. The default value means that all "
"surfaces are considered walls."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:80
msgid "``stop_on_slope`` - *default value:* ``false``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:82
msgid ""
"This parameter prevents a body from sliding down slopes when standing still."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:84
msgid "``max_slides`` - *default value:* ``4``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:86
msgid ""
"This parameter is the maximum number of collisions before the body stops "
"moving. Setting it too low may prevent movement entirely."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:89
msgid ""
"``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent "
"to ``45`` degrees)"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:91
msgid ""
"This parameter is the maximum angle before a surface is no longer considered "
"a \"floor.\""
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:93
msgid "``infinite_inertia`` - *default value:* ``true``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:95
msgid ""
"When this parameter is ``true``, the body can push :ref:`RigidBody2D "
"<class_RigidBody2D>` nodes, ignoring their mass, but won't detect collisions "
"with them. If it's ``false`` the body will collide with rigid bodies and "
"stop."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:100
msgid "``move_and_slide_with_snap``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:102
msgid ""
"This method adds some additional functionality to ``move_and_slide()`` by "
"adding the ``snap`` parameter. As long as this vector is in contact with the "
"ground, the body will remain attached to the surface. Note that this means "
"you must disable snapping when jumping, for example. You can do this either "
"by setting ``snap`` to ``Vector2.ZERO`` or by using ``move_and_slide()`` "
"instead."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:110
msgid "Detecting collisions"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:112
msgid ""
"When using ``move_and_collide()`` the function returns a "
"``KinematicCollision2D`` directly, and you can use this in your code."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:115
msgid ""
"When using ``move_and_slide()`` it's possible to have multiple collisions "
"occur, as the slide response is calculated. To process these collisions, use "
"``get_slide_count()`` and ``get_slide_collision()``:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:150
msgid ""
"`get_slide_count()` only counts times the body has collided and changed "
"direction."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:152
msgid ""
"See :ref:`KinematicCollision2D <class_KinematicCollision2D>` for details on "
"what collision data is returned."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:156
msgid "Which movement method to use?"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:158
msgid ""
"A common question from new Godot users is: \"How do you decide which "
"movement function to use?\" Often, the response is to use "
"``move_and_slide()`` because it's \"simpler,\" but this is not necessarily "
"the case. One way to think of it is that ``move_and_slide()`` is a special "
"case, and ``move_and_collide()`` is more general. For example, the following "
"two code snippets result in the same collision response:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:189
msgid ""
"Anything you do with ``move_and_slide()`` can also be done with "
"``move_and_collide()``, but it might take a little more code. However, as "
"we'll see in the examples below, there are cases where ``move_and_slide()`` "
"doesn't provide the response you want."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:193
msgid ""
"In the example above, we assign the velocity that ``move_and_slide()`` "
"returns back into the ``velocity`` variable. This is because when the "
"character collides with the environment, the function recalculates the speed "
"internally to reflect the slowdown."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:198
msgid ""
"For example, if your character fell on the floor, you don't want it to "
"accumulate vertical speed due to the effect of gravity. Instead, you want "
"its vertical speed to reset to zero."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:202
msgid ""
"``move_and_slide()`` may also recalculate the kinematic body's velocity "
"several times in a loop as, to produce a smooth motion, it moves the "
"character and collides up to five times by default. At the end of the "
"process, the function returns the character's new velocity that we can store "
"in our ``velocity`` variable, and use on the next frame."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:211
msgid ""
"To see these examples in action, download the sample project: :download:"
"`using_kinematic2d.zip <files/using_kinematic2d.zip>`."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:215
msgid "Movement and walls"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:217
msgid ""
"If you've downloaded the sample project, this example is in \"BasicMovement."
"tscn\"."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:219
msgid ""
"For this example, add a ``KinematicBody2D`` with two children: a ``Sprite`` "
"and a ``CollisionShape2D``. Use the Godot \"icon.png\" as the Sprite's "
"texture (drag it from the Filesystem dock to the *Texture* property of the "
"``Sprite``). In the ``CollisionShape2D``'s *Shape* property, select \"New "
"RectangleShape2D\" and size the rectangle to fit over the sprite image."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:225
msgid ""
"See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:227
msgid "Attach a script to the KinematicBody2D and add the following code:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:291
msgid ""
"Run this scene and you'll see that ``move_and_collide()`` works as expected, "
"moving the body along the velocity vector. Now let's see what happens when "
"you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with "
"a rectangular collision shape. For visibility, you can use a sprite, a "
"Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:297
msgid ""
"Run the scene again and try moving into the obstacle. You'll see that the "
"``KinematicBody2D`` can't penetrate the obstacle. However, try moving into "
"the obstacle at an angle and you'll find that the obstacle acts like glue - "
"it feels like the body gets stuck."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:301
msgid ""
"This happens because there is no *collision response*. "
"``move_and_collide()`` stops the body's movement when a collision occurs. We "
"need to code whatever response we want from the collision."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:305
msgid ""
"Try changing the function to ``move_and_slide(velocity)`` and running again. "
"Note that we removed ``delta`` from the velocity calculation."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:308
msgid ""
"``move_and_slide()`` provides a default collision response of sliding the "
"body along the collision object. This is useful for a great many game types, "
"and may be all you need to get the behavior you want."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:313
msgid "Bouncing/reflecting"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:315
msgid ""
"What if you don't want a sliding collision response? For this example "
"(\"BounceandCollide.tscn\" in the sample project), we have a character "
"shooting bullets and we want the bullets to bounce off the walls."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:319
msgid ""
"This example uses three scenes. The main scene contains the Player and "
"Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:322
msgid ""
"The Player is controlled by the `w` and `s` keys for forward and back. "
"Aiming uses the mouse pointer. Here is the code for the Player, using "
"``move_and_slide()``:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:409
msgid "And the code for the Bullet:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:471
msgid ""
"The action happens in ``_physics_process()``. After using "
"``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` "
"object is returned (otherwise, the return is ``Nil``)."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:475
msgid ""
"If there is a returned collision, we use the ``normal`` of the collision to "
"reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:478
msgid ""
"If the colliding object (``collider``) has a ``hit`` method, we also call "
"it. In the example project, we've added a flashing color effect to the Wall "
"to demonstrate this."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:485
msgid "Platformer movement"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:487
msgid ""
"Let's try one more popular example: the 2D platformer. ``move_and_slide()`` "
"is ideal for quickly getting a functional character controller up and "
"running. If you've downloaded the sample project, you can find this in "
"\"Platformer.tscn\"."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:491
msgid ""
"For this example, we'll assume you have a level made of ``StaticBody2D`` "
"objects. They can be any shape and size. In the sample project, we're using :"
"ref:`Polygon2D <class_Polygon2D>` to create the platform shapes."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:495
msgid "Here's the code for the player body:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:576
msgid ""
"When using ``move_and_slide()``, the function returns a vector representing "
"the movement that remained after the slide collision occurred. Setting that "
"value back to the character's ``velocity`` allows us to move up and down "
"slopes smoothly. Try removing ``velocity =`` and see what happens if you "
"don't do this."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:581
msgid ""
"Also note that we've added ``Vector2(0, -1)`` as the floor normal. This "
"vector points straight upward. As a result, if the character collides with "
"an object that has this normal, it will be considered a floor."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:585
msgid ""
"Using the floor normal allows us to make jumping work, using "
"``is_on_floor()``. This function will only return ``true`` after a "
"``move_and_slide()`` collision where the colliding body's normal is within "
"45 degrees of the given floor vector. You can control the maximum angle by "
"setting ``floor_max_angle``."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:590
msgid ""
"This angle also allows you to implement other features like wall jumps using "
"``is_on_wall()``, for example."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:4
msgid "Ray-casting"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:9
msgid ""
"One of the most common tasks in game development is casting a ray (or custom "
"shaped object) and checking what it hits. This enables complex behaviors, "
"AI, etc. to take place. This tutorial will explain how to do this in 2D and "
"3D."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:14
msgid ""
"Godot stores all the low level game information in servers, while the scene "
"is just a frontend. As such, ray casting is generally a lower-level task. "
"For simple raycasts, node such as :ref:`RayCast <class_RayCast>` and :ref:"
"`RayCast2D <class_RayCast2D>` will work, as they will return every frame "
"what the result of a raycast is."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:21
msgid ""
"Many times, though, ray-casting needs to be a more interactive process so a "
"way to do this by code must exist."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:25
msgid "Space"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:27
msgid ""
"In the physics world, Godot stores all the low level collision and physics "
"information in a *space*. The current 2d space (for 2D Physics) can be "
"obtained by accessing :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`. For 3D, it's :ref:`Spatial."
"get_world().space <class_Spatial_method_get_world>`."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:33
msgid ""
"The resulting space :ref:`RID <class_RID>` can be used in :ref:"
"`PhysicsServer <class_PhysicsServer>` and :ref:`Physics2DServer "
"<class_Physics2DServer>` respectively for 3D and 2D."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:38
msgid "Accessing space"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:40
msgid ""
"Godot physics runs by default in the same thread as game logic, but may be "
"set to run on a separate thread to work more efficiently. Due to this, the "
"only time accessing space is safe is during the :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` callback. Accessing "
"it from outside this function may result in an error due to space being "
"*locked*."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:47
msgid ""
"To perform queries into physics space, the :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` and :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` must be used."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:52
msgid "Use the following code in 2D:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:69
msgid "Or more directly:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:84
msgid "And in 3D:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:100
msgid "Raycast query"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:102
msgid ""
"For performing a 2D raycast query, the method :ref:"
"`Physics2DDirectSpaceState.intersect_ray() "
"<class_Physics2DDirectSpaceState_method_intersect_ray>` may be used. For "
"example:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:123
msgid ""
"The result is a dictionary. If the ray didn't hit anything, the dictionary "
"will be empty. If it did hit something, it will contain collision "
"information:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:137
msgid ""
"The ``result`` dictionary when a collision occurs contains the following "
"data:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:152
msgid "The data is similar in 3D space, using Vector3 coordinates."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:155
msgid "Collision exceptions"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:157
msgid ""
"A common use case for ray casting is to enable a character to gather data "
"about the world around it. One problem with this is that the same character "
"has a collider, so the ray will only detect its parent's collider, as shown "
"in the following image:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:164
msgid ""
"To avoid self-intersection, the ``intersect_ray()`` function can take an "
"optional third parameter which is an array of exceptions. This is an example "
"of how to use it from a KinematicBody2D or any other collision object node:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:189
msgid "The exceptions array can contain objects or RIDs."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:192
msgid "Collision Mask"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:194
msgid ""
"While the exceptions method works fine for excluding the parent body, it "
"becomes very inconvenient if you need a large and/or dynamic list of "
"exceptions. In this case, it is much more efficient to use the collision "
"layer/mask system."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:198
msgid ""
"The optional fourth argument for ``intersect_ray()`` is a collision mask. "
"For example, to use the same mask as the parent body, use the "
"``collision_mask`` member variable:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:224
msgid ""
"See :ref:`doc_physics_introduction_collision_layer_code_example` for details "
"on how to set the collision mask."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:227
msgid "3D ray casting from screen"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:229
msgid ""
"Casting a ray from screen to 3D physics space is useful for object picking. "
"There is not much need to do this because :ref:`CollisionObject "
"<class_CollisionObject>` has an \"input_event\" signal that will let you "
"know when it was clicked, but in case there is any desire to do it manually, "
"here's how."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:235
msgid ""
"To cast a ray from the screen, you need a :ref:`Camera <class_Camera>` node. "
"A ``Camera`` can be in two projection modes: perspective and orthogonal. "
"Because of this, both the ray origin and direction must be obtained. This is "
"because ``origin`` changes in orthogonal mode, while ``normal`` changes in "
"perspective mode:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:243
msgid "To obtain it using a camera, the following code can be used:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:271
msgid ""
"Remember that during ``_input()``, the space may be locked, so in practice "
"this query should be run in ``_physics_process()``."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:4
msgid "Ragdoll system"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:9
msgid ""
"Since version 3.1, Godot supports ragdoll physics. Ragdolls rely on physics "
"simulation to create realistic procedural animation. They are used for death "
"animations in many games."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:11
msgid ""
"In this tutorial, we will be using the Platformer3D demo to set up a ragdoll."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:13
msgid ""
"You can download the Platformer3D demo on `GitHub <https://github.com/"
"godotengine/godot-demo-projects/tree/master/3d/platformer>`_ or using the "
"`Asset Library <https://godotengine.org/asset-library/asset/125>`_."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:16
msgid "Setting up the ragdoll"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:19
msgid "Creating physical bones"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:21
msgid ""
"Like many other features in the engine, there is a node to set up a ragdoll: "
"the :ref:`PhysicalBone <class_PhysicalBone>` node. To simplify the setup, "
"you can generate ``PhysicalBone`` nodes with the \"Create physical "
"skeleton\" feature in the skeleton node."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:23
msgid ""
"Open the platformer demo in Godot, and then the Robi scene. Select the "
"``Skeleton`` node. A skeleton button appears on the top bar menu:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:27
msgid ""
"Click it and select the ``Create physical skeleton`` option. Godot will "
"generate ``PhysicalBone`` nodes and collision shapes for each bone in the "
"skeleton and pin joints to connect them together:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:31
msgid ""
"Some of the generated bones aren't necessary: the ``MASTER`` bone for "
"example. So we're going to clean up the skeleton by removing them."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:34
msgid "Cleaning up the skeleton"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:36
msgid ""
"Each ``PhysicalBone`` the engine needs to simulate has a performance cost, "
"so you want to remove every bone that is too small to make a difference in "
"the simulation, as well as all utility bones."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:38
msgid ""
"For example, if we take a humanoid, you do not want to have physical bones "
"for each finger. You can use a single bone for the entire hand instead, or "
"one for the palm, one for the thumb, and a last one for the other four "
"fingers."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:40
msgid ""
"Remove these physical bones: ``MASTER``, ``waist``, ``neck``, "
"``headtracker``. This gives us an optimized skeleton and makes it easier to "
"control the ragdoll."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:43
msgid "Collision shape adjustment"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:45
msgid ""
"The next task is adjusting the collision shape and the size of physical "
"bones to match the part of the body that each bone should simulate."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:50
msgid "Joints adjustment"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:52
msgid ""
"Once you adjusted the collision shapes, your ragdoll is almost ready. You "
"just want to adjust the pin joints to get a better simulation. "
"``PhysicalBone`` nodes have an unconstrained pin joint assigned to them by "
"default. To change the pin joint, select the ``PhysicalBone`` and change the "
"constraint type in the ``Joint`` section. There, you can change the "
"constraint's orientation and its limits."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:56
msgid "This is the final result:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:61
msgid "Simulating the ragdoll"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:63
msgid ""
"The ragdoll is now ready to use. To start the simulation and play the "
"ragdoll animation, you need to call the ``physical_bones_start_simulation`` "
"method. Attach a script to the skeleton node and call the method in the "
"``_ready`` method:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:71
msgid ""
"To stop the simulation, call the ``physical_bones_stop_simulation()`` method."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:75
msgid ""
"You can also limit the simulation to only a few bones. To do so, pass the "
"bone names as a parameter. Here's an example of partial ragdoll simulation:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:80
msgid "Collision layer and mask"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:82
msgid ""
"Make sure to set up your collision layers and masks properly so the "
"``KinematicBody``'s capsule doesn't get in the way of the physics simulation:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:86
msgid ""
"For more information, read :ref:"
"`doc_physics_introduction_collision_layers_and_masks`."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:4
msgid "Kinematic character (2D)"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:9
msgid ""
"Yes, the name sounds strange. \"Kinematic Character\". What is that? The "
"reason for the name is that, when physics engines came out, they were called "
"\"Dynamics\" engines (because they dealt mainly with collision responses). "
"Many attempts were made to create a character controller using the dynamics "
"engines, but it wasn't as easy as it seemed. Godot has one of the best "
"implementations of dynamic character controller you can find (as it can be "
"seen in the 2d/platformer demo), but using it requires a considerable level "
"of skill and understanding of physics engines (or a lot of patience with "
"trial and error)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:19
msgid ""
"Some physics engines, such as Havok seem to swear by dynamic character "
"controllers as the best option, while others (PhysX) would rather promote "
"the kinematic one."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:23
msgid "So, what is the difference?:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:25
msgid ""
"A **dynamic character controller** uses a rigid body with an infinite "
"inertia tensor. It's a rigid body that can't rotate. Physics engines always "
"let objects move and collide, then solve their collisions all together. This "
"makes dynamic character controllers able to interact with other physics "
"objects seamlessly, as seen in the platformer demo. However, these "
"interactions are not always predictable. Collisions can take more than one "
"frame to be solved, so a few collisions may seem to displace a tiny bit. "
"Those problems can be fixed, but require a certain amount of skill."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:34
msgid ""
"A **kinematic character controller** is assumed to always begin in a non-"
"colliding state, and will always move to a non-colliding state. If it starts "
"in a colliding state, it will try to free itself like rigid bodies do, but "
"this is the exception, not the rule. This makes their control and motion a "
"lot more predictable and easier to program. However, as a downside, they "
"can't directly interact with other physics objects, unless done by hand in "
"code."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:42
msgid ""
"This short tutorial will focus on the kinematic character controller. "
"Basically, the old-school way of handling collisions (which is not "
"necessarily simpler under the hood, but well hidden and presented as a nice "
"and simple API)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:48
msgid "Physics process"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:50
msgid ""
"To manage the logic of a kinematic body or character, it is always advised "
"to use physics process, because it's called before physics step and its "
"execution is in sync with physics server, also it is called the same amount "
"of times per second, always. This makes physics and motion calculation work "
"in a more predictable way than using regular process, which might have "
"spikes or lose precision if the frame rate is too high or too low."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:81
msgid ""
"To have something to test, here's the scene (from the tilemap tutorial): :"
"download:`kbscene.zip <files/kbscene.zip>`. We'll be creating a new scene "
"for the character. Use the robot sprite and create a scene like this:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:87
msgid ""
"You'll notice that there's a warning icon next to our CollisionShape2D node; "
"that's because we haven't defined a shape for it. Create a new CircleShape2D "
"in the shape property of CollisionShape2D. Click on <CircleShape2D> to go to "
"the options for it, and set the radius to 30:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:94
msgid ""
"**Note: As mentioned before in the physics tutorial, the physics engine "
"can't handle scale on most types of shapes (only collision polygons, planes "
"and segments work), so always change the parameters (such as radius) of the "
"shape instead of scaling it. The same is also true for the kinematic/rigid/"
"static bodies themselves, as their scale affects the shape scale.**"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:101
msgid ""
"Now, create a script for the character, the one used as an example above "
"should work as a base."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:104
msgid ""
"Finally, instance that character scene in the tilemap, and make the map "
"scene the main one, so it runs when pressing play."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:110
msgid "Moving the kinematic character"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:112
msgid ""
"Go back to the character scene, and open the script, the magic begins now! "
"Kinematic body will do nothing by default, but it has a useful function "
"called :ref:`KinematicBody2D.move_and_collide() "
"<class_KinematicBody2D_method_move_and_collide>`. This function takes a :ref:"
"`Vector2 <class_Vector2>` as an argument, and tries to apply that motion to "
"the kinematic body. If a collision happens, it stops right at the moment of "
"the collision."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:120
msgid "So, let's move our sprite downwards until it hits the floor:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:144
msgid ""
"The result is that the character will move, but stop right when hitting the "
"floor. Pretty cool, huh?"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:147
msgid ""
"The next step will be adding gravity to the mix, this way it behaves a "
"little more like a regular game character:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:183
msgid ""
"Now the character falls smoothly. Let's make it walk to the sides, left and "
"right when touching the directional keys. Remember that the values being "
"used (for speed at least) are pixels/second."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:187
msgid "This adds simple walking support by pressing left and right:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:252
msgid "And give it a try."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:254
msgid ""
"This is a good starting point for a platformer. A more complete demo can be "
"found in the demo zip distributed with the engine, or in the https://github."
"com/godotengine/godot-demo-projects/tree/master/2d/kinematic_character."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:4
msgid "Using SoftBody"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:6
msgid ""
"Soft bodies (or *soft-body dynamics*) simulate movement, changing shape and "
"other physical properties of deformable objects. This can for example be "
"used to simulate cloth or to create more realistic characters."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:10
msgid "Basic set-up"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:12
msgid ""
"A :ref:`SoftBody <class_SoftBody>` node is used for soft body simulations."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:14
msgid "We will create a bouncy cube to demonstrate the setup of a soft body."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:16
msgid ""
"Create a new scene with a ``Spatial`` node as root. Then, create a "
"``Softbody`` node. Add a ``CubeMesh`` in the ``mesh`` property of the node "
"in the inspector and increase the subdivision of the mesh for simulation."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:20
msgid ""
"Set the parameters to obtain the type of soft body you aim for. Try to keep "
"the ``Simulation Precision`` above 5, otherwise, the soft body may collapse."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:24
msgid ""
"Handle some parameters with care, as some value can lead to strange results. "
"For example, if the shape is not completely closed and you set pressure to "
"more than 0, the softbody will fly around like a plastic bag under strong "
"wind."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:26
msgid "Play the scene to view the simulation."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:28
msgid ""
"To improve the simulation's result, increase the ``Simulation Precision``, "
"this will give significant improvement at the cost of performance."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:31
msgid "Cloak simulation"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:33
msgid "Let's make a cloak in the Platformer3D demo."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:35
msgid ""
"You can download the Platformer3D demo on `GitHub <https://github.com/"
"godotengine/godot-demo-projects/tree/master/3d/platformer>`_ or `the Asset "
"Library <https://godotengine.org/asset-library/asset/125>`_."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:37
msgid ""
"Open the ``Player`` scene, add a ``SoftBody`` node and assign a "
"``PlaneMesh`` to it."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:39
msgid ""
"Open the ``PlaneMesh`` properties and set the size(x: 0.5 y: 1) then set "
"``Subdivide Width`` and ``Subdivide Depth`` to 5. Adjust the ``SoftBody``'s "
"position. You should end up with something like this:"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:43
msgid "Subdivision generates a more tessellated mesh for better simulations."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:45
msgid ""
"Add a :ref:`BoneAttachment <class_BoneAttachment>` node under the skeleton "
"node and select the Neck bone to attach the cloak to the character skeleton."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:47
msgid ""
"``BoneAttachment`` node is to attach objects to a bone of a armature. The "
"attached object will follow the bone's movement, weapon of a character can "
"be attached this way."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:51
msgid ""
"To create pinned joints, select the upper vertices in the ``SoftBody`` node:"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:55
msgid ""
"The pinned joints can be found in ``SoftBody``'s ``Attachments`` property, "
"choose the ``BoneAttachment`` as the ``SpatialAttachment`` for each pinned "
"joints, the pinned joints are now attached to the neck."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:59
msgid ""
"Last step is to avoid clipping by adding the Kinematic Body `Player` to "
"``Parent Collision Ignore`` of the ``SoftBody``."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:63
msgid "Play the scene and the cloak should simulate correctly."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:67
msgid ""
"This covers the basic settings of softbody, experiment with the parameters "
"to achieve the effect you are aiming for when making your game."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:4
msgid "Collision shapes (3D)"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:6
msgid "This guide explains:"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:8
msgid "The types of collision shapes available in 3D in Godot."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:9
msgid "Using a convex or a concave mesh as a collision shape."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:10
msgid "Performance considerations regarding 3D collisions."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:12
msgid ""
"Godot provides many kinds of collision shapes, with different performance "
"and accuracy tradeoffs."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:15
msgid ""
"You can define the shape of a :ref:`class_PhysicsBody` by adding one or "
"more :ref:`CollisionShapes <class_CollisionShape>` as child nodes. Note that "
"you must add a :ref:`class_Shape` *resource* to collision shape nodes in the "
"Inspector dock."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:22
msgid ""
"When you add multiple collision shapes to a single PhysicsBody, you don't "
"have to worry about them overlapping. They won't \"collide\" with each other."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:26
msgid "Primitive collision shapes"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:28
msgid "Godot provides the following primitive collision shape types:"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:30
msgid ":ref:`class_BoxShape`"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:31
msgid ":ref:`class_SphereShape`"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:32
msgid ":ref:`class_CapsuleShape`"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:33
msgid ":ref:`class_CylinderShape`"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:35
msgid ""
"You can represent the collision of most smaller objects using one or more "
"primitive shapes. However, for more complex objects, such as a large ship or "
"a whole level, you may need convex or concave shapes instead. More on that "
"below."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:39
msgid ""
"We recommend favoring primitive shapes for dynamic objects such as "
"RigidBodies and KinematicBodies as their behavior is the most reliable. They "
"often provide better performance as well."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:44
msgid "Convex collision shapes"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:46
msgid ""
":ref:`Convex collision shapes <class_ConvexPolygonShape>` are a compromise "
"between primitive collision shapes and concave collision shapes. They can "
"represent shapes of any complexity, but with an important caveat. As their "
"name implies, an individual shape can only represent a *convex* shape. For "
"instance, a pyramid is *convex*, but a hollow box is *concave*. To define a "
"concave object with a single collision shape, you need to use a concave "
"collision shape."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:53
msgid ""
"Depending on the object's complexity, you may get better performance by "
"using multiple convex shapes instead of a concave collision shape. Godot "
"lets you use *convex decomposition* to generate convex shapes that roughly "
"match a hollow object. Note this performance advantage no longer applies "
"after a certain amount of convex shapes. For large and complex objects such "
"as a whole level, we recommend using concave shapes instead."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:60
msgid ""
"You can generate one or several convex collision shapes from the editor by "
"selecting a MeshInstance and using the **Mesh** menu at the top of the 3D "
"viewport. The editor exposes two generation modes:"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:64
msgid ""
"**Create Single Convex Collision Sibling** uses the Quickhull algorithm. It "
"creates one CollisionShape node with an automatically generated convex "
"collision shape. Since it only generates a single shape, it provides good "
"performance and is ideal for small objects."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:69
msgid ""
"**Create Multiple Convex Collision Siblings** uses the V-HACD algorithm. It "
"creates several CollisionShape nodes, each with a convex shape. Since it "
"generates multiple shapes, it is more accurate for concave objects at the "
"cost of performance. For objects with medium complexity, it will likely be "
"faster than using a single concave collision shape."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:76
msgid "Concave or trimesh collision shapes"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:78
msgid ""
":ref:`Concave collision shapes <class_ConcavePolygonShape>`, also called "
"trimesh collision shapes, can take any form, from a few triangles to "
"thousands of triangles. Concave shapes are the slowest option but are also "
"the most accurate in Godot. **You can only use concave shapes within "
"StaticBodies.** They will not work with KinematicBodies or RigidBodies "
"unless the RigidBody's mode is Static."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:86
msgid ""
"Even though concave shapes offer the most accurate *collision*, contact "
"reporting can be less precise than primitive shapes."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:89
msgid ""
"When not using GridMaps for level design, concave shapes are the best "
"approach for a level's collision. That said, if your level has small "
"details, you may want to exclude those from collision for performance and "
"game feel. To do so, you can build a simplified collision mesh in a 3D "
"modeler and have Godot generate a collision shape for it automatically. More "
"on that below"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:95
msgid ""
"Note that unlike primitive and convex shapes, a concave collision shape "
"doesn't have an actual \"volume\". You can place objects both *outside* of "
"the shape as well as *inside*."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:99
msgid ""
"You can generate a concave collision shape from the editor by selecting a "
"MeshInstance and using the **Mesh** menu at the top of the 3D viewport. The "
"editor exposes two options:"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:103
msgid ""
"**Create Trimesh Static Body** is a convenient option. It creates a "
"StaticBody containing a concave shape matching the mesh's geometry."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:106
msgid ""
"**Create Trimesh Collision Sibling** creates a CollisionShape node with a "
"concave shape matching the mesh's geometry."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:111
msgid ""
"Suppose you need to make a RigidBody *slide* on a concave collision shape. "
"In that case, you may notice that sometimes, the RigidBody will bump "
"upwards. To solve this, open **Project > Project Settings** and enable "
"**Physics > 3d > Smooth Trimesh Collision**."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:116
msgid ""
"Once you've enabled smooth trimesh collision, make sure the concave shape is "
"the only shape of your StaticBody and that it's located at its origin "
"without any rotation. This way, the RigidBody should slide perfectly on the "
"StaticBody."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:123
msgid ""
"Godot can generate collision shapes for your imported 3D scenes "
"automatically. See :ref:`doc_importing_scenes_import_hints` in the "
"documentation for more information."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:128
msgid "Performance caveats"
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:130
msgid ""
"You aren't limited to a single collision shape per PhysicsBody. Still, we "
"recommend keeping the number of shapes as low as possible to improve "
"performance, especially for dynamic objects like RigidBodies and "
"KinematicBodies. On top of that, avoid translating, rotating, or scaling "
"CollisionShapes to benefit from the physics engine's internal optimizations."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:136
msgid ""
"When using a single non-transformed collision shape in a StaticBody, the "
"engine's *broad phase* algorithm can discard inactive PhysicsBodies. The "
"*narrow phase* will then only have to take into account the active bodies' "
"shapes. If a StaticBody has many collision shapes, the broad phase will "
"fail. The narrow phase, which is slower, must then perform a collision check "
"against each shape."
msgstr ""

#: ../../docs/tutorials/physics/collision_shapes_3d.rst:142
msgid ""
"If you run into performance issues, you may have to make tradeoffs in terms "
"of accuracy. Most games out there don't have a 100% accurate collision. They "
"find creative ways to hide it or otherwise make it unnoticeable during "
"normal gameplay."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/index.rst:4
msgid "Physics Interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_quick_start_guide.rst:4
msgid "Quick start guide"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_quick_start_guide.rst:6
msgid ""
"Turn on physics interpolation: :ref:`ProjectSettings.physics/common/"
"physics_interpolation<class_ProjectSettings_property_physics/common/"
"physics_interpolation>`"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_quick_start_guide.rst:7
msgid ""
"Make sure you move objects and run your game logic in ``_physics_process()`` "
"rather than ``_process()``. This includes moving objects directly *and "
"indirectly* (by e.g. moving a parent, or using another mechanism to "
"automatically move nodes)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_quick_start_guide.rst:8
msgid ""
"Be sure to call :ref:`Node."
"reset_physics_interpolation<class_Node_method_reset_physics_interpolation>` "
"on nodes *after* you first position or teleport them, to prevent "
"\"streaking\""
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_quick_start_guide.rst:9
msgid ""
"Temporarily try setting :ref:`ProjectSettings.physics/common/"
"physics_fps<class_ProjectSettings_property_physics/common/physics_fps>` to "
"10 to see the difference with and without interpolation."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:7
msgid "Physics ticks and rendered frames"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:9
msgid ""
"One key concept to understand in Godot is the distinction between physics "
"ticks (sometimes referred to as iterations or physics frames), and rendered "
"frames. The physics proceeds at a fixed tick rate (set in :ref:"
"`ProjectSettings.physics/common/"
"physics_fps<class_ProjectSettings_property_physics/common/physics_fps>`), "
"which defaults to 60 ticks per second."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:11
msgid ""
"However, the engine does not necessarily **render** at the same rate. "
"Although many monitors refresh at 60 Hz (cycles per second), many refresh at "
"completely different frequencies (e.g. 75 Hz, 144 Hz, 240 Hz or more). Even "
"though a monitor may be able to show a new frame e.g. 60 times a second, "
"there is no guarantee that the CPU and GPU will be able to *supply* frames "
"at this rate. For instance, when running with V-Sync, the computer may be "
"too slow for 60 and only reach the deadlines for 30 FPS, in which case the "
"frames you see will change at 30 FPS (resulting in stuttering)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:13
msgid ""
"But there is a problem here. What happens if the physics ticks do not "
"coincide with frames? What happens if the physics tick rate is out of phase "
"with the frame rate? Or worse, what happens if the physics tick rate is "
"*lower* than the rendered frame rate?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:15
msgid ""
"This problem is easier to understand if we consider an extreme scenario. If "
"you set the physics tick rate to 10 ticks per second, in a simple game with "
"a rendered frame rate of 60 FPS. If we plot a graph of the positions of an "
"object against the rendered frames, you can see that the positions will "
"appear to \"jump\" every 1/10th of a second, rather than giving a smooth "
"motion. When the physics calculates a new position for a new object, it is "
"not rendered in this position for just one frame, but for 6 frames."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:19
msgid ""
"This jump can be seen in other combinations of tick / frame rate as "
"glitches, or jitter, caused by this staircasing effect due to the "
"discrepancy between physics tick time and rendered frame time."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:22
msgid "What can we do about frames and ticks being out of sync?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:25
msgid "Lock the tick / frame rate together?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:27
msgid ""
"The most obvious solution is to get rid of the problem, by ensuring there is "
"a physics tick that coincides with every frame. This used to be the approach "
"on old consoles and fixed hardware computers. If you know that every player "
"will be using the same hardware, you can ensure it is fast enough to "
"calculate ticks and frames at e.g. 50 FPS, and you will be sure it will work "
"great for everybody."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:29
msgid ""
"However, modern games are often no longer made for fixed hardware. You will "
"often be planning to release on desktop computers, mobiles and more, all of "
"which have huge variations in performance, as well as different monitor "
"refresh rates. We need to come up with a better way of dealing with the "
"problem."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:32
msgid "Adapt the tick rate?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:34
msgid ""
"Instead of designing the game at a fixed physics tick rate, we could allow "
"the tick rate to scale according to the end users hardware. We could for "
"example use a fixed tick rate that works for that hardware, or even vary the "
"duration of each physics tick to match a particular frame duration."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:36
msgid ""
"This works, but there is a problem. Physics (*and game logic*, which is "
"often also run in the ``_physics_process``) work best and most consistently "
"when run at a **fixed**, predetermined tick rate. If you attempt to run a "
"racing game physics that has been designed for 60 TPS (ticks per second) at "
"e.g. 10 TPS, the physics will behave completely differently. Controls may be "
"less responsive, collisions / trajectories can be completely different. You "
"may test your game thoroughly at 60 TPS, then find it breaks on end users "
"machines when it runs at a different tick rate."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:38
msgid ""
"This can make quality assurance difficult with hard to reproduce bugs, "
"especially in AAA games where problems of this sort can be very costly. This "
"can also be problematic for multiplayer games for competitive integrity, as "
"running the game at certain tick rates may be more advantageous than others."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:41
msgid ""
"Lock the tick rate, but use interpolation to smooth frames in between "
"physics ticks"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:43
msgid ""
"This has become one of the most popular approaches to dealing with the "
"problem. It is supported by Godot 3.5 and later in 3D (although it is "
"optional and disabled by default)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:45
msgid ""
"We have established that the most desirable physics/game logic arrangement "
"for consistency and predictability is a physics tick rate that is fixed at "
"design-time. The problem is the discrepancy between the physics position "
"recorded, and where we \"want\" a physics object to be shown on a frame to "
"give smooth motion."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:47
msgid ""
"The answer turns out to be simple, but can be a little hard to get your head "
"around at first."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:49
msgid ""
"Instead of keeping track of just the current position of a physics object in "
"the engine, we keep track of *both the current position of the object, and "
"the previous position* on the previous physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:51
msgid ""
"Why do we need the previous position *(in fact the entire transform, "
"including rotation and scaling)*? By using a little math magic, we can use "
"**interpolation** to calculate what the transform of the object would be "
"between those two points, in our ideal world of smooth continuous movement."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:56
msgid "Linear interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:58
msgid ""
"The simplest way to achieve this is linear interpolation, or lerping, which "
"you may have used before."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:60
msgid ""
"Let us consider only the position, and a situation where we know that the "
"previous physics tick X coordinate was 10 units, and the current physics "
"tick X coordinate is 30 units."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:62
msgid ""
"Although the maths is explained here, you do not have to worry about the "
"details, as this step will be performed for you. Under the hood, Godot may "
"use more complex forms of interpolation, but linear interpolation is the "
"easiest in terms of explanation."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:65
msgid "The physics interpolation fraction"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:67
msgid ""
"If our physics ticks are happening 10 times per second (for this example), "
"what happens if our rendered frame takes place at time 0.12 seconds? We can "
"do some math to figure out where the object would be to obtain a smooth "
"motion between the two ticks."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:69
msgid ""
"First of all, we have to calculate how far through the physics tick we want "
"the object to be. If the last physics tick took place at 0.1 seconds, we are "
"0.02 seconds *(0.12 - 0.1)* through a tick that we know will take 0.1 "
"seconds (10 ticks per second). The fraction through the tick is thus:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:76
msgid ""
"This is called the **physics interpolation fraction**, and is handily "
"calculated for you by Godot. It can be retrieved on any frame by calling :"
"ref:`Engine."
"get_physics_interpolation_fraction<class_Engine_method_get_physics_interpolation_fraction>`."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:79
msgid "Calculating the interpolated position"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:81
msgid ""
"Once we have the interpolation fraction, we can insert it into a standard "
"linear interpolation equation. The X coordinate would thus be:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:87
msgid "So substituting our ``x_prev`` as 10, and ``x_curr`` as 30:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:95
msgid "Let's break that down:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:97
msgid ""
"We know the X starts from the coordinate on the previous tick (``x_prev``) "
"which is 10 units."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:98
msgid ""
"We know that after the full tick, the difference between the current tick "
"and the previous tick will have been added (``x_curr - x_prev``) (which is "
"20 units)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:99
msgid ""
"The only thing we need to vary is the proportion of this difference we add, "
"according to how far we are through the physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:101
msgid ""
"Although this example interpolates the position, the same thing can be done "
"with the rotation and scale of objects. It is not necessary to know the "
"details as Godot will do all this for you."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:104
msgid "Smoothed transformations between physics ticks?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:106
msgid ""
"Putting all this together shows that it should be possible to have a nice "
"smooth estimation of the transform of objects between the current and "
"previous physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:108
msgid ""
"But wait, you may have noticed something. If we are interpolating between "
"the current and previous ticks, we are not estimating the position of the "
"object *now*, we are estimating the position of the object in the past. To "
"be exact, we are estimating the position of the object *between 1 and 2 "
"ticks* into the past."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:111
msgid "In the past"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:113
msgid ""
"What does this mean? This scheme does work, but it does mean we are "
"effectively introducing a delay between what we see on the screen, and where "
"the objects *should* be."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:115
msgid ""
"In practice, most people won't notice this delay, or rather, it is typically "
"not *objectionable*. There are already significant delays involved in games, "
"we just don't typically notice them. The most significant effect is there "
"can be a slight delay to input, which can be a factor in fast twitch games. "
"In some of these fast input situations, you may wish to turn off physics "
"interpolation and use a different scheme, or use a high tick rate, which "
"mitigates these delays."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:118
msgid "Why look into the past? Why not predict the future?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:120
msgid ""
"There is an alternative to this scheme, which is: instead of interpolating "
"between the previous and current tick, we use maths to *extrapolate* into "
"the future. We try to predict where the object *will be*, rather than show "
"it where it was. This can be done and may be offered as an option in future, "
"but there are some significant downsides:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:122
msgid ""
"The prediction may not be correct, especially when an object collides with "
"another object during the physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:123
msgid ""
"Where a prediction was incorrect, the object may extrapolate into an "
"\"impossible\" position, like inside a wall."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:124
msgid ""
"Providing the movement speed is slow, these incorrect predictions may not be "
"too much of a problem."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:125
msgid ""
"When a prediction was incorrect, the object may have to jump or snap back "
"onto the corrected path. This can be visually jarring."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:128
msgid "Fixed timestep interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:130
msgid ""
"In Godot this whole system is referred to as physics interpolation, but you "
"may also hear it referred to as **\"fixed timestep interpolation\"**, as it "
"is interpolating between objects moved with a fixed timestep (physics ticks "
"per second). In some ways the second term is more accurate, because it can "
"also be used to interpolate objects that are not driven by physics."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/physics_interpolation_introduction.rst:132
msgid ""
"Although physics interpolation is usually a good choice, there are "
"exceptions where you may choose not to use Godot's built-in physics "
"interpolation (or use it in a limited fashion). An example category is "
"internet multiplayer games. Multiplayer games often receive tick or timing "
"based information from other players or a server and these may not coincide "
"with local physics ticks, so a custom interpolation technique can often be a "
"better fit."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:4
msgid "Using physics interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:5
msgid ""
"How do we incorporate physics interpolation into a Godot game? Are there any "
"caveats?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:7
msgid ""
"We have tried to make the system as easy to use as possible, and many "
"existing games will work with few changes. That said there are some "
"situations which require special treatment, and these will be described."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:10
msgid "Turn on the physics interpolation setting"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:12
msgid ""
"The first step is to turn on physics interpolation in :ref:`ProjectSettings."
"physics/common/physics_interpolation<class_ProjectSettings_property_physics/"
"common/physics_interpolation>`. You can now run your game."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:14
msgid ""
"It is likely that nothing looks hugely different, particularly if you are "
"running physics at 60 TPS or a multiple of it. However, quite a bit more is "
"happening behind the scenes."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:18
msgid ""
"To convert an existing game to use interpolation, it is highly recommended "
"that you temporarily set :ref:`ProjectSettings.physics/common/"
"physics_fps<class_ProjectSettings_property_physics/common/physics_fps>` to a "
"low value such as 10, which will make interpolation problems more obvious."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:21
msgid "Move (almost) all game logic from _process to _physics_process"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:23
msgid ""
"The most fundamental requirement for physics interpolation (which you may be "
"doing already) is that you should be moving and performing game logic on "
"your objects within ``_physics_process`` (which runs at a physics tick) "
"rather than ``_process`` (which runs on a rendered frame). This means your "
"scripts should typically be doing the bulk of their processing within "
"``_physics_process``, including responding to input and AI."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:25
msgid ""
"Setting the transform of objects only within physics ticks allows the "
"automatic interpolation to deal with transforms *between* physics ticks, and "
"ensures the game will run the same whatever machine it is run on. As a "
"bonus, this also reduces CPU usage if the game is rendering at high FPS, "
"since AI logic (for example) will no longer run on every rendered frame."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:27
msgid ""
"If you attempt to set the transform of interpolated objects *outside* the "
"physics tick, the calculations for the interpolated position will be "
"incorrect, and you will get jitter. This jitter may not be visible on your "
"machine, but it *will* occur for some players. For this reason, setting the "
"transform of interpolated objects should be avoided outside of the physics "
"tick. Godot will attempt to produce warnings in the editor if this case is "
"detected."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:29
msgid ""
"This is only a *soft-rule*. There are some occasions where you might want to "
"teleport objects outside of the physics tick (for instance when starting a "
"level, or respawning objects). Still, in general, you should be applying "
"transforms from the physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:33
msgid "Ensure that all indirect movement happens during physics ticks"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:35
msgid ""
"Consider that in Godot, Nodes can be moved not just directly in your own "
"scripts, but also by automatic methods such as tweening, animation, and "
"navigation. All these methods should also have their timing set to operate "
"on the physics tick rather than each frame (\"idle\"), **if** you are using "
"them to move objects (*these methods can also be used to control properties "
"that are not interpolated*)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:37
msgid ""
"Also consider that nodes can be moved not just by moving themselves, but "
"also by moving parent nodes in the :ref:`SceneTree<class_SceneTree>`. The "
"movement of parents should therefore also only occur during physics ticks."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:40
msgid "Choose a physics tick rate"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:42
msgid ""
"When using physics interpolation, the rendering is decoupled from physics, "
"and you can choose any value that makes sense for your game. You are no "
"longer limited to values that are multiples of the user's monitor refresh "
"rate (for stutter-free gameplay if the target FPS is reached)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:44
msgid "As a rough guide:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Low tick rates (10-30)"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Medium tick rates (30-60)"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "High tick rates (60+)"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Better CPU performance"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good physics behaviour in complex scenes"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good with fast physics"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Add some delay to input"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good for first person games"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good for racing games"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Simple physics behaviour"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:54
msgid ""
"You can always change the tick rate as you develop, it is as simple as "
"changing the project setting."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:57
msgid "Call reset_physics_interpolation() when teleporting objects"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:59
msgid ""
"Most of the time, interpolation is what you want between two physics ticks. "
"However, there is one situation in which it may *not* be what you want. That "
"is when you are initially placing objects, or moving them to a new location. "
"Here, you don't want a smooth motion between the two - you want an "
"instantaneous move."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:61
msgid ""
"The solution to this is to call the :ref:`Node."
"reset_physics_interpolation<class_Node_method_reset_physics_interpolation>` "
"function. You should call this function on a Node *after* setting the "
"position/transform. The rest is done for you automatically."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:63
msgid ""
"Even if you forget to call this, it is not usually a problem in most "
"situations (especially at high tick rates). This is something you can easily "
"leave to the polishing phase of your game. The worst that will happen is "
"seeing a streaking motion for a frame or so when you move them - you will "
"know when you need it!"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:65
msgid ""
"You should call ``reset_physics_interpolation()`` *after* setting the new "
"position, rather than before. Otherwise, you will still see the unwanted "
"streaking motion."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:68
msgid "Testing and debugging tips"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:70
msgid ""
"Even if you intend to run physics at 60 TPS, in order to thoroughly test "
"your interpolation and get the smoothest gameplay, it is highly recommended "
"to temporarily set the physics tick rate to a low value such as 10 TPS."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:72
msgid ""
"The gameplay may not work perfectly, but it should enable you to more easily "
"see cases where you should be calling :ref:`Node."
"reset_physics_interpolation<class_Node_method_reset_physics_interpolation>`, "
"or where you should be using your own custom interpolation on e.g. a :ref:"
"`Camera<class_Camera>`. Once you have these cases fixed, you can set the "
"physics tick rate back to the desired setting."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:74
msgid ""
"The other great advantage to testing at a low tick rate is you can often "
"notice other game systems that are synchronized to the physics tick and "
"creating glitches which you may want to work around. Typical examples "
"include setting animation blend values, which you may decide to set in "
"``_process()`` and interpolate manually."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:4
msgid "Advanced physics interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:6
msgid ""
"Although the previous instructions will give satisfactory results in a lot "
"of games, in some cases you will want to go a stage further to get the best "
"possible results and the smoothest possible experience."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:9
msgid "Exceptions to automatic physics interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:11
msgid ""
"Even with physics interpolation active, there may be some local situations "
"where you would benefit from disabling automatic interpolation for a :ref:"
"`Node<class_Node>` (or branch of the :ref:`SceneTree<class_SceneTree>`), and "
"have the finer control of performing interpolation manually."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:13
msgid ""
"This is possible using the :ref:`Node."
"physics_interpolation_mode<class_Node_property_physics_interpolation_mode>` "
"property which is present in all Nodes. If you for example, turn off "
"interpolation for a Node, the children will recursively also be affected (as "
"they default to inheriting the parent setting). This means you can easily "
"disable interpolation for an entire subscene."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:15
msgid ""
"The most common situation where you may want to perform your own "
"interpolation is Cameras."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:20
msgid ""
"In many cases, a :ref:`Camera<class_Camera>` can use automatic interpolation "
"just like any other node. However, for best results, especially at low "
"physics tick rates, it is recommended that you take a manual approach to "
"Camera interpolation."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:22
msgid ""
"This is because viewers are very sensitive to Camera movement. For instance, "
"a Camera that realigns slightly every 1/10th of a second (at 10tps tick "
"rate) will often be noticeable. You can get a much smoother result by moving "
"the Camera each frame in ``_process``, and following an interpolated target "
"manually."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:25
msgid "Manual Camera interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:27
msgid "**Ensure the Camera is using global coordinate space**"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:29
msgid ""
"The very first step when performing manual Camera interpolation is to make "
"sure the Camera transform is specified in *global space* rather than "
"inheriting the transform of a moving parent. This is because feedback can "
"occur between the movement of a parent node of a Camera and the movement of "
"the Camera Node itself, which can mess up the interpolation."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:31
msgid "There are two ways of doing this:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:33
msgid ""
"Move the Camera so it is independent on its own branch, rather than being a "
"child of a moving object."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:37
msgid ""
"Call :ref:`Spatial.set_as_toplevel<class_Spatial_method_set_as_toplevel>` "
"and set this to ``true``, which will make the Camera ignore the transform of "
"its parent."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:40
msgid "Typical example"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:42
msgid ""
"A typical example of a custom approach is to use the ``look_at`` function in "
"the Camera every frame in ``_process()`` to look at a target node (such as "
"the player)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:44
msgid ""
"But there is a problem. If we use the traditional ``get_global_transform()`` "
"on a Camera \"target\" Node, this transform will only focus the Camera on "
"the target *at the current physics tick*. This is *not* what we want, as the "
"Camera will jump about on each physics tick as the target moves. Even though "
"the Camera may be updated each frame, this does not help give smooth motion "
"if the *target* is only changing each physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:47
msgid "get_global_transform_interpolated()"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:49
msgid ""
"What we really want to focus the Camera on, is not the position of the "
"target on the physics tick, but the *interpolated* position, i.e. the "
"position at which the target will be rendered."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:51
msgid ""
"We can do this using the :ref:`Spatial."
"get_global_transform_interpolated<class_Spatial_method_get_global_transform_interpolated>` "
"function. This acts exactly like getting :ref:`Spatial."
"global_transform<class_Spatial_property_global_transform>` but it gives you "
"the *interpolated* transform (during a ``_process()`` call)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:53
msgid ""
"``get_global_transform_interpolated()`` should only be used once or twice "
"for special cases such as Cameras. It should **not** be used all over the "
"place in your code (both for performance reasons, and to give correct "
"gameplay)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:55
msgid ""
"Aside from exceptions like the Camera, in most cases, your game logic should "
"be in ``_physics_process()``. In game logic you should be calling "
"``get_global_transform()`` or ``get_transform()``, which will give the "
"current physics transform (in global or local space respectively), which is "
"usually what you will want for gameplay code."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:58
msgid "Example manual Camera script"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:60
msgid ""
"Here is an example of a simple fixed Camera which follows an interpolated "
"target:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:92
msgid "Mouse look"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:94
msgid ""
"Mouse look is a very common way of controlling Cameras. But there is a "
"problem. Unlike keyboard input which can be sampled periodically on the "
"physics tick, mouse move events can come in continuously. The Camera will be "
"expected to react and follow these mouse movements on the next frame, rather "
"than waiting until the next physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:96
msgid ""
"In this situation, it can be better to disable physics interpolation for the "
"Camera node (using :ref:`Node."
"physics_interpolation_mode<class_Node_property_physics_interpolation_mode>`) "
"and directly apply the mouse input to the Camera rotation, rather than apply "
"it in ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:98
msgid ""
"Sometimes, especially with Cameras, you will want to use a combination of "
"interpolation and non-interpolation:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:100
msgid ""
"A first person camera may position the camera at a player location (perhaps "
"using :ref:`Spatial."
"get_global_transform_interpolated<class_Spatial_method_get_global_transform_interpolated>`), "
"but control the Camera rotation from mouse look *without* interpolation."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:101
msgid ""
"A third person camera may similarly determine the look at (target location) "
"of the camera using :ref:`Spatial."
"get_global_transform_interpolated<class_Spatial_method_get_global_transform_interpolated>`, "
"but position the camera using mouse look *without* interpolation."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:103
msgid ""
"There are many permutations and variations of Camera types, but it should be "
"clear that in many cases, disabling automatic physics interpolation and "
"handling this yourself can give a better result."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:106
msgid "Disabling interpolation on other nodes"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:108
msgid ""
"Although Cameras are the most common example, there are a number of cases "
"when you may wish other nodes to control their own interpolation, or be non-"
"interpolated. Consider for example, a player in a top view game whose "
"rotation is controlled by mouse look. Disabling physics rotation allows the "
"player rotation to match the mouse in real-time."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:114
msgid ""
"Although most visual Nodes follow the single Node single visual instance "
"paradigm, MultiMeshes can control several instances from the same Node. "
"Therefore, they have some extra functions for controlling interpolation "
"functionality on a *per-instance* basis. You should explore these functions "
"if you are using interpolated MultiMeshes."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:116
msgid ""
":ref:`MultiMesh."
"reset_instance_physics_interpolation<class_MultiMesh_method_reset_instance_physics_interpolation>`"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:117
msgid ""
":ref:`MultiMesh."
"set_as_bulk_array_interpolated<class_MultiMesh_method_set_as_bulk_array_interpolated>`"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/advanced_physics_interpolation.rst:119
msgid ""
"Full details are in the :ref:`MultiMesh<class_MultiMesh>` documentation."
msgstr ""

#: ../../docs/tutorials/platform/android/index.rst:2
msgid "Android plugins"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:4
msgid "Creating Android plugins"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:9
msgid ""
"Android plugins are powerful tools to extend the capabilities of the Godot "
"engine by tapping into the functionality provided by the Android platform "
"and ecosystem."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:12
msgid ""
"Mobile gaming monetization is one such example since it requires features "
"and capabilities that don't belong to the core feature set of a game engine:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:15
msgid "Analytics"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:16
msgid "In-app purchases"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:17
msgid "Receipt validation"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:18
msgid "Install tracking"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:19
msgid "Ads"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:20
msgid "Video ads"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:21
msgid "Cross-promotion"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:22
msgid "In-game soft & hard currencies"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:23
msgid "Promo codes"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:24
msgid "A/B testing"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:25
msgid "Login"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:26
msgid "Cloud saves"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:27
msgid "Leaderboards and scores"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:28
msgid "User support & feedback"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:29
msgid "Posting to Facebook, Twitter, etc."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:30
msgid "Push notifications"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:33
msgid "Android plugin"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:35
msgid ""
"While introduced in Godot 3.2, the Android plugin system got a significant "
"architecture update starting with Godot 3.2.2. The new plugin system is "
"backward-incompatible with the previous one, but both systems are kept "
"functional in future releases of the 3.2.x branch. Since we previously did "
"not version the Android plugin systems, the new one is now labelled ``v1`` "
"and is the starting point for the modern Godot Android ecosystem."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:39
msgid ""
"**Note:** In Godot 4.0, the previous system will be fully deprecated and "
"removed."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:41
msgid ""
"As a prerequisite, make sure you understand how to set up a :ref:`custom "
"build environment<doc_android_custom_build>` for Android."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:43
msgid ""
"At its core, a Godot Android plugin is a `Android archive library <https://"
"developer.android.com/studio/projects/android-library#aar-contents>`_ (*aar* "
"archive file) with the following caveats:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:46
msgid ""
"The library must have a dependency on the Godot engine library (``godot-lib."
"<version>.<status>.aar``). A stable version is made available for each Godot "
"release on the `Godot download page <https://godotengine.org/download>`_."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:47
msgid ""
"The library must include a specifically configured ``<meta-data>`` tag in "
"its manifest file."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:50
msgid "Building an Android plugin"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:52
msgid ""
"**Prerequisite:** `Android Studio <https://developer.android.com/studio>`_ "
"is strongly recommended as the IDE to use to create Android plugins. The "
"instructions below assumes that you're using Android Studio."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:55
msgid ""
"Follow `these instructions <https://developer.android.com/studio/projects/"
"android-library>`__ to create an Android library module for your plugin."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:57
msgid "Add the Godot engine library as a dependency to your plugin module:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:59
msgid ""
"Download the Godot engine library (``godot-lib.<version>.<status>.aar``) "
"from the `Godot download page <https://godotengine.org/download>`_ (e.g.: "
"``godot-lib.3.4.2.stable.release.aar``)."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:60
msgid ""
"Follow `these instructions <https://developer.android.com/studio/projects/"
"android-library#AddDependency>`__ to add the Godot engine library as a "
"dependency for your plugin."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:62
msgid ""
"In the plugin module's ``build.gradle`` file, replace ``implementation`` "
"with ``compileOnly`` for the dependency line for the Godot engine library."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:64
msgid ""
"Create a new class in the plugin module and make sure it extends ``org."
"godotengine.godot.plugin.GodotPlugin``. At runtime, it will be used to "
"instantiate a singleton object that will be used by the Godot engine to "
"load, initialize and run the plugin."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:67
msgid "Update the plugin ``AndroidManifest.xml`` file:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:69
msgid "Open the plugin ``AndroidManifest.xml`` file."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:70
msgid "Add the ``<application></application>`` tag if it's missing."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:71
msgid ""
"In the ``<application>`` tag, add a ``<meta-data>`` tag setup as follow::"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:77
msgid ""
"Where ``PluginName`` is the name of the plugin, and ``plugin.init."
"ClassFullName`` is the full name (package + class name) of the plugin "
"loading class."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:79
msgid ""
"Add the remaining logic for your plugin and run the ``gradlew build`` "
"command to generate the plugin's ``aar`` file. The build will likely "
"generate both a ``debug`` and ``release`` ``aar`` files. Depending on your "
"need, pick only one version (usually the ``release`` one) which to provide "
"your users with."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:83
msgid ""
"It's recommended that the ``aar`` filename matches the following pattern: "
"``[PluginName]*.aar`` where ``PluginName`` is the name of the plugin in "
"PascalCase (e.g.: ``GodotPayment.release.aar``)."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:85
msgid ""
"Create a Godot Android Plugin configuration file to help the system detect "
"and load your plugin:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:87
msgid ""
"The configuration file extension must be ``gdap`` (e.g.: ``MyPlugin.gdap``)."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:88
#: ../../docs/tutorials/platform/ios/ios_plugin.rst:77
msgid "The configuration file format is as follow::"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:102
#: ../../docs/tutorials/platform/ios/ios_plugin.rst:109
msgid "The ``config`` section and fields are required and defined as follow:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:104
msgid "**name**: name of the plugin."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:105
msgid ""
"**binary_type**: can be either ``local`` or ``remote``. The type affects the "
"**binary** field."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:106
msgid "**binary**:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:108
msgid ""
"If **binary_type** is ``local``, then this should be the filepath of the "
"plugin ``aar`` file."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:110
msgid ""
"The filepath can be relative (e.g.: ``MyPlugin.aar``) in which case it's "
"relative to the ``res://android/plugins`` directory."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:111
msgid "The filepath can be absolute: ``res://some_path/MyPlugin.aar``."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:113
msgid ""
"If **binary_type** is ``remote``, then this should be a declaration for a "
"`remote gradle binary <https://developer.android.com/studio/build/"
"dependencies#dependency-types>`_ (e.g.: ``org.godot.example:my-"
"plugin:0.0.0``)."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:115
msgid ""
"The ``dependencies`` section and fields are optional and defined as follow:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:117
msgid ""
"**local**: contains a list of filepaths to the local ``.aar`` binary files "
"the plugin depends on. Similarly to the ``binary`` field (when the "
"``binary_type`` is ``local``), the local binaries' filepaths can be relative "
"or absolute."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:118
msgid ""
"**remote**: contains a list of remote binary gradle dependencies for the "
"plugin."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:119
msgid ""
"**custom_maven_repos**: contains a list of URLs specifying the custom maven "
"repositories required for the plugin's dependencies."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:122
msgid "Loading and using an Android plugin"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:124
msgid ""
"Move the plugin configuration file (e.g.: ``MyPlugin.gdap``) and, if any, "
"its local binary (e.g.: ``MyPlugin.aar``) and dependencies to the Godot "
"project's ``res://android/plugins`` directory."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:126
msgid ""
"The Godot editor will automatically parse all ``.gdap`` files in the ``res://"
"android/plugins`` directory and show a list of detected and toggleable "
"plugins in the Android export presets window under the **Plugins** section."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:130
msgid "From your script:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:140
msgid "Bundling GDNative resources"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:142
msgid ""
"An Android plugin can define and provide C/C++ GDNative resources, either to "
"provide and/or access functionality from the game logic. The GDNative "
"resources can be bundled within the plugin ``aar`` file which simplifies the "
"distribution and deployment process:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:145
msgid ""
"The shared libraries (``.so``) for the defined GDNative libraries will be "
"automatically bundled by the ``aar`` build system."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:146
msgid ""
"Godot ``*.gdnlib`` and ``*.gdns`` resource files must be manually defined in "
"the plugin ``assets`` directory. The recommended path for these resources "
"relative to the ``assets`` directory should be: ``godot/plugin/v1/"
"[PluginName]/``."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:149
msgid ""
"For GDNative libraries, the plugin singleton object must override the ``org."
"godotengine.godot.plugin.GodotPlugin::getPluginGDNativeLibrariesPaths()`` "
"method, and return the paths to the bundled GDNative libraries config files "
"(``*.gdnlib``). The paths must be relative to the ``assets`` directory. At "
"runtime, the plugin will provide these paths to Godot core which will use "
"them to load and initialize the bundled GDNative libraries."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:154
msgid "Reference implementations"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:156
msgid ""
"`Godot Oculus Mobile plugin <https://github.com/GodotVR/"
"godot_oculus_mobile>`_ - `Bundled gdnative resources <https://github.com/"
"GodotVR/godot_oculus_mobile/tree/master/plugin/src/main/assets/addons/"
"godot_ovrmobile>`_"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:158
msgid ""
"`Godot Google Play Billing plugin <https://github.com/godotengine/godot-"
"google-play-billing>`_"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:165
msgid "Godot crashes upon load"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:167
msgid "Check ``adb logcat`` for possible problems, then:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:169
msgid ""
"Check that the methods exposed by the plugin used the following Java types: "
"``void``, ``boolean``, ``int``, ``float``, ``java.lang.String``, ``org."
"godotengine.godot.Dictionary``, ``int[]``, ``byte[]``, ``float[]``, ``java."
"lang.String[]``."
msgstr ""

#: ../../docs/tutorials/platform/android/android_plugin.rst:170
msgid "More complex datatypes are not supported for now."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:4
msgid "Android in-app purchases"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:6
msgid ""
"Godot offers a first-party ``GodotGooglePlayBilling`` Android plugin since "
"Godot 3.2.2. The new plugin uses the `Google Play Billing library <https://"
"developer.android.com/google/play/billing>`__ instead of the now deprecated "
"AIDL IAP implementation."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:10
msgid ""
"If you learn better by looking at an example, you can find the demo project "
"`here <https://github.com/godotengine/godot-demo-projects/tree/master/mobile/"
"android_iap>`__."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:15
msgid "Migrating from Godot 3.2.1 and lower (GodotPaymentsV3)"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:17
msgid ""
"The new ``GodotGooglePlayBilling`` API is not compatible with its "
"predecessor ``GodotPaymentsV3``."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:20
msgid "Changes"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:22
msgid ""
"You need to enable the Custom Build option in your Android export settings "
"and install the ``GodotGooglePlayBilling`` plugin manually (see below for "
"details)"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:24
msgid ""
"All purchases have to be acknowledged by your app. This is a `requirement "
"from Google <https://developer.android.com/google/play/billing/"
"integrate#process>`__. Purchases that are not acknowledged by your app will "
"be refunded."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:27
msgid "Support for subscriptions"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:28
msgid "Signals (no polling or callback objects)"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:37
msgid ""
"If not already done, make sure you have enabled and successfully set up :ref:"
"`Android Custom Builds <doc_android_custom_build>`. Grab "
"the``GodotGooglePlayBilling`` plugin binary and config from the `releases "
"page <https://github.com/godotengine/godot-google-play-billing/releases>`__ "
"and put both into `res://android/plugins`. The plugin should now show up in "
"the Android export settings, where you can enable it."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:46
msgid ""
"To use the ``GodotGooglePlayBilling`` API you first have to get the "
"``GodotGooglePlayBilling`` singleton and start the connection:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:75
msgid ""
"All API methods only work if the API is connected. You can use ``payment."
"isReady()`` to check the connection status."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:79
msgid "Querying available items"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:81
msgid ""
"As soon as the API is connected, you can query SKUs using "
"``querySkuDetails``."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:83
#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:127
msgid "Full example:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:96
msgid "Purchase an item"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:98
msgid ""
"To initiate the purchase flow for an item, call ``purchase``. You **must** "
"query the SKU details for an item before you can initiate the purchase flow "
"for it."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:106
msgid ""
"Then, wait for the ``_on_purchases_updated`` callback and handle the "
"purchase result:"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:121
msgid "Check if the user purchased an item"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:123
msgid ""
"To get all purchases, call ``queryPurchases``. Unlike most of the other "
"functions, ``queryPurchases`` is a synchronous operation and returns a :ref:"
"`Dictionary <class_Dictionary>` with a status code and either an array of "
"purchases or an error message. Only active subscriptions and non-consumed "
"one-time purchases are returned."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:142
msgid "Consumables"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:144
msgid ""
"If your in-app item is not a one-time purchase but a consumable item (e.g. "
"coins) which can be purchased multiple times, you can consume an item by "
"calling ``consumePurchase`` with a purchase token. Call ``queryPurchases`` "
"to get the purchase token. Calling ``consumePurchase`` automatically "
"acknowledges a purchase. Consuming a product allows the user to purchase it "
"again, and removes it from appearing in subsequent ``queryPurchases`` calls."
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:161
msgid "Subscriptions"
msgstr ""

#: ../../docs/tutorials/platform/android/android_in_app_purchases.rst:163
msgid ""
"Subscriptions don't work much different from regular in-app items. Just use "
"``\"subs\"`` as second argument to ``querySkuDetails`` to get subscription "
"details. Check ``is_auto_renewing`` in the results of ``queryPurchases()`` "
"to see if a user has cancelled an auto-renewing subscription"
msgstr ""

#: ../../docs/tutorials/platform/ios/index.rst:2
msgid "iOS plugins"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:4
msgid "Creating iOS plugins"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:6
msgid ""
"This page explains what iOS plugins can do for you, how to use an existing "
"plugin, and the steps to code a new one."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:8
msgid ""
"iOS plugins allow you to use third-party libraries and support iOS-specific "
"features like In-App Purchases, GameCenter integration, ARKit support, and "
"more."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:11
msgid "Loading and using an existing plugin"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:13
msgid ""
"An iOS plugin requires a ``.gdip`` configuration file, a binary file which "
"can be either ``.a`` static library or ``.xcframework`` containing ``.a`` "
"static libraries, and possibly other dependencies. To use it, you need to:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:15
msgid ""
"Copy the plugin's files to your Godot project's ``res://ios/plugins`` "
"directory. You can also group files in a sub-directory, like ``res://ios/"
"plugins/my_plugin``."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:17
msgid ""
"The Godot editor automatically detects and imports ``.gdip`` files inside "
"``res://ios/plugins`` and its subdirectories."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:19
msgid ""
"You can find and activate detected plugins by going to Project -> Export... -"
"> iOS and in the Options tab, scrolling to the Plugins section."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:23
msgid ""
"When a plugin is active, you can access it in your using ``Engine."
"get_singleton()``::"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:30
msgid "Creating an iOS plugin"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:32
msgid ""
"At its core, a Godot iOS plugin is an iOS library (*.a* archive file or *."
"xcframework* containing static libraries) with the following requirements:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:34
msgid "The library must have a dependency on the Godot engine headers."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:36
msgid "The library must come with a ``.gdip`` configuration file."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:38
msgid ""
"An iOS plugin can have the same functionality as a Godot module but provides "
"more flexibility and doesn't require to rebuild the engine."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:40
msgid ""
"Here are the steps to get a plugin's development started. We recommend using "
"`Xcode <https://developer.apple.com/develop/>`_ as your development "
"environment."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:42
msgid ""
"The `Godot iOS Plugins <https://github.com/godotengine/godot-ios-plugins>`_ "
"Godot iOS plugins."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:44
msgid ""
"The `Godot iOS plugin template <https://github.com/naithar/"
"godot_ios_plugin>`_ gives you all the boilerplate you need to get your iOS "
"plugin started."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:47
msgid "To build an iOS plugin:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:49
msgid "Create an Objective-C static library for your plugin inside Xcode."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:51
msgid ""
"Add the Godot engine header files as a dependency for your plugin library in "
"``HEADER_SEARCH_PATHS``. You can find the setting inside the ``Build "
"Settings`` tab:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:53
msgid ""
"Download the Godot engine source from the `Godot GitHub page <https://github."
"com/godotengine/godot>`_."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:55
msgid ""
"Run SCons to generate headers. You can learn the process by reading :ref:"
"`doc_compiling_for_ios`. You don't have to wait for compilation to complete "
"to move forward as headers are generated before the engine starts to compile."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:57
msgid ""
"You should use the same header files for iOS plugins and for the iOS export "
"template."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:59
msgid ""
"In the ``Build Settings`` tab, specify the compilation flags for your static "
"library in ``OTHER_CFLAGS``. The most important ones are ``-fcxx-modules``, "
"``-fmodules``, and ``-DDEBUG`` if you need debug support. Other flags should "
"be the same you use to compile Godot. For instance:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:65
msgid ""
"Add the required logic for your plugin and build your library to generate a "
"``.a`` file. You will probably need to build both ``debug`` and ``release`` "
"target ``.a`` files. Depending on your needs, pick either or both. If you "
"need both debug and release ``.a`` files, their name should match following "
"pattern: ``[PluginName].[TargetType].a``. You can also build the static "
"library with your SCons configuration."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:67
msgid ""
"The iOS plugin system also supports ``.xcframework`` files. To generate one, "
"you can use a command such as:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:73
msgid ""
"Create a Godot iOS Plugin configuration file to help the system detect and "
"load your plugin:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:75
msgid ""
"The configuration file extension must be ``gdip`` (e.g.: ``MyPlugin.gdip``)."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:111
msgid "**name**: name of the plugin"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:113
msgid ""
"**binary**: this should be the filepath of the plugin library (``a`` or "
"``xcframework``) file."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:115
msgid ""
"The filepath can be relative (e.g.: ``MyPlugin.a``, ``MyPlugin."
"xcframework``) in which case it's relative to the directory where the "
"``gdip`` file is located."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:116
msgid ""
"The filepath can be absolute: ``res://some_path/MyPlugin.a`` or ``res://"
"some_path/MyPlugin.xcframework``."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:117
msgid ""
"In case you need multitarget library usage, the filename should be "
"``MyPlugin.a`` and ``.a`` files should be named as ``MyPlugin.release.a`` "
"and ``MyPlugin.debug.a``."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:118
msgid ""
"In case you use multitarget ``xcframework`` libraries, their filename in the "
"configuration should be ``MyPlugin.xcframework``. The ``.xcframework`` files "
"should be named as ``MyPlugin.release.xcframework`` and ``MyPlugin.debug."
"xcframework``."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:120
msgid ""
"The ``dependencies`` and ``plist`` sections are optional and defined as "
"follow:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:122
msgid "**dependencies**:"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:124
msgid ""
"**linked**: contains a list of iOS frameworks that the iOS application "
"should be linked with."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:126
msgid ""
"**embedded**: contains a list of iOS frameworks or libraries that should be "
"both linked and embedded into the resulting iOS application."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:128
msgid ""
"**system**: contains a list of iOS system frameworks that are required for "
"plugin."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:130
msgid ""
"**capabilities**: contains a list of iOS capabilities that is required for "
"plugin. A list of available capabilities can be found at `Apple "
"UIRequiredDeviceCapabilities documentation page <https://developer.apple.com/"
"documentation/bundleresources/information_property_list/"
"uirequireddevicecapabilities>`_."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:132
msgid ""
"**files**: contains a list of files that should be copied on export. This is "
"useful for data files or images."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:134
msgid ""
"**linker_flags**: contains a list of linker flags to add to the Xcode "
"project when exporting the plugin."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:136
msgid ""
"**plist**: should have keys and values that should be present in ``Info."
"plist`` file."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:138
msgid "Each line should follow pattern: ``KeyName:KeyType=KeyValue``"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:139
msgid ""
"Supported values for ``KeyType`` are ``string``, ``integer``, ``boolean``, "
"``raw``, ``string_input``"
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:140
msgid ""
"If no type is used (e.g.: ``KeyName=\"KeyValue\"``) ``string`` type will be "
"used."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:141
msgid ""
"If ``raw`` type is used value for coresponding key will be stored in ``Info."
"plist`` as is."
msgstr ""

#: ../../docs/tutorials/platform/ios/ios_plugin.rst:142
msgid ""
"If ``string_input`` type is used you will be able to modify value in Export "
"window."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:6
msgid ""
"Godot provides StoreKit, GameCenter, iCloud services and other plugins. They "
"are using same model of asynchronous calls explained below."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:9
msgid "ARKit and Camera access are also provided as plugins."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:11
msgid ""
"Latest updates, documentation and source code can be found at `Godot iOS "
"plugins repository <https://github.com/godotengine/godot-ios-plugins>`_"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:14
msgid "Accessing plugin singletons"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:16
msgid ""
"To access plugin functionality, you first need to check that the plugin is "
"exported and available by calling the `Engine.has_singleton()` function, "
"which returns a registered singleton."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:20
msgid "Here's an example of how to do this in GDScript:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:40
msgid "Asynchronous methods"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:42
msgid ""
"When requesting an asynchronous operation, the method will look like this:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:49
msgid ""
"The parameter will usually be a Dictionary, with the information necessary "
"to make the request, and the call will have two phases. First, the method "
"will immediately return an Error value. If the Error is not 'OK', the call "
"operation is completed, with an error probably caused locally (no internet "
"connection, API incorrectly configured, etc). If the error value is 'OK', a "
"response event will be produced and added to the 'pending events' queue. "
"Example:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:76
msgid ""
"Remember that when a call returns OK, the API will *always* produce an event "
"through the pending_event interface, even if it's an error, or a network "
"timeout, etc. You should be able to, for example, safely block the interface "
"waiting for a reply from the server. If any of the APIs don't behave this "
"way it should be treated as a bug."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:82
msgid "The pending event interface consists of two methods:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:84
msgid ""
"``get_pending_event_count()`` Returns the number of pending events on the "
"queue."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:87
msgid ""
"``Variant pop_pending_event()`` Pops the first event from the queue and "
"returns it."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:91
msgid "Store Kit"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:93
msgid ""
"Implemented in `Godot iOS InAppStore plugin <https://github.com/godotengine/"
"godot-ios-plugins/blob/master/plugins/inappstore/in_app_store.mm>`_."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:95
msgid ""
"The Store Kit API is accessible through the ``InAppStore`` singleton. It is "
"initialized automatically."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:98
msgid "The following methods are available and documented below:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:116
msgid "``purchase``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:118
msgid ""
"Purchases a product ID through the Store Kit API. You have to call "
"``finish_transaction(product_id)`` once you receive a successful response or "
"call ``set_auto_finish_transaction(true)`` prior to calling ``purchase()``. "
"These two methods ensure the transaction is completed."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:125
msgid ""
"Takes a dictionary as a parameter, with one field, ``product_id``, a string "
"with your product ID. Example:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:133
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:173
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:197
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:275
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:320
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:367
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:396
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:426
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:458
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:515
msgid "Response event"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:135
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:175
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:277
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:322
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:369
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:398
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:428
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:460
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:517
msgid "The response event will be a dictionary with the following fields:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:137
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:279
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:324
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:371
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:400
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:430
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:462
msgid "On error:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:147
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:290
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:335
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:381
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:410
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:440
#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:472
msgid "On success:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:158
msgid "``request_product_info``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:160
msgid "Requests the product info on a list of product IDs."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:165
msgid ""
"Takes a dictionary as a parameter, with a single ``product_ids`` key to "
"which a string array of product IDs is assigned. Example:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:191
msgid "``restore_purchases``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:193
msgid ""
"Restores previously made purchases on user's account. This will create "
"response events for each previously purchased product ID."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:199
msgid "The response events will be dictionaries with the following fields:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:210
msgid "``set_auto_finish_transaction``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:212
msgid ""
"If set to ``true``, once a purchase is successful, your purchase will be "
"finalized automatically. Call this method prior to calling ``purchase()``."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:218
msgid ""
"Takes a boolean as a parameter which specifies if purchases should be "
"automatically finalized. Example:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:226
msgid "``finish_transaction``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:228
msgid ""
"If you don't want transactions to be automatically finalized, call this "
"method after you receive a successful purchase response."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:235
msgid ""
"Takes a string ``product_id`` as an argument. ``product_id`` specifies what "
"product to finalize the purchase on. Example:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:243
msgid "Game Center"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:245
msgid ""
"Implemented in `Godot iOS GameCenter plugin <https://github.com/godotengine/"
"godot-ios-plugins/blob/master/plugins/gamecenter/game_center.mm>`_."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:247
msgid ""
"The Game Center API is available through the \"GameCenter\" singleton. It "
"has the following methods:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:262
msgid "and the pending events interface:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:270
msgid "``authenticate``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:272
msgid "Authenticates a user in Game Center."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:301
msgid "``post_score``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:303
msgid "Posts a score to a Game Center leaderboard."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:308
msgid "Takes a dictionary as a parameter, with two fields:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:310
msgid "``score`` a float number"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:311
msgid "``category`` a string with the category name"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:345
msgid "``award_achievement``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:347
msgid "Modifies the progress of a Game Center achievement."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:352
msgid "Takes a Dictionary as a parameter, with 3 fields:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:354
msgid "``name`` (string) the achievement name"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:355
msgid ""
"``progress`` (float) the achievement progress from 0.0 to 100.0 (passed to "
"``GKAchievement::percentComplete``)"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:357
msgid ""
"``show_completion_banner`` (bool) whether Game Center should display an "
"achievement banner at the top of the screen"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:391
msgid "``reset_achievements``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:393
msgid "Clears all Game Center achievements. The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:420
msgid "``request_achievements``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:422
msgid ""
"Request all the Game Center achievements the player has made progress on. "
"The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:452
msgid "``request_achievement_descriptions``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:454
msgid ""
"Request the descriptions of all existing Game Center achievements regardless "
"of progress. The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:489
msgid "``show_game_center``"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:491
msgid ""
"Displays the built in Game Center overlay showing leaderboards, "
"achievements, and challenges."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:497
msgid "Takes a Dictionary as a parameter, with two fields:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:499
msgid ""
"``view`` (string) (optional) the name of the view to present. Accepts "
"\"default\", \"leaderboards\", \"achievements\", or \"challenges\". Defaults "
"to \"default\"."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:502
msgid ""
"``leaderboard_name`` (string) (optional) the name of the leaderboard to "
"present. Only used when \"view\" is \"leaderboards\" (or \"default\" is "
"configured to show leaderboards). If not specified, Game Center will display "
"the aggregate leaderboard."
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:519
msgid "On close:"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:529
msgid "Multi-platform games"
msgstr ""

#: ../../docs/tutorials/platform/ios/plugins_for_ios.rst:531
msgid ""
"When working on a multi-platform game, you won't always have the "
"\"GameCenter\" singleton available (for example when running on PC or "
"Android). Because the gdscript compiler looks up the singletons at compile "
"time, you can't just query the singletons to see and use what you need "
"inside a conditional block, you need to also define them as valid "
"identifiers (local variable or class member). This is an example of how to "
"work around this in a class:"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:4
msgid "HTML5 shell class reference"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:6
msgid ""
"Projects exported for the Web expose the :js:class:`Engine` class to the "
"JavaScript environment, that allows fine control over the engine's start-up "
"process."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:9
msgid ""
"This API is built in an asynchronous manner and requires basic understanding "
"of `Promises <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/"
"Using_promises>`__."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:13
msgid "Engine"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:15
msgid ""
"The ``Engine`` class provides methods for loading and starting exported "
"projects on the Web. For default export settings, this is already part of "
"the exported HTML page. To understand practical use of the ``Engine`` class, "
"see :ref:`Custom HTML page for Web export <doc_customizing_html5_shell>`."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:20
msgid "Static Methods"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:23
#: ../../docs/tutorials/platform/html5_shell_classref.rst:34
#: ../../docs/tutorials/platform/html5_shell_classref.rst:36
#: ../../docs/tutorials/platform/html5_shell_classref.rst:38
#: ../../docs/tutorials/platform/html5_shell_classref.rst:40
#: ../../docs/tutorials/platform/html5_shell_classref.rst:66
#: ../../docs/tutorials/platform/html5_shell_classref.rst:99
#: ../../docs/tutorials/platform/html5_shell_classref.rst:121
#: ../../docs/tutorials/platform/html5_shell_classref.rst:139
#: ../../docs/tutorials/platform/html5_shell_classref.rst:158
msgid "Promise"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:23
msgid ":js:attr:`load <Engine.load>` **(** string basePath **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:25
#: ../../docs/tutorials/platform/html5_shell_classref.rst:42
#: ../../docs/tutorials/platform/html5_shell_classref.rst:44
msgid "void"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:25
msgid ":js:attr:`unload <Engine.unload>` **(** **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:27
#: ../../docs/tutorials/platform/html5_shell_classref.rst:84
#: ../../docs/tutorials/platform/html5_shell_classref.rst:189
#: ../../docs/tutorials/platform/html5_shell_classref.rst:226
msgid "boolean"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:27
msgid ""
":js:attr:`isWebGLAvailable <Engine.isWebGLAvailable>` **(** *[ number "
"majorVersion=1 ]* **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:31
msgid "Instance Methods"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:34
msgid ""
":js:attr:`init <Engine.prototype.init>` **(** *[ string basePath ]* **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:36
msgid ""
":js:attr:`preloadFile <Engine.prototype.preloadFile>` **(** string\\|"
"ArrayBuffer file *[, string path ]* **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:38
msgid ""
":js:attr:`start <Engine.prototype.start>` **(** EngineConfig override **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:40
msgid ""
":js:attr:`startGame <Engine.prototype.startGame>` **(** EngineConfig "
"override **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:42
msgid ""
":js:attr:`copyToFS <Engine.prototype.copyToFS>` **(** string path, "
"ArrayBuffer buffer **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:44
msgid ":js:attr:`requestQuit <Engine.prototype.requestQuit>` **(** **)**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:49
msgid "Create a new Engine instance with the given configuration."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:0
#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:59
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:61
#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:24
msgid "Arguments"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:51
msgid "The initial config for this instance."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:54
msgid "**Static Methods**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:58
msgid "Load the engine from the specified base path."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:60
#: ../../docs/tutorials/platform/html5_shell_classref.rst:93
msgid "Base path of the engine to load."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:0
msgid "Returns"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:63
msgid "A Promise that resolves once the engine is loaded."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:0
msgid "Return type"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:70
msgid "Unload the engine to free memory."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:72
msgid ""
"This method will be called automatically depending on the configuration. "
"See :js:attr:`unloadAfterInit`."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:76
msgid ""
"Check whether WebGL is available. Optionally, specify a particular version "
"of WebGL to check for."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:78
msgid "The major WebGL version to check for."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:81
msgid "If the given major version of WebGL is available."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:86
msgid "**Instance Methods**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:90
msgid ""
"Initialize the engine instance. Optionally, pass the base path to the engine "
"to load it, if it hasn't been loaded yet. See :js:meth:`Engine.load`."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:96
msgid "A ``Promise`` that resolves once the engine is loaded and initialized."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:103
msgid ""
"Load a file so it is available in the instance's file system once it runs. "
"Must be called **before** starting the instance."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:106
msgid ""
"If not provided, the ``path`` is derived from the URL of the loaded file."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:108
msgid ""
"The file to preload.  If a ``string`` the file will be loaded from that "
"path.  If an ``ArrayBuffer`` or a view on one, the buffer will used as the "
"content of the file."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:109
msgid "The file to preload."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:111
msgid "If a ``string`` the file will be loaded from that path."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:113
msgid ""
"If an ``ArrayBuffer`` or a view on one, the buffer will used as the content "
"of the file."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:115
msgid ""
"Path by which the file will be accessible. Required, if ``file`` is not a "
"string."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:118
msgid "A Promise that resolves once the file is loaded."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:125
msgid ""
"Start the engine instance using the given override configuration (if any). :"
"js:meth:`startGame <Engine.prototype.startGame>` can be used in typical "
"cases instead."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:128
msgid ""
"This will initialize the instance if it is not initialized. For manual "
"initialization, see :js:meth:`init <Engine.prototype.init>`. The engine must "
"be loaded beforehand."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:131
msgid ""
"Fails if a canvas cannot be found on the page, or not specified in the "
"configuration."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:133
#: ../../docs/tutorials/platform/html5_shell_classref.rst:152
msgid "An optional configuration override."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:136
msgid "Promise that resolves once the engine started."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:143
msgid ""
"Start the game instance using the given configuration override (if any)."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:145
msgid ""
"This will initialize the instance if it is not initialized. For manual "
"initialization, see :js:meth:`init <Engine.prototype.init>`."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:147
msgid ""
"This will load the engine if it is not loaded, and preload the main pck."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:149
msgid ""
"This method expects the initial config (or the override) to have both the :"
"js:attr:`executable` and :js:attr:`mainPack` properties set (normally done "
"by the editor during export)."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:155
msgid "Promise that resolves once the game started."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:162
msgid ""
"Create a file at the specified ``path`` with the passed as ``buffer`` in the "
"instance's file system."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:164
msgid "The location where the file will be created."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:167
msgid "The content of the file."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:172
msgid "Request that the current instance quit."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:174
msgid ""
"This is akin the user pressing the close button in the window manager, and "
"will have no effect if the engine has crashed, or is stuck in a loop."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:178
msgid "Engine configuration"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:180
msgid ""
"An object used to configure the Engine instance based on godot export "
"options, and to override those in custom HTML templates if needed."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:184
#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:240
msgid "Properties"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:187
#: ../../docs/tutorials/platform/html5_shell_classref.rst:0
msgid "type"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:187
msgid "name"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:189
msgid ":js:attr:`unloadAfterInit`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:191
#: ../../docs/tutorials/platform/html5_shell_classref.rst:236
msgid "HTMLCanvasElement"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:191
msgid ":js:attr:`canvas`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:193
msgid ":js:attr:`executable`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:195
msgid ":js:attr:`mainPack`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:197
msgid ":js:attr:`locale`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:199
#: ../../docs/tutorials/platform/html5_shell_classref.rst:278
msgid "number"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:199
msgid ":js:attr:`canvasResizePolicy`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:201
#: ../../docs/tutorials/platform/html5_shell_classref.rst:290
msgid "Array.<string>"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:201
msgid ":js:attr:`args`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:203
#: ../../docs/tutorials/platform/html5_shell_classref.rst:205
#: ../../docs/tutorials/platform/html5_shell_classref.rst:207
#: ../../docs/tutorials/platform/html5_shell_classref.rst:209
#: ../../docs/tutorials/platform/html5_shell_classref.rst:211
msgid "function"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:203
msgid ":js:attr:`onExecute`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:205
msgid ":js:attr:`onExit`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:207
msgid ":js:attr:`onProgress`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:209
msgid ":js:attr:`onPrint`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:211
msgid ":js:attr:`onPrintError`"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:216
msgid ""
"The Engine configuration object. This is just a typedef, create it like a "
"regular object, e.g.:"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:218
msgid "``const MyConfig = { executable: 'godot', unloadAfterInit: false }``"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:220
msgid "**Property Descriptions**"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:224
msgid ""
"Whether the unload the engine automatically after the instance is "
"initialized."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:0
msgid "value"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:228
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:35
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:37
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:39
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:41
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:43
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:53
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:55
msgid "``true``"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:232
msgid "The HTML DOM Canvas object to use."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:234
msgid ""
"By default, the first canvas element in the document will be used is none is "
"specified."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:238
#: ../../docs/tutorials/platform/html5_shell_classref.rst:254
#: ../../docs/tutorials/platform/html5_shell_classref.rst:265
msgid "``null``"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:242
msgid ""
"The name of the WASM file without the extension. (Set by Godot Editor export "
"process)."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:246
msgid "``\"\"``"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:250
msgid ""
"An alternative name for the game pck to load. The executable name is used "
"otherwise."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:258
msgid "Specify a language code to select the proper localization for the game."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:260
msgid ""
"The browser locale will be used if none is specified. See complete list of :"
"ref:`supported locales <doc_locales>`."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:269
msgid ""
"The canvas resize policy determines how the canvas should be resized by "
"Godot."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:271
msgid ""
"``0`` means Godot won't do any resizing. This is useful if you want to "
"control the canvas size from javascript code in your template."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:274
msgid ""
"``1`` means Godot will resize the canvas on start, and when changing window "
"size via engine functions."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:276
msgid ""
"``2`` means Godot will adapt the canvas size to match the whole browser "
"window."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:280
msgid "``2``"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:284
msgid "The arguments to be passed as command line arguments on startup."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:286
msgid "See :ref:`command line tutorial <doc_command_line_tutorial>`."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:288
msgid ""
"**Note**: :js:meth:`startGame <Engine.prototype.startGame>` will always add "
"the ``--main-pack`` argument."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:292
msgid "``[]``"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:296
msgid "A callback function for handling Godot's ``OS.execute`` calls."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:298
msgid ""
"This is for example used in the Web Editor template to switch between "
"project manager and editor, and for running the game."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:300
msgid "The path that Godot's wants executed."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:303
msgid "The arguments of the \"command\" to execute."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:308
msgid "A callback function for being notified when the Godot instance quits."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:310
msgid ""
"**Note**: This function will not be called if the engine crashes or become "
"unresponsive."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:312
msgid "The status code returned by Godot on exit."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:317
msgid "A callback function for displaying download progress."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:319
msgid ""
"The function is called once per frame while downloading files, so the usage "
"of ``requestAnimationFrame()`` is not necessary."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:322
msgid ""
"If the callback function receives a total amount of bytes as 0, this means "
"that it is impossible to calculate. Possible reasons include:"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:325
msgid "Files are delivered with server-side chunked compression"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:326
msgid "Files are delivered with server-side compression on Chromium"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:327
msgid ""
"Not all file downloads have started yet (usually on servers without multi-"
"threading)"
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:329
msgid "The current amount of downloaded bytes so far."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:332
msgid "The total amount of bytes to be downloaded."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:337
msgid ""
"A callback function for handling the standard output stream. This method "
"should usually only be used in debug pages."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:339
msgid "By default, ``console.log()`` is used."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:341
msgid "A variadic number of arguments to be printed."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:346
msgid ""
"A callback function for handling the standard error stream. This method "
"should usually only be used in debug pages."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:348
msgid "By default, ``console.error()`` is used."
msgstr ""

#: ../../docs/tutorials/platform/html5_shell_classref.rst:350
msgid "A variadic number of arguments to be printed as errors."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:4
msgid "Custom HTML page for Web export"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:6
msgid ""
"While Web export templates provide a default HTML page fully capable of "
"launching the project without any further customization, it may be "
"beneficial to create a custom HTML page. While the game itself cannot easily "
"be directly controlled from the outside yet, such page allows to customize "
"the initialization process for the engine."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:11
msgid "Some use-cases where customizing the default page is useful include:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:13
msgid "Loading files from a different directory than the page;"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:14
msgid "Loading a ``.zip`` file instead of a ``.pck`` file as the main pack;"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:15
msgid "Loading the engine from a different directory than the main pack file;"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:16
msgid ""
"Adding a click-to-play button so that games can be started in the fullscreen "
"mode;"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:17
msgid ""
"Loading some extra files before the engine starts, making them available in "
"the project file system as soon as possible;"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:19
msgid ""
"Passing custom command line arguments, e.g. ``-s`` to start a ``MainLoop`` "
"script."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:21
msgid ""
"The default HTML page is available in the Godot Engine repository at `/misc/"
"dist/html/full-size.html <https://github.com/godotengine/godot/blob/master/"
"misc/dist/html/full-size.html>`__ but the following template can be used as "
"a much simpler example:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:45
msgid ""
"As shown by the example above, it is mostly a regular HTML document, with "
"few placeholders which needs to be replaced during export, an html "
"``<canvas>`` element, and some simple JavaScript code that calls the :js:"
"class:`Engine` class."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:49
msgid "The only required placeholders are:"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:51
msgid ""
"``$GODOT_URL``: The name of the main JavaScript file, which provides the :js:"
"class:`Engine` class required to start the engine and that must be included "
"in the HTML as a ``<script>``. The name is generated from the *Export Path* "
"during the export process."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:56
msgid ""
"``$GODOT_CONFIG``: A JavaScript object, containing the export options and "
"can be later overridden. See :js:attr:`EngineConfig` for the full list of "
"overrides."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:60
msgid ""
"The following optional placeholders will enable some extra features in your "
"custom HTML template."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:62
msgid ""
"``$GODOT_PROJECT_NAME``: The project name as defined in the Project "
"Settings. It is a good idea to use it as a ``<title>`` in your template."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:66
msgid ""
"``$GODOT_HEAD_INCLUDE``: A custom string to include in the HTML document "
"just before the end of the ``<head>`` tag. It is customized in the export "
"options under the *Html / Head Include* section. While you fully control the "
"HTML page you create, this variable can be useful for configuring parts of "
"the HTML ``head`` element from the Godot Editor, e.g. for different Web "
"export presets."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:72
msgid ""
"When the custom page is ready, it can be selected in the export options "
"under the *Html / Custom Html Shell* section."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:78
msgid "Starting the project"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:79
msgid ""
"To be able to start the game, you need to write a script that initializes "
"the engine — the control code. This process consists of three steps, though "
"as shown most of them can be skipped depending on how much customization is "
"needed (or be left to a default behavior)."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:83
msgid ""
"See the :ref:`HTML5 shell class reference <doc_html5_shell_classref>`, for "
"the full list of methods and options available."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:85
msgid ""
"First, the engine must be loaded, then it needs to be initialized, and after "
"this the project can finally be started. You can perform every of these "
"steps manually and with great control. However, in the simplest case all you "
"need to do is to create an instance of the :js:class:`Engine` class with the "
"exported configuration, and then call the :js:meth:`engine.startGame <Engine."
"prototype.startGame>` method optionally overriding any :js:attr:"
"`EngineConfig` parameters."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:101
msgid ""
"This snippet of code automatically loads and initializes the engine before "
"starting the game. It uses the given configuration to to load the engine. "
"The :js:meth:`engine.startGame <Engine.prototype.startGame>` method is "
"asynchronous and returns a ``Promise``. This allows your control code to "
"track if the game was loaded correctly without blocking execution or relying "
"on polling."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:106
msgid ""
"In case your project needs to have special control over the start arguments "
"and dependency files, the :js:meth:`engine.start <Engine.prototype.start>` "
"method can be used instead. Note, that this method do not automatically "
"preload the ``pck`` file, so you will probably want to manually preload it "
"(and any other extra file) via the :js:meth:`engine.preloadFile <Engine."
"prototype.preloadFile>` method."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:111
msgid ""
"Optionally, you can also manually :js:meth:`engine.init <Engine.prototype."
"init>` to perform specific actions after the module initialization, but "
"before the engine starts."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:114
msgid ""
"This process is a bit more complex, but gives you full control over the "
"engine startup process."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:133
msgid ""
"To load the engine manually the :js:meth:`Engine.load` static method must be "
"called. As this method is static, multiple engine instances can be spawned "
"if the share the same ``wasm``."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:136
msgid ""
"Multiple instances cannot be spawned by default, as the engine is "
"immediately unloaded after it is initialized. To prevent this from happening "
"see the :js:attr:`unloadAfterInit` override option. It is still possible to "
"unload the engine manually afterwards by calling the :js:meth:`Engine."
"unload` static method. Unloading the engine frees browser memory by "
"unloading files that are no longer needed once the instance is initialized."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:142
msgid "Customizing the behavior"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:143
msgid ""
"In the Web environment several methods can be used to guarantee that the "
"game will work as intended."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:145
msgid ""
"If you target a specific version of WebGL, or just want to check if WebGL is "
"available at all, you can call the :js:meth:`Engine.isWebGLAvailable` "
"method. It optionally takes an argument that allows to test for a specific "
"major version of WebGL."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:149
msgid ""
"As the real executable file does not exist in the Web environment, the "
"engine only stores a virtual filename formed from the base name of loaded "
"engine files. This value affects the output of the :ref:`OS."
"get_executable_path() <class_OS_method_get_executable_path>` method and "
"defines the name of the automatically started main pack. The :js:attr:"
"`executable` override option can be used to override this value."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:156
msgid "Customizing the presentation"
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:157
msgid ""
"Several configuration options can be used to further customize the look and "
"behavior of the game on your page."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:159
msgid ""
"By default, the first canvas element on the page is used for rendering. To "
"use a different canvas element the :js:attr:`canvas` override option can be "
"used. It requires a reference to the DOM element itself."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:168
msgid ""
"The way the engine resize the canvas can be configured via the :js:attr:"
"`canvasResizePolicy` override option."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:171
msgid ""
"If your game takes some time to load, it may be useful to display a custom "
"loading UI which tracks the progress. This can be achieved with the :js:attr:"
"`onProgress` callback option, which allows to set up a callback function "
"that will be called regularly as the engine loads new bytes."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:182
msgid ""
"Be aware that in some cases ``total`` can be ``0``. This means that it "
"cannot be calculated."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:184
msgid ""
"If your game supports multiple languages, the :js:attr:`locale` override "
"option can be used to force a specific locale, provided you have a valid "
"language code string. It may be good to use server-side logic to determine "
"which languages a user may prefer. This way the language code can be taken "
"from the ``Accept-Language`` HTTP header, or determined by a GeoIP service."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:191
msgid ""
"To debug exported projects, it may be useful to read the standard output and "
"error streams generated by the engine. This is similar to the output shown "
"in the editor console window. By default, standard ``console.log`` and "
"``console.warn`` are used for the output and error streams respectively. "
"This behavior can be customized by setting your own functions to handle "
"messages."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:196
msgid ""
"Use the :js:attr:`onPrint` override option to set a callback function for "
"the output stream, and the :js:attr:`onPrintError` override option to set a "
"callback function for the error stream."
msgstr ""

#: ../../docs/tutorials/platform/customizing_html5_shell.rst:209
msgid ""
"When handling the engine output keep in mind, that it may not be desirable "
"to print it out in the finished product."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:4
msgid "Console support in Godot"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:7
msgid "Console publishing process"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:9
msgid ""
"Regardless of the engine used to create the game, the process to publish a "
"game to a console platform is as follows:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:12
msgid ""
"Register a developer account on the console manufacturer's website, then "
"sign NDAs and publishing contracts. This requires you to have a registered "
"legal entity."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:15
msgid ""
"Gain access to the publishing platform by passing the acceptance process. "
"This can take up to several months. Note that this step is significantly "
"easier if an established publisher is backing your game. Nintendo is "
"generally known to be more accepting of smaller developers, but this is not "
"guaranteed."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:19
msgid ""
"Get access to developer tools and order a console specially made for "
"developers (*devkit*). The cost of those devkits is confidential."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:21
msgid "Port the engine to the console platform or pay a company to do it."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:22
msgid ""
"To be published, your game needs to be rated in the regions you'd like to "
"sell it in. For example, in North America, the `ESRB <https://www.esrb.org/"
">`__ handles game ratings. In Europe, this is done by `PEGI <https://pegi."
"info/>`__. Indie developers can generally get a rating for cheaper compared "
"to more established developers."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:28
msgid ""
"Due to the complexity of the process, the budget to publish a game by "
"yourself on a single console often exceeds $1,000 (this is a rough figure)."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:32
msgid "Official support"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:34
msgid ""
"Godot supports the Linux-based Steam Deck. The reason other consoles are not "
"officially supported are:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:37
msgid ""
"To develop for consoles, one must be licensed as a company. As an open "
"source project, Godot does not have such a legal figure."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:39
msgid ""
"Console SDKs are secret and covered by non-disclosure agreements. Even if we "
"could get access to them, we could not publish the platform-specific code "
"under an open source license."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:42
msgid ""
"Consoles require specialized hardware to develop for, so regular individuals "
"can't create games for them anyway."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:45
msgid ""
"However, it is still possible to port your games to consoles thanks to "
"services provided by third-party companies."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:50
msgid ""
"In practice, the process is quite similar to Unity and Unreal Engine, except "
"that you need to contact a third-party developer to handle the porting "
"process. In other words, there is no engine that is legally allowed to "
"distribute console export templates without requiring the user to prove that "
"they are a licensed console developer. Doing so would violate the console "
"manufacturer's NDA."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:58
msgid "Third-party support"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:60
msgid ""
"Console ports of Godot are offered by third-party companies (which have "
"ported Godot on their own). These companies also offer publishing of your "
"games to various consoles."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:64
msgid "Following is the list of providers:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:66
msgid ""
"`Lone Wolf Technology <http://www.lonewolftechnology.com/>`_ offers Switch "
"and PS4 porting and publishing of Godot games."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:68
msgid ""
"`Pineapple Works <https://pineapple.works/>`_ offers Switch, Xbox One & Xbox "
"Series X/S (GDK) porting and publishing of Godot games (GDScript/C#)."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:70
msgid ""
"`RAWRLAB games <https://www.rawrlab.com/>`_ offers Switch porting of Godot "
"games."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:72
msgid ""
"`mazette! games <https://mazette.games/>`_ offers Switch, Xbox One and Xbox "
"Series X/S porting and publishing of Godot games."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:75
msgid ""
"If your company offers porting, or porting *and* publishing services for "
"Godot games, feel free to `open an issue or pull request <https://github.com/"
"godotengine/godot-docs>`_ to add your company to the list above."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:4
msgid "Mobile rendering limitations"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:8
msgid ""
"The general :ref:`doc_3d_rendering_limitations` also apply to mobile "
"platforms."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:10
msgid ""
"To improve out-of-the-box performance on mobile devices, Godot automatically "
"uses low-end-friendly settings by default on both Android and iOS. These are "
"configured by project settings with a ``.mobile`` :ref:`feature tag "
"<doc_feature_tags>` suffix."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:14
msgid ""
"One of the most notable changes on mobile that will affect 3D projects is "
"that lighting is done per-vertex instead of per-pixel. This improves "
"performance a lot, but can break rendering in some scenes, especially if "
"your meshes aren't sufficiently subdivided for per-vertex lighting to look "
"good. This can be disabled in the Project Settings at a performance cost "
"(see below)."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:20
msgid ""
"When using GLES2, some custom shaders may break when exporting to Android. "
"This is caused by a lower shader precision being used by default to improve "
"performance. You can force high precision on all shader computations by "
"enabling ``rendering/gles2/compatibility/enable_high_float.Android`` project "
"setting, but this has a significant performance cost and won't work on all "
"devices."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:26
msgid "The following project settings have mobile-specific overrides:"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:29
msgid "Setting"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:29
msgid "Desktop default"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:29
msgid "Mobile default"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:31
msgid "``rendering/quality/directional_shadow/size``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:31
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:45
msgid "4096"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:31
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:45
msgid "2048"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:33
msgid "``rendering/quality/intended_usage/framebuffer_allocation``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:33
msgid "3D Without Effects"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:35
msgid "``rendering/quality/lightmapping/use_bicubic_sampling``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:35
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:37
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:39
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:41
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:43
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:53
#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:55
msgid "``false``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:37
msgid "``rendering/quality/reflections/high_quality_ggx``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:39
msgid "``rendering/quality/shading/force_blinn_over_ggx``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:41
msgid "``rendering/quality/shading/force_lambert_over_burley``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:43
msgid "``rendering/quality/shading/force_vertex_shading``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:45
msgid "``rendering/quality/shadow_atlas/size``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:47
msgid "``rendering/quality/shadows/filter_mode``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:47
msgid "PCF5"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:49
msgid "*GLES3 only:* ``rendering/gles3/shaders/max_simultaneous_compiles``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:51
msgid "*GLES3 only:* ``rendering/gles3/shaders/shader_cache_size_mb``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:51
msgid "512"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:51
msgid "128"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:53
msgid "*GLES3 only:* ``rendering/quality/depth/hdr``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:55
msgid ""
"*GLES3 only:* ``rendering/quality/reflections/texture_array_reflections``"
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:58
msgid ""
"See the :ref:`ProjectSettings class documentation <class_ProjectSettings>` "
"for more information on those setting overrides."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:61
msgid ""
"If you're only targeting mobile platforms in your project, consider changing "
"the project settings' values to match the mobile overrides. This way, you'll "
"get a preview that is closer to the mobile appearance when running the "
"project on a desktop platform (as well as within the editor)."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:68
msgid ""
"Due to driver bugs, GLES3 support on Android and iOS can be poor, especially "
"on old or low-end devices. Therefore, it is recommended to use the GLES2 "
"renderer when targeting mobile platforms (especially Android)."
msgstr ""

#: ../../docs/tutorials/platform/mobile_rendering_limitations.rst:72
msgid ""
"You can change the rendering backend in the Project Settings (**Rendering > "
"Quality > Driver > Driver Name**)."
msgstr ""

#: ../../docs/tutorials/plugins/editor/index.rst:2
msgid "Editor plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:4
msgid "Installing plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:6
msgid ""
"Godot features an editor plugin system with numerous plugins developed by "
"the community. Plugins can extend the editor's functionality with new nodes, "
"additional docks, convenience features, and more."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:11
msgid "Finding plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:13
msgid ""
"The preferred way to find Godot plugins is to use the `Asset Library "
"<https://godotengine.org/asset-library/>`_. While it can be browsed online, "
"it's more convenient to use it directly from the editor. To do so, click the "
"**AssetLib** tab at the top of the editor:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:20
msgid "You can also find assets on code hosting websites such as GitHub."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:24
msgid ""
"Some repositories describe themselves as \"plugins\" but may not actually be "
"*editor* plugins. This is especially the case for scripts that are intended "
"to be used in a running project. You don't need to enable such plugins to "
"use them. Download them and extract the files in your project folder."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:29
msgid ""
"One way to distinguish editor plugins from non-editor plugins is to look for "
"a ``plugin.cfg`` file in the repository that hosts the plugin. If the "
"repository contains a ``plugin.cfg`` file in a folder placed in the ``addons/"
"`` folder, then it is an editor plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:35
msgid "Installing a plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:37
msgid ""
"To install a plugin, download it as a ZIP archive. On the Asset Library, "
"this can be done using the **Download** button, either from the editor or "
"using the Web interface."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:41
msgid ""
"On GitHub, if a plugin has *tags* (versions) declared, go to the "
"**Releases** tab to download a stable release. This ensures you download a "
"version that was declared to be stable by its author."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:45
msgid ""
"On GitHub, if the plugin doesn't have any *tags* declared, use the "
"**Download ZIP** button to download a ZIP of the latest revision:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:50
msgid ""
"Extract the ZIP archive and move the ``addons/`` folder it contains into "
"your project folder. If your project already contains an ``addons/`` folder, "
"move the plugin's ``addons/`` folder into your project folder to merge the "
"new folder contents with the existing one. Your file manager may ask you "
"whether to write into the folder; answer **Yes**. No files will be "
"overwritten in the process."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:57
msgid "Enabling a plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:59
msgid ""
"To enable the freshly installed plugin, open **Project > Project Settings** "
"at the top of the editor then go the **Plugins** tab. If the plugin was "
"packaged correctly, you should see it in the list of plugins. Click on the "
"gray **Inactive** text and choose **Active** to enable the plugin. The word "
"**Active** will display in green to confirm the plugin was enabled."
msgstr ""

#: ../../docs/tutorials/plugins/editor/installing_plugins.rst:68
msgid ""
"You can use the plugin immediately after enabling it; there's no need to "
"restart the editor. Likewise, disabling a plugin can be done without having "
"to restart the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:4
msgid "Making plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:7
msgid "About plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:9
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:16
msgid ""
"This tutorial will guide you through the creation of two simple plugins so "
"you can understand how they work and be able to develop your own. The first "
"will be a custom node that you can add to any scene in the project and the "
"other will be a custom dock added to the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:22
msgid "Creating a plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:24
msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:27
msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:33
msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create`` "
"button in the top-right."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:37
msgid "You will see the dialog appear, like so:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:41
msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:44
msgid "To continue with the example, use the following values:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:71
msgid ""
"Unchecking the ``Activate now?`` option in C# is always required because, "
"like every other C# script, the EditorPlugin script needs to be compiled "
"which requires building the project. After building the project the plugin "
"can be enabled in the ``Plugins`` tab of ``Project Settings``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:76
msgid "You should end up with a directory structure like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:80
msgid ""
"``plugin.cfg`` is a simple INI file with metadata about your plugin. The "
"name and description help people understand what it does. Your name helps "
"you get properly credited for your work. The version number helps others "
"know if they have an outdated version; if you are unsure on how to come up "
"with the version number, check out `Semantic Versioning <https://semver.org/"
">`_. The main script file will instruct Godot what your plugin does in the "
"editor once it is active."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:89
msgid "The script file"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:91
msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:98
msgid ""
"In addition to the EditorPlugin script, any other script that your plugin "
"uses must *also* be a tool. * Any GDScript without ``tool`` imported into "
"the editor will act like an empty file! * Any C# class without ``[Tool]`` "
"won't be reloaded when the project is built forcing you to re-enable the "
"plugin!"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:103
msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_method__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node_method__exit_tree>` to clean it up. Thankfully, "
"the dialog generates these callbacks for you. Your script should look "
"something like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:148
msgid "This is a good template to use when creating new plugins."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:151
msgid "A custom node"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:153
msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:161
msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_gdscript_basics_class_name>`. If you are writing GDScript "
"or NativeScript, we recommend using Script Classes instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:166
msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the editor "
"(nodes or resources). However, before you can create the type, you need a "
"script that will act as the logic for the type. While that script doesn't "
"have to use the ``tool`` keyword, it can be added so the script runs in the "
"editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:173
msgid ""
"For this tutorial, we'll create a simple button that prints a message when "
"clicked. For that, we'll need a simple script that extends from :ref:"
"`class_Button`. It could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:211
msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.png\")`). You can also use SVG icons if "
"desired."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:219
msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:267
msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:270
msgid "Then try it out by adding your new node:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:274
msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:281
msgid "A custom dock"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:283
msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:287
msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:312
msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:316
msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:320
msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:328
msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:333
msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:394
msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:398
msgid "Checking the results"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:400
msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list. If it is not showing, click on the **Update** button in the "
"top-right corner."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:407
msgid ""
"You can see the plugin is inactive on the **Status** column; click on the "
"status to select **Active**. The dock should become visible before you even "
"close the settings window. You should now have a custom dock:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:414
msgid "Going beyond"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:416
msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:421
msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:428
msgid "Registering autoloads/singletons in plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:430
msgid ""
"It is possible for editor plugins to automatically register :ref:`autoloads "
"<doc_singletons_autoload>` when the plugin is enabled. This also includes "
"unregistering the autoload when the plugin is disabled."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:434
msgid ""
"This makes setting up plugins faster for users, as they no longer have to "
"manually add autoloads to their project settings if your editor plugin "
"requires the use of an autoload."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:438
msgid "Use the following code to register a singleton from an editor plugin:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:4
msgid "Making main screen plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:7
msgid "What this tutorial covers"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:9
msgid ""
"As seen in the :ref:`doc_making_plugins` page, making a basic plugin that "
"extends the editor is fairly easy. Main screen plugins allow you to create "
"new UIs in the central part of the editor, which appear next to the \"2D\", "
"\"3D\", \"Script\", and \"AssetLib\" buttons. Such editor plugins are "
"referred as \"Main screen plugins\"."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:15
msgid ""
"This tutorial leads you through the creation of a basic main screen plugin. "
"For the sake of simplicity, our main screen plugin will contain a single "
"button that prints text to the console."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:20
msgid "Initializing the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:22
msgid ""
"First create a new plugin from the Plugins menu. For this tutorial, we'll "
"put it in a folder called ``main_screen``, but you can use any name you'd "
"like."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:25
msgid ""
"The plugin script will come with ``_enter_tree()`` and ``_exit_tree()`` "
"methods, but for a main screen plugin we need to add a few extra methods. "
"Add five extra methods such that the script looks like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:58
msgid ""
"The important part in this script is the ``has_main_screen()`` function, "
"which is overloaded so it returns ``true``. This function is automatically "
"called by the editor on plugin activation, to tell it that this plugin adds "
"a new center view to the editor. For now, we'll leave this script as-is and "
"we'll come back to it later."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:65
msgid "Main screen scene"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:67
msgid ""
"Create a new scene with a root node derived from ``Control`` (for this "
"example plugin, we'll make the root node a ``CenterContainer``). Select this "
"root node, and in the viewport, click the ``Layout`` menu and select ``Full "
"Rect``. You also need to enable the ``Expand`` vertical size flag in the "
"inspector. The panel now uses all the space available in the main viewport."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:74
msgid ""
"Next, let's add a button to our example main screen plugin. Add a ``Button`` "
"node, and set the text to \"Print Hello\" or similar. Add a script to the "
"button like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:87
msgid ""
"Then connect the \"pressed\" signal to itself. If you need help with "
"signals, see the :ref:`doc_signals` article."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:90
msgid ""
"We are done with the main screen panel. Save the scene as ``main_panel."
"tscn``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:93
msgid "Update the plugin script"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:95
msgid ""
"We need to update the ``main_screen_plugin.gd`` script so the plugin "
"instances our main panel scene and places it where it needs to be. Here is "
"the full plugin script:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:140
msgid ""
"A couple of specific lines were added. ``MainPanel`` is a constant that "
"holds a reference to the scene, and we instance it into "
"`main_panel_instance`."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:143
msgid ""
"The ``_enter_tree()`` function is called before ``_ready()``. This is where "
"we instance the main panel scene, and add them as children of specific parts "
"of the editor. We use ``get_editor_interface().get_editor_viewport()`` to "
"obtain the viewport and add our main panel instance as a child to it. We "
"call the ``make_visible(false)`` function to hide the main panel so it "
"doesn't compete for space when first activating the plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:150
msgid ""
"The ``_exit_tree()`` function is called when the plugin is deactivated. If "
"the main screen still exists, we call ``queue_free()`` to free the instance "
"and remove it from memory."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:154
msgid ""
"The ``make_visible()`` function is overridden to hide or show the main panel "
"as needed. This function is automatically called by the editor when the user "
"clicks on the main viewport buttons at the top of the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:158
msgid ""
"The ``get_plugin_name()`` and ``get_plugin_icon()`` functions control the "
"displayed name and icon for the plugin's main viewport button."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:161
msgid ""
"Another function you can add is the ``handles()`` function, which allows you "
"to handle a node type, automatically focusing the main screen when the type "
"is selected. This is similar to how clicking on a 3D node will automatically "
"switch to the 3D viewport."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:167
msgid "Try the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:169
msgid ""
"Activate the plugin in the Project Settings. You'll observe a new button "
"next to 2D, 3D, Script above the main viewport. Clicking it will take you to "
"your new main screen plugin, and the button in the middle will print text."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:173
msgid ""
"If you would like to try a finished version of this plugin, check out the "
"plugin demos here: https://github.com/godotengine/godot-demo-projects/tree/"
"master/plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:177
msgid ""
"If you would like to see a more complete example of what main screen plugins "
"are capable of, check out the 2.5D demo projects here: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/2.5d"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:4
msgid "Import plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:6
msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:13
msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, Ogg Vorbis "
"sounds, and many more."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:18
msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material. In this example it will contain the pure blue color "
"(zero red, zero green, and full blue):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:30
msgid "Configuration"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:32
msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:45
msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:67
msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:76
msgid ""
"Note that the import plugin is a reference type, so it doesn't need to be "
"explicitly released from memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:81
msgid "The EditorImportPlugin class"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:83
msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible for implementing the methods "
"that are called by Godot when it needs to know how to deal with files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:88
msgid "Let's begin to code our plugin, one method at time:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:100
msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name for your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:111
msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible for returning the name of the type it imports and it "
"will be shown to the user in the Import dock."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:115
msgid ""
"You should choose this name as a continuation to \"Import as\", e.g. "
"*\"Import as Silly Material\"*. You can name it whatever you want but we "
"recommend a descriptive name for your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:124
msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:130
msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:140
msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to declare what will be "
"used in the import."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:146
msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:156
msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:160
msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:163
msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:168
msgid "Options and presets"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:170
msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:177
msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:191
msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:199
msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:214
msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:219
msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:224
msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:239
msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "Key"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
#: ../../docs/development/file_formats/tscn.rst:173
msgid "``name``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:254
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:172
#: ../../docs/development/cpp/core_types.rst:174
msgid "String"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "``default_value``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "Any"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "The default value of the option for this preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid "``property_hint``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:256
msgid "Enum value"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:254
msgid "``hint_string``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:254
msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:256
msgid "``usage``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:256
msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:259
msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:261
msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:267
msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:277
msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:282
msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:286
msgid "The ``import`` method"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:288
msgid ""
"The heavy part of the process, responsible for converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:304
msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:308
msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:323
msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:327
msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:336
msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:344
msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:351
msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:356
msgid "Platform variants and generated files"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:358
msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:363
msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:368
msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:372
msgid ""
"For example, let's say we save a different material for a mobile platform. "
"We would need to do something like the following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:380
msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:385
msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:401
msgid "Trying the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:403
msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:408
msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:413
msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:420
msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:424
msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:4
msgid "Spatial gizmo plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:9
msgid ""
"Spatial gizmo plugins are used by the editor and custom plugins to define "
"the gizmos attached to any kind of Spatial node."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:12
msgid ""
"This tutorial will show you the two main approaches to defining your own "
"custom gizmos. The first option works well for simple gizmos and creates "
"less clutter in your plugin structure, while the second one will let you "
"store some per-gizmo data."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:16
msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:20
msgid "The EditorSpatialGizmoPlugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:22
msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:27
msgid "This would be a basic setup:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:59
msgid ""
"For simple gizmos, just inheriting :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:65
msgid "Simple approach"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:67
msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`has_gizmo()<class_EditorSpatialGizmoPlugin_method_has_gizmo>` method so "
"that it returns ``true`` when the spatial parameter is of our target type."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:81
msgid ""
"Then we can override methods like :ref:"
"`redraw()<class_EditorSpatialGizmoPlugin_method_redraw>` or all the handle "
"related ones."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:115
msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `redraw` method using :ref:"
"`get_material()<class_EditorSpatialGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:120
msgid "So the final plugin would look somewhat like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:161
msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>` to get properly "
"working handles."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:166
msgid "Alternative approach"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:168
msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`, maybe because we want to "
"have some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:172
msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`create_gizmo()<class_EditorSpatialGizmoPlugin_method_create_gizmo>`, so it "
"returns our custom gizmo implementation for the Spatial nodes we want to "
"target."
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:197
msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorSpatialGizmo<class_EditorSpatialGizmo>`, like so:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/spatial_gizmos.rst:235
msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>` to get properly working "
"handles."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:4
msgid "Inspector plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:6
msgid ""
"The inspector dock allows you to create custom widgets to edit properties "
"through plugins. This can be beneficial when working with custom datatypes "
"and resources, although you can use the feature to change the inspector "
"widgets for built-in types. You can design custom controls for specific "
"properties, entire objects, and even separate controls associated with "
"particular datatypes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:12
msgid ""
"This guide explains how to use the :ref:`class_EditorInspectorPlugin` and :"
"ref:`class_EditorProperty` classes to create a custom interface for "
"integers, replacing the default behavior with a button that generates random "
"values between 0 and 99."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:20
msgid "The default behavior on the left and the end result on the right."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:24
msgid "Setting up your plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:26
msgid "Create a new empty plugin to get started."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:28
msgid "See :ref:`doc_making_plugins` guide to set up your new plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:30
msgid ""
"Let's assume you've called your plugin folder ``my_inspector_plugin``. If "
"so, you should end up with a new ``addons/my_inspector_plugin`` folder that "
"contains two files: ``plugin.cfg`` and ``plugin.gd``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:34
msgid ""
"As before, ``plugin.gd`` is a script extending :ref:`class_EditorPlugin` and "
"you need to introduce new code for its ``_enter_tree`` and ``_exit_tree`` "
"methods. To set up your inspector plugin, you must load its script, then "
"create and add the instance by calling ``add_inspector_plugin()``. If the "
"plugin is disabled, you should remove the instance you have added by calling "
"``remove_inspector_plugin()``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:41
msgid ""
"Here, you are loading a script and not a packed scene. Therefore you should "
"use ``new()`` instead of ``instance()``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:88
msgid "Interacting with the inspector"
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:90
msgid ""
"To interact with the inspector dock, your ``MyInspectorPlugin.gd`` script "
"must extend the :ref:`class_EditorInspectorPlugin` class. This class "
"provides several virtual methods that affect how the inspector handles "
"properties."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:94
msgid ""
"To have any effect at all, the script must implement the ``can_handle()`` "
"method. This function is called for each edited :ref:`class_Object` and must "
"return ``true`` if this plugin should handle the object or its properties."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:98
msgid "This includes any :ref:`class_Resource` attached to the object."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:100
msgid ""
"You can implement four other methods to add controls to the inspector at "
"specific positions. The ``parse_begin()`` and ``parse_end()`` methods are "
"called only once at the beginning and the end of parsing for each object, "
"respectively. They can add controls at the top or bottom of the inspector "
"layout by calling ``add_custom_control()``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:106
msgid ""
"As the editor parses the object, it calls the ``parse_category()`` and "
"``parse_property()`` methods. There, in addition to "
"``add_custom_control()``, you can call both ``add_property_editor()`` and "
"``add_property_editor_for_multiple_properties()``. Use these last two "
"methods to specifically add :ref:`class_EditorProperty`-based controls."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:172
msgid "Adding an interface to edit properties"
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:174
msgid ""
"The :ref:`class_EditorProperty` class is a special type of :ref:"
"`class_Control` that can interact with the inspector dock's edited objects. "
"It doesn't display anything but can house any other control nodes, including "
"complex scenes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:178
msgid ""
"There are three essential parts to the script extending :ref:"
"`class_EditorProperty`:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:181
msgid ""
"You must define the ``_init()`` method to set up the control nodes' "
"structure."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:184
msgid ""
"You should implement the ``update_property()`` to handle changes to the data "
"from the outside."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:187
msgid ""
"A signal must be emitted at some point to inform the inspector that the "
"control has changed the property using ``emit_changed``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:190
msgid ""
"You can display your custom widget in two ways. Use just the default "
"``add_child()`` method to display it to the right of the property name, and "
"use ``add_child()`` followed by ``set_bottom_editor()`` to position it below "
"the name."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:309
msgid ""
"Using the example code above you should be able to make a custom widget that "
"replaces the default :ref:`class_SpinBox` control for integers with a :ref:"
"`class_Button` that generates random values."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:4
msgid "Visual Shader plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:6
msgid ""
"Visual Shader plugins are used to create custom :ref:`class_VisualShader` "
"nodes in GDScript."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:9
msgid ""
"The creation process is different from usual editor plugins. You do not need "
"to create a ``plugin.cfg`` file to register it; instead, create and save a "
"script file and it will be ready to use, provided the custom node is "
"registered with ``class_name``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:14
msgid ""
"This short tutorial will explain how to make a Perlin-3D noise node "
"(original code from this `GPU noise shaders plugin <https://github.com/curly-"
"brace/Godot-3.0-Noise-Shaders/blob/master/assets/gpu_noise_shaders/"
"classic_perlin3d.tres>`_."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:18
msgid ""
"Create a Sprite and assign a :ref:`class_ShaderMaterial` to its material "
"slot:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:22
msgid "Assign :ref:`class_VisualShader` to the shader slot of the material:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:26
msgid ""
"Don't forget to change its mode to \"CanvasItem\" (if you are using a "
"Sprite):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:30
msgid ""
"Create a script which derives from :ref:`class_VisualShaderNodeCustom`. This "
"is all you need to initialize your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:193
msgid ""
"Save it and open the Visual Shader. You should see your new node type within "
"the member's dialog (if you can't see your new node, try restarting the "
"editor):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:197
msgid "Place it on a graph and connect the required ports:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/visual_shader_plugins.rst:201
msgid ""
"That is everything you need to do, as you can see it is easy to create your "
"own custom VisualShader nodes!"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:4
msgid "Running code in the editor"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:7
msgid "What is ``tool``?"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:9
msgid ""
"``tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:11
msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:13
msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw the cannonball's trajectory in the editor, making level design "
"a lot easier."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:14
msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:15
msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:19
msgid ""
"``tool`` scripts run inside the editor, and let you access the scene tree of "
"the currently edited scene. This is a powerful feature which also comes with "
"caveats, as the editor does not include protections for potential misuse of "
"``tool`` scripts. Be **extremely** cautious when manipulating the scene "
"tree, especially via :ref:`Node.queue_free<class_Node_method_queue_free>`, "
"as it can cause crashes if you free a node while the editor runs logic "
"involving it."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:28
msgid "How to use it"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:30
msgid ""
"To turn a script into a tool, add the keyword ``tool`` at the top of your "
"code."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:32
msgid ""
"To check if you are currently in the editor, use: ``Engine.editor_hint``."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:34
msgid "For example, if you want to execute some code only in the editor, use:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:49
msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"the same statement:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:64
msgid ""
"Pieces of code do not have either of the 2 conditions above will run both in-"
"editor and in-game."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:66
msgid "Here is how a ``_process()`` function might look for you:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:97
msgid ""
"Modifications in editor are permanent. For example, in the following case, "
"when we remove the script, the node will keep its rotation. Be careful to "
"avoid making unwanted modifications."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:100
msgid "Try it out"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:102
msgid ""
"Add a ``Sprite`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:127
msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:131
msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:133
msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:158
msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:161
msgid "Editing variables"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:162
msgid ""
"Add and export a variable speed to the script. The function set_speed after "
"\"setget\" is executed with your input to change the variable. Modify  "
"``_process()`` to include the rotation speed."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:213
msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. AutoLoad nodes cannot be accessed in the editor at "
"all."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:216
#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:178
msgid "Instancing scenes"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:218
msgid ""
"You can instantiate packed scenes normally and add them to the scene "
"currently opened in the editor. By default, nodes or scenes added with :ref:"
"`Node.add_child(node) <class_Node_method_add_child>` are **not** visible in "
"the Scene tree dock and are **not** persisted to disk. If you wish the node "
"or scene to be visible in the scene tree dock and persisted to disk when "
"saving the scene, you need to set the child node's :ref:`owner "
"<class_Node_property_owner>` property to the currently edited scene root."
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:226
msgid "If you are using ``tool``:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:251
msgid "If you are using :ref:`EditorScript<class_EditorScript>`:"
msgstr ""

#: ../../docs/tutorials/plugins/running_code_in_the_editor.rst:278
msgid ""
"Using ``tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``tool`` keyword to "
"the top. Also, make sure to separate code that runs in-editor from code that "
"runs in-game. This way, you can find bugs more easily."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:4
msgid "Using Viewports"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:9
msgid ""
"Think of a :ref:`Viewport <class_Viewport>` as a screen onto which the game "
"is projected. In order to see the game, we need to have a surface on which "
"to draw it; that surface is the Root :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:16
msgid ""
":ref:`Viewports <class_Viewport>` can also be added to the scene so that "
"there are multiple surfaces to draw on. When we are drawing to a :ref:"
"`Viewport <class_Viewport>` that is not the Root, we call it a render "
"target. We can access the contents of a render target by accessing its "
"corresponding :ref:`texture <class_ViewportTexture>`. By using a :ref:"
"`Viewport <class_Viewport>` as a render target, we can either render "
"multiple scenes simultaneously or we can render to a :ref:`texture "
"<class_ViewportTexture>` which is applied to an object in the scene, for "
"example a dynamic skybox."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:25
msgid ""
":ref:`Viewports <class_Viewport>` have a variety of use cases, including:"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:27
msgid "Rendering 3D objects within a 2D game"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:28
msgid "Rendering 2D elements in a 3D game"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:29
msgid "Rendering dynamic textures"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:30
msgid "Generating procedural textures at runtime"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:31
msgid "Rendering multiple cameras in the same scene"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:33
msgid ""
"What all these use cases have in common is that you are given the ability to "
"draw objects to a texture as if it were another screen and can then choose "
"what to do with the resulting texture."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:40
msgid ""
":ref:`Viewports <class_Viewport>` are also responsible for delivering "
"properly adjusted and scaled input events to all their children nodes. "
"Typically, input is received by the nearest :ref:`Viewport <class_Viewport>` "
"in the tree, but you can set :ref:`Viewports <class_Viewport>` not to "
"receive input by checking 'Disable Input' to 'on'; this will allow the next "
"nearest :ref:`Viewport <class_Viewport>` in the tree to capture the input."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:48
msgid ""
"For more information on how Godot handles input, please read the :ref:`Input "
"Event Tutorial<doc_inputevent>`."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:51
msgid "Listener"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:53
msgid ""
"Godot supports 3D sound (in both 2D and 3D nodes); more on this can be found "
"in the :ref:`Audio Streams Tutorial<doc_audio_streams>`. For this type of "
"sound to be audible, the :ref:`Viewport <class_Viewport>` needs to be "
"enabled as a listener (for 2D or 3D). If you are using a custom :ref:"
"`Viewport <class_Viewport>` to display your :ref:`World <class_World>`, "
"don't forget to enable this!"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:60
msgid "Cameras (2D & 3D)"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:62
msgid ""
"When using a :ref:`Camera <class_Camera>` / :ref:`Camera2D "
"<class_Camera2D>`, cameras will always display on the closest parent :ref:"
"`Viewport <class_Viewport>` (going towards the root). For example, in the "
"following hierarchy:"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:69
msgid ""
"CameraA will display on the Root :ref:`Viewport <class_Viewport>` and it "
"will draw MeshA. CameraB will be captured by the :ref:`Viewport "
"<class_Viewport>` Node along with MeshB. Even though MeshB is in the scene "
"hierarchy, it will still not be drawn to the Root :ref:`Viewport "
"<class_Viewport>`. Similarly MeshA will not be visible from the :ref:"
"`Viewport <class_Viewport>` node because :ref:`Viewport <class_Viewport>` "
"nodes only capture nodes below them in the hierarchy."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:75
msgid ""
"There can only be one active camera per :ref:`Viewport <class_Viewport>`, so "
"if there is more than one, make sure that the desired one has the "
"\"current\" property set, or make it the current camera by calling:"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:83
msgid ""
"By default, cameras will render all objects in their world. In 3D, cameras "
"can use their :ref:`cull_mask <class_Camera_property_cull_mask>` property "
"combined with the :ref:`VisualInstance's <class_VisualInstance>` :ref:`layer "
"<class_VisualInstance_property_layers>` property to restrict which objects "
"are rendered."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:89
msgid "Scale & stretching"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:91
msgid ""
":ref:`Viewports <class_Viewport>` have a \"size\" property, which represents "
"the size of the :ref:`Viewport <class_Viewport>` in pixels. For :ref:"
"`Viewports <class_Viewport>` which are children of :ref:`ViewportContainers "
"<class_viewportcontainer>`, these values are overridden, but for all others, "
"this sets their resolution."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:95
msgid ""
"It is also possible to scale the 2D content and make the :ref:`Viewport "
"<class_Viewport>` resolution different from the one specified in size, by "
"calling:"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:103
msgid ""
"The root :ref:`Viewport <class_Viewport>` uses this for the stretch options "
"in the project settings. For more information on scaling and stretching "
"visit the :ref:`Multiple Resolutions Tutorial <doc_multiple_resolutions>`"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:107
msgid "Worlds"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:109
msgid ""
"For 3D, a :ref:`Viewport <class_Viewport>` will contain a :ref:`World "
"<class_World>`. This is basically the universe that links physics and "
"rendering together. Spatial-based nodes will register using the :ref:`World "
"<class_World>` of the closest :ref:`Viewport <class_Viewport>`. By default, "
"newly created :ref:`Viewports <class_Viewport>` do not contain a :ref:`World "
"<class_World>` but use the same as their parent :ref:`Viewport "
"<class_Viewport>` (the root :ref:`Viewport <class_Viewport>` always contains "
"a :ref:`World <class_World>`, which is the one objects are rendered to by "
"default). A :ref:`World <class_World>` can be set in a :ref:`Viewport "
"<class_Viewport>` using the \"world\" property, and that will separate all "
"children nodes of that :ref:`Viewport <class_Viewport>` from interacting "
"with the parent :ref:`Viewport's <class_Viewport>` :ref:`World "
"<class_World>`. This is especially useful in scenarios where, for example, "
"you might want to show a separate character in 3D imposed over the game "
"(like in StarCraft)."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:121
msgid ""
"As a helper for situations where you want to create :ref:`Viewports "
"<class_Viewport>` that display single objects and don't want to create a :"
"ref:`World <class_World>`, :ref:`Viewport <class_Viewport>` has the option "
"to use its own :ref:`World <class_World>`. This is useful when you want to "
"instance 3D characters or objects in a 2D :ref:`World <class_World2D>`."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:126
msgid ""
"For 2D, each :ref:`Viewport <class_Viewport>` always contains its own :ref:"
"`World2D <class_World2D>`. This suffices in most cases, but in case sharing "
"them may be desired, it is possible to do so by setting the :ref:`Viewport's "
"<class_Viewport>` :ref:`World2D <class_World2D>` manually."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:130
msgid ""
"For an example of how this works, see the demo projects `3D in 2D <https://"
"github.com/godotengine/godot-demo-projects/tree/master/viewport/3d_in_2d>`_ "
"and `2D in 3D <https://github.com/godotengine/godot-demo-projects/tree/"
"master/viewport/2d_in_3d>`_ respectively."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:135
msgid ""
"It is possible to query a capture of the :ref:`Viewport <class_Viewport>` "
"contents. For the root :ref:`Viewport <class_Viewport>`, this is effectively "
"a screen capture. This is done with the following code:"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:152
msgid ""
"But if you use this in ``_ready()`` or from the first frame of the :ref:"
"`Viewport's <class_Viewport>` initialization, you will get an empty texture "
"because there is nothing to get as texture. You can deal with it using (for "
"example):"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:163
msgid "Viewport Container"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:165
msgid ""
"If the :ref:`Viewport <class_Viewport>` is a child of a :ref:"
"`ViewportContainer <class_viewportcontainer>`, it will become active and "
"display anything it has inside. The layout looks like this:"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:169
msgid ""
"The :ref:`Viewport <class_Viewport>` will cover the area of its parent :ref:"
"`ViewportContainer <class_viewportcontainer>` completely if :ref:"
"`Stretch<class_viewportcontainer_property_stretch>` is set to ``true`` in :"
"ref:`ViewportContainer <class_viewportcontainer>`. Note: The size of the :"
"ref:`ViewportContainer <class_viewportcontainer>` cannot be smaller than the "
"size of the :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:176
msgid ""
"Due to the fact that the :ref:`Viewport <class_Viewport>` is an entryway "
"into another rendering surface, it exposes a few rendering properties that "
"can be different from the project settings. The first is MSAA; you can "
"choose to use a different level of MSAA for each :ref:`Viewport "
"<class_Viewport>`; the default behavior is DISABLED. You can also set the :"
"ref:`Viewport <class_Viewport>` to use HDR, HDR is very useful for when you "
"want to store values in the texture that are outside the range 0.0 - 1.0."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:181
msgid ""
"If you know how the :ref:`Viewport <class_Viewport>` is going to be used, "
"you can set its Usage to either 3D or 2D. Godot will then restrict how the :"
"ref:`Viewport <class_Viewport>` is drawn to in accordance with your choice; "
"default is 3D. The 2D usage mode is slightly faster and uses less memory "
"compared to the 3D one. It's a good idea to set the :ref:`Viewport "
"<class_Viewport>`'s Usage property to 2D if your viewport doesn't render "
"anything in 3D."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:187
msgid ""
"If you need to render 3D shadows in the viewport, make sure to set the "
"viewport's *Shadow Atlas Size* property to a value higher than 0. Otherwise, "
"shadows won't be rendered. For reference, the Project Settings define it to "
"4096 by default."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:190
msgid ""
"Godot also provides a way of customizing how everything is drawn inside :ref:"
"`Viewports <class_Viewport>` using “Debug Draw”. Debug Draw allows you to "
"specify one of four options for how the :ref:`Viewport <class_Viewport>` "
"will display things drawn inside it. Debug Draw is disabled by default."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:196
msgid "*A scene drawn with Debug Draw disabled*"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:198
msgid ""
"The other three options are Unshaded, Overdraw, and Wireframe. Unshaded "
"draws the scene without using lighting information so all the objects appear "
"flatly colored the color of their albedo."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:204
msgid "*The same scene with Debug Draw set to Unshaded*"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:206
msgid ""
"Overdraw draws the meshes semi-transparent with an additive blend so you can "
"see how the meshes overlap."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:210
msgid "*The same scene with Debug Draw set to Overdraw*"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:212
msgid ""
"Lastly, Wireframe draws the scene using only the edges of triangles in the "
"meshes."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:216
msgid ""
"The effects of the Wireframe mode are only visible in the editor, not while "
"the project is running."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:219
msgid "Render target"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:221
msgid ""
"When rendering to a :ref:`Viewport <class_Viewport>`, whatever is inside "
"will not be visible in the scene editor. To display the contents, you have "
"to draw the :ref:`Viewport's <class_Viewport>` :ref:`ViewportTexture "
"<class_ViewportTexture>` somewhere. This can be requested via code using "
"(for example):"
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:231
msgid ""
"Or it can be assigned in the editor by selecting \"New ViewportTexture\""
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:235
msgid ""
"and then selecting the :ref:`Viewport <class_Viewport>` you want to use."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:239
msgid ""
"Every frame, the :ref:`Viewport <class_Viewport>`'s texture is cleared away "
"with the default clear color (or a transparent color if :ref:`Transparent "
"Bg<class_Viewport_property_transparent_bg>` is set to ``true``). This can be "
"changed by setting :ref:`Clear "
"Mode<class_Viewport_property_render_target_clear_mode>` to Never or Next "
"Frame. As the name implies, Never means the texture will never be cleared, "
"while next frame will clear the texture on the next frame and then set "
"itself to Never."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:244
msgid ""
"By default, re-rendering of the :ref:`Viewport <class_Viewport>` happens "
"when the :ref:`Viewport <class_Viewport>`'s :ref:`ViewportTexture "
"<class_ViewportTexture>` has been drawn in a frame. If visible, it will be "
"rendered; otherwise, it will not. This behavior can be changed to manual "
"rendering (once), or always render, no matter if visible or not. This "
"flexibility allows users to render an image once and then use the texture "
"without incurring the cost of rendering every frame."
msgstr ""

#: ../../docs/tutorials/rendering/viewports.rst:252
msgid ""
"Make sure to check the Viewport demos! Viewport folder in the demos archive "
"available to download, or https://github.com/godotengine/godot-demo-projects/"
"tree/master/viewport"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:4
msgid "Multiple resolutions"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:7
msgid "The problem of multiple resolutions"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:9
msgid ""
"Developers often have trouble understanding how to best support multiple "
"resolutions in their games. For desktop and console games, this is more or "
"less straightforward, as most screen aspect ratios are 16:9 and resolutions "
"are standard (720p, 1080p, 1440p, 4K, …)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:14
msgid ""
"For mobile games, at first, it was easy. For many years, the iPhone and iPad "
"used the same resolution. When *Retina* was implemented, they just doubled "
"the pixel density; most developers had to supply assets in default and "
"double resolutions."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:19
msgid ""
"Nowadays, this is no longer the case, as there are plenty of different "
"screen sizes, densities, and aspect ratios. Non-conventional sizes are also "
"becoming increasingly popular, such as ultrawide displays."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:23
msgid ""
"For 3D games, there is not much of a need to support multiple resolutions "
"(from the aesthetic point of view). The 3D geometry will just fill the "
"screen based on the field of view, disregarding the aspect ratio. The main "
"reason one may want to support this, in this case, is for *performance* "
"reasons (running in lower resolution to increase frames per second)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:29
msgid ""
"For 2D and game UIs, this is a different matter, as art needs to be created "
"using specific pixel sizes in software such as Photoshop, GIMP or Krita."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:32
msgid ""
"Since layouts, aspect ratios, resolutions, and pixel densities can change so "
"much, it is no longer possible to design UIs for every specific screen. "
"Another method must be used."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:37
msgid "One size fits all"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:39
msgid ""
"The most common approach is to use a single *base* resolution and then fit "
"it to everything else. This resolution is how most players are expected to "
"play the game (given their hardware). For mobile, Google has useful `stats "
"<https://developer.android.com/about/dashboards>`_ online, and for desktop, "
"Steam `also does <https://store.steampowered.com/hwsurvey/>`_."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:45
msgid ""
"As an example, Steam shows that the most common *primary display resolution* "
"is 1920×1080, so a sensible approach is to develop a game for this "
"resolution, then handle scaling for different sizes and aspect ratios."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:49
msgid "Godot provides several useful tools to do this easily."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:52
msgid "Base size"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:54
msgid ""
"A base size for the window can be specified in the Project Settings under "
"**Display → Window**."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:59
msgid ""
"However, what it does is not completely obvious; the engine will *not* "
"attempt to switch the monitor to this resolution. Rather, think of this "
"setting as the \"design size\", i.e. the size of the area that you work with "
"in the editor. This setting corresponds directly to the size of the blue "
"rectangle in the 2D editor."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:65
msgid ""
"There is often a need to support devices with screen and window sizes that "
"are different from this base size. Godot offers many ways to control how the "
"viewport will be resized and stretched to different screen sizes."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:72
msgid ""
"Godot follows a modern approach to multiple resolutions. The engine will "
"never change the monitor's resolution on its own. While changing the "
"monitor's resolution is the most efficient approach, it's also the least "
"reliable approach as it can leave the monitor stuck on a low resolution if "
"the game crashes. This is especially common on macOS or Linux which don't "
"handle resolution changes as well as Windows."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:79
msgid ""
"Changing the monitor's resolution also removes any control from the game "
"developer over filtering and aspect ratio stretching, which can be important "
"to ensure correct display for pixel art games."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:83
msgid ""
"On top of that, changing the monitor's resolution makes alt-tabbing in and "
"out of a game much slower since the monitor has to change resolutions every "
"time this is done."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:88
msgid "Resizing"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:90
msgid ""
"There are several types of devices, with several types of screens, which in "
"turn have different pixel density and resolutions. Handling all of them can "
"be a lot of work, so Godot tries to make the developer's life a little "
"easier. The :ref:`Viewport <class_Viewport>` node has several functions to "
"handle resizing, and the root node of the scene tree is always a viewport "
"(scenes loaded are instanced as a child of it, and it can always be accessed "
"by calling ``get_tree().get_root()`` or ``get_node(\"/root\")``)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:99
msgid ""
"In any case, while changing the root Viewport params is probably the most "
"flexible way to deal with the problem, it can be a lot of work, code and "
"guessing, so Godot provides a simple set of parameters in the project "
"settings to handle multiple resolutions."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:105
msgid "Stretch settings"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:107
msgid ""
"Stretch settings are located in the project settings and provide several "
"options:"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:112
msgid "Stretch Mode"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:114
msgid ""
"The **Stretch Mode** setting defines how the base size is stretched to fit "
"the resolution of the window or screen."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:119
msgid ""
"The animations below use a \"base size\" of just 16×9 pixels to demonstrate "
"the effect of different stretch modes. A single sprite, also 16×9 pixels in "
"size, covers the entire viewport, and a diagonal :ref:`Line2D "
"<class_Line2D>` is added on top of it:"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:129
msgid ""
"**Stretch Mode = Disabled** (default): No stretching happens. One unit in "
"the scene corresponds to one pixel on the screen. In this mode, the "
"**Stretch Aspect** setting has no effect."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:135
msgid ""
"**Stretch Mode = 2D**: In this mode, the base size specified in width and "
"height in the project settings is stretched to cover the whole screen "
"(taking the **Stretch Aspect** setting into account). This means that "
"everything is rendered directly at the target resolution. 3D is unaffected, "
"while in 2D, there is no longer a 1:1 correspondence between sprite pixels "
"and screen pixels, which may result in scaling artifacts."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:145
msgid ""
"**Stretch Mode = Viewport**: Viewport scaling means that the size of the "
"root :ref:`Viewport <class_Viewport>` is set precisely to the base size "
"specified in the Project Settings' **Display** section. The scene is "
"rendered to this viewport first. Finally, this viewport is scaled to fit the "
"screen (taking the **Stretch Aspect** setting into account)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:155
msgid "Stretch Aspect"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:157
msgid ""
"The second setting is the stretch aspect. Note that this only takes effect "
"if **Stretch Mode** is set to something other than **Disabled**."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:160
msgid ""
"In the animations below, you will notice gray and black areas. The black "
"areas are added by the engine and cannot be drawn into. The gray areas are "
"part of your scene, and can be drawn to. The gray areas correspond to the "
"region outside the blue frame you see in the 2D editor."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:165
msgid ""
"**Stretch Aspect = Ignore**: Ignore the aspect ratio when stretching the "
"screen. This means that the original resolution will be stretched to exactly "
"fill the screen, even if it's wider or narrower. This may result in "
"nonuniform stretching: things looking wider or taller than designed."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:173
msgid ""
"**Stretch Aspect = Keep**: Keep aspect ratio when stretching the screen. "
"This means that the viewport retains its original size regardless of the "
"screen resolution, and black bars will be added to the top/bottom of the "
"screen (\"letterboxing\") or the sides (\"pillarboxing\")."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:179
msgid ""
"This is a good option if you know the aspect ratio of your target devices in "
"advance, or if you don't want to handle different aspect ratios."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:185
msgid ""
"**Stretch Aspect = Keep Width**: Keep aspect ratio when stretching the "
"screen. If the screen is wider than the base size, black bars are added at "
"the left and right (pillarboxing). But if the screen is taller than the base "
"resolution, the viewport will be grown in the vertical direction (and more "
"content will be visible to the bottom). You can also think of this as "
"\"Expand Vertically\"."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:192
msgid ""
"This is usually the best option for creating GUIs or HUDs that scale, so "
"some controls can be anchored to the bottom (:ref:`doc_size_and_anchors`)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:198
msgid ""
"**Stretch Aspect = Keep Height**: Keep aspect ratio when stretching the "
"screen. If the screen is taller than the base size, black bars are added at "
"the top and bottom (letterboxing). But if the screen is wider than the base "
"resolution, the viewport will be grown in the horizontal direction (and more "
"content will be visible to the right). You can also think of this as "
"\"Expand Horizontally\"."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:205
msgid ""
"This is usually the best option for 2D games that scroll horizontally (like "
"runners or platformers)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:210
msgid ""
"**Stretch Aspect = Expand**: Keep aspect ratio when stretching the screen, "
"but keep neither the base width nor height. Depending on the screen aspect "
"ratio, the viewport will either be larger in the horizontal direction (if "
"the screen is wider than the base size) or in the vertical direction (if the "
"screen is taller than the original size)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:221
msgid ""
"To support both portrait and landscape mode with a similar automatically "
"determined scale factor, set your project's base resolution to be a *square* "
"(1:1 aspect ratio) instead of a rectangle. For instance, if you wish to "
"design for 1280×720 as the base resolution but wish to support both portrait "
"and landscape mode, use 720×720 as the project's base window size in the "
"Project Settings."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:228
msgid ""
"To allow the user to choose their preferred screen orientation at run-time, "
"remember to set **Display > Window > Handheld > Orientation** to ``sensor``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:232
msgid "Stretch Shrink"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:234
msgid ""
"The **Shrink** setting allows you to add an extra scaling factor on top of "
"what the **Stretch** options above already provide. The default value of 1 "
"means that no scaling occurs."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:238
msgid ""
"If, for example, you set **Shrink** to 4 and leave **Stretch Mode** on "
"**Disabled**, each unit in your scene will correspond to 4×4 pixels on the "
"screen."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:242
msgid ""
"If **Stretch Mode** is set to something other than **Disabled**, the size of "
"the root viewport is scaled down by the **Shrink** factor, and pixels in the "
"output are scaled up by the same amount. This is rarely useful for 2D games, "
"but can be used to increase performance in 3D games by rendering them at a "
"lower resolution."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:249
msgid "From scripts"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:251
msgid ""
"To configure stretching at runtime from a script, use the ``get_tree()."
"set_screen_stretch()`` method (see :ref:`SceneTree.set_screen_stretch() "
"<class_SceneTree_method_set_screen_stretch>`)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:256
msgid "Common use case scenarios"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:258
msgid ""
"The following settings are recommended to support multiple resolutions and "
"aspect ratios well."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:262
msgid "Desktop game"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:264
msgid "**Non-pixel art:**"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:266
msgid ""
"Set the base window width to ``1920`` and window height to ``1080``. If you "
"have a display smaller than 1920×1080, set **Test Width** and **Test "
"Height** to lower values to make the window smaller when the project starts."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:269
msgid ""
"Alternatively, if you're targeting high-end devices primarily, set the base "
"window width to ``3840`` and window height to ``2160``. This allows you to "
"provide higher resolution 2D assets, resulting in crisper visuals at the "
"cost of higher memory usage and file sizes. Note that this will make non-"
"mipmapped textures grainy on low resolution devices, so make sure to follow "
"the instructions described in :ref:"
"`doc_multiple_resolutions_reducing_aliasing_on_downsampling`."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:276
#: ../../docs/tutorials/rendering/multiple_resolutions.rst:323
#: ../../docs/tutorials/rendering/multiple_resolutions.rst:342
msgid "Set the stretch mode to ``2d``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:277
#: ../../docs/tutorials/rendering/multiple_resolutions.rst:324
#: ../../docs/tutorials/rendering/multiple_resolutions.rst:343
msgid ""
"Set the stretch aspect to ``expand``. This allows for supporting multiple "
"aspect ratios and makes better use of tall smartphone displays (such as 18:9 "
"or 19:9 aspect ratios)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:279
#: ../../docs/tutorials/rendering/multiple_resolutions.rst:326
#: ../../docs/tutorials/rendering/multiple_resolutions.rst:345
msgid ""
"Configure Control nodes' anchors to snap to the correct corners using the "
"**Layout** menu."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:281
msgid "**Pixel art:**"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:283
msgid ""
"Set the base window size to the viewport size you intend to use. Most pixel "
"art games use viewport sizes between 256×224 and 640×480. Higher viewport "
"sizes will require using higher resolution artwork, unless you intend to "
"show more of the game world at a given time."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:287
msgid "Set the stretch mode to ``viewport``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:288
msgid ""
"Set the stretch aspect to ``keep`` to enforce a single aspect ratio (with "
"black bars). As an alternative, you can set the stretch aspect to ``expand`` "
"to support multiple aspect ratios."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:291
msgid ""
"If using the ``expand`` stretch aspect, Configure Control nodes' anchors to "
"snap to the correct corners using the **Layout** menu."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:296
msgid ""
"The ``viewport`` stretch mode provides low-resolution rendering that is then "
"stretched to the final window size. If you are OK with sprites being able to "
"move or rotate in \"sub-pixel\" positions or wish to have a high resolution "
"3D viewport, you should use the ``2d`` stretch mode instead of the "
"``viewport`` stretch mode."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:302
msgid ""
"Godot currently doesn't have a way to enforce integer scaling when using the "
"``2d`` or ``viewport`` stretch mode, which means pixel art may look bad if "
"the final window size is not a multiple of the base window size. To fix "
"this, use an add-on such as the `Integer Resolution Handler <https://github."
"com/Yukitty/godot-addon-integer_resolution_handler>`__."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:308
msgid "Mobile game in landscape mode"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:310
msgid ""
"Godot is configured to use landscape mode by default. This means you don't "
"need to change the display orientation project setting."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:313
msgid "Set the base window width to ``1280`` and window height to ``720``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:314
msgid ""
"Alternatively, if you're targeting high-end devices primarily, set the base "
"window width to ``1920`` and window height to ``1080``. This allows you to "
"provide higher resolution 2D assets, resulting in crisper visuals at the "
"cost of higher memory usage and file sizes. Many devices have even higher "
"resolution displays (1440p), but the difference with 1080p is barely visible "
"given the small size of smartphone displays. Note that this will make non-"
"mipmapped textures grainy on low resolution devices, so make sure to follow "
"the instructions described in :ref:"
"`doc_multiple_resolutions_reducing_aliasing_on_downsampling`."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:329
msgid "Mobile game in portrait mode"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:331
msgid "Set the base window width to ``720`` and window height to ``1080``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:332
msgid ""
"Alternatively, if you're targeting high-end devices primarily, set the base "
"window width to ``1080`` and window height to ``1920``. This allows you to "
"provide higher resolution 2D assets, resulting in crisper visuals at the "
"cost of higher memory usage and file sizes. Many devices have even higher "
"resolution displays (1440p), but the difference with 1080p is barely visible "
"given the small size of smartphone displays. Note that this will make non-"
"mipmapped textures grainy on low resolution devices, so make sure to follow "
"the instructions described in :ref:"
"`doc_multiple_resolutions_reducing_aliasing_on_downsampling`."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:341
msgid "Set **Display > Window > Handheld > Orientation** to ``portrait``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:348
msgid "Non-game application"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:350
msgid ""
"Set the base window width and height to the smallest window size that you "
"intend to target. This is not required, but this ensures that you design "
"your UI with small window sizes in mind."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:352
msgid "Keep the stretch mode to its default value, ``disabled``."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:353
msgid ""
"Keep the stretch aspect to its default value, ``ignore`` (its value won't be "
"used since the stretch mode is ``disabled``)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:355
msgid ""
"You can define a minimum window size by setting ``OS.min_window_size`` in a "
"script's ``_ready()`` function. This prevents the user from resizing the "
"application below a certain size, which could break the UI layout."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:361
msgid ""
"Godot doesn't support manually overriding the 2D scale factor yet, so it is "
"not possible to have hiDPI support in non-game applications. Due to this, it "
"is recommended to leave **Allow Hidpi** disabled in non-game applications to "
"allow for the OS to use its low-DPI fallback."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:367
msgid "hiDPI support"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:369
msgid ""
"By default, Godot projects aren't considered DPI-aware by the operating "
"system. This is done to improve performance on low-end systems, since the "
"operating system's DPI fallback scaling will be faster than letting the "
"application scale itself (even when using the ``viewport`` stretch mode)."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:374
msgid ""
"However, the OS-provided DPI fallback scaling doesn't play well with "
"fullscreen mode. If you want crisp visuals on hiDPI displays or if project "
"uses fullscreen, it's recommended to enable **Display > Window > Dpi > Allow "
"Hidpi** in the Project Settings."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:379
msgid ""
"**Allow Hidpi** is only effective on Windows and macOS. It's ignored on all "
"other platforms."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:384
msgid ""
"The Godot editor itself is always marked as DPI-aware. Running the project "
"from the editor will only be DPI-aware if **Allow Hidpi** is enabled in the "
"Project Settings."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:391
msgid "Reducing aliasing on downsampling"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:393
msgid ""
"If the game has a very high base resolution (e.g. 3840×2160), aliasing might "
"appear when downsampling to something considerably lower like 1280×720. "
"Aliasing can be made less visible by shrinking all images by a factor of 2 "
"upon loading. This can be done by calling the method below before the game "
"data is loaded::"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:401
msgid ""
"Alternatively, you can also enable mipmaps on all your 2D textures. However, "
"enabling mipmaps will increase memory usage which may be problematic on low-"
"end mobile devices."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:406
msgid "Handling aspect ratios"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:408
msgid ""
"Once scaling for different resolutions is accounted for, make sure that your "
"*user interface* also scales for different aspect ratios. This can be done "
"using :ref:`anchors <doc_size_and_anchors>` and/or :ref:`containers "
"<doc_gui_containers>`."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:414
msgid "Field of view scaling"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:416
msgid ""
"The 3D Camera node's **Keep Aspect** property defaults to the **Keep "
"Height** scaling mode (also called *Hor+*). This is usually the best value "
"for desktop games and mobile games in landscape mode, as widescreen displays "
"will automatically use a wider field of view."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:421
msgid ""
"However, if your 3D game is intended to be played in portrait mode, it may "
"make more sense to use **Keep Width** instead (also called *Vert-*). This "
"way, smartphones with an aspect ratio taller than 16:9 (e.g. 19:9) will use "
"a *taller* field of view, which is more logical here."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:427
msgid "Scaling 2D and 3D elements differently using Viewports"
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:429
msgid ""
"Using multiple Viewport nodes, you can have different scales for various "
"elements. For instance, you can use this to render the 3D world at a low "
"resolution while keeping 2D elements at the native resolution. This can "
"improve performance significantly while keeping the HUD and other 2D "
"elements crisp."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:434
msgid ""
"This is done by using the root Viewport node only for 2D elements, then "
"creating a Viewport node to display the 3D world and displaying it using a "
"ViewportContainer or TextureRect node. There will effectively be two "
"viewports in the final project. One upside of using TextureRect over "
"ViewportContainer is that it allows enable linear filtering. This makes "
"scaled 3D viewports look better in many cases."
msgstr ""

#: ../../docs/tutorials/rendering/multiple_resolutions.rst:441
msgid ""
"See the `3D viewport scaling demo <https://github.com/godotengine/godot-demo-"
"projects/tree/master/viewport/3d_scaling>`__ for examples."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:4
msgid "Fixing jitter and stutter"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:7
msgid "What are jitter and stutter?"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:9
msgid ""
"*Jitter* and *stutter* are two different alterations to visible motion of "
"objects on screen that may affect a game, even when running at full speed. "
"These effects are mostly visible in games where the world moves at a "
"constant speed in a fixed direction, like runners or platformers."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:14
msgid "Distinguishing between them"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:16
msgid ""
"A game running at a normal framerate without exhibiting any effect will "
"appear smooth:"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:20
msgid "A game exhibiting *jitter* will shake constantly in a very subtle way:"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:24
msgid ""
"Finally, a game exhibiting *stutter* will appear smooth, but appear to "
"*stop* or *roll back a frame* every few seconds:"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:30
msgid "Jitter"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:32
msgid ""
"There can be many causes of jitter, the most typical one happens when the "
"game *physics frequency* (usually 60 Hz) runs at a different resolution than "
"the monitor refresh rate. Check whether your monitor refresh rate is "
"different from 60 Hz."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:35
msgid ""
"This is generally not a problem, given that most monitors are 60 Hz, and "
"starting with Godot 3.1, a frame timer was introduced that tries to "
"synchronize with refresh as well as possible."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:38
msgid ""
"Sometimes only some objects appear to jitter (character or background). This "
"happens when they are processed in different time sources (one is processed "
"in the physics step while another is processed in the idle step). Godot 3.1 "
"does some improvements to this, from allowing kinematic bodies to be "
"animated in the regular _process loop, to further fixes in the frame timer."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:45
msgid ""
"You can use physics interpolation to mitigate physics-related jittering. See "
"`lawnjelly's smoothing-addon <https://github.com/lawnjelly/smoothing-"
"addon>`__ for an add-on that can be dropped into any project to enable "
"physics interpolation."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:50
msgid "Stutter"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:52
msgid ""
"Stutter may happen due to two different reasons. The first, and most obvious "
"one, is the game not being able to keep full framerate performance. Solving "
"this is game specific and will require optimization."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:55
msgid ""
"The second is more complicated, because it is often not associated to the "
"engine or game but the underlying operating system. Here is some information "
"regarding stutter on different OSs."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:61
msgid ""
"Windows is known to cause stutter in windowed games. This mostly depends on "
"the hardware installed, drivers version and processes running in parallel (e."
"g. having many browser tabs open may cause stutter in a running game). To "
"avoid this, starting with 3.1, Godot raises the game priority to \"Above "
"Normal\". This helps considerably but may not completely eliminate stutter."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:66
msgid ""
"Eliminating this completely requires giving your game full privileges to "
"become \"time critical\", which is not advised. Some games may do it, but it "
"is advised to learn to live with this problem, as it is common for Windows "
"games and most users won't play games windowed (games that are played in a "
"window, e.g. puzzle games, will usually not exhibit this problem anyway)."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:70
msgid ""
"For fullscreen, Windows gives special priority to the game so stutter is no "
"longer visible and very rare. This is how most games are played."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:74
msgid "Linux (X11)"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:76
msgid ""
"Stutter may be visible on Desktop Linux, but this is usually associated with "
"different video drivers and compositors. Nouveau drivers often exhibit this, "
"while AMD or NVidia proprietary don't. Some compositors may also trigger "
"this problem (e.g. KWin), so it is advised to try using a different one to "
"rule it out as the cause."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:80
msgid ""
"There is no workaround for driver or compositor stuttering other than "
"reporting it as an issue to the driver or compositor developers."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:86
msgid ""
"Generally, macOS is stutter-free, although recently some bugs were reported "
"when running on fullscreen (this is a macOS bug). If you have a machine "
"exhibiting this behavior, please let us know."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:92
msgid ""
"Generally, Android is stutter and jitter-free because the running activity "
"gets all the priority. That said, there may be problematic devices (older "
"Kindle Fire is known to be one). If you see this problem on Android, please "
"let us know."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:98
msgid ""
"iOS devices are generally stutter-free, but older devices running newer "
"versions of the operating system may exhibit problems. This is generally "
"unavoidable."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:102
msgid "Reporting stutter or jitter problems"
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:104
msgid ""
"If you are reporting a stutter or jitter problem (opening an issue) not "
"caused by any of the above reasons, please specify very clearly all the "
"information possible about device, operating system, driver versions, etc. "
"This may help to better troubleshoot it."
msgstr ""

#: ../../docs/tutorials/rendering/jitter_stutter.rst:107
msgid ""
"Also make sure to use the correct term (jitter or stutter) based on the "
"exhibited behavior. This will help understand your issue much faster. "
"Provide a project that can be used to reproduce the issue, and if possible a "
"screen capture demonstrating the bug."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:4
msgid "Differences between GLES2 and GLES3"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:6
msgid ""
"This page documents the differences between GLES2 and GLES3 that are by "
"design and are not the result of bugs. There may be differences that are "
"unintentional, but they should be reported as bugs."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:9
msgid ""
"\"GLES2\" and \"GLES3\" are the names used in Godot for the two OpenGL-based "
"rendering backends. In terms of graphics APIs, the GLES2 backend maps to "
"OpenGL 2.1 on desktop, OpenGL ES 2.0 on mobile and WebGL 1.0 on the web. The "
"GLES3 backend maps to OpenGL 3.3 on desktop, OpenGL ES 3.0 on mobile and "
"WebGL 2.0 on the web."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:15
msgid "Particles"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:17
msgid ""
"GLES2 cannot use the :ref:`Particles <class_Particles>` or :ref:`Particles2D "
"<class_Particles2D>` nodes as they require advanced GPU features. Instead, "
"use :ref:`CPUParticles <class_CPUParticles>` or :ref:`CPUParticles2D "
"<class_CPUParticles2D>`, which provides a similar interface to a :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:22
msgid ""
"Particles and Particles2D can be converted to their CPU equivalent node with "
"the \"Convert to CPUParticles\" option in the editor."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:26
msgid "``SCREEN_TEXTURE`` mip-maps"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:28
msgid ""
"In GLES2, ``SCREEN_TEXTURE`` (accessed via a :ref:`ShaderMaterial "
"<class_ShaderMaterial>`) does not have computed mip-maps. So when accessing "
"at a different LOD, the texture will not appear blurry."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:32
msgid "``DEPTH_TEXTURE``"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:34
msgid ""
"While GLES2 supports ``DEPTH_TEXTURE`` in shaders, it may not work on some "
"old hardware (especially mobile)."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:37
msgid "Color space"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:39
msgid ""
"GLES2 and GLES3 are in different color spaces. This means that colors will "
"appear slightly different between them especially when lighting is used."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:42
msgid ""
"If your game is going to use both GLES2 and GLES3, you can use an ``if`` "
"statement check and see if the output is in sRGB, using ``OUTPUT_IS_SRGB``. "
"``OUTPUT_IS_SRGB`` is ``true`` in GLES2 and ``false`` in GLES3."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:47
msgid "HDR"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:49
msgid ""
"GLES2 is not capable of using High Dynamic Range (HDR) rendering features. "
"If HDR is set for your project, or for a given viewport, Godot will still "
"use Low Dynamic Range (LDR) which limits viewport values to the ``0-1`` "
"range."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:53
msgid ""
"The Viewport **Debanding** property and associated project setting will also "
"have no effect when HDR is disabled. This means debanding can't be used in "
"GLES2."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:57
msgid "SpatialMaterial features"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:59
msgid ""
"In GLES2, the following advanced rendering features in the :ref:"
"`SpatialMaterial <class_SpatialMaterial>` are missing:"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:62
msgid "Subsurface scattering"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:65
msgid "Depth mapping"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:67
msgid "When using SpatialMaterials they will not even appear in the editor."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:69
msgid ""
"In custom :ref:`ShaderMaterials <class_ShaderMaterial>`, you can set values "
"for these features but they will be non-functional. For example, you will "
"still be able to set the ``SSS`` built-in (which normally adds subsurface "
"scattering) in your shader, but nothing will happen."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:74
msgid "Environment features"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:76
msgid ""
"In GLES2, the following features in the :ref:`Environment "
"<class_Environment>` are missing:"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:78
msgid "Auto exposure"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:79
msgid "Tonemapping"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:80
msgid "Screen space reflections"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:81
msgid "Screen space ambient occlusion"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:83
msgid "That means that in GLES2 environments you can only set:"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:85
msgid "Sky (including procedural sky)"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:86
msgid "Ambient light"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:88
msgid "Depth of field"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:89
msgid "Glow (also known as bloom)"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:90
msgid "Adjustment"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:93
msgid "GIProbes"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:95
msgid ""
":ref:`GIProbes <class_GIProbe>` do not work in GLES2. Instead use :ref:"
"`Baked Lightmaps <class_BakedLightmap>`. For a description of how baked "
"lightmaps work see the :ref:`Baked Lightmaps tutorial <doc_baked_lightmaps>`."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:99
msgid "Contact shadows"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:101
msgid ""
"The ``shadow_contact`` property of :ref:`Lights <class_Light>` is not "
"supported in GLES2 and so does nothing."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:104
msgid "Light performance"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:106
msgid ""
"In GLES2, performance scales poorly with several lights, as each light is "
"processed in a separate render pass (in opposition to GLES3 which is all "
"done in a single pass). Try to limit scenes to as few lights as possible in "
"order to achieve greatest performance."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:113
msgid ""
"On mobile, GLES2 requires ETC texture compression, while GLES3 requires "
"ETC2. ETC2 is enabled by default, so if exporting to mobile using GLES2 make "
"sure to set the project setting ``rendering/vram_compression/import_etc`` "
"and then reimport textures."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:119
msgid ""
"Since ETC doesn't support transparency, you must reimport textures that "
"contain an alpha channel to use the Uncompressed, Lossy or Lossless "
"compression mode (instead of Video RAM). This can be done in the Import dock "
"after selecting them in the FileSystem dock."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:125
msgid "Blend shapes"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:127
msgid ""
"In GLES2, blend shapes are implemented on the CPU instead of the GPU. "
"Accordingly, they may not perform as well as blend shapes in GLES3. To avoid "
"performance issues when using blend shapes in GLES2, try to minimize the "
"number of blend shapes that are updated each frame."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:133
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:4
msgid "Shading language"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:135
msgid ""
"GLES3 provides many built-in functions that GLES2 does not. Below is a list "
"of functions that are not available or are have limited support in GLES2."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:138
msgid ""
"For a complete list of built-in GLSL functions see the :ref:`Shading "
"Language doc <doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:141
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:644
msgid "Function"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:143
msgid "vec_type **modf** ( vec_type x, out vec_type i )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:145
msgid "vec_int_type **floatBitsToInt** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:147
msgid "vec_uint_type **floatBitsToUint** ( vec_type x )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:149
msgid "vec_type **intBitsToFloat** ( vec_int_type x )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:151
msgid "vec_type **uintBitsToFloat** ( vec_uint_type x )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:153
msgid "ivec2 **textureSize** ( sampler2D_type s, int lod )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:153
#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:155
msgid "See workaround below"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:155
msgid "ivec2 **textureSize** ( samplerCube s, int lod )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:157
msgid "vec4_type **texture** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:157
msgid "**bias** not available in vertex shader"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:159
msgid ""
"vec4_type **textureProj** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:161
msgid "vec4_type **textureLod** ( sampler_type s, vec_type uv, float lod )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:161
msgid "Only available in vertex shader on some hardware"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:163
msgid "vec4_type **textureProjLod** ( sampler_type s, vec_type uv, float lod )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:165
msgid ""
"vec4_type **textureGrad** ( sampler_type s, vec_type uv, vec_type dPdx, "
"vec_type dPdy )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:167
msgid "vec_type **dFdx** ( vec_type p )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:169
msgid "vec_type **dFdy** ( vec_type p )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:171
msgid "vec_type **fwidth** ( vec_type p )"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:174
msgid ""
"Functions not in GLES2's GLSL were added with Godots own shader standard "
"library. These functions may perform worse in GLES2 compared to GLES3."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:177
msgid "``textureSize()`` workaround"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:179
msgid ""
"GLES2 does not support ``textureSize()``. You can get the size of a texture "
"the old fashioned way by passing in a uniform with the texture size yourself."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:195
msgid "Built in variables and render modes"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:197
msgid ""
"Godot also provides many built-in variables and render modes. Some cannot be "
"supported in GLES2. Below is a list of built-in variables and render modes "
"that, when written to, will have no effect or could even cause issues when "
"using the GLES2 backend."
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:202
msgid "Variable / Render Mode"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:204
msgid "``ensure_correct_normals``"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:206
msgid "``INSTANCE_ID``"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:208
msgid "``DEPTH``"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:210
msgid "``ANISOTROPY``"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:212
msgid "``ANISOTROPY_FLOW``"
msgstr ""

#: ../../docs/tutorials/rendering/gles2_gles3_differences.rst:214
msgid "``SSS_STRENGTH``"
msgstr ""

#: ../../docs/tutorials/scripting/index.rst:4
msgid ""
"This section covers programming languages and core features to code your "
"games in Godot."
msgstr ""

#: ../../docs/tutorials/scripting/index.rst:7
msgid ""
"Here, you will find information that is not already covered in more specific "
"sections. For instance, to learn about inputs, we recommend you to read :ref:"
"`Inputs <toc-learn-features-inputs>`."
msgstr ""

#: ../../docs/tutorials/scripting/index.rst:14
msgid ""
"The sections below each focus on a given programming language or, in "
"GDNative's case, an interface that works with multiple languages."
msgstr ""

#: ../../docs/tutorials/scripting/index.rst:27
msgid "Core features"
msgstr ""

#: ../../docs/tutorials/scripting/index.rst:29
msgid ""
"Some features are specific to the engine and are available in all supported "
"languages. Whether you code in GDScript, C#, or another language, the pages "
"below will help you make the most of Godot."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/index.rst:18
msgid ""
"See :ref:`doc_gdscript_grammar` if you are interested in writing a third-"
"party tool that interacts with GDScript, such as a linter or formatter."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:4
msgid "GDScript basics"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:9
msgid ""
"*GDScript* is a high-level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:21
msgid ""
"Documentation about GDScript's history has been moved to the :ref:"
"`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:25
msgid "Example of GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:27
msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:110
msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:115
#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:16
msgid "Language"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:117
msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:122
msgid "Identifiers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:124
msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:130
msgid "Keywords"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:132
msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:137
msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:141
msgid "Keyword"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:143
msgid "if"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:143
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:145
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:147
msgid "See `if/else/elif`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:145
msgid "elif"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:147
msgid "else"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:149
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:888
msgid "for"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:149
msgid "See for_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:151
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:877
msgid "while"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:151
msgid "See while_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:153
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:923
msgid "match"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:153
msgid "See match_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:155
msgid "break"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:155
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:157
msgid "continue"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:157
msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:159
msgid "pass"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:159
msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:161
msgid "return"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:161
msgid "Returns a value from a function."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:163
msgid "class"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:163
msgid "Defines an inner class."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:165
msgid "class_name"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:165
msgid "Defines a class name and optional icon for your script."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:167
msgid "extends"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:167
msgid "Defines what class to extend with the current class."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:169
msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:171
msgid "as"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:171
msgid "Cast the value to a given type if possible."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:173
msgid "self"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:173
msgid "Refers to current class instance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:175
msgid "tool"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:175
msgid "Executes the script in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:177
msgid "signal"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:177
msgid "Defines a signal."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:179
msgid "func"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:179
msgid "Defines a function."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:181
msgid "static"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:181
msgid "Defines a static function. Static member variables are not allowed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:183
msgid "const"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:183
msgid "Defines a constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:185
msgid "enum"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:185
msgid "Defines an enum."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:187
msgid "var"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:187
msgid "Defines a variable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:189
msgid "onready"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:189
msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:191
msgid "export"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:191
msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:193
msgid "setget"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:193
msgid "Defines setter and getter functions for a variable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:195
msgid "breakpoint"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:195
msgid "Editor helper for debugger breakpoints."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:197
msgid "preload"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:197
msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:199
msgid "yield"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:199
msgid "Coroutine support. See `Coroutines with yield`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:201
msgid "assert"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:201
msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:203
msgid "remote"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:203
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:205
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:207
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:209
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:211
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:213
msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:205
msgid "master"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:207
msgid "puppet"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:209
msgid "remotesync"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:211
msgid "mastersync"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:213
msgid "puppetsync"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:215
msgid "PI"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:215
msgid "PI constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:217
msgid "TAU"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:217
msgid "TAU constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:219
msgid "INF"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:219
msgid "Infinity constant. Used for comparisons."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:221
msgid "NAN"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:221
msgid "NAN (not a number) constant. Used for comparisons."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:225
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:470
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:297
msgid "Operators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:227
msgid "The following is the list of supported operators and their precedence."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:230
msgid "**Operator**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:232
msgid "``x[index]``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:232
msgid "Subscription (highest priority)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:234
msgid "``x.attribute``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:234
msgid "Attribute reference"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:236
msgid "``foo()``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:236
msgid "Function call"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:238
msgid "``is``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:238
msgid "Instance type checker"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:240
msgid "``~``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:240
msgid "Bitwise NOT"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:242
msgid "``-x``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:242
msgid "Negative / Unary negation"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:244
msgid "``*`` ``/`` ``%``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:244
msgid "Multiplication / Division / Remainder"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:246
msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats), and is additionally used for "
"Format Strings"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:254
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:134
msgid "``+``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:254
msgid "Addition / Concatenation of arrays"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:256
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:144
msgid "``-``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:256
msgid "Subtraction"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:258
msgid "``<<`` ``>>``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:258
msgid "Bit shifting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:260
msgid "``&``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:260
msgid "Bitwise AND"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:262
msgid "``^``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:262
msgid "Bitwise XOR"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:264
msgid "``|``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:264
msgid "Bitwise OR"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:266
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:266
msgid "Comparisons"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:268
msgid "``in``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:268
msgid ""
"When used with the ``if`` keyword it checks if a value is within a string, "
"list, range, dictionary, or node. When used with the ``for`` keyword it is "
"used to iterate though the contents of a string, list, range, dictionary or "
"node."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:275
msgid "``!`` ``not``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:275
msgid "Boolean NOT"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:277
msgid "``and`` ``&&``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:277
msgid "Boolean AND"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:279
msgid "``or`` ``||``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:279
msgid "Boolean OR"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:281
msgid "``if x else``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:281
msgid "Ternary if/else"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:283
msgid "``as``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:283
msgid "Type casting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:285
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=`` ``<<=`` ``>>=``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:285
msgid "Assignment (lowest priority)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:289
msgid "Literals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:292
msgid "**Literal**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:292
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:243
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:265
msgid "**Type**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:294
msgid "``45``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:294
msgid "Base 10 integer"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:296
msgid "``0x8f51``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:296
msgid "Base 16 (hexadecimal) integer"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:298
msgid "``0b101010``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:298
msgid "Base 2 (binary) integer"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:300
msgid "``3.14``, ``58.1e-10``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:300
msgid "Floating-point number (real)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:302
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:302
msgid "Strings"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:304
msgid "``\"\"\"Hello\"\"\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:304
msgid "Multiline string"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:306
msgid "``@\"Node/Label\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:306
msgid ":ref:`class_NodePath` or StringName"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:308
msgid "``$NodePath``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:308
msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:311
msgid ""
"Integers and floats can have their numbers separated with ``_`` to make them "
"more readable. The following ways to write numbers are all valid::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:320
msgid "Comments"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:322
msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:332
msgid "Built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:334
msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Pooled arrays such as "
"``PoolByteArray`` are still passed as values.)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:341
msgid "Basic built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:343
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:348
msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:352
msgid ":ref:`bool <class_bool>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:354
msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:357
msgid ":ref:`int <class_int>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:359
msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:363
msgid ":ref:`float <class_float>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:365
msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, "
"data structures such as Vector2, Vector3, and PoolRealArray store 32-bit "
"single-precision \"float\" values."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:371
msgid ":ref:`String <class_String>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:373
msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain the following escape sequences:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:377
msgid "**Escape sequence**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:377
msgid "**Expands to**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:379
msgid "``\\n``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:379
msgid "Newline (line feed)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:381
msgid "``\\t``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:381
msgid "Horizontal tab character"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:383
msgid "``\\r``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:383
msgid "Carriage return"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:385
msgid "``\\a``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:385
msgid "Alert (beep/bell)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:387
msgid "``\\b``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:387
msgid "Backspace"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:389
msgid "``\\f``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:389
msgid "Formfeed page break"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:391
msgid "``\\v``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:391
msgid "Vertical tab character"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:393
msgid "``\\\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:393
msgid "Double quote"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:395
msgid "``\\'``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:395
msgid "Single quote"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:397
msgid "``\\\\``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:397
msgid "Backslash"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:399
msgid "``\\uXXXX``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:399
msgid "Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:403
msgid "GDScript also supports :ref:`doc_gdscript_printf`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:406
msgid "Vector built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:409
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:411
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:415
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:417
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:421
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:423
msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:427
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:429
msgid "3×2 matrix used for 2D transforms."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:432
msgid ":ref:`Plane <class_Plane>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:434
msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:438
msgid ":ref:`Quat <class_Quat>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:440
msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:444
msgid ":ref:`AABB <class_AABB>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:446
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:451
msgid ":ref:`Basis <class_Basis>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:453
msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:458
msgid ":ref:`Transform <class_Transform>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:460
msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:464
msgid "Engine built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:467
msgid ":ref:`Color <class_Color>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:469
msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:473
msgid ":ref:`NodePath <class_NodePath>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:475
msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:479
msgid ":ref:`RID <class_RID>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:481
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:484
msgid ":ref:`Object <class_Object>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:486
msgid "Base class for anything that is not a built-in type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:489
msgid "Container built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:492
msgid ":ref:`Array <class_Array>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:494
msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:508
msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:515
msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:516
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:517
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:518
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:519
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:520
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:521
msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:524
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:526
msgid "Associative container which contains values referenced by unique keys."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:539
msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). However, keys written in this form can't start with a digit (like "
"any GDScript identifier)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:553
msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:569
msgid ""
"The bracket syntax can be used to access properties of any :ref:"
"`class_Object`, not just Dictionaries. Keep in mind it will cause a script "
"error when attempting to index a non-existing property. To avoid this, use "
"the :ref:`Object.get() <class_Object_method_get>` and :ref:`Object.set() "
"<class_Object_method_set>` methods instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:579
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:131
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:92
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:159
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:230
msgid "Variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:581
msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:592
msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:596
msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:604
msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:610
msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:613
msgid "Valid types are:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:615
msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:616
msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:617
msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:618
msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:619
msgid "Script classes declared with the ``class_name`` keyword."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:622
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:85
msgid "Casting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:624
msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:628
msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:636
msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:643
msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:652
msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:662
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:211
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:22
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:259
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:75
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:311
#: ../../docs/development/cpp/object_class.rst:99
msgid "Constants"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:664
msgid ""
"Constants are values you cannot change when the game is running. Their value "
"must be known at compile-time. Using the ``const`` keyword allows you to "
"give a constant value a name. Trying to assign a value to a constant after "
"it's declared will give you an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:669
msgid "We recommend using constants whenever a value is not meant to change."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:682
msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:688
msgid "Assigning a value of an incompatible type will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:692
msgid ""
"Since arrays and dictionaries are passed by reference, constants are "
"\"flat\". This means that if you declare a constant array or dictionary, it "
"can still be modified afterwards. They can't be reassigned with another "
"value though."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:697
msgid "Enums"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:699
msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:702
msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant "
"dictionary of that name."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:705
msgid ""
"In Godot 3.1 and later, keys in a named enum are not registered as global "
"constants. They should be accessed prefixed by the enum's name (``Name."
"KEY``); see an example below."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:725
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:391
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:386
msgid "Functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:727
msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:740
msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:742
msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:748
msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:753
msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:759
msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:768
msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:776
msgid "Referencing functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:778
msgid ""
"Contrary to Python, functions are *not* first-class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:782
msgid ""
"To reference a function by name at run-time, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the "
"``call`` or ``funcref`` helpers::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:796
msgid "Static functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:798
msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:807
msgid "Statements and control flow"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:809
msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:814
msgid "if/else/elif"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:816
msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:830
msgid "Short statements can be written on the same line as the condition::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:837
msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:843
msgid ""
"Ternary-if expressions can be nested to handle more than 2 cases. When "
"nesting ternary-if expressions, it is recommended to wrap the complete "
"expression over multiple lines to preserve readability::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:866
msgid ""
"You may also wish to check if a value is contained within something. You can "
"use an ``if`` statement combined with the ``in`` operator to accomplish "
"this::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:879
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue`` (i.e. skipping to the next "
"iteration of the loop without executing any further code in the current "
"iteration):"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:890
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *key* is stored in the "
"loop variable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:925
msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:928
msgid "Basic syntax::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:939
msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:941
msgid "Replace ``switch`` with ``match``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:942
msgid "Remove ``case``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:943
msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:944
msgid "Change ``default`` to a single underscore."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:947
msgid "**Control flow**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:949
msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the first "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. You can use ``continue`` to stop execution in "
"the current block and check for an additional match in the patterns below it."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:953
msgid "There are 6 pattern types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:965
msgid "Constant pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:956
msgid "Constant primitives, like numbers and strings::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:977
msgid "Variable pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:968
msgid "Matches the contents of a variable/enum::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:991
msgid "Wildcard pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:980
msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:982
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1004
msgid "Binding pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:994
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1025
msgid "Array pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1007
msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1009
msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1011
msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1013
msgid "Every subpattern has to be comma-separated."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1052
msgid "Dictionary pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1028
msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1030
msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1032
msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1034
msgid "Every subpattern has to be comma separated."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1036
msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1038
msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1063
msgid "Multiple patterns"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1055
msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1066
msgid "Classes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1068
msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1084
msgid "Registering named classes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1086
msgid ""
"You can give your class a name to register it as a new type in Godot's "
"editor. For that, you use the ``class_name`` keyword. You can optionally add "
"a comma followed by a path to an image, to use it as an icon. Your class "
"will then appear with its new icon in the editor::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1100
msgid ""
"If the script is located in the ``res://addons/`` directory, ``class_name`` "
"will only cause the node to show up in the **Create New Node** dialog if the "
"script is part of an *enabled* editor plugin. See :ref:`doc_making_plugins` "
"for more information."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1105
msgid "Here's a class file example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1127
msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1135
#: ../../docs/tutorials/scripting/cross_language_scripting.rst:204
msgid "Inheritance"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1137
msgid "A class (stored as a file) can inherit from:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1139
msgid "A global class."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1140
msgid "Another class file."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1141
msgid "An inner class inside another class file."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1143
msgid "Multiple inheritance is not allowed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1145
msgid "Inheritance uses the ``extends`` keyword::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1157
msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1169
msgid ""
"To call a function in a *parent class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1174
msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their parent classes. If you still want to "
"call them, you can prefix them with ``.`` (like the ``super`` keyword in "
"other languages)::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1182
msgid ""
"Default functions like  ``_init``, and most notifications such as "
"``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. "
"are called in all parent classes automatically. There is no need to call "
"them explicitly when overloading them."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1189
msgid "Class constructor"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1191
msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So, there is usually no need to call "
"``._init()`` explicitly."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1196
msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1203
msgid "This is better explained through examples. Consider this scenario::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1226
msgid "There are a few things to keep in mind here:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1228
msgid ""
"If the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1231
msgid ""
"``Idle.gd`` can have a different number of arguments than the parent class "
"``State.gd``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1232
msgid ""
"In the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1234
msgid ""
"If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` parent class, even if it does nothing. "
"This brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables, e.g.::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1244
msgid "Inner classes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1246
msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1271
msgid "Classes as resources"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1273
msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1290
msgid "Exports"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1294
msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1297
msgid "Setters/getters"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1299
msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1302
msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1309
msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1325
msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1332
msgid ""
"Setters and getters are useful when :ref:`exporting variables "
"<doc_gdscript_exports>` to the editor in tool scripts or plugins, for "
"validating input."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1335
msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1352
msgid "Tool mode"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1354
msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1368
msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1370
msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1378
msgid "Memory management"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1380
msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call ``instance.free()``. To avoid "
"reference cycles that can't be freed, a :ref:`class_WeakRef` function is "
"provided for creating weak references. Here is an example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1402
msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1411
msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1424
msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1431
msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1434
msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1448
msgid "You can emit as many arguments as you want along with a signal."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1450
msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1454
msgid ""
"In our ``Character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, "
"and from a ``Game`` node higher up our scene tree, we connect it to the "
"``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` "
"method::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1495
msgid ""
"To use signals, your class has to extend the ``Object`` class or any type "
"extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1498
msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1512
msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1515
msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1521
msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1527
msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1532
msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1536
msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1550
msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1563
msgid "Coroutines with yield"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1565
msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the return "
"value. Calling ``resume()`` on this resulting object will continue execution "
"and return whatever the function returns. Once resumed, the state object "
"becomes invalid. Here is an example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1586
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1607
msgid "Will print::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1592
msgid ""
"It is also possible to pass values between ``yield()`` and ``resume()``, for "
"example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1613
msgid ""
"Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1628
msgid "Coroutines & signals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1630
msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1643
msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1655
msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1657
msgid "You can also get the signal's argument once it's emitted by an object:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1664
msgid ""
"If there is more than one argument, ``yield`` returns an array containing "
"the arguments::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1682
msgid ""
"If you're unsure whether a function may yield or not, or whether it may "
"yield multiple times, you can yield to the ``completed`` signal "
"conditionally:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1704
msgid ""
"This ensures that the function returns whatever it was supposed to return "
"regardless of whether coroutines were used internally. Note that using "
"``while`` would be redundant here as the ``completed`` signal is only "
"emitted when the function didn't yield anymore."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1712
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:127
msgid "`onready` keyword"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1714
msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1727
msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1735
msgid "Assert keyword"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1737
msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1749
msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:9
msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:13
msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:22
msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is simple and easy to learn."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:27
msgid "Less code written means less errors & mistakes to fix."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:28
msgid "Easier to read the code (less clutter)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:29
msgid "No compilation is required to test."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:30
msgid "Runtime is tiny."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:31
msgid "Duck-typing and polymorphism by nature."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:33
msgid "While the main disadvantages are:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:35
msgid "Less performance than statically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:36
msgid "More difficult to refactor (symbols can't be traced)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:37
msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:40
msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:43
msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:52
msgid "Variables & assignment"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:54
msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:58
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:80
msgid "Static:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:66
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:94
msgid "Dynamic:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:75
msgid "As function arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:77
msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:107
msgid "Pointers & referencing:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:109
msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:114
msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:120
msgid "C++:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:136
msgid "Java:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:154
msgid "GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:166
msgid ""
"In GDScript, only base types (int, float, String and PoolArray types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:175
msgid ""
"A value is **passed by value** when it is copied every time it's specified "
"as a function parameter. One consequence of this is that the function cannot "
"modify the parameter in a way that is visible from outside the function::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:192
msgid ""
"A value is **passed by reference** when it is *not* copied every time it's "
"specified as a function parameter. This allows modifying a function "
"parameter within a function body (and having the modified value accessible "
"outside the function). The downside is that the data passed as a function "
"parameter is no longer guaranteed to be immutable, which can cause difficult-"
"to-track bugs if not done carefully::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:213
msgid ""
"Compared to passing by value, passing by reference can perform better when "
"using large objects since copying large objects in memory can be slow."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:216
msgid ""
"Additionally, in Godot, base types such as String are **immutable**. This "
"means that modifying them will *always* return a copy of the original value, "
"rather than modifying the value in-place."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:221
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:196
msgid "Arrays"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:223
msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:250
msgid "And in GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:259
msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:269
msgid "Or unordered sets:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:278
msgid "Dictionaries"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:280
msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:286
msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:292
msgid "Example of Dictionary:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:299
msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:308
msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:341
msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:366
msgid "For & while"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:368
msgid "Iterating in some statically typed languages can be quite complex:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:388
msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:395
msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:403
msgid "Iterating with indices is also possible:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:410
msgid "The range() function can take 3 arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:418
msgid "Some statically typed programming language examples:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:428
msgid "Translate to:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:441
msgid "And backwards looping is done through a negative counter:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:447
msgid "Becomes:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:455
#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:384
msgid "While"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:457
msgid "while() loops are the same everywhere:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:468
msgid "Custom iterators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:469
msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:501
msgid "And it can be used like any other iterator:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:509
msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:513
msgid "Duck typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:515
msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:520
msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:531
msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:539
msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:548
msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:554
msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:557
msgid "In this case, it translates to:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:559
msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:561
msgid "Yes, we should call it Hulk typing instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:563
msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:574
msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:4
msgid "GDScript exports"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:7
msgid "Introduction to exports"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:9
msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:18
msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the ``export`` keyword (see the "
"*Examples* section below)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:22
msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:29
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:139
msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:144
msgid "Exporting bit flags"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:146
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS, ...``, they "
"can be set from the editor::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:153
msgid ""
"You must provide a string description for each flag. In this example, "
"``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and "
"``Wind`` corresponds to value 8. Usually, constants should be defined "
"accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:158
msgid ""
"Export hints are also provided for the physics and render layers defined in "
"the project settings::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:165
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, use boolean variables instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:169
msgid "Exporting arrays"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:171
msgid ""
"Exported arrays can have initializers, but they must be constant expressions."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:173
msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:211
msgid "Setting exported variables from a tool script"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:213
msgid ""
"When changing an exported variable's value from a script in :ref:"
"`doc_gdscript_tool_mode`, the value in the inspector won't be updated "
"automatically. To update it, call :ref:`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` after setting the "
"exported variable's value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:220
msgid "Advanced exports"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:222
msgid ""
"Not every type of export can be provided on the level of the language itself "
"to avoid unnecessary design complexity. The following describes some more or "
"less common exporting features which can be implemented with a low-level API."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:226
msgid ""
"Before reading further, you should get familiar with the way properties are "
"handled and how they can be customized with :ref:`_set() "
"<class_Object_method__get_property_list>`, :ref:`_get() "
"<class_Object_method__get_property_list>`, and :ref:`_get_property_list() "
"<class_Object_method__get_property_list>` methods as described in :ref:"
"`doc_accessing_data_or_logic_from_object`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:233
msgid ""
"For binding properties using the above methods in C++, see :ref:"
"`doc_binding_properties_using_set_get_property_list`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:236
msgid ""
"The script must operate in the ``tool`` mode so the above methods can work "
"from within the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:242
msgid ""
"To understand how to better use the sections below, you should understand "
"how to make properties with advanced exports."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:256
msgid ""
"The ``_get_property_list()`` function gets called by the inspector. You can "
"override it for more advanced exports. You must return an ``Array`` with the "
"contents of the properties for the function to work."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:260
msgid "``name`` is the name of the property"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:262
msgid "``type`` is the type of the property from ``Variant.Type``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:264
msgid ""
"The ``float`` type is called a real (``TYPE_REAL``) in the ``Variant.Type`` "
"enum."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:267
msgid "Attaching variables to properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:269
msgid ""
"To attach variables to properties (allowing the value of the property to be "
"used in scripts), you need to create a variable with the exact same name as "
"the property or else you may need to override the :ref:`_set() "
"<class_Object_method__get_property_list>` and :ref:`_get() "
"<class_Object_method__get_property_list>` methods. Attaching a variable to "
"to a property also gives you the ability to give it a default state. ::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:292
msgid "Adding default values for properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:294
msgid ""
"To define default values for advanced exports, you need to override the "
"``property_can_revert()`` and ``property_get_revert()`` methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:296
msgid ""
"The ``property_can_revert()`` method takes the name of a property and must "
"return ``true`` if the property can be reverted. This will enable the Revert "
"button next to the property in the inspector."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:298
msgid ""
"The ``property_get_revert()`` method takes the name of a property and must "
"return the default value for that property."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:320
msgid "Adding script categories"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:322
msgid ""
"For better visual distinguishing of properties, a special script category "
"can be embedded into the inspector to act as a separator. ``Script "
"Variables`` is one example of a built-in category. ::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:342
msgid "``name`` is the name of a category to be added to the inspector;"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:344
msgid ""
"Every following property added after the category definition will be a part "
"of the category."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:347
msgid ""
"``PROPERTY_USAGE_CATEGORY`` indicates that the property should be treated as "
"a script category specifically, so the type ``TYPE_NIL`` can be ignored as "
"it won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:352
msgid "Grouping properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:354
msgid "A list of properties with similar names can be grouped. ::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:380
msgid ""
"``name`` is the name of a group which is going to be displayed as "
"collapsible list of properties;"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:383
msgid ""
"Every following property added after the group property with the prefix "
"(which determined by ``hint_string``) will be shortened. For instance, "
"``rotate_speed`` is going to be shortened to ``speed`` in this case. "
"However, ``movement_speed`` won't be a part of the group and will not be "
"shortened."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_exports.rst:389
msgid ""
"``PROPERTY_USAGE_GROUP`` indicates that the property should be treated as a "
"script group specifically, so the type ``TYPE_NIL`` can be ignored as it "
"won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:6
msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:11
msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:15
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:16
msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:19
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:20
msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:22
msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:25
msgid "Here is a complete class example based on these guidelines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:94
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:31
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:50
msgid "Formatting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:97
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:53
msgid "Encoding and special characters"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:99
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:55
msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:100
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:56
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:101
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:57
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:102
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:58
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:105
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:61
msgid "Indentation"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:107
msgid "Each indent level should be one greater than the block containing it."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:109
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:129
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:148
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:201
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:225
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:275
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:316
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:353
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:378
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:398
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:424
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:818
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:65
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:84
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:111
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:162
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:194
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:226
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:256
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:280
msgid "**Good**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:116
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:137
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:171
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:212
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:231
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:285
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:335
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:360
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:385
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:405
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:434
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:836
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:73
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:92
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:121
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:171
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:201
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:234
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:264
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:286
msgid "**Bad**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:126
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:81
msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:145
msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:195
msgid "Trailing comma"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:197
msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:223
msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:238
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:132
msgid "Blank lines"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:240
msgid "Surround functions and class definitions with two blank lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:255
msgid "Use one blank line inside functions to separate logical sections."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:257
msgid ""
"We use a single line between classes and function definitions in the class "
"reference and in short code snippets in this documentation."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:261
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:149
msgid "Line length"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:263
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:151
msgid "Keep individual lines of code under 100 characters."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:265
msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:270
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:158
msgid "One statement per line"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:272
msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:293
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:179
msgid "The only exception to that rule is the ternary operator:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:300
msgid "Format multiline statements for readability"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:302
msgid ""
"When you have particularly long ``if`` statements or nested ternary "
"expressions, wrapping them over multiple lines improves readability. Since "
"continuation lines are still part of the same expression, 2 indent levels "
"should be used instead of one."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:306
msgid ""
"GDScript allows wrapping statements using multiple lines using parentheses "
"or backslashes. Parentheses are favored in this style guide since they make "
"for easier refactoring. With backslashes, you have to ensure that the last "
"line never contains a backslash at the end. With parentheses, you don't have "
"to worry about the last line having a backslash at the end."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:312
msgid ""
"When wrapping a conditional expression over multiple lines, the ``and``/"
"``or`` keywords should be placed at the beginning of the line continuation, "
"not at the end of the previous line."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:347
msgid "Avoid unnecessary parentheses"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:349
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations or wrapping over multiple lines, they only "
"reduce readability."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:368
msgid "Boolean operators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:370
msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:372
msgid "Use ``and`` instead of ``&&``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:373
msgid "Use ``or`` instead of ``||``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:375
msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:393
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:189
msgid "Comment spacing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:395
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:191
msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:414
msgid ""
"In the script editor, to toggle the selected code commented, press :kbd:"
"`Ctrl + K`. This feature adds a single # sign at the start of the selected "
"lines."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:419
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:221
msgid "Whitespace"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:421
msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:444
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:242
msgid "Don't use spaces to align expressions vertically:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:453
msgid "Quotes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:455
msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:473
msgid "Numbers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:475
msgid ""
"Don't omit the leading or trailing zero in floating-point numbers. "
"Otherwise, this makes them less readable and harder to distinguish from "
"integers at a glance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:479
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:492
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:503
msgid "**Good**::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:484
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:496
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:511
msgid "**Bad**::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:489
msgid ""
"Use lowercase for letters in hexadecimal numbers, as their lower height "
"makes the number easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:500
msgid ""
"Take advantage of GDScript's underscores in literals to make large numbers "
"more readable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:522
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:197
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:293
msgid "Naming conventions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:524
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:295
msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:529
msgid "File names"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:531
msgid ""
"Use snake_case for file names. For named classes, convert the PascalCase "
"class name to snake_case::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:544
msgid ""
"This is consistent with how C++ files are named in Godot's source code. This "
"also avoids case sensitivity issues that can crop up when exporting a "
"project from Windows to other platforms."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:549
msgid "Classes and nodes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:551
msgid "Use PascalCase for class and node names:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:557
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:564
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:300
msgid "Functions and variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:566
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:302
msgid "Use snake\\_case to name functions and variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:573
msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:584
msgid "Use the past tense to name signals:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:592
msgid "Constants and enums"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:594
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:313
msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:601
msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:615
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:321
msgid "Code order"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:617
msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:620
msgid "We suggest to organize GDScript code this way:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:643
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:340
msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:647
msgid "This code order follows four rules of thumb:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:649
msgid "Properties and signals come first, followed by methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:650
msgid "Public comes before private."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:651
msgid "Virtual callbacks come before the class's interface."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:652
msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:657
msgid "Class declaration"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:659
msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:662
msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:666
msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:668
msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:680
msgid "Signals and properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:682
msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:685
msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:688
msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:713
msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:719
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:268
msgid "Member variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:721
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:270
msgid ""
"Don't declare member variables if they are only used locally in a method, as "
"it makes the code more difficult to follow. Instead, declare them as local "
"variables in the method's body."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:726
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:275
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:351
msgid "Local variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:728
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:277
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:353
msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:733
msgid "Methods and static functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:735
msgid "After the class's properties come the methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:737
msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:741
msgid ""
"These functions should come first because they show how the object is "
"initialized."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:744
msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:748
msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:785
msgid "Static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:787
msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:790
msgid "Declared types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:792
msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:798
msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:805
msgid "Inferred types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:807
msgid "In most cases you can let the compiler infer the type, using ``:=``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:813
msgid ""
"However, in a few cases when context is missing, the compiler falls back to "
"the function's return type. For example, ``get_node()`` cannot infer a type "
"unless the scene or file of the node is loaded in memory. In this case, you "
"should set the type explicitly."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:824
msgid ""
"Alternatively, you can use the ``as`` keyword to cast the return type, and "
"that type will be used to infer the type of the var."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:834
msgid ""
"This option is also considered more :ref:`type-"
"safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:4
msgid "Static typing in GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:8
msgid "**How to use types in GDScript**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:9
msgid "That **static types can help you avoid bugs**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:11
msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:15
msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:20
msgid "Typed GDScript is available since Godot 3.1."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:23
msgid "A brief look at static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:25
msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:29
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:49
msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:55
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:59
msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:None
msgid "code completion options for dynamic"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:65
msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:None
msgid "code completion options for typed"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:72
msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:76
msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:85
msgid "How to use static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:87
msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:96
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:105
msgid "Currently you can use three types of… types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:107
msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:108
msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:110
msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:115
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:118
msgid "Custom variable types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:120
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:129
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:137
msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:146
msgid "Variable casting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:148
msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:151
msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:158
msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:172
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:179
msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:184
msgid "Safe lines"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:186
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:192
msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:200
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:208
msgid "Unsafe vs Safe Line"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:208
msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:212
msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:215
msgid "Define the return type of a function with the arrow ->"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:217
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:225
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:234
msgid "You can also use your own nodes as return types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:250
msgid "Typed or dynamic: stick to one style"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:252
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:258
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:274
msgid "And with static typing:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:288
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:297
msgid "And the same callback, with type hints:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:304
msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:315
msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:321
msgid "Warning system"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:325
msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:329
msgid "Cases where you can't specify types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:331
msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:334
msgid "You can't use Enums as types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:341
msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:348
msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:358
msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:383
msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:4
msgid "GDScript warning system"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:6
msgid ""
"The GDScript warning system complements :ref:`static typing "
"<doc_gdscript_static_typing>` (but it can work without static typing too). "
"It's here to help you avoid mistakes that are hard to spot during "
"development, and that may lead to runtime errors."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:11
msgid ""
"You can configure warnings in the Project Settings under the section called "
"**Gdscript**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:17
msgid "Warning system project settings"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:19
msgid ""
"You can find a list of warnings for the active GDScript file in the script "
"editor's status bar. The example below has 3 warnings:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:25
msgid "Warning system example"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:27
msgid ""
"To ignore specific warnings in one file, insert a special comment of the "
"form ``# warning-ignore:warning-id``, or click on the ignore link to the "
"right of the warning's description. Godot will add a comment above the "
"corresponding line and the code won't trigger the corresponding warning "
"anymore:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:36
msgid "Warning system ignore example"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:38
msgid ""
"You can also choose to ignore not just one but all warnings of a certain "
"type in this file with ``# warning-ignore-all:warning-id``. To ignore all "
"warnings of all types in a file add the comment ``# warnings-disable`` to it."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:42
msgid ""
"Warnings won't prevent the game from running, but you can turn them into "
"errors if you'd like. This way your game won't compile unless you fix all "
"warnings. Head to the ``GDScript`` section of the Project Settings to turn "
"on this option. Here's the same file as the previous example with warnings "
"as errors turned on:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/warning_system.rst:51
msgid "Warnings as errors"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:4
msgid "GDScript format strings"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:6
msgid ""
"GDScript offers a feature called *format strings*, which allows reusing text "
"templates to succinctly create different but similar strings."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:9
msgid ""
"Format strings are just like normal strings, except they contain certain "
"placeholder character-sequences. These placeholders can then easily be "
"replaced by parameters handed to the format string."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:13
msgid ""
"As an example, with ``%s`` as a placeholder, the format string ``\"Hello %s, "
"how are you?\"`` can easily be changed to ``\"Hello World, how are you?\"``. "
"Notice the placeholder is in the middle of the string; modifying it without "
"format strings could be cumbersome."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:20
msgid "Usage in GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:22
msgid "Examine this concrete GDScript example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:35
msgid ""
"Placeholders always start with a ``%``, but the next character or "
"characters, the *format specifier*, determines how the given value is "
"converted to a string."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:39
msgid ""
"The ``%s`` seen in the example above is the simplest placeholder and works "
"for most use cases: it converts the value by the same method by which an "
"implicit String conversion or ``str()`` would convert it. Strings remain "
"unchanged, Booleans turn into either ``\"True\"`` or ``\"False\"``, an "
"integral or real number becomes a decimal, other types usually return their "
"data in a human-readable string."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:46
msgid ""
"There is also another way to format text in GDScript, namely the ``String."
"format()`` method. It replaces all occurrences of a key in the string with "
"the corresponding value. The method can handle arrays or dictionaries for "
"the key/value pairs."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:50
msgid ""
"Arrays can be used as key, index, or mixed style (see below examples). Order "
"only matters when the index or mixed style of Array is used."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:53
msgid "A quick example in GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:66
msgid ""
"There are other `format specifiers`_, but they are only applicable when "
"using the ``%`` operator."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:71
msgid "Multiple placeholders"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:73
msgid ""
"Format strings may contain multiple placeholders. In such a case, the values "
"are handed in the form of an array, one value per placeholder (unless using "
"a format specifier with ``*``, see `dynamic padding`_):"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:85
msgid ""
"Note the values are inserted in order. Remember all placeholders must be "
"replaced at once, so there must be an appropriate number of values."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:90
msgid "Format specifiers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:92
msgid ""
"There are format specifiers other than ``s`` that can be used in "
"placeholders. They consist of one or more characters. Some of them work by "
"themselves like ``s``, some appear before other characters, some only work "
"with certain values or characters."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:99
msgid "Placeholder types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:101
msgid ""
"One and only one of these must always appear as the last character in a "
"format specifier. Apart from ``s``, these require certain types of "
"parameters."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:105
msgid "``s``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:105
msgid ""
"**Simple** conversion to String by the same method as implicit String "
"conversion."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:108
msgid "``c``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:108
msgid ""
"A single **Unicode character**. Expects an unsigned 8-bit integer (0-255) "
"for a code point or a single-character string."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:111
msgid "``d``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:111
msgid ""
"A **decimal integral** number. Expects an integral or real number (will be "
"floored)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:114
msgid "``o``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:114
msgid ""
"An **octal integral** number. Expects an integral or real number (will be "
"floored)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:117
msgid "``x``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:117
msgid ""
"A **hexadecimal integral** number with **lower-case** letters. Expects an "
"integral or real number (will be floored)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:120
msgid "``X``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:120
msgid ""
"A **hexadecimal integral** number with **upper-case** letters. Expects an "
"integral or real number (will be floored)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:123
msgid "``f``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:123
msgid "A **decimal real** number. Expects an integral or real number."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:128
msgid "Placeholder modifiers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:130
msgid ""
"These characters appear before the above. Some of them work only under "
"certain conditions."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:134
msgid "In number specifiers, **show + sign** if positive."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:136
msgid ""
"Set **padding**. Padded with spaces or with zeroes if integer starts with "
"``0`` in an integer or real number placeholder. The leading ``0`` is ignored "
"if ``-`` is present. When used after ``.``, see ``.``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:141
msgid "``.``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:141
msgid ""
"Before ``f``, set **precision** to 0 decimal places. Can be followed up with "
"numbers to change. Padded with zeroes."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:144
msgid "**Pad to the right** rather than the left."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:146
msgid "``*``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:146
msgid ""
"**Dynamic padding**, expect additional integral parameter to set padding or "
"precision after ``.``, see `dynamic padding`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:152
msgid "Padding"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:154
msgid ""
"The ``.`` (*dot*), ``*`` (*asterisk*), ``-`` (*minus sign*) and digit (``0``-"
"``9``) characters are used for padding. This allows printing several values "
"aligned vertically as if in a column, provided a fixed-width font is used."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:159
msgid "To pad a string to a minimum length, add an integer to the specifier:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:167
msgid ""
"If the integer starts with ``0``, integral values are padded with zeroes "
"instead of white space:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:175
msgid ""
"Precision can be specified for real numbers by adding a ``.`` (*dot*) with "
"an integer following it. With no integer after ``.``, a precision of 0 is "
"used, rounding to integral value. The integer to use for padding must appear "
"before the dot."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:187
msgid ""
"The ``-`` character will cause padding to the right rather than the left, "
"useful for right text alignment:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:198
msgid "Dynamic padding"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:200
msgid ""
"By using the ``*`` (*asterisk*) character, the padding or precision can be "
"set without modifying the format string. It is used in place of an integer "
"in the format specifier. The values for padding and precision are then "
"passed when formatting:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:213
msgid ""
"It is still possible to pad with zeroes in integer placeholders by adding "
"``0`` before ``*``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:223
msgid "Escape sequence"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:225
msgid ""
"To insert a literal ``%`` character into a format string, it must be escaped "
"to avoid reading it as a placeholder. This is done by doubling the character:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:236
msgid "Format method examples"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:238
msgid ""
"The following are some examples of how to use the various invocations of the "
"``String.format``  method."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:243
msgid "**Style**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:243
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:265
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:278
msgid "**Example**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:243
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:265
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:278
msgid "**Result**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:245
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:247
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:249
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:310
msgid "Dictionary"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:245
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:251
msgid "key"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:245
msgid ""
"``\"Hi, {name} v{version}!\".format({\"name\":\"Godette\", \"version\":"
"\"3.0\"})``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:245
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:247
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:249
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:251
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:253
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:255
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:257
msgid "Hi, Godette v3.0!"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:247
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:253
msgid "index"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:247
msgid "``\"Hi, {0} v{1}!\".format({\"0\":\"Godette\", \"1\":\"3.0\"})``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:249
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:255
msgid "mix"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:249
msgid ""
"``\"Hi, {0} v{version}!\".format({\"0\":\"Godette\", \"version\":\"3.0\"})``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:251
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:253
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:255
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:257
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:289
msgid "Array"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:251
msgid ""
"``\"Hi, {name} v{version}!\".format([[\"version\",\"3.0\"], [\"name\","
"\"Godette\"]])``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:253
msgid "``\"Hi, {0} v{1}!\".format([\"Godette\",\"3.0\"])``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:255
msgid "``\"Hi, {name} v{0}!\".format([3.0, [\"name\",\"Godette\"]])``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:257
msgid "no index"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:257
msgid "``\"Hi, {} v{}!\".format([\"Godette\", 3.0], \"{}\")``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:260
msgid ""
"Placeholders can also be customized when using ``String.format``, here's "
"some examples of that functionality."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:267
msgid "Infix (default)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:267
msgid "``\"Hi, {0} v{1}\".format([\"Godette\", \"3.0\"], \"{_}\")``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:267
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:269
#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:271
msgid "Hi, Godette v3.0"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:269
msgid "Postfix"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:269
msgid "``\"Hi, 0% v1%\".format([\"Godette\", \"3.0\"], \"_%\")``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:271
msgid "Prefix"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:271
msgid "``\"Hi, %0 v%1\".format([\"Godette\", \"3.0\"], \"%_\")``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:274
msgid ""
"Combining both the ``String.format`` method and the ``%`` operator could be "
"useful, as ``String.format`` does not have a way to manipulate the "
"representation of numbers."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:280
msgid ""
"``\"Hi, {0} v{version}\".format({0:\"Godette\", \"version\":\"%0.2f\" % "
"3.114})``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_format_string.rst:280
msgid "Hi, Godette v3.11"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:4
msgid "What is Visual Scripting"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:6
msgid ""
"Visual Scripting is a tool designed to make the entry barrier to programming "
"much lower. As code is more visual, it needs less abstract thinking to be "
"understood. Any artist, animator, game designer, etc. can look at it and "
"quickly grasp the flow of logic."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:11
msgid ""
"The reason it does not make existing programming obsolete is, simply, that "
"it does not scale as well. It takes considerably more time to create code "
"with it, and it's often more difficult to modify than just writing a few "
"characters."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:15
msgid ""
"With the misunderstanding cleared up, the question that remains is what are "
"the practical uses for Visual Scripting."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:18
msgid "The most common use cases are as follows:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:20
msgid ""
"Game development beginners who want to learn an engine but have no "
"programming experience yet."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:21
msgid ""
"Artists and Game Designers who have no experience in programming and want to "
"create quick prototypes or simple games."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:22
msgid ""
"Programmers working in a team that want to make part of the game logic "
"available to Artists or Game Designers in order to offload some of their "
"work."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/what_is_visual_scripting.rst:24
msgid ""
"These scenarios are far more common than one might think, so this is why "
"Godot has added this feature."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:4
msgid "Getting started with Visual Scripting"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:6
msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:10
msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:15
msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:23
msgid "Creating a script"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:25
msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:31
msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:37
msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:43
msgid "Adding a function"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:45
msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:49
msgid "A function is an individual canvas with nodes connected."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:51
msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:53
msgid "There are three main ways to add functions in a script:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:56
msgid "Overriding a virtual function"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:58
msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:65
msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:71
msgid "Finally, a canvas appears for this function, showing the override:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:76
msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:83
msgid "Connecting a signal to a function"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:85
msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:88
msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:94
msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:100
msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:107
msgid "Creating a function manually"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:109
msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:113
msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:119
msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:125
msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/getting_started.rst:131
msgid "More on that will be explained later in this document."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:4
msgid "Nodes and terminology"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:6
msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:15
msgid "Node properties"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:17
msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:20
msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:25
msgid "Ports and connections"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:27
msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:31
msgid "Ports"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:33
msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:40
msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:46
msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:51
msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:58
#: ../../docs/development/file_formats/tscn.rst:31
msgid "Connections"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:60
msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:65
msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:71
msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:75
msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:81
msgid "While, for data, a contextual set/get/call menu will open:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:87
msgid "Adding nodes"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:89
msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:94
msgid "Accessing scene nodes"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:96
msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:102
msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:109
msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:113
msgid "Accessing scene node properties"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:115
msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:120
msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:122
msgid ""
"If instead reading this value is desired, drag the node again but hold :kbd:"
"`Ctrl` (or :kbd:`Cmd` on macOS). This will create a getter:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:127
msgid "In this case, the value can be read from a *Data Port*."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:133
msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:135
msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:140
msgid "Right-clicking the variable allows you to configure its properties:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:147
msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:153
msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:158
msgid "Likewise, hold :kbd:`Ctrl` (or :kbd:`Cmd` on macOS) to drop a setter:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:166
msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:171
msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:176
msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:181
msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:186
msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:190
msgid "Adding more nodes"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:192
msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:198
msgid ""
"Pressing :kbd:`Ctrl + F` (or :kbd:`Cmd + F` on macOS) allows you to search "
"the list."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:200
msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:206
msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:213
msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:219
msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:221
msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:224
msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:230
msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:236
msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:240
msgid "Action"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:242
msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:249
msgid "Engine Singleton"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:251
msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:257
msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:263
msgid "Local Variables"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:265
msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:270
msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced setter (setting requires a sequence port)."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:274
msgid "Scene Node"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:276
msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:281
msgid "Self"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:283
msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:290
msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:294
msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:299
msgid "Preload"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:301
msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:306
msgid "Resource Path"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:308
msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:313
msgid "Comment"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:315
msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:322
msgid "Flow Control"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:324
msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:331
msgid "Condition"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:333
msgid ""
"This is a simple node that checks a bool port. If ``true``, it will go via "
"the \"true\" sequence port. If ``false``, the second. After going for either "
"of them, it goes via the \"done\" port. Leaving sequence ports disconnected "
"is fine if not all of them are used."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:339
msgid "Iterator"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:341
msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:344
msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:347
msgid "When done, it goes via the \"exit\" sequence port."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:351
msgid "Return"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:353
msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:358
msgid "Sequence"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:360
msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:364
msgid "TypeCast"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:366
msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:372
msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:378
msgid "Switch"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:380
msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:386
msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:393
msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:398
msgid "Built-In"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:400
msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from :ref:`GDScript<class_@GDScript>`. Most of them are mathematical "
"functions, but others can be useful helpers. Make sure to take a look at the "
"list at some point."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:404
msgid "By Type"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:406
msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:411
msgid "Call"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:413
msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:417
msgid "Constructors"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:419
msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:425
msgid "Destructor"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:427
msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:433
msgid "Emit Signal"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:435
msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:439
msgid "Get/Set"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:441
msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:445
msgid "Wait"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:447
msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:452
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:328
msgid "Yield"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:454
msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:458
msgid "Yield Signal"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:460
msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:466
msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:472
msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:481
msgid "Expression Node"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:483
msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:486
msgid "Expression nodes can:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:488
msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:493
msgid "Access local variables or properties:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:498
msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as ``sin()``, ``cos()``, ``print()``, as well as constructors, such as "
"``Vector3(x, y, z)``, ``Rect2(...)``, etc.:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:503
msgid "Call API functions:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/nodes_purposes.rst:508
msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:4
msgid "Custom VisualScript nodes"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:16
msgid ""
"Custom nodes are written in GDScript and can then be used in VisualScript. "
"This is useful for offloading complex code to GDScript and reusing it."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:20
msgid "Creating a custom node"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:22
msgid ""
"Create a new script that extends :ref:`class_VisualScriptCustomNode` and put "
"a ``tool`` keyword at the top. This is needed for the script to run in the "
"editor."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:24
msgid ""
"There are some functions that can be implemented to set parameters of the "
"custom node. Only add functions that are needed, a "
"``_has_input_sequence_port`` function is not necessary if it should return "
"``false`` for example."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:27
msgid ""
"The most important part of a custom node is the ``_step`` function. The "
"logic of the node is defined there."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:29
msgid "The ``inputs`` parameter holds the value of the input ports."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:31
msgid ""
"The ``outputs`` parameter is an array where the indices represent the output "
"port ids. It can be modified to set the values of the output ports."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:33
msgid ""
"``start_mode`` can be checked to see if it is the first time ``_step`` is "
"called."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:35
msgid ""
"``working_mem`` is persistent each ``_step`` call. It can be used to store "
"information."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:37
msgid ""
"If you want to throw an error, for example if the input types are incorrect, "
"you can return the error message as a string. When everything goes right, "
"return the id of the sequence port which should be called next. If your "
"custom node doesn't have any, just return 0."
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:104
msgid "Using a custom node"
msgstr ""

#: ../../docs/tutorials/scripting/visual_script/custom_visualscript_nodes.rst:106
msgid ""
"To use the script, add a ``CustomNode``, select it and drag your custom node "
"script into the ``script`` property shown in the inspector."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:4
msgid "C# basics"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:9
msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:17
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:24
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 6.x .NET framework, including full support for "
"C# 8.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:32
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:41
msgid "Setting up C# for Godot"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:46
msgid ""
"Install the latest stable version of the `.NET SDK <https://dotnet.microsoft."
"com/download>`__, previously known as the .NET Core SDK."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:50
msgid ""
"From Godot 3.2.3 onwards, installing Mono SDK is not a requirement anymore, "
"except it is required if you are building the engine from source."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:53
msgid ""
"Godot bundles the parts of Mono needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, which needs to be installed separately."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:58
msgid ""
"In summary, you must have installed the .NET SDK **and** the Mono-enabled "
"version of Godot."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:62
msgid "Additional notes"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:64
msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:67
msgid ""
"If you are building Godot from source, install the latest stable version of "
"`Mono <https://www.mono-project.com/download/stable/>`__, and make sure to "
"follow the steps to enable Mono support in your build as outlined in the :"
"ref:`doc_compiling_with_mono` page."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:73
msgid "Configuring an external editor"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:75
msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Mono**. "
"Under **Mono**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:84
msgid "Visual Studio 2019"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:86
msgid "MonoDevelop"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:87
msgid "Visual Studio for Mac"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:90
msgid "See the following sections for how to configure an external editor:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:95
msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:98
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:114
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:150
msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:100
msgid ""
"Set **Mono** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:101
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:117
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:153
msgid "Set **Mono** -> **Builds** -> **Build Tool** to **dotnet CLI**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:103
msgid "In Rider:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:105
msgid "Set **MSBuild version** to **.NET Core**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:106
msgid "Install the **Godot support** plugin."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:111
msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:116
msgid ""
"Set **Mono** -> **Editor** -> **External Editor** to **Visual Studio Code**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:119
msgid "In Visual Studio Code:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:121
msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:122
msgid ""
"Install the `Mono Debug <https://marketplace.visualstudio.com/items?"
"itemName=ms-vscode.mono-debug>`__ extension."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:123
msgid ""
"Install the `C# Tools for Godot <https://marketplace.visualstudio.com/items?"
"itemName=neikeq.godot-csharp-vscode>`__ extension."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:125
msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:129
msgid ""
"To configure a project for debugging open the Godot project folder in VS "
"Code. Go to the Run tab and click on **Add Configuration...**. Select **C# "
"Godot** from the dropdown menu. Open the ``tasks.json`` and ``launch.json`` "
"files that were created. Change the executable setting in ``launch.json`` "
"and  command settings in ``tasks.json`` to your Godot executable path. Now, "
"when you start the debugger in VS Code, your Godot project will run."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:137
msgid "Visual Studio (Windows only)"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:139
msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:145
msgid "While installing Visual Studio, select these workloads:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:147
msgid "Mobile development with .NET"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:148
msgid ".NET Core cross-platform development"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:152
msgid "Set **Mono** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:155
msgid ""
"Next, you can download the Godot Visual Studio extension from github `here "
"<https://github.com/godotengine/godot-csharp-visualstudio/releases>`__. "
"Double click on the downloaded file and follow the installation process."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:159
msgid ""
"The option to debug your game in Visual Studio may not appear after "
"installing the extension. To enable debugging, there is a `workaround for "
"Visual Studio 2019 <https://github.com/godotengine/godot-csharp-visualstudio/"
"issues/10#issuecomment-720153256>`__. There is `a separate issue about this "
"problem in Visual Studio 2022 <https://github.com/godotengine/godot-csharp-"
"visualstudio/issues/28>`__."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:165
msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:168
msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:174
msgid "Creating a C# script"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:176
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:181
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:188
msgid "Project setup and workflow"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:190
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:202
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:229
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:236
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:242
msgid "General differences between C# and GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:244
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:248
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:252
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the word **Build** in the top right corner of the "
"editor. You can also click **Mono** at the bottom of the editor window to "
"reveal the Mono panel, then click the **Build Project** button."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:258
msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:262
msgid "Current gotchas and known issues"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:264
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:270
msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:271
msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:273
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:275
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:283
msgid ""
"Exporting Mono projects is supported for desktop platforms (Linux, Windows "
"and macOS), Android, HTML5, and iOS. The only platform not supported yet is "
"UWP."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:287
msgid "Performance of C# in Godot"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:289
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:297
msgid "Using NuGet packages in Godot"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:299
msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:313
msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:317
msgid "Profiling your C# code"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:319
msgid ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ is available for Linux and macOS. Due to a Mono change, it does "
"not work on Windows currently."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:320
msgid ""
"External Mono profiler like `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ can be used as described `here <https://github.com/godotengine/"
"godot/pull/34382>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:4
msgid "C# features"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:6
msgid ""
"This page provides an overview of the commonly used features of both C# and "
"Godot and how they are used together."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:12
msgid "Type conversion and casting"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:14
msgid ""
"C# is a statically typed language. Therefore, you can't do the following:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:21
msgid ""
"The method ``GetNode()`` returns a ``Node`` instance. You must explicitly "
"convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:24
msgid "For this, you have various options in C#."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:26
msgid "**Casting and Type Checking**"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:28
msgid ""
"Throws ``InvalidCastException`` if the returned node cannot be cast to "
"Sprite. You would use it instead of the ``as`` operator if you are pretty "
"sure it won't fail."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:36
msgid "**Using the AS operator**"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:38
msgid ""
"The ``as`` operator returns ``null`` if the node cannot be cast to Sprite, "
"and for that reason, it cannot be used with value types."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:47
msgid "**Using the generic methods**"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:49
msgid ""
"Generic methods are also provided to make this type conversion transparent."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:51
msgid ""
"``GetNode<T>()`` casts the node before returning it. It will throw an "
"``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:58
msgid ""
"``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if "
"the node cannot be cast to the desired type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:66
msgid "**Type checking using the IS operator**"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:68
msgid ""
"To check if the node can be cast to Sprite, you can use the ``is`` operator. "
"The ``is`` operator returns false if the node cannot be cast to Sprite, "
"otherwise it returns true."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:79
msgid ""
"For more advanced type checking, you can look into `Pattern Matching "
"<https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:84
msgid "C# signals"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:86
msgid ""
"For a complete C# example, see the **Handling a signal** section in the step "
"by step :ref:`doc_scripting` tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:88
msgid ""
"Declaring a signal in C# is done with the ``[Signal]`` attribute on a "
"delegate."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:98
msgid ""
"These signals can then be connected either in the editor or from code with "
"``Connect``. If you want to connect a signal in the editor, you need to "
"(re)build the project assemblies to see the new signal. This build can be "
"manually triggered by clicking the “Build” button at the top right corner of "
"the editor window."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:119
msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:129
msgid ""
"Notice that you can always reference a signal name with the ``nameof`` "
"keyword (applied on the delegate itself)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:131
msgid ""
"It is possible to bind values when establishing a connection by passing a "
"Godot array."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:151
msgid ""
"Signals support parameters and bound values of all the `built-in types "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/"
"built-in-types-table>`_ and Classes derived from :ref:`Godot.Object "
"<class_Object>`. Consequently, any ``Node`` or ``Reference`` will be "
"compatible automatically, but custom data objects will need to extend from "
"`Godot.Object` or one of its subclasses."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:163
msgid ""
"Finally, signals can be created by calling ``AddUserSignal``, but be aware "
"that it should be executed before any use of said signals (with ``Connect`` "
"or ``EmitSignal``)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:174
msgid "Preprocessor defines"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:176
msgid ""
"Godot has a set of defines that allow you to change your C# code depending "
"on the environment you are compiling to."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:179
msgid ""
"If you created your project before Godot 3.2, you have to modify or "
"regenerate your `csproj` file to use this feature (compare "
"``<DefineConstants>`` with a new 3.2+ project)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:186
msgid "For example, you can change code based on the platform:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:203
msgid ""
"Or you can detect which engine your code is in, useful for making cross-"
"engine libraries:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:219
msgid "Full list of defines"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:221
msgid "``GODOT`` is always defined for Godot projects."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:223
msgid ""
"One of ``GODOT_64`` or ``GODOT_32`` is defined depending on if the "
"architecture is 64-bit or 32-bit."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:225
msgid ""
"One of ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, ``GODOT_ANDROID``, "
"``GODOT_IOS``, ``GODOT_HTML5``, or ``GODOT_SERVER`` depending on the OS. "
"These names may change in the future. These are created from the "
"``get_name()`` method of the :ref:`OS <class_OS>` singleton, but not every "
"possible OS the method returns is an OS that Godot with Mono runs on."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:232
msgid ""
"When **exporting**, the following may also be defined depending on the "
"export features:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:234
msgid ""
"One of ``GODOT_PC``, ``GODOT_MOBILE``, or ``GODOT_WEB`` depending on the "
"platform type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:236
msgid ""
"One of ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` on Android only "
"depending on the architecture."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:238
msgid ""
"One of ``GODOT_ARM64`` or ``GODOT_ARMV7`` on iOS only depending on the "
"architecture."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:240
msgid ""
"Any of ``GODOT_S3TC``, ``GODOT_ETC``, and ``GODOT_ETC2`` depending on the "
"texture compression type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:242
msgid ""
"Any custom features added in the export menu will be capitalized and "
"prefixed: ``foo`` -> ``GODOT_FOO``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_features.rst:244
msgid ""
"To see an example project, see the OS testing demo: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/os_test"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:4
msgid "C# API differences to GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:6
msgid "This is a (incomplete) list of API differences between C# and GDScript."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:9
msgid "General differences"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:11
msgid ""
"As explained in the :ref:`doc_c_sharp`, C# generally uses ``PascalCase`` "
"instead of the ``snake_case`` used in GDScript and C++."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:17
msgid ""
"Global functions and some constants had to be moved to classes, since C# "
"does not allow declaring them in namespaces. Most global constants were "
"moved to their own enums."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:24
msgid ""
"Global constants were moved to their own enums. For example, ``ERR_*`` "
"constants were moved to the ``Error`` enum."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:27
msgid "Special cases:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:32
msgid "``SPKEY``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:32
msgid "``GD.SpKey``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:33
msgid "``TYPE_*``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:33
msgid "``Variant.Type`` enum"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:34
msgid "``OP_*``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:34
msgid "``Variant.Operator`` enum"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:38
msgid "Math functions"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:40
msgid ""
"Math global functions, like ``abs``, ``acos``, ``asin``, ``atan`` and "
"``atan2``, are located under ``Mathf`` as ``Abs``, ``Acos``, ``Asin``, "
"``Atan`` and ``Atan2``. The ``PI`` constant can be found as ``Mathf.Pi``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:45
msgid "Random functions"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:47
msgid ""
"Random global functions, like ``rand_range`` and ``rand_seed``, are located "
"under ``GD``. Example: ``GD.RandRange`` and ``GD.RandSeed``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:51
msgid "Other functions"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:53
msgid ""
"Many other global functions like ``print`` and ``var2str`` are located under "
"``GD``. Example: ``GD.Print`` and ``GD.Var2Str``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:56
msgid "Exceptions:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:61
msgid "``weakref(obj)``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:61
msgid "``Object.WeakRef(obj)``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:62
msgid "``is_instance_valid(obj)``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:62
msgid "``Object.IsInstanceValid(obj)``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:66
msgid "Tips"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:68
msgid ""
"Sometimes it can be useful to use the ``using static`` directive. This "
"directive allows to access the members and nested types of a class without "
"specifying the class name."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:86
msgid "Export keyword"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:88
msgid ""
"Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword. "
"This attribute can also be provided with optional :ref:"
"`PropertyHint<enum_@GlobalScope_PropertyHint>` and ``hintString`` "
"parameters. Default values can be set by assigning a value."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:114
msgid "Signal keyword"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:116
msgid ""
"Use the ``[Signal]`` attribute to declare a signal instead of the GDScript "
"``signal`` keyword. This attribute should be used on a `delegate`, whose "
"name signature will be used to define the signal."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:124
msgid "See also: :ref:`doc_c_sharp_signals`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:129
msgid ""
"GDScript has the ability to defer the initialization of a member variable "
"until the ready function is called with `onready` (cf. :ref:"
"`doc_gdscript_onready_keyword`). For example:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:137
msgid ""
"However C# does not have this ability. To achieve the same effect you need "
"to do this."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:149
msgid "Singletons"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:151
msgid ""
"Singletons are available as static classes rather than using the singleton "
"pattern. This is to make code less verbose than it would be with an "
"``Instance`` property."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:160
msgid ""
"However, in some very rare cases this is not enough. For example, you may "
"want to access a member from the base class ``Godot.Object``, like "
"``Connect``. For such use cases we provide a static property named "
"``Singleton`` that returns the singleton instance. The type of this instance "
"is ``Godot.Object``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:174
msgid ""
"Use ``System.String`` (``string``). Most of Godot's String methods are "
"provided by the ``StringExtensions`` class as extension methods."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:184
msgid "There are a few differences, though:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:186
msgid ""
"``erase``: Strings are immutable in C#, so we cannot modify the string "
"passed to the extension method. For this reason, ``Erase`` was added as an "
"extension method of ``StringBuilder`` instead of string. Alternatively, you "
"can use ``string.Remove``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:190
msgid ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: An additional method is provided, "
"which is an overload of ``IsSubsequenceOf``, allowing you to explicitly "
"specify case sensitivity:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:201
msgid ""
"``Match``/``Matchn``/``ExprMatch``: An additional method is provided besides "
"``Match`` and ``Matchn``, which allows you to explicitly specify case "
"sensitivity:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:212
msgid "Basis"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:214
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Basis()`` initializes all primitive members to their default value. Use "
"``Basis.Identity`` for the equivalent of ``Basis()`` in GDScript and C++."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:218
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:264
msgid "The following method was converted to a property with a different name:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:223
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:239
msgid "``get_scale()``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:223
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:239
msgid "``Scale``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:227
msgid "Transform2D"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:229
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Transform2D()`` initializes all primitive members to their default value. "
"Please use ``Transform2D.Identity`` for the equivalent of ``Transform2D()`` "
"in GDScript and C++."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:233
msgid ""
"The following methods were converted to properties with their respective "
"names changed:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:238
msgid "``get_rotation()``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:238
msgid "``Rotation``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:243
msgid "Plane"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:245
msgid ""
"The following method was converted to a property with a *slightly* different "
"name:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:250
msgid "``center()``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:250
msgid "``Center``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:254
msgid "Rect2"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:256
msgid ""
"The following field was converted to a property with a *slightly* different "
"name:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:261
msgid "``end``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:261
msgid "``End``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:269
msgid "``get_area()``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:269
msgid "``Area``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:273
msgid "Quat"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:275
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Quat()`` initializes all primitive members to their default value. Please "
"use ``Quat.Identity`` for the equivalent of ``Quat()`` in GDScript and C++."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:279
msgid ""
"The following methods were converted to a property with a different name:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:284
msgid "``length()``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:284
msgid "``Length``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:285
msgid "``length_squared()``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:285
msgid "``LengthSquared``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:291
msgid ""
"*This is temporary. PoolArrays will need their own types to be used the way "
"they are meant to.*"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:296
msgid "``Array``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:296
msgid "``Godot.Collections.Array``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:297
msgid "``PoolIntArray``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:297
msgid "``int[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:298
msgid "``PoolByteArray``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:298
msgid "``byte[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:299
msgid "``PoolFloatArray``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:299
msgid "``float[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:300
msgid "``PoolStringArray``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:300
msgid "``String[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:301
msgid "``PoolColorArray``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:301
msgid "``Color[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:302
msgid "``PoolVector2Array``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:302
msgid "``Vector2[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:303
msgid "``PoolVector3Array``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:303
msgid "``Vector3[]``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:306
msgid ""
"``Godot.Collections.Array<T>`` is a type-safe wrapper around ``Godot."
"Collections.Array``. Use the ``Godot.Collections.Array<T>(Godot.Collections."
"Array)`` constructor to create one."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:312
msgid "Use ``Godot.Collections.Dictionary``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:314
msgid ""
"``Godot.Collections.Dictionary<T>`` is a type-safe wrapper around ``Godot."
"Collections.Dictionary``. Use the ``Godot.Collections.Dictionary<T>(Godot."
"Collections.Dictionary)`` constructor to create one."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:318
msgid "Variant"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:320
msgid "``System.Object`` (``object``) is used instead of ``Variant``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:323
msgid "Communicating with other scripting languages"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:325
msgid "This is explained extensively in :ref:`doc_cross_language_scripting`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:330
msgid ""
"Something similar to GDScript's ``yield`` with a single parameter can be "
"achieved with C#'s `yield keyword <https://docs.microsoft.com/en-US/dotnet/"
"csharp/language-reference/keywords/yield>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:333
msgid ""
"The equivalent of yield on signal can be achieved with async/await and "
"``Godot.Object.ToSignal``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:343
msgid "Other differences"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:345
msgid ""
"``preload``, as it works in GDScript, is not available in C#. Use ``GD."
"Load`` or ``ResourceLoader.Load`` instead."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:348
msgid "Other differences:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:353
msgid "``Color8``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:353
msgid "``Color.Color8``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:354
msgid "``is_inf``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:354
msgid "``float.IsInfinity``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:355
msgid "``is_nan``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:355
msgid "``float.IsNaN``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:356
msgid "``dict2inst``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:356
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:357
msgid "TODO"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_differences.rst:357
msgid "``inst2dict``"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:4
msgid "C# style guide"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:6
msgid ""
"Having well-defined and consistent coding conventions is important for every "
"project, and Godot is no exception to this rule."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:9
msgid ""
"This page contains a coding style guide, which is followed by developers of "
"and contributors to Godot itself. As such, it is mainly intended for those "
"who want to contribute to the project, but since the conventions and "
"guidelines mentioned in this article are those most widely adopted by the "
"users of the language, we encourage you to do the same, especially if you do "
"not have such a guide yet."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:14
msgid ""
"This article is by no means an exhaustive guide on how to follow the "
"standard coding conventions or best practices. If you feel unsure of an "
"aspect which is not covered here, please refer to more comprehensive "
"documentation, such as `C# Coding Conventions <https://docs.microsoft.com/en-"
"us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions>`_ or "
"`Framework Design Guidelines <https://docs.microsoft.com/en-us/dotnet/"
"standard/design-guidelines/naming-guidelines>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:21
msgid "Language specification"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:23
msgid ""
"Godot currently uses **C# version 7.0** in its engine and example source "
"code. So, before we move to a newer version, care must be taken to avoid "
"mixing language features only available in C# 7.1 or later."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:27
msgid ""
"For detailed information on C# features in different versions, please see "
"`What's New in C# <https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/"
">`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:34
msgid "General guidelines"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:36
msgid "Use line feed (**LF**) characters to break lines, not CRLF or CR."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:37
msgid ""
"Use one line feed character at the end of each file, except for `csproj` "
"files."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:38
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:39
msgid ""
"Use **4 spaces** instead of tabs for indentation (which is referred to as "
"\"soft tabs\")."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:40
msgid ""
"Consider breaking a line into several if it's longer than 100 characters."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:44
#: ../../docs/tutorials/shaders/shaders_style_guide.rst:102
msgid "Line breaks and blank lines"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:46
msgid ""
"For a general indentation rule, follow `the \"Allman Style\" <https://en."
"wikipedia.org/wiki/Indentation_style#Allman_style>`_ which recommends "
"placing the brace associated with a control statement on the next line, "
"indented to the same level:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:63
msgid "However, you may choose to omit line breaks inside brackets:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:65
msgid "For simple property accessors."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:66
msgid "For simple object, array, or collection initializers."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:67
msgid "For abstract auto property, indexer, or event declarations."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:89
msgid "Insert a blank line:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:91
msgid "After a list of ``using`` statements."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:92
msgid "Between method, properties, and inner type declarations."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:93
msgid "At the end of each file."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:95
msgid ""
"Field and constant declarations can be grouped together according to "
"relevance. In that case, consider inserting a blank line between the groups "
"for easier reading."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:98
msgid "Avoid inserting a blank line:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:100
msgid "After ``{``, the opening brace."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:101
msgid "Before ``}``, the closing brace."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:102
msgid "After a comment block or a single-line comment."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:103
msgid "Adjacent to another blank line."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:142
msgid "Using spaces"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:144
msgid "Insert a space:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:146
msgid "Around a binary and tertiary operator."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:147
msgid ""
"Between an opening parenthesis and ``if``, ``for``, ``foreach``, ``catch``, "
"``while``, ``lock`` or ``using`` keywords."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:148
msgid "Before and within a single line accessor block."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:149
msgid "Between accessors in a single line accessor block."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:150
msgid "After a comma which is not at the end of a line."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:151
msgid "After a semicolon in a ``for`` statement."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:152
msgid "After a colon in a single line ``case`` statement."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:153
msgid "Around a colon in a type declaration."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:154
msgid "Around a lambda arrow."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:155
msgid ""
"After a single-line comment symbol (``//``), and before it if used at the "
"end of a line."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:157
msgid "Do not use a space:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:159
msgid "After type cast parentheses."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:160
msgid "Within single line initializer braces."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:162
msgid ""
"The following example shows a proper use of spaces, according to some of the "
"above mentioned conventions:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:199
msgid ""
"Use **PascalCase** for all namespaces, type names and member level "
"identifiers (i.e. methods, properties, constants, events), except for "
"private fields:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:220
msgid ""
"Use **camelCase** for all other identifiers (i.e. local variables, method "
"arguments), and use an underscore (``_``) as a prefix for private fields "
"(but not for methods or properties, as explained above):"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:234
msgid ""
"There's an exception with acronyms which consist of two letters, like "
"``UI``, which should be written in uppercase letters where PascalCase would "
"be expected, and in lowercase letters otherwise."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:237
msgid ""
"Note that ``id`` is **not** an acronym, so it should be treated as a normal "
"identifier:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:248
msgid ""
"It is generally discouraged to use a type name as a prefix of an identifier, "
"like ``string strText`` or ``float fPower``, for example. An exception is "
"made, however, for interfaces, which **should**, in fact, have an uppercase "
"letter ``I`` prefixed to their names, like ``IInventoryHolder`` or "
"``IDamageable``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:252
msgid ""
"Lastly, consider choosing descriptive names and do not try to shorten them "
"too much if it affects readability."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:255
msgid ""
"For instance, if you want to write code to find a nearby enemy and hit it "
"with a weapon, prefer:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:261
msgid "Rather than:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:282
msgid "Implicitly typed local variables"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:284
msgid ""
"Consider using implicitly typing (``var``) for declaration of a local "
"variable, but do so **only when the type is evident** from the right side of "
"the assignment:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:314
msgid "Other considerations"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:316
msgid "Use explicit access modifiers."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:317
msgid "Use properties instead of non-private fields."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:318
msgid ""
"Use modifiers in this order: ``public``/``protected``/``private``/"
"``internal``/``virtual``/``override``/``abstract``/``new``/``static``/"
"``readonly``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:320
msgid ""
"Avoid using fully-qualified names or ``this.`` prefix for members when it's "
"not necessary."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:321
msgid "Remove unused ``using`` statements and unnecessary parentheses."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:322
msgid "Consider omitting the default initial value for a type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:323
msgid ""
"Consider using null-conditional operators or type initializers to make the "
"code more compact."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst:324
msgid ""
"Use safe cast when there is a possibility of the value being a different "
"type, and use direct cast otherwise."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:4
msgid "What is GDNative?"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:9
msgid ""
"**GDNative** is a Godot-specific technology that lets the engine interact "
"with native `shared libraries <https://en.wikipedia.org/wiki/"
"Library_(computing)#Shared_libraries>`__ at run-time. You can use it to run "
"native code without compiling it with the engine."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:13
msgid ""
"GDNative is *not* a scripting language and has no relation to :ref:`GDScript "
"<doc_gdscript>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:17
msgid "Differences between GDNative and C++ modules"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:19
msgid ""
"You can use both GDNative and :ref:`C++ modules <doc_custom_modules_in_c++>` "
"to run C or C++ code in a Godot project."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:22
msgid ""
"They also both allow you to integrate third-party libraries into Godot. The "
"one you should choose depends on your needs."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:26
msgid "Advantages of GDNative"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:28
msgid ""
"Unlike modules, GDNative doesn't require compiling the engine's source code, "
"making it easier to distribute your work. It gives you access to most of the "
"API available to GDScript C#, allowing you to code game logic with full "
"control regarding performance. It's ideal if you need high-performance code "
"you'd like to distribute as an add-on in the :ref:`asset library "
"<doc_what_is_assetlib>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:34
msgid "Also:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:36
msgid ""
"GDNative is not limited to C and C++. Thanks to :ref:`third-party bindings "
"<doc_what_is_gdnative_third_party_bindings>`, you can use it with many other "
"languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:39
msgid ""
"You can use the same compiled GDNative library in the editor and exported "
"project. With C++ modules, you have to recompile all the export templates "
"you plan to use if you require its functionality at run-time."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:42
msgid ""
"GDNative only requires you to compile your library, not the whole engine. "
"That's unlike C++ modules, which are statically compiled into the engine. "
"Every time you change a module, you need to recompile the engine. Even with "
"incremental builds, this process is slower than using GDNative."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:48
msgid "Advantages of C++ modules"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:50
msgid ""
"We recommend :ref:`C++ modules <doc_custom_modules_in_c++>` in cases where "
"GDNative isn't enough:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:53
msgid ""
"C++ modules provide deeper integration into the engine. GDNative's access is "
"limited to what the scripting API exposes."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:55
msgid ""
"You can use C++ modules to provide additional features in a project without "
"carrying native library files around. This extends to exported projects."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:57
msgid ""
"C++ modules are supported on all platforms. In contrast, GDNative has only "
"limited support on HTML5 (cannot be used together with multi-threading), and "
"is not supported on Universal Windows Platform (UWP)."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:60
msgid ""
"C++ modules can be faster than GDNative, especially when the code requires a "
"lot of communication through the scripting API."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:64
msgid "Supported languages"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:66
msgid ""
"The Godot developers officially support the following language bindings for "
"GDNative:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:69
msgid "C++ :ref:`(tutorial) <doc_gdnative_cpp_example>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:70
msgid "C :ref:`(tutorial) <doc_gdnative_c_example>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:74
msgid ""
"There are no plans to support additional languages with GDNative officially. "
"That said, the community offers several bindings for other languages (see "
"below)."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:80
msgid "The bindings below are developed and maintained by the community:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:85
msgid "`D <https://github.com/godot-d/godot-d>`__"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:86
msgid "`Kotlin <https://github.com/utopia-rise/godot-kotlin-jvm>`__"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:87
msgid "`Nim <https://github.com/pragmagic/godot-nim>`__"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:88
msgid "`Python <https://github.com/touilleMan/godot-python>`__"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:89
msgid "`Rust <https://github.com/godot-rust/godot-rust>`__"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:93
msgid ""
"Not all bindings mentioned here may be production-ready. Make sure to "
"research options thoroughly before starting a project with one of those. "
"Also, double-check whether the binding is compatible with the Godot version "
"you're using."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:99
msgid "Version compatibility"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:101
msgid ""
":ref:`Unlike Godot itself <doc_release_policy>`, GDNative has stricter "
"version compatibility requirements as it relies on low-level *ptrcalls* to "
"function."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/what_is_gdnative.rst:104
msgid ""
"GDNative add-ons compiled for a given Godot version are only guaranteed to "
"work with the same minor release series. For example, a GDNative add-on "
"compiled for Godot 3.4 will only work with Godot 3.4, 3.4.1, 3.4.2… but not "
"Godot 3.3 or 3.5."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:4
msgid "GDNative C example"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:9
msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:14
msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:18
msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:22
msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:43
msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:49
msgid "Before we start you'll need a few things:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:51
msgid "A Godot executable for your target version."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:52
msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:55
msgid ""
"A Git clone of the `godot-headers repository <https://github.com/godotengine/"
"godot-headers.git>`_: these are the C headers for Godot's public API exposed "
"to GDNative."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:59
msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:66
msgid "This will download the required files into that folder."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:70
msgid ""
"If you plan to use Git for your GDNative project, you can also add ``godot-"
"headers`` as a Git submodule."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:75
msgid ""
"The ``godot-headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.4``) and ideally actual release (e.g. ``3.4.4-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:83
msgid ""
"The ``master`` branch of the ``godot-headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:87
msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot-headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.4.4-stable`` tag for "
"use with Godot 3.4.4. In your cloned repository, you can do:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:97
msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.4``), which you would also "
"check out with ``git checkout 3.4``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:101
msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:106
msgid "Our C source"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:108
msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:126
msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot-headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:131
msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:137
msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:149
msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:156
msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:160
msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:163
msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:176
msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:180
msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:187
msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:206
msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:218
msgid ""
"Finally, we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:243
msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:250
msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot-headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:260
msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:270
msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:280
msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:286
msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:299
msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:308
msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:329
msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:338
msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:344
msgid "The variant we return is destroyed automatically by Godot."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:346
msgid "And that is the whole source code of our module."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:351
msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:355
msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:359
msgid "On Linux:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:366
msgid "On macOS:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:373
msgid "On Windows:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:382
msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:388
msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:390
msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:396
msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:399
msgid "Start by clicking the create resource button in the Inspector:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:403
msgid "And select ``GDNativeLibrary``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:407
msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:413
msgid "General properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:415
msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:417
msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:423
msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:427
msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:434
msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:439
msgid "Platform libraries"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:441
msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:444
msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:449
msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:454
msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:461
msgid "Saving the resource"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:463
msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:468
msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:495
msgid "Creating the NativeScript (``.gdns``) file"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:497
msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"SIMPLE\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:501
msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:506
msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"SIMPLE\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:515
msgid ""
"The *Class Name* must have the same spelling as the one given in "
"``godot_nativescript_init`` when registering the class."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:519
msgid "Finally, click on the save icon and save this as ``bin/simple.gdns``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:523
msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:529
msgid "Select the control node and attach a script to it:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:533
msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:537
msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:539
msgid "Now we can implement our ``main.gd`` code:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_c_example.rst:551
msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:4
msgid "GDNative C++ example"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:9
msgid ""
"This tutorial builds on top of the information given in the :ref:`GDNative C "
"example <doc_gdnative_c_example>`, so we highly recommend you read that "
"first."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:13
msgid ""
"The C++ bindings for GDNative are built on top of the NativeScript GDNative "
"API and provide a nicer way to \"extend\" nodes in Godot using C++. This is "
"equivalent to writing scripts in GDScript, but in C++ instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:17
msgid ""
"You can download the full example we'll be creating in this tutorial `on "
"GitHub <https://github.com/BastiaanOlij/gdnative_cpp_example>`__."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:23
msgid "There are a few prerequisites you'll need:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:25
msgid "a Godot 3.x executable,"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:26
msgid "a C++ compiler,"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:27
msgid "SCons as a build tool,"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:28
msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:31
msgid ""
"See also :ref:`Compiling <toc-devel-compiling>` as the build tools are "
"identical to the ones you need to compile Godot from source."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:34
msgid ""
"You can download these repositories from GitHub or let Git do the work for "
"you. Note that these repositories now have different branches for different "
"versions of Godot. GDNative modules written for an earlier version of Godot "
"will work in newer versions (with the exception of one breaking change in "
"ARVR interfaces between 3.0 and 3.1) but not vice versa so make sure you "
"download the correct branch. Also note that the version of Godot you use to "
"generate the ``api.json`` with becomes your minimum version."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:44
msgid ""
"`GDExtension <https://godotengine.org/article/introducing-gd-extensions>`__ "
"has been merged in the ``master`` branch of godot-cpp, but it is only "
"compatible with the upcoming Godot 4.0. Therefore, you need to use the ``3."
"x`` branch of godot-cpp to use GDNative and follow this example."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:50
msgid ""
"This tutorial covers only GDNative in Godot 3.x, *not* GDExtension in Godot "
"4.0."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:52
msgid ""
"If you are versioning your project using Git, it is a good idea to add them "
"as Git submodules:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:64
msgid ""
"If you decide to just download the repositories or clone them into your "
"project folder, make sure to keep the folder layout identical to the one "
"described here, as much of the code we'll be showcasing here assumes the "
"project follows this layout."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:69
msgid "Do make sure you clone recursive to pull in both repositories:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:79
msgid ""
"``godot-cpp`` now includes ``godot-headers`` as a nested submodule, if "
"you've manually downloaded them please make sure to place ``godot-headers`` "
"inside of the ``godot-cpp`` folder."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:83
msgid ""
"You don't have to do it this way, but we've found it easiest to manage. If "
"you decide to download the repositories or clone them into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:88
msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:97
msgid "This will clone these two repositories into your project folder."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:100
msgid "Building the C++ bindings"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:102
msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:105
msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, simply call the Godot executable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:113
msgid ""
"Place the resulting ``api.json`` file in the project folder and add "
"``use_custom_api_file=yes custom_api_file=../api.json`` to the scons command "
"below."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:117
msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``osx`` depending on your OS):"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:120
msgid ""
"To speed up compilation, add `-jN` at the end of the SCons command line "
"where `N` is the number of CPU threads you have on your system. The example "
"below uses 4 threads."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:129
msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:134
msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:137
msgid "Creating a simple plugin"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:139
msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:142
msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDNative module's folder structure."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:145
msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:148
msgid ""
"Back in the top-level GDNative module folder, we're also going to create a "
"subfolder called ``src`` in which we'll place our source files."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:151
msgid ""
"You should now have ``demo``, ``godot-cpp``, ``godot-headers``, and ``src`` "
"directories in your GDNative module."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:154
msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDNative node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:188
msgid ""
"There are a few things of note to the above. We're including ``Godot.hpp`` "
"which contains all our basic definitions. After that, we include ``Sprite."
"hpp`` which contains bindings to the Sprite class. We'll be extending this "
"class in our module."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:193
msgid ""
"We're using the namespace ``godot``, since everything in GDNative is defined "
"within this namespace."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:196
msgid ""
"Then we have our class definition, which inherits from our Sprite through a "
"container class. We'll see a few side effects of this later on. The "
"``GODOT_CLASS`` macro sets up a few internal things for us."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:200
msgid "After that, we declare a single member variable called ``time_passed``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:202
msgid ""
"In the next block we're defining our methods, we obviously have our "
"constructor and destructor defined, but there are two other functions that "
"will likely look familiar to some, and one new method."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:206
msgid ""
"The first is ``_register_methods``, which is a static function that Godot "
"will call to find out which methods can be called on our NativeScript and "
"which properties it exposes. The second is our ``_process`` function, which "
"will work exactly the same as the ``_process`` function you're used to in "
"GDScript. The third is our ``_init`` function which is called after Godot "
"has properly set up our object. It has to exist even if you don't place any "
"code in it."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:213
msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:245
msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file. Note that the ``register_method`` "
"call **must** expose the ``_process`` method, otherwise Godot will not be "
"able to use it. However, we do not have to tell Godot about our constructor, "
"destructor and ``_init`` functions."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:251
msgid ""
"The other method of note is our ``_process`` function, which simply keeps "
"track of how much time has passed and calculates a new position for our "
"sprite using a sine and cosine function. What stands out is calling ``owner-"
">set_position`` to call one of the built-in methods of our Sprite. This is "
"because our class is a container class; ``owner`` points to the actual "
"Sprite node our script relates to."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:258
msgid ""
"There is one more C++ file we need; we'll name it ``gdlibrary.cpp``. Our "
"GDNative plugin can contain multiple NativeScripts, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the "
"NativeScripts in our GDNative plugin."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:282
msgid ""
"Note that we are not using the ``godot`` namespace here, since the three "
"functions implemented here need to be defined without a namespace."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:285
msgid ""
"The ``godot_gdnative_init`` and ``godot_gdnative_terminate`` functions get "
"called respectively when Godot loads our plugin and when it unloads it. All "
"we're doing here is parse through the functions in our bindings module to "
"initialize them, but you might have to set up more things depending on your "
"needs."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:291
msgid ""
"The important function is the third function called "
"``godot_nativescript_init``. We first call a function in our bindings "
"library that does its usual stuff. After that, we call the function "
"``register_class`` for each of our classes in our library."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:297
msgid "Compiling the plugin"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:299
msgid ""
"We cannot easily write by hand a ``SConstruct`` file that SCons would use "
"for building. For the purpose of this example, just use :download:`this "
"hardcoded SConstruct file <files/cpp_example/SConstruct>` we've prepared. "
"We'll cover a more customizable, detailed example on how to use these build "
"files in a subsequent tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:307
msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 3.0 documentation."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:311
msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDNative "
"module folder besides ``godot-cpp``, ``godot-headers`` and ``demo``, then "
"run:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:318
msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:322
msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=release`` switch."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:327
msgid "Using the GDNative module"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:329
msgid ""
"Before we jump back into Godot, we need to create two more files in ``demo/"
"bin/``. Both can be created using the Godot editor, but it may be faster to "
"create them directly."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:333
msgid ""
"The first one is a file that lets Godot know what dynamic libraries should "
"be loaded for each platform and is called ``gdexample.gdnlib``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:357
msgid ""
"This file contains a ``general`` section that controls how the module is "
"loaded. It also contains a prefix section which should be left on ``godot_`` "
"for now. If you change this, you'll need to rename various functions that "
"are used as entry points. This was added for the iPhone platform because it "
"doesn't allow dynamic libraries to be deployed, yet GDNative modules are "
"linked statically."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:363
msgid ""
"The ``entry`` section is the important bit: it tells Godot the location of "
"the dynamic library in the project's filesystem for each supported platform. "
"It will also result in *just* that file being exported when you export the "
"project, which means the data pack won't contain libraries that are "
"incompatible with the target platform."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:369
msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDNative plugin implements someone else's library and requires you to supply "
"a third-party dynamic library with your project."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:374
msgid ""
"If you double click on the ``gdexample.gdnlib`` file within Godot, you'll "
"see there are far more options to set:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:379
msgid ""
"The second file we need to create is a file used by each NativeScript we've "
"added to our plugin. We'll name it ``gdexample.gdns`` for our gdexample "
"NativeScript."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:395
msgid ""
"This is a standard Godot resource; you could just create it directly in your "
"scene, but saving it to a file makes it much easier to reuse it in other "
"places. This resource points to our gdnlib file, so that Godot can know "
"which dynamic library contains our NativeScript. It also defines the "
"``class_name`` which identifies the NativeScript in our plugin we want to "
"use."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:401
msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a Sprite to our scene:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:406
msgid ""
"We're going to assign the Godot logo to this sprite as our texture, disable "
"the ``centered`` property and drag our ``gdexample.gdns`` file onto the "
"``script`` property of the sprite:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:412
msgid "We're finally ready to run the project:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:417
msgid "Adding properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:419
msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDNative you have to register the properties and there are two "
"ways of doing this. You can either bind directly to a member or use a setter "
"and getter function."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:426
msgid ""
"There is a third option, just like in GDScript you can directly implement "
"the ``_get_property_list``, ``_get`` and ``_set`` methods of an object but "
"that goes far beyond the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:430
msgid ""
"We'll examine both starting with the direct bind. Lets add a property that "
"allows us to control the amplitude of our wave."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:433
msgid ""
"In our ``gdexample.h`` file we simply need to add a member variable like so:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:443
msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:470
msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:477
msgid ""
"The ``reloadable`` property in the ``gdexample.gdnlib`` file must be set to "
"``true`` for the Godot editor to automatically pick up the newly added "
"property."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:481
msgid ""
"However, this setting should be used with care, especially when tool classes "
"are used, as the editor might hold objects then that have script instances "
"attached to them that are managed by a GDNative library."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:485
msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:500
msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:537
msgid ""
"Now when the project is compiled, we'll see another property called speed. "
"Changing its value will make the animation go faster or slower."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:540
msgid ""
"For this example, there is no obvious advantage of using a setter and "
"getter. A good reason for a setter would be if you wanted to react on the "
"variable being changed. If you don't need to do something like that, binding "
"the variable is enough."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:544
msgid ""
"Getters and setters become far more useful in more complex scenarios where "
"you need to make additional choices based on the state of your object."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:549
msgid ""
"For simplicity, we've left out the optional parameters in the "
"register_property<class, type> method call. These parameters are "
"``rpc_mode``, ``usage``, ``hint`` and ``hint_string``. These can be used to "
"further configure how properties are displayed and set on the Godot side."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:554
msgid ""
"Modern C++ compilers are able to infer the class and variable type and allow "
"you to omit the ``<GDExample, float>`` part of our ``register_property`` "
"method. We've had mixed experiences with this however."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:561
msgid ""
"Last but not least, signals fully work in GDNative as well. Having your "
"module react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:566
msgid "This is the required syntax:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:572
msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_register_methods`` method."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:575
msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:579
msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:589
msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:593
msgid ""
"In our ``_register_methods`` method, we need to declare our signal. This is "
"done as follows:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:606
msgid ""
"Here, our ``register_signal`` method can be a single call first taking the "
"signals name, then having pairs of values specifying the parameter name and "
"type of each parameter we'll send along with this signal."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:610
msgid "Next, we'll need to change our ``_process`` method:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:632
msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:635
msgid ""
"Once the GDNative library is compiled, we can go into Godot and select our "
"sprite node. In the **Node** dock, we can find our new signal and link it up "
"by pressing the **Connect** button or double-clicking the signal. We've "
"added a script on our main node and implemented our signal like this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:647
msgid "Every second, we output our position to the console."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:652
msgid ""
"The above is only a simple example, but we hope it shows you the basics. You "
"can build upon this example to create full-fledged scripts to control nodes "
"in Godot using C++."
msgstr ""

#: ../../docs/tutorials/scripting/gdnative/gdnative_cpp_example.rst:656
msgid ""
"To edit and recompile the plugin while the Godot editor remains open, re-run "
"the project after the library has finished building."
msgstr ""

#: ../../docs/tutorials/scripting/debug/index.rst:2
msgid "Debug"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:4
msgid "Overview of debugging tools"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:6
msgid ""
"This guide will give you an overview of the available debugging tools in the "
"engine."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:9
msgid ""
"Godot comes with a powerful debugger and profilers to track down bugs, "
"inspect your game at runtime, monitor essential metrics, and measure "
"performances. It also offers options to visualize collision boxes and "
"navigation polygons in the running game."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:14
msgid ""
"Finally, you have options to debug the game running on a remote device and "
"to reload changes to your scenes or your code while the game is running."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:18
msgid "Debugger Panel"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:20
msgid ""
"Many of Godot's debugging tools are part of the Debugger panel, which you "
"can find information about in :ref:`doc_debugger_panel`."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:24
msgid "Debug menu options"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:26
msgid ""
"There are a few common debug options you can toggle on or off when running "
"your game in the editor, which can help you in debugging your game."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:29
msgid "You can find these options in the **Debug** editor menu."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:33
msgid "Here are the descriptions of the options:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:36
msgid "Deploy with Remote Debug"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:38
msgid ""
"When exporting and deploying, the resulting executable will attempt to "
"connect to the IP of your computer for debugging."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:42
msgid "Small Deploy with Network FS"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:44
msgid ""
"This option speeds up testing for games with a large footprint on remote "
"devices."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:46
msgid ""
"When **Small Deploy with Network FS** is on, instead of exporting the full "
"game, deploying the game builds a minimal executable. The editor then "
"provides files from the project over the network."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:50
msgid ""
"Also, on Android, the game is deployed using the USB cable to speed up "
"deployment."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:53
msgid "Visible Collision Shapes"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:55
msgid ""
"This option makes collision shapes and raycast nodes visible in the running "
"game."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:58
msgid "Visible Navigation"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:60
msgid "Navigation meshes and polygons will be visible on the running game."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:63
msgid "Sync Scene Changes"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:65
msgid ""
"With this option, any change you make to a scene in the editor at runtime "
"appears instantly. When used remotely on a device, this is more efficient "
"with the network filesystem."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:70
msgid "Sync Script Changes"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:72
msgid ""
"Any script that is saved will be reloaded on the running game. When used "
"remotely on a device, this is more efficient with the network filesystem."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:76
msgid "Script editor debug tools and options"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:78
msgid ""
"The script editor has its own set of debug tools for use with breakpoints "
"and two options. The breakpoint tools can also be found in the **Debugger** "
"tab of the debugger."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:84
msgid ""
"The **Break** button causes a break in the script like a breakpoint would. "
"**Continue** makes the game continue after pausing at a breakpoint. **Step "
"Over** goes to the next line of code, and **Step Into** goes into a function "
"if possible. Otherwise, it does the same thing as **Step Over**."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:89
msgid ""
"The **Keep Debugger Open** option keeps the debugger open after a scene has "
"been closed. And the **Debug with External Editor** option lets you debug "
"your game with an external editor."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:95
#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:37
msgid ""
"Breakpoints won't break on code if it's :ref:`running in a thread "
"<doc_using_multiple_threads>`. This is a current limitation of the GDScript "
"debugger."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:100
msgid "Debug project settings"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:102
msgid ""
"In the project settings, there is a **Debug** category with three "
"subcategories which control different things."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:106
msgid "Settings"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:108
msgid ""
"These are some general settings such as printing the current FPS to the "
"**Output** panel, the maximum amount of functions when profiling and others."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:115
msgid ""
"These settings allow you to toggle specific GDScript warnings, such as for "
"unused variables. You can also turn off warnings completely."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:119
msgid "Shapes"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:121
msgid ""
"Shapes are where you can adjust the color of shapes that only appear for "
"debugging purposes, such as collision and navigation shapes."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:125
msgid "Remote in scene dock"
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:127
msgid ""
"When running a game in the editor two options appear at the top of the "
"**Scene** dock, **Remote** and **Local**. While using **Remote** you can "
"inspect or change the nodes' parameters in the running project."
msgstr ""

#: ../../docs/tutorials/scripting/debug/overview_of_debugging_tools.rst:133
msgid ""
"Some editor settings related to debugging can be found inside the **Editor "
"Settings**, under the **Network > Debug** and **Debugger** sections."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:4
msgid "Debugger panel"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:6
msgid ""
"Many of Godot's debugging tools, including the debugger, can be found in the "
"debugger panel at the bottom of the screen. Click on **Debugger** to open it."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:11
msgid ""
"The debugger panel is split into several tabs, each focusing on a specific "
"task."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:16
msgid ""
"The Debugger tab opens automatically when the GDScript compiler reaches a "
"breakpoint in your code."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:19
msgid ""
"It gives you a `stack trace <https://en.wikipedia.org/wiki/Stack_trace>`__, "
"information about the state of the object, and buttons to control the "
"program's execution."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:23
msgid "You can use the buttons in the top-right corner to:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:25
msgid ""
"Skip all breakpoints. That way, you can save breakpoints for future "
"debugging sessions."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:27
msgid "Copy the current error message."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:28
msgid ""
"**Step Into** the code. This button takes you to the next line of code, and "
"if it's a function, it steps line-by-line through the function."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:30
msgid ""
"**Step Over** the code. This button goes to the next line of code, but it "
"doesn't step line-by-line through functions."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:32
msgid "**Break**. This button pauses the game's execution."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:33
msgid "**Continue**. This button resumes the game after a breakpoint or pause."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:42
msgid "Errors"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:44
msgid ""
"This is where error and warning messages are printed while running the game."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:46
msgid ""
"You can disable specific warnings in **Project Settings > Debug > GDScript**."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:49
msgid "Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:51
msgid ""
"The debugger comes with three profilers for your processor, network "
"operations, and video memory."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:54
msgid ""
"The profiler is used to show why individual frames take as long as they do "
"to process and render."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:57
msgid ""
"Unlike other debugging tools, the profiler does not start automatically. It "
"can be started at any time during gameplay by pressing the start button. You "
"can even start the profiler before opening the game to profile startup "
"performance. It can also be started and stopped while the game is running "
"without losing information from when it was last running. The information it "
"records won't go away unless you click clear, or close the game, reopen it "
"and start the profiler again."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:65
msgid ""
"After starting and stopping the profiler, you should see things being kept "
"track of on the left and a graph on the right. The items listed on the left "
"are everything that contributes to frame time, and they should each have a "
"value for time and calls for the current frame you are looking at."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:70
msgid ""
"The frame number in the top right tells you which frame you are currently "
"looking at. You can change this by using the up or down arrows, typing in "
"the frame number, or clicking on the graph."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:74
msgid ""
"If you want to add something to your graph or think it looks too cluttered, "
"you can check and uncheck the box next to an item to add or remove it from "
"the graph."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:79
msgid "Network Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:81
msgid ""
"The Network Profiler contains a list of all the nodes that communicate over "
"the multiplayer API and, for each one, some counters on the amount of "
"incoming and outgoing network interactions. It also features a bandwidth "
"meter that displays the total bandwidth usage at any given moment."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:87
msgid "Monitors"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:89
msgid ""
"The monitors are graphs of several aspects of the game while its running "
"such as FPS, memory usage, how many nodes are in a scene and more. All "
"monitors keep track of stats automatically, so even if one monitor isn't "
"open while the game is running, you can open it later and see how the values "
"changed."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:95
msgid "Video RAM"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:97
msgid ""
"The **Video RAM** tab shows the video RAM usage of the game while it is "
"running. It provides a list of every resource using video RAM by resource "
"path, the type of resource it is, what format it is in, and how much Video "
"RAM that resource is using. There is also a total video RAM usage number at "
"the top right of the panel."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:105
msgid "Misc"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:107
msgid ""
"The **Misc** tab contains tools to identify the control nodes you are "
"clicking at runtime:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:110
msgid ""
"**Clicked Control** tells you where the clicked node is in the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:111
msgid "**Clicked Control Type** tells you the type of the node you clicked is."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:4
msgid "Idle and Physics Processing"
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:6
msgid ""
"Games run in a loop. Each frame, you need to update the state of your game "
"world before drawing it on screen. Godot provides two virtual methods in the "
"Node class to do so: :ref:`Node._process() <class_Node_method__process>` "
"and :ref:`Node._physics_process() <class_Node_method__physics_process>`. If "
"you define either or both in a script, the engine will call them "
"automatically."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:12
msgid "There are two types of processing available to you:"
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:14
msgid ""
"**Idle processing** allows you to run code that updates a node every frame, "
"as often as possible."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:16
msgid ""
"**Physics processing** happens at a fixed rate, 60 times per second by "
"default. This is independent of your game's actual framerate, and keeps "
"physics running smoothly. You should use it for anything that involves the "
"physics engine, like moving a body that collides with the environment."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:21
msgid ""
"You can activate idle processing by defining the ``_process()`` method in a "
"script. You can turn it off and back on by calling :ref:`Node.set_process() "
"<class_Node_method_set_process>`."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:25
#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:57
msgid "The engine calls this method every time it draws a frame:"
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:41
msgid ""
"Keep in mind that the frequency at which the engine calls ``_process()`` "
"depends on your application's framerate, which varies over time and across "
"devices."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:44
msgid ""
"The function's ``delta`` parameter is the time elapsed in seconds since the "
"previous call to ``_process()``. Use this parameter to make calculations "
"independent of the framerate. For example, you should always multiply a "
"speed value by ``delta`` to animate a moving object."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:49
msgid ""
"Physics processing works with a similar virtual function: "
"``_physics_process()``. Use it for calculations that must happen before each "
"physics step, like moving a character that collides with the game world. As "
"mentioned above, ``_physics_process()`` runs at fixed time intervals as much "
"as possible to keep the physics interactions stable. You can change the "
"interval between physics steps in the Project Settings, under Physics -> "
"Common -> Physics Fps. By default, it's set to run 60 times per second."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:73
msgid ""
"The function ``_process()`` is not synchronized with physics. Its rate "
"depends on hardware and game optimization. It also runs after the physics "
"step in single-threaded games."
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:77
msgid ""
"You can see the ``_process()`` function at work by creating a scene with a "
"single Label node, with the following script attached to it:"
msgstr ""

#: ../../docs/tutorials/scripting/idle_and_physics_processing.rst:104
msgid "When you run the scene, you should see a counter increasing each frame."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:4
msgid "Groups"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:6
msgid ""
"Groups in Godot work like tags in other software. You can add a node to as "
"many groups as you want. Then, in code, you can use the SceneTree to:"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:9
msgid "Get a list of nodes in a group."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:10
msgid "Call a method on all nodes in a group."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:11
msgid "Send a notification to all nodes in a group."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:13
msgid "This is a useful feature to organize large scenes and decouple code."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:17
msgid "Managing groups"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:19
msgid ""
"Groups are created by adding a node to a new group name, and likewise they "
"are removed by removing all nodes from a given group."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:22
msgid "There are two ways to add/remove nodes to groups:"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:24
msgid "During design, by using the Node dock in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:25
msgid ""
"During execution, by calling :ref:`Node.add_to_group() "
"<class_Node_method_add_to_group>` or :ref:`Node.remove_from_group() "
"<class_Node_method_remove_from_group>`."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:30
msgid "Using the Node dock"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:32
msgid ""
"You can add nodes in the current scene to groups using the Groups tab in the "
"Node dock."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:37
msgid ""
"Select one or more nodes in the Scene dock and write the group name in the "
"field, then click Add."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:42
msgid "You should now see the group appear."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:46
msgid ""
"In a complex project, you may end up with many groups or large scenes with "
"many nodes. You can add or remove any node to groups using the Group Editor "
"window. To access it, click the Manage Groups button."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:52
msgid ""
"The Group Editor window appears. Here's a screenshot from a complex project "
"to illustrate the tool's purpose."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:57
msgid "It has three columns:"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:59
msgid "A list of groups used by nodes in the current scene."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:60
msgid "A list of nodes that are not part of the selected group."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:61
msgid "A list of nodes in the group."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:63
msgid ""
"The fields at the bottom allow you to add new groups or filter nodes in the "
"second and third columns."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:66
msgid ""
"Any node name that's greyed out means the node was added to the group in a "
"different scene and you cannot edit it here. This happens on scene instances "
"in particular."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:71
msgid "Using code"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:73
msgid ""
"You can also manage groups from scripts. The following code adds the node to "
"which you attach the script to the ``guards`` group as soon as it enters the "
"scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:92
msgid ""
"Imagine you're creating an infiltration game. When an enemy spots the "
"player, you want all guards and robots to be on alert."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:95
msgid ""
"In the fictional example below, we use ``SceneTree.call_group()`` to alert "
"all enemies that the player was spotted."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:111
msgid ""
"The above code calls the function ``enter_alert_mode`` on every member of "
"the group ``guards``."
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:114
msgid ""
"To get the full list of nodes in the ``guards`` group as an array, you can "
"call :ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`:"
msgstr ""

#: ../../docs/tutorials/scripting/groups.rst:127
msgid ""
"The :ref:`SceneTree <class_SceneTree>` class provides many more useful "
"methods to interact with scenes, their node hierarchy, and groups. It allows "
"you to switch scenes easily or reload them, quit the game or pause and "
"unpause it. It also provides useful signals."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:4
msgid "Nodes and scene instances"
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:6
msgid ""
"This guide explains how to get nodes, create nodes, add them as a child, and "
"instantiate scenes from code."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:10
msgid "Getting nodes"
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:12
msgid ""
"You can get a reference to a node by calling the :ref:`Node.get_node() "
"<class_Node_method_get_node>` method. For this to work, the child node must "
"be present in the scene tree. Getting it in the parent node's ``_ready()`` "
"function guarantees that."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:17
msgid ""
"If, for example,  you have a scene tree like this, and you want to get a "
"reference to the Sprite and Camera2D nodes to access them in your script."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:22
msgid "To do so, you can use the following code."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:47
msgid ""
"Note that you get nodes using their name, not their type. Above, \"Sprite\" "
"and \"Camera2D\" are the nodes' names in the scene."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:52
msgid ""
"If you rename the Sprite node as Skin in the Scene dock, you have to change "
"the line that gets the node to ``get_node(\"Skin\")`` in the script."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:58
msgid "Node paths"
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:60
msgid ""
"When getting a reference to a node, you're not limited to getting a direct "
"child. The ``get_node()`` function supports paths, a bit like when working "
"with a file browser. Add a slash to separate nodes."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:64
msgid ""
"Take the following example scene, with the script attached to the "
"UserInterface node."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:69
msgid "To get the Tween node, you would use the following code."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:90
msgid ""
"As with file paths, you can use \"..\" to get a parent node. The best "
"practice is to avoid doing that though not to break encapsulation. You can "
"also start the path with a forward slash to make it absolute, in which case "
"your topmost node would be \"/root\", the application's predefined root "
"viewport."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:97
msgid "Syntactic sugar"
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:99
msgid ""
"You can use two shorthands to shorten your code in GDScript. Firstly, "
"putting the ``onready`` keyword before a member variable makes it initialize "
"right before the ``_ready()`` callback."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:107
msgid ""
"There is also a short notation for ``get_node()``: the dollar sign, \"$\". "
"You place it before the name or path of the node you want to get."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:116
msgid "Creating nodes"
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:118
msgid ""
"To create a node from code, call its ``new()`` method like for any other "
"class-based datatype."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:121
msgid ""
"You can store the newly created node's reference in a variable and call "
"``add_child()`` to add it as a child of the node to which you attached the "
"script."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:146
msgid ""
"To delete a node and free it from memory, you can call its ``queue_free()`` "
"method. Doing so queues the node for deletion at the end of the current "
"frame after it has finished processing. At that point, the engine removes "
"the node from the scene and frees the object in memory."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:160
msgid ""
"Before calling ``sprite.queue_free()``, the remote scene tree looks like "
"this."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:164
msgid ""
"After the engine freed the node, the remote scene tree doesn't display the "
"sprite anymore."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:169
msgid ""
"You can alternatively call ``free()`` to immediately destroy the node. You "
"should do this with care as any reference to it will instantly become "
"``null``. We recommend using ``queue_free()`` unless you know what you're "
"doing."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:173
msgid ""
"When you free a node, it also frees all its children. Thanks to this, to "
"delete an entire branch of the scene tree, you only have to free the topmost "
"parent node."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:180
msgid ""
"Scenes are templates from which you can create as many reproductions as "
"you'd like. This operation is called instancing, and doing it from code "
"happens in two steps:"
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:184
msgid "Loading the scene from the hard drive."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:185
msgid ""
"Creating an instance of the loaded :ref:`PackedScene <class_PackedScene>` "
"resource."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:197
msgid ""
"Preloading the scene can improve the user's experience as the load operation "
"happens when the compiler reads the script and not at runtime. This feature "
"is only available with GDScript."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:206
msgid ""
"At that point, ``scene`` is a packed scene resource, not a node. To create "
"the actual node, you need to call :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>`. It returns a tree of nodes that you "
"can as a child of your current node."
msgstr ""

#: ../../docs/tutorials/scripting/nodes_and_scene_instances.rst:222
msgid ""
"The advantage of this two-step process is you can keep a packed scene loaded "
"and create new instances on the fly. For example, to quickly instance "
"several enemies or bullets."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:4
msgid "Overridable functions"
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:6
msgid ""
"Godot's Node class provides virtual functions you can override to update "
"nodes every frame or on specific events, like when they enter the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:9
msgid "This document presents the ones you'll use most often."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:11
msgid ""
"Under the hood, these functions rely on Godot's low-level notifications "
"system. To learn more about it, see :ref:`doc_godot_notifications`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:15
msgid ""
"Two functions allow you to initialize and get nodes, besides the class's "
"constructor: ``_enter_tree()`` and ``_ready()``."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:18
msgid ""
"When the node enters the Scene Tree, it becomes active and the engine calls "
"its ``_enter_tree()`` method. That node's children may not be part of the "
"active scene yet. As you can remove and re-add nodes to the scene tree, this "
"function may be called multiple times throughout a node's lifetime."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:23
msgid ""
"Most of the time, you'll use ``_ready()`` instead. This function is called "
"only once in a node's lifetime, after ``_enter_tree()``. ``_ready()`` "
"ensures that all children have entered the scene tree first, so you can "
"safely call ``get_node()`` on it."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:27
msgid ""
"To learn more about getting node references, read :ref:"
"`doc_nodes_and_scene_instances`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:30
msgid ""
"Another related callback is ``_exit_tree()``, which the engine calls every "
"time a node exits the scene tree. This can be when you call :ref:`Node."
"remove_child() <class_Node_method_remove_child>` or when you free a node."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:71
msgid ""
"The two virtual methods ``_process()`` and ``_physics_process()`` allow you "
"to update the node, every frame and every physics frame respectively. For "
"more information, read the dedicated documentation: :ref:"
"`doc_idle_and_physics_processing`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:101
msgid ""
"Two more essential built-in node callback functions are :ref:`Node."
"_unhandled_input() <class_Node_method__unhandled_input>` and :ref:`Node."
"_input() <class_Node_method__input>`, which you use to both receive and "
"process individual input events. The ``_unhandled_input()`` method receives "
"every key press, mouse click, etc. that have not been handled already in an "
"``_input()`` callback or in a user interface component. You want to use it "
"for gameplay input in general. The ``_input()`` callback allows you to "
"intercept and process input events before ``_unhandled_input()`` gets them."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:110
msgid ""
"To learn more about inputs in Godot, see the :ref:`Input section <toc-learn-"
"features-inputs>`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:139
msgid ""
"There are some more overridable functions like :ref:`Node."
"_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Specialized node types "
"provide more callbacks like :ref:`CanvasItem._draw() "
"<class_CanvasItem_method__draw>` to draw programmatically or :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` to handle clicks and input "
"on UI elements."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:4
msgid "Cross-language scripting"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:6
msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes written in "
"different languages."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:11
msgid ""
"The following two scripts will be used as references throughout this page."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:66
msgid "Instantiating nodes"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:68
msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:72
msgid "Instantiating C# nodes from GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:74
msgid ""
"Using C# from GDScript doesn't need much work. Once loaded (see :ref:"
"`doc_gdscript_classes_as_resources`), the script can be instantiated with :"
"ref:`new() <class_CSharpScript_method_new>`."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:86
msgid ""
"When creating ``.cs`` scripts, you should always keep in mind that the class "
"Godot will use is the one named like the ``.cs`` file itself. If that class "
"does not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:91
msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:93
msgid ""
"You also need to check your ``.cs`` file is referenced in the project's ``."
"csproj`` file. Otherwise, the same error will occur."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:97
msgid "Instantiating GDScript nodes from C#"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:99
msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:107
msgid ""
"Here we are using an :ref:`class_Object`, but you can use type conversion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:111
msgid "Accessing fields"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:114
msgid "Accessing C# fields from GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:116
msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:128
msgid ""
"Note that it doesn't matter if the field is defined as a property or an "
"attribute. However, trying to set a value on a property that does not define "
"a setter will result in a crash."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:133
msgid "Accessing GDScript fields from C#"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:135
msgid ""
"As C# is statically typed, accessing GDScript from C# is a bit more "
"convoluted, you will have to use :ref:`Object.Get() "
"<class_Object_method_get>` and :ref:`Object.Set() "
"<class_Object_method_set>`. The first argument is the name of the field you "
"want to access."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:148
msgid ""
"Keep in mind that when setting a field value you should only use types the "
"GDScript side knows about. Essentially, you want to work with built-in types "
"as described in :ref:`doc_gdscript` or classes extending :ref:`class_Object`."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:153
msgid "Calling methods"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:156
msgid "Calling C# methods from GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:158
msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast the arguments to match function "
"signatures. If that's impossible, you'll see the following error: ``Invalid "
"call. Nonexistent function `FunctionName```."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:174
msgid "Calling GDScript methods from C#"
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:176
msgid ""
"To call GDScript methods from C# you'll need to use :ref:`Object.Call() "
"<class_Object_method_call>`. The first argument is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:198
msgid ""
"As you can see, if the first argument of the called method is an array, "
"you'll need to cast it as ``object``. Otherwise, each element of your array "
"will be treated as a single argument and the function signature won't match."
msgstr ""

#: ../../docs/tutorials/scripting/cross_language_scripting.rst:206
msgid ""
"A GDScript file may not inherit from a C# script. Likewise, a C# script may "
"not inherit from a GDScript file. Due to how complex this would be to "
"implement, this limitation is unlikely to be lifted in the future. See `this "
"GitHub issue <https://github.com/godotengine/godot/issues/38352>`__ for more "
"information."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:4
msgid "Creating script templates"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:6
msgid ""
"Godot provides a way to use script templates as seen in the ``Script Create "
"Dialog`` while creating a new script:"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:11
msgid ""
"A set of default script templates is provided by default, but it's also "
"possible to modify existing and create new ones, both per project and the "
"editor."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:15
msgid "Locating the templates"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:17
msgid "There are two places where templates can be managed."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:20
msgid "Editor-defined templates"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:22
msgid ""
"These are available globally throughout any project. The location of these "
"templates are determined per each OS:"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:25
msgid "Windows: ``%APPDATA%\\Godot\\script_templates\\``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:26
msgid "Linux: ``$HOME/.config/godot/script_templates/``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:27
msgid "macOS: ``$HOME/Library/Application Support/Godot/script_templates/``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:29
msgid ""
"If no ``script_templates`` is detected, Godot will create a default set of "
"built-in templates automatically, so this logic can be used to reset the "
"default templates in case you've accidentally overwritten them."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:34
msgid "Project-defined templates"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:36
msgid ""
"The default path to search for templates is the ``res://script_templates/`` "
"directory. The path can be changed by configuring the ``editor/"
"script_templates_search_path`` setting in the :ref:`ProjectSettings "
"<class_ProjectSettings>`, both via code and the editor."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:41
msgid ""
"If no ``script_templates`` directory is found within a project, it is simply "
"ignored."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:45
msgid "Language support and overriding behavior"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:47
msgid ""
"Depending on whether a particular language implements a way to generate "
"scripts out of templates, it's possible to create a template which can be "
"recognized by that language according to template's file extension. For "
"GDScript and C#, the extensions must be ``gd`` and ``cs`` respectively."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:52
msgid ""
"The script templates have the same extension as the regular script files. "
"This may lead to an issue of a script parser treating those templates as "
"actual scripts within a project. To avoid this, make sure to ignore the "
"directory containing them by creating an empty ``.gdignore`` file. The "
"directory won't be visible throughout the project's filesystem anymore, yet "
"the templates can be modified by an external text editor anytime."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:59
msgid ""
"The built-in editor templates are automatically shadowed by the project-"
"specific templates given both scripts have the same filename."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:63
msgid "Default template"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:65
msgid ""
"The ``Default`` template is always generated dynamically per language and "
"cannot be configured nor overridden, but you can use these as the base for "
"creating other templates."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:116
msgid "List of template placeholders"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:118
msgid ""
"The following describes the complete list of built-in template placeholders "
"which are currently implemented."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:122
msgid "Base placeholders"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:125
#: ../../docs/tutorials/scripting/creating_script_templates.rst:147
msgid "Placeholder"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:127
msgid "``%CLASS%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:127
msgid "The name of the new class (used in C# only)."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:129
msgid "``%BASE%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:129
msgid "The base type a new script inherits from."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:131
msgid "``%TS%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:131
msgid ""
"Indentation placeholder. The exact type and number of whitespace characters "
"used for indentation is determined by the ``text_editor/indent/type`` and "
"``text_editor/indent/size`` settings in the :ref:`EditorSettings "
"<class_EditorSettings>` respectively."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:139
msgid "Type placeholders"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:141
msgid ""
"These are only relevant for GDScript with static typing. Whether these "
"placeholders are actually replaced is determined by the ``text_editor/"
"completion/add_type_hints`` setting in the :ref:`EditorSettings "
"<class_EditorSettings>`."
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:149
msgid "``%INT_TYPE%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:149
msgid "``: int``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:151
msgid "``%STRING_TYPE%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:151
msgid "``: String``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:153
msgid "``%FLOAT_TYPE%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:153
msgid "``: float``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:155
msgid "``%VOID_RETURN%``"
msgstr ""

#: ../../docs/tutorials/scripting/creating_script_templates.rst:155
msgid "``-> void``"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:4
msgid "Evaluating expressions"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:6
msgid ""
"Godot provides an :ref:`class_Expression` class you can use to evaluate "
"expressions."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:8
msgid "An expression can be:"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:10
msgid "A mathematical expression such as ``(2 + 4) * 16/4.0``."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:11
msgid "A built-in method call like ``deg2rad(90)``."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:12
msgid ""
"A method call on an user-provided script like ``update_health()``, if "
"``base_instance`` is set to a value other than ``null`` when calling :ref:"
"`Expression.execute() <class_Expression_method_execute>`."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:18
msgid ""
"The Expression class is independent from GDScript. It's available even if "
"you compile Godot with the GDScript module disabled."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:22
msgid "Basic usage"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:24
msgid "To evaluate a mathematical expression, use::"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:31
msgid "The following operators are available:"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:34
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:302
msgid "Operator"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:34
#: ../../docs/development/compiling/compiling_with_mono.rst:81
#: ../../docs/development/cpp/custom_godot_servers.rst:506
msgid "Notes"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:36
msgid "Addition ``+``"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:36
msgid ""
"Can also be used to concatenate strings and arrays: - ``\"hello\" + \" "
"world\"`` = ``hello world`` - ``[1, 2] + [3, 4]`` = ``[1, 2, 3, 4]``"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:40
msgid "Subtraction (``-``)"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:42
msgid "Multiplication (``*``)"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:44
msgid "Division (``/``)"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:44
msgid ""
"Performs and integer division if both operands are integers. If at least one "
"of them is a floating-point number, returns a floating-point value."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:47
msgid "Modulo (``%``)"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:47
msgid "Returns the remainder of an integer division."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:50
msgid ""
"Spaces around operators are optional. Also, keep in mind the usual `order of "
"operations <https://en.wikipedia.org/wiki/Order_of_operations>`__ applies. "
"Use parentheses to override the order of operations if needed."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:54
msgid ""
"All the Variant types supported in Godot can be used: integers, floating-"
"point numbers, strings, arrays, dictionaries, colors, vectors, …"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:57
msgid "Arrays and dictionaries can be indexed like in GDScript::"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:74
msgid "Passing variables to an expression"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:76
msgid ""
"You can pass variables to an expression. These variables will then become "
"available in the expression's \"context\" and will be substituted when used "
"in the expression::"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:89
msgid ""
"Both the variable names and variable values **must** be specified as an "
"array, even if you only define one variable. Also, variable names are **case-"
"sensitive**."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:93
msgid "Setting a base instance for the expression"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:95
msgid ""
"By default, an expression has a base instance of ``null``. This means the "
"expression has no base instance associated to it."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:98
msgid ""
"When calling :ref:`Expression.execute() <class_Expression_method_execute>`, "
"you can set the value of the ``base_instance`` parameter to a specific "
"object instance such as ``self``, another script instance or even a "
"singleton::"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:119
msgid "Associating a base instance allows doing the following:"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:121
msgid "Reference the instance's constants (``const``) in the expression."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:122
msgid "Reference the instance's member variables (``var``) in the expression."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:123
msgid ""
"Call methods defined in the instance and use their return values in the "
"expression."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:127
msgid ""
"Setting a base instance to a value other than ``null`` allows referencing "
"constants, member variables, and calling all methods defined in the script "
"attached to the instance. Allowing users to enter expressions may allow "
"cheating in your game, or may even introduce security vulnerabilities if you "
"allow arbitrary clients to run expressions on other players' devices."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:134
msgid "Example script"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:136
msgid "The script below demonstrates what the Expression class is capable of::"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:181
msgid "The output from the script will be::"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:199
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:635
msgid "Built-in functions"
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:201
msgid ""
"Most methods available in the :ref:`class_@GDScript` scope are available in "
"the Expression class, even if no base instance is bound to the expression. "
"The same parameters and return types are available."
msgstr ""

#: ../../docs/tutorials/scripting/evaluating_expressions.rst:205
msgid ""
"However, unlike GDScript, parameters are **always required** even if they're "
"specified as being optional in the class reference. In contrast, this "
"restriction on arguments doesn't apply to user-made functions when you bind "
"a base instance to the expression."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:4
msgid "Change scenes manually"
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:6
msgid ""
"Sometimes it helps to have more control over how one swaps scenes around. As "
"mentioned above, a :ref:`Viewport <class_Viewport>`'s child nodes will "
"render to the image it generates. This holds true even for nodes outside of "
"the \"current\" scene. Autoloads fall into this category, but so do scenes "
"which one instances and adds to the tree at runtime:"
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:38
msgid ""
"To complete the cycle and swap out the new scene with the old one, "
"developers have a choice to make. Many strategies exist for removing a scene "
"from view of the :ref:`Viewport <class_Viewport>`. The tradeoffs involve "
"balancing operation speed and memory consumption as well as balancing data "
"access and integrity."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:44
msgid ""
"**We can delete the existing scene.** :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` and :ref:`SceneTree.change_scene_to() "
"<class_SceneTree_method_change_scene_to>` will delete the current scene "
"immediately. Developers can also delete the main scene though. Assuming the "
"root node's name is \"Main\", one could do ``get_node(\"/root/Main\")."
"free()`` to delete the whole scene."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:51
msgid "Unloads memory."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:53
msgid "Pro: RAM is no longer dragging the dead weight."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:55
msgid ""
"Con: Returning to that scene is now more expensive since it must be loaded "
"back into memory again (takes time AND memory). Not a problem if returning "
"soon is unnecessary."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:59
msgid ""
"Con: No longer have access to that scene's data. Not a problem if using that "
"data soon is unnecessary."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:62
msgid ""
"Note: It can be useful to preserve the data in a soon-to-be-deleted scene by "
"re-attaching one or more of its nodes to a different scene, or even directly "
"to the :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:66
msgid "Processing stops."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:68
msgid ""
"Pro: No nodes means no process, physics process, or input handling. The CPU "
"is available to work on the new scene's contents."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:71
msgid ""
"Con: Those nodes' processing and input handling no longer operate. Not a "
"problem if using the updated data is unnecessary."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:74
msgid ""
"**We can hide the existing scene.** By changing the visibility or collision "
"detection of the nodes, we can hide the entire node sub-tree from the "
"player's perspective."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:78
msgid "Memory still exists."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:80
msgid "Pro: One can still access the data if need be."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:82
msgid "Pro: There's no need to move any more nodes around to save data."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:84
msgid ""
"Con: More data is being kept in memory which will be become a problem on "
"memory-sensitive platforms like web or mobile."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:87
msgid "Processing continues."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:89
msgid ""
"Pro: Data continues to receive processing updates, so the scene will keep "
"updated any data within it that relies on delta time or frame data."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:93
msgid ""
"Pro: Nodes are still members of groups (since groups belong to the :ref:"
"`SceneTree <class_SceneTree>`)."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:96
msgid ""
"Con: The CPU's attention is now divided between both scenes. Too much load "
"could result in low frame rates. One should be sure to test performance as "
"they go to ensure the target platform can support the load they are giving "
"it."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:101
msgid ""
"**We can remove the existing scene from the tree.** Assign a variable to the "
"existing scene's root node. Then use :ref:`Node.remove_child(Node) "
"<class_Node_method_remove_child>` to detach the entire scene from the tree."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:106
msgid "Memory still exists (similar pros/cons as with hiding it from view)."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:108
msgid "Processing stops (similar pros/cons as with deleting it completely)."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:110
msgid ""
"Pro: This variation of \"hiding\" it is much easier to show/hide. Rather "
"than potentially keeping track of multiple changes to the scene, one must "
"only call the one method add/remove_child pair of methods. It is similar to "
"disabling game objects in other engines."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:115
msgid ""
"Con: Unlike with hiding it from view only, the data contained within the "
"scene will become stale if it relies on delta time, input, groups, or other "
"data that is derived from :ref:`SceneTree <class_SceneTree>` access."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:120
msgid ""
"There are also cases where one may wish to have many scenes present at the "
"same time. Perhaps one is adding their own singleton at runtime, or "
"preserving a a scene's data between scene changes (adding the scene to the "
"root node)."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:133
msgid ""
"Perhaps instead they wish to display multiple scenes at the same time using :"
"ref:`ViewportContainers <class_ViewportContainer>`. This is optimal in cases "
"where the intent is to render different content in different parts of the "
"screen. Minimaps and split-screen multiplayer are good examples."
msgstr ""

#: ../../docs/tutorials/scripting/change_scenes_manually.rst:138
msgid ""
"Each option will have cases where it is best appropriate, so one must "
"examine the effects of each and determine what path best fits their unique "
"situation."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:7
msgid "Instancing with signals"
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:9
msgid ""
"Signals provide a way to decouple game objects, allowing you to avoid "
"forcing a fixed arrangement of nodes. One sign that a signal might be called "
"for is when you find yourself using ``get_parent()``. Referring directly to "
"a node's parent means that you can't easily move that node to another "
"location in the scene tree. This can be especially problematic when you are "
"instancing objects at runtime and may want to place them in an arbitrary "
"location in the running scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:16
msgid "Below we'll consider an example of such a situation: firing bullets."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:19
msgid "Shooting example"
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:21
msgid ""
"Consider a player character that can rotate and shoot towards the mouse. "
"Every time the mouse button is clicked, we create an instance of the bullet "
"at the player's location. See :ref:`doc_instancing` for details."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:25
msgid ""
"We'll use an ``Area2D`` for the bullet, which moves in a straight line at a "
"given velocity:"
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:50
msgid ""
"However, if the bullets are added as children of the player, then they will "
"remain \"attached\" to the player as it rotates:"
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:55
msgid ""
"Instead, we need the bullets to be independent of the player's movement - "
"once fired, they should continue traveling in a straight line and the player "
"can no longer affect them. Instead of being added to the scene tree as a "
"child of the player, it makes more sense to add the bullet as a child of the "
"\"main\" game scene, which may be the player's parent or even further up the "
"tree."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:61
msgid "You could do this by adding the bullet to the main scene directly:"
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:74
msgid ""
"However, this will lead to a different problem. Now if you try to test your "
"\"Player\" scene independently, it will crash on shooting, because there is "
"no parent node to access. This makes it a lot harder to test your player "
"code independently and also means that if you decide to change your main "
"scene's node structure, the player's parent may no longer be the appropriate "
"node to receive the bullets."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:81
msgid ""
"The solution to this is to use a signal to \"emit\" the bullets from the "
"player. The player then has no need to \"know\" what happens to the bullets "
"after that - whatever node is connected to the signal can \"receive\" the "
"bullets and take the appropriate action to spawn them."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:86
msgid "Here is the code for the player using signals to emit the bullet:"
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:131
msgid ""
"In the main scene, we then connect the player's signal (it will appear in "
"the \"Node\" tab)."
msgstr ""

#: ../../docs/tutorials/scripting/instancing_with_signals.rst:155
msgid ""
"Now the bullets will maintain their own movement independent of the player's "
"rotation:"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:4
msgid "Pausing games and process mode"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:9
msgid ""
"In most games it is desirable to, at some point, interrupt the game to do "
"something else, such as taking a break or changing options. Implementing a "
"fine-grained control for what can be paused (and what cannot) is a lot of "
"work, so a simple framework for pausing is provided in Godot."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:16
msgid "How pausing works"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:18
msgid ""
"To pause the game the pause state must be set. This is done by assigning "
"``true`` to the :ref:`SceneTree.paused <class_SceneTree_property_paused>` "
"property:"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:30
msgid ""
"Doing this will cause two things. First, 2D and 3D physics will be stopped "
"for all nodes. Second, the behavior of certain nodes will stop or start "
"depending on their process mode."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:34
msgid ""
"The physics servers can be made active while the game is paused by using "
"their ``set_active`` methods."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:38
msgid "Process Modes"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:40
msgid ""
"Each node in Godot has a \"Pause Mode\" that defines when it processes. It "
"can be found and changed under a node's :ref:`Node <class_Node>` properties "
"in the inspector."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:45
msgid "You can also alter the property with code:"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:60
msgid "This is what each mode tells a node to do:"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:62
msgid ""
"**Inherit**: Process depending on the state of the parent, grandparent, etc. "
"The first parent that has a non-Inherit state."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:64
msgid ""
"**Stop**: Stop the node no matter what (and children in Inherit mode). When "
"paused this node will not process."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:66
msgid ""
"**Process**: Process the node no matter what (and children in Inherit mode). "
"Paused or not this node will process."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:69
msgid ""
"By default, all nodes have this property in the \"Inherit\" state. If the "
"parent is set to \"Inherit\", then the grandparent will be checked and so "
"on. If a state can't be found in any of the grandparents, the pause state in "
"SceneTree is used. This means that, by default, when the game is paused "
"every node will be paused. Several things happen when a node stops "
"processing."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:75
msgid ""
"The ``_process``, ``_physics_process``, ``_input``, and ``_input_event`` "
"functions will not be called. However signals still work and cause their "
"connected function to run, even if that function's script is attached to a "
"node that has its pause mode set to \"Stop\"."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:80
msgid ""
"Animation nodes will pause their current animation, audio nodes will pause "
"their current audio stream, and particles will pause. These resume "
"automatically when the game is no longer paused."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:84
msgid ""
"It is important to note that even if a node is processing while the game is "
"paused physics will **NOT** work for it by default. As stated earlier this "
"is because the physics servers are turned off. The physics servers can be "
"made active while the game is paused by using their ``set_active`` methods."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:90
msgid "Pause Menu Example"
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:92
msgid ""
"Here is an example of a pause menu. Create a popup or panel with controls "
"inside, and set its pause mode to \"Process\" then hide it. By setting the "
"root of the pause popup to \"Process\", all children and grandchildren will "
"inherit that state. This way, this branch of the scene tree will continue "
"working when paused."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:98
msgid ""
"Finally, make it so when a pause button is pressed (any button will do), "
"enable the pause and show the pause screen."
msgstr ""

#: ../../docs/tutorials/scripting/pausing_games.rst:116
msgid "To unpause, do the opposite when the pause screen is closed:"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:4
msgid "File system"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:9
msgid ""
"A file system manages how assets are stored and how they are accessed. A "
"well-designed file system also allows multiple developers to edit the same "
"source files and assets while collaborating. Godot stores all assets as "
"files in its file system."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:15
msgid "Implementation"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:17
msgid ""
"The file system stores resources on disk. Anything, from a script, to a "
"scene or a PNG image is a resource to the engine. If a resource contains "
"properties that reference other resources on disk, the paths to those "
"resources are also included. If a resource has sub-resources that are built-"
"in, the resource is saved in a single file together with all the bundled sub-"
"resources. For example, a font resource is often bundled together with the "
"font textures."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:24
msgid ""
"The Godot file system avoids using metadata files. Existing asset managers "
"and VCSs are better than anything we can implement, so Godot tries its best "
"to play along with SVN, Git, Mercurial, Perforce, etc."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:28
msgid "Example of file system contents:"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:39
msgid "project.godot"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:41
msgid ""
"The ``project.godot`` file is the project description file, and it is always "
"found at the root of the project. In fact, its location defines where the "
"root is. This is the first file that Godot looks for when opening a project."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:45
msgid ""
"This file contains the project configuration in plain text, using the win."
"ini format. Even an empty ``project.godot`` can function as a basic "
"definition of a blank project."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:50
msgid "Path delimiter"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:52
msgid ""
"Godot only supports ``/`` as a path delimiter. This is done for portability "
"reasons. All operating systems support this, even Windows, so a path such as "
"``C:\\project\\project.godot`` needs to be typed as ``C:/project/project."
"godot``."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:58
msgid "Resource path"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:60
msgid ""
"When accessing resources, using the host OS file system layout can be "
"cumbersome and non-portable. To solve this problem, the special path ``res://"
"`` was created."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:64
msgid ""
"The path ``res://`` will always point at the project root (where ``project."
"godot`` is located, so ``res://project.godot`` is always valid)."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:68
msgid ""
"This file system is read-write only when running the project locally from "
"the editor. When exported or when running on different devices (such as "
"phones or consoles, or running from DVD), the file system will become read-"
"only and writing will no longer be permitted."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:74
msgid "User path"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:76
msgid ""
"Writing to disk is still needed for tasks such as saving game state or "
"downloading content packs. To this end, the engine ensures that there is a "
"special path ``user://`` that is always writable. This path resolves "
"differently depending on the OS the project is running on. Local path "
"resolution is further explained in :ref:`doc_data_paths`."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:83
msgid "Host file system"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:85
msgid ""
"Alternatively host file system paths can also be used, but this is not "
"recommended for a released product as these paths are not guaranteed to work "
"on all platforms. However, using host file system paths can be useful when "
"writing development tools in Godot."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:91
msgid "Drawbacks"
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:93
msgid ""
"There are some drawbacks to this simple file system design. The first issue "
"is that moving assets around (renaming them or moving them from one path to "
"another inside the project) will break existing references to these assets. "
"These references will have to be re-defined to point at the new asset "
"location."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:98
msgid ""
"To avoid this, do all your move, delete and rename operations from within "
"Godot, on the FileSystem dock. Never move assets from outside Godot, or "
"dependencies will have to be fixed manually (Godot detects this and helps "
"you fix them anyway, but why go the hard route?)."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:103
msgid ""
"The second is that, under Windows and macOS, file and path names are case "
"insensitive. If a developer working in a case insensitive host file system "
"saves an asset as ``myfile.PNG``, but then references it as ``myfile.png``, "
"it will work fine on their platform, but not on other platforms, such as "
"Linux, Android, etc. This may also apply to exported binaries, which use a "
"compressed package to store all files."
msgstr ""

#: ../../docs/tutorials/scripting/filesystem.rst:109
msgid ""
"It is recommended that your team clearly define a naming convention for "
"files when working with Godot. One simple fool-proof convention is to only "
"allow lowercase file and path names."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:7
msgid "Nodes and resources"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:9
msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:15
msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:19
msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ``."
"tscn`` or an ``.scn`` file), an image, a script... Here are some "
"``Resource`` examples: :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:26
msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:31
msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:39
msgid "External vs built-in"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:41
msgid "There are two ways to save resources. They can be:"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:43
msgid "**External** to a scene, saved on the disk as individual files."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:44
msgid ""
"**Built-in**, saved inside the ``.tscn`` or the ``.scn`` file they're "
"attached to."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:46
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:51
msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:55
msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:60
msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path ``\"res://robi.png\"`` "
"and save, Godot will save the image inside the ``.tscn`` scene file."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:66
msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:70
msgid "Loading resources from code"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:72
msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:90
msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:106
msgid "Loading scenes"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:108
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:112
msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_method_instance>` method."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:133
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:137
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` function is fast, you can create new "
"enemies, bullets, effects, etc. without having to load them again from disk "
"each time. Remember that, as always, images, meshes, etc. are all shared "
"between the scene instances."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:144
msgid "Freeing resources"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:146
msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:151
msgid "Creating your own resources"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:153
msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (\\*.tres, \\*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:158
msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:165
msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:167
msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:169
msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:171
msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:173
msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:175
msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:177
msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:179
msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:181
msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:183
msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:185
msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:186
msgid "Set the ``script`` property in the Inspector to be your script."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:188
msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:193
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_gdscript_basics_class_name>`, then it streamlines the process. Defining "
"a name for your script alone will add it to the Inspector's creation dialog. "
"This will auto-add your script to the Resource object you create."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:198
msgid "Let's see some examples."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:277
msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:283
msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:319
msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:321
msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:323
msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:326
msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:331
msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""

#: ../../docs/tutorials/scripting/resources.rst:337
msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:4
msgid "Singletons (AutoLoad)"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:9
msgid ""
"Godot's scene system, while powerful and flexible, has a drawback: there is "
"no method for storing information (e.g. a player's score or inventory) that "
"is needed by more than one scene."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:13
msgid ""
"It's possible to address this with some workarounds, but they come with "
"their own limitations:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:16
msgid ""
"You can use a \"master\" scene that loads and unloads other scenes as its "
"children. However, this means you can no longer run those scenes "
"individually and expect them to work correctly."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:19
msgid ""
"Information can be stored to disk in ``user://`` and then loaded by scenes "
"that require it, but frequently saving and loading data is cumbersome and "
"may be slow."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:23
msgid ""
"The `Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_ "
"is a useful tool for solving the common use case where you need to store "
"persistent information between scenes. In our case, it's possible to reuse "
"the same scene or class for multiple singletons as long as they have "
"different names."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:29
msgid "Using this concept, you can create objects that:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:31
msgid "Are always loaded, no matter which scene is currently running."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:32
msgid "Can store global variables such as player information."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:33
msgid "Can handle switching scenes and between-scene transitions."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:34
msgid ""
"*Act* like a singleton, since GDScript does not support global variables by "
"design."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:36
msgid "Autoloading nodes and scripts can give us these characteristics."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:40
msgid ""
"Godot won't make an AutoLoad a \"true\" singleton as per the singleton "
"design pattern. It may still be instanced more than once by the user if "
"desired."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:45
msgid ""
"If you're creating an autoload as part of an editor plugin, consider :ref:"
"`registering it automatically in the Project Settings "
"<doc_making_plugins_autoload>` when the plugin is enabled."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:50
msgid "AutoLoad"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:52
msgid ""
"You can create an AutoLoad to load a scene or a script that inherits from :"
"ref:`class_Node`."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:57
msgid ""
"When autoloading a script, a :ref:`class_Node` will be created and the "
"script will be attached to it. This node will be added to the root viewport "
"before any other scenes are loaded."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:63
msgid ""
"To autoload a scene or script, select **Project > Project Settings** from "
"the menu and switch to the **AutoLoad** tab."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:68
msgid ""
"Here you can add any number of scenes or scripts. Each entry in the list "
"requires a name, which is assigned as the node's ``name`` property. The "
"order of the entries as they are added to the global scene tree can be "
"manipulated using the up/down arrow keys. Like regular scenes, the engine "
"will read these nodes in top-to-bottom order."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:76
msgid ""
"This means that any node can access a singleton named \"PlayerVariables\" "
"with:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:89
msgid ""
"If the **Enable** column is checked (which is the default), then the "
"singleton can be accessed directly without requiring ``get_node()``:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:102
msgid ""
"Note that autoload objects (scripts and/or scenes) are accessed just like "
"any other node in the scene tree. In fact, if you look at the running scene "
"tree, you'll see the autoloaded nodes appear:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:110
msgid ""
"Autoloads must **not** be removed using ``free()`` or ``queue_free()`` at "
"runtime, or the engine will crash."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:114
msgid "Custom scene switcher"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:116
msgid ""
"This tutorial will demonstrate building a scene switcher using autoloads. "
"For basic scene switching, you can use the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method (see :ref:`doc_scene_tree` for "
"details). However, if you need more complex behavior when changing scenes, "
"this method provides more functionality."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:122
msgid ""
"To begin, download the template from here: :download:`autoload.zip <files/"
"autoload.zip>` and open it in Godot."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:125
msgid ""
"The project contains two scenes: ``Scene1.tscn`` and ``Scene2.tscn``. Each "
"scene contains a label displaying the scene name and a button with its "
"``pressed()`` signal connected. When you run the project, it starts in "
"``Scene1.tscn``. However, pressing the button does nothing."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:131
msgid "Global.gd"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:133
msgid ""
"Switch to the **Script** tab and create a new script called ``Global.gd``. "
"Make sure it inherits from ``Node``:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:138
msgid ""
"The next step is to add this script to the autoLoad list. Open **Project > "
"Project Settings** from the menu, switch to the **AutoLoad** tab and select "
"the script by clicking the browse button or typing its path: ``res://Global."
"gd``. Press **Add** to add it to the autoload list:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:145
msgid ""
"Now whenever we run any scene in the project, this script will always be "
"loaded."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:147
msgid ""
"Returning to the script, it needs to fetch the current scene in the "
"`_ready()` function. Both the current scene (the one with the button) and "
"``Global.gd`` are children of root, but autoloaded nodes are always first. "
"This means that the last child of root is always the loaded scene."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:179
msgid ""
"Now we need a function for changing the scene. This function needs to free "
"the current scene and replace it with the requested one."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:248
msgid ""
"Using :ref:`Object.call_deferred() <class_Object_method_call_deferred>`, the "
"second function will only run once all code from the current scene has "
"completed. Thus, the current scene will not be removed while it is still "
"being used (i.e. its code is still running)."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:253
msgid ""
"Finally, we need to fill the empty callback functions in the two scenes:"
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:293
msgid ""
"Run the project and test that you can switch between scenes by pressing the "
"button."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:298
msgid ""
"When scenes are small, the transition is instantaneous. However, if your "
"scenes are more complex, they may take a noticeable amount of time to "
"appear. To learn how to handle this, see the next tutorial: :ref:"
"`doc_background_loading`."
msgstr ""

#: ../../docs/tutorials/scripting/singletons_autoload.rst:302
msgid ""
"Alternatively, if the loading time is relatively short (less than 3 seconds "
"or so), you can display a \"loading plaque\" by showing some kind of 2D "
"element just before changing the scene. You can then hide it just after the "
"scene is changed. This can be used to indicate to the player that a scene is "
"being loaded."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:4
msgid "Using SceneTree"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:9
msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are collections of nodes. They become active once they enter the "
"*scene tree*."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:14
msgid "MainLoop"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:16
msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:21
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:27
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:35
msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:38
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:41
msgid ""
"The scene system provides its own main loop to OS, :ref:`SceneTree "
"<class_SceneTree>`. This is automatically instanced and set when running a "
"scene, no need to do any extra work."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:46
msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:49
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:52
msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:54
msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:57
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:63
msgid "Root viewport"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:65
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:80
msgid ""
"This node contains the main viewport. Anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:85
msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:92
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:95
msgid ""
"This means that as explained in previous tutorials, it will get the "
"``_enter_tree()`` and ``_ready()`` callbacks (as well as ``_exit_tree()``)."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:100
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D visuals, "
"receive and send notifications, play sounds, etc. When they are removed from "
"the *scene tree*, they lose these abilities."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:106
msgid "Tree order"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:108
msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a lower rank in the tree order will get notified before the current "
"node."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:116
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:118
msgid "A scene is loaded from disk or created by scripting."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:119
msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:122
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:125
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:128
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:133
msgid "Changing current scene"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:135
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:153
msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""

#: ../../docs/tutorials/scripting/scene_tree.rst:174
msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in the development of your game, it may be preferable to create proper "
"loading screens with progress bar, animated indicators or thread "
"(background) loading. This must be done manually using autoloads (see next "
"chapter) and :ref:`doc_background_loading`."
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:4
msgid "Scene Unique Nodes"
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:9
msgid ""
"There are times in a project where a node needs to be called from a script. "
"However, its position in the tree might change over time as adjustments are "
"made to a scene, such as a button in a UI scene."
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:14
msgid ""
"In situations like this, a node can be turned into a scene unique node to "
"avoid having to update a script every time its path is changed."
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:19
msgid "Creating and using them"
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:21
msgid ""
"In the Scene tree dock, right-click on a node and select **Access as Scene "
"Unique Name** in the context menu."
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:26
msgid ""
"After checking this, the node will now have a percent symbol (**%**) next to "
"its name in the scene tree:"
msgstr ""

#: ../../docs/tutorials/scripting/scene_unique_nodes.rst:31
msgid ""
"To use a unique node in a script, use the ``%`` symbol and the node's name "
"in the path for ``get_node()``. For example:"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:4
msgid "Introduction to shaders"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:6
msgid ""
"This page explains what shaders are and will give you an overview of how "
"they work in Godot. For a detailed reference of the engine's shading "
"language, see :ref:`doc_shading_language`."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:10
msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). They were initially used to shade 3D scenes but can nowadays do much "
"more. You can use them to control how the engine draws geometry and pixels "
"on the screen, allowing you to achieve all sorts of effects."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:15
msgid ""
"Modern rendering engines like Godot draw everything with shaders: graphics "
"cards can run thousands of instructions in parallel, leading to incredible "
"rendering speed."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:19
msgid ""
"Because of their parallel nature, though, shaders don't process information "
"the way a typical program does. Shader code runs on each vertex or pixel in "
"isolation. You cannot store data between frames either. As a result, when "
"working with shaders, you need to code and think differently from other "
"programming languages."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:25
msgid ""
"Suppose you want to update all the pixels in a texture to a given color. In "
"GDScript, your code would use ``for`` loops::"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:32
msgid ""
"Your code is already part of a loop in a shader, so the corresponding code "
"would look like this."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:43
msgid ""
"The graphics card calls the ``fragment()`` function once or more for each "
"pixel it has to draw. More on that below."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:46
msgid "Shaders in Godot"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:48
msgid ""
"Godot provides a shading language based on the popular OpenGL Shading "
"Language (GLSL) but simplified. The engine handles some of the lower-level "
"initialization work for you, making it easier to write complex shaders."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:52
msgid ""
"In Godot, shaders are made up of three main functions: ``vertex()``, "
"``fragment()``, and ``light()``."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:55
msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions and some other per-vertex variables."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:58
msgid ""
"The ``fragment()`` function runs for every pixel covered by the mesh. It "
"uses values output by the ``vertex()`` function, interpolated between the "
"vertices."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:62
msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from its previous runs."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:67
msgid ""
"The ``light()`` function won't run if the ``vertex_lighting`` render mode is "
"enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** is "
"enabled in the Project Settings. It's enabled by default on mobile platforms."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:73
msgid "Shader types"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:75
msgid ""
"Instead of supplying a general-purpose configuration for all uses (2D, 3D, "
"particles), you must specify the type of shader you're writing. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:79
msgid ""
"In Godot, all shaders need to specify their type in the first line, like so:"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:85
msgid "Here are the available types:"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:87
msgid ":ref:`spatial <doc_spatial_shader>` for 3D rendering."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:88
msgid ":ref:`canvas_item <doc_canvas_item_shader>` for 2D rendering."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:89
msgid ":ref:`particles <doc_particle_shader>` for particle systems."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:92
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:12
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:14
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:27
msgid "Render modes"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:94
msgid ""
"Shaders have optional render modes you can specify on the second line, after "
"the shader type, like so:"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:102
msgid ""
"Render modes alter the way Godot applies the shader. For example, the "
"``unshaded`` mode makes the engine skip the built-in light processor "
"function."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:105
msgid ""
"Each shader type has different render modes. See the reference for each "
"shader type for a complete list of render modes."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:109
msgid "Processor functions"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:111
msgid ""
"Depending on the shader type, you can override different processor "
"functions. For ``spatial`` and ``canvas_item``, you have access to "
"``vertex()``, ``fragment()``, and ``light()``. For ``particles``, you only "
"have access to ``vertex()``."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:117
msgid "Vertex processor"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:119
msgid ""
"The ``vertex()`` processing function is called once for every vertex in "
"``spatial`` and ``canvas_item`` shaders. For ``particles`` shaders, it is "
"called once for every particle."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:123
msgid ""
"Each vertex in your world's geometry has properties like a position and "
"color. The function modifies those values and passes them to the fragment "
"function. You can also use it to send extra data to the fragment function "
"using varyings."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:127
msgid ""
"By default, Godot transforms your vertex information for you, which is "
"necessary to project geometry onto the screen. You can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:133
msgid "Fragment processor"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:135
msgid ""
"The ``fragment()`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in ``spatial`` and ``canvas_item`` "
"shaders."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:139
msgid ""
"The standard use of the fragment function is to set up material properties "
"used to calculate lighting. For example, you would set values for "
"``ROUGHNESS``, ``RIM``, or ``TRANSMISSION``, which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function, and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on the effects that you do not use."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:152
msgid "Light processor"
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:154
msgid ""
"The ``light()`` processor runs per pixel too, and it runs once for every "
"light that affects the object. It does not run if no lights affect the "
"object. It exists as a function called inside the ``fragment()`` processor "
"and typically operates on the material properties setup inside the "
"``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/introduction_to_shaders.rst:159
msgid ""
"The ``light()`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/index.rst:2
msgid "Shading reference"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:9
msgid ""
"Godot uses a shading language similar to GLSL ES 3.0. Most datatypes and "
"functions are supported, and the few remaining ones will likely be added "
"over time."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:12
msgid ""
"If you are already familiar with GLSL, the :ref:`Godot Shader Migration "
"Guide<doc_converting_glsl_to_godot_shaders>` is a resource that will help "
"you transition from regular GLSL to Godot's shading language."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:16
msgid "Data types"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:18
msgid "Most GLSL ES 3.0 datatypes are supported:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:23
msgid "**void**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:23
msgid "Void datatype, useful only for functions that return nothing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:25
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:595
msgid "**bool**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:25
msgid "Boolean datatype, can only contain ``true`` or ``false``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:27
msgid "**bvec2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:27
msgid "Two-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:29
msgid "**bvec3**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:29
msgid "Three-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:31
msgid "**bvec4**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:31
msgid "Four-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:33
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:597
msgid "**int**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:33
msgid "Signed scalar integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:35
msgid "**ivec2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:35
msgid "Two-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:37
msgid "**ivec3**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:37
msgid "Three-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:39
msgid "**ivec4**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:39
msgid "Four-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:41
msgid "**uint**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:41
msgid "Unsigned scalar integer; can't contain negative numbers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:43
msgid "**uvec2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:43
msgid "Two-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:45
msgid "**uvec3**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:45
msgid "Three-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:47
msgid "**uvec4**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:47
msgid "Four-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:49
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:599
msgid "**float**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:49
msgid "Floating-point scalar."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:51
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:601
msgid "**vec2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:51
msgid "Two-component vector of floating-point values."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:53
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:603
msgid "**vec3**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:53
msgid "Three-component vector of floating-point values."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:55
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:572
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:605
msgid "**vec4**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:55
msgid "Four-component vector of floating-point values."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:57
msgid "**mat2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:57
msgid "2x2 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:59
msgid "**mat3**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:59
msgid "3x3 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:61
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:607
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:609
msgid "**mat4**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:61
msgid "4x4 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:63
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:576
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:578
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:580
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:582
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:584
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:586
msgid "**sampler2D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:63
msgid "Sampler type for binding 2D textures, which are read as float."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:65
msgid "**isampler2D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:65
msgid "Sampler type for binding 2D textures, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:67
msgid "**usampler2D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:67
msgid ""
"Sampler type for binding 2D textures, which are read as unsigned integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:69
msgid "**sampler2DArray**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:69
msgid "Sampler type for binding 2D texture arrays, which are read as float."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:71
msgid "**isampler2DArray**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:71
msgid ""
"Sampler type for binding 2D texture arrays, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:73
msgid "**usampler2DArray**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:73
msgid ""
"Sampler type for binding 2D texture arrays, which are read as unsigned "
"integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:75
msgid "**sampler3D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:75
msgid "Sampler type for binding 3D textures, which are read as float."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:77
msgid "**isampler3D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:77
msgid "Sampler type for binding 3D textures, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:79
msgid "**usampler3D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:79
msgid ""
"Sampler type for binding 3D textures, which are read as unsigned integer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:81
msgid "**samplerCube**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:81
msgid "Sampler type for binding Cubemaps, which are read as floats."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:87
msgid ""
"Just like GLSL ES 3.0, implicit casting between scalars and vectors of the "
"same size but different type is not allowed. Casting of types of different "
"size is also not allowed. Conversion must be done explicitly via "
"constructors."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:98
msgid ""
"Default integer constants are signed, so casting is always needed to convert "
"to unsigned:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:107
msgid "Members"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:109
msgid ""
"Individual scalar members of vector types are accessed via the \"x\", \"y\", "
"\"z\" and \"w\" members. Alternatively, using \"r\", \"g\", \"b\" and \"a\" "
"also works and is equivalent. Use whatever fits best for your needs."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:113
msgid ""
"For matrices, use the ``m[column][row]`` indexing syntax to access each "
"scalar, or ``m[idx]`` to access a vector by row index. For example, for "
"accessing the y position of an object in a mat4 you use ``m[3][1]``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:118
msgid "Constructing"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:120
msgid "Construction of vector types must always pass:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:132
msgid ""
"Construction of matrix types requires vectors of the same dimension as the "
"matrix. You can also build a diagonal matrix using ``matx(float)`` syntax. "
"Accordingly, ``mat4(1.0)`` is an identity matrix."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:142
msgid ""
"Matrices can also be built from a matrix of another dimension. There are two "
"rules : If a larger matrix is constructed from a smaller matrix, the "
"additional rows and columns are set to the values they would have in an "
"identity matrix. If a smaller matrix is constructed from a larger matrix, "
"the top, left submatrix of the larger matrix is used."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:155
msgid "Swizzling"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:157
msgid ""
"It is possible to obtain any combination of components in any order, as long "
"as the result is another vector type (or scalar). This is easier shown than "
"explained:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:174
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:123
msgid "Precision"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:176
msgid ""
"It is possible to add precision modifiers to datatypes; use them for "
"uniforms, variables, arguments and varyings:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:185
msgid ""
"Using lower precision for some operations can speed up the math involved (at "
"the cost of less precision). This is rarely needed in the vertex processor "
"function (where full precision is needed most of the time), but is often "
"useful in the fragment processor."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:189
msgid ""
"Some architectures (mainly mobile) can benefit significantly from this, but "
"there are downsides such as the additional overhead of conversion between "
"precisions. Refer to the documentation of the target architecture for "
"further information. In many cases, mobile drivers cause inconsistent or "
"unexpected behavior and it is best to avoid specifying precision unless "
"necessary."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:198
msgid ""
"Arrays are containers for multiple variables of a similar type. Note: As of "
"Godot 3.2, only local and varying arrays have been implemented."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:202
msgid "Local arrays"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:204
msgid ""
"Local arrays are declared in functions. They can use all of the allowed "
"datatypes, except samplers. The array declaration follows a C-style syntax: "
"``[const] + [precision] + typename + identifier + [array size]``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:213
msgid "They can be initialized at the beginning like:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:225
msgid ""
"You can declare multiple arrays (even with different sizes) in one "
"expression:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:235
msgid "To access an array element, use the indexing syntax:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:245
msgid ""
"Arrays also have a built-in function ``.length()`` (not to be confused with "
"the built-in ``length()`` function). It doesn't accept any parameters and "
"will return the array's size."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:256
msgid ""
"If you use an index below 0 or greater than array size - the shader will "
"crash and break rendering. To prevent this, use ``length()``, ``if``, or "
"``clamp()`` functions to ensure the index is between 0 and the array's "
"length. Always carefully test and check your code. If you pass a constant "
"expression or a simple number, the editor will check its bounds to prevent "
"this crash."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:261
msgid ""
"Use the ``const`` keyword before the variable declaration to make that "
"variable immutable, which means that it cannot be modified. All basic types, "
"except samplers can be declared as constants. Accessing and using a constant "
"value is slightly faster than using a uniform. Constants must be initialized "
"at their declaration."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:271
msgid ""
"Constants cannot be modified and additionally cannot have hints, but "
"multiple of them (if they have the same type) can be declared in a single "
"expression e.g"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:277
msgid "Similar to variables, arrays can also be declared with ``const``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:287
msgid ""
"Constants can be declared both globally (outside of any function) or locally "
"(inside a function). Global constants are useful when you want to have "
"access to a value throughout your shader that does not need to be modified. "
"Like uniforms, global constants are shared between all shader stages, but "
"they are not accessible outside of the shader."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:299
msgid ""
"Godot shading language supports the same set of operators as GLSL ES 3.0. "
"Below is the list of them in precedence order:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:302
msgid "Precedence"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:302
msgid "Class"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:304
msgid "1 (highest)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:304
msgid "parenthetical grouping"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:304
msgid "**()**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:306
msgid "unary"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:306
msgid "**+, -, !, ~**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:308
msgid "multiplicative"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:308
msgid "**/, \\*, %**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:310
msgid "additive"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:310
msgid "**+, -**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:312
msgid "bit-wise shift"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:312
msgid "**<<, >>**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:314
msgid "relational"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:314
msgid "**<, >, <=, >=**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:316
msgid "equality"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:316
msgid "**==, !=**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:318
msgid "bit-wise AND"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:318
msgid "**&**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:320
msgid "bit-wise exclusive OR"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:320
msgid "**^**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:322
msgid "bit-wise inclusive OR"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:322
msgid "**|**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:324
msgid "logical AND"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:324
msgid "**&&**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:326
msgid "12 (lowest)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:326
msgid "logical inclusive OR"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:326
msgid "**||**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:330
msgid "Flow control"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:332
msgid "Godot Shading language supports the most common types of flow control:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:372
msgid ""
"Keep in mind that, in modern GPUs, an infinite loop can exist and can freeze "
"your application (including editor). Godot can't protect you from this, so "
"be careful not to make this mistake!"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:381
msgid "Discarding"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:383
msgid ""
"Fragment and light functions can use the **discard** keyword. If used, the "
"fragment is discarded and nothing is written."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:388
msgid ""
"It is possible to define functions in a Godot shader. They use the following "
"syntax:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:403
msgid ""
"You can only use functions that have been defined above (higher in the "
"editor) the function from which you are calling them."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:406
msgid "Function arguments can have special qualifiers:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:408
msgid "**in**: Means the argument is only for reading (default)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:409
msgid "**out**: Means the argument is only for writing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:410
msgid "**inout**: Means the argument is fully passed via reference."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:412
msgid "Example below:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:421
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:59
msgid "Varyings"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:423
msgid ""
"To send data from the vertex to the fragment (or light) processor function, "
"*varyings* are used. They are set for every primitive vertex in the *vertex "
"processor*, and the value is interpolated for every pixel in the *fragment "
"processor*."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:445
msgid "Varying can also be an array:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:462
msgid ""
"It's also possible to send data from *fragment* to *light* processors using "
"*varying* keyword. To do so you can assign it in the *fragment* and later "
"use it in the *light* function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:478
msgid ""
"Note that varying may not be assigned in custom functions or a *light "
"processor* function like:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:498
msgid ""
"This limitation was introduced to prevent incorrect usage before "
"initialization."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:501
msgid "Interpolation qualifiers"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:503
msgid ""
"Certain values are interpolated during the shading pipeline. You can modify "
"how these interpolations are done by using *interpolation qualifiers*."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:520
msgid "There are two possible interpolation qualifiers:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:523
msgid "Qualifier"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:525
msgid "**flat**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:525
msgid "The value is not interpolated."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:527
msgid "**smooth**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:527
msgid ""
"The value is interpolated in a perspective-correct fashion. This is the "
"default."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:532
#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:221
msgid "Uniforms"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:534
msgid ""
"Passing values to shaders is possible. These are global to the whole shader "
"and are called *uniforms*. When a shader is later assigned to a material, "
"the uniforms will appear as editable parameters in it. Uniforms can't be "
"written from within the shader."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:544
msgid ""
"You can set uniforms in the editor in the material. Or you can set them "
"through GDScript:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:550
msgid ""
"The first argument to ``set_shader_param`` is the name of the uniform in the "
"shader. It must match *exactly* to the name of the uniform in the shader or "
"else it will not be recognized."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:553
msgid ""
"Any GLSL type except for *void* can be a uniform. Additionally, Godot "
"provides optional shader hints to make the compiler understand for what the "
"uniform is used, and how the editor should allow users to modify it."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:565
msgid ""
"It's important to understand that textures that are supplied as color "
"require hints for proper sRGB->linear conversion (i.e. ``hint_albedo``), as "
"Godot's 3D engine renders in linear color space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:567
msgid "Full list of hints below:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:570
msgid "Hint"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:572
msgid "hint_color"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:572
msgid "Used as color."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:574
msgid "**int, float**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:574
msgid "hint_range(min, max[, step])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:574
msgid "Restricted to values in a range (with min/max/step)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:576
msgid "hint_albedo"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:576
msgid "Used as albedo color, default white."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:578
msgid "hint_black_albedo"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:578
msgid "Used as albedo color, default black."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:580
msgid "hint_normal"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:580
msgid "Used as normalmap."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:582
msgid "hint_white"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:582
msgid "As value, default to white."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:584
msgid "hint_black"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:584
msgid "As value, default to black"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:586
msgid "hint_aniso"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:586
msgid "As flowmap, default to right."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:589
msgid ""
"GDScript uses different variable types than GLSL does, so when passing "
"variables from GDScript to shaders, Godot converts the type automatically. "
"Below is a table of the corresponding types:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:593
msgid "GDScript type"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:593
msgid "GLSL type"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:601
msgid "**Vector2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:603
msgid "**Vector3**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:605
#: ../../docs/tutorials/ui/gui_skinning.rst:53
msgid "**Color**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:607
msgid "**Transform**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:609
msgid "**Transform2D**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:612
msgid ""
"Be careful when setting shader uniforms from GDScript, no error will be "
"thrown if the type does not match. Your shader will just exhibit undefined "
"behavior."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:615
msgid "Uniforms can also be assigned default values:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:625
msgid "Built-in variables"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:627
msgid ""
"A large number of built-in variables are available, like ``UV``, ``COLOR`` "
"and ``VERTEX``. What variables are available depends on the type of shader "
"(``spatial``, ``canvas_item`` or ``particle``) and the function used "
"(``vertex``, ``fragment`` or ``light``). For a list of the build-in "
"variables that are available, please see the corresponding pages:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:630
msgid ":ref:`Spatial shaders <doc_spatial_shader>`"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:631
msgid ":ref:`Canvas item shaders <doc_canvas_item_shader>`"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:632
msgid ":ref:`Particle shaders <doc_particle_shader>`"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:637
msgid ""
"A large number of built-in functions are supported, conforming to GLSL ES "
"3.0. When vec_type (float), vec_int_type, vec_uint_type, vec_bool_type "
"nomenclature is used, it can be scalar or vector."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:640
msgid ""
"For a list of the functions that are not available in the GLES2 backend, "
"please see the :ref:`Differences between GLES2 and GLES3 doc "
"<doc_gles2_gles3_differences>`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:646
msgid "vec_type **radians** (vec_type degrees)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:646
msgid "Convert degrees to radians"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:648
msgid "vec_type **degrees** (vec_type radians)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:648
msgid "Convert radians to degrees"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:650
msgid "vec_type **sin** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:650
msgid "Sine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:652
msgid "vec_type **cos** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:652
msgid "Cosine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:654
msgid "vec_type **tan** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:654
msgid "Tangent"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:656
msgid "vec_type **asin** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:656
msgid "Arcsine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:658
msgid "vec_type **acos** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:658
msgid "Arccosine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:660
msgid "vec_type **atan** (vec_type y_over_x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:660
msgid "Arctangent"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:662
msgid "vec_type **atan** (vec_type y, vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:662
msgid "Arctangent to convert vector to angle"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:664
msgid "vec_type **sinh** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:664
msgid "Hyperbolic sine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:666
msgid "vec_type **cosh** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:666
msgid "Hyperbolic cosine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:668
msgid "vec_type **tanh** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:668
msgid "Hyperbolic tangent"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:670
msgid "vec_type **asinh** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:670
msgid "Inverse hyperbolic sine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:672
msgid "vec_type **acosh** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:672
msgid "Inverse hyperbolic cosine"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:674
msgid "vec_type **atanh** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:674
msgid "Inverse hyperbolic tangent"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:676
msgid "vec_type **pow** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:676
msgid "Power (undefined if ``x`` < 0 or if ``x`` = 0 and ``y`` <= 0)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:678
msgid "vec_type **exp** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:678
msgid "Base-e exponential"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:680
msgid "vec_type **exp2** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:680
msgid "Base-2 exponential"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:682
msgid "vec_type **log** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:682
msgid "Natural logarithm"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:684
msgid "vec_type **log2** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:684
msgid "Base-2 logarithm"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:686
msgid "vec_type **sqrt** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:686
msgid "Square root"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:688
msgid "vec_type **inversesqrt** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:688
msgid "Inverse square root"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:690
msgid "vec_type **abs** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:690
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:692
msgid "Absolute"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:692
msgid "ivec_type **abs** (ivec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:694
msgid "vec_type **sign** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:694
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:696
msgid "Sign"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:696
msgid "ivec_type **sign** (ivec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:698
msgid "vec_type **floor** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:698
msgid "Floor"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:700
msgid "vec_type **round** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:700
msgid "Round"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:702
msgid "vec_type **roundEven** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:702
msgid "Round to the nearest even number"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:704
msgid "vec_type **trunc** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:704
msgid "Truncation"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:706
msgid "vec_type **ceil** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:706
msgid "Ceil"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:708
msgid "vec_type **fract** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:708
msgid "Fractional"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:710
msgid "vec_type **mod** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:710
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:712
msgid "Remainder"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:712
msgid "vec_type **mod** (vec_type x , float y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:714
msgid "vec_type **modf** (vec_type x, out vec_type i)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:714
msgid "Fractional of ``x``, with ``i`` as integer part"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:716
msgid "vec_type  **min** (vec_type a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:716
msgid "Minimum"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:718
msgid "vec_type  **max** (vec_type a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:718
msgid "Maximum"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:720
msgid "vec_type **clamp** (vec_type x, vec_type min, vec_type max)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:720
msgid "Clamp to ``min..max``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:722
msgid "float **mix** (float a, float b, float c)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:722
msgid "Linear interpolate"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:724
msgid "vec_type **mix** (vec_type a, vec_type b, float c)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:724
msgid "Linear interpolate (scalar coefficient)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:726
msgid "vec_type **mix** (vec_type a, vec_type b, vec_type c)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:726
msgid "Linear interpolate (vector coefficient)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:728
msgid "vec_type **mix** (vec_type a, vec_type b, bvec_type c)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:728
msgid "Linear interpolate (boolean-vector selection)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:730
msgid "vec_type **step** (vec_type a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:730
msgid "``b[i] < a[i] ? 0.0 : 1.0``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:732
msgid "vec_type **step** (float a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:732
msgid "``b[i] < a ? 0.0 : 1.0``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:734
msgid "vec_type **smoothstep** (vec_type a, vec_type b, vec_type c)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:734
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:736
msgid "Hermite interpolate"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:736
msgid "vec_type **smoothstep** (float a, float b, vec_type c)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:738
msgid "bvec_type **isnan** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:738
msgid "Returns ``true`` if scalar or vector component is ``NaN``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:740
msgid "bvec_type **isinf** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:740
msgid "Returns ``true`` if scalar or vector component is ``INF``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:742
msgid "ivec_type **floatBitsToInt** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:742
msgid "Float->Int bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:744
msgid "uvec_type **floatBitsToUint** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:744
msgid "Float->UInt bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:746
msgid "vec_type **intBitsToFloat** (ivec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:746
msgid "Int->Float bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:748
msgid "vec_type **uintBitsToFloat** (uvec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:748
msgid "UInt->Float bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:750
msgid "float **length** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:750
msgid "Vector length"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:752
msgid "float **distance** (vec_type a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:752
msgid "Distance between vectors i.e ``length(a - b)``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:754
msgid "float **dot** (vec_type a, vec_type b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:756
msgid "vec3 **cross** (vec3 a, vec3 b)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:758
msgid "vec_type **normalize** (vec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:758
msgid "Normalize to unit length"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:760
msgid "vec3 **reflect** (vec3 I, vec3 N)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:760
msgid "Reflect"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:762
msgid "vec3 **refract** (vec3 I, vec3 N, float eta)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:762
msgid "Refract"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:764
msgid "vec_type **faceforward** (vec_type N, vec_type I, vec_type Nref)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:764
msgid "If ``dot(Nref, I)`` < 0, return N, otherwise –N"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:766
msgid "mat_type **matrixCompMult** (mat_type x, mat_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:766
msgid "Matrix component multiplication"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:768
msgid "mat_type **outerProduct** (vec_type column, vec_type row)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:768
msgid "Matrix outer product"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:770
msgid "mat_type **transpose** (mat_type m)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:770
msgid "Transpose matrix"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:772
msgid "float **determinant** (mat_type m)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:772
msgid "Matrix determinant"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:774
msgid "mat_type **inverse** (mat_type m)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:774
msgid "Inverse matrix"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:776
msgid "bvec_type **lessThan** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:776
msgid "Bool vector comparison on < int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:778
msgid "bvec_type **greaterThan** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:778
msgid "Bool vector comparison on > int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:780
msgid "bvec_type **lessThanEqual** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:780
msgid "Bool vector comparison on <= int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:782
msgid "bvec_type **greaterThanEqual** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:782
msgid "Bool vector comparison on >= int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:784
msgid "bvec_type **equal** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:784
msgid "Bool vector comparison on == int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:786
msgid "bvec_type **notEqual** (vec_type x, vec_type y)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:786
msgid "Bool vector comparison on != int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:788
msgid "bool **any** (bvec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:788
msgid "Any component is ``true``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:790
msgid "bool **all** (bvec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:790
msgid "All components are ``true``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:792
msgid "bvec_type **not** (bvec_type x)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:792
msgid "Invert boolean vector"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:794
msgid "ivec2 **textureSize** (sampler2D_type s, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:794
msgid "Get the size of a 2D texture"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:796
msgid "ivec3 **textureSize** (sampler2DArray_type s, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:796
msgid "Get the size of a 2D texture array"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:798
msgid "ivec3 **textureSize** (sampler3D s, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:798
msgid "Get the size of a 3D texture"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:800
msgid "ivec2 **textureSize** (samplerCube s, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:800
msgid "Get the size of a cubemap texture"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:802
msgid "vec4_type **texture** (sampler2D_type s, vec2 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:802
msgid "Perform a 2D texture read"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:804
msgid "vec4_type  **texture** (sampler2DArray_type s, vec3 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:804
msgid "Perform a 2D texture array read"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:806
msgid "vec4_type  **texture** (sampler3D_type s, vec3 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:806
msgid "Perform a 3D texture read"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:808
msgid "vec4 **texture** (samplerCube s, vec3 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:808
msgid "Perform a cubemap texture read"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:810
msgid "vec4_type **textureProj** (sampler2D_type s, vec3 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:810
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:812
msgid "Perform a 2D texture read with projection"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:812
msgid "vec4_type **textureProj** (sampler2D_type s, vec4 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:814
msgid "vec4_type  **textureProj** (sampler3D_type s, vec4 uv [, float bias])"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:814
msgid "Perform a 3D texture read with projection"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:816
msgid "vec4_type **textureLod** (sampler2D_type s, vec2 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:816
msgid "Perform a 2D texture read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:818
msgid "vec4_type **textureLod** (sampler2DArray_type s, vec3 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:818
msgid "Perform a 2D texture array read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:820
msgid "vec4_type **textureLod** (sampler3D_type s, vec3 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:820
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:822
msgid "Perform a 3D texture read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:822
msgid "vec4 **textureLod** (samplerCube s, vec3 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:824
msgid "vec4_type **textureProjLod** (sampler2D_type s, vec3 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:824
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:826
msgid "Perform a 2D texture read with projection/LOD"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:826
msgid "vec4_type **textureProjLod** (sampler2D_type s, vec4 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:828
msgid "vec4_type **textureProjLod** (sampler3D_type s, vec4 uv, float lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:828
msgid "Perform a 3D texture read with projection/LOD"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:830
msgid "vec4_type **texelFetch** (sampler2D_type s, ivec2 uv, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:830
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:832
#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:834
msgid "Fetch a single texel using integer coordinates"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:832
msgid "vec4_type **texelFetch** (sampler2DArray_type s, ivec3 uv, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:834
msgid "vec4_type **texelFetch** (sampler3D_type s, ivec3 uv, int lod)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:836
msgid "vec_type **dFdx** (vec_type p)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:836
msgid "Derivative in ``x`` using local differencing"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:838
msgid "vec_type **dFdy** (vec_type p)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:838
msgid "Derivative in ``y`` using local differencing"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:840
msgid "vec_type **fwidth** (vec_type p)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/shading_language.rst:840
msgid "Sum of absolute derivative in ``x`` and ``y``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:4
msgid "Spatial shaders"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:6
msgid ""
"Spatial shaders are used for shading 3D objects. They are the most complex "
"type of shader Godot offers. Spatial shaders are highly configurable with "
"different render modes and different rendering options (e.g. Subsurface "
"Scattering, Transmission, Ambient Occlusion, Rim lighting etc). Users can "
"optionally write vertex, fragment, and light processor functions to affect "
"how objects are drawn."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:15
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:30
msgid "Render mode"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:17
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:19
msgid "**blend_mix**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:17
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:19
msgid "Mix blend mode (alpha is transparency), default."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:19
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:21
msgid "**blend_add**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:19
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:21
msgid "Additive blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:21
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:23
msgid "**blend_sub**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:21
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:23
msgid "Subtractive blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:23
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:25
msgid "**blend_mul**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:23
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:25
msgid "Multiplicative blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:25
msgid "**depth_draw_opaque**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:25
msgid "Only draw depth for opaque geometry (not transparent)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:27
msgid "**depth_draw_always**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:27
msgid "Always draw depth (opaque and transparent)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:29
msgid "**depth_draw_never**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:29
msgid "Never draw depth."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:31
msgid "**depth_draw_alpha_prepass**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:31
msgid "Do opaque depth pre-pass for transparent geometry."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:33
msgid "**depth_test_disable**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:33
msgid "Disable depth testing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:35
msgid "**cull_front**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:35
msgid "Cull front-faces."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:37
msgid "**cull_back**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:37
msgid "Cull back-faces (default)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:39
msgid "**cull_disabled**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:39
msgid "Culling disabled (double sided)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:41
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:31
msgid "**unshaded**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:41
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:31
msgid "Result is just albedo. No lighting/shading happens in material."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:43
msgid "**diffuse_lambert**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:43
msgid "Lambert shading for diffuse (default)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:45
msgid "**diffuse_lambert_wrap**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:45
msgid "Lambert wrapping (roughness dependent) for diffuse."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:47
msgid "**diffuse_oren_nayar**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:47
msgid "Oren Nayar for diffuse."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:49
msgid "**diffuse_burley**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:49
msgid "Burley (Disney PBS) for diffuse."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:51
msgid "**diffuse_toon**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:51
msgid "Toon shading for diffuse."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:53
msgid "**specular_schlick_ggx**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:53
msgid "Schlick-GGX for specular (default)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:55
msgid "**specular_blinn**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:55
msgid "Blinn for specular (compatibility)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:57
msgid "**specular_phong**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:57
msgid "Phong for specular (compatibility)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:59
msgid "**specular_toon**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:59
msgid "Toon for specular."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:61
msgid "**specular_disabled**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:61
msgid "Disable specular."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:63
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:35
msgid "**skip_vertex_transform**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:63
msgid "VERTEX/NORMAL/etc. need to be transformed manually in vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:65
msgid "**world_vertex_coords**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:65
msgid "VERTEX/NORMAL/etc. are modified in world coordinates instead of local."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:67
msgid "**ensure_correct_normals**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:67
msgid "Use when non-uniform scale is applied to mesh."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:69
msgid "**vertex_lighting**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:69
msgid "Use vertex-based lighting."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:71
msgid "**shadows_disabled**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:71
msgid "Disable computing shadows in shader."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:73
msgid "**ambient_light_disabled**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:73
msgid "Disable contribution from ambient light and radiance map."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:75
msgid "**shadow_to_opacity**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:81
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:39
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:40
msgid "Built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:83
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:41
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:42
msgid ""
"Values marked as \"in\" are read-only. Values marked as \"out\" are for "
"optional writing and will not necessarily contain sensible values. Values "
"marked as \"inout\" provide a sensible default value, and can optionally be "
"written to. Samplers are not subjects of writing and they are not marked."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:89
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:47
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:48
msgid "Global built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:91
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:49
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:50
msgid "Global built-ins are available everywhere, including custom functions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:94
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:139
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:210
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:341
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:52
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:114
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:165
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:218
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:53
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:65
msgid "Built-in"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:96
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:343
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:54
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:55
msgid "in float **TIME**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:96
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:55
msgid "Global time, in seconds."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:100
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:63
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:59
msgid "Vertex built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:102
msgid ""
"Vertex data (``VERTEX``, ``NORMAL``, ``TANGENT``, ``BITANGENT``) are "
"presented in local model space. If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:106
msgid ""
"They can optionally be presented in world space by using the "
"*world_vertex_coords* render mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:108
msgid ""
"Users can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:122
msgid ""
"Other built-ins, such as UV, UV2 and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:124
msgid ""
"Users can override the modelview and projection transforms using the "
"``POSITION`` built-in. When ``POSITION`` is used, the value from ``VERTEX`` "
"is ignored and projection does not happen. However, the value passed to the "
"fragment shader still comes from ``VERTEX``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:128
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:106
msgid ""
"For instancing, the INSTANCE_CUSTOM variable contains the instance custom "
"data. When using particles, this information is usually:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:131
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:109
msgid "**x**: Rotation angle in radians."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:132
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:110
msgid "**y**: Phase during lifetime (0 to 1)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:133
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:111
msgid "**z**: Animation frame."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:135
msgid ""
"This allows you to easily adjust the shader to a particle system using "
"default particles material. When writing a custom particle shader, this "
"value can be used as desired."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:141
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:212
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:345
msgid "in vec2 **VIEWPORT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:141
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:212
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:345
msgid "Size of viewport (in pixels)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:143
msgid "inout mat4 **WORLD_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:143
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:217
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:352
msgid "Model space to world space transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:145
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:219
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:354
msgid "in mat4 **INV_CAMERA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:145
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:219
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:354
msgid "World space to view space transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:147
msgid "inout mat4 **PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:147
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:223
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:358
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:120
msgid "View space to clip space transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:149
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:221
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:356
msgid "in mat4 **CAMERA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:149
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:221
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:356
msgid "View space to world space transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:151
msgid "inout mat4 **MODELVIEW_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:151
msgid "Model space to view space transform (use if possible)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:153
msgid "inout mat4 **INV_PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:153
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:225
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:360
msgid "Clip space to view space transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:155
msgid "inout vec3 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:155
msgid "Vertex in local coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:157
msgid "out vec4  **POSITION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:157
msgid "If written to, overrides final vertex position."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:159
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:233
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:171
msgid "inout vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:159
msgid "Normal in local coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:161
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:235
msgid "inout vec3 **TANGENT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:161
msgid "Tangent in local coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:163
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:237
msgid "inout vec3 **BINORMAL**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:163
msgid "Binormal in local coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:165
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:261
msgid "out float **ROUGHNESS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:165
msgid "Roughness for vertex lighting."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:167
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:132
msgid "inout vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:167
msgid "UV main channel."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:169
msgid "inout vec2 **UV2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:169
msgid "UV secondary channel."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:171
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:247
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:374
msgid "in bool **OUTPUT_IS_SRGB**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:171
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:247
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:374
msgid ""
"``true`` when calculations happen in sRGB color space (``true`` in GLES2, "
"``false`` in GLES3)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:174
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:134
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:180
#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:67
msgid "inout vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:174
msgid "Color from vertices."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:176
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:140
msgid "inout float **POINT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:176
msgid "Point size for point rendering."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:178
msgid "in int **INSTANCE_ID**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:178
msgid "Instance ID for instancing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:180
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:122
msgid "in vec4 **INSTANCE_CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:180
msgid "Instance custom data (for particles, mostly)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:185
msgid ""
"``MODELVIEW_MATRIX`` combines both the ``WORLD_MATRIX`` and "
"``INV_CAMERA_MATRIX`` and is better suited when floating point issues may "
"arise. For example, if the object is very far away from the world origin, "
"you may run into floating point issues when using the seperated "
"``WORLD_MATRIX`` and ``INV_CAMERA_MATRIX``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:188
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:144
msgid "Fragment built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:190
msgid ""
"The default use of a Godot fragment processor function is to set up the "
"material properties of your object and to let the built-in renderer handle "
"the final shading. However, you are not required to use all these "
"properties, and if you don't write to them, Godot will optimize away the "
"corresponding functionality."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:194
msgid "Below are examples of common variables calculated using the built-ins:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:206
msgid ""
"A commonly used alternative to ``WORLD_MATRIX[3].xyz`` is to use ``vec3 "
"origin = (WORLD_MATRIX * vec4(0,0,0,1)).xyz``. It is more efficient to use "
"``WORLD_MATRIX[3].xyz`` as it avoids the matrix multiplication."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:214
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:347
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:167
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:220
msgid "in vec4 **FRAGCOORD**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:214
msgid ""
"Coordinate of pixel center in screen space. ``xy`` specifies  position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:217
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:352
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:116
msgid "in mat4 **WORLD_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:223
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:358
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:120
msgid "in mat4 **PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:225
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:360
msgid "in mat4 **INV_PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:227
msgid "in vec3 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:227
msgid "Vertex that comes from vertex function (default, in view space)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:229
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:368
msgid "in vec3 **VIEW**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:229
msgid "Vector from camera to fragment position (in view space)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:231
msgid "in bool **FRONT_FACING**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:231
msgid "``true`` if current face is front face."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:233
msgid "Normal that comes from vertex function (default, in view space)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:235
msgid "Tangent that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:237
msgid "Binormal that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:239
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:173
msgid "out vec3 **NORMALMAP**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:239
msgid "Set normal here if reading normal from a texture instead of NORMAL."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:241
msgid "out float **NORMALMAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:241
msgid "Depth from variable above. Defaults to 1.0."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:243
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:364
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:178
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:227
msgid "in vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:243
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:364
msgid "UV that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:245
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:366
msgid "in vec2 **UV2**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:245
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:366
msgid "UV2 that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:249
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:229
msgid "in vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:249
msgid "COLOR that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:251
msgid "out vec3 **ALBEDO**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:251
msgid "Albedo (default white)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:253
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:381
msgid "out float **ALPHA**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:253
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:381
msgid ""
"Alpha (0..1); if written to, the material will go to the transparent "
"pipeline."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:255
msgid "out float **ALPHA_SCISSOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:255
msgid "If written to, values below a certain amount of alpha are discarded."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:257
msgid "out float **METALLIC**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:257
msgid "Metallic (0..1)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:259
msgid "out float **SPECULAR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:259
msgid ""
"Specular. Defaults to 0.5, best not to modify unless you want to change IOR."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:261
msgid "Roughness (0..1)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:263
msgid "out float **RIM**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:263
msgid "Rim (0..1). If used, Godot calculates rim lighting."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:265
msgid "out float **RIM_TINT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:265
msgid ""
"Rim Tint, goes from 0 (white) to 1 (albedo). If used, Godot calculates rim "
"lighting."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:267
msgid "out float **CLEARCOAT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:267
msgid "Small added specular blob. If used, Godot calculates Clearcoat."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:269
msgid "out float **CLEARCOAT_GLOSS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:269
msgid "Gloss of Clearcoat. If used, Godot calculates Clearcoat."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:271
msgid "out float **ANISOTROPY**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:271
msgid "For distorting the specular blob according to tangent space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:273
msgid "out vec2 **ANISOTROPY_FLOW**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:273
msgid "Distortion direction, use with flowmaps."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:275
msgid "out float **SSS_STRENGTH**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:275
msgid ""
"Strength of Subsurface Scattering. If used, Subsurface Scattering will be "
"applied to object."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:277
msgid "out vec3 **TRANSMISSION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:277
msgid ""
"Transmission mask (default 0,0,0). Allows light to pass through object. Only "
"applied if used."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:279
msgid "out vec3 **EMISSION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:279
msgid "Emission color (can go over 1,1,1 for HDR)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:281
msgid "out float **AO**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:281
msgid "Strength of Ambient Occlusion. For use with pre-baked AO."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:283
msgid "out float **AO_LIGHT_AFFECT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:283
msgid "How much AO affects lights (0..1; default 0)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:285
msgid "sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:285
msgid ""
"Built-in Texture for reading from the screen. Mipmaps contain increasingly "
"blurred copies."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:287
msgid "sampler2D **DEPTH_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:287
msgid ""
"Built-in Texture for reading depth from the screen. Must convert to linear "
"using INV_PROJECTION."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:289
msgid "out float **DEPTH**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:289
msgid ""
"Custom depth value (0..1). If ``DEPTH`` is being written to in any shader "
"branch, then you are responsible for setting the ``DEPTH`` for **all** other "
"branches. Otherwise, the graphics API will leave them uninitialized."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:293
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:195
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:243
msgid "in vec2 **SCREEN_UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:293
msgid "Screen UV coordinate for current pixel."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:295
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:199
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:245
msgid "in vec2 **POINT_COORD**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:295
msgid "Point Coordinate for drawing points with POINT_SIZE."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:300
#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:395
msgid ""
"Shaders going through the transparent pipeline when ``ALPHA`` is written to "
"may exhibit transparency sorting issues. Read the :ref:`transparency sorting "
"section in the 3D rendering limitations page "
"<doc_3d_rendering_limitations_transparency_sorting>` for more information "
"and ways to avoid issues."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:306
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:207
msgid "Light built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:308
msgid ""
"Writing light processor functions is completely optional. You can skip the "
"light function by setting render_mode to ``unshaded``. If no light function "
"is written, Godot will use the material properties written to in the "
"fragment function to calculate the lighting for you (subject to the "
"render_mode)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:313
msgid ""
"To write a light function, assign something to ``DIFFUSE_LIGHT`` or "
"``SPECULAR_LIGHT``. Assigning nothing means no light is processed."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:316
msgid ""
"The light function is called for every light in every pixel. It is called "
"within a loop for each light type."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:319
msgid ""
"Below is an example of a custom light function using a Lambertian lighting "
"model:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:327
msgid ""
"If you want the lights to add together, add the light contribution to "
"``DIFFUSE_LIGHT`` using ``+=``, rather than overwriting it."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:331
msgid ""
"In GLES2, lights will always be added together even if you override "
"``DIFFUSE_LIGHT`` using ``=``. This is due to lighting being computed in "
"multiple passes (one for each light), unlike GLES3."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:335
msgid ""
"The ``light()`` function won't be run if the ``vertex_lighting`` render mode "
"is enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** "
"is enabled in the Project Settings. (It's enabled by default on mobile "
"platforms.)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:343
msgid "Elapsed total time in seconds."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:347
msgid ""
"Coordinate of pixel center in screen space. ``xy`` specifies position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:362
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:224
msgid "in vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:362
msgid "Normal vector, in view space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:368
msgid "View vector, in view space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:370
msgid "in vec3 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:370
msgid "Light Vector, in view space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:372
msgid "in vec3 **ATTENUATION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:372
msgid "Attenuation based on distance or shadow."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:377
msgid "in vec3 **ALBEDO**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:377
msgid "Base albedo."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:379
msgid "in vec3 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:379
msgid "Color of light multiplied by energy."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:384
msgid "in float **ROUGHNESS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:384
msgid "Roughness."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:386
msgid "in vec3 **TRANSMISSION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:386
msgid "Transmission mask from fragment function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:388
msgid "out vec3 **DIFFUSE_LIGHT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:388
msgid "Diffuse light result."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:390
msgid "out vec3 **SPECULAR_LIGHT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/spatial_shader.rst:390
msgid "Specular light result."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:4
msgid "CanvasItem shaders"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:6
msgid ""
"CanvasItem shaders are used to draw all 2D elements in Godot. These include "
"all nodes that inherit from CanvasItems, and all GUI elements."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:9
msgid ""
"CanvasItem shaders contain less built-in variables and functionality than "
"Spatial shaders, but they maintain the same basic structure with vertex, "
"fragment, and light processor functions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:27
msgid "**blend_premul_alpha**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:27
msgid "Pre-multiplied alpha blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:29
msgid "**blend_disabled**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:29
msgid "Disable blending, values (including alpha) are written as-is."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:33
msgid "**light_only**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:33
msgid "Only draw on light pass."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:35
msgid "VERTEX/NORMAL/etc need to be transformed manually in vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:54
msgid ""
"Global time since the engine has started, in seconds (always positive). It's "
"subject to the rollover setting (which is 3,600 seconds by default). It's "
"not affected by :ref:`time_scale<class_Engine_property_time_scale>` or "
"pausing, but you can override the ``TIME`` variable's time scale by calling "
"``VisualServer.set_shader_time_scale()`` with the desired time scale factor "
"as parameter (``1.0`` being the default)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:65
msgid ""
"Vertex data (``VERTEX``) is presented in local space (pixel coordinates, "
"relative to the camera). If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:68
msgid ""
"The user can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:81
msgid ""
"``WORLD_MATRIX`` is actually a modelview matrix. It takes input in local "
"space and transforms it into view space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:84
msgid ""
"In order to get the world space coordinates of a vertex, you have to pass in "
"a custom uniform like so:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:91
msgid "Then, in your vertex shader:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:102
msgid ""
"``world_position`` can then be used in either the vertex or fragment "
"functions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:104
msgid ""
"Other built-ins, such as UV and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:116
msgid "Image space to view space transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:118
msgid "in mat4 **EXTRA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:118
msgid "Extra transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:122
msgid "Instance custom data."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:124
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:201
msgid "in bool **AT_LIGHT_PASS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:124
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:201
msgid "``true`` if this is a light pass."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:126
msgid "inout vec2 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:126
msgid "Vertex, in image space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:128
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:191
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:239
msgid "in vec2 **TEXTURE_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:128
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:191
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:239
msgid ""
"Normalized pixel size of default 2D texture. For a Sprite with a texture of "
"size 64x32px, **TEXTURE_PIXEL_SIZE** = :code:`vec2(1/64, 1/32)`"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:132
msgid "Texture coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:134
msgid "Color from vertex primitive."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:136
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:183
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:233
msgid "in vec4 **MODULATE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:136
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:183
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:233
msgid ""
"Final modulate color. If used, **COLOR** will not be multiplied by modulate "
"automatically after the fragment function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:140
msgid "Point size for point drawing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:146
msgid ""
"Certain Nodes (for example, :ref:`Sprites <class_Sprite>`) display a texture "
"by default. However, when a custom fragment function is attached to these "
"nodes, the texture lookup needs to be done manually. Godot does not provide "
"the texture color in the ``COLOR`` built-in variable; to read the texture "
"color for such nodes, use:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:155
msgid ""
"This differs from the behavior of the built-in normal map. If a normal map "
"is attached, Godot uses it by default and assigns its value to the built-in "
"``NORMAL`` variable. If you are using a normal map meant for use in 3D, it "
"will appear inverted. In order to use it in your shader, you must assign it "
"to the ``NORMALMAP`` property. Godot will handle converting it for use in 2D "
"and overwriting ``NORMAL``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:167
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:220
msgid ""
"Coordinate of pixel center. In screen space. ``xy`` specifies position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:171
msgid "Normal read from **NORMAL_TEXTURE**. Writable."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:173
msgid ""
"Configures normal maps meant for 3D for use in 2D. If used, overwrites "
"**NORMAL**."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:176
msgid "inout float **NORMALMAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:176
msgid "Normalmap depth for scaling."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:178
msgid "UV from vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:180
msgid ""
"Color from vertex function and output fragment color. If unused, will be set "
"to **TEXTURE** color."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:187
msgid "in sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:187
msgid "Default 2D texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:189
msgid "in sampler2D **NORMAL_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:189
msgid "Default 2D normal texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:195
msgid "Screen UV for use with **SCREEN_TEXTURE**."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:197
msgid "in vec2 **SCREEN_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:197
msgid "Size of individual pixels. Equal to inverse of resolution."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:199
msgid "Coordinate for drawing points."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:203
msgid "in sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:203
msgid "Screen texture, mipmaps contain gaussian blurred versions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:209
msgid ""
"Light processor functions work differently in 2D than they do in 3D. In "
"CanvasItem shaders, the shader is called once for the object being drawn, "
"and then once for each light touching that object in the scene. Use "
"render_mode ``unshaded`` if you do not want any light passes to occur for "
"that object. Use render_mode ``light_only`` if you only want light passes to "
"occur for that object; this can be useful when you only want the object "
"visible where it is covered by light."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:215
msgid ""
"When the shader is on a light pass, the ``AT_LIGHT_PASS`` variable will be "
"``true``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:224
msgid ""
"Input Normal. Although this value is passed in, **normal calculation still "
"happens outside of this function**."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:227
msgid "UV from vertex function, equivalent to the UV in the fragment function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:229
msgid ""
"Input Color. This is the output of the fragment function (with final "
"modulation applied, if **MODULATE** is not used in any function of the "
"shader)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:237
msgid "sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:237
msgid "Current texture in use for CanvasItem."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:243
msgid "**SCREEN_TEXTURE** Coordinate (for using with screen texture)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:245
msgid "UV for Point Sprite."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:247
msgid "inout vec2 **LIGHT_VEC**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:247
msgid ""
"Vector from light to fragment in local coordinates. It can be modified to "
"alter illumination direction when normal maps are used."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:250
msgid "inout vec2 **SHADOW_VEC**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:250
msgid ""
"Vector from light to fragment in local coordinates. It can be modified to "
"alter shadow computation."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:253
msgid "inout float **LIGHT_HEIGHT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:253
msgid "Height of Light. Only effective when normals are used."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:255
msgid "inout vec4 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:255
msgid "Color of Light."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:257
msgid "in vec2 **LIGHT_UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:257
msgid "UV for Light texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:259
msgid "out vec4 **SHADOW_COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:259
msgid "Shadow Color of Light."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:261
msgid "inout vec4 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:261
msgid ""
"Value from the Light texture and output color. Can be modified. If not used, "
"the light function is ignored."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:4
msgid "Particle shaders"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:6
msgid ""
"Particle shaders are a special type of vertex shader that runs before the "
"object is drawn. They are used for calculating material properties such as "
"color, position, and rotation. They are drawn with any regular material for "
"CanvasItem or Spatial, depending on whether they are 2D or 3D."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:11
msgid ""
"Particle shaders are unique because they are not used to draw the object "
"itself; they are used to calculate particle properties, which are then used "
"by the CanvasItem of Spatial shader. They contain only a vertex processor "
"function that outputs multiple properties (see built-ins below)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:16
msgid ""
"Particle shaders use a transform feedback shader, which is a special type of "
"vertex shader that runs on its own. It takes in data in a buffer like a "
"regular vertex shader does, but it also outputs to data buffers instead of "
"outputting to the fragment shader for pixel-processing. Because of this, "
"transform feedback shaders can build on themselves each run, unlike other "
"shaders that discard the data they have calculated once they draw to the "
"frame buffer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:23
msgid ""
"Particle shaders are only available in the GLES3 backend. If you need "
"particles in GLES2, use :ref:`CPUParticles <class_CPUParticles>`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:32
msgid "**keep_data**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:32
msgid "Do not clear previous data on restart."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:34
msgid "**disable_force**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:34
msgid "Disable attractor force. (Not currently implemented in 3.1)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:36
msgid "**disable_velocity**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:36
msgid "Ignore **VELOCITY** value."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:61
msgid ""
"In order to use the ``COLOR`` variable in a SpatialMaterial, set "
"``use_vertex_as_albedo`` to ``true``. In a ShaderMaterial, access it with "
"the ``COLOR`` variable."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:67
msgid ""
"Particle color, can be written to and accessed in mesh's vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:69
msgid "inout vec3 **VELOCITY**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:69
msgid "Particle velocity, can be modified."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:71
msgid "out float **MASS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:71
msgid "Particle mass, use for attractors (not implemented in 3.1)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:73
msgid "inout bool **ACTIVE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:73
msgid "``true`` when Particle is active, can be set to ``false``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:75
msgid "in bool **RESTART**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:75
msgid "``true`` when particle must restart (lifetime cycled)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:77
msgid "inout vec4 **CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:77
msgid ""
"Custom particle data. Accessible from shader of mesh as **INSTANCE_CUSTOM**."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:79
msgid "inout mat4 **TRANSFORM**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:79
msgid "Particle transform."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:81
msgid "in float **LIFETIME**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:81
msgid "Particle lifetime."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:83
msgid "in float **DELTA**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:83
msgid "Delta process time."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:85
msgid "in uint **NUMBER**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:85
msgid "Unique number since emission start."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:87
msgid "in int **INDEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:87
msgid "Particle index (from total particles)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:89
msgid "in mat4 **EMISSION_TRANSFORM**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:89
msgid "Emitter transform (used for non-local systems)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:91
msgid "in uint **RANDOM_SEED**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/particle_shader.rst:91
msgid "Random seed used as base for random."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/index.rst:2
msgid "Your first shader"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/index.rst:4
msgid ""
"This tutorial series will walk you through writing your first shader. It is "
"intended for people who have very little prior experience with shaders and "
"want to get started with the basics. This tutorial will not cover advanced "
"topics and it is not comprehensive. For a comprehensive and detailed "
"overview of shaders in Godot see the :ref:`Shading Reference Page <toc-"
"shading-reference>`."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/index.rst:10
msgid ""
"The \"your first shader\" tutorials walk you through the process of writing "
"a shader step-by-step."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/index.rst:13
msgid ""
"For a more general introduction into shaders and the OpenGL Shading "
"Language, use `The Book of Shaders <https://thebookofshaders.com>`_."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:4
msgid "Your first 2D shader"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:9
msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:14
msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:18
msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:27
msgid ""
":ref:`CanvasItem <doc_canvas_item_shader>` shaders are used to draw all 2D"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:26
msgid ""
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:29
msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:34
msgid ""
"All objects derived from a :ref:`CanvasItem <class_canvasitem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprites <class_sprite>`, :ref:`TileMaps <class_tilemap>`, :ref:"
"`MeshInstance2Ds <class_meshinstance2d>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:41
msgid ""
"To begin, create a Sprite node. You can use any CanvasItem, but for this "
"tutorial we will use a Sprite."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:44
msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"Icon.png\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:48
msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:55
msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the new "
"shader resource and the shader editor will open. You are now ready to begin "
"writing your first shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:60
msgid "Your first CanvasItem shader"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:62
msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:69
msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:72
msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:75
msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:82
msgid "Your first fragment function"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:84
msgid ""
"The fragment function runs for every pixel in a Sprite and determines what "
"color that pixel should be."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:87
msgid ""
"They are restricted to the pixels covered by the Sprite, that means you "
"cannot use one to, for example, create an outline around a Sprite."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:90
msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:93
msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>` "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:106
msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:109
msgid "Now let's make things more complex."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:111
msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:116
msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:119
msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:132
msgid "Using ``TEXTURE`` built-in"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:134
msgid ""
"When you want to adjust a color in a Sprite you cannot just adjust the color "
"from the texture manually like in the code below."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:144
msgid ""
"The default fragment function reads from a texture and displays it. When you "
"overwrite the default fragment function, you lose that functionality, so you "
"have to implement it yourself. You read from textures using the ``texture`` "
"function. Certain nodes, like Sprites, have a dedicated texture variable "
"that can be accessed in the shader using ``TEXTURE``. Use it together with "
"``UV`` and ``texture`` to draw the Sprite."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:161
msgid "Uniform input"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:163
msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:166
msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:172
msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:175
msgid "Add a uniform to change the amount of blue in our Sprite."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:186
msgid ""
"Now you can change the amount of blue in the Sprite from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:193
msgid "Interacting with shaders from code"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:195
msgid ""
"You can change uniforms from code using the function ``set_shader_param()`` "
"which is called on the node's material resource. With a Sprite node, the "
"following code can be used to set the ``blue`` uniform."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:204
msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:208
msgid "Your first vertex function"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:210
msgid "Now that we have a fragment function, let's write a vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:212
msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:215
msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:221
msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:229
msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for simple "
"animation."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:242
msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_2d_shader.rst:246
msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:4
msgid "Your first 3D shader"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:6
msgid ""
"You have decided to start writing your own custom Spatial shader. Maybe you "
"saw a cool trick online that was done with shaders, or you have found that "
"the :ref:`SpatialMaterial <class_SpatialMaterial>` isn't quite meeting your "
"needs. Either way, you have decided to write your own and now you need to "
"figure out where to start."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:12
msgid ""
"This tutorial will explain how to write a Spatial shader and will cover more "
"topics than the :ref:`CanvasItem <doc_your_first_canvasitem_shader>` "
"tutorial."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:15
msgid ""
"Spatial shaders have more built-in functionality than CanvasItem shaders. "
"The expectation with spatial shaders is that Godot has already provided the "
"functionality for common use cases and all the user needs to do in the "
"shader is set the proper parameters. This is especially true for a PBR "
"(physically based rendering) workflow."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:21
msgid ""
"This is a two-part tutorial. In this first part we are going to go through "
"how to make a simple terrain using vertex displacement from a heightmap in "
"the vertex function. In the :ref:`second part "
"<doc_your_second_spatial_shader>` we are going to take the concepts from "
"this tutorial and walk through how to set up custom materials in a fragment "
"shader by writing an ocean water shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:27
msgid ""
"This tutorial assumes some basic shader knowledge such as types (``vec2``, "
"``float``, ``sampler2D``), and functions. If you are uncomfortable with "
"these concepts it is best to get a gentle introduction from `The Book of "
"Shaders <https://thebookofshaders.com>`_ before completing this tutorial."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:34
msgid "Where to assign my material"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:36
msgid ""
"In 3D, objects are drawn using :ref:`Meshes <class_Mesh>`. Meshes are a "
"resource type that store geometry (the shape of your object) and materials "
"(the color and how the object reacts to light) in units called \"surfaces\". "
"A Mesh can have multiple surfaces, or just one. Typically, you would import "
"a mesh from another program (e.g. Blender). But Godot also has a few :ref:"
"`PrimitiveMeshes <class_primitivemesh>` that allow you to add basic geometry "
"to a scene without importing Meshes."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:44
msgid ""
"There are multiple node types that you can use to draw a mesh. The main one "
"is :ref:`MeshInstance <class_meshinstance>`, but you can also use :ref:"
"`Particles <class_particles>`, :ref:`MultiMeshes <class_MultiMesh>` (with a :"
"ref:`MultiMeshInstance <class_multimeshinstance>`), or others."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:49
msgid ""
"Typically, a material is associated with a given surface in a mesh, but some "
"nodes, like MeshInstance, allow you to override the material for a specific "
"surface, or for all surfaces."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:53
msgid ""
"If you set a material on the surface or mesh itself, then all MeshInstances "
"that share that mesh will share that material. However, if you want to reuse "
"the same mesh across multiple mesh instances, but have different materials "
"for each instance then you should set the material on the Meshinstance."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:58
msgid ""
"For this tutorial we will set our material on the mesh itself rather than "
"taking advantage of the MeshInstance's ability to override materials."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:64
msgid "Add a new :ref:`MeshInstance <class_meshinstance>` node to your scene."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:66
msgid ""
"In the inspector tab beside \"Mesh\" click \"[empty]\" and select \"New "
"PlaneMesh\". Then click on the image of a plane that appears."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:69
msgid "This adds a :ref:`PlaneMesh <class_planemesh>` to our scene."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:71
msgid ""
"Then, in the viewport, click in the upper left corner on the button that "
"says \"Perspective\". A menu will appear. In the middle of the menu are "
"options for how to display the scene. Select 'Display Wireframe'."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:75
msgid "This will allow you to see the triangles making up the plane."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:79
msgid "Now set ``Subdivide Width`` and ``Subdivide Depth`` to ``32``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:83
msgid ""
"You can see that there are now many more triangles in the :ref:"
"`Mesh<class_MeshInstance>`. This will give us more vertices to work with and "
"thus allow us to add more detail."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:92
msgid ""
":ref:`PrimitiveMeshes <class_primitivemesh>`, like PlaneMesh, only have one"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:90
msgid ""
"surface, so instead of an array of materials there is only one. Click beside "
"\"Material\" where it says \"[empty]\" and select \"New ShaderMaterial\". "
"Then click the sphere that appears."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:94
msgid ""
"Now click beside \"Shader\" where it says \"[empty]\" and select \"New "
"Shader\"."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:96
msgid ""
"The shader editor should now pop up and you are ready to begin writing your "
"first Spatial shader!"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:100
msgid "Shader magic"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:104
msgid ""
"Notice how there is already error? This is because the shader editor reloads "
"shaders on the fly. The first thing Godot shaders need is a declaration of "
"what type of shader they are. We set the variable ``shader_type`` to "
"``spatial`` because this is a spatial shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:113
msgid ""
"Next we will define the ``vertex()`` function. The ``vertex()`` function "
"determines where the vertices of your :ref:`Mesh<class_MeshInstance>` appear "
"in the final scene. We will be using it to offset the height of each vertex "
"and make our flat plane appear like a little terrain."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:118
msgid "We define the vertex shader like so:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:126
msgid ""
"With nothing in the ``vertex()`` function, Godot will use its default vertex "
"shader. We can easily start to make changes by adding a single line:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:135
msgid "Adding this line, you should get an image like the one below."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:139
msgid ""
"Okay, let's unpack this. The ``y`` value of the ``VERTEX`` is being "
"increased. And we are passing the ``x`` and ``z`` components of the "
"``VERTEX`` as arguments to ``cos`` and ``sin``; that gives us a wave-like "
"appearance across the ``x`` and ``z`` axes."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:144
msgid ""
"What we want to achieve is the look of little hills; after all. ``cos`` and "
"``sin`` already look kind of like hills. We do so by scaling the inputs to "
"the ``cos`` and ``sin`` functions."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:156
msgid ""
"This looks better, but it is still too spiky and repetitive, let's make it a "
"little more interesting."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:160
msgid "Noise heightmap"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:162
msgid ""
"Noise is a very popular tool for faking the look of terrain. Think of it as "
"similar to the cosine function where you have repeating hills except, with "
"noise, each hill has a different height."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:166
msgid ""
"Godot provides the :ref:`NoiseTexture <class_noisetexture>` resource for "
"generating a noise texture that can be accessed from a shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:169
msgid ""
"To access a texture in a shader add the following code near the top of your "
"shader, outside the ``vertex()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:176
msgid ""
"This will allow you to send a noise texture to the shader. Now look in the "
"inspector under your material. You should see a section called \"Shader "
"Params\". If you open it up, you'll see a section called \"noise\"."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:180
msgid ""
"Click beside it where it says \"[empty]\" and select \"New NoiseTexture\". "
"Then in your NoiseTexture click beside where it says \"Noise\" and select "
"\"New OpenSimplexNoise\"."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:185
msgid ""
":ref:`OpenSimplexNoise <class_opensimplexnoise>` is used by the NoiseTexture "
"to"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:185
msgid "generate a heightmap."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:187
msgid "Once you set it up and should look like this."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:191
msgid ""
"Now, access the noise texture using the ``texture()`` function. "
"``texture()`` takes a texture as the first argument and a ``vec2`` for the "
"position on the texture as the second argument. We use the ``x`` and ``z`` "
"channels of ``VERTEX`` to determine where on the texture to look up. Note "
"that the PlaneMesh coordinates are within the [-1,1] range (for a size of "
"2), while the texture coordinates are within [0,1], so to normalize we "
"divide by the size of the PlaneMesh 2.0 and add 0.5. ``texture()`` returns a "
"``vec4`` of the ``r, g, b, a`` channels at the position. Since the noise "
"texture is grayscale, all of the values are the same, so we can use any one "
"of the channels as the height. In this case we'll use the ``r``, or ``x`` "
"channel."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:207
msgid ""
"Note: ``xyzw`` is the same as ``rgba`` in GLSL, so instead of ``texture()."
"x`` above, we could use ``texture().r``. See the `OpenGL documentation "
"<https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vectors>`_ for more "
"details."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:212
msgid "Using this code you can see the texture creates random looking hills."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:216
msgid ""
"Right now it is too spiky, we want to soften the hills a bit. To do that, we "
"will use a uniform. You already used a uniform above to pass in the noise "
"texture, now let's learn how they work."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:223
msgid ""
"Uniform variables allow you to pass data from the game into the shader. They "
"are very useful for controlling shader effects. Uniforms can be almost any "
"datatype that can be used in the shader. To use a uniform, you declare it in "
"your :ref:`Shader<class_Shader>` using the keyword ``uniform``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:228
msgid "Let's make a uniform that changes the height of the terrain."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:235
msgid ""
"Godot lets you initialize a uniform with a value; here, ``height_scale`` is "
"set to ``0.5``. You can set uniforms from GDScript by calling the function "
"``set_shader_param()`` on the material corresponding to the shader. The "
"value passed from GDScript takes precedence over the value used to "
"initialize it in the shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:246
msgid ""
"Changing uniforms in Spatial-based nodes is different from CanvasItem-based "
"nodes. Here, we set the material inside the PlaneMesh resource. In other "
"mesh resources you may need to first access the material by calling "
"``surface_get_material()``. While in the MeshInstance you would access the "
"material using ``get_surface_material()`` or ``material_override``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:253
msgid ""
"Remember that the string passed into ``set_shader_param()`` must match the "
"name of the uniform variable in the :ref:`Shader<class_Shader>`. You can use "
"the uniform variable anywhere inside your :ref:`Shader<class_Shader>`. Here, "
"we will use it to set the height value instead of arbitrarily multiplying by "
"``0.5``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:262
msgid "Now it looks  much better."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:266
msgid ""
"Using uniforms, we can even change the value every frame to animate the "
"height of the terrain. Combined with :ref:`Tweens <class_Tween>`, this can "
"be especially useful for simple animations."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:271
msgid "Interacting with light"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:273
msgid ""
"First, turn wireframe off. To do so, click in the upper-left of the Viewport "
"again, where it says \"Perspective\", and select \"Display Normal\"."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:278
msgid ""
"Note how the mesh color goes flat. This is because the lighting on it is "
"flat. Let's add a light!"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:281
msgid "First, we will add an :ref:`OmniLight<class_OmniLight>` to the scene."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:285
msgid ""
"You can see the light affecting the terrain, but it looks odd. The problem "
"is the light is affecting the terrain as if it were a flat plane. This is "
"because the light shader uses the normals from the :ref:`Mesh <class_mesh>` "
"to calculate light."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:290
msgid ""
"The normals are stored in the Mesh, but we are changing the shape of the "
"Mesh in the shader, so the normals are no longer correct. To fix this, we "
"can recalculate the normals in the shader or use a normal texture that "
"corresponds to our noise. Godot makes both easy for us."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:295
msgid ""
"You can calculate the new normal manually in the vertex function and then "
"just set ``NORMAL``. With ``NORMAL`` set, Godot will do all the difficult "
"lighting calculations for us. We will cover this method in the next part of "
"this tutorial, for now we will read normals from a texture."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:300
msgid ""
"Instead we will rely on the NoiseTexture again to calculate normals for us. "
"We do that by passing in a second noise texture."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:307
msgid ""
"Set this second uniform texture to another NoiseTexture with another "
"OpenSimplexNoise. But this time, check off \"As Normalmap\"."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:312
msgid ""
"Now, because this is a normalmap and not a per-vertex normal, we are going "
"to assign it in the ``fragment()`` function. The ``fragment()`` function "
"will be explained in more detail in the next part of this tutorial."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:321
msgid ""
"When we have normals that correspond to a specific vertex we set ``NORMAL``, "
"but if you have a normalmap that comes from a texture, set the normal using "
"``NORMALMAP``. This way Godot will handle the wrapping the texture around "
"the mesh automatically."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:326
msgid ""
"Lastly, in order to ensure that we are reading from the same places on the "
"noise texture and the normalmap texture, we are going to pass the ``VERTEX."
"xz`` position from the ``vertex()`` function to the ``fragment()`` function. "
"We do that with varyings."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:331
msgid ""
"Above the ``vertex()`` define a ``vec2`` called ``tex_position``. And inside "
"the ``vertex()`` function assign ``VERTEX.xz`` to ``tex_position``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:345
msgid ""
"And now we can access ``tex_position`` from the ``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:353
msgid ""
"With the normals in place the light now reacts to the height of the mesh "
"dynamically."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:358
msgid ""
"We can even drag the light around and the lighting will update automatically."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:362
msgid ""
"Here is the full code for this tutorial. You can see it is not very long as "
"Godot handles most of the difficult stuff for you."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_first_3d_shader.rst:385
msgid ""
"That is everything for this part. Hopefully, you now understand the basics "
"of vertex shaders in Godot. In the next part of this tutorial we will write "
"a fragment function to accompany this vertex function and we will cover a "
"more advanced technique to turn this terrain into an ocean of moving waves."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:4
msgid "Your second 3D shader"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:6
msgid ""
"From a high-level, what Godot does is give the user a bunch of parameters "
"that can be optionally set (``AO``, ``SSS_Strength``, ``RIM``, etc.). These "
"parameters correspond to different complex effects (Ambient Occlusion, "
"SubSurface Scattering, Rim Lighting, etc.). When not written to, the code is "
"thrown out before it is compiled and so the shader does not incur the cost "
"of the extra feature. This makes it easy for users to have complex PBR-"
"correct shading, without writing complex shaders. Of course, Godot also "
"allows you to ignore all these parameters and write a fully customized "
"shader."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:15
msgid ""
"For a full list of these parameters see the :ref:`spatial shader "
"<doc_spatial_shader>` reference doc."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:18
msgid ""
"A difference between the vertex function and a fragment function is that the "
"vertex function runs per vertex and sets properties such as ``VERTEX`` "
"(position) and ``NORMAL``, while the fragment shader runs per pixel and, "
"most importantly, sets the ``ALBEDO`` color of the :ref:"
"`Mesh<class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:24
msgid "Your first spatial fragment function"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:26
msgid ""
"As mentioned in the previous part of this tutorial. The standard use of the "
"fragment function in Godot is to set up different material properties and "
"let Godot handle the rest. In order to provide even more flexibility, Godot "
"also provides things called render modes. Render modes are set at the top of "
"the shader, directly below ``shader_type``, and they specify what sort of "
"functionality you want the built-in aspects of the shader to have."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:33
msgid ""
"For example, if you do not want to have lights affect an object, set the "
"render mode to ``unshaded``:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:40
msgid ""
"You can also stack multiple render modes together. For example, if you want "
"to use toon shading instead of more-realistic PBR shading, set the diffuse "
"mode and specular mode to toon:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:48
msgid ""
"This model of built-in functionality allows you to write complex custom "
"shaders by changing only a few parameters."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:51
msgid ""
"For a full list of render modes see the :ref:`Spatial shader reference "
"<doc_spatial_shader>`."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:54
msgid ""
"In this part of the tutorial, we will walk through how to take the bumpy "
"terrain from the previous part and turn it into an ocean."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:57
msgid ""
"First let's set the color of the water. We do that by setting ``ALBEDO``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:59
msgid "``ALBEDO`` is a ``vec3`` that contains the color of the object."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:61
msgid "Let's set it to a nice shade of blue."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:71
msgid ""
"We set it to a very dark shade of blue because most of the blueness of the "
"water will come from reflections from the sky."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:74
msgid ""
"The PBR model that Godot uses relies on two main parameters: ``METALLIC`` "
"and ``ROUGHNESS``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:77
msgid ""
"``ROUGHNESS`` specifies how smooth/rough the surface of a material is. A low "
"``ROUGHNESS`` will make a material appear like a shiny plastic, while a high "
"roughness makes the material appear more solid in color."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:81
msgid ""
"``METALLIC`` specifies how much like a metal the object is. It is better set "
"close to ``0`` or ``1``. Think of ``METALLIC`` as changing the balance "
"between the reflection and the ``ALBEDO`` color. A high ``METALLIC`` almost "
"ignores ``ALBEDO`` altogether, and looks like a mirror of the sky. While a "
"low ``METALLIC`` has a more equal representation of sky color and ``ALBEDO`` "
"color."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:87
msgid ""
"``ROUGHNESS`` increases from ``0`` to ``1`` from left to right while "
"``METALLIC`` increase from ``0`` to ``1`` from top to bottom."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:92
msgid ""
"``METALLIC`` should be close to ``0`` or ``1`` for proper PBR shading. Only "
"set it between them for blending between materials."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:95
msgid ""
"Water is not a metal, so we will set its ``METALLIC`` property to ``0.0``. "
"Water is also highly reflective, so we will set its ``ROUGHNESS`` property "
"to be quite low as well."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:109
msgid ""
"Now we have a smooth plastic looking surface. It is time to think about some "
"particular properties of water that we want to emulate. There are two main "
"ones that will take this from a weird plastic surface to nice stylized "
"water. The first is specular reflections. Specular reflections are those "
"bright spots you see from where the sun reflects directly into your eye. The "
"second is fresnel reflectance. Fresnel reflectance is the property of "
"objects to become more reflective at shallow angles. It is the reason why "
"you can see into water below you, but farther away it reflects the sky."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:118
msgid ""
"In order to increase the specular reflections, we will do two things. First, "
"we will change the render mode for specular to toon because the toon render "
"mode has larger specular highlights."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:128
msgid ""
"Second we will add rim lighting. Rim lighting increases the effect of light "
"at glancing angles. Usually it is used to emulate the way light passes "
"through fabric on the edges of an object, but we will use it here to help "
"achieve a nice watery effect."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:144
msgid ""
"In order to add fresnal reflectance, we will compute a fresnel term in our "
"fragment shader. Here, we aren't going to use a real fresnel term for "
"performance reasons. Instead, we'll approximate it using the dot product of "
"the ``NORMAL`` and ``VIEW`` vectors. The ``NORMAL`` vector points away from "
"the mesh's surface, while the ``VIEW`` vector is the direction between your "
"eye and that point on the surface. The dot product between them is a handy "
"way to tell when you are looking at the surface head-on or at a glancing "
"angle."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:156
msgid ""
"And mix it into both ``ROUGHNESS`` and ``ALBEDO``. This is the benefit of "
"ShaderMaterials over SpatialMaterials. With SpatialMaterial, we could set "
"these properties with a texture, or to a flat number. But with shaders we "
"can set them based on any mathematical function that we can dream up."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:174
msgid ""
"And now, with only 5 lines of code, you can have complex looking water. Now "
"that we have lighting, this water is looking too bright. Let's darken it. "
"This is done easily by decreasing the values of the ``vec3`` we pass into "
"``ALBEDO``. Let's set them to ``vec3(0.01, 0.03, 0.05)``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:182
msgid "Animating with ``TIME``"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:184
msgid ""
"Going back to the vertex function, we can animate the waves using the built-"
"in variable ``TIME``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:187
msgid ""
"``TIME`` is a built-in variable that is accessible from the vertex and "
"fragment functions."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:191
msgid ""
"In the last tutorial we calculated height by reading from a heightmap. For "
"this tutorial, we will do the same. Put the heightmap code in a function "
"called ``height()``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:201
msgid ""
"In order to use ``TIME`` in the ``height()`` function, we need to pass it in."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:208
msgid "And make sure to correctly pass it in inside the vertex function."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:218
msgid ""
"Instead of using a normalmap to calculate normals. We are going to compute "
"them manually in the ``vertex()`` function. To do so use the following line "
"of code."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:225
msgid ""
"We need to compute ``NORMAL`` manually because in the next section we will "
"be using math to create complex-looking waves."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:228
msgid ""
"Now, we are going to make the ``height()`` function a little more "
"complicated by offsetting ``position`` by the cosine of ``TIME``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:238
msgid ""
"This results in waves that move slowly, but not in a very natural way. The "
"next section will dig deeper into using shaders to create more complex "
"effects, in this case realistic waves, by adding a few more mathematical "
"functions."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:243
msgid "Advanced effects: waves"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:245
msgid ""
"What makes shaders so powerful is that you can achieve complex effects by "
"using math. To illustrate this, we are going to take our waves to the next "
"level by modifying the ``height()`` function and by introducing a new "
"function called ``wave()``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:250
msgid ""
"``wave()`` has one parameter, ``position``, which is the same as it is in "
"``height()``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:253
msgid ""
"We are going to call ``wave()`` multiple times in ``height()`` in order to "
"fake the way waves look."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:264
msgid "At first this looks complicated. So let's go through it line-by-line."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:270
msgid ""
"Offset the position by the ``noise`` texture. This will make the waves "
"curve, so they won't be straight lines completely aligned with the grid."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:277
msgid ""
"Define a wave-like function using ``sin()`` and ``position``. Normally "
"``sin()`` waves are very round. We use ``abs()`` to absolute to give them a "
"sharp ridge and constrain them to the 0-1 range. And then we subtract it "
"from ``1.0`` to put the peak on top."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:286
msgid ""
"Multiply the x-directional wave by the y-directional wave and raise it to a "
"power to sharpen the peaks. Then subtract that from ``1.0`` so that the "
"ridges become peaks and raise that to a power to sharpen the ridges."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:290
msgid ""
"We can now replace the contents of our ``height()`` function with ``wave()``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:299
msgid "Using this, you get:"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:303
msgid ""
"The shape of the sin wave is too obvious. So let's spread the waves out a "
"bit. We do this by scaling ``position``."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:313
msgid "Now it looks much better."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:317
msgid ""
"We can do even better if we layer multiple waves on top of each other at "
"varying frequencies and amplitudes. What this means is that we are going to "
"scale position for each one to make the waves thinner or wider (frequency). "
"And we are going to multiply the output of the wave to make them shorter or "
"taller (amplitude)."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:323
msgid ""
"Here is an example for how you could layer the four waves to achieve nicer "
"looking waves."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:336
msgid ""
"Note that we add time to two and subtract it from the other two. This makes "
"the waves move in different directions creating a complex effect. Also note "
"that the amplitudes (the number the result is multiplied by) all add up to "
"``1.0``. This keeps the wave in the 0-1 range."
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:341
msgid ""
"With this code you should end up with more complex looking waves and all you "
"had to do was add a bit of math!"
msgstr ""

#: ../../docs/tutorials/shaders/your_first_shader/your_second_3d_shader.rst:346
msgid ""
"For more information about Spatial shaders read the :ref:`Shading Language "
"<doc_shading_language>` doc and the :ref:`Spatial Shaders "
"<doc_spatial_shader>` doc. Also look at more advanced tutorials in the :ref:"
"`Shading section <toc-learn-features-shading>` and the :ref:`3D <toc-learn-"
"features-3d>` sections."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:4
msgid "Shader materials"
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:9
msgid ""
"For the most common cases, Godot provides ready to use materials for most "
"types of shaders, such as :ref:`SpatialMaterial <class_SpatialMaterial>`, :"
"ref:`CanvasItemMaterial <class_CanvasItemMaterial>` and :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`. They are flexible "
"implementations that cover most use cases."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:14
msgid ""
"Shader materials allow writing a custom shader directly, for maximum "
"flexibility. Examples of this are:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:17
msgid "Create procedural textures."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:18
msgid "Create complex texture blending effects."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:19
msgid "Create animated materials, or materials that change over time."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:20
msgid "Create refractive effects or other advanced effects."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:21
msgid "Create special lighting shaders for more exotic materials."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:22
msgid "Animate vertices, like tree leaves or grass."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:23
msgid "Create custom particle code."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:26
msgid ""
"Godot provides built in functionality to make frequent operations easier. "
"Additionally, Godot's shader editor will detect errors as you type, so you "
"can see your edited shaders in real-time. It is also possible to edit "
"shaders using a visual, node-based graph editor."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:32
msgid "Creating a ShaderMaterial"
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:34
msgid ""
"Create a new ShaderMaterial in some object of your choice. Go to the "
"\"Material\" property and create a ShaderMaterial."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:39
msgid ""
"Next, click on the shader material to see its properties. From here you can "
"create a shader or visual shader. Regular shaders use code to set their "
"properties while a visual shader uses a node based workflow."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:43
msgid ""
"If you need to you can convert a visual shader to a text shader. However you "
"can't convert a text shader to a visual shader."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:46
msgid "Choose one of them and you can start editing your shader."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:50
msgid ""
"If you create a regular shader click on it and the shader editor will open."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:54
msgid ""
"If you create a visual shader the visual shader editor will open "
"automatically."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:58
msgid ""
"In the visual shader editor you can click a button and see what your visual "
"shader looks like as shader code. This can be useful if you're trying to "
"replicate a text shader as nodes, or it can be used as a preview for "
"converting your visual shader to a text shader."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:67
msgid "To learn more about visual shaders, read :ref:`doc_visual_shaders`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:70
msgid "Converting to ShaderMaterial"
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:72
msgid ""
"It is possible to convert from SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial to ShaderMaterial. To do so, go to the material properties "
"and select the convert option."
msgstr ""

#: ../../docs/tutorials/shaders/shader_materials.rst:80
msgid ""
"Using the convert option will turn the SpatialMaterial into a ShaderMaterial "
"with a text shader, not a visual shader."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:4
msgid "Using VisualShaders"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:6
msgid ""
"Just as VisualScript is an alternative for users that prefer a graphical "
"approach to coding, VisualShaders are the visual alternative for creating "
"shaders."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:10
msgid ""
"As shaders are inherently linked to visuals, the graph-based approach with "
"previews of textures, materials, etc. offers a lot of additional convenience "
"compared to purely script-based shaders. On the other hand, VisualShaders do "
"not expose all features of the shader script and using both in parallel "
"might be necessary for specific effects."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:18
msgid ""
"If you are not familiar with shaders, start by reading :ref:"
"`doc_introduction_to_shaders`."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:22
msgid "Creating a VisualShader"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:24
msgid ""
"VisualShaders can be created in any :ref:`class_ShaderMaterial`. To begin "
"using VisualShaders, create a new ``ShaderMaterial`` in an object of your "
"choice."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:29
msgid ""
"Then assign a :ref:`class_VisualShader` resource to the ``Shader`` property."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:33
msgid ""
"Click on the new ``VisualShader`` resource and the Visual Shader Editor will "
"open automatically. The layout of the Visual Shader Editor comprises two "
"parts: the upper toolbar and the graph itself."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:39
msgid "From left to right in the toolbar:"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:41
msgid ""
"The ``Add Node`` button displays a popup menu to let you add nodes to the "
"shader graph."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:43
msgid ""
"The drop-down menu is the shader type: Vertex, Fragment and Light. Like for "
"script shaders, it defines what built-in nodes will be available."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:45
msgid ""
"The following buttons and number input control the zooming level, grid "
"snapping and distance between grid lines (in pixels)."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:47
msgid ""
"The last icon shows the generated shader code corresponding to your graph."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:51
msgid ""
"Although VisualShaders do not require coding, they share the same logic with "
"script shaders. It is advised to learn the basics of both to have a good "
"understanding of the shading pipeline."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:55
msgid ""
"The visual shader graph is converted to a script shader behind the scene, "
"and you can see this code by pressing the last button in the toolbar. This "
"can be convenient to understand what a given node does and how to reproduce "
"it in scripts."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:61
msgid "Using the Visual Shader Editor"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:63
msgid ""
"By default, every new ``VisualShader`` will have an output node. Every node "
"connection ends at one of the output node's sockets. A node is the basic "
"unit to create your shader. To add a new node, click on the ``Add Node`` "
"button on the upper left corner or right click on any empty location in the "
"graph, and a menu will pop up."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:71
msgid "This popup has the following properties:"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:73
msgid ""
"If you right-click on the graph, this menu will be called at the cursor "
"position and the created node, in that case, will also be placed under that "
"position; otherwise, it will be created at the graph's center."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:76
msgid ""
"It can be resized horizontally and vertically allowing more content to be "
"shown. Size transform and tree content position are saved between the calls, "
"so if you suddenly closed the popup you can easily restore its previous "
"state."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:79
msgid ""
"The ``Expand All`` and ``Collapse All`` options in the drop-down option menu "
"can be used to easily list the available nodes."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:81
msgid "You can also drag and drop nodes from the popup onto the graph."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:83
msgid ""
"While the popup has nodes sorted in categories, it can seem overwhelming at "
"first. Try to add some of the nodes, plug them in the output socket and "
"observe what happens."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:87
msgid ""
"When connecting any ``scalar`` output to a ``vector`` input, all components "
"of the vector will take the value of the scalar."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:90
msgid ""
"When connecting any ``vector`` output to a ``scalar`` input, the value of "
"the scalar will be the average of the vector's components."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:94
msgid "Visual Shader nodes"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:96
msgid ""
"Below are some special nodes that are worth knowing about. The list is not "
"exhaustive and might be expanded with more nodes and examples."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:100
msgid "Expression node"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:102
msgid ""
"The ``Expression`` node allows you to write Godot Shading Language (GLSL-"
"like) expressions inside your visual shaders. The node has buttons to add "
"any amount of required input and output ports and can be resized. You can "
"also set up the name and type of each port. The expression you have entered "
"will apply immediately to the material (once the focus leaves the expression "
"text box). Any parsing or compilation errors will be printed to the Output "
"tab. The outputs are initialized to their zero value by default. The node is "
"located under the Special tab and can be used in all shader modes."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:113
msgid ""
"The possibilities of this node are almost limitless – you can write complex "
"procedures, and use all the power of text-based shaders, such as loops, the "
"``discard`` keyword, extended types, etc. For example:"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:120
msgid "Fresnel node"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:122
msgid ""
"The ``Fresnel`` node is designed to accept normal and view vectors and "
"produces a scalar which is the saturated dot product between them. "
"Additionally, you can setup the inversion and the power of equation. The "
"``Fresnel`` node is great for adding a rim-like lighting effect to objects."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:130
msgid "Boolean node"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:132
msgid ""
"The ``Boolean`` node can be converted to ``Scalar`` or ``Vector`` to "
"represent ``0`` or ``1`` and ``(0, 0, 0)`` or ``(1, 1, 1)`` respectively. "
"This property can be used to enable or disable some effect parts with one "
"click."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:139
msgid "If node"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:141
msgid ""
"The ``If`` node allows you to setup a vector which will be returned the "
"result of the comparison between ``a`` and ``b``. There are three vectors "
"which can be returned: ``a == b`` (in that case the tolerance parameter is "
"provided as a comparison threshold – by default it is equal to the minimal "
"value, i.e. ``0.00001``), ``a > b`` and ``a < b``."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:150
msgid "Switch node"
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:152
msgid ""
"The ``Switch`` node returns a vector if the boolean condition is ``true`` or "
"``false``. ``Boolean`` was introduced above. If you convert a vector to a "
"true boolean, all components of the vector should be above zero."
msgstr ""

#: ../../docs/tutorials/shaders/visual_shaders.rst:160
msgid ""
"The ``Switch`` node is only available on the GLES3 backed. If you are "
"targeting GLES2 devices, you cannot use ``switch`` statements."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:4
msgid "Screen-reading shaders"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:9
msgid ""
"It is often desired to make a shader that reads from the same screen to "
"which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:16
msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:21
msgid "SCREEN_TEXTURE built-in texture"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:23
msgid ""
"Godot :ref:`doc_shading_language` has a special texture, ``SCREEN_TEXTURE`` "
"(and ``DEPTH_TEXTURE`` for depth, in the case of 3D). It takes as argument "
"the UV of the screen and returns a vec3 RGB with the color. A special built-"
"in varying: SCREEN_UV can be used to obtain the UV for the current fragment. "
"As a result, this simple canvas_item fragment shader:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:34
msgid "results in an invisible object, because it just shows what lies behind."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:36
msgid ""
"The reason why textureLod must be used is because, when Godot copies back a "
"chunk of the screen, it also does an efficient separatable gaussian blur to "
"its mipmaps."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:39
msgid ""
"This allows for not only reading from the screen, but reading from it with "
"different amounts of blur at no cost."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:44
msgid ""
"Mipmaps are not generated in GLES2 due to poor performance and compatibility "
"with older devices."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:48
msgid "SCREEN_TEXTURE example"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:50
msgid ""
"``SCREEN_TEXTURE`` can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:74
msgid "Behind the scenes"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:76
msgid ""
"While this seems magical, it's not. In 2D, the ``SCREEN_TEXTURE`` built-in, "
"when first found in a node that is about to be drawn, does a full-screen "
"copy to a back-buffer. Subsequent nodes that use it in shaders will not have "
"the screen copied for them, because this ends up being inefficient. In 3D, "
"the screen is copied after the opaque geometry pass, but before the "
"transparent geometry pass, so transparent objects will not be captured in "
"the ``SCREEN_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:84
msgid ""
"As a result, in 2D, if shaders that use ``SCREEN_TEXTURE`` overlap, the "
"second one will not use the result of the first one, resulting in unexpected "
"visuals:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:90
msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for ``SCREEN_TEXTURE`` as the first one below, so the first one "
"\"disappears\", or is not visible."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:94
msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:100
msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:111
msgid ""
"In 3D, there is less flexibility to solve this particular issue because the "
"``SCREEN_TEXTURE`` is only captured once. Be careful when using "
"``SCREEN_TEXTURE`` in 3D as it won't capture transparent objects and may "
"capture some opaque objects that are in front of the object."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:116
msgid ""
"You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport "
"<class_Viewport>` with a camera in the same position as your object, and "
"then use the :ref:`Viewport's <class_Viewport>` texture instead of "
"``SCREEN_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:121
msgid "Back-buffer logic"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:123
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:126
msgid ""
"If a node uses the ``SCREEN_TEXTURE``, the entire screen is copied to the "
"back buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:129
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if ``SCREEN_TEXTURE`` was not used), the behavior described in "
"the point above does not happen. In other words, automatic copying of the "
"entire screen only happens if ``SCREEN_TEXTURE`` is used in a node for the "
"first time and no BackBufferCopy node (not disabled) was found before in "
"tree-order."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:135
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then use ``SCREEN_TEXTURE`` on a "
"different region. Avoid this behavior!"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:144
msgid "DEPTH_TEXTURE"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:146
msgid ""
"For 3D shaders, it's also possible to access the screen depth buffer. For "
"this, the ``DEPTH_TEXTURE`` built-in is used. This texture is not linear; it "
"must be converted via the inverse projection matrix."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:150
msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:4
msgid "Converting GLSL to Godot shaders"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:6
msgid ""
"This document explains the differences between Godot's shading language and "
"GLSL and gives practical advice on how to migrate shaders from other "
"sources, such as Shadertoy and The Book of Shaders, into Godot shaders."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:10
msgid ""
"For detailed information on Godot's shading language, please refer to the :"
"ref:`Shading Language <doc_shading_language>` reference."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:14
msgid "GLSL"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:16
msgid ""
"Godot uses a shading language based on GLSL with the addition of a few "
"quality-of-life features. Accordingly, most features available in GLSL are "
"available in Godot's shading language."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:21
msgid "Shader programs"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:23
msgid ""
"In GLSL, each shader uses a separate program. You have one program for the "
"vertex shader and one for the fragment shader. In Godot, you have a single "
"shader that contains a ``vertex`` and/or a ``fragment`` function. If you "
"only choose to write one, Godot will supply the other."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:28
msgid ""
"Godot allows uniform variables and functions to be shared by defining the "
"fragment and vertex shaders in one file. In GLSL, the vertex and fragment "
"programs cannot share variables except when varyings are used."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:33
msgid "Vertex attributes"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:35
msgid ""
"In GLSL, you can pass in per-vertex information using attributes and have "
"the flexibility to pass in as much or as little as you want. In Godot, you "
"have a set number of input attributes, including ``VERTEX`` (position), "
"``COLOR``, ``UV``, ``UV2``, ``NORMAL``. For a complete list, see the :ref:"
"`Shading language reference <doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:42
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:104
msgid "gl_Position"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:44
msgid ""
"``gl_Position`` receives the final position of a vertex specified in the "
"vertex shader. It is specified by the user in clip space. Typically, in "
"GLSL, the model space vertex position is passed in using a vertex attribute "
"called ``position`` and you handle the conversion from model space to clip "
"space manually."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:49
msgid ""
"In Godot, ``VERTEX`` specifies the vertex position in model space at the "
"beginning of the ``vertex`` function. Godot also handles the final "
"conversion to clip space after the user-defined ``vertex`` function is run. "
"If you want to skip the conversion from model to view space, you can set the "
"``render_mode`` to ``skip_vertex_transform``. If you want to skip all "
"transforms, set ``render_mode`` to ``skip_vertex_transform`` and set the "
"``PROJECTION_MATRIX`` to ``mat4(1.0)`` in order to nullify the final "
"transform from view space to clip space."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:61
msgid ""
"Varyings are a type of variable that can be passed from the vertex shader to "
"the fragment shader. In modern GLSL (3.0 and up), varyings are defined with "
"the ``in`` and ``out`` keywords. A variable going out of the vertex shader "
"is defined with ``out`` in the vertex shader and ``in`` inside the fragment "
"shader."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:67
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:223
msgid "Main"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:69
msgid ""
"In GLSL, each shader program looks like a self-contained C-style program. "
"Accordingly, the main entry point is ``main``. If you are copying a vertex "
"shader, rename ``main`` to ``vertex`` and if you are copying a fragment "
"shader, rename ``main`` to ``fragment``."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:77
msgid ""
"Global array constants are not supported in Godot 3.x. You can fake the "
"functionality by using a uniform initialized to the value, but you will not "
"benefit from the increased speed from using a constant."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:81
msgid "Macros"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:83
msgid ""
"In keeping with its similarity to C, GLSL lets you use macros. Commonly "
"``#define`` is used to define constants or small functions. There is no "
"straightforward way to translate defines to Godot's shading language. If it "
"is a function that is defined, then replace with a function, and if it is a "
"constant, then replace with a uniform. For other macros (``#if``, "
"``#ifdef``, etc.), there is no equivalent because they run during the pre-"
"processing stage of compilation."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:94
msgid ""
"GLSL has many built-in variables that are hard-coded. These variables are "
"not uniforms, so they are not editable from the main program."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:98
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:171
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:236
msgid "Variable"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:98
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:171
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:236
msgid "Equivalent"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:100
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:238
msgid "gl_FragColor"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:100
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:173
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:238
msgid "out vec4"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:100
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:173
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:238
msgid "COLOR"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:100
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:173
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:238
msgid "Output color for each pixel."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:102
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:240
msgid "gl_FragCoord"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:102
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:104
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:187
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:189
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:240
msgid "vec4"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:102
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:240
msgid "FRAGCOORD"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:102
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:175
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:240
msgid "For full screen quads. For smaller quads, use UV."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:104
msgid "VERTEX"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:104
msgid "Position of Vertex, output from Vertex Shader."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:106
msgid "gl_PointSize"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:106
msgid "POINT_SIZE"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:106
msgid "Size of Point primitive."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:108
msgid "gl_PointCoord"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:108
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:175
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:242
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:246
msgid "vec2"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:108
msgid "POINT_COORD"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:108
msgid "Position on point when drawing Point primitives."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:110
msgid "gl_FrontFacing"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:110
msgid "FRONT_FACING"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:110
msgid "True if front face of primitive."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:116
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:197
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:250
msgid "Coordinates"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:118
msgid ""
"``gl_FragCoord`` in GLSL and ``FRAGCOORD`` in the Godot shading language use "
"the same coordinate system. If using UV in Godot, the y-coordinate will be "
"flipped upside down."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:125
msgid ""
"In GLSL, you can define the precision of a given type (float or int) at the "
"top of the shader with the ``precision`` keyword. In Godot, you can set the "
"precision of individual variables as you need by placing precision "
"qualifiers ``lowp``, ``mediump``, and ``highp`` before the type when "
"defining the variable. For more information, see the :ref:`Shading Language "
"<doc_shading_language>` reference."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:133
msgid "Shadertoy"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:135
msgid ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ is a website that makes it easy to "
"write fragment shaders and create `pure magic <https://www.shadertoy.com/"
"view/4tjGRh>`_."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:139
msgid ""
"Shadertoy does not give the user full control over the shader. It handles "
"all the input and uniforms and only lets the user write the fragment shader."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:143
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:216
msgid "Types"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:145
msgid ""
"Shadertoy uses the webgl spec, so it runs a slightly different version of "
"GLSL. However, it still has the regular types, including constants and "
"macros."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:149
msgid "mainImage"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:151
msgid ""
"The main point of entry to a Shadertoy shader is the ``mainImage`` function. "
"``mainImage`` has two parameters, ``fragColor`` and ``fragCoord``, which "
"correspond to ``COLOR`` and ``FRAGCOORD`` in Godot, respectively. These "
"parameters are handled automatically in Godot, so you do not need to include "
"them as parameters yourself. Anything in the ``mainImage`` function should "
"be copied into the ``fragment`` function when porting to Godot."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:161
msgid ""
"In order to make writing fragment shaders straightforward and easy, "
"Shadertoy handles passing a lot of helpful information from the main program "
"into the fragment shader for you. A few of these have no equivalents in "
"Godot because Godot has chosen not to make them available by default. This "
"is okay because Godot gives you the ability to make your own uniforms. For "
"variables whose equivalents are listed as \"Provide with Uniform\", users "
"are responsible for creating that uniform themselves. The description gives "
"the reader a hint about what they can pass in as a substitute."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:173
msgid "fragColor"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:175
msgid "fragCoord"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:175
msgid "FRAGCOORD.xy"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:177
msgid "iResolution"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:177
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:191
msgid "vec3"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:177
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:242
msgid "1.0 / SCREEN_PIXEL_SIZE"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:177
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:242
msgid "Can also pass in manually."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:179
msgid "iTime"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:179
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:244
msgid "TIME"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:179
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:244
msgid "Time since shader started."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:181
msgid "iTimeDelta"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:181
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:183
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:185
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:187
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:189
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:246
msgid "Provide with Uniform"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:181
msgid "Time to render previous frame."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:183
msgid "iFrame"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:183
msgid "Frame number."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:185
msgid "iChannelTime[4]"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:185
msgid "Time since that particular texture started."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:187
msgid "iMouse"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:187
#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:246
msgid "Mouse position in pixel coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:189
msgid "iDate"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:189
msgid "Current date, expressed in seconds."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:191
msgid "iChannelResolution[4]"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:191
msgid "1.0 / TEXTURE_PIXEL_SIZE"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:191
msgid "Resolution of particular texture."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:193
msgid "iChanneli"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:193
msgid "Sampler2D"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:193
msgid "TEXTURE"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:193
msgid "Godot provides only one built-in; user can make more."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:199
msgid ""
"``fragCoord`` behaves the same as ``gl_FragCoord`` in :ref:`GLSL "
"<glsl_coordinates>` and ``FRAGCOORD`` in Godot."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:204
msgid "The Book of Shaders"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:206
msgid ""
"Similar to Shadertoy, `The Book of Shaders <https://thebookofshaders.com>`_ "
"provides access to a fragment shader in the web browser, with which the user "
"may interact. The user is restricted to writing fragment shader code with a "
"set list of uniforms passed in and with no ability to add additional "
"uniforms."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:211
msgid ""
"For further help on porting shaders to various frameworks generally, The "
"Book of Shaders provides a `page <https://thebookofshaders.com/04>`_ on "
"running shaders in various frameworks."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:218
msgid ""
"The Book of Shaders uses the webgl spec, so it runs a slightly different "
"version of GLSL. However, it still has the regular types, including "
"constants and macros."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:225
msgid ""
"The entry point for a Book of Shaders fragment shader is ``main``, just like "
"in GLSL. Everything written in a Book of Shaders ``main`` function should be "
"copied into Godot's ``fragment`` function."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:232
msgid ""
"The Book of Shaders sticks closer to plain GLSL than Shadertoy does. It also "
"implements fewer uniforms than Shadertoy."
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:242
msgid "u_resolution"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:244
msgid "u_time"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:246
msgid "u_mouse"
msgstr ""

#: ../../docs/tutorials/shaders/converting_glsl_to_godot_shaders.rst:252
msgid ""
"The Book of Shaders uses the same coordinate system as :ref:`GLSL "
"<glsl_coordinates>`."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:4
msgid "Shaders style guide"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:6
msgid ""
"This style guide lists conventions to write elegant shaders. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:11
msgid ""
"Since the Godot shader language is close to C-style languages and GLSL, this "
"guide is inspired by Godot's own GLSL formatting. You can view an example of "
"a GLSL file in Godot's source code `here <https://github.com/godotengine/"
"godot/blob/master/drivers/gles2/shaders/copy.glsl>`__."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:23
msgid ""
"Godot's built-in shader editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:26
msgid "Here is a complete shader example based on these guidelines:"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:63
msgid ""
"Each indent level should be one tab greater than the block containing it."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:104
msgid ""
"For a general indentation rule, follow `the \"1TBS Style\" <https://en."
"wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)>`_ which "
"recommends placing the brace associated with a control statement on the same "
"line. Always use braces for statements, even if they only span one line. "
"This makes them easier to refactor and avoids mistakes when adding more "
"lines to an ``if`` statement or similar."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:134
msgid "Surround function definitions with one (and only one) blank line:"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:146
msgid ""
"Use one (and only one) blank line inside functions to separate logical "
"sections."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:153
msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two shaders opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:160
msgid "Never combine multiple statements on a single line."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:208
msgid ""
"Don't use multiline comment syntax if your comment can fit on a single line:"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:216
msgid ""
"In the shader editor, to make the selected code a comment (or uncomment it), "
"press :kbd:`Ctrl + K`. This feature adds or removes ``//`` at the start of "
"the selected lines."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:223
msgid ""
"Always use one space around operators and after commas. Also, avoid "
"extraneous spaces in function calls."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:250
msgid "Floating-point numbers"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:252
msgid ""
"Always specify at least one digit for both the integer and fractional part. "
"This makes it easier to distinguish floating-point numbers from integers, as "
"well as distinguishing numbers greater than 1 from those lower than 1."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:273
msgid "Accessing vector members"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:275
msgid ""
"Use ``r``, ``g``, ``b``, and ``a`` when accessing a vector's members if it "
"contains a color. If the vector contains anything else than a color, use "
"``x``, ``y``, ``z``, and ``w``. This allows those reading your code to "
"better understand what the underlying data represents."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:323
msgid "We suggest to organize shader code this way:"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:344
msgid "This code order follows two rules of thumb:"
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:346
msgid "Metadata and properties first, followed by methods."
msgstr ""

#: ../../docs/tutorials/shaders/shaders_style_guide.rst:347
msgid ""
"\"Public\" comes before \"private\". In a shader language's context, "
"\"public\" refers to what's easily adjustable by the user (uniforms)."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:4
msgid "Advanced post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:9
msgid ""
"This tutorial describes an advanced method for post-processing in Godot. In "
"particular, it will explain how to write a post-processing shader that uses "
"the depth buffer. You should already be familiar with post-processing "
"generally and, in particular, with the methods outlined in the :ref:`custom "
"post-processing tutorial <doc_custom_postprocessing>`."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:14
msgid ""
"In the previous post-processing tutorial, we rendered the scene to a :ref:"
"`Viewport <class_Viewport>` and then rendered the Viewport in a :ref:"
"`ViewportContainer <class_ViewportContainer>` to the main scene. One "
"limitation of this method is that we could not access the depth buffer "
"because the depth buffer is only available in spatial shaders and Viewports "
"do not maintain depth information."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:21
msgid "Full screen quad"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:23
msgid ""
"In the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`, "
"we covered how to use a Viewport to make custom post-processing effects. "
"There are two main drawbacks of using a Viewport:"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:27
msgid "The depth buffer cannot be accessed"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:28
msgid "The effect of the post-processing shader is not visible in the editor"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:30
msgid ""
"To get around the limitation on using the depth buffer, use a :ref:"
"`MeshInstance <class_MeshInstance>` with a :ref:`QuadMesh <class_QuadMesh>` "
"primitive. This allows us to use a spatial shader and to access the depth "
"texture of the scene. Next, use a vertex shader to make the quad cover the "
"screen at all times so that the post-processing effect will be applied at "
"all times, including in the editor."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:36
msgid ""
"First, create a new MeshInstance and set its mesh to a QuadMesh. This "
"creates a quad centered at position ``(0, 0, 0)`` with a width and height of "
"``1``. Set the width and height to ``2``. Right now, the quad occupies a "
"position in world space at the origin; however, we want it to move with the "
"camera so that it always covers the entire screen. To do this, we will "
"bypass the coordinate transforms that translate the vertex positions through "
"the difference coordinate spaces and treat the vertices as if they were "
"already in clip space."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:44
msgid ""
"The vertex shader expects coordinates to be output in clip space, which are "
"coordinates ranging from ``-1`` at the left and bottom of the screen to "
"``1`` at the top and right of the screen. This is why the QuadMesh needs to "
"have height and width of ``2``. Godot handles the transform from model to "
"view space to clip space behind the scenes, so we need to nullify the "
"effects of Godot's transformations. We do this by setting the ``POSITION`` "
"built-in to our desired position. ``POSITION`` bypasses the built-in "
"transformations and sets the vertex position directly."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:60
msgid ""
"Even with this vertex shader, the quad keeps disappearing. This is due to "
"frustum culling, which is done on the CPU. Frustum culling uses the camera "
"matrix and the AABBs of Meshes to determine if the Mesh will be visible "
"*before* passing it to the GPU. The CPU has no knowledge of what we are "
"doing with the vertices, so it assumes the coordinates specified refer to "
"world positions, not clip space positions, which results in Godot culling "
"the quad when we turn away from the center of the scene. In order to keep "
"the quad from being culled, there are a few options:"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:68
msgid ""
"Add the QuadMesh as a child to the camera, so the camera is always pointed "
"at it"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:69
msgid ""
"Set the Geometry property ``extra_cull_margin`` as large as possible in the "
"QuadMesh"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:71
msgid ""
"The second option ensures that the quad is visible in the editor, while the "
"first option guarantees that it will still be visible even if the camera "
"moves outside the cull margin. You can also use both options."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:76
msgid "Depth texture"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:78
msgid ""
"To read from the depth texture, perform a texture lookup using ``texture()`` "
"and the uniform variable ``DEPTH_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:85
msgid ""
"Similar to accessing the screen texture, accessing the depth texture is only "
"possible when reading from the current viewport. The depth texture cannot be "
"accessed from another viewport to which you have rendered."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:89
msgid ""
"The values returned by ``DEPTH_TEXTURE`` are between ``0`` and ``1`` and are "
"nonlinear. When displaying depth directly from the ``DEPTH_TEXTURE``, "
"everything will look almost white unless it is very close. This is because "
"the depth buffer stores objects closer to the camera using more bits than "
"those further, so most of the detail in depth buffer is found close to the "
"camera. In order to make the depth value align with world or model "
"coordinates, we need to linearize the value. When we apply the projection "
"matrix to the vertex position, the z value is made nonlinear, so to "
"linearize it, we multiply it by the inverse of the projection matrix, which "
"in Godot, is accessible with the variable ``INV_PROJECTION_MATRIX``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:99
msgid ""
"Firstly, take the screen space coordinates and transform them into "
"normalized device coordinates (NDC). NDC run from ``-1`` to ``1``, similar "
"to clip space coordinates. Reconstruct the NDC using ``SCREEN_UV`` for the "
"``x`` and ``y`` axis, and the depth value for ``z``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:111
msgid ""
"Convert NDC to view space by multiplying the NDC by "
"``INV_PROJECTION_MATRIX``. Recall that view space gives positions relative "
"to the camera, so the ``z`` value will give us the distance to the point."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:124
msgid ""
"Because the camera is facing the negative ``z`` direction, the position will "
"have a negative ``z`` value. In order to get a usable depth value, we have "
"to negate ``view.z``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:127
msgid ""
"The world position can be constructed from the depth buffer using the "
"following code. Note that the ``CAMERA_MATRIX`` is needed to transform the "
"position from view space into world space, so it needs to be passed to the "
"fragment shader with a varying."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:146
msgid "An optimization"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:148
msgid ""
"You can benefit from using a single large triangle rather than using a full "
"screen quad. The reason for this is explained `here <https://michaldrobot."
"com/2014/04/01/gcn-execution-patterns-in-full-screen-passes>`_. However, the "
"benefit is quite small and only beneficial when running especially complex "
"fragment shaders."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:153
msgid ""
"Set the Mesh in the MeshInstance to an :ref:`ArrayMesh <class_ArrayMesh>`. "
"An ArrayMesh is a tool that allows you to easily construct a Mesh from "
"Arrays for vertices, normals, colors, etc."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:157
msgid "Now, attach a script to the MeshInstance and use the following code:"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:179
msgid ""
"The triangle is specified in normalized device coordinates. Recall, NDC run "
"from ``-1`` to ``1`` in both the ``x`` and ``y`` directions. This makes the "
"screen ``2`` units wide and ``2`` units tall. In order to cover the entire "
"screen with a single triangle, use a triangle that is ``4`` units wide and "
"``4`` units tall, double its height and width."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:185
msgid ""
"Assign the same vertex shader from above and everything should look exactly "
"the same."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:187
msgid ""
"The one drawback to using an ArrayMesh over using a QuadMesh is that the "
"ArrayMesh is not visible in the editor because the triangle is not "
"constructed until the scene is run. To get around that, construct a single "
"triangle Mesh in a modelling program and use that in the MeshInstance "
"instead."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:4
msgid "Using a Viewport as a texture"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:9
msgid ""
"This tutorial will introduce you to using the :ref:`Viewport "
"<class_Viewport>` as a texture that can be applied to 3D objects. In order "
"to do so, it will walk you through the process of making a procedural planet "
"like the one below:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:15
msgid ""
"This tutorial does not cover how to code a dynamic atmosphere like the one "
"this planet has."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:17
msgid ""
"This tutorial assumes you are familiar with how to set up a basic scene "
"including: a :ref:`Camera <class_Camera>`, a :ref:`light source "
"<class_OmniLight>`, a :ref:`Mesh Instance <class_MeshInstance>` with a :ref:"
"`Primitive Mesh <class_PrimitiveMesh>`, and applying a :ref:`SpatialMaterial "
"<class_SpatialMaterial>` to the mesh. The focus will be on using the :ref:"
"`Viewport <class_Viewport>` to dynamically create textures that can be "
"applied to the mesh."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:23
msgid "In this tutorial, we'll cover the following topics:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:25
msgid "How to use a :ref:`Viewport <class_Viewport>` as a render texture"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:26
msgid "Mapping a texture to a sphere with equirectangular mapping"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:27
msgid "Fragment shader techniques for procedural planets"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:28
msgid ""
"Setting a Roughness map from a :ref:`Viewport Texture "
"<class_ViewportTexture>`"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:31
msgid "Setting up the Viewport"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:33
msgid "First, add a :ref:`Viewport <class_Viewport>` to the scene."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:35
msgid ""
"Next, set the size of the :ref:`Viewport <class_Viewport>` to ``(1024, "
"512)``. The :ref:`Viewport <class_Viewport>` can actually be any size so "
"long as the width is double the height. The width needs to be double the "
"height so that the image will accurately map onto the sphere, as we will be "
"using equirectangular projection, but more on that later."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:42
msgid ""
"Next, disable HDR and disable 3D. We don't need HDR because our planet's "
"surface will not be especially bright, so values between ``0`` and ``1`` "
"will be fine. And we will be using a :ref:`ColorRect <class_ColorRect>` to "
"render the surface, so we don't need 3D either."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:46
msgid ""
"Select the Viewport and add a :ref:`ColorRect <class_ColorRect>` as a child."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:48
msgid ""
"Set the anchors \"Right\" and \"Bottom\" to ``1``, then make sure all the "
"margins are set to ``0``. This will ensure that the :ref:`ColorRect "
"<class_ColorRect>` takes up the entire :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:53
msgid ""
"Next, we add a :ref:`Shader Material <class_ShaderMaterial>` to the :ref:"
"`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > Material "
"> ``New ShaderMaterial``)."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:55
msgid ""
"Basic familiarity with shading is recommended for this tutorial. However, "
"even if you are new to shaders, all the code will be provided, so you should "
"have no problem following along."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:58
msgid ""
"ColorRect > CanvasItem > Material > Material > click / Edit > ShaderMaterial "
"> Shader > ``New Shader`` > click / Edit:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:68
msgid "The above code renders a gradient like the one below."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:72
msgid ""
"Now we have the basics of a :ref:`Viewport <class_Viewport>` that we render "
"to and we have a unique image that we can apply to the sphere."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:76
msgid "Applying the texture"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:78
msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``New "
"SpatialMaterial``:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:80
msgid ""
"Now we go into the :ref:`Mesh Instance <class_MeshInstance>` and add a :ref:"
"`SpatialMaterial <class_SpatialMaterial>` to it. No need for a special :ref:"
"`Shader Material <class_ShaderMaterial>` (although that would be a good idea "
"for more advanced effects, like the atmosphere in the example above)."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:84
msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``click`` / "
"``Edit``:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:86
msgid ""
"Open the newly created :ref:`SpatialMaterial <class_SpatialMaterial>` and "
"scroll down to the \"Albedo\" section and click beside the \"Texture\" "
"property to add an Albedo Texture. Here we will apply the texture we made. "
"Choose \"New ViewportTexture\""
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:92
msgid ""
"Then, from the menu that pops up, select the Viewport that we rendered to "
"earlier."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:96
msgid ""
"Your sphere should now be colored in with the colors we rendered to the "
"Viewport."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:100
msgid ""
"Notice the ugly seam that forms where the texture wraps around? This is "
"because we are picking a color based on UV coordinates and UV coordinates do "
"not wrap around the texture. This is a classic problem in 2D map projection. "
"Game developers often have a 2-dimensional map they want to project onto a "
"sphere, but when it wraps around, it has large seams. There is an elegant "
"workaround for this problem that we will illustrate in the next section."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:107
msgid "Making the planet texture"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:109
msgid ""
"So now, when we render to our :ref:`Viewport <class_Viewport>`, it appears "
"magically on the sphere. But there is an ugly seam created by our texture "
"coordinates. So how do we get a range of coordinates that wrap around the "
"sphere in a nice way? One solution is to use a function that repeats on the "
"domain of our texture. ``sin`` and ``cos`` are two such functions. Let's "
"apply them to the texture and see what happens."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:120
msgid ""
"Not too bad. If you look around, you can see that the seam has now "
"disappeared, but in its place, we have pinching at the poles. This pinching "
"is due to the way Godot maps textures to spheres in its :ref:"
"`SpatialMaterial <class_SpatialMaterial>`. It uses a projection technique "
"called equirectangular projection, which translates a spherical map onto a "
"2D plane."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:125
msgid ""
"If you are interested in a little extra information on the technique, we "
"will be converting from spherical coordinates into Cartesian coordinates. "
"Spherical coordinates map the longitude and latitude of the sphere, while "
"Cartesian coordinates are, for all intents and purposes, a vector from the "
"center of the sphere to the point."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:130
msgid ""
"For each pixel, we will calculate its 3D position on the sphere. From that, "
"we will use 3D noise to determine a color value. By calculating the noise in "
"3D, we solve the problem of the pinching at the poles. To understand why, "
"picture the noise being calculated across the surface of the sphere instead "
"of across the 2D plane. When you calculate across the surface of the sphere, "
"you never hit an edge, and hence you never create a seam or a pinch point on "
"the pole. The following code converts the ``UVs`` into Cartesian coordinates."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:149
msgid "And if we use ``unit`` as an output ``COLOR`` value, we get:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:153
msgid ""
"Now that we can calculate the 3D position of the surface of the sphere, we "
"can use 3D noise to make the planet. We will be using this noise function "
"directly from a `Shadertoy <https://www.shadertoy.com/view/Xsl3Dl>`_:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:181
msgid ""
"All credit goes to the author, Inigo Quilez. It is published under the "
"``MIT`` licence."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:183
msgid ""
"Now to use ``noise``, add the following to the    ``fragment`` function:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:192
msgid "In order to highlight the texture, we set the material to unshaded."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:194
msgid ""
"You can see now that the noise indeed wraps seamlessly around the sphere. "
"Although this looks nothing like the planet you were promised. So let's move "
"onto something more colorful."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:198
msgid "Coloring the planet"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:200
msgid ""
"Now to make the planet colors. While there are many ways to do this, for "
"now, we will stick with a gradient between water and land."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:203
msgid ""
"To make a gradient in GLSL, we use the ``mix`` function. ``mix`` takes two "
"values to interpolate between and a third argument to choose how much to "
"interpolate between them; in essence, it *mixes* the two values together. In "
"other APIs, this function is often called ``lerp``. However, ``lerp`` is "
"typically reserved for mixing two floats together; ``mix`` can take any "
"values whether it be floats or vector types."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:213
msgid ""
"The first color is blue for the ocean. The second color is a kind of reddish "
"color (because all alien planets need red terrain). And finally, they are "
"mixed together by ``n * 0.5 + 0.5``. ``n`` smoothly varies between ``-1`` "
"and ``1``. So we map it into the ``0-1`` range that ``mix`` expects. Now you "
"can see that the colors change between blue and red."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:220
msgid ""
"That is a little more blurry than we want. Planets typically have a "
"relatively clear separation between land and sea. In order to do that, we "
"will change the last term to ``smoothstep(-0.1, 0.0, n)``. And thus the "
"whole line becomes:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:228
msgid ""
"What ``smoothstep`` does is return ``0`` if the third argument is below the "
"first and ``1`` if the third argument is larger than the second and smoothly "
"blends between ``0`` and ``1`` if the third number is between the first and "
"the second. So in this line, ``smoothstep`` returns ``0`` whenever ``n`` is "
"less than ``-0.1`` and it returns ``1`` whenever ``n`` is above ``0``."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:235
msgid ""
"One more thing to make this a little more planet-y. The land shouldn't be so "
"blobby; let's make the edges a little rougher. A trick that is often used in "
"shaders to make rough looking terrain with noise is to layer levels of noise "
"over one another at various frequencies. We use one layer to make the "
"overall blobby structure of the continents. Then another layer breaks up the "
"edges a bit, and then another, and so on. What we will do is calculate ``n`` "
"with four lines of shader code instead of just one. ``n`` becomes:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:249
msgid "And now the planet looks like:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:253
msgid "And with shading turned back on, it looks like:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:258
msgid "Making an ocean"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:260
msgid ""
"One final thing to make this look more like a planet. The ocean and the land "
"reflect light differently. So we want the ocean to shine a little more than "
"the land. We can do this by passing a fourth value into the ``alpha`` "
"channel of our output ``COLOR`` and using it as a Roughness map."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:268
msgid ""
"This line returns ``0.3`` for water and ``1.0`` for land. This means that "
"the land is going to be quite rough, while the water will be quite smooth."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:271
msgid ""
"And then, in the material, under the \"Metallic\" section, make sure "
"``Metallic`` is set to ``0`` and ``Specular`` is set to ``1``. The reason "
"for this is the water reflects light really well, but isn't metallic. These "
"values are not physically accurate, but they are good enough for this demo."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:275
msgid ""
"Next, under the \"Roughness\" section, set ``Roughness`` to ``1`` and set "
"the roughness texture to a :ref:`Viewport Texture <class_ViewportTexture>` "
"pointing to our planet texture :ref:`Viewport <class_Viewport>`. Finally, "
"set the ``Texture Channel`` to ``Alpha``. This instructs the renderer to use "
"the ``alpha`` channel of our output ``COLOR`` as the ``Roughness`` value."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:282
msgid ""
"You'll notice that very little changes except that the planet is no longer "
"reflecting the sky. This is happening because, by default, when something is "
"rendered with an alpha value, it gets drawn as a transparent object over the "
"background. And since the default background of the :ref:`Viewport "
"<class_Viewport>` is opaque, the ``alpha`` channel of the :ref:`Viewport "
"Texture <class_ViewportTexture>` is ``1``, resulting in the planet texture "
"being drawn with slightly fainter colors and a ``Roughness`` value of ``1`` "
"everywhere. To correct this, we go into the :ref:`Viewport <class_Viewport>` "
"and enable the \"Transparent Bg\" property. Since we are now rendering one "
"transparent object on top of another, we want to enable "
"``blend_premul_alpha``:"
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:295
msgid ""
"This pre-multiplies the colors by the ``alpha`` value and then blends them "
"correctly together. Typically, when blending one transparent color on top of "
"another, even if the background has an ``alpha`` of ``0`` (as it does in "
"this case), you end up with weird color bleed issues. Setting "
"``blend_premul_alpha`` fixes that."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:299
msgid ""
"Now the planet should look like it is reflecting light on the ocean but not "
"the land. If you haven't done so already, add an :ref:`OmniLight "
"<class_OmniLight>` to the scene so you can move it around and see the effect "
"of the reflections on the ocean."
msgstr ""

#: ../../docs/tutorials/shaders/using_viewport_as_texture.rst:305
msgid ""
"And there you have it. A procedural planet generated using a :ref:`Viewport "
"<class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:4
msgid "Custom post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:9
msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. Sometimes you want to write your own custom effect. Here's "
"how you can do so."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:12
msgid ""
"Post-processing effects are shaders applied to a frame after Godot rendered "
"it. You first want to render your scene into a :ref:`Viewport "
"<class_Viewport>`, then render the ``Viewport`` inside a :ref:"
"`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:16
msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:22
msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:27
msgid "Single pass post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:29
msgid ""
"You will need a ``Viewport`` to render your scene to, and a scene to render "
"your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer "
"<class_ViewportContainer>` to display your ``Viewport`` on the entire screen "
"or inside another :ref:`Control <class_Control>` node."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:36
msgid ""
"Rendering using a ``Viewport`` gives you control over how the scene render, "
"including the framerate, and you can use the ``ViewportContainer`` to render "
"3D objects in a 2D scene."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:40
msgid ""
"For this demo, we will use a :ref:`Node2D <class_Node2D>` with a "
"``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should "
"look like this:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:45
msgid ""
"Inside the ``Viewport``, you can have whatever you want. This will contain "
"your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:50
msgid ""
"Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the "
"``ViewportContainer``, and assign a new shader resource to it. You can "
"access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:55
msgid ""
"You can choose not to use a ``ViewportContainer``, but if you do so, you "
"will need to create your own uniform in the shader and pass the ``Viewport`` "
"texture in manually, like so:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:64
msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:72
msgid ""
"Copy the following code to your shader. The above code is a single pass edge "
"detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:94
msgid ""
"The Sobel filter reads pixels in a 9x9 grid around the current pixel and "
"adds them together, using weight. What makes it interesting is that it "
"assigns weights to each pixel; +1 for each of the eight around the center "
"and -8 for the center pixel. The choice of weights is called a \"kernel\". "
"You can use different kernels to create edge detection filters, outlines, "
"and all sorts of effects."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:102
msgid "Multi-pass post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:104
msgid ""
"Some post-processing effects like blur are resource intensive. If you break "
"them down in multiple passes however, you can make them run a lot faster. In "
"a multipass material, each pass takes the result from the previous pass as "
"an input and processes it."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:108
msgid ""
"To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. "
"In the example above, you rendered the content of one ``Viewport`` object "
"into the root ``Viewport``, through a ``ViewportContainer`` node. You can do "
"the same thing for a multi-pass shader by rendering the content of one "
"``Viewport`` into another and then rendering the last ``Viewport`` into the "
"root ``Viewport``."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:113
msgid "Your scene hierarchy will look something like this:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:117
msgid ""
"Godot will render the bottom ``Viewport`` node first. So if the order of the "
"passes matters for your shaders, make sure that you assign the shader you "
"want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:123
msgid ""
"You can also render your Viewports separately without nesting them like "
"this. You just need to use two Viewports and to render them one after the "
"other."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:126
msgid ""
"Apart from the node structure, the steps are the same as with the single-"
"pass post-processing shader."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:128
msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the :ref:"
"`ViewportContainers <class_ViewportContainer>`. The order in which you apply "
"the shaders does not matter:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:168
msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:172
msgid ""
"For more information on how ``Viewport`` nodes work, see the :ref:`Viewports "
"Tutorial <doc_viewports>`."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:4
msgid "Making trees"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:6
msgid ""
"This is a short tutorial on how to make trees and other types of vegetation "
"from scratch."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:8
msgid ""
"The aim is to not focus on the modelling techniques (there are plenty of "
"tutorials about that), but how to make them look good in Godot."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:13
msgid "Start with a tree"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:15
msgid "I took this tree from SketchFab:"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:19
msgid "https://sketchfab.com/models/ea5e6ed7f9d6445ba69589d503e8cebf"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:21
msgid "and opened it in Blender."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:24
msgid "Paint with vertex colors"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:26
msgid ""
"The first thing you may want to do is to use the vertex colors to paint how "
"much the tree will sway when there is wind. Just use the vertex color "
"painting tool of your favorite 3D modelling program and paint something like "
"this:"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:30
msgid ""
"This is a bit exaggerated, but the idea is that color indicates how much "
"sway affects every part of the tree. This scale here represents it better:"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:35
msgid "Write a custom shader for the leaves"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:37
msgid "This is a simple example of a shader for leaves:"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:44
msgid ""
"This is a spatial shader. There is no front/back culling (so leaves can be "
"seen from both sides), and alpha prepass is used, so there are less depth "
"artifacts that result from using transparency (and leaves cast shadow). "
"Finally, for the sway effect, world coordinates are recommended, so the tree "
"can be duplicated, moved, etc. and it will still work together with other "
"trees."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:51
msgid ""
"Here, the texture is read, as well as a transmission color, which is used to "
"add some back-lighting to the leaves, simulating subsurface scattering."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:67
msgid ""
"This is the code to create the sway of the leaves. It's basic (just uses a "
"sinewave multiplying by the time and axis position, but works well). Notice "
"that the strength is multiplied by the color. Every axis uses a different "
"small near 1.0 multiplication factor so axes don't appear in sync."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:70
msgid "Finally, all that's left is the fragment shader:"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:83
msgid "And this is pretty much it."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:85
msgid ""
"The trunk shader is similar, except it does not write to the alpha channel "
"(thus no alpha prepass is needed) and does not require transmission to work. "
"Both shaders can be improved by adding normal mapping, AO and other maps."
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:88
msgid "Improving the shader"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:90
msgid ""
"There are many more resources on how to do this that you can read. Now that "
"you know the basics, a recommended read is the chapter from GPU Gems3 about "
"how Crysis does this (focus mostly on the sway code, as many other "
"techniques shown there are obsolete):"
msgstr ""

#: ../../docs/tutorials/shaders/making_trees.rst:93
msgid "https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch16.html"
msgstr ""

#: ../../docs/tutorials/ui/index.rst:2
msgid "User Interface (UI)"
msgstr ""

#: ../../docs/tutorials/ui/index.rst:15
msgid "GUI skinning and themes"
msgstr ""

#: ../../docs/tutorials/ui/index.rst:17
msgid ""
"Godot features an in-depth skinning/theming system for control nodes. The "
"pages in this section explain the benefits of that system and how to set it "
"up in your projects."
msgstr ""

#: ../../docs/tutorials/ui/index.rst:29
msgid "Control node tutorials"
msgstr ""

#: ../../docs/tutorials/ui/index.rst:31
msgid ""
"The following articles cover specific details of using particular control "
"nodes."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:4
msgid "Size and anchors"
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:6
msgid ""
"If a game was always going to be run on the same device and at the same "
"resolution, positioning controls would be a simple matter of setting the "
"position and size of each one of them. Unfortunately, that is rarely the "
"case."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:11
msgid ""
"Only TVs nowadays have a standard resolution and aspect ratio. Everything "
"else, from computer monitors to tablets, portable consoles and mobile phones "
"have different resolutions and aspect ratios."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:15
msgid ""
"There are several ways to handle this, but for now, let's just imagine that "
"the screen resolution has changed and the controls need to be re-positioned. "
"Some will need to follow the bottom of the screen, others the top of the "
"screen, or maybe the right or left margins."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:22
msgid ""
"This is done by editing the *margin* properties of controls. Each control "
"has four margins: left, right, bottom and top. By default, all of them "
"represent a distance in pixels relative to the top-left corner of the parent "
"control or (in case there is no parent control) the viewport."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:29
msgid ""
"When horizontal (left, right) and/or vertical (top, bottom) anchors are "
"changed to 1, the margin values become relative to the bottom-right corner "
"of the parent control or viewport."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:35
msgid ""
"Here, the control is set to expand its bottom-right corner with that of the "
"parent, so when re-sizing the parent, the control will always cover it, "
"leaving a 20 pixel margin:"
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:42
msgid "Centering a control"
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:44
msgid ""
"To center a control in its parent, set its anchors to 0.5 and each margin to "
"half of its relevant dimension. For example, the code below shows how a "
"TextureRect can be centered in its parent:"
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:63
msgid ""
"Setting each anchor to 0.5 moves the reference point for the margins to the "
"center of its parent. From there, we set negative margins so that the "
"control gets its natural size."
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:68
msgid "Layout Presets"
msgstr ""

#: ../../docs/tutorials/ui/size_and_anchors.rst:70
msgid ""
"Instead of manually adjusting the margin and anchor values, you can use the "
"toolbar's Layout menu, above the viewport. Besides centering, it gives you "
"many options to align and resize control nodes."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:4
msgid "Using Containers"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:6
msgid ""
":ref:`Anchors <doc_size_and_anchors>` are an efficient way to handle "
"different aspect ratios for basic multiple resolution handling in GUIs,"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:9
msgid "For more complex user interfaces, they can become difficult to use."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:11
msgid ""
"This is often the case of games, such as RPGs, online chats, tycoons or "
"simulations. Another common case where more advanced layout features may be "
"required is in-game tools (or simply just tools)."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:14
msgid ""
"All these situations require a more capable OS-like user interface, with "
"advanced layout and formatting. For that, :ref:`Containers "
"<class_container>` are more useful."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:18
msgid "Container layout"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:20
msgid ""
"Containers provide a huge amount of layout power (as an example, the Godot "
"editor user interface is entirely done using them):"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:24
msgid ""
"When a :ref:`Container <class_Container>`-derived node is used, all "
"children :ref:`Control <class_Control>` nodes give up their own positioning "
"ability. This means the *Container* will control their positioning and any "
"attempt to manually alter these nodes will be either ignored or invalidated "
"the next time their parent is resized."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:28
msgid ""
"Likewise, when a *Container* derived node is resized, all its children will "
"be re-positioned according to it, with a behavior based on the type of "
"container used:"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:33
msgid "Example of *HBoxContainer* resizing children buttons."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:35
msgid ""
"The real strength of containers is that they can be nested (as nodes), "
"allowing the creation of very complex layouts that resize effortlessly."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:38
msgid "Size flags"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:40
msgid ""
"When adding a node to a container, the way the container treats each child "
"depends mainly on their *size flags*. These flags can be found by inspecting "
"any control that is a child of a *Container*."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:45
msgid ""
"Size flags are independent for vertical and horizontal sizing and not all "
"containers make use of them (but most do):"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:47
msgid ""
"**Fill**: Ensures the control *fills* the designated area within the "
"container. No matter if a control *expands* or not (see below), it will only "
"*fill* the designated area when this is toggled on (it is by default)."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:49
msgid ""
"**Expand**: Attempts to use as much space as possible in the parent "
"container (in each axis). Controls that don't expand will be pushed away by "
"those that do. Between expanding controls, the amount of space they take "
"from each other is determined by the *Ratio* (see below)."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:52
msgid ""
"**Shrink Center** When expanding (and if not filling), try to remain at the "
"center of the expanded area (by default it remains at the left or top)."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:54
msgid ""
"**Ratio** Simple ratio of how much expanded controls take up the available "
"space in relation to each other. A control with \"2\", will take up twice as "
"much available space as one with \"1\"."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:57
msgid ""
"Experimenting with these flags and different containers is recommended to "
"get a better grasp on how they work."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:60
msgid "Container types"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:62
msgid ""
"Godot provides several container types out of the box as they serve "
"different purposes:"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:65
msgid "Box Containers"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:67
msgid ""
"Arranges child controls vertically or horizontally (via :ref:`HBoxContainer "
"<class_HBoxContainer>` and :ref:`VBoxContainer <class_VBoxContainer>`). In "
"the opposite of the designated direction (as in, vertical for an horizontal "
"container), it just expands the children."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:73
msgid ""
"These containers make use of the *Ratio* property for children with the "
"*Expand* flag set."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:76
msgid "Grid Container"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:78
msgid ""
"Arranges child controls in a grid layout (via :ref:`GridContainer "
"<class_GridContainer>`, amount of columns must be specified). Uses both the "
"vertical and horizontal expand flags."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:84
msgid "Margin Container"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:86
msgid ""
"Child controls are expanded towards the bounds of this control (via :ref:"
"`MarginContainer <class_MarginContainer>`). Padding will be added on the "
"margins depending on the theme configuration."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:92
msgid ""
"Again, keep in mind that the margins are a *Theme* value, so they need to be "
"edited from the constants overrides section of each control:"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:98
msgid "Tab Container"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:100
msgid ""
"Allows you to place several child controls stacked on top of each other "
"(via :ref:`TabContainer <class_TabContainer>`), with only the *current* one "
"visible."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:105
msgid ""
"Changing the *current* one is done via tabs located at the top of the "
"container, via clicking:"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:109
msgid ""
"The titles are generated from the node names by default (although they can "
"be overridden via *TabContainer* API)."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:111
msgid ""
"Settings such as tab placement and *StyleBox* can be modified in the "
"*TabContainer* theme overrides."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:114
msgid "Split Container"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:116
msgid ""
"Accepts only one or two children controls, then places them side to side "
"with a divisor (via :ref:`HSplitContainer <class_HSplitContainer>` and :ref:"
"`VSplitContainer <class_VSplitContainer>`). Respects both horizontal and "
"vertical flags, as well as *Ratio*."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:122
msgid ""
"The divisor can be dragged around to change the size relation between both "
"children:"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:128
msgid "PanelContainer"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:130
msgid ""
"Simple container that draws a *StyleBox*, then expands children to cover its "
"whole area (via :ref:`PanelContainer <class_PanelContainer>`, respecting the "
"*StyleBox* margins). It respects both the horizontal and vertical size flags."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:136
msgid ""
"This container is useful as top-level, or just to add custom backgrounds to "
"sections of a layout."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:139
msgid "ScrollContainer"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:141
msgid ""
"Accepts a single child node. If this node is bigger than the container, "
"scrollbars will be added to allow panning the node around (via :ref:"
"`ScrollContainer <class_ScrollContainer>`). Both vertical and horizontal "
"size flags are respected, and the behavior can be turned on or off per axis "
"in the properties."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:148
msgid ""
"Mouse wheel and touch drag (when touch is available) are also valid ways to "
"pan the child control around."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:152
msgid ""
"As in the example above, one of the most common ways to use this container "
"is together with a *VBoxContainer* as child."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:156
#: ../../docs/development/compiling/optimizing_for_size.rst:142
msgid "ViewportContainer"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:158
msgid ""
"This is a special control that will only accept a single *Viewport* node as "
"child, and it will display it as if it was an image (via :ref:"
"`ViewportContainer <class_ViewportContainer>`)."
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:162
msgid "Creating custom Containers"
msgstr ""

#: ../../docs/tutorials/ui/gui_containers.rst:164
msgid ""
"It is possible to easily create a custom container using script. Here is an "
"example of a simple container that fits children to its rect size:"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:4
msgid "Custom GUI controls"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:7
msgid "So many controls..."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:9
msgid ""
"Yet there are never enough. Creating your own custom controls that act just "
"the way you want them to is an obsession of almost every GUI programmer. "
"Godot provides plenty of them, but they may not work exactly the way you "
"want. Before contacting the developers with a pull-request to support "
"diagonal scrollbars, at least it will be good to know how to create these "
"controls easily from script."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:19
msgid ""
"For drawing, it is recommended to check the :ref:`doc_custom_drawing_in_2d` "
"tutorial. The same applies. Some functions are worth mentioning due to their "
"usefulness when drawing, so they will be detailed next:"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:24
msgid "Checking control size"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:26
msgid ""
"Unlike 2D nodes, \"size\" is important with controls, as it helps to "
"organize them in proper layouts. For this, the :ref:`Control.rect_size "
"<class_Control_property_rect_size>` property is provided. Checking it during "
"``_draw()`` is vital to ensure everything is kept in-bounds."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:33
msgid "Checking focus"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:35
msgid ""
"Some controls (such as buttons or text editors) might provide input focus "
"for keyboard or joypad input. Examples of this are entering text or pressing "
"a button. This is controlled with the :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>` property. When drawing, and if the "
"control supports input focus, it is always desired to show some sort of "
"indicator (highlight, box, etc.) to indicate that this is the currently "
"focused control. To check for this status, the :ref:`Control.has_focus() "
"<class_Control_method_has_focus>` method exists. Example"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:69
msgid "Sizing"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:71
msgid ""
"As mentioned before, size is important to controls. This allows them to lay "
"out properly, when set into grids, containers, or anchored. Controls, most "
"of the time, provide a *minimum size* to help properly lay them out. For "
"example, if controls are placed vertically on top of each other using a :ref:"
"`VBoxContainer <class_VBoxContainer>`, the minimum size will make sure your "
"custom control is not squished by the other controls in the container."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:79
msgid ""
"To provide this callback, just override :ref:`Control.get_minimum_size() "
"<class_Control_method_get_minimum_size>`, for example:"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:96
msgid "Alternatively, set it using a function:"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:114
msgid ""
"Controls provide a few helpers to make managing input events much easier "
"than regular nodes."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:120
msgid ""
"There are a few tutorials about input before this one, but it's worth "
"mentioning that controls have a special input method that only works when:"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:124
msgid "The mouse pointer is over the control."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:125
msgid ""
"The button was pressed over this control (control always captures input "
"until button is released)"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:127
msgid ""
"Control provides keyboard/joypad focus via :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>`."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:130
msgid ""
"This function is :ref:`Control._gui_input() "
"<class_Control_method__gui_input>`. Simply override it in your control. No "
"processing needs to be set."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:153
msgid ""
"For more information about events themselves, check the :ref:"
"`doc_inputevent` tutorial."
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:157
#: ../../docs/development/cpp/object_class.rst:241
msgid "Notifications"
msgstr ""

#: ../../docs/tutorials/ui/custom_gui_controls.rst:159
msgid ""
"Controls also have many useful notifications for which no dedicated callback "
"exists, but which can be checked with the _notification callback:"
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:4
msgid "Keyboard/Controller Navigation and Focus"
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:6
msgid ""
"It is a common requirement for a user interface to have full keyboard and "
"controller support for navigation and interaction. There are two main "
"reasons why this is beneficial for projects: improved accessibility (not "
"everyone can use mouse or touch controls for interactions), and getting your "
"project ready for :ref:`consoles <doc_consoles>` (or just for people who "
"prefer to game with a controller on PC)."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:13
msgid ""
"Navigating between UI elements with keyboard or controller is done by "
"changing which node is actively selected. This is also called changing UI "
"focus. Every :ref:`Control <class_Control>` node in Godot is capable of "
"having focus. By default, some control nodes have the ability to "
"automatically grab focus reacting to built-in UI actions such as ``ui_up``, "
"``ui_down``, ``ui_focus_next``, etc. These actions can be seen in the "
"project settings in the input map and can be modified."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:22
msgid ""
"Because these actions are used for focus they should not be used for any "
"gameplay code."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:26
msgid "Node settings"
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:28
msgid ""
"In addition to the built-in logic, you can define what is known as focus "
"neighbors for each individual control node. This allows to finely tune the "
"path the UI focus takes across the user interface of your project. The "
"settings for individual nodes can be found in the Inspector dock, under the "
"\"Focus\" category of the \"Control\" section."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:36
msgid ""
"Neighbor options are used to define nodes for 4-directional navigation, such "
"as using arrow keys or a D-pad on a controller. For example, the bottom "
"neighbor will be used when navigating down with the down arrow or by pushing "
"down on the D-pad. The \"Next\" and \"Previous\" options are used with the "
"focus shift button, such as :kbd:`Tab` on desktop operating systems."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:43
msgid "A node can lose focus if it becomes hidden."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:45
msgid ""
"The mode setting defines how a node can be focused. **All** means a node can "
"be focused by clicking on it with the mouse, or selecting it with a keyboard "
"or controller. **Click** means it can only be focused on by clicking on it. "
"Finally, **None** means it can't be focused at all. Different control nodes "
"have different default settings for this based on how they are typically "
"used, for example, :ref:`Label <class_Label>` nodes are set to \"None\" by "
"default, while :ref:`buttons <class_Button>` are set to \"All\"."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:53
msgid ""
"Make sure to properly configure your scenes for focus and navigation. If a "
"node has no focus neighbor configured, the engine will try to guess the next "
"control automatically. This may result in unintended behavior, especially in "
"a complex user interface that doesn't have well-defined vertical or "
"horizontal navigation flow."
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:59
msgid "Necessary code"
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:61
msgid ""
"For keyboard and controller navigation to work correctly, any node must be "
"focused on using code when the scene starts. Without doing this, pressing "
"buttons or keys won't do anything. Here is a basic example of setting "
"initial focus with code:"
msgstr ""

#: ../../docs/tutorials/ui/gui_navigation.rst:78
msgid ""
"Now when the scene starts the \"Start Button\" node will be focused, and the "
"keyboard or a controller can be used to navigate between it and other UI "
"elements."
msgstr ""

#: ../../docs/tutorials/ui/control_node_gallery.rst:2
msgid "Control node gallery"
msgstr ""

#: ../../docs/tutorials/ui/control_node_gallery.rst:4
msgid "Here is a list of common Control nodes with their name next to them:"
msgstr ""

#: ../../docs/tutorials/ui/control_node_gallery.rst:8
msgid ""
"The Control Gallery demo pictured above can be found `on GitHub <https://"
"github.com/godotengine/godot-demo-projects/tree/master/gui/"
"control_gallery>`__."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:4
msgid "Introduction to GUI skinning"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:6
msgid ""
"It is essential for a game to provide clear, informative, and yet visually "
"pleasing user interface to its players. While :ref:`Control <class_Control>` "
"nodes come with a decently functional look out of the box, there is always "
"room for uniqueness and case-specific tuning. For this purpose Godot engine "
"includes a system for GUI skinning (or theming), which allows you to "
"customize the look of every control in your user interface, including your "
"custom controls."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:13
msgid ""
"Here is an example of this system in action — a game with the GUI that is "
"radically different from the default UI theme of the engine:"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:19
msgid "A \"Gear Up!\" screen in Tank Kings, courtesy of Winterpixel Games"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:21
msgid ""
"Beyond achieving a unique look for your game, this system also enables "
"developers to provide customization options to the end users, including "
"accessibility settings. UI themes are applied in a cascading manner (i.e. "
"they propagate from parent controls to their children), which means that "
"font settings or adjustments for colorblind users can be applied in a single "
"place and affect the entire UI tree. Of course this system can also be used "
"for gameplay purposes: your hero-based game can change its style for the "
"selected player character, or you can give different flavors to the sides in "
"your team-based project."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:31
msgid "Basics of themes"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:33
msgid ""
"The skinning system is driven by the :ref:`Theme <class_Theme>` resource. "
"Every Godot project has an inherent default theme that contains the settings "
"used by the built-in control nodes. This is what gives the controls their "
"distinct look out of the box. A theme only describes the configuration, "
"however, and it is still the job of each individual control to use that "
"configuration in the way it requires to display itself. This is important to "
"remember when implementing :ref:`your own custom controls "
"<doc_custom_gui_controls>`."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:42
msgid ""
"Even the Godot editor itself relies on the default theme. But it doesn't "
"look the same as a Godot project, because it applies its own heavily "
"customized theme on top of the default one. In principle, this works exactly "
"like it would in your game as explained :ref:`below "
"<doc_gui_theme_in_project>`."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:48
msgid "Theme items"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:50
msgid ""
"The configuration that is stored in a theme consists of theme items. Each "
"item has a unique name and must be one of the following data types:"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:55
msgid ""
"A :ref:`color <class_Color>` value, which is often used for fonts and "
"backgrounds. Colors can also be used for modulation of controls and icons."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:59
msgid "**Constant**"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:61
msgid ""
"An integer value, which can be used either for numeric properties of "
"controls (such as the item separation in a :ref:`BoxContainer "
"<class_BoxContainer>`), or for boolean flags (such as the drawing of "
"relationship lines in a :ref:`Tree <class_Tree>`)."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:65
msgid "**Font**"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:67
msgid ""
"A :ref:`font <class_Font>` resource, which is used by controls that display "
"text. Fonts contain most text rendering settings, except for its size and "
"color. On top of that, alignment and text direction are controlled by "
"individual controls."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:72
msgid "**Icon**"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:74
msgid ""
"A :ref:`texture <class_Texture>` resource, which is normally used to display "
"an icon (on a :ref:`Button <class_Button>`, for example)."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:77
msgid "**StyleBox**"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:79
msgid ""
"A :ref:`StyleBox <class_StyleBox>` resource, a collection of configuration "
"options which define the way a UI panel should be displayed. This is not "
"limited to the :ref:`Panel <class_Panel>` control, as styleboxes are used by "
"many controls for their backgrounds and overlays."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:85
msgid "Theme types"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:87
msgid ""
"To help with the organization of its items each theme is separated into "
"types, and each item must belong to a single type. In other words, each "
"theme item is defined by its name, its data type and its theme type. This "
"combination must be unique within the theme. For example, there cannot be "
"two color items named ``font_color`` in a type called ``Label``, but there "
"can be another ``font_color`` item in a type ``LineEdit``."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:94
msgid ""
"The default Godot theme comes with multiple theme types already defined, one "
"for every built-in control node that uses UI skinning. The example above "
"contains actual theme items present in the default theme. You can refer to "
"the **Theme Properties** section in the class reference for each control to "
"see which items are available to it and its child classes."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:101
msgid ""
"Child classes can use theme items defined for their parent class (``Button`` "
"and its derivatives being a good example of that). In fact, every control "
"can use every theme item of any theme type, if it needs to (but for the "
"clarity and predictability we try to avoid that in the engine)."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:106
msgid ""
"It is important to remember that for child classes that process is "
"automated. Whenever a built-in control requests a theme item from the theme "
"it can omit the theme type, and its class name will be used instead. On top "
"of that, the class names of its parent classes will also be used in turn. "
"This allows changes to the parent class, such as ``Button``, to affect all "
"derived classes without the need to customize every one of them."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:113
msgid ""
"You can also define your own theme types, and additionally customize both "
"built-in controls and your own controls. Because built-in controls have no "
"knowledge of your custom theme types, you must utilize scripts to access "
"those items. All control nodes have several methods that allow to fetch "
"theme items from the theme that is applied to them. Those methods accept the "
"theme type as one of the arguments."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:130
msgid ""
"To give more customization opportunities types can also be linked together "
"as type variations. This is another use-case for custom theme types. For "
"example, a theme can contain a type ``Header`` which can be marked as a "
"variation of the base ``Label`` type. An individual ``Label`` control can "
"then be set to use the ``Header`` variation for its type, and every time a "
"theme item is requested from a theme this variation will be used before any "
"other type. This allows to store various presets of theme items for the same "
"class of the control node in the single ``Theme`` resource."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:140
msgid ""
"Only variations available from the default theme or defined in the custom "
"project theme are shown in the Inspector dock as options. You can still "
"input manually the name of a variation that is defined outside of those two "
"places, but it is recommended to keep all variations to the project theme."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:145
msgid ""
"You can learn more about creating and using theme type variations in a :ref:"
"`dedicated article <doc_gui_theme_type_variations>`."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:149
msgid "Customizing a control"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:151
msgid ""
"Each control node can be customized directly without the use of themes. This "
"is called local overrides. Every theme property from the control's class "
"reference can be overridden directly on the control itself, using either the "
"Inspector dock, or scripts. This allows to make granular changes to a "
"particular part of the UI, while not affecting anything else in the project, "
"including this control's children."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:161
msgid ""
"Local overrides are less useful for the visual flair of your user interface, "
"especially if you aim for consistency. However, for layout nodes these are "
"essential. Nodes such as :ref:`BoxContainer <class_BoxContainer>` and :ref:"
"`GridContainer <class_GridContainer>` use theme constants for defining "
"separation between their children, and :ref:`MarginContainer "
"<class_MarginContainer>` stores its customizable margins in its theme items."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:168
msgid ""
"Whenever a control has a local theme item override, this is the value that "
"it uses. Values provided by the theme are ignored."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:174
msgid "Customizing a project"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:176
msgid ""
"Out of the box each project adopts the default project theme provided by "
"Godot. The default theme itself is constant and cannot be changed, but its "
"items can be overridden with a custom theme. Custom themes can be applied in "
"two ways: as a project setting, and as a node property throughout the tree "
"of control nodes."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:181
msgid ""
"There are two project settings that can be adjusted to affect your entire "
"project: :ref:`gui/theme/custom<class_ProjectSettings_property_gui/theme/"
"custom>` allows you to set a custom project-wide theme, and :ref:`gui/theme/"
"custom_font<class_ProjectSettings_property_gui/theme/custom_font>` does the "
"same to the default fallback font. When a theme item is requested by a "
"control node the custom project theme, if present, is checked first. Only if "
"it doesn't have the item the default theme is checked."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:188
msgid ""
"This allows you to configure the default look of every Godot control with a "
"single theme resource, but you can go more granular than that. Every control "
"node also has a :ref:`theme <class_Control_property_theme>` property, which "
"allows you to set a custom theme for the branch of nodes starting with that "
"control. This means that the control and all of its children, and their "
"children in turn, would first check that custom theme resource before "
"falling back on the project and the default themes."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:196
msgid ""
"Instead of changing the project setting you can set the custom theme "
"resource to the root-most control node of your entire UI branch to almost "
"the same effect. While in the running project it will behave as expected, "
"individual scenes will still display using the default theme when previewing "
"or running them directly. To fix that you can set the same theme resource to "
"the root control of each individual scene."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:202
msgid ""
"For example, you can have a certain style for buttons in your project theme, "
"but want a different look for buttons inside of a popup dialog. You can set "
"a custom theme resource to the root control of your popup and define a "
"different style for buttons within that resource. As long as the chain of "
"control nodes between the root of the popup and the buttons is "
"uninterrupted, those buttons will use the styles defined in the theme "
"resource that is closest to them. All other controls will still be styled "
"using the project-wide theme and the default theme styles."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:210
msgid ""
"To sum it up, for an arbitrary control its theme item lookup would look "
"something like this:"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:213
msgid "Check for local overrides of the same data type and name."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:214
msgid "Using control's class name and parent class names:"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:216
msgid ""
"Check every control starting from itself and see if it has a theme property "
"set;"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:217
msgid ""
"If it does, check that theme for the matching item of the same name, data "
"and theme type;"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:218
msgid ""
"If there is no custom theme or it doesn't have the item, move to the parent "
"control;"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:219
msgid ""
"Repeat steps a-c. until the root of the tree is reached, or a non-control "
"node is reached."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:221
msgid ""
"Using control's class name check the project-wide theme, if it's present."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:222
msgid "Using control's class name check the default theme."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:224
msgid ""
"Even if the item doesn't exist in any theme, a corresponding default value "
"for that data type will be returned."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:228
msgid "Beyond controls"
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:230
msgid ""
"Naturally, themes are an ideal type of resource for storing configuration "
"for something visual. While the support for theming is built into control "
"nodes, other nodes can use them as well, just like any other resource."
msgstr ""

#: ../../docs/tutorials/ui/gui_skinning.rst:234
msgid ""
"An example of using themes for something beyond controls can be a modulation "
"of sprites for the same units on different teams in a strategy game. A theme "
"resource can define a collection of colors, and sprites (with a help from "
"scripts) can use those colors to draw the texture. The main benefit being "
"that you could make different themes using the same theme items for red, "
"blue, and green teams, and swap them with a single resource change."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:4
msgid "Using the theme editor"
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:6
msgid ""
"This articles explains how to create and manage UI themes using the Godot "
"editor and its theme editor tool. We recommend getting familiar with the "
"basics behind GUI skinning/theming by reading :ref:`doc_gui_skinning` before "
"starting."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:10
msgid ""
"The theme editor is a bottom panel tool that activates automatically, when "
"a :ref:`Theme <class_Theme>` resource is selected for editing. It contains "
"the necessary UI for adding, removing, and adjusting theme types and theme "
"items. It features a preview section for testing your changes live, as well "
"as a window dialog for doing bulk operations of the theme items."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:17
msgid "Creating a theme"
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:19
msgid ""
"Like any other resources, themes can be created directly in the file system "
"dock by right-clicking and selecting **New Resource...**, then selecting "
"**Theme** and clicking **Create**. This is especially useful for creating "
"project-wide themes."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:24
msgid ""
"Themes also can be created from any control node. Select a control node in "
"the scene hierarchy, then in the inspector go to the ``theme`` property. "
"From there you can select **New Theme**."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:31
msgid ""
"This will create an empty theme and open up the theme editor. Keep in mind "
"that resources created this way are bundled with the scene by default. Use "
"the context menu to save the new theme to a file instead."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:35
msgid ""
"While the theme editor provides the tools to manage theme types and items, "
"themes also include the default, fallback font that you can edit only using "
"the Inspector dock. Same applies to the contents of complex resource types, "
"such as :ref:`StyleBoxes <class_StyleBox>` and icons — they open for editing "
"in the Inspector."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:44
msgid "Theme editor overview"
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:49
msgid ""
"The theme editor has two main parts. The main theme editor, located at the "
"bottom of the Godot editor, aims to provide users with tools to quickly "
"create, edit, and delete theme items and types. It gives visual tools for "
"picking and changing controls, abstracting the underlying theme concepts. "
"The **Manage Theme Items** dialog, on the other hand, tries to address the "
"needs of those who want to change themes manually. It's also useful for "
"creating a new editor theme."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:57
msgid "Theme previews"
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:59
msgid ""
"The left-hand side of the main editor has a set of preview tabs. The "
"**Default Preview** tab is visible out of the box and contains most of the "
"frequently used controls in various states. Previews are interactive, so "
"intermediate states (e.g. hover) can be previewed as well."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:66
msgid ""
"Additional tabs can be created from arbitrary scenes in your project. The "
"scene must have a control node as its root to function as a preview. To add "
"a new tab click the **Add Preview** button and select the saved scene from "
"your file system."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:73
msgid ""
"If you make changes to the scene, they will not be reflected in the preview "
"automatically. To update the preview click the reload button on the toolbar."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:76
msgid ""
"Previews can also be used to quickly select the theme type to edit. Select "
"the picker tool from the toolbar and hover over the preview area to "
"highlight control nodes. Highlighted control nodes display their class name. "
"Clicking on the highlighted control opens it for editing on the right-hand "
"side."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:85
msgid "Theme types and items"
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:87
msgid ""
"The right-hand side of the theme editor provides a list of theme types "
"available in the edited theme resource, and the contents of the selected "
"type. The list of type's items is divided into several tabs, corresponding "
"to each data type available in the theme (colors, constants, styles, etc.). "
"If the **Show Default** option is enabled, then for each built-in type its "
"default theme values are displayed, greyed out. If the option is disabled, "
"only the items available in the edited theme itself are displayed."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:98
msgid ""
"Individual items from the default theme can be added to the current theme by "
"clicking on the **Override** button next to the item. You can also override "
"all the default items of the selected theme type by clicking on the "
"**Override All** button. Overridden properties can then be removed with the "
"**Remove Item** button. Properties can also be renamed using the **Rename "
"Item** button, and completely custom properties can be added to the list "
"using the text field below it."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:105
msgid ""
"Overridden theme items can be edited directly in the right-hand panel, "
"unless they are resources. Resources have rudimentary controls available for "
"them, but must be edited in the Inspector dock instead."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:112
msgid ""
"Styleboxes have an unique feature available, where you can pin an individual "
"stylebox from the list. Pinned stylebox acts like the leader of the pack, "
"and all styleboxes of the same type are updated alongside it when you change "
"its properties. This allows you to edit properties of several styleboxes at "
"the same time."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:121
msgid ""
"While theme types can be picked from a preview, they can also be added "
"manually. Clicking the plus button next to the type list opens the **Add "
"item Type** menu. In that menu you can either select a type from the list, "
"or you can enter an arbitrary name to create a custom type. Text field also "
"filters the list of control nodes."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:131
msgid "Manage and import items"
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:133
msgid ""
"Clicking the **Manage Items** button brings up the **Manage Theme Items** "
"dialog. In the **Edit Items** tab you can view and add theme types, as well "
"as view and edit the theme items of the selected type."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:140
msgid ""
"You can create, rename and remove individual theme items here by clicking "
"the corresponding **Add X Item** and specifying their name. You can also "
"mass delete theme items either by their data type (using the brush icon in "
"the list) or by their quality. **Remove Class Items** will remove all built-"
"in theme items you have customized for a control node type. **Remove Custom "
"Items** will remove all the custom theme items for the selected type. "
"Finally, **Remove All Items** will remove everything from the type."
msgstr ""

#: ../../docs/tutorials/ui/gui_using_theme_editor.rst:148
msgid ""
"From the **Import Items** tab you can import theme items from other themes. "
"You can import items from the default Godot theme, the Godot editor theme, "
"or another custom theme. You can import individual or multiple items, and "
"you can decide whether to copy or omit their data as well. There are several "
"way you can select and deselect the items, including by hand, by hierarchy, "
"by data type, and everything. Opting to include the data will copy all theme "
"items as they are to your theme. Omitting the data will create the items of "
"the corresponding data type and name, but will leave them empty, creating a "
"template of a theme in a way."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:4
msgid "Theme type variations"
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:6
msgid ""
"When designing a user interface there may be times when a :ref:`Control "
"<class_Control>` node needs to have a different look than what is normally "
"defined by a :ref:`Theme <class_Theme>`. Every control node has theme "
"property overrides, which allow you to redefine the styling for each "
"individual UI element."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:14
msgid ""
"This approach quickly becomes hard to manage, if you need to share the same "
"custom look between several controls. Imagine that you use gray, blue, and "
"red variants of :ref:`Button <class_Button>` throughout your project. "
"Setting it up every time you add a new button element to your interface is a "
"tedious task."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:19
msgid ""
"To help with the organization and to better utilize the :ref:`power of "
"themes <doc_gui_skinning>` you can use theme type variations. These work "
"like normal theme types, but instead of being self-sufficient and standalone "
"they extend another, base type."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:23
msgid ""
"Following the previous example, your theme can have some styles, colors, and "
"fonts defined for the ``Button`` type, customizing the looks of every button "
"element in your UI. To then have a gray, red, or blue button you would "
"create a new type, e.g. ``GrayButton``, and mark it as a variation of the "
"base ``Button`` type."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:28
msgid ""
"Type variations can replace some aspects of the base type, but keep others. "
"They can also define properties that the base style hasn't defined. For "
"example, your ``GrayButton`` can override the ``normal`` style from the base "
"``Button`` and add ``font_color`` that ``Button`` has never defined. The "
"control will use a combination of both types giving priority to the type "
"variation."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:35
msgid ""
"The way controls resolve what theme items they use from each type and each "
"theme is better described in the :ref:`Customizing a project "
"<doc_gui_theme_in_project>` section of the \"Introduction to GUI skinning\" "
"article."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:40
msgid "Creating a type variation"
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:42
msgid ""
"To create a type variation open the theme editor, then click the plus icon "
"next to the **Type** dropdown on the right side of the editor. Type in what "
"you want to name your theme type variation in the text box, then click **Add "
"Type**."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:46
msgid ""
"Below the **Type** dropdown are the property tabs. Switch to the tab with a "
"wrench and screwdriver icon."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:52
msgid ""
"Click on the plus icon next to the **Base Type** field. You can select the "
"base type there, which would typically be the name of a control node class "
"(e.g., ``Button``, ``Label``, etc). Type variations can also chain and "
"extend other type variations. This works in the same way control nodes "
"inherit styling of their base class. For example, ``CheckButton`` inherits "
"styles from ``Button`` because corresponding node types extend each other."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:58
msgid ""
"After you select the base type, you should now be able to see its properties "
"on the other tabs in the theme editor. You can edit them as usual."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:62
msgid "Using a type variation"
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:64
msgid ""
"Now that a type variation has been created you can apply it to your nodes. "
"In the inspector dock, under the **Theme** property of a control node, you "
"can find the **Theme Type Variation** property. It is empty by default, "
"which means that only the base type has an effect on this node."
msgstr ""

#: ../../docs/tutorials/ui/gui_theme_type_variations.rst:69
msgid ""
"You can either select a type variations from a dropdown list, or input its "
"name manually. Variations appear on the list only if the type variation "
"belongs to the project-wide theme, which you can configure in the project "
"settings. For any other case you have to input the name of the variation "
"manually. Click on the pencil icon to the right. Then type in the name of "
"the type variation and click the check mark icon or press enter. If a type "
"variation with that name exists it will now be used by the node."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:4
msgid "BBCode in RichTextLabel"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:9
msgid ""
"Label nodes are great for displaying basic text, but they have limits. If "
"you want to change the color of the text, or its alignment, that change "
"affects all of the text in the Label node. You can't have only one part of "
"the text be one color, or only one part of the text be centered. To get "
"around this limitation you would use a :ref:`class_RichTextLabel`."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:15
msgid ""
":ref:`class_RichTextLabel` allows the display of complex text markup in a "
"Control. It has a built-in API for generating the markup, but can also parse "
"a BBCode."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:18
msgid ""
"Note that the BBCode tags can also be used, to some extent, in the :ref:`XML "
"source of the class reference <doc_updating_the_class_reference>`."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:22
msgid "Using BBCode"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:24
msgid ""
"For uniformly formatted text you can write in the \"Text\" property, but if "
"you want to use BBCode markup you should use the \"Text\" property in the "
"\"Bb Code\" section instead (``bbcode_text``). Writing to this property will "
"trigger the parsing of your markup to format the text as requested. Before "
"this happens, you need to toggle the \"Enabled\" checkbox in the \"Bb Code\" "
"section (``bbcode_enabled``)."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:32
msgid ""
"For example, ``BBCode [color=blue]blue[/color]`` would render the word "
"\"blue\" with a blue color."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:37
msgid ""
"You'll notice that after writing in the BBCode \"Text\" property the regular "
"\"Text\" property now has the text without the BBCode. While the text "
"property will be updated by the BBCode property, you can't edit the text "
"property or you'll lose the BBCode markup. All changes to the text must be "
"done in the BBCode parameter."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:44
msgid ""
"For BBCode tags such as ``[b]`` (bold), ``[i]`` (italics) or ``[code]`` to "
"work, you must set up custom fonts for the RichTextLabel node first."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:47
msgid "There are no BBCode tags to control vertical centering of text yet."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:50
#: ../../docs/development/cpp/inheritance_class_tree.rst:10
msgid "Reference"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:53
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:126
msgid "Tag"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:55
msgid "**bold**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:55
msgid "``[b]{text}[/b]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:55
msgid "Makes {text} bold."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:57
msgid "**italics**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:57
msgid "``[i]{text}[/i]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:57
msgid "Makes {text} italics."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:59
msgid "**underline**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:59
msgid "``[u]{text}[/u]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:59
msgid "Makes {text} underline."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:61
msgid "**strikethrough**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:61
msgid "``[s]{text}[/s]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:61
msgid "Makes {text} strikethrough."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:63
msgid "**code**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:63
msgid "``[code]{text}[/code]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:63
msgid "Makes {text} use the code font (which is typically monospace)."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:65
msgid "**center**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:65
msgid "``[center]{text}[/center]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:65
msgid "Makes {text} horizontally centered."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:67
msgid "**right**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:67
msgid "``[right]{text}[/right]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:67
msgid "Makes {text} horizontally right-aligned."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:69
msgid "**fill**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:69
msgid "``[fill]{text}[/fill]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:69
msgid "Makes {text} fill the RichTextLabel's width."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:71
msgid "**indent**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:71
msgid "``[indent]{text}[/indent]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:71
msgid "Increase the indentation level of {text}."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:73
msgid "**url**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:73
msgid "``[url]{url}[/url]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:73
msgid ""
"Show {url} as such, underline it and make it clickable. **Must be handled "
"with the \"meta_clicked\" signal to have an effect.** See :ref:"
"`doc_bbcode_in_richtextlabel_handling_url_tag_clicks`."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:77
msgid "**url (ref)**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:77
msgid "``[url=<url>]{text}[/url]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:77
msgid ""
"Makes {text} reference <url> (underlined and clickable). **Must be handled "
"with the \"meta_clicked\" signal to have an effect.** See :ref:"
"`doc_bbcode_in_richtextlabel_handling_url_tag_clicks`."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:81
msgid "**image**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:81
msgid "``[img]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:81
msgid "Insert image at resource {path}."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:83
#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:85
msgid "**resized image**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:83
msgid "``[img=<width>]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:83
msgid "Insert image at resource {path} using <width> (keeps ratio)."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:85
msgid "``[img=<width>x<height>]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:85
msgid "Insert image at resource {path} using <width>×<height>."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:87
msgid "**font**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:87
msgid "``[font=<path>]{text}[/font]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:87
msgid "Use custom font at <path> for {text}."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:89
msgid "**color**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:89
msgid "``[color=<code/name>]{text}[/color]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:89
msgid "Change {text} color; use name or # format, such as ``#ff00ff``."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:91
msgid "**table**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:91
msgid "``[table=<number>]{cells}[/table]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:91
msgid "Creates a table with <number> of columns."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:93
msgid "**cell**"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:93
msgid "``[cell]{text}[/cell]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:93
msgid "Adds cells with the {text} to the table."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:97
msgid "Built-in color names"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:99
msgid "List of valid color names for the [color=<name>] tag:"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:101
msgid "aqua"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:102
msgid "black"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:103
msgid "blue"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:104
msgid "fuchsia"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:105
msgid "gray"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:106
msgid "green"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:107
msgid "lime"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:108
msgid "maroon"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:109
msgid "navy"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:110
msgid "purple"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:111
msgid "red"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:112
msgid "silver"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:113
msgid "teal"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:114
msgid "white"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:115
msgid "yellow"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:118
msgid "Hexadecimal color codes"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:120
msgid ""
"For opaque RGB colors, any valid 6-digit hexadecimal code is supported, e.g. "
"``[color=#ffffff]white[/color]``. Short RGB color codes such as ``#6f2`` "
"(equivalent to ``#66ff22``) are also supported."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:123
msgid ""
"For transparent RGB colors, any 8-digit hexadecimal code can be used, e.g. "
"``[color=#88ffffff]translucent white[/color]``. In this case, note that the "
"alpha channel is the **first** component of the color code, not the last "
"one. Short RGBA color codes such as ``#86f2`` (equivalent to ``#8866ff22``) "
"are also supported."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:130
msgid "Handling ``[url]`` tag clicks"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:132
msgid ""
"By default, ``[url]`` tags do nothing when clicked. This is to allow "
"flexible use of ``[url]`` tags rather than limiting them to opening URLs in "
"a web browser."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:135
msgid ""
"To handle clicked ``[url]`` tags, connect the RichTextLabel node's :ref:"
"`meta_clicked <class_RichTextLabel_signal_meta_clicked>` signal to a script "
"function."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:138
msgid ""
"For example, the following method can be connected to ``meta_clicked`` to "
"open clicked URLs using the user's default web browser::"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:148
msgid ""
"For more advanced use cases, it's also possible to store JSON in an "
"``[url]`` tag's option and parse it in the function that handles the "
"``meta_clicked`` signal. For example: ``[url={\"example\": \"value\"}]JSON[/"
"url]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:153
msgid "Image vertical offset"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:155
msgid "You use a custom font for your image in order to align it vertically."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:157
msgid "Create a ``BitmapFont`` resource"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:158
msgid ""
"Set this bitmap font with a positive value for the ``ascent`` property, "
"that's your height offset"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:159
msgid ""
"Set the BBCode tag this way: ``[font=<font-path>][img]{image-path}[/img][/"
"font]``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:162
msgid "Animation effects"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:164
msgid ""
"BBCode can also be used to create different text animation effects. Five "
"customizable effects are provided out of the box, and you can easily create "
"your own."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:168
msgid "Wave"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:172
msgid ""
"Wave makes the text go up and down. Its tag format is ``[wave amp=50 freq=2]"
"[/wave]``. ``amp`` controls how high and low the effect goes, and ``freq`` "
"controls how fast the text goes up and down."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:177
msgid "Tornado"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:181
msgid ""
"Tornao makes the text move around in a circle. Its tag format is ``[tornado "
"radius=5 freq=2][/tornado]``. ``radius`` is the radius of the circle that "
"controls the offset, ``freq`` is how fast the text moves in a circle."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:187
msgid "Shake"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:191
msgid ""
"Shake makes the text shake. Its tag format is ``[shake rate=5 level=10][/"
"shake]``. ``rate`` controls how fast the text shakes, ``level`` controls how "
"far the text is offset from the origin."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:196
msgid "Fade"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:200
msgid ""
"Fade creates a fade effect over the text that is not animated. Its tag "
"format is ``[fade start=4 length=14][/fade]``. ``start`` controls the "
"starting position of the falloff relative to where the fade command is "
"inserted, ``length`` controls over how many characters should the fade out "
"take place."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:207
msgid "Rainbow"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:211
msgid ""
"Rainbow gives the text a rainbow color that changes over time. Its tag "
"format is ``[rainbow freq=0.2 sat=10 val=20][/rainbow]``. ``freq`` is the "
"number of full rainbow cycles per second, ``sat`` is the saturation of the "
"rainbow, ``val`` is the value of the rainbow."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:217
msgid "Custom BBCode tags and text effects"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:219
msgid ""
"You can extend the :ref:`class_RichTextEffect` resource type to create your "
"own custom BBCode tags. You begin by extending the :ref:"
"`class_RichTextEffect` resource type. Add the ``tool`` prefix to your "
"GDScript file if you wish to have these custom effects run within the editor "
"itself. The RichTextLabel does not need to have a script attached, nor does "
"it need to be running in ``tool`` mode. The new effect will be activable in "
"the Inspector through the **Custom Effects** property."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:228
msgid ""
"If the custom effect is not registered within the RichTextLabel's **Custom "
"Effects** property, no effect will be visible and the original tag will be "
"left as-is."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:232
msgid ""
"There is only one function that you need to extend: "
"``_process_custom_fx(char_fx)``. Optionally, you can also provide a custom "
"BBCode identifier simply by adding a member name ``bbcode``. The code will "
"check the ``bbcode`` property automatically or will use the name of the file "
"to determine what the BBCode tag should be."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:238
msgid "``_process_custom_fx``"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:240
msgid ""
"This is where the logic of each effect takes place and is called once per "
"character during the draw phase of text rendering. This passes in a :ref:"
"`class_CharFXTransform` object, which holds a few variables to control how "
"the associated character is rendered:"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:244
msgid ""
"``identity`` specifies which custom effect is being processed. You should "
"use that for code flow control."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:246
msgid ""
"``relative_index`` tells you how far into a given custom effect block you "
"are in as an index."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:248
msgid ""
"``absolute_index`` tells you how far into the entire text you are as an "
"index."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:249
msgid ""
"``elapsed_time`` is the total amount of time the text effect has been "
"running."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:250
msgid ""
"``visible`` will tell you whether the character is visible or not and will "
"also allow you to hide a given portion of text."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:252
msgid ""
"``offset`` is an offset position relative to where the given character "
"should render under normal circumstances."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:254
msgid "``color`` is the color of a given character."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:255
msgid ""
"Finally, ``env`` is a :ref:`class_Dictionary` of parameters assigned to a "
"given custom effect. You can use :ref:`get() <class_Dictionary_method_get>` "
"with an optional default value to retrieve each parameter, if specified by "
"the user. For example ``[custom_fx spread=0.5 color=#FFFF00]test[/"
"custom_fx]`` would have a float ``spread`` and Color ``color`` parameters in "
"its ` `env`` Dictionary. See below for more usage examples."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:261
msgid ""
"The last thing to note about this function is that it is necessary to return "
"a boolean ``true`` value to verify that the effect processed correctly. This "
"way, if there's a problem with rendering a given character, it will back out "
"of rendering custom effects entirely until the user fixes whatever error "
"cropped up in their custom effect logic."
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:266
msgid "Here are some examples of custom effects:"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:269
msgid "Ghost"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:292
msgid "Pulse"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:319
msgid "Matrix"
msgstr ""

#: ../../docs/tutorials/ui/bbcode_in_richtextlabel.rst:354
msgid "This will add a few new BBCode commands, which can be used like so:"
msgstr ""

#: ../../docs/tutorials/vr/index.rst:2
msgid "XR (AR/VR)"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:4
msgid "AR/VR primer"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:6
msgid ""
"This tutorial gives you a springboard into the world of AR and VR in the "
"Godot game engine."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:8
msgid ""
"A new architecture was introduced in Godot 3 called the AR/VR Server. On top "
"of this architecture, specific implementations are available as interfaces, "
"most of which are plugins based on GDNative. This tutorial focuses purely on "
"the core elements abstracted by the core architecture. This architecture has "
"enough features for you to create an entire VR experience that can then be "
"deployed for various interfaces. However, each platform often has some "
"unique features that are impossible to abstract. Such features will be "
"documented on the relevant interfaces and fall outside of the scope of this "
"primer."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:17
msgid "AR/VR server"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:19
msgid ""
"When Godot starts, each available interface will make itself known to the AR/"
"VR server. GDNative interfaces are setup as singletons; as long as they are "
"added to the list of GDNative singletons in your project, they will make "
"themselves known to the server."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:23
msgid ""
"You can use the function :ref:`get_interfaces() "
"<class_ARVRServer_method_get_interfaces>` to return a list of available "
"interfaces, but for this tutorial, we're going to use the :ref:`native "
"mobile VR interface <class_MobileVRInterface>` in our examples. This "
"interface is a straightforward implementation that uses the 3DOF sensors on "
"your phone for orientation and outputs a stereoscopic image to the screen. "
"It is also available in the Godot core and outputs to screen on desktop, "
"which makes it ideal for prototyping or a tutorial such as this one."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:31
msgid "To enable an interface, you execute the following code:"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:48
msgid ""
"This code finds the interface we wish to use, initializes it and, if that is "
"successful, binds the main viewport to the interface. This last step gives "
"some control over the viewport to the interface, which automatically enables "
"things like stereoscopic rendering on the viewport."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:52
msgid ""
"For our mobile VR interface, and any interface where the main input is "
"directly displayed on screen, the main viewport needs to be the viewport "
"where :ref:`arvr<class_Viewport_property_arvr>` is set to ``true``. But for "
"interfaces that render on an externally attached device, you can use a "
"secondary viewport. In the latter case, a viewport that shows its output on "
"screen will show an undistorted version of the left eye, while showing the "
"fully processed stereoscopic output on the device."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:59
msgid ""
"Finally, you should only initialize an interface once; switching scenes and "
"reinitializing interfaces will just introduce a lot of overhead. If you want "
"to turn the headset off temporarily, just disable the viewport or set :ref:"
"`arvr<class_Viewport_property_arvr>` to ``false`` on the viewport. In most "
"scenarios though, you wouldn't disable the headset once you're in VR, this "
"can be disconcerting to the gamer."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:66
msgid "New AR/VR nodes"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:68
msgid ""
"Three new node types have been added for supporting AR and VR in Godot and "
"one additional node type especially for AR. These are:"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:71
msgid ":ref:`ARVROrigin <class_ARVROrigin>` - our origin point in the world"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:72
msgid ""
":ref:`ARVRCamera <class_ARVRCamera>` - a special subclass of the camera, "
"which is positionally tracked"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:73
msgid ""
":ref:`ARVRController <class_ARVRController>` - a new spatial class, which "
"tracks the location of a controller"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:74
msgid ""
":ref:`ARVRAnchor <class_ARVRAnchor>` - an anchor point for an AR "
"implementation mapping a real world location into your virtual world"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:76
msgid ""
"The first two must exist in your scene for AR/VR to work and this tutorial "
"focuses purely on them."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:79
msgid ""
":ref:`ARVROrigin <class_ARVROrigin>` is an important node, you must have one "
"and only one of these somewhere in your scene. This node maps the center of "
"your real world tracking space to a location in your virtual world. "
"Everything else is positionally tracked in relation to this point. Where "
"this point lies exactly differs from one implementation to another, but the "
"best example to understand how this node works is to take a look at a room "
"scale location. While we have functions to adjust the point to center it on "
"the player by default, the origin point will be the center location of the "
"room you are in. As you physically walk around the room, the location of the "
"HMD is tracked in relation to this center position and the tracking is "
"mirror in the virtual world."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:89
msgid ""
"To keep things simple, when you physically move around your room, the ARVR "
"Origin point stays where it is, the position of the camera and controllers "
"will be adjusted according to your movements. When you move through the "
"virtual world, either through controller input or when you implement a "
"teleport system, it is the position of the origin point which you will have "
"to adjust."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:95
msgid ""
":ref:`ARVRCamera <class_ARVRCamera>` is the second node that must always be "
"a part of your scene and it must always be a child node of your origin node. "
"It is a subclass of Godot's normal camera. However, its position is "
"automatically updated each frame based on the physical orientation and "
"position of the HMD. Also due to the precision required for rendering to an "
"HMD or rendering an AR overlay over a real world camera, most of the "
"standard camera properties are ignored. The only properties of the camera "
"that are used are the near and far plane settings. The FOV, aspect ratio and "
"projection mode are all ignored."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:103
msgid ""
"Note that, for our native mobile VR implementation, there is no positional "
"tracking, only the orientation of the phone and by extension, the HMD is "
"tracked. This implementation artificially places the camera at a height (Y) "
"of 1.85."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:107
msgid ""
"Conclusion: your minimum setup in your scene to make AR or VR work should "
"look like this:"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:111
msgid ""
"And that's all you need to get started with the native mobile interface. "
"Obviously, you need to add something more into your scene, so there is "
"something to see, but after that, you can export the game to your phone of "
"choice, pop it into a viewer and away you go."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:116
msgid "Official plugins and resources"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:118
msgid ""
"As mentioned earlier, Godot does not support the various VR and AR SDKs out "
"of the box, you need a plugin for the specific SDK you want to use. There "
"are several official plugins available in the `GodotVR Repository <https://"
"github.com/GodotVR>`__."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:122
msgid ""
"`Godot OpenXR <https://github.com/GodotVR/godot_openxr>`_: This is the "
"**official XR plugin** starting with Godot **3.4**. It supports OpenXR, an "
"open standard for designing and building cross-platform VR and AR software. "
"Tested with SteamVR, Monada and Oculus OpenXR (desktop and mobile) runtimes."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:127
msgid "See :ref:`doc_openxr_introduction`."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:129
msgid ""
"`Godot Oculus Mobile <https://github.com/GodotVR/godot_oculus_mobile>`_ "
"provides :ref:`support for the Meta Quest <doc_developing_for_oculus_quest>`."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:132
#: ../../docs/tutorials/vr/xr_primer.rst:140
msgid ""
"**Note**: This plugin has been deprecated starting with Godot 3.4. We "
"recommend migrating to the `Godot OpenXR <https://github.com/GodotVR/"
"godot_openxr>`_ plugin instead."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:135
msgid ""
"`Godot OpenVR <https://github.com/GodotVR/godot_openvr>`_ (not to be "
"confused with OpenXR) supports the OpenVR SDK used by Steam."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:137
msgid ""
"`Godot Oculus <https://github.com/GodotVR/godot_oculus>`__ supports the "
"Oculus SDK (desktop headsets only)."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:143
msgid ""
"`Godot OpenHMD <https://github.com/GodotVR/godot_openhmd>`_ supports "
"OpenHMD, an open source API and drivers for headsets."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:146
msgid "These plugins can be downloaded from GitHub or the Godot Asset Library."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:148
msgid "In addition to the plugins, there are several official demos."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:150
msgid "`Godot Oculus Demo <https://github.com/GodotVR/godot-oculus-demo>`__."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:151
msgid ""
"`Godot OpenVR FPS <https://github.com/GodotVR/godot_openvr_fps>`__ (the "
"tutorial for this project is :ref:`doc_vr_starter_tutorial_part_one`)."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:153
msgid ""
"`Godot XR tools <https://github.com/GodotVR/godot-xr-tools>`__, which shows "
"implementations for VR features such as movement and picking up objects."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:157
msgid "Other things to consider"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:159
msgid ""
"There are a few other subjects that we need to briefly touch upon in this "
"primer that are important to know."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:162
msgid ""
"The first are our units. In normal 3D games, you don't have to think a lot "
"about units. As long as everything is at the same scale, a box sized 1 unit "
"by 1 unit by 1 unit can be any size from a cub you can hold in your hand to "
"something the size of a building. In AR and VR, this changes because things "
"in your virtual world are mapped to things in the real world. If you step 1 "
"meter forward in the real world, but you only move 1 cm forward in your "
"virtual world, you have a problem. The same with the position of your "
"controllers; if they don't appear in the right relative space, it breaks the "
"immersion for the player. Most VR platforms, including our AR/VR Server, "
"assume that 1 unit = 1 meter. The AR/VR server, however, has a property "
"that, for convenience, is also exposed on the ARVROrigin node called world "
"scale. For instance, setting this to a value of 10 changes our coordinate "
"system so 10 units = 1 meter."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:173
msgid ""
"Performance is another thing that needs to be carefully considered. "
"Especially VR taxes your game a lot more than most people realize. For "
"mobile VR, you have to be extra careful here, but even for desktop games, "
"there are three factors that make life extra difficult:"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:177
msgid ""
"You are rendering stereoscopic, two for the price of one. While not exactly "
"doubling the work load and with things in the pipeline such as supporting "
"the new MultiView OpenGL extension in mind, there still is an extra workload "
"in rendering images for both eyes"
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:180
msgid ""
"A normal game will run acceptably on 30fps and ideally manages 60fps. That "
"gives you a big range to play with between lower end and higher end "
"hardware. For any HMD application of AR or VR, however, 60fps is the "
"absolute minimum and you should target your games to run at a stable 90fps "
"to ensure your users don't get motion sickness right off the bat."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:184
msgid ""
"The high FOV and related lens distortion effect require many VR experiences "
"to render at double the resolution. Yes a VIVE may only have a resolution of "
"1080x1200 per eye, we're rendering each eye at 2160x2400 as a result. This "
"is less of an issue for most AR applications."
msgstr ""

#: ../../docs/tutorials/vr/xr_primer.rst:188
msgid ""
"All in all, the workload your GPU has in comparison with a normal 3D game is "
"a fair amount higher. While things are in the pipeline to improve this, such "
"as MultiView and foveated rendering, these aren't supported on all devices. "
"This is why you see many VR games using a more art style and if you pay "
"close attention to those VR games that go for realism, you'll probably "
"notice they're a bit more conservative on the effects or use some good old "
"optical trickery."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:4
msgid "OpenXR plugin"
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:6
msgid "Welcome to the Godot OpenXR documentation!"
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:11
msgid ""
"This is the documentation for the `Godot OpenXR plugin <https://github.com/"
"GodotVR/godot_openxr>`__."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:13
msgid ""
"The plugin is supported on Godot 3.4 and later. However, it does **not** "
"support the upcoming Godot 4.0 release."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:18
msgid ""
"To start a new project that supports OpenXR, start by opening up the Godot "
"editor and creating a new project."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:20
msgid ""
"Copy the plugin into this new project in the subfolder ``addons/godot_openxr/"
"`` using your operating system's file manager. It is important that the "
"plugin is placed in this **exact** location in your project folder."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:23
msgid ""
"Back in Godot, create a new 3D scene and press the **Instance Child Scene** "
"button (represented by a chain link icon) in the scene tree dock. Select the "
"``addons/godot_openxr/scenes/first_person_controller_vr.tscn`` subscene and "
"add it to your scene. Right-click the added node and select **Editable "
"Children** to gain access to some of the nodes in this subscene:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:32
msgid ""
"This is the bare minimum you need. However, for good measure, we suggest "
"adding a DirectionalLight node and a few MeshInstance nodes so you have "
"something to see. If you add those to the hand nodes, you can visualize "
"where your controllers are tracking."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:37
msgid "Your scene should now look something like this:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:41
msgid ""
"Now you can press the **Run** button in the top-right corner of the editor "
"to start your project and you should be able to look around."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:47
msgid ""
"To turn this simple scene into a proper game, the sky is the limit. Below, "
"there are a few more topics specific to this plugin. However, the following "
"resources are a good place to continue:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:51
msgid ""
":ref:`VR starter tutorial <doc_vr_starter_tutorial_part_one>` in the "
"official documentation may focus on OpenVR, but almost everything there "
"applies to OpenXR as well."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:54
msgid ""
"`Godot XR tools <https://github.com/GodotVR/godot-xr-tools>`__ is a plugin "
"that contains a set of handy sub scene to quickly implement locomotion, "
"object interaction and UI elements in your XR experience."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:58
msgid ""
"Please check the `Godot Engine community page <https://godotengine.org/"
"community>`__ to find help from other Godot developers. The ``#xr`` channel "
"on the Godot Discord has become a vibrant Godot XR community."
msgstr ""

#: ../../docs/tutorials/vr/openxr/index.rst:62
msgid "Plugin features"
msgstr ""

#: ../../docs/tutorials/vr/openxr/enable_plugin.rst:4
msgid "Enabling the OpenXR plugin"
msgstr ""

#: ../../docs/tutorials/vr/openxr/enable_plugin.rst:6
msgid ""
"Due to the design of Godot's XR system, the plugin will always automatically "
"load the OpenXR interface. However, additional editor features will not be "
"available unless the OpenXR plugin is enabled."
msgstr ""

#: ../../docs/tutorials/vr/openxr/enable_plugin.rst:9
msgid ""
"For this, go to **Project > Project Settings** and select the **Plugins** "
"tab:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/enable_plugin.rst:13
msgid "Make sure the **Enable** checkbox is checked."
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:4
msgid "Switching runtimes"
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:6
msgid ""
"In OpenXR, it is standard for each runtime to implement a mechanism to make "
"it the current runtime. In Steam, the Oculus application or Windows MR "
"portal, there will be an option to switch to their runtime as the current "
"OpenXR runtime."
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:10
msgid ""
"Generally speaking, end users will have a preferred runtime due to not "
"having a reason to switch runtimes when playing games that support OpenXR. "
"However, developers may wish to test multiple runtimes to see if their game "
"behaves."
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:14
msgid ""
"To make this easy, Godot provides a dropdown in the top-right corner which "
"can switch the runtime Godot will use when testing:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:19
msgid ""
"The OpenXR plugin will **not** work with the Microsoft MR runtime. That "
"runtime only supports OpenXR applications that use DirectX, but Godot uses "
"OpenGL ES 3.0 or 2.0."
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:25
msgid ""
"Selecting a runtime in this dropdown only applies to running the game from "
"the editor. It does **not** change the runtime used by other applications. "
"Exported projects will use the computers current runtime. Also, if you are "
"deploying to an external device, this setting has no effect."
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:30
msgid ""
"As OpenXR doesn't have a mechanism for registering runtimes that we can "
"query, Godot will check common locations for runtime configuration files. "
"The locations that are checked are stored in the ``addons/godot_openxr/"
"runtimes.json`` file. If you've installed a runtime in a nonstandard "
"location or a runtime not currently present in this file, you can add it "
"manually using a text editor."
msgstr ""

#: ../../docs/tutorials/vr/openxr/runtime_selection.rst:37
msgid ""
"If the dropdown isn't shown in your editor, make sure the plugin is enabled. "
"See :ref:`doc_enable_plugin`."
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:4
msgid "Passthrough"
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:8
msgid "Only available in versions **1.1.1 and later** of the OpenXR plugin."
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:10
msgid ""
"Passthrough is a new feature introduced on the Meta Quest and added to the "
"OpenXR spec as a Meta extension. It is likely this implementation will be "
"implemented by other vendors where the hardware supports a passthrough mode "
"and promoted to core at some point."
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:14
msgid ""
"Keep in mind that this feature is not guaranteed to be available. "
"Passthrough allows for the camera input on the headset to be used within the "
"headset so the user can see the real world. This allows us to implement an "
"AR-like experience in a VR headset."
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:18
msgid ""
"If you are using the ``first person controller`` scene, you can simply "
"enable passthrough by checking the **Start Passthrough** option on the "
"controller node:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:24
msgid ""
"If you rather do this through code, you will first need to create an "
"instance of the ``OpenXRConfig`` object. You can do this the same way the "
"``first person controller`` does and assign the ``OpenXRConfig.gdns`` as the "
"script to a node, or you can instance it in code as shown below:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:54
msgid ""
"The Viewport's **Transparent Bg** property must be enabled prior to starting "
"passthrough. The plugin will log a warning message if it detects an "
"incorrect configuration."
msgstr ""

#: ../../docs/tutorials/vr/openxr/passthrough.rst:59
msgid ""
"A fix for a bug related to turning transparent background on/off is "
"scheduled for the Godot 3.4.3 release. If you wish to toggle passthrough in "
"your game, you will need to be on that version or newer."
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:4
msgid "Deploying on Quest"
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:6
msgid ""
"The OpenXR plugin makes developing for Android seamless with developing "
"desktop XR experiences. Note that many Android based devices are very "
"constrained performance-wise. Therefore, **we highly recommend using the "
"GLES2 renderer.**"
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:12
msgid ""
"Currently, the only Android-based device supported is the Meta Quest. As "
"Khronos is finalizing the official Android support for OpenXR, we will be "
"able to offer further support soon."
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:17
msgid ""
"As with any other Android device, please follow `the instructions in the "
"official Godot documentation for deploying to Android <https://docs."
"godotengine.org/en/stable/getting_started/workflow/export/"
"exporting_for_android.html#doc-exporting-for-android>`__."
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:21
msgid "Enable developer mode on the Quest"
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:23
msgid ""
"You can only deploy games to the Meta Quest if developer mode is enabled. "
"You can do this from the Oculus support application installed on your phone. "
"Please `follow the instructions on the Oculus developer site <https://"
"developer.oculus.com/documentation/native/android/mobile-device-setup/>`__."
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:28
msgid "Setting up the export template"
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:30
msgid ""
"The instruction in the official Godot documentation already has you "
"configuring an export template in Godot. However, a few extra settings are "
"needed for XR deployment."
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:32
msgid ""
"Open the export settings again by opening the **Project > Export...** menu "
"and select the Android export template you created. If you haven't created "
"it yet, do so now by pressing **Add...** and selecting **Android**."
msgstr ""

#: ../../docs/tutorials/vr/openxr/deploy_on_quest.rst:35
msgid ""
"Scroll down to the **Xr Features** section. Here, the important setting is "
"the **Xr Mode** which should be set to **OpenXR**. Note that the other "
"options shown here should be set according to your project's needs."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:4
msgid "Hand tracking"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:8
msgid "Only available in versions **1.1.0 and later** of the OpenXR plugin."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:10
msgid ""
"The hand tracking API was originally added to OpenXR by Microsoft to make "
"the tracking information for the users hands and fingers available to the XR "
"client. The API provides pose data for all the bones in the players hands "
"but leaves some room for interpretation in how the API is implemented by the "
"XR runtime."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:12
msgid ""
"In SteamVR support was added based on Valves existing hand tracking system "
"that also provides fully rigged bone data extrapolated from controller "
"inputs and proximity sensors if hand tracking is not supported natively on "
"the system used."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:14
msgid ""
"Meta added support for this API to their mobile OpenXR runtime tied into "
"their existing hand tracking functionality on the Quest. Note that you do "
"need to enable hand tracking in the export settings for this to be active. "
"The hand tracking API is only used for pure hand tracking, no pose data is "
"presented when controllers are used."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:18
msgid ""
"When using the hand tracking API it is thus important that the capabilities "
"of the target platform are taken into account. This may improve in time as "
"feedback is provided to the OpenXR working group."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:21
msgid ""
"The hand tracking API defines the bone structure that all XR runtimes must "
"abide to however it doesn't dictate the orientation of the bones in rest or "
"any size requirements."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:25
msgid "Image courtesy of Khronos OpenXR specification."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:27
msgid ""
"The hand tracking API is independent of the action system and doesn't make "
"use of it's poses. Hand tracking data is provided internally in global space "
"(relative to the tracking volumes origin point) and the hand tracking nodes "
"should thus have the :ref:`ARVROrigin <class_ARVROrigin>` node as their "
"parent, not a :ref:`ARVRController <class_ARVRController>` node."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:29
msgid ""
"The plugin exposes the hand tracking API as two seperate systems. One that "
"updates positions of a tree of nodes and one that updates bones of a :ref:"
"`Skeleton <class_Skeleton>` so mesh deformation can be used."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:32
msgid "Node based hand tracking"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:34
msgid ""
"This implementation is the most versatile as it doesn't require any "
"knowledge of the hand model in rest pose. Note that the plugin comes with "
"two example scenes called `left_hand_nodes.tscn` and `right_hand_nodes.tscn` "
"that you can instance as child nodes of the `ARVROrigin` node. These scenes "
"contain logic to automatically resize the used meshes to fit the size of the "
"provided bone data."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:38
msgid ""
"At the root of this scene is a :ref:`Spatial <class_Spatial>` node that has "
"`config/OpenXRHand.gdns` assigned as its script. This class from the plugin "
"will position the spatial node at the base of the hand (see Palm in our "
"image up above) and will update the position and orientation of its children."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:42
msgid "There are two properties here:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:44
msgid ""
"`Hand` identifies whether we are tracking the position of the left or right "
"hand."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:45
msgid ""
"`Motion Range` is only available on SteamVR and limits how far the hand can "
"close, this is only used in conjunction with infered hand tracking based on "
"controller input."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:47
msgid ""
"Our spatial node needs a number of child nodes with hardcoded names that "
"will be updated by our hand tracking system. The type of nodes is not "
"important, our example script uses :ref:`MeshInstance <class_MeshInstance>` "
"nodes to also visualise the bones."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:51
msgid ""
"First we find the child node `Wrist`, underneath here there are nodes for "
"each finger. Each node starts with the name of the finger followed by the "
"name of the bone. The finger names are `Thumb`, `Index`, `Middle`, `Ring` "
"and `Little`. The bone names are `Metacarpal`, `Proximal`, `Intermediate`, "
"`Distal` and `Tip`. Ergo IndexDistal is the distal bone of the index finger."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:54
msgid "The thumb is the only finger that does not have a intermediate bone!"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:56
msgid ""
"The parent-child relationships of these nodes are important and the hand "
"will only look correct if this structure if followed exactly. Note that "
"adding extra nodes isn't a problem, the example scenes add a number of extra "
"bone meshes in to complete the look of the hand. Note also that the example "
"scenes have scripts attached to the wrist node that update the size and "
"positions of these extra nodes."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:59
msgid "Skeleton based hand tracking"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:61
msgid ""
"The second method supported by the OpenXR plugin is exposing the bone data "
"as a :ref:`Skeleton <class_Skeleton>` node. In this case the solution is "
"divided in two classes, one for placing the hand in space and the second to "
"animate the aforementioned skeleton by updating the bone poses of the "
"skeleton."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:63
msgid ""
"This approach allows deforming a mesh which is a visually more pleasing "
"solution however differences in implementation between the platforms does "
"pose some problems."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:66
msgid ""
"Microsoft has added another API to OpenXR that allows for retrieving a "
"properly skinned hand mesh however as they are currently the only platform "
"supporting this API it has not yet been added to the plugin."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:68
msgid ""
"At this point in time the plugin only exposes the data as it is provided by "
"the OpenXR runtime. The plugin has an example implementation based on meshes "
"that Valve has made publicly available however these work most reliable when "
"used in conjunction with SteamVR. These scenes are `scenes/left_hand_mesh."
"tscn` and `scenes/right_hand_mesh.tscn` and can be childed to the :ref:"
"`ARVROrigin <class_ARVROrigin>` node."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:73
msgid "Below is an overview of the steps needed to implement your own version."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:76
msgid ""
"The best way to implement this logic is to ask an artist to model a hand in "
"3D software using real hands dimensions and create an armature for the hand "
"that follows the bone structure exactly as the OpenXR specification dictates "
"in the image at the top of this article. When skinning special care needs to "
"be taken keeping in mind that if full hand tracking is available, the "
"distance between joints will be determined by the actual size of the players "
"hand and may thus be different to the 3D model. After importing the model "
"into Godot you can add the required scripts to make everything work."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:78
msgid ""
"To place the hand mesh in space a node needs to be added as a child to the :"
"ref:`ARVROrigin <class_ARVROrigin>` node, this node needs to have the "
"`config/OpenXRPose.gdns` script attached. When importing a 3D file you can "
"add this script to the root node of the imported model."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:80
msgid ""
"The `OpenXRPose` script isn't just used by the hand logic but also exposes "
"other pose locations configured in the action map."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:84
msgid "The following properties can be set on this node:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:86
msgid ""
"`Invisible If Inactive` enables logic that will automatically make this node "
"invisible if the hand is not being tracked."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:87
msgid ""
"`Action` specifies which action in the actionmap is being tracked, this "
"needs to be set to the special type `SkeletonBase`."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:88
msgid ""
"`Path` specified the OpenXR input path, this is `/user/hand/left` for the "
"left hand and `/user/hand/right` for the right hand."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:90
msgid ""
"The next step is adding the script `config/OpenXRSkeleton.gdns` to the "
"skeleton node of the 3D model. This script has the same two properties as "
"the `OpenXRHand` script namely `Hand` and `Motion Range` and they have the "
"same use."
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:92
msgid ""
"Note that the bone names are standardised, the list of bone names is "
"presented below and need to be suffixed with either `_L` or `_R` depending "
"on whether the bone is for respectively the left hand or the right hand:"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:94
msgid "Palm"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:95
msgid "Wrist"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:96
msgid "Thumb_Metacarpal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:97
msgid "Thumb_Proximal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:98
msgid "Thumb_Distal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:99
msgid "Thumb_Tip"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:100
msgid "Index_Metacarpal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:101
msgid "Index_Proximal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:102
msgid "Index_Intermediate"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:103
msgid "Index_Distal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:104
msgid "Index_Tip"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:105
msgid "Middle_Metacarpal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:106
msgid "Middle_Proximal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:107
msgid "Middle_Intermediate"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:108
msgid "Middle_Distal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:109
msgid "Middle_Tip"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:110
msgid "Ring_Metacarpal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:111
msgid "Ring_Proximal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:112
msgid "Ring_Intermediate"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:113
msgid "Ring_Distal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:114
msgid "Ring_Tip"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:115
msgid "Little_Metacarpal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:116
msgid "Little_Proximal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:117
msgid "Little_Intermediate"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:118
msgid "Little_Distal"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:119
msgid "Little_Tip"
msgstr ""

#: ../../docs/tutorials/vr/openxr/handtracking.rst:121
msgid ""
"Finally, and this is standard Godot functionality, a common addition to hand "
"tracking is to track the location of the tip of a finger for physics "
"interaction. This can be accomplished with the :ref:`BoneAttachment "
"<class_BoneAttachment>` node. Simply add this as a child node to the :ref:"
"`Skeleton <class_Skeleton>` node and select the bone you want to track. Now "
"you can add the desired physics object as a child to this node."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/index.rst:2
msgid "Oculus mobile plugin (deprecated)"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:4
msgid "Developing for Oculus Quest"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:9
msgid ""
"This tutorial goes over how to get started developing for the *Meta Quest* "
"with the Godot Oculus Mobile plugin."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:12
msgid "Before starting, there are two things you need to do:"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:14
msgid ""
"First you need to go through the steps on the :ref:"
"`doc_exporting_for_android` page. This leads you through installing the "
"toolset that Godot needs to export to Android devices."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:18
msgid ""
"Next you need the Quest plugin. You can get it from the Asset Library or "
"manually download it from `here <https://github.com/GodotVR/godot-oculus-"
"mobile-asset>`__."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:22
msgid "Setting Up Godot"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:24
msgid "To get started open Godot and create a new project."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:28
msgid ""
"Make sure to choose the ``GLES2`` renderer. Due to the Quest's GPU this "
"backend is far better suited for the Quest."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:31
msgid ""
"Copy the addons folder from the Oculus Mobile asset into your Godot project. "
"Your project tree should look similar to this:"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:36
msgid "Now you can start building the main scene:"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:38
msgid "Add an :ref:`ARVROrigin <class_ARVROrigin>` node first."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:39
msgid ""
"Then add three child nodes to the origin node, one :ref:`ARVRCamera "
"<class_ARVRCamera>` and two :ref:`ARVRController <class_ARVRController>` "
"nodes."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:40
msgid ""
"Assign controller ID 1 to the first :ref:`ARVRController "
"<class_ARVRController>` and rename that to ``LeftHand``."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:41
msgid ""
"Assign controller ID 2 to the second :ref:`ARVRController "
"<class_ARVRController>` and rename that to ``RightHand``."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:42
msgid ""
"Finally add a :ref:`MeshInstance <class_MeshInstance>` as a child node to "
"our first :ref:`ARVRController <class_ARVRController>` and create a box "
"shape, resize the box so each side is set to 0.1. Now duplicate the :ref:"
"`MeshInstance <class_MeshInstance>` and move it to the second :ref:"
"`ARVRController <class_ARVRController>` node. These will stand in for our "
"controllers."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:46
msgid "Now add a script to the main node and add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:76
msgid ""
"Before you can export this project to the Quest you need to do three more "
"things."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:79
msgid ""
"First go into the project settings and make sure that the main scene is the "
"scene we run. Godot does not ask you to set this on export."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:84
msgid ""
"Then go into the export menu and configure a new Android export. If you "
"still haven't gone through the :ref:`doc_exporting_for_android` page do it "
"now. If you didn't you'll have some red messages on this screen."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:89
msgid ""
"If you did you can forge ahead and make a few small changes to the export "
"settings. First change the XR Mode to ``Oculus Mobile VR``. Then change the "
"Degrees of Freedom mode to ``6DOF``."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:95
msgid "Now save and close the export window."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:98
msgid "Setting Up Your Quest"
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:100
msgid ""
"Follow `these instructions <https://developer.oculus.com/documentation/"
"native/android/mobile-device-setup/>`__ to setup your device for development."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:103
msgid ""
"Once your device is set up and connected, click the **Android logo** that "
"should be visible in the top-right corner of the Godot editor. When clicked, "
"it exports your project and runs it on the connected device. If you do not "
"see this Android logo, make sure you have create an Android export preset "
"and that the preset is marked as **Runnable** in the Export dialog."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:108
msgid ""
"The above does the bare minimum to get your project running on the Quest, "
"it's not very exciting. Holger Dammertz has made a great toolkit for the "
"quest that contains a lot of scenes to get help you on your way including "
"really nice controller meshes."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:113
msgid ""
"You can find the toolkit `here <https://github.com/NeoSpark314/"
"godot_oculus_quest_toolkit>`__."
msgstr ""

#: ../../docs/tutorials/vr/oculus_mobile/developing_for_oculus_quest.rst:115
msgid ""
"If you want to help out with improving the plugin please join us `here "
"<https://github.com/GodotVR/godot_oculus_mobile>`__."
msgstr ""

#: ../../docs/tutorials/vr/openvr/index.rst:2
msgid "OpenVR plugin"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/index.rst:2
msgid "VR starter tutorial"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:4
msgid "VR starter tutorial part 1"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:11
msgid ""
"This tutorial will show you how to make a beginner VR game project in Godot."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:13
msgid ""
"Keep in mind, **one of the most important things when making VR content is "
"getting the scale of your assets correct**! It can take lots of practice and "
"iterations to get this right, but there are a few things you can do to make "
"it easier:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:16
msgid ""
"In VR, 1 unit is typically considered 1 meter. If you design your assets "
"around that standard, you can save yourself a lot of headache."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:17
msgid ""
"In your 3D modeling program, see if there is a way to measure and use real "
"world distances. In Blender, you can use the MeasureIt add-on; in Maya, you "
"can use the Measure Tool."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:18
msgid ""
"You can make rough models using a tool like `Google Blocks <https://vr."
"google.com/blocks/>`__, and then refine in another 3D modelling program."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:19
msgid ""
"Test often, as the assets can look dramatically different in VR than on a "
"flat screen!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:21
msgid "Throughout the course of this tutorial, we will cover:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:23
msgid "How to tell Godot to run in VR."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:24
msgid ""
"How to make a teleportation locomotion system that uses the VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:25
msgid ""
"How to make a artificial movement locomotion system that uses the VR "
"controllers."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:26
msgid ""
"How to create a :ref:`RigidBody <class_RigidBody>`-based system that allows "
"for picking up, dropping, and throwing RigidBody nodes using the VR "
"controllers."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:27
msgid "How to create simple destroyable target."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:28
msgid ""
"How to create some special :ref:`RigidBody <class_RigidBody>`-based objects "
"that can destroy the targets."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:30
msgid ""
"While this tutorial can be completed by beginners, it is highly advised to "
"complete :ref:`doc_your_first_2d_game`, if you are new to Godot and/or game "
"development."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:34
msgid ""
"**Some experience with making 3D games is required** before going through "
"this tutorial series. This tutorial assumes you have experience with the "
"Godot editor, GDScript, and basic 3D game development. A OpenVR-ready "
"headset and two OpenVR-ready controllers are required."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:38
msgid ""
"This tutorial was written and tested using a Windows Mixed Reality headset "
"and controllers. This project has also been tested on the HTC Vive. Code "
"adjustments may be required for other VR Headsets, such as the Oculus Rift."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:41
msgid ""
"The Godot project for this tutorial is found on the `OpenVR GitHub "
"repository <https://github.com/GodotVR/godot_openvr_fps>`__. The starter "
"assets for this tutorial can be found in the releases section on the GitHub "
"repository. The starter assets contain some 3D models, sounds, scripts, and "
"scenes that are configured for this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:44
msgid "**Credits for the assets provided**:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:46
msgid ""
"The sky panorama was created by `CGTuts <https://cgi.tutsplus.com/articles/"
"freebie-8-awesome-ocean-hdris--cg-5684>`__."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:48
msgid "The font used is Titillium-Regular"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:49
msgid "The font is licensed under the SIL Open Font License, Version 1.1"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:51
msgid ""
"The audio used are from several different sources, all downloaded from the "
"Sonniss #GameAudioGDC Bundle (`License PDF <https://sonniss.com/gdc-bundle-"
"license/>`__)"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:52
msgid ""
"The folders where the audio files are stored have the same name as folders "
"in the Sonniss audio bundle."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:54
msgid ""
"The OpenVR addon was created by `Bastiaan Olij <https://github.com/"
"BastiaanOlij>`__ and is released under the MIT license. It can be found both "
"on the `Godot Asset Library <https://godotengine.org/asset-library/"
"asset/150>`__ and on `GitHub <https://github.com/GodotVR/godot-openvr-"
"asset>`__. *3rd party code and libraries used in the OpenVR addon may be "
"under a different license.*"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:56
msgid ""
"The initial project, 3D models, and scripts were created by `TwistedTwigleg "
"<https://github.com/TwistedTwigleg>`__ and is released under the MIT license."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:58
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:16
msgid ""
"You can find the finished project on the `OpenVR GitHub repository <https://"
"github.com/GodotVR/godot_openvr_fps>`__."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:62
msgid "Getting everything ready"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:64
msgid ""
"If you have not already, go to the `OpenVR GitHub repository <https://github."
"com/GodotVR/godot_openvr_fps/releases/>`__ and download the \"Starter "
"Assets\" file from the releases. Once you have the starter assets "
"downloaded, open up the project in Godot."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:67
msgid ""
"The starter assets are not required to use the scripts provided in this "
"tutorial. The starter assets include several premade scenes and scripts that "
"will be used throughout the tutorial."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:70
msgid ""
"When the project is first loaded, the Game.tscn scene will be opened. This "
"will be the main scene used for the tutorial. It includes several nodes and "
"scenes already placed throughout the scene, some background music, and "
"several GUI-related :ref:`MeshInstance <class_MeshInstance>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:75
msgid ""
"The GUI-related :ref:`MeshInstance <class_MeshInstance>` nodes already have "
"scripts attached to them. These scripts will set the texture of a :ref:"
"`Viewport <class_Viewport>` node to the albedo texture of the material of "
"the :ref:`MeshInstance <class_MeshInstance>` node. This is used to display "
"text within the VR project. Feel free to take a look at the script, ``GUI."
"gd``, if you want. We will not be going over how to to use :ref:`Viewport "
"<class_Viewport>` nodes for displaying UI on :ref:`MeshInstance "
"<class_MeshInstance>` nodes in this tutorial ."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:80
msgid ""
"If you are interested in how to use :ref:`Viewport <class_Viewport>` nodes "
"for displaying UI on :ref:`MeshInstance <class_MeshInstance>` nodes, see "
"the :ref:`doc_viewport_as_texture` tutorial. It covers how to use a :ref:"
"`Viewport <class_Viewport>` as a render texture, along with how to apply "
"that texture onto a :ref:`MeshInstance <class_MeshInstance>` node."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:85
msgid ""
"Before we jump into the tutorial, let's take a moment to talk about how the "
"nodes used for VR work."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:87
msgid ""
"The :ref:`ARVROrigin <class_ARVROrigin>` node is the center point of the VR "
"tracking system. The position of the :ref:`ARVROrigin <class_ARVROrigin>` is "
"the position the VR system considers the 'center' point on the floor. The :"
"ref:`ARVROrigin <class_ARVROrigin>` has a `world scale` property that "
"effects the size of the user within the VR scene. For this tutorial, it is "
"set to `1.4`, as the world was originally just a tad to big. As mentioned "
"earlier, keeping the scale relatively consistent is important in VR."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:92
msgid ""
"The :ref:`ARVRCamera <class_ARVRCamera>` is the player's headset and view "
"into the scene. The :ref:`ARVRCamera <class_ARVRCamera>` is offset on the Y "
"axis by the VR user's height, which will be important later when we add "
"teleportation locomotoin. If the VR system supports room tracking, then the :"
"ref:`ARVRCamera <class_ARVRCamera>` will move as the player moves. This "
"means that the :ref:`ARVRCamera <class_ARVRCamera>` is not guaranteed to be "
"in the same position as the :ref:`ARVROrigin <class_ARVROrigin>` node."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:96
msgid ""
"The :ref:`ARVRController <class_ARVRController>` node represents a VR "
"controller. The :ref:`ARVRController <class_ARVRController>` will follow the "
"position and rotation of the VR controller relative to the :ref:`ARVROrigin "
"<class_ARVROrigin>` node. All of the input for the VR controllers happens "
"through the :ref:`ARVRController <class_ARVRController>` node. An :ref:"
"`ARVRController <class_ARVRController>` node with an ``ID`` of ``1`` "
"represents the left VR controller, while an :ref:`ARVRController "
"<class_ARVRController>` controller with an ``ID`` of ``2`` represents the "
"right VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:101
msgid "To summarize:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:103
msgid ""
"The :ref:`ARVROrigin <class_ARVROrigin>` node is the center of the VR "
"tracking system and is positioned on the floor."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:105
msgid ""
"The :ref:`ARVRCamera <class_ARVRCamera>` is the player's VR headset and view "
"into the scene."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:107
msgid ""
"The :ref:`ARVRCamera <class_ARVRCamera>` node is offset on the Y axis by the "
"user's height."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:109
msgid ""
"If the VR system supports room tracking, then the :ref:`ARVRCamera "
"<class_ARVRCamera>` node may be offset on the X and Z axes as the player "
"moves."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:111
msgid ""
"The :ref:`ARVRController <class_ARVRController>` nodes represent the VR "
"controllers and handle all of the input from the VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:115
msgid "Starting VR"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:117
msgid ""
"Now that we have gone over the VR nodes, let's start working on the project. "
"While in ``Game.tscn``, select the ``Game`` node and make a new script "
"called ``Game.gd``. In the ``Game.gd`` file, add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:157
msgid "Let's go over what this code does."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:161
msgid ""
"In the ``_ready`` function, we first get the OpenVR VR interface using the "
"``find_interface`` function in the :ref:`ARVRServer <class_ARVRServer>` and "
"assign it to a variable called `VR`. If the :ref:`ARVRServer "
"<class_ARVRServer>` finds an interface with the name OpenVR, it will return "
"it, otherwise it will return ``null``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:164
msgid ""
"The OpenVR VR interface is not included with Godot by default. You will need "
"to download the OpenVR asset from the `Asset Library <https://godotengine."
"org/asset-library/asset/150>`__ or `GitHub <https://github.com/GodotVR/godot-"
"openvr-asset>`__."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:167
msgid ""
"The code then combines two conditionals, one to check if the `VR` variable "
"is NOT null (``if VR``) and another calls the initialize function, which "
"returns a boolean based on whether the OpenVR interface was able to "
"initialize or not. If both of these conditionals return true, then we can "
"turn the main Godot :ref:`Viewport <class_Viewport>` into an ARVR viewport."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:171
msgid ""
"If the VR interface initialized successfully, we then get the root :ref:"
"`Viewport <class_Viewport>` and set the `arvr` property to ``true``. This "
"will tell Godot to use the initialized ARVR interface to drive the :ref:"
"`Viewport <class_Viewport>` display."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:174
msgid ""
"Finally, we disable VSync so the Frames Per Second (FPS) is not capped by "
"the computer monitor. After this we tell Godot to render at ``90`` frames "
"per second, which is the standard for most VR headsets. Without disabling "
"VSync, the normal computer monitor may limit the frame rate of the VR "
"headset to the frame rate of the computer monitor."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:177
msgid ""
"In the project settings, under the ``Physics->Common`` tab, the physics FPS "
"has been set to ``90``. This makes the physics engine run at the same frame "
"rate as the VR display, which makes physics reactions look smoother when in "
"VR."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:182
msgid ""
"That is all we need to do for Godot to launch OpenVR within the project! Go "
"ahead and give it a try if you want. Assuming everything works, you will be "
"able to look around the world. If you have a VR headset with room tracking, "
"then you will be able to move around the scene within the limits of the room "
"tracking."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:186
msgid "Creating the controllers"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:190
msgid ""
"Right now all that the VR user can do is stand around, which isn't really "
"what we are going for unless we are working on a VR film. Lets write the "
"code for the VR controllers. We are going to write all the code for the VR "
"controllers in one go, so the code is rather long. That said, once we are "
"finished you will be able to teleport around the scene, artificially move "
"using the touchpad/joystick on the VR controller, and be able to pick up, "
"drop, and throw :ref:`RigidBody <class_RigidBody>`-based nodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:195
msgid ""
"First we need to open the scene used for the VR controllers. "
"``Left_Controller.tscn`` or ``Right_Controller.tscn``. Let's briefly go over "
"how the scene is setup."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:198
msgid "How the VR controller scene is setup"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:200
msgid ""
"In both scenes the root node is a ARVRController node. The only difference "
"is that the ``Left_Controller`` scene has the ``Controller Id`` property set "
"to ``1`` while the ``Right_Controller`` has the ``Controller Id`` property "
"set to ``2``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:203
msgid ""
"The :ref:`ARVRServer <class_ARVRServer>` attempts to use these two IDs for "
"the left and right VR controllers. For VR systems that support more than 2 "
"controllers/tracked-objects, these IDs may need adjusting."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:206
msgid ""
"Next is the ``Hand`` :ref:`MeshInstance <class_MeshInstance>` node. This "
"node is used to display the hand mesh that will be used when the VR "
"controller is not holding onto a :ref:`RigidBody <class_RigidBody>` node. "
"The hand in the ``Left_Controller`` scene is a left hand, while the hand on "
"the ``Right_Controller`` scene is a right hand."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:209
msgid ""
"The node named ``Raycast`` is a :ref:`Raycast <class_Raycast>` node that is "
"used for aiming where to teleport to when the VR controller is teleporting. "
"The length of the :ref:`Raycast <class_Raycast>` is set to ``-16`` on the Y "
"axis and is rotated so that it points out of the pointer finger of the hand. "
"The ``Raycast`` node has a single child node, ``Mesh``, that is a :ref:"
"`MeshInstance <class_MeshInstance>`. This is used for visually showing where "
"the teleportation :ref:`Raycast <class_Raycast>` is aiming."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:213
msgid ""
"The node named ``Area`` is a :ref:`Area <class_Area>` node will be used for "
"grabbing :ref:`RigidBody <class_RigidBody>`-based nodes when the VR "
"controller grab mode is set to ``AREA``. The ``Area`` node has a single "
"child node, ``CollisionShape``, that defines a sphere :ref:`CollisionShape "
"<class_CollisionShape>`. When the VR controller is not holding any objects "
"and the grab button is pressed, the first :ref:`RigidBody <class_RigidBody>`-"
"based node within the ``Area`` node will be picked up."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:217
msgid ""
"Next is a :ref:`Position3D <class_Position3D>` node called ``Grab_Pos``. "
"This is used to define the position that grabbed :ref:`RigidBody "
"<class_RigidBody>` nodes will follow then they are held by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:220
msgid ""
"A large :ref:`Area <class_Area>` node called ``Sleep_Area`` is used to "
"disable sleeping for any RigidBody nodes within its :ref:`CollisionShape "
"<class_CollisionShape>`, simple called ``CollisionShape``. This is needed "
"because if a :ref:`RigidBody <class_RigidBody>` node falls asleep, then the "
"VR controller will be unable to grab it. By using ``Sleep_Area``, we can "
"write code that makes any :ref:`RigidBody <class_RigidBody>` node within it "
"not able to sleep, therefore allowing the VR controller to grab it."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:224
msgid ""
"An :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node called "
"``AudioStreamPlayer3D`` has a sound loaded that we will use when an object "
"has been picked up, dropped or thrown by the VR controller. While this is "
"not necessary for the functionality of the VR controller, it makes grabbing "
"and dropping objects feel more natural."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:227
msgid ""
"Finally, the last nodes are the ``Grab_Cast`` node and it's only child node, "
"``Mesh``. The ``Grab_Cast`` node will be used for grabbing :ref:`RigidBody "
"<class_RigidBody>`-based nodes when the VR controller grab mode is set to "
"``RAYCAST``. This will allow the VR controller to grab objects that are just "
"slightly out of reach using a Raycast. The ``Mesh`` node is used for "
"visually showing where the teleportation :ref:`Raycast <class_Raycast>` is "
"aiming."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:231
msgid ""
"That is a quick overview of how the VR controller scenes are setup, and how "
"we will be using the nodes to provide the functionality for them. Now that "
"we have looked at the VR controller scene, let's write the code that will "
"drive them."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:235
msgid "The code for the VR controllers"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:237
msgid ""
"Select the root node of the scene, either ``Right_Controller`` or "
"``Left_Controller``, and make a new script called ``VR_Controller.gd``. Both "
"scenes will be using the same script, so it doesn't matter which you use "
"first. With ``VR_Controller.gd`` opened, add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:240
msgid ""
"You can copy and paste the code from this page directly into the script "
"editor."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:242
msgid ""
"If you do this, all the code copied will be using spaces instead of tabs."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:244
msgid ""
"To convert the spaces to tabs in the script editor, click the ``Edit`` menu "
"and select ``Convert Indent To Tabs``. This will convert all the spaces into "
"tabs. You can select ``Convert Indent To Spaces`` to convert tabs back into "
"spaces."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:536
msgid ""
"This is quite a bit of code to go through. Let's go through what the code "
"does step-by-step."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:539
msgid "Explaining the VR controller code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:541
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:84
msgid "First, let's go through all the class variables in the script:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:543
msgid ""
"``controller_velocity``: A variable to hold a rough approximation of the VR "
"controller's velocity."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:544
msgid ""
"``prior_controller_position``: A variable to hold the VR controller's last "
"position in 3D space."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:545
msgid ""
"``prior_controller_velocities``: An Array to hold the last 30 calculated VR "
"controller velocities. This is used to smooth the velocity calculations over "
"time."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:546
msgid ""
"``held_object``: A variable to hold a reference to the object the VR "
"controller is holding. If the VR controller is not holding any objects, this "
"variable will be ``null``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:547
msgid ""
"``held_object_data``: A dictionary to hold data for the :ref:`RigidBody "
"<class_RigidBody>` node being held by the VR controller. This is used to "
"reset the :ref:`RigidBody <class_RigidBody>`'s data when it is no longer "
"held."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:548
msgid ""
"``grab_area``: A variable to hold the :ref:`Area <class_Area>` node used to "
"grab objects with the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:549
msgid ""
"``grab_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"used to grab objects with the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:550
msgid ""
"``grab_mode``: A variable to define the grab mode the VR controller is "
"using. There are only two modes for grabbing objects in this tutorial, "
"``AREA`` and ``RAYCAST``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:551
msgid ""
"``grab_pos_node``: A variable to hold the node that will be used to update "
"the position and rotation of held objects."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:552
msgid ""
"``hand_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that contains the hand mesh for the VR "
"controller. This mesh will be shown when the VR controller is not holding "
"anything."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:553
msgid ""
"``hand_pickup_drop_sound``: A variable to hold the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node that contains the pickup/drop sound."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:554
msgid ""
"``teleport_pos``: A variable to hold the position the player will be "
"teleported to when the VR controller teleports the player."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:555
msgid ""
"``teleport_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node used to show where the player is teleporting to."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:556
msgid ""
"``teleport_button_down``: A variable used to track whether the controller's "
"teleport button is held down. This will be used to detect if this VR "
"controller is trying to teleport the player."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:557
msgid ""
"``teleport_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` "
"node used to calculate the teleport position. This node also has a :ref:"
"`MeshInstance <class_MeshInstance>` that acts as a 'laser sight' for aiming."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:558
msgid ""
"``CONTROLLER_DEADZONE``: A constant to define the deadzone for both the "
"trackpad and the joystick on the VR controller. See the note below for more "
"information."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:559
msgid ""
"``MOVEMENT_SPEED``: A constant to define the speed the player moves at when "
"using the trackpad/joystick to move artificially."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:560
msgid ""
"``CONTROLLER_RUMBLE_FADE_SPEED``: A constant to define how fast the VR "
"controller rumble fades."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:561
msgid ""
"``directional_movement``: A variable to hold whether this VR controller is "
"moving the player using the touchpad/joystick."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:563
msgid ""
"You can find a great article explaining all about how to handle touchpad/"
"joystick dead zones `here <https://web.archive.org/web/20191208161810/http://"
"www.third-helix.com/2013/04/12/doing-thumbstick-dead-zones-right.html>`__."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:565
msgid ""
"We are using a translated version of the scaled radial dead zone code "
"provided in that article for the VR controller's joystick/touchpad. The "
"article is a great read, and I highly suggest giving it a look!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:568
msgid ""
"That is quite a few class variables. Most of them are used to hold "
"references to nodes we will need throughout the code. Next let's start "
"looking at the functions, starting with the ``_ready`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:574
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:98
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:286
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:684
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:858
msgid "``_ready`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:576
msgid ""
"First we tell Godot to silence the warnings about not using the values "
"returned by the ``connect`` function. We will not need the returned values "
"for this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:579
msgid ""
"Next we get the :ref:`Raycast <class_Raycast>` node we are going to use for "
"determining the position for teleporting and assign it to the "
"``teleport_raycast`` variable. We then get the :ref:`MeshInstance "
"<class_MeshInstance>` node that we will use to show where the player will be "
"teleporting to. The node we are using for teleporting is a child of the "
"``Game`` scene. We do this so the teleport mesh node is not effected by "
"changes in the VR controller, and so the teleport mesh can be used by both "
"VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:583
msgid ""
"Then the ``teleport_button_down`` variable is set to false, ``teleport_mesh."
"visible`` is set to ``false``, and ``teleport_raycast.visible`` is set to "
"``false``. This sets up the variables for teleporting the player into their "
"initial, not teleporting the player, state."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:586
msgid ""
"The code then gets the ``grab_area`` node, the ``grab_raycast`` node, and "
"the ``grab_pos_node`` node and assigns them all to their respective "
"variables for use later."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:588
msgid ""
"Next the ``grab_mode`` is set to ``AREA`` so the VR controller will attempt "
"to grab objects using the :ref:`Area <class_Area>` node defined in "
"``grab_area`` when the VR controller's grab/grip button is pressed. We also "
"set the ``grab_raycast`` node's ``visible`` property to ``false`` so the "
"'laser sight' child node of ``grab_raycast`` is not visible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:591
msgid ""
"After that we connect the ``body_entered`` and ``body_exited`` signals from "
"the ``Sleep_Area`` node in the VR controller to the ``sleep_area_entered`` "
"and ``sleep_area_exited`` functions. The ``sleep_area_entered`` and "
"``sleep_area_exited`` functions will be used to make :ref:`RigidBody "
"<class_RigidBody>` nodes unable to sleep when nearby the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:594
msgid ""
"Then the ``hand_mesh`` and ``hand_pickup_drop_sound`` nodes are gotten and "
"assigned them to their respective variables for use later."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:596
msgid ""
"Finally, the ``button_pressed`` and ``button_release`` signals in the :ref:"
"`ARVRController <class_ARVRController>` node, which the VR controller "
"extends, are connected to the ``button_pressed`` and ``button_released`` "
"functions respectively. This means that when a button on the VR controller "
"is pressed or released, the ``button_pressed`` or ``button_released`` "
"functions defined in this script will be called."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:602
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:106
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:292
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:694
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:868
msgid "``_physics_process`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:604
msgid ""
"First we check to see if the ``rumble`` variable is more than zero. If the "
"``rumble`` variable, which is a property of the :ref:`ARVRController "
"<class_ARVRController>` node, is more than zero then the VR controller "
"rumbles."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:607
msgid ""
"If the ``rumble`` variable is more than zero, then we reduce the rumble by "
"``CONTROLLER_RUMBLE_FADE_SPEED`` every second by subtracting "
"``CONTROLLER_RUMBLE_FADE_SPEED`` multiplied by delta. There is then a ``if`` "
"condition to check if ``rumble`` is less than zero, which sets ``rumble`` to "
"zero if its value is less than zero."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:610
msgid ""
"This small section of code is all we need for reducing the VR controller's "
"rumble. Now when we set ``rumble`` to a value, this code will automatically "
"make it fade over time."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:614
msgid ""
"The first section of code checks to see if the ``teleport_button_down`` "
"variable is equal to ``true``, which means this VR controller is trying to "
"teleport."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:616
msgid ""
"If ``teleport_button_down`` is equal to ``true``, we force the "
"``teleport_raycast`` :ref:`Raycast <class_Raycast>` node to update using the "
"``force_raycast_update`` function. The ``force_raycast_update`` function "
"will update the properties within the :ref:`Raycast <class_Raycast>` node "
"with the latest version of the physics world."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:619
msgid ""
"The code then checks to see if the ``teleport_raycast`` collided with "
"anything by checking of the ``is_colliding`` function in "
"``teleport_raycast`` is true. If the :ref:`Raycast <class_Raycast>` collided "
"with something, we then check to see if the :ref:`PhysicsBody "
"<class_PhysicsBody>` the raycast collided with is a :ref:`StaticBody "
"<class_StaticBody>` or not. We then check to see if the collision normal "
"vector returned by the raycast is greater than or equal to ``0.85`` on the Y "
"axis."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:623
msgid ""
"We do this because we do not want the user to be able to teleport onto "
"RigidBody nodes and we only want the player to be able to teleport on floor-"
"like surfaces."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:625
msgid ""
"If all these conditions are met, then we assign the ``teleport_pos`` "
"variable to the ``get_collision_point`` function in ``teleport_raycast``. "
"This will assign ``teleport_pos`` to the position the raycast collided at in "
"world space. We then move the ``teleport_mesh`` to the world position stored "
"in ``teleport_pos``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:628
msgid ""
"This section of code will get the position the player is aiming at with the "
"teleportation raycast and update the teleportation mesh, giving a visual "
"update on where the user will be teleporting to when the release the "
"teleport button."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:633
msgid ""
"The next section of code first checks to see if the VR controller is active "
"through the ``get_is_active`` function, which is defined by :ref:"
"`ARVRController <class_ARVRController>`. If the VR controller is active, "
"then it calls the ``_physics_process_update_controller_velocity`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:636
msgid ""
"The ``_physics_process_update_controller_velocity`` function will calculate "
"the VR controller's velocity through changes in position. It is not perfect, "
"but this process gets a rough idea of the velocity of the VR controller, "
"which is fine for the purposes of this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:641
msgid ""
"The next section of code checks to see if the VR controller is holding an "
"object by checking to see if the ``held_object`` variable is not equal to "
"``null``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:643
msgid ""
"If the VR controller is holding an object, we first store it's scale in a "
"temporary variable called ``held_scale``. We then set the "
"``global_transform`` of the held object to the ``global_transform`` of the "
"``held_object`` node. This will make the held object have the same position, "
"rotation, and scale of the ``grab_pos_node`` node in world space."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:646
msgid ""
"However, because we do not want the held object to change in scale when it "
"is grabbed, we need to set the ``scale`` property of the ``held_object`` "
"node back to ``held_scale``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:648
msgid ""
"This section of code will keep the held object in the same position and "
"rotation as the VR controller, keeping it synced with the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:652
msgid ""
"Finally, the last section of code simply calls the "
"``_physics_process_directional_movement`` function. This function contains "
"all the code for moving the player when the touchpad/joystick on the VR "
"controller moves."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:657
msgid ""
"``_physics_process_update_controller_velocity`` function step-by-step "
"explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:659
msgid ""
"First this function resets the ``controller_velocity`` variable to zero :ref:"
"`Vector3 <class_Vector3>`."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:663
msgid ""
"Then we check to see if there are any stored/cached VR controller velocities "
"saved in the ``prior_controller_velocities`` array. We do this by checking "
"to see if the ``size()`` function returns a value greater than ``0``. If "
"there are cached velocities within ``prior_controller_velocities``, then we "
"iterate through each of the stored velocities using a ``for`` loop."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:666
msgid ""
"For each of the cached velocities, we simply add its value to "
"``controller_velocity``. Once the code has gone through all of the cached "
"velocities in ``prior_controller_velocities``, we divide "
"``controller_velocity`` by the size of the ``prior_controller_velocities`` "
"array, which will give us the combined velocity value. This helps take the "
"previous velocities into account, making the direction of the controller's "
"velocity more accurate."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:672
msgid ""
"Next we calculate the change in position the VR controller has taken since "
"the last ``_physics_process`` function call. We do this by subtracting "
"``prior_controller_position`` from the global position of the VR controller, "
"``global_transform.origin``. This will give us a :ref:`Vector3 "
"<class_Vector3>` that points from the position in "
"``prior_controller_position`` to the current position of the VR controller, "
"which we store in a variable called ``relative_controller_position``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:676
msgid ""
"Next we add the change in position to ``controller_velocity`` so the latest "
"change in position is taken into account in the velocity calculation. We "
"then add ``relative_controller_position`` to ``prior_controller_velocities`` "
"so it can be taken into account on the next calculation of the VR "
"controller's velocity."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:679
msgid ""
"Then ``prior_controller_position`` is updated with the global position of "
"the VR controller, ``global_transform.origin``. We then divide "
"``controller_velocity`` by ``delta`` so the velocity is higher, giving "
"results like those we expect, while still being relative to the amount of "
"time that has passed. It is not a perfect solution, but the results look "
"decent most of the time and for the purposes of this tutorial, it is good "
"enough."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:683
msgid ""
"Finally, the function checks to see if the ``prior_controller_velocities`` "
"has more than ``30`` velocities cached by checking if the ``size()`` "
"function returns a value greater than ``30``. If there are more than ``30`` "
"cached velocities stored in ``prior_controller_velocities``, then we simply "
"remove the oldest cached velocity by calling the ``remove`` function and "
"passing in a index position of ``0``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:689
msgid ""
"What this function ultimately does is that it gets a rough idea of the VR "
"controller's velocity by calculating the VR controller's relative changes in "
"position over the last thirty ``_physics_process`` calls. While this is not "
"perfect, it gives a decent idea of how fast the VR controller is moving in "
"3D space."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:694
msgid ""
"``_physics_process_directional_movement`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:696
msgid ""
"First this function gets the axes for the trackpad and the joystick and "
"assigns them to :ref:`Vector2 <class_Vector2>` variables called "
"``trackpad_vector`` and ``joystick_vector`` respectively."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:698
msgid ""
"You may need to remap the joystick and/or touchpad index values depending on "
"your VR headset and controller. The inputs in this tutorial are the index "
"values of a Windows Mixed Reality headset."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:701
msgid ""
"Then ``trackpad_vector`` and ``joystick_vector`` have their deadzones "
"account for. The code for this is detailed in the article below, with slight "
"changes as the code is converted from C# to GDScript."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:704
msgid ""
"Once the ``trackpad_vector`` and ``joystick_vector`` variables have had "
"their deadzones account for, the code then gets the forward and right "
"direction vectors relative to the global transform of the :ref:`ARVRCamera "
"<class_ARVRCamera>`. What this does is that it gives us vectors that point "
"forward and right relative to the rotation of the user camera, the :ref:"
"`ARVRCamera <class_ARVRCamera>`, in world space. These vectors point in the "
"same direction of the blue and red arrows when you select an object in the "
"Godot editor with the ``local space mode`` button enabled. The forward "
"direction vector is stored in a variable called ``forward_direction``, while "
"the right direction vector is stored in a variable called "
"``right_direction``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:710
msgid ""
"Next the code adds the ``trackpad_vector`` and ``joystick_vector`` variables "
"together and normalizes the results using the ``normalized`` function. This "
"gives us the combined movement direction of both input devices, so we can "
"use a single :ref:`Vector2 <class_Vector2>` for moving the user. We assign "
"the combined direction to a variable called ``movement_vector``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:713
msgid ""
"Then we calculate the distance the user will move forward, relative to the "
"forward direction stored in ``forward_direction``. To calculate this, we "
"multiply ``forward_direction`` by ``movement_vector.x``, ``delta``, and "
"``MOVEMENT_SPEED``. This will give us the distance the user will move "
"forward when the trackpad/joystick is pushed forward or backwards. We assign "
"this to a variable called ``movement_forward``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:717
msgid ""
"We do a similar calculation for the distance the user will move right, "
"relative to the right direction stored in ``right_direction``. To calculate "
"the distance the user will move right, we multiply ``right_direction`` by "
"``movement_vector.y``, ``delta``, and ``MOVEMENT_SPEED``. This will give us "
"the distance the user will move right when the trackpad/joystick is pushed "
"right or left. We assign this to a variable called ``movement_right``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:721
msgid ""
"Next we remove any movement on the ``Y`` axis of ``movement_forward`` and "
"``movement_right`` by assigning their ``Y`` values to ``0``. We do this so "
"the user cannot fly/fall simply by moving the trackpad or joystick. Without "
"doing this, the player could fly in the direction they are facing."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:724
msgid ""
"Finally, we check to see if the ``length`` function on ``movement_right`` or "
"``movement_forward`` is greater than ``0``. If it is, then we need to move "
"the user. To move the user, we perform a global translation to the :ref:"
"`ARVROrigin <class_ARVROrigin>` node using ``get_parent().global_translate`` "
"and pass in the ``movement_right`` variable with the ``movement_forward`` "
"variable added to it. This will move the player in the direction the "
"trackpad/joystick is pointing, relative to the rotation of the VR headset. "
"We also set the ``directional_movement`` variable to ``true`` so the code "
"knows this VR controller is moving the player."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:729
msgid ""
"If the ``length`` function on ``movement_right`` or ``movement_forward`` is "
"less than or equal to ``0``, then we simply set the ``directional_movement`` "
"variable to ``false`` so the code knows this VR controller is not moving the "
"player."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:735
msgid ""
"What this function ultimately does is takes the input from the VR "
"controller's trackpad and joystick and moves the player in the direction the "
"player is pushing them. Movement is relative to the rotation of the VR "
"headset, so if the player pushes forward and turns their head to the left, "
"they will move to the left."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:740
msgid "``button_pressed`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:742
msgid ""
"This function checks to see if the VR button that was just pressed is equal "
"to one of the VR buttons used in this project. The ``button_index`` variable "
"is passed in by the ``button_pressed`` signal in :ref:`ARVRController "
"<class_ARVRController>`, which we connected in the ``_ready`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:745
msgid ""
"There are only three buttons we are looking for in this project: the trigger "
"button, the grab/grip button, and the menu button."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:747
msgid ""
"You may need to remap these button index values depending on your VR headset "
"and controller. The inputs in this tutorial are the index values of a "
"Windows Mixed Reality headset."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:750
msgid ""
"First we check if the ``button_index`` is equal to ``15``, which should map "
"to the trigger button on the VR controller. If the button pressed is the "
"trigger button, then the ``_on_button_pressed_trigger`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:753
msgid ""
"If the ``button_index`` is equal to ``2``, then the grab button was just "
"pressed. If the button pressed is the grab button, the "
"``_on_button_pressed_grab`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:755
msgid ""
"Finally, if the ``button_index`` is equal to ``1``, then the menu button was "
"just pressed. If the button pressed is the menu button, the "
"``_on_button_pressed_menu`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:759
msgid "``_on_button_pressed_trigger`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:761
msgid ""
"First this function checks to see if the VR controller is not holding by "
"checking if ``held_object`` is equal to ``null``. If the VR controller is "
"not holding anything, then we assume that the trigger press on the VR "
"controller was for teleporting. We then make sure that ``teleport_mesh."
"visible`` is equal to ``false``. We use this to tell if the other VR "
"controller is trying to teleport or not, as ``teleport_mesh`` will be "
"visible if the other VR controller is teleporting."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:765
msgid ""
"If ``teleport_mesh.visible`` is equal to ``false``, then we can teleport "
"with this VR controller. We set the ``teleport_button_down`` variable to "
"``true``, set ``teleport_mesh.visible`` to true, and set ``teleport_raycast."
"visible`` to ``true``. This will tell the code in ``_physics_process`` that "
"this VR controller is going to teleport, it will make the ``teleport_mesh`` "
"visible so the user knows where the are teleporting to, and will make "
"``teleport_raycast`` visible to the player has a 'laser sight' they can use "
"to aim the teleportation pos."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:772
msgid ""
"If ``held_object`` is not equal to ``null``, then the VR controller is "
"holding something. We then check to see if the object that is being held, "
"``held_object``, extends a class called ``VR_Interactable_Rigidbody``. We "
"have not made ``VR_Interactable_Rigidbody`` yet, but "
"``VR_Interactable_Rigidbody`` will be a custom class we will use on all of "
"the special/custom :ref:`RigidBody <class_RigidBody>`-based nodes in the "
"project."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:776
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:851
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:875
msgid ""
"Don't worry, we will cover ``VR_Interactable_Rigidbody`` after this section!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:778
msgid ""
"If the ``held_object`` extends ``VR_Interactable_Rigidbody``, then we call "
"the ``interact`` function, so the held object can do whatever it is supposed "
"to do when the trigger is pressed and the object is held by the VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:783
msgid "``_on_button_pressed_grab`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:785
msgid ""
"First this function checks to see if ``teleport_button_down`` is equal to "
"``true``. If it is, then it calls ``return``. We do this because we do not "
"want the user to be able to pick up objects while teleporting."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:788
msgid ""
"Then we check to see if the VR controller is currently not holding anything "
"by checking if ``held_object`` is equal to ``null``. If the VR controller is "
"not holding anything, then the ``_pickup_rigidbody`` function is called. If "
"the VR controller is holding something, ``held_object`` is not equal to "
"``null``, then the ``_throw_rigidbody`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:791
msgid ""
"Finally, the pick-up/drop sound is played by calling the ``play`` function "
"on ``hand_pickup_drop_sound``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:795
msgid "``_pickup_rigidbody`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:797
msgid ""
"First the function makes a variable called ``rigid_body``, which we'll be "
"using to store the :ref:`RigidBody <class_RigidBody>` that the VR controller "
"is going to pick up, assuming there is a RigidBody to pick up."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:802
msgid ""
"Then the function checks to see if the ``grab_mode`` variable is equal to "
"``AREA``. If it is, then it gets all of the :ref:`PhysicsBody "
"<class_PhysicsBody>` nodes within the ``grab_area`` using the "
"``get_overlapping_bodies`` functions. This function will return an array of :"
"ref:`PhysicsBody <class_PhysicsBody>` nodes. We assign the array of :ref:"
"`PhysicsBody <class_PhysicsBody>` to a new variable called ``bodies``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:806
msgid ""
"We then check to see if the length of the ``bodies`` variable is more than "
"``0``. If it is, we go through each of the :ref:`PhysicsBody "
"<class_PhysicsBody>` nodes in ``bodies`` using a for loop."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:808
msgid ""
"For each :ref:`PhysicsBody <class_PhysicsBody>` node, we check if it is, or "
"extends, a :ref:`RigidBody <class_RigidBody>` node using ``if body is "
"RigidBody``, which will return ``true`` if the :ref:`PhysicsBody "
"<class_PhysicsBody>` node is or extends the :ref:`RigidBody "
"<class_RigidBody>` node. If the object is a :ref:`RigidBody "
"<class_RigidBody>`, then we check to make sure there is not a variable/"
"constant called ``NO_PICKUP`` defined in the body. We do this because if you "
"want to have :ref:`RigidBody <class_RigidBody>` nodes that cannot be picked "
"up, all you have to do is define a constant/variable called ``NO_PICKUP`` "
"and the VR controller will be unable to pick it up. If the :ref:`RigidBody "
"<class_RigidBody>` node does not have a variable/constant defined with the "
"name ``NO_PICKUP``, then we assign the ``rigid_body`` variable to the :ref:"
"`RigidBody <class_RigidBody>` node and break the for loop."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:814
msgid ""
"What this section of code does is goes through all of the physics bodies "
"within the ``grab_area`` and grabs the first :ref:`RigidBody "
"<class_RigidBody>` node that does not have a variable/constant named "
"``NO_PICKUP`` and assigns it to the ``rigid_body`` variable so we can do "
"some additional post processing later in this function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:819
msgid ""
"If the ``grab_mode`` variable is not equal to ``AREA``, we then check to see "
"if it is equal to ``RAYCAST`` instead. If it is equal to ``RAYCAST``, we "
"force the ``grab_raycast`` node to update using the ``force_raycast_update`` "
"function. The ``force_raycast_update`` function will update the :ref:"
"`Raycast <class_Raycast>` with the latest changes in the physics world. We "
"then check to see if the ``grab_raycast`` node collided with something using "
"the ``is_colliding`` function, which will return true if the :ref:`Raycast "
"<class_Raycast>` hit something."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:823
msgid ""
"If the ``grab_raycast`` hit something, we get the :ref:`PhysicsBody "
"<class_PhysicsBody>` node hit using the ``get_collider`` function. The code "
"then checks to see if the node hit is a :ref:`RigidBody <class_RigidBody>` "
"node using ``if body is RigidBody``, which will return ``true`` if the :ref:"
"`PhysicsBody <class_PhysicsBody>` node is or extends the :ref:`RigidBody "
"<class_RigidBody>` node. Then the code checks to see if the :ref:`RigidBody "
"<class_RigidBody>` node does not have a variable named ``NO_PICKUP``, and if "
"it does not, then it assigns the :ref:`RigidBody <class_RigidBody>` node to "
"the ``rigid_body`` variable."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:828
msgid ""
"What this section of code does is sends the ``grab_raycast`` :ref:`Raycast "
"<class_Raycast>` node out and checks if it collided with a :ref:`RigidBody "
"<class_RigidBody>` node that does not have a variable/constant named "
"``NO_PICKUP``. If it collided with a RigidBody without ``NO_PICKUP``, it "
"assigns the node to the ``rigid_body`` variable so we can do some additional "
"post processing later in this function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:834
msgid ""
"The final section of code first checks to see if ``rigid_body`` is not equal "
"to ``null``. If ``rigid_body`` is not equal to ``null``, then the VR "
"controller found a :ref:`RigidBody <class_RigidBody>`-based node that can be "
"picked up."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:837
msgid ""
"If there is a VR controller to pickup, we assign ``held_object`` to the :ref:"
"`RigidBody <class_RigidBody>` node stored in ``rigid_body``. We then store "
"the :ref:`RigidBody <class_RigidBody>` node's ``mode``, ``collision_layer``, "
"and ``collision_mask`` in ``held_object_data`` using ``mode``, ``layer``, "
"and ``mask`` as keys for the respective values. This is so we can reapply "
"them later when the object is dropped by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:841
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to "
"``MODE_STATIC``, it's ``collision_layer`` to zero, and it's "
"``collision_mask`` to zero. This will make it where the held :ref:`RigidBody "
"<class_RigidBody>` cannot interact with other objects in the physics world "
"when held by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:844
msgid ""
"Next the ``hand_mesh`` :ref:`MeshInstance <class_MeshInstance>` is made "
"invisible by setting the ``visible`` property to ``false``. This is so the "
"hand does not get in the way of the held object. Likewise, the "
"``grab_raycast`` 'laser sight' is made invisible by setting the ``visible`` "
"property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:847
msgid ""
"Then the code checks to see if the held object extends a class called "
"``VR_Interactable_Rigidbody``. If it does, then sets a variable called "
"``controller`` on ``held_object`` to ``self``, and calls the ``picked_up`` "
"function on ``held_object``. While we haven't made "
"``VR_Interactable_Rigidbody`` just yet, what this will do is set tell the "
"``VR_Interactable_Rigidbody`` class that it is being held by a VR "
"controller, where the a reference to the controller is stored in the "
"``controller`` variable, through calling the ``picked_up`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:853
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:877
msgid ""
"The code should make more sense after completing part 2 of this tutorial "
"series, where we will actually be using ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:855
msgid ""
"What this section of code does is that if a :ref:`RigidBody "
"<class_RigidBody>` was found using the grab :ref:`Area <class_Area>` or :ref:"
"`Raycast <class_Raycast>`, it sets it up so that it can be carried by the VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:859
msgid "``_throw_rigidbody`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:861
msgid ""
"First the function checks to see if the VR controller is not holding any "
"object by checking if the ``held_object`` variable is equal to ``null``. If "
"it is, then it simply calls ``return`` so nothing happens. While this "
"shouldn't be possible, the ``_throw_rigidbody`` function should only be "
"called if an object is held, this check helps ensure that if something "
"strange happens, this function will react as expected."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:865
msgid ""
"After checking if the VR controller is holding an object, we assume it is "
"and set the stored :ref:`RigidBody <class_RigidBody>` data back to the held "
"object. We take the ``mode``, ``layer`` and ``mask`` data stored in the "
"``held_object_data`` dictionary and reapply it to the object in "
"``held_object``. This will set the :ref:`RigidBody <class_RigidBody>` back "
"to the state it was prior to being picked up."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:869
msgid ""
"Then we call ``apply_impulse`` on the ``held_object`` so that the :ref:"
"`RigidBody <class_RigidBody>` is thrown in the direction of the VR "
"controller's velocity, ``controller_velocity``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:871
msgid ""
"We then check to see if the object held extends a class called "
"``VR_Interactable_Rigidbody``. If it does, then we call a function called "
"``dropped`` in ``held_object`` and set ``held_object.controller`` to "
"``null``. While we have not made ``VR_Interactable_Rigidbody`` yet, but what "
"this will do is call the ``droppped`` function so the :ref:`RigidBody "
"<class_RigidBody>` can do whatever it needs to do when dropped, and we set "
"the ``controller`` variable to ``null`` so that the :ref:`RigidBody "
"<class_RigidBody>` knows that it is not being held."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:879
msgid ""
"Regardless of whether ``held_object`` extends ``VR_Interactable_Rigidbody`` "
"or not, we then set ``held_object`` to ``null`` so the VR controller knows "
"it is no longer holding anything. Because the VR controller is no longer "
"holding anything, we make the ``hand_mesh`` visible by setting ``hand_mesh."
"visible`` to true."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:882
msgid ""
"Finally, if the ``grab_mode`` variable is set to ``RAYCAST``, we set "
"``grab_raycast.visible`` to ``true`` so the 'laser sight' for the :ref:"
"`Raycast <class_Raycast>` in ``grab_raycast`` is visible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:886
msgid "``_on_button_pressed_menu`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:888
msgid ""
"First this function checks to see if the ``grab_mode`` variable is equal to "
"``AREA``. If it is, then it sets ``grab_mode`` to ``RAYCAST``. It then "
"checks to see if the VR controller is not holding anything by checking to "
"see if ``held_object`` is equal to ``null``. If the VR controller is not "
"holding anything, then ``grab_raycast.visible`` is set to ``true`` so the "
"'laser sight' on the grab raycast is visible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:892
msgid ""
"If the ``grab_mode`` variable is not equal to ``AREA``, then it checks to "
"see if it is equal to ``RAYCAST``. If it is, then it sets the ``grab_mode`` "
"to ``AREA`` and sets ``grab_raycast.visible`` to ``false`` so the 'laser "
"sight' on the grab raycast is not visible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:895
msgid ""
"This section of code simply changes how the VR controller will grab :ref:"
"`RigidBody <class_RigidBody>`-based nodes when the grab/grip button is "
"pressed. If ``grab_mode`` is set to ``AREA``, then the :ref:`Area "
"<class_Area>` node in ``grab_area`` will be used for detecting :ref:"
"`RigidBody <class_RigidBody>` nodes, while if ``grab_mode`` is set to "
"``RAYCAST`` the :ref:`Raycast <class_Raycast>` node in ``grab_raycast`` will "
"be used for detecting :ref:`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:901
msgid "``button_released`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:903
msgid ""
"The only section of code in this function checks to see if the index of the "
"button that was just released, ``button_index``, is equal to ``15``, which "
"should map to the trigger button on the VR controller. The ``button_index`` "
"variable is passed in by the ``button_release`` signal in :ref:"
"`ARVRController <class_ARVRController>`, which we connected in the "
"``_ready`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:906
msgid ""
"If the trigger button was just released, then the "
"``_on_button_released_trigger`` function is called."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:910
msgid "``_on_button_released_trigger`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:912
msgid ""
"The only section of code in this function first checks to see if the VR "
"controller is trying to teleport by checking if the ``teleport_button_down`` "
"variable is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:914
msgid ""
"If the ``teleport_button_down`` variable is equal to ``true``, the code then "
"checks if there is a teleport position set and whether the teleport mesh is "
"visible. It does this by checking to see if ``teleport_pos`` is not equal to "
"``null`` and if ``teleport_mesh.visible`` is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:917
msgid ""
"If there is a teleport position set and the teleport mesh is visible, the "
"code then calculates the offset from the camera to the :ref:`ARVROrigin "
"<class_ARVROrigin>` node, which is assumed to be the parent node of the VR "
"controller. To calculate the offset, the global position (``global_transform."
"origin``) of the ``Player_Camera`` node has the global position of the :ref:"
"`ARVROrigin <class_ARVROrigin>` subtracted from it. This will result in a "
"vector that points from the :ref:`ARVROrigin <class_ARVROrigin>` to the :ref:"
"`ARVRCamera <class_ARVRCamera>`, which we store in a variable called "
"``camera_offset``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:921
msgid ""
"The reason we need to know the offset is because some VR headsets use room "
"tracking, where the player's camera can be offset from the :ref:`ARVROrigin "
"<class_ARVROrigin>` node. Because of this, when we teleport we want to keep "
"the offset created by room tracking so that when the player teleports, the "
"offset created by the room tracking is not applied. Without this, if you "
"moved in a room and then teleported, instead of appearing at the position "
"you wanted to teleport at, your position would be offset by the amount of "
"distance you have from the :ref:`ARVROrigin <class_ARVROrigin>` node."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:925
msgid ""
"Now that we know the offset from the VR camera to the VR origin, we need to "
"remove the difference on the ``Y`` axis. We do this because we do not want "
"to offset based on the user's height. If we did not do this, when "
"teleporting the player's head would be level with the ground."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:928
msgid ""
"Then we can 'teleport' the player by setting the global position "
"(``global_transform.origin``) of the ARVROrigin node to the position stored "
"in ``teleport_pos`` with ``camera_offset`` subtracted from it. This will "
"teleport the player and remove the room tracking offset, so the user appears "
"exactly where they want when teleporting."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:931
msgid ""
"Finally, regardless of whether the VR controller teleported the user or not, "
"we reset the teleport related variables. ``teleport_button_down`` is set to "
"``false``, ``teleport_mesh.visible`` is set to ``false`` so the mesh is "
"invisible, ``teleport_raycast.visible`` is set to ``false``, and "
"``teleport_pos`` is set to ``null``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:936
msgid "``sleep_area_entered`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:938
msgid ""
"The only section of code in this function checks to see if the :ref:"
"`PhysicsBody <class_PhysicsBody>` node that entered the ``Sleep_Area`` node "
"has a variable called ``can_sleep``. If it does, then it sets the "
"``can_sleep`` variable to ``false`` and sets the ``sleeping`` variable to "
"``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:941
msgid ""
"Without doing this, sleeping :ref:`PhysicsBody <class_PhysicsBody>` nodes "
"would not be able to be picked up by the VR controller, even if the VR "
"controller is at the same position as the :ref:`PhysicsBody "
"<class_PhysicsBody>` node. To work around this, we simply 'wake up' :ref:"
"`PhysicsBody <class_PhysicsBody>` nodes that are close to the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:947
msgid "``sleep_area_exited`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:949
msgid ""
"The only section of code in this function checks to see if the :ref:"
"`PhysicsBody <class_PhysicsBody>` node that entered the ``Sleep_Area`` node "
"has a variable called ``can_sleep``. If it does, then it sets the "
"``can_sleep`` variable to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:952
msgid ""
"This allows :ref:`RigidBody <class_RigidBody>` nodes that leave the "
"``Sleep_Area`` to sleep again, saving performance."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:956
msgid ""
"Okay, whew! That was a lot of code! Add the same script, ``VR_Controller."
"gd`` to the other VR controller scene so both VR controllers have the same "
"script."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:958
msgid ""
"Now we just need to do one thing before testing the project! Right now we "
"are referencing a class called ``VR_Interactable_Rigidbody``, but we have "
"not defined it yet. While we will not be using ``VR_Interactable_Rigidbody`` "
"in this tutorial, let's create it real quick so the project can be run."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:964
msgid "Creating a base class for interactable VR objects"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:966
msgid ""
"With the ``Script`` tab still open, create a new GDScript called "
"``VR_Interactable_Rigidbody.gd``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:968
msgid ""
"You can create GDScripts in the ``Script`` tab by pressing ``File -> New "
"Script...``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:970
msgid ""
"Once you have ``VR_Interactable_Rigidbody.gd`` open, add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:999
msgid "Let's quickly go through what this script."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1003
msgid ""
"First we start the script with ``class_name VR_Interactable_Rigidbody``. "
"What this does is that it tells Godot that this GDScript is a new class that "
"called ``VR_Interactable_Rigidbody``. This allows us to compare nodes "
"against the ``VR_Interactable_Rigidbody`` class in other script files "
"without having to load the script directly or do anything special. We can "
"compare the class just like all of the built-in Godot classes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1007
msgid ""
"Next is a class variable called ``controller``. ``controller`` will be used "
"to hold a reference to the VR controller that is currently holding the "
"object. If a VR controller is not holding the object, then the "
"``controller`` variable will be ``null``. The reason we need to have a "
"reference to the VR controller is so held objects can access VR controller "
"specific data, like ``controller_velocity``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1011
msgid ""
"Finally, we have four functions. The ``_ready`` function is defined by Godot "
"and all we do is simply have ``pass`` as there is nothing we need to do when "
"the object is added to the scene in ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1014
msgid ""
"The ``interact`` function is a stub function that will be called when the "
"interact button on the VR controller, the trigger in this case, is pressed "
"while the object is held."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1016
msgid ""
"A stub function is a function that is defined but does not have any code. "
"Stub functions are generally designed to be overwritten or extended. In this "
"project, we are using the stub functions so there is a consistent interface "
"across all interactable :ref:`RigidBody <class_RigidBody>` objects."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1019
msgid ""
"The ``picked_up`` and ``dropped`` functions are stub functions that will be "
"called when the object is picked up and dropped by the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1023
msgid ""
"That is all we need to do for now! In the next part of this tutorial series, "
"we'll start making special interactable :ref:`RigidBody <class_RigidBody>` "
"objects."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1025
msgid ""
"Now that the base class is defined, the code in the VR controller should "
"work. Go ahead and try the game again, and you should find you can teleport "
"around by pressing the touch pad, and can grab and throw objects using the "
"grab/grip buttons."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1028
msgid ""
"Now, you may want to try moving using the trackpads and/or joysticks, but "
"**it may make you motion sick!**"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1030
msgid ""
"One of the main reasons this can make you feel motion sick is because your "
"vision tells you that you are moving, while your body is not moving. This "
"conflict of signals can make the body feel sick. Let's add a vignette shader "
"to help reduce motion sickness while moving in VR!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1036
msgid "Reducing motion sickness"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1038
msgid ""
"There are plenty of ways to reduce motion sickness in VR, and there is no "
"one perfect way to reduce motion sickness. See `this page on the Oculus "
"Developer Center <https://developer.oculus.com/design/latest/concepts/bp-"
"locomotion/>`__ for more information on how to implement locomotion and "
"reducing motion sickness."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1042
msgid ""
"To help reduce motion sickness while moving, we are going to add a vignette "
"effect that will only be visible while the player moves."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1044
msgid ""
"First, quickly switch back to ``Game.tscn``. Under the :ref:`ARVROrigin "
"<class_ARVROrigin>` node there is a child node called ``Movement_Vignette``. "
"This node is going to apply a simple vignette to the VR headset when the "
"player is moving using the VR controllers. This should help reduce motion "
"sickness."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1047
msgid ""
"Open up ``Movement_Vignette.tscn``, which you can find in the ``Scenes`` "
"folder. The scene is just a :ref:`ColorRect <class_ColorRect>` node with a "
"custom shader. Feel free to look at the custom shader if you want, it is "
"just a slightly modified version of the vignette shader you can find in the "
"`Godot demo repository <https://github.com/godotengine/godot-demo-"
"projects>`__."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1051
msgid ""
"Let's write the code that will make the vignette shader visible when the "
"player is moving. Select the ``Movement_Vignette`` node and create a new "
"script called ``Movement_Vignette.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1094
msgid ""
"Because this script is fairly brief, let's quickly go over what it does."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1098
msgid "Explaining the vignette code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1100
msgid ""
"There are two class variables, ``controller_one`` and ``controller_two``. "
"These variables will hold references to the left and right VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1104
msgid ""
"In the ``_ready`` function first waits for four frames using ``yield``. The "
"reason we are waiting four frames is because we want to ensure the VR "
"interface is ready and accessible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1107
msgid ""
"After waiting the primary VR interface is retrieved using ``ARVRServer."
"primary_interface``, which is assigned to a variable called ``interface``. "
"The code then checks to see if ``interface`` is equal to ``null``. If "
"``interface`` is equal to ``null``, then ``_process`` is disabled using "
"``set_process`` with a value of ``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1110
msgid ""
"If ``interface`` is not ``null``, then we set the ``rect_size`` of the "
"vignette shader to the render size of the VR viewport so it takes up the "
"entire screen. We need to do this because different VR headsets have "
"different resolutions and aspect ratios, so we need to resize the node "
"accordingly. We also set the ``rect_position`` of the vignette shader to "
"zero so it is in the correct position relative to the screen."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1114
msgid ""
"The left and right VR controllers are then retrieved and assigned to "
"``controller_one`` and ``controller_two`` respectively. Finally, the "
"vignette shader is made invisible by default by setting it's ``visible`` "
"property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1119
msgid ""
"In ``_process`` the code first checks if either ``controller_one`` or "
"``controller_two`` are equal to ``null``. If either node is equal to "
"``null``, then ``return`` is called so nothing happens."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1122
msgid ""
"Then the code checks to see if either of the VR controllers are moving the "
"player using the touchpad/joystick by checking if ``directional_movement`` "
"is equal to ``true`` in ``controller_one`` or ``controller_two``. If either "
"of the VR controllers are moving the player, then the vignette shader makes "
"itself visible by setting it's ``visible`` property to ``true``. If neither "
"VR controller is moving the player, so ``directional_movement`` is ``false`` "
"in both VR controllers, than the vignette shader makes itself invisible by "
"setting it's ``visible`` property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1129
msgid ""
"That is the whole script! Now that we have written the code, go ahead and "
"try moving around with the trackpad and/or joystick. You should find that it "
"is less motion sickness-inducing then before!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1132
msgid ""
"As previously mentioned, there are plenty of ways to reduce motion sickness "
"in VR. Check out `this page on the Oculus Developer Center <https://"
"developer.oculus.com/design/latest/concepts/bp-locomotion/>`__ for more "
"information on how to implement locomotion and reducing motion sickness."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1139
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1025
msgid "Final notes"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1143
msgid ""
"Now you have fully working VR controllers that can move around the "
"environment and interact with :ref:`RigidBody <class_RigidBody>`-based "
"objects. In the next part of this tutorial series, we will be creating some "
"special :ref:`RigidBody <class_RigidBody>`-based objects for the player to "
"use!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_one.rst:1146
msgid ""
"You can download the finished project for this tutorial series on the Godot "
"OpenVR GitHub repository, under the releases tab!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:4
msgid "VR starter tutorial part 2"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:11
msgid ""
"In this part of the VR starter tutorial series, we will be adding a number "
"of special :ref:`RigidBody <class_RigidBody>`-based nodes that can be used "
"in VR."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:13
msgid ""
"This continues from where we left on in the last tutorial part, where we "
"just finished getting the VR controllers working and defined a custom class "
"called ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:20
msgid "Adding destroyable targets"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:22
msgid ""
"Before we make any of the special :ref:`RigidBody <class_RigidBody>`-based "
"nodes, we need something for them to do. Let's make a simple sphere target "
"that will break into a bunch of pieces when destroyed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:25
msgid ""
"Open up ``Sphere_Target.tscn``, which is in the ``Scenes`` folder. The scene "
"is fairly simple, with just a :ref:`StaticBody <class_StaticBody>` with a "
"sphere shaped :ref:`CollisionShape <class_CollisionShape>`, a :ref:"
"`MeshInstance <class_MeshInstance>` node displaying a sphere mesh, and an :"
"ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:28
msgid ""
"The special :ref:`RigidBody <class_RigidBody>` nodes will handle damaging "
"the sphere, which is why we are using a :ref:`StaticBody <class_StaticBody>` "
"node instead of something like an :ref:`Area <class_Area>` or :ref:"
"`RigidBody <class_RigidBody>` node. Outside of that, there isn't really a "
"lot to talk about, so let's move straight into writing the code."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:31
msgid ""
"Select the ``Sphere_Target_Root`` node and make a new script called "
"``Sphere_Target.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:79
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:263
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:658
msgid "Let's go over how this script works."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:82
msgid "Explaining the Sphere Target code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:86
msgid ""
"``destroyed``: A variable to track whether the sphere target has been "
"destroyed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:87
msgid ""
"``destroyed_timer``: A variable to track how long the sphere target has been "
"destroyed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:88
msgid ""
"``DESTROY_WAIT_TIME``: A constant to define the length of time the target "
"can be destroyed for before it frees/deletes itself."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:89
msgid ""
"``health``: A variable to store the amount of health the sphere target has."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:90
msgid ""
"``RIGID_BODY_TARGET``: A constant to hold the scene of the destroyed sphere "
"target."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:92
msgid ""
"Feel free to check out the ``RIGID_BODY_TARGET`` scene. It is just a bunch "
"of :ref:`RigidBody <class_RigidBody>` nodes and a broken sphere model."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:94
msgid ""
"We'll be instancing this scene so when the target is destroyed, it looks "
"like it broke into a bunch of pieces."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:100
msgid ""
"All the ``_ready`` function does is that it stops the ``_physics_process`` "
"from being called by calling ``set_physics_process`` and passing ``false``. "
"The reason we do this is because all the code in ``_physics_process`` is for "
"destroying this node when enough time has passed, which we only want to do "
"when the target has been destroyed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:108
msgid ""
"First this function adds time, ``delta``, to the ``destroyed_timer`` "
"variable. It then checks to see if ``destroyed_timer`` is greater than or "
"equal to ``DESTROY_WAIT_TIME``. If ``destroyed_timer`` is greater than or "
"equal to ``DESTROY_WAIT_TIME``, then the sphere target frees/deletes itself "
"by calling the ``queue_free`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:113
msgid "``damage`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:115
msgid ""
"The ``damage`` function will be called by the special :ref:`RigidBody "
"<class_RigidBody>` nodes, which will pass the amount of damage done to the "
"target, which is a function argument variable called ``damage``. The "
"``damage`` variable will hold the amount of damage the special :ref:"
"`RigidBody <class_RigidBody>` node did to the sphere target."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:118
msgid ""
"First this function checks to make sure the target is not already destroyed "
"by checking if the ``destroyed`` variable is equal to ``true``. If "
"``destroyed`` is equal to ``true``, then the function calls ``return`` so "
"none of the other code is called. This is just a safety check so that if two "
"things damage the target at exactly the same time, the target cannot be "
"destroyed twice."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:122
msgid ""
"Next the function removes the amount of damage taken, ``damage``, from the "
"target's health, ``health``. If then checks to see if ``health`` is equal to "
"zero or less, meaning that the target has just been destroyed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:125
msgid ""
"If the target has just been destroyed, then we disable the :ref:"
"`CollisionShape <class_CollisionShape>` by setting it's ``disabled`` "
"property to ``true``. We then make the ``Sphere_Target`` :ref:`MeshInstance "
"<class_MeshInstance>` invisible by setting the ``visible`` property to "
"``false``. We do this so the target can no longer effect the physics world "
"and so the non-broken target mesh is not visible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:128
msgid ""
"After this the function then instances the ``RIGID_BODY_TARGET`` scene and "
"adds it as a child of the target. It then sets the ``global_transform`` of "
"the newly instanced scene, called ``clone``, to the ``global_transform`` of "
"the non-broken target. This makes it where the broken target starts at the "
"same position as the non-broken target with the same rotation and scale."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:131
msgid ""
"Then the function sets the ``destroyed`` variable to ``true`` so the target "
"knows it has been destroyed and calls the ``set_physics_process`` function "
"and passes ``true``. This will start executing the code in "
"``_physics_process`` so that after ``DESTROY_WAIT_TIME`` seconds have "
"passed, the sphere target will free/destroy itself."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:134
msgid ""
"The function then gets the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node and calls the ``play`` function so it "
"plays its sound."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:136
msgid ""
"Finally, the ``remove_sphere`` function is called in ``Game.gd``. To get "
"``Game.gd``, the code uses the scene tree and works its way from the root of "
"the scene tree to the root of the ``Game.tscn`` scene."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:141
msgid "Adding the ``remove_sphere`` function to ``Game.gd``"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:143
msgid ""
"You may have noticed we are calling a function in ``Game.gd``, called "
"``remove_sphere``, that we have not defined yet. Open up ``Game.gd`` and add "
"the following additional class variables:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:152
msgid ""
"``spheres_left``: The amount of sphere targets left in the world. In the "
"provided ``Game`` scene, there are ``10`` spheres, so that is the initial "
"value."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:153
msgid ""
"``sphere_ui``: A reference to the sphere UI. We will use this later in the "
"tutorial to display the amount of spheres left in the world."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:155
msgid ""
"With these variables defined, we can now add the ``remove_sphere`` function. "
"Add the following code to ``Game.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:167
msgid "Let's go through what this function does real quick:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:169
msgid ""
"First, it removes one from the ``spheres_left`` variable. It then checks to "
"see if the ``sphere_ui`` variable is not equal to ``null``, and if it is not "
"equal to ``null`` it calls the ``update_ui`` function on ``sphere_ui``, "
"passing in the number of spheres as an argument to the function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:172
msgid "We will add the code for ``sphere_ui`` later in this tutorial!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:174
msgid ""
"Now the ``Sphere_Target`` is ready to be used, but we don't have any way to "
"destroy it. Let's fix that by adding some special :ref:`RigidBody "
"<class_RigidBody>`-based nodes that can damage the targets."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:179
msgid "Adding a pistol"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:181
msgid ""
"Let's add a pistol as the first interactable :ref:`RigidBody "
"<class_RigidBody>` node. Open up ``Pistol.tscn``, which you can find in the "
"``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:183
msgid ""
"Let's quickly go over a few things of note in ``Pistol.tscn`` real quick "
"before we add the code."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:185
msgid ""
"All of the nodes in ``Pistol.tscn`` expect the root node are rotated. This "
"is so the pistol is in the correct rotation relative to the VR controller "
"when it is picked up. The root node is a :ref:`RigidBody <class_RigidBody>` "
"node, which we need because we're going to use the "
"``VR_Interactable_Rigidbody`` class we created in the last part of this "
"tutorial series."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:188
msgid ""
"There is a :ref:`MeshInstance <class_MeshInstance>` node called "
"``Pistol_Flash``, which is a simple mesh that we will be using to simulate "
"the muzzle flash on the end of the pistol's barrel. A :ref:`MeshInstance "
"<class_MeshInstance>` node called ``LaserSight`` is used to as a guide for "
"aiming the pistol, and it follows the direction of the :ref:`Raycast "
"<class_Raycast>` node, called ``Raycast``, that the pistol uses to detect if "
"its 'bullet' hit something. Finally, there is an :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node at the end of the pistol that we will use "
"to play the sound of the pistol firing."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:193
msgid ""
"Feel free to look at the other parts of the scene if you want. Most of the "
"scene is fairly straightforward, with the major changes mentioned above. "
"Select the :ref:`RigidBody <class_RigidBody>` node called ``Pistol`` and "
"make a new script called ``Pistol.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:267
msgid "Explaining the pistol code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:269
msgid ""
"First, notice how instead of ``extends RigidBody``, we instead have "
"``extends VR_Interactable_Rigidbody``. This makes it where the pistol script "
"extends the ``VR_Interactable_Rigidbody`` class so the VR controllers know "
"this object can be interacted with and that the functions defined in "
"``VR_Interactable_Rigidbody`` can be called when this object is held by a VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:273
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:667
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:849
msgid "Next, let's look at the class variables:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:275
msgid ""
"``flash_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that is used to simulate muzzle flash on the "
"pistol."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:276
msgid ""
"``FLASH_TIME``: A constant to define how long the muzzle flash will be "
"visible. This will also define how fast the pistol can fire."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:277
msgid ""
"``flash_timer``: A variable to hold the amount of time the muzzle flash has "
"been visible for."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:278
msgid ""
"``laser_sight_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that acts as the pistol's 'laser sight'."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:279
msgid ""
"``pistol_fire_sound``: A variable to hold the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node used for the pistol's firing sound."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:280
msgid ""
"``raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node that "
"is used for calculating the bullet's position and normal when the pistol is "
"fired."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:281
msgid ""
"``BULLET_DAMAGE``: A constant to define the amount of damage a single bullet "
"from the pistol does."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:282
msgid ""
"``COLLISION_FORCE``: A constant that defines the amount of force that is "
"applied to :ref:`RigidBody <class_RigidBody>` nodes when the pistol's bullet "
"collides."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:288
msgid ""
"This function gets the nodes and assigns them to their proper variables. For "
"the ``flash_mesh`` and ``laser_sight_mesh`` nodes, both have their "
"``visible`` property set to ``false`` so they are not visible initially."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:294
msgid ""
"The ``_physics_process`` function first checks to see if the pistol's muzzle "
"flash is visible by checking if ``flash_timer`` is more than zero. If "
"``flash_timer`` is more than zero, then we remove time, ``delta`` from it. "
"Next we check if the ``flash_timer`` variable is zero or less now that we "
"removed ``delta`` from it. If it is, then the pistol muzzle flash timer just "
"finished and so we need to make ``flash_mesh`` invisible by setting it's "
"``visible`` property to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:299
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:473
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:760
msgid "``interact`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:301
msgid ""
"The interact function first checks to see if the pistol's muzzle flash is "
"invisible by checking to see if ``flash_timer`` is less than or equal to "
"zero. We do this so we can limit the rate of fire of the pistol to the "
"length of time the muzzle flash is visible, which is a simple solution for "
"limiting how fast the player can fire."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:304
msgid ""
"If ``flash_timer`` is zero or less, we then set ``flash_timer`` to "
"``FLASH_TIME`` so there is a delay before the pistol can fire again. After "
"that we set ``flash_mesh.visible`` to ``true`` so the muzzle flash at the "
"end of the pistol is visible while ``flash_timer`` is more than zero."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:307
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:481
msgid ""
"Next we call the ``force_raycast_update`` function on the :ref:`Raycast "
"<class_Raycast>` node in ``raycast`` so that it gets the latest collision "
"info from the physics world. We then check if the ``raycast`` hit something "
"by checking if the ``is_colliding`` function is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:312
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:501
msgid ""
"If the ``raycast`` hit something, then we get the :ref:`PhysicsBody "
"<class_PhysicsBody>` it collided with through the ``get_collider`` function. "
"We assign the hit :ref:`PhysicsBody <class_PhysicsBody>` to a variable "
"called ``body``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:315
msgid ""
"We then get the direction of the :ref:`Raycast <class_Raycast>` by getting "
"it's positive ``Z`` directional axis from the :ref:`Basis <class_Basis>` on "
"the ``raycast`` node's ``global_transform``. This will give us the direction "
"the raycast is pointing on the Z axis, which is the same direction as the "
"blue arrow on the :ref:`Spatial <class_Spatial>` gizmo when ``Local space "
"mode`` is enabled in the Godot editor. We store this direction in a variable "
"called ``direction_vector``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:319
msgid ""
"Next we get the distance from the :ref:`Raycast <class_Raycast>` origin to "
"the :ref:`Raycast <class_Raycast>` collision point by getting the distance "
"from the global position, ``global_transform.origin`` of the ``raycast`` "
"node to the collision point of the :ref:`Raycast <class_Raycast>`, ``raycast."
"get_collision_point``, using the ``distance_to`` function. This will give us "
"the distance the :ref:`Raycast <class_Raycast>` traveled before it collided, "
"which we store in a variable called ``raycast_distance``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:323
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:512
msgid ""
"Then the code checks if the :ref:`PhysicsBody <class_PhysicsBody>`, "
"``body``, has a function/method called ``damage`` using the ``has_method`` "
"function. If the :ref:`PhysicsBody <class_PhysicsBody>` has a function/"
"method called ``damage``, then we call the ``damage`` function and pass "
"``BULLET_DAMAGE`` so it takes damage from the bullet colliding into it."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:326
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:515
msgid ""
"Regardless of whether the :ref:`PhysicsBody <class_PhysicsBody>` has a "
"``damage`` function, we then check to see if ``body`` is a :ref:`RigidBody "
"<class_RigidBody>`-based node. If ``body`` is a :ref:`RigidBody "
"<class_RigidBody>`-based node, then we want to push it when the bullet "
"collides."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:329
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:518
msgid ""
"To calculate the amount of force applied, we simply take ``COLLISION_FORCE`` "
"and divide it by ``raycast_distance``, then we multiply the whole thing by "
"``body.mass``. We store this calculation in a variable called "
"``collision_force``. This will make collisions over a shorter distance apply "
"move force than those over longer distances, giving a *slightly* more "
"realistic collision response."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:332
#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:521
msgid ""
"We then push the :ref:`RigidBody <class_RigidBody>` using the "
"``apply_impulse`` function, where the position is a zero Vector3 so the "
"force is applied from the center, and the collision force is the "
"``collision_force`` variable we calculated."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:336
msgid ""
"Regardless of whether the ``raycast`` variable hit something or not, we then "
"play the pistol shot sound by calling the ``play`` function on the "
"``pistol_fire_sound`` variable."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:338
msgid ""
"Finally, we check to see if the pistol is being held by a VR controller by "
"checking to see if the ``controller`` variable is not equal to ``null``. If "
"it is not equal to ``null``, we then set the ``rumble`` property of the VR "
"controller to ``0.25``, so there is a slight rumble when the pistol fires."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:343
msgid "``picked_up`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:345
msgid ""
"This function simply makes the ``laser_sight_mesh`` :ref:`MeshInstance "
"<class_MeshInstance>` visible by setting the ``visible`` property to "
"``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:348
msgid "``dropped`` function step-by-step explanation"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:350
msgid ""
"This function simply makes the ``laser_sight_mesh`` :ref:`MeshInstance "
"<class_MeshInstance>` invisible by setting the ``visible`` property to "
"``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:354
msgid "Pistol finished"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:359
msgid ""
"That is all we need to do to have working pistols in the project! Go ahead "
"and run the project. If you climb up the stairs and grab the pistols, you "
"can fire them at the sphere targets in the scene using the trigger button on "
"the VR controller! If you fire at the targets long enough, they will break "
"into pieces."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:365
msgid "Adding a shotgun"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:367
msgid "Next let's add a shotgun to the VR project."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:369
msgid ""
"Adding a special shotgun :ref:`RigidBody <class_RigidBody>` should be fairly "
"straightforward, as almost everything with the shotgun is the same as the "
"pistol."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:371
msgid ""
"Open up ``Shotgun.tscn``, which you can find in the ``Scenes`` folder and "
"take a look at the scene. Almost everything is the same as in ``Pistol."
"tscn``. The only thing that is different, beyond name changes, is that "
"instead of a single :ref:`Raycast <class_Raycast>`, there are five :ref:"
"`Raycast <class_Raycast>` nodes. This is because a shotgun generally fires "
"in a cone shape, so we are going to emulate that effect by having several :"
"ref:`Raycast <class_Raycast>` nodes that will rotate randomly in a cone "
"shape when the shotgun fires."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:376
msgid ""
"Outside of that, everything is more or less the same as ``Pistol.tscn``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:378
msgid ""
"Let's write the code for the shotgun. Select the :ref:`RigidBody "
"<class_RigidBody>` node called ``Shotgun`` and make a new script called "
"``Shotgun.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:456
msgid ""
"The majority of this code is exactly the same as the code for the pistol "
"with just a few *minor* changes that are primarily just different names. Due "
"to how similar these scripts are, let's just focus on the changes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:460
msgid "Explaining the shotgun code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:462
msgid ""
"Like with the pistol, the shotgun extends ``VR_Interactable_Rigidbody`` so "
"the VR controllers know that this object can be interacted with and what "
"functions are available."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:465
msgid "There is only one new class variable:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:467
msgid ""
"``raycasts``: A variable to hold the node that has all of the :ref:`Raycast "
"<class_Raycast>` nodes as its children."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:469
msgid ""
"The new class variable replaces the ``raycast`` variable from ``Pistol.gd``, "
"because with the shotgun we need to process multiple :ref:`Raycast "
"<class_Raycast>` nodes instead of just one. All of the other class variables "
"are the same as ``Pistol.gd`` and function the same way, some just are "
"renamed to be non-pistol specific."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:475
msgid ""
"The interact function first checks to see if the shotgun's muzzle flash is "
"invisible by checking to see if ``flash_timer`` is less than or equal to "
"zero. We do this so we can limit the rate of fire of the shotgun to the "
"length of time the muzzle flash is visible, which is a simple solution for "
"limiting how fast the player can fire."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:478
msgid ""
"If ``flash_timer`` is zero or less, we then set ``flash_timer`` to "
"``FLASH_TIME`` so there is a delay before the shotgun can fire again. After "
"that we set ``flash_mesh.visible`` to ``true`` so the muzzle flash at the "
"end of the shotgun is visible while ``flash_timer`` is more than zero."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:484
msgid ""
"Next we go through each of the child nodes of the ``raycasts`` variable "
"using a for loop. This way the code will go through each of the :ref:"
"`Raycast <class_Raycast>` nodes that are children of the ``raycasts`` "
"variable."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:489
msgid ""
"For each node, we check to see if ``raycast`` is *not* a :ref:`Raycast "
"<class_Raycast>` node. If the node is not a :ref:`Raycast <class_Raycast>` "
"node, we simply use ``continue`` to skip it."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:491
msgid ""
"Next we rotate the ``raycast`` node randomly around a small ``10`` degrees "
"cone by settings the ``rotation_degrees`` variable of the ``raycast`` to a "
"Vector3 where the X and Z axis are a random number from ``-10`` to ``10``. "
"This random number is selected using the ``rand_range`` function."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:494
msgid ""
"Then we call the ``force_raycast_update`` function on the :ref:`Raycast "
"<class_Raycast>` node in ``raycast`` so that it gets the latest collision "
"info from the physics world. We then check if the ``raycast`` hit something "
"by checking if the ``is_colliding`` function is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:497
msgid ""
"The rest of the code is exactly the same, but this process is repeated for "
"each :ref:`Raycast <class_Raycast>` node that is a child of the ``raycasts`` "
"variable."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:504
msgid ""
"We then get the direction of the raycast by getting it's positive ``Z`` "
"directional axis from the :ref:`Basis <class_Basis>` on the ``raycast`` "
"node's ``global_transform``. This will give us the direction the raycast is "
"pointing on the Z axis, which is the same direction as the blue arrow on "
"the :ref:`Spatial <class_Spatial>` gizmo when ``Local space mode`` is "
"enabled in the Godot editor. We store this direction in a variable called "
"``direction_vector``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:508
msgid ""
"Next we get the distance from the raycast origin to the raycast collision "
"point by getting the distance from the global position, ``global_transform."
"origin`` of the ``raycast`` node to the collision point of the raycast, "
"``raycast.get_collision_point``, using the ``distance_to`` function. This "
"will give us the distance the :ref:`Raycast <class_Raycast>` traveled before "
"it collided, which we store in a variable called ``raycast_distance``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:526
msgid ""
"Once all of the :ref:`Raycast <class_Raycast>`\\s in the ``raycast`` "
"variable have been iterated over, we then play the shotgun shot sound by "
"calling the ``play`` function on the ``shotgun_fire_sound`` variable."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:528
msgid ""
"Finally, we check to see if the shotgun is being held by a VR controller by "
"checking to see if the ``controller`` variable is not equal to ``null``. If "
"it is not equal to ``null``, we then set the ``rumble`` property of the VR "
"controller to ``0.25``, so there is a slight rumble when the shotgun fires."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:532
msgid "Shotgun finished"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:534
msgid ""
"Everything else is exactly the same as the pistol, with at most just some "
"simple name changes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:536
msgid ""
"Now the shotgun is finished! You can find the shotgun in the sample scene by "
"looking around the back of one of the walls (not in the building though!)."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:541
msgid "Adding a bomb"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:543
msgid ""
"Okay, let's add a different special :ref:`RigidBody <class_RigidBody>`. "
"Instead of adding something that shoots, let's add something we can throw - "
"a bomb!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:545
msgid "Open up ``Bomb.tscn``, which is in the ``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:547
msgid ""
"The root node is a :ref:`RigidBody <class_RigidBody>` node that we'll be "
"extending to use ``VR_Interactable_Rigidbody``, which has a :ref:"
"`CollisionShape <class_CollisionShape>` like the other special :ref:"
"`RigidBody <class_RigidBody>` nodes we've made so far. Likewise, there is a :"
"ref:`MeshInstance <class_MeshInstance>` called ``Bomb`` that is used to "
"display the mesh for the bomb."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:551
msgid ""
"Then we have an :ref:`Area <class_Area>` node simply called ``Area`` that "
"has a large :ref:`CollisionShape <class_CollisionShape>` as its child. We'll "
"use this :ref:`Area <class_Area>` node to effect anything within it when the "
"bomb explodes. Essentially, this :ref:`Area <class_Area>` node will be the "
"blast radius for the bomb."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:554
msgid ""
"There is also a couple :ref:`Particles <class_Particles>` nodes. One of the :"
"ref:`Particles <class_Particles>` nodes are for the smoke coming out of the "
"bomb's fuse, while another is for the explosion. You can take a look at the :"
"ref:`ParticlesMaterial <class_ParticlesMaterial>` resources, which define "
"how the particles work, if you want. We will not be covering how the "
"particles work in this tutorial due to it being outside of the scope of this "
"tutorial."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:558
msgid ""
"There is one thing with the :ref:`Particles <class_Particles>` nodes that we "
"need to make note of. If you select the ``Explosion_Particles`` node, you'll "
"find that its ``lifetime`` property is set to ``0.75`` and that the ``one "
"shot`` checkbox is enabled. This means that the particles will only play "
"once, and the particles will last for ``0.75`` seconds. We'll need to know "
"this so we can time the removal of the bomb with the end of the explosion :"
"ref:`Particles <class_Particles>`."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:562
msgid ""
"Let's write the code for the bomb. Select the ``Bomb`` :ref:`RigidBody "
"<class_RigidBody>` node and make a new script called ``Bomb.gd``. Add the "
"following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:662
msgid "Explaining the bomb code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:664
msgid ""
"Like with the other special :ref:`RigidBody <class_RigidBody>` nodes, the "
"bomb extends ``VR_Interactable_Rigidbody`` so the VR controllers know this "
"object can be interacted with and that the functions defined defined in "
"``VR_Interactable_Rigidbody`` can be called when this object is held by a VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:669
msgid ""
"``bomb_mesh``: A variable to hold the :ref:`MeshInstance "
"<class_MeshInstance>` node that is used for the non-exploded bomb."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:670
msgid ""
"``FUSE_TIME``: A constant to define how long the fuse will 'burn' before the "
"bomb explodes"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:671
msgid ""
"``fuse_timer``: A variable to hold the length of time that has passed since "
"the bomb's fuse has started to burn."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:672
msgid ""
"``explosion_area``: A variable to hold the :ref:`Area <class_Area>` node "
"used to detect objects within the bomb's explosion."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:673
msgid ""
"``EXPLOSION_DAMAGE``: A constant to define how much damage is applied with "
"the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:674
msgid ""
"``EXPLOSION_TIME``: A constant to define how long the bomb will last in the "
"scene after it explodes. This value should be the same as the ``lifetime`` "
"property of the explosion :ref:`Particles <class_Particles>` node."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:675
msgid ""
"``explosion_timer`` A variable to hold the length of time that has passed "
"since the bomb exploded."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:676
msgid "``exploded``: A variable to hold whether the bomb has exploded or not."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:677
msgid ""
"``COLLISION_FORCE``: A constant that defines the amount of force that is "
"applied to :ref:`RigidBody <class_RigidBody>` nodes when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:678
msgid ""
"``fuse_particles``: A variable to hold a reference to the :ref:`Particles "
"<class_Particles>` node used for the bomb's fuse."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:679
msgid ""
"``explosion_particles``: A variable to hold a reference to the :ref:"
"`Particles <class_Particles>` node used for the bomb's explosion."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:680
msgid ""
"``explosion_sound``: A variable to hold a reference to the :ref:"
"`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node used for the "
"explosion sound."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:686
msgid ""
"The ``_ready`` function first gets all of the nodes from the bomb scene and "
"assigns them to their respective class variables for later use."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:688
msgid ""
"Then we call ``set_physics_process`` and pass ``false`` so "
"``_physics_process`` is not executed. We do this because the code in "
"``_physics_process`` will start burning the fuse and exploding the bomb, "
"which we only want to do when the user interacts with the bomb. If we did "
"not disable ``_physics_process``, the bomb's fuse would start before the "
"user has a chance to get to the bomb."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:696
msgid ""
"The ``_physics_process`` function first checks to see if ``fuse_timer`` is "
"less than ``FUSE_TIME``. If it is, then the bomb's fuse is still burning."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:698
msgid ""
"If the bomb's fuse is still burning, we then add time, ``delta``, to the "
"``fuse_timer`` variable. We then check to see if ``fuse_timer`` is more than "
"or equal to ``FUSE_TIME`` now that we have added ``delta`` to it. If "
"``fuse_timer`` is more than or equal to ``FUSE_TIME``, then the fuse has "
"just finished and we need to explode the bomb."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:701
msgid ""
"To explode the bomb, we first stop emitting particles for the fuse by "
"setting ``emitting`` to ``false`` on ``fuse_particles``. We then tell the "
"explosion :ref:`Particles <class_Particles>` node, ``explosion_particles``, "
"to emit all of its particle in a single shot by setting ``one_shot`` to "
"``true``. After that, we set ``emitting`` to ``true`` on "
"``explosion_particles`` so it looks like the bomb has exploded. To help make "
"it look like the bomb exploded, we hide the bomb :ref:`MeshInstance "
"<class_MeshInstance>` node by setting ``bomb_mesh.visible`` to ``false``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:705
msgid ""
"To keep the bomb from colliding with other objects in the physics world, we "
"set the ``collision_layer`` and ``collision_mask`` properties of the bomb to "
"``0``. We also change the :ref:`RigidBody <class_RigidBody>` mode to "
"``MODE_STATIC`` so the bomb :ref:`RigidBody <class_RigidBody>` does not move."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:708
msgid ""
"Then we need to get all of the :ref:`PhysicsBody <class_PhysicsBody>` nodes "
"within the ``explosion_area`` node. To do this, we use the "
"``get_overlapping_bodies`` in a for loop. The ``get_overlapping_bodies`` "
"function will return an array of :ref:`PhysicsBody <class_PhysicsBody>` "
"nodes within the :ref:`Area <class_Area>` node, which is exactly what we are "
"looking for."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:713
msgid ""
"For each :ref:`PhysicsBody <class_PhysicsBody>` node, which we store in a "
"variable called ``body``, we check to see if it is equal to ``self``. We do "
"this so the bomb does not accidentally explode itself, as the "
"``explosion_area`` could potentially detect the ``Bomb`` :ref:`RigidBody "
"<class_RigidBody>` as a PhysicsBody within the explosion area."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:716
msgid ""
"If the :ref:`PhysicsBody <class_PhysicsBody>` node, ``body``, is not the "
"bomb, then we first check to see if the :ref:`PhysicsBody "
"<class_PhysicsBody>` node has a function called ``damage``. If the :ref:"
"`PhysicsBody <class_PhysicsBody>` node has a function called ``damage``, we "
"call it and pass ``EXPLOSION_DAMAGE`` to it so it takes damage from the "
"explosion."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:719
msgid ""
"Next we check to see if the :ref:`PhysicsBody <class_PhysicsBody>` node is "
"a :ref:`RigidBody <class_RigidBody>`. If ``body`` is a :ref:`RigidBody "
"<class_RigidBody>`, we want to move it when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:722
msgid ""
"To move the :ref:`RigidBody <class_RigidBody>` node when the bomb explodes, "
"we first need to calculate the direction from the bomb to the :ref:"
"`RigidBody <class_RigidBody>` node. To do this we subtract the global "
"position of the bomb, ``global_transform.origin`` from the global position "
"of the :ref:`RigidBody <class_RigidBody>`. This will give us a :ref:`Vector3 "
"<class_Vector3>` that points from the bomb to the :ref:`RigidBody "
"<class_RigidBody>` node. We store this :ref:`Vector3 <class_Vector3>` in a "
"variable called ``direction_vector``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:726
msgid ""
"We then calculate the distance the :ref:`RigidBody <class_RigidBody>` is "
"from the bomb by using the ``length`` function on ``direction_vector``. We "
"store the distance in a variable called ``bomb_distance``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:729
msgid ""
"We then calculate the amount of force the bomb will be applied to the :ref:"
"`RigidBody <class_RigidBody>` node when the bomb explodes by dividing "
"``COLLISION_FORCE`` by ``bomb_distance``, and multiplying that by "
"``collision_force``. This will make it so if the :ref:`RigidBody "
"<class_RigidBody>` node is closer to the bomb, it will be pushed farther."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:732
msgid ""
"Finally, we push the :ref:`RigidBody <class_RigidBody>` node using the "
"``apply_impulse`` function, with a :ref:`Vector3 <class_Vector3>` position "
"of zero and ``collision_force`` multiplied by ``direction_vector."
"normalized`` as the force. This will send the :ref:`RigidBody "
"<class_RigidBody>` node flying when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:737
msgid ""
"After we have looped through all of the :ref:`PhysicsBody "
"<class_PhysicsBody>` nodes within the ``explosion_area``, we set the "
"``exploded`` variable to ``true`` so the code knows the bomb exploded and "
"call ``play`` on ``explosion_sound`` so the sound of an explosion is played."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:742
msgid ""
"Alright, the next section of code starts by first checking if ``exploded`` "
"is equal to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:744
msgid ""
"If ``exploded`` is equal to ``true``, then that means the bomb is waiting "
"for the explosion particles to finish before it frees/destroys itself. We "
"add time, ``delta``, to ``explosion_timer`` so we can track how long it has "
"been since the bomb has exploded."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:747
msgid ""
"If ``explosion_timer`` is greater than or equal to ``EXPLOSION_TIME`` after "
"we added ``delta``, then the explosion timer just finished."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:749
msgid ""
"If the explosion timer just finished, we set ``explosion_area.monitoring`` "
"to ``false``. The reason we do this is because there was a bug that would "
"print an error when you freed/deleted an :ref:`Area <class_Area>` node when "
"the ``monitoring`` property was true. To make sure this doesn't happen, we "
"simply set ``monitoring`` to false on ``explosion_area``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:752
msgid ""
"Next we check to see if the bomb is being held by a VR controller by "
"checking to see if the ``controller`` variable is not equal to ``null``. If "
"the bomb is being held by a VR controller, we set the ``held_object`` "
"property of the VR controller, ``controller``, to ``null``. Because the VR "
"controller is no longer holding anything, we make the VR controller's hand "
"mesh visible by setting ``controller.hand_mesh.visible`` to ``true``. Then "
"we check to see if the VR controller grab mode is ``RAYCAST``, and if it is "
"we set ``controller.grab_raycast.visible`` to ``true`` so the 'laser sight' "
"for the grab raycast is visible."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:757
msgid ""
"Finally, regardless if the bomb is being held by a VR controller or not, we "
"call ``queue_free`` so the bomb scene is freed/removed from the scene."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:762
msgid ""
"First the ``interact`` function calls ``set_physics_process`` and passes "
"``true`` so the code in ``_physics_process`` starts executing. This will "
"start the bomb's fuse and eventually lead to the bomb exploding."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:765
msgid ""
"Finally, we start the fuse particles by setting ``fuse_particles.visible`` "
"to ``true``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:769
msgid "Bomb finished"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:771
msgid ""
"Now the bomb is ready to go! You can find the bombs in the orange building."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:773
msgid ""
"Because of how we are calculating the VR controller's velocity, it is "
"easiest to throw the bombs using a thrusting-like motion instead of a more "
"natural throwing-like motion. The smooth curve of a throwing-like motion is "
"harder to track with the code we are using for calculating the velocity of "
"the VR controllers, so it does not always work correctly and can lead "
"inaccurately calculated velocities."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:780
msgid "Adding a sword"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:782
msgid ""
"Let's add one last special :ref:`RigidBody <class_RigidBody>`-based node "
"that can destroy targets. Let's add a sword so we can slice through the "
"targets!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:784
msgid "Open up ``Sword.tscn``, which you can find in the ``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:786
msgid ""
"There is not a whole lot going on here. All of the child nodes of the root "
"``Sword`` :ref:`RigidBody <class_RigidBody>` node are rotated to they are "
"positioned correctly when the VR controller picks them up, there is a :ref:"
"`MeshInstance <class_MeshInstance>` node for displaying the sword, and there "
"is an :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node that holds "
"a sound for the sword colliding with something."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:790
msgid ""
"There is one thing that is slightly different though. There is a :ref:"
"`KinematicBody <class_KinematicBody>` node called ``Damage_Body``. If you "
"take a look at it, you'll find that it is not on any collision layers, and "
"is instead only on a single collision mask. This is so the :ref:"
"`KinematicBody <class_KinematicBody>` will not effect other :ref:"
"`PhysicsBody <class_PhysicsBody>` nodes in the scene, but it will still be "
"effected by :ref:`PhysicsBody <class_PhysicsBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:794
msgid ""
"We are going to use the ``Damage_Body`` :ref:`KinematicBody "
"<class_KinematicBody>` node to detect the collision point and normal when "
"the sword collides with something in the scene."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:796
msgid ""
"While this is perhaps not the best way of getting the collision information "
"from a performance point of view, it does give us a lot of information we "
"can use for post-processing! Using a :ref:`KinematicBody "
"<class_KinematicBody>` this way means we can detect exactly where the sword "
"collided with other :ref:`PhysicsBody <class_PhysicsBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:799
msgid ""
"That is really the only thing note worthy about the sword scene. Select the "
"``Sword`` :ref:`RigidBody <class_RigidBody>` node and make a new script "
"called ``Sword.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:840
msgid "Let's go over how this script works!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:844
msgid "Explaining the sword code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:846
msgid ""
"Like with the other special :ref:`RigidBody <class_RigidBody>` nodes, the "
"sword extends ``VR_Interactable_Rigidbody`` so the VR controllers know this "
"object can be interacted with and that the functions defined defined in "
"``VR_Interactable_Rigidbody`` can be called when this object is held by a VR "
"controller."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:851
msgid ""
"``SWORD_DAMAGE``: A constant to define the amount of damage the sword does. "
"This damage is applied to every object in the sword on every "
"``_physics_process`` call"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:852
msgid ""
"``COLLISION_FORCE``: A constant that defines the amount of force applied to :"
"ref:`RigidBody <class_RigidBody>` nodes when the sword collides with a :ref:"
"`PhysicsBody <class_PhysicsBody>`."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:853
msgid ""
"``damage_body``: A variable to hold the :ref:`KinematicBody "
"<class_KinematicBody>` node used to detect whether the sword is stabbing a :"
"ref:`PhysicsBody <class_PhysicsBody>` node or not."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:854
msgid ""
"``sword_noise``: A variable to hold the :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` node used to play a sound when the sword "
"collides with something."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:860
msgid ""
"All we are doing in the ``_ready`` function is getting the ``Damage_Body`` :"
"ref:`KinematicBody <class_KinematicBody>` node and assigning it to "
"``damage_body``. Because we do not want the sword to detect a collision with "
"the root :ref:`RigidBody <class_RigidBody>` node of the sword, we call "
"``add_collision_exception_with`` on ``damage_body`` and pass ``self`` so the "
"sword will not be detected."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:864
msgid ""
"Finally, we get the :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` "
"node for the sword collision sound and apply it to the ``sword_noise`` "
"variable."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:870
msgid ""
"First we need to determine whether the sword is colliding with something or "
"not. To do this, we use the ``move_and_collide`` function of the "
"``damage_body`` node. Unlike how ``move_and_collide`` is normally used, we "
"are not passing a velocity and instead are passing an empty :ref:`Vector3 "
"<class_Vector3>`. Because we do not want the ``damage_body`` node to move, "
"we set the ``test_only`` argument (the fourth argument) as ``true`` so the :"
"ref:`KinematicBody <class_KinematicBody>` generates collision info without "
"actually causing any collisions within the collision world."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:875
msgid ""
"The ``move_and_collide`` function will return a :ref:`KinematicCollision "
"<class_KinematicCollision>` class that has all of the information we need "
"for detecting collisions on the sword. We assign the return value of "
"``move_and_collide`` to a variable called ``collision_results``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:878
msgid ""
"Next we check to see if ``collision_results`` is not equal to ``null``. If "
"``collision_results`` is not equal to ``null``, then we know that the sword "
"has collided with something."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:880
msgid ""
"We then check to see if the :ref:`PhysicsBody <class_PhysicsBody>` the sword "
"collided with has a function/method called ``damage`` using the "
"``has_method`` function. If the :ref:`PhysicsBody <class_PhysicsBody>` has a "
"function called ``damage_body``, we call it and pass the amount of damage "
"the sword does, ``SWORD_DAMAGE``, to it."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:883
msgid ""
"Next we check to see if the :ref:`PhysicsBody <class_PhysicsBody>` the sword "
"collided with is a :ref:`RigidBody <class_RigidBody>`. If what the sword "
"collided with is a :ref:`RigidBody <class_RigidBody>` node, we then check to "
"see if the sword is being held by a VR controller or not by checking to see "
"if ``controller`` is equal to ``null``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:886
msgid ""
"If the sword is not being held by a VR controller, ``controller`` is equal "
"to ``null``, then we move the :ref:`RigidBody <class_RigidBody>` node the "
"sword collided with using the ``apply_impulse`` function. For the "
"``position`` of the ``apply_impulse`` function, we use "
"``collision_position`` variable stored within the :ref:`KinematicCollision "
"<class_KinematicCollision>` class in ``collision_results``. For the "
"``velocity`` of the ``apply_impulse`` function, we use the "
"``collision_normal`` multiplied by the ``linear_velocity`` of the sword's :"
"ref:`RigidBody <class_RigidBody>` node multiplied by ``COLLISION_FORCE``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:891
msgid ""
"If the sword is being held by a VR controller, ``controller`` is not equal "
"to ``null``, then we move the :ref:`RigidBody <class_RigidBody>` node the "
"sword collided with using the ``apply_impulse`` function. For the "
"``position`` of the ``apply_impulse`` function, we use "
"``collision_position`` variable stored within the :ref:`KinematicCollision "
"<class_KinematicCollision>` class in ``collision_results``. For the "
"``velocity`` of the ``apply_impulse`` function, we use the "
"``collision_normal`` multiplied by the VR controller's velocity multiplied "
"by ``COLLISION_FORCE``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:895
msgid ""
"Finally, regardless of whether the :ref:`PhysicsBody <class_PhysicsBody>` is "
"a :ref:`RigidBody <class_RigidBody>` or not, we play the sound of the sword "
"colliding with something by calling ``play`` on ``sword_noise``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:900
msgid "Sword finished"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:904
msgid ""
"With that done, you can now slice through the targets! You can find the "
"sword in the corner in between the shotgun and the pistol."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:909
msgid "Updating the target UI"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:911
msgid "Let's update the UI as the sphere targets are destroyed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:913
msgid ""
"Open up ``Main_VR_GUI.tscn``, which you can find in the ``Scenes`` folder. "
"Feel free to look at how the scene is setup if you want, but in an effort to "
"keep this tutorial from becoming too long, we will not be covering the scene "
"setup in this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:916
msgid ""
"Expand the ``GUI`` :ref:`Viewport <class_Viewport>` node and then select the "
"``Base_Control`` node. Add a new script called ``Base_Control.gd``, and add "
"the following:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:937
msgid "Let's go over how this script works real quick."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:939
msgid ""
"First, in ``_ready``, we get the :ref:`Label <class_Label>` that shows how "
"many spheres are left and assign it to the ``sphere_count_label`` class "
"variable. Next, we get ``Game.gd`` by using ``get_tree().root`` and assign "
"``sphere_ui`` to this script."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:942
msgid ""
"In ``update_ui``, we change the sphere :ref:`Label <class_Label>`'s text. If "
"there is at least one sphere remaining, we change the text to show how many "
"spheres are still left in the world. If there are no more spheres remaining, "
"we change the text and congratulate the player."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:948
msgid "Adding the final special RigidBody"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:950
msgid ""
"Finally, before we finish this tutorial, let's add a way to reset the game "
"while in VR."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:952
msgid ""
"Open up ``Reset_Box.tscn``, which you will find in ``Scenes``. Select the "
"``Reset_Box`` :ref:`RigidBody <class_RigidBody>` node and make a new script "
"called ``Reset_Box.gd``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:990
msgid "Let's quickly go over how this script works."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:994
msgid "Explaining the reset box code"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:996
msgid ""
"Like with the other special :ref:`RigidBody <class_RigidBody>`-based objects "
"we've created, the reset box extends ``VR_Interactable_Rigidbody``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:998
msgid ""
"The ``start_transform`` class variable will store the global transform of "
"the reset box when the game starts, the ``reset_timer`` class variable will "
"hold the length of time that has passed since the reset box's position has "
"moved, the ``RESET_TIME`` constant defines the length of time the reset box "
"has to wait before being reset, and the ``RESET_MIN_DISTANCE`` constant "
"defines how far the reset box has to be away from it's initial position "
"before the reset timer starts."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1002
msgid ""
"In the ``_ready`` function all we are doing is storing the "
"``global_transform`` of the reset position when the scene starts. This is so "
"we can reset the position, rotation, and scale of the reset box object to "
"this initial transform when enough time has passed."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1005
msgid ""
"In the ``_physics_process`` function, the code checks to see if the reset "
"box's initial position to the reset box's current position is farther than "
"``RESET_MIN_DISTANCE``. If it is farther, then it starts adding time, "
"``delta``, to ``reset_timer``. Once ``reset_timer`` is more than or equal to "
"``RESET_TIME``, we reset the ``global_transform`` to the ``start_transform`` "
"so the reset box is back in its initial position. We then set "
"``reset_timer`` to ``0``."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1009
msgid ""
"The ``interact`` function simply reloads the ``Game.tscn`` scene using "
"``get_tree().change_scene``. This will reload the game scene, resetting "
"everything."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1011
msgid ""
"Finally, the ``dropped`` function resets the ``global_transform`` to the "
"initial transform in ``start_transform`` so the reset box has its initial "
"position/rotation. Then ``reset_timer`` is set to ``0`` so the timer is "
"reset."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1016
msgid "Reset box finished"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1018
msgid ""
"With that done, when you grab and interact with the reset box, the entire "
"scene will reset/restart and you can destroy all the targets again!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1020
msgid ""
"Resetting the scene abruptly without any sort of transition can lead to "
"discomfort in VR."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1029
msgid "Whew! That was a lot of work."
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1031
msgid ""
"Now you have a fully working VR project with multiple different types of "
"special :ref:`RigidBody <class_RigidBody>`-based nodes that can be used and "
"extended. Hopefully this will help serve as an introduction to making fully-"
"featured VR games in Godot! The code and concepts detailed in this tutorial "
"can be expanded on to make puzzle games, action games, story-based games, "
"and more!"
msgstr ""

#: ../../docs/tutorials/vr/openvr/vr_starter_tutorial/vr_starter_tutorial_part_two.rst:1035
msgid ""
"You can download the finished project for this tutorial series on the "
"`OpenVR GitHub repository <https://github.com/GodotVR/godot_openvr_fps>`__, "
"under the releases tab!"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:4
msgid "Getting the source"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:9
msgid "Downloading the Godot source code"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:11
msgid ""
"Before :ref:`getting into the SCons build system "
"<doc_introduction_to_the_buildsystem>` and compiling Godot, you need to "
"actually download the Godot source code."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:14
msgid ""
"The source code is available on `GitHub <https://github.com/godotengine/"
"godot>`__ and while you can manually download it via the website, in general "
"you want to do it via the ``git`` version control system."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:18
msgid ""
"If you are compiling in order to make contributions or pull requests, you "
"should follow the instructions from the :ref:`Pull Request workflow "
"<doc_pr_workflow>`."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:21
msgid ""
"If you don't know much about ``git`` yet, there are a great number of "
"`tutorials <https://git-scm.com/book>`__ available on various websites."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:24
msgid ""
"In general, you need to install ``git`` and/or one of the various GUI "
"clients."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:26
msgid ""
"Afterwards, to get the latest development version of the Godot source code "
"(the unstable ``master`` branch), you can use ``git clone``."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:29
msgid ""
"If you are using the ``git`` command line client, this is done by entering "
"the following in a terminal:"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:38
msgid ""
"For any stable release, visit the `release page <https://github.com/"
"godotengine/godot/releases>`__ and click on the link for the release you "
"want. You can then download and extract the source from the download link on "
"the page."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:42
msgid ""
"With ``git``, you can also clone a stable release by specifying its branch "
"or tag after the ``--branch`` (or just ``-b``) argument::"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:51
msgid ""
"There are also generally branches besides ``master`` for each major version."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:53
msgid ""
"After downloading the Godot source code, you can :ref:`continue to compiling "
"Godot <doc_introduction_to_the_buildsystem>`."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:4
msgid "Introduction to the buildsystem"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:9
msgid "SCons"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:11
msgid ""
"Godot uses `SCons <https://www.scons.org/>`__ to build. We love it, we are "
"not changing it for anything else. We are not even sure other build systems "
"are up to the task of building Godot. We constantly get requests to move the "
"build system to CMake, or Visual Studio, but this is not going to happen. "
"There are many reasons why we have chosen SCons over other alternatives, for "
"example:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:18
msgid ""
"Godot can be compiled for a dozen different platforms: all PC platforms, all "
"mobile platforms, many consoles, and WebAssembly."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:20
msgid ""
"Developers often need to compile for several of the platforms **at the same "
"time**, or even different targets of the same platform. They can't afford "
"reconfiguring and rebuilding the project each time. SCons can do this with "
"no sweat, without breaking the builds."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:24
msgid ""
"SCons will *never* break a build no matter how many changes, configurations, "
"additions, removals etc. You have more chances to die struck by lightning "
"than needing to clean and rebuild in SCons."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:27
msgid ""
"Godot build process is not simple. Several files are generated by code "
"(binders), others are parsed (shaders), and others need to offer "
"customization (plugins). This requires complex logic which is easier to "
"write in an actual programming language (like Python) rather than using a "
"mostly macro-based language only meant for building."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:32
msgid ""
"Godot build process makes heavy use of cross-compiling tools. Each platform "
"has a specific detection process, and all these must be handled as specific "
"cases with special code written for each."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:36
msgid ""
"So, please try to keep an open mind and get at least a little familiar with "
"it if you are planning to build Godot yourself."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:42
msgid ""
"Please refer to the documentation for :ref:`doc_compiling_for_android`, :ref:"
"`doc_compiling_for_ios`, :ref:`doc_compiling_for_osx`, :ref:"
"`doc_compiling_for_uwp`, :ref:`doc_compiling_for_web`, :ref:"
"`doc_compiling_for_windows` and :ref:`doc_compiling_for_x11`."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:47
msgid ""
"Note that for **Windows/Visual Studio**, you need to use ``x86_x64 Cross "
"Tools Command Prompt for VS 2017`` or similar, depending on your install, "
"instead of the standard Windows command prompt to enter the commands below."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:52
msgid "Platform selection"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:54
msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:59
msgid ""
"SCons is invoked by just calling ``scons``. If no platform is specified, "
"SCons will detect the target platform automatically based on the host "
"platform. It will then start building for the target platform right away."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:63
msgid "To list the available target platforms, use ``scons platform=list``::"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:77
msgid ""
"To build for a platform (for example, x11), run with the ``platform=`` (or "
"``p=`` to make it short) argument:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:84
msgid ""
"This will start the build process, which will take a while. By default, "
"Godot's SCons setup is configured to use all CPU threads but one (to keep "
"the system responsive during compilation). If you want to adjust how many "
"CPU threads SCons will use, use the ``-j <threads>`` parameter to specify "
"how many threads will be used for the build."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:90
msgid "Example for using 4 threads:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:97
msgid "Resulting binary"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:99
msgid ""
"The resulting binaries will be placed in the ``bin/`` subdirectory, "
"generally with this naming convention::"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:104
msgid "For the previous build attempt, the result would look like this::"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:109
msgid ""
"This means that the binary is for X11, is not optimized, has tools (the "
"whole editor) compiled in, and is meant for 64 bits."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:112
msgid "A Windows binary with the same configuration will look like this:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:119
msgid ""
"Copy that binary to any location you like, as it contains the project "
"manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export templates "
"are needed (which can be either downloaded from `godotengine.org <https://"
"godotengine.org/>`__, or you can build them yourself)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:125
msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:133
msgid ""
"Tools are enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling tools produces a binary that can run "
"projects but that does not include the editor or the project manager."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:145
msgid "Target"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:147
msgid "Target controls optimization and debug flags. Each mode means:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:149
msgid ""
"**debug**: Build with C++ debugging symbols, runtime checks (performs checks "
"and reports error) and none to little optimization."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:151
msgid ""
"**release_debug**: Build without C++ debugging symbols and optimization, but "
"keep the runtime checks (performs checks and reports errors). Official "
"editor binaries use this configuration."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:154
msgid ""
"**release**: Build without symbols, with optimization and with little to no "
"runtime checks. This target can't be used together with ``tools=yes``, as "
"the editor requires some debug functionality and run-time checks to run."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:163
msgid ""
"This flag appends the ``.debug`` suffix (for debug), or ``.tools`` (for "
"debug with tools enabled). When optimization is enabled (release), it "
"appends the ``.opt`` suffix."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:168
msgid "Bits"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:170
msgid ""
"Bits is meant to control the CPU or OS version intended to run the binaries. "
"It is focused mostly on desktop platforms and ignored everywhere else."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:174
msgid "**32**: Build binaries for 32-bit platforms."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:175
msgid "**64**: Build binaries for 64-bit platforms."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:176
msgid "**default**: Build for the architecture that matches the host platform."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:182
msgid ""
"This flag appends ``.32`` or ``.64`` suffixes to resulting binaries when "
"relevant. If ``bits=default`` is used, the suffix will match the detected "
"architecture."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:189
msgid "Custom modules"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:191
msgid ""
"It's possible to compile modules residing outside of Godot's directory tree, "
"along with the built-in modules."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:194
msgid ""
"A ``custom_modules`` build option can be passed to the command line before "
"compiling. The option represents a comma-separated list of directory paths "
"containing a collection of independent C++ modules that can be seen as C++ "
"packages, just like the built-in ``modules/`` directory."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:199
msgid ""
"For instance, it's possible to provide both relative, absolute, and user "
"directory paths containing such modules:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:208
msgid ""
"If there's any custom module with the exact directory name as a built-in "
"module, the engine will only compile the custom one. This logic can be used "
"to override built-in module implementations."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:214
msgid ":ref:`doc_custom_modules_in_c++`"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:217
msgid "Cleaning generated files"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:219
msgid ""
"Sometimes, you may encounter an error due to generated files being present. "
"You can remove them by using ``scons --clean <options>``, where "
"``<options>`` is the list of build options you've used to build Godot "
"previously."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:223
msgid ""
"Alternatively, you can use ``git clean -fixd`` which will clean build "
"artifacts for all platforms and configurations. Beware, as this will remove "
"all untracked and ignored files in the repository. Don't run this command if "
"you have uncommitted work!"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:229
msgid "Other build options"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:231
msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:235
msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:241
msgid "Overriding the build options"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:244
msgid "Using a file"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:246
msgid ""
"The default ``custom.py`` file can be created at the root of the Godot "
"Engine source to initialize any SCons build options passed via the command "
"line:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:258
msgid ""
"You can also disable some of the builtin modules before compiling, saving "
"some time it takes to build the engine. See :ref:`doc_optimizing_for_size` "
"page for more details."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:263
msgid ""
"You can use the online `Godot build options generator <https://godot-build-"
"options-generator.github.io/>`__ to generate a ``custom.py`` file containing "
"SCons options. You can then save this file and place it at the root of your "
"Godot source directory."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:268
msgid ""
"Another custom file can be specified explicitly with the ``profile`` command "
"line option, both overriding the default build configuration:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:275
msgid ""
"Build options set from the file can be overridden by the command line "
"options."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:278
msgid "It's also possible to override the options conditionally:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:293
msgid "Using the SCONSFLAGS"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:295
msgid ""
"``SCONSFLAGS`` is an environment variable which is used by the SCons to set "
"the options automatically without having to supply them via the command line."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:298
msgid ""
"For instance, you may want to force a number of CPU threads with the "
"aforementioned ``-j`` option for all future builds:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:317
msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:322
msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most files are optimized binaries or packages for each platform:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:345
msgid ""
"To create those yourself, follow the instructions detailed for each platform "
"in this same tutorial section. Each platform explains how to create its own "
"template."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:349
msgid ""
"The ``version.txt`` file should contain the corresponding Godot version "
"identifier. This file is used to install export templates in a version-"
"specific directory to avoid conflicts. For instance, if you are building "
"export templates for Godot 3.1.1, ``version.txt`` should contain ``3.1.1."
"stable`` on the first line (and nothing else). This version identifier is "
"based on the ``major``, ``minor``, ``patch`` (if present) and ``status`` "
"lines of the `version.py file in the Godot Git repository <https://github."
"com/godotengine/godot/blob/master/version.py>`__."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:357
msgid ""
"If you are developing for multiple platforms, macOS is definitely the most "
"convenient host platform for cross-compilation, since you can cross-compile "
"for almost every target (except for UWP). Linux and Windows come in second "
"place, but Linux has the advantage of being the easier platform to set this "
"up."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:10
msgid ""
"This page describes how to compile Windows editor and export template "
"binaries from source. If you're looking to export your project to Windows "
"instead, read :ref:`doc_exporting_for_windows`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:16
msgid "For compiling under Windows, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:18
msgid ""
"`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_, "
"version 2017 or later. VS 2019 is recommended. **Make sure to read "
"\"Installing Visual Studio caveats\" below or you will have to run/download "
"the installer again.**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:22
msgid ""
"`MinGW-w64 <http://mingw-w64.org/>`__ with GCC can be used as an alternative "
"to Visual Studio. Be sure to install/configure it to use the ``posix`` "
"thread model."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:24
msgid ""
"`Python 3.5+ <https://www.python.org/downloads/windows/>`_. **Make sure to "
"enable the option to add Python to the ``PATH`` in the installer.**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:26
msgid ""
"`SCons <https://www.scons.org/>`_ build system. Using the latest release is "
"recommended, especially for proper support of recent Visual Studio releases."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:29
msgid ""
"If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install "
"MinGW and other dependencies using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:34
msgid ""
"If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily "
"install MinGW and other dependencies using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:40
msgid ""
"For each MSYS2 MinGW subsystem, you should then run `pip3 install scons` in "
"its shell."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:43
#: ../../docs/development/compiling/compiling_for_x11.rst:34
#: ../../docs/development/compiling/compiling_for_osx.rst:38
#: ../../docs/development/compiling/compiling_for_android.rst:43
#: ../../docs/development/compiling/compiling_for_ios.rst:21
#: ../../docs/development/compiling/compiling_for_uwp.rst:34
#: ../../docs/development/compiling/compiling_for_web.rst:22
msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:46
#: ../../docs/development/compiling/compiling_for_x11.rst:37
#: ../../docs/development/compiling/compiling_for_osx.rst:41
#: ../../docs/development/compiling/compiling_for_android.rst:46
#: ../../docs/development/compiling/compiling_for_ios.rst:24
#: ../../docs/development/compiling/compiling_for_uwp.rst:37
#: ../../docs/development/compiling/compiling_for_web.rst:25
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:50
msgid "Setting up SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:52
msgid ""
"To install SCons, open the command prompt and run the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:56
msgid ""
"If you are prompted with the message ``Defaulting to user installation "
"because normal site-packages is not writeable``, you may have to run that "
"command again using elevated permissions. Open a new command prompt as an "
"Administrator then run the command again to ensure that SCons is available "
"from the ``PATH``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:62
msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into a command prompt (``cmd."
"exe``)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:66
msgid ""
"If the commands above don't work, make sure to add Python to your ``PATH`` "
"environment variable after installing it, then check again. You can do so by "
"running the Python installer again and enabling the option to add Python to "
"the ``PATH``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:71
msgid ""
"If SCons cannot detect your Visual Studio installation, it might be that "
"your SCons version is too old. Update it to the latest version with ``python "
"-m pip install --upgrade scons``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:78
msgid "Installing Visual Studio caveats"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:80
msgid ""
"If installing Visual Studio 2017 or 2019, make sure to enable **C++** in the "
"list of workflows to install."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:83
msgid ""
"If installing Visual Studio 2015, make sure to run a **Custom** installation "
"instead of **Typical** and select **C++** as a language there."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:86
msgid ""
"If you've already made the mistake of installing Visual Studio without C++ "
"support, run the installer again; it should present you a **Modify** button. "
"Running the installer from *Add/Remove Programs* will only give you a "
"**Repair** option, which won't let you install C++ tools."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:92
msgid "Downloading Godot's source"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:94
msgid "Refer to :ref:`doc_getting_source` for detailed instructions."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:96
msgid ""
"The tutorial will assume from now on that you placed the source code in ``C:"
"\\godot``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:101
msgid ""
"To prevent slowdowns caused by continuous virus scanning during compilation, "
"add the Godot source folder to the list of exceptions in your antivirus "
"software."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:105
msgid ""
"For Windows Defender, hit the :kbd:`Windows` key, type \"Windows Defender "
"Settings\" then hit :kbd:`Enter`. Under **Virus & threat protection**, go to "
"**Virus & threat protection setting** and scroll down to **Exclusions**. "
"Click **Add or remove exclusions** then add the Godot source folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:115
msgid "Selecting a compiler"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:117
msgid ""
"SCons will automatically find and use an existing Visual Studio "
"installation. If you do not have Visual Studio installed, it will attempt to "
"use MinGW instead. If you already have Visual Studio installed and want to "
"use MinGW, pass ``use_mingw=yes`` to the SCons command line. Note that MSVC "
"builds cannot be performed from the MSYS2 or MinGW shells. Use either ``cmd."
"exe`` or PowerShell instead."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:124
msgid ""
"During development, using the Visual Studio compiler is usually a better "
"idea, as it links the Godot binary much faster than MinGW. However, MinGW "
"can produce more optimized binaries using link-time optimization (see "
"below), making it a better choice for production use."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:130
msgid "Running SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:132
msgid ""
"After opening a command prompt, change to the root directory of the engine "
"source code (using ``cd``) and type::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:137
msgid ""
"When compiling with multiple CPU threads, SCons may warn about pywin32 being "
"missing. You can safely ignore this warning."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:140
msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name ``godot.windows.tools.32.exe`` or ``godot."
"windows.tools.64.exe``. By default, SCons will build a binary matching your "
"CPU architecture, but this can be overridden using ``bits=64`` or "
"``bits=32``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:146
msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Running it will bring up the Project Manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:149
#: ../../docs/development/compiling/compiling_for_x11.rst:127
msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:153
msgid ""
"If you are compiling Godot with MinGW, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:158
#: ../../docs/development/compiling/compiling_for_x11.rst:136
#: ../../docs/development/compiling/compiling_for_osx.rst:66
msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:164
msgid "Development in Visual Studio"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:166
msgid ""
"Using an IDE is not required to compile Godot, as SCons takes care of "
"everything. But if you intend to do engine development or debugging of the "
"engine's C++ code, you may be interested in configuring a code editor or an "
"IDE."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:170
msgid ""
"Folder-based editors don't require any particular setup to start working "
"with Godot's codebase. To edit projects with Visual Studio they need to be "
"set up as a solution."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:173
msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:178
msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot using Visual Studio's **Build** button."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:181
msgid "See :ref:`doc_configuring_an_ide_vs` for further details."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:184
msgid "Cross-compiling for Windows from other operating systems"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:186
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"mingw-w64.org/doku.php>`__, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distribution, here are "
"some known ones:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:192
#: ../../docs/development/compiling/compiling_for_x11.rst:48
msgid "**Arch Linux**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:192
msgid "Install `mingw-w64-gcc from the AUR`_."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:194
#: ../../docs/development/compiling/compiling_for_x11.rst:53
msgid "**Debian** / **Ubuntu**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:198
#: ../../docs/development/compiling/compiling_for_x11.rst:58
msgid "**Fedora**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:203
msgid "**macOS**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:207
#: ../../docs/development/compiling/compiling_for_x11.rst:75
msgid "**Mageia**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:215
msgid ""
"Before attempting the compilation, SCons will check for the following "
"binaries in your ``PATH`` environment variable::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:221
msgid ""
"If the binaries are not located in the ``PATH`` (e.g. ``/usr/bin``), you can "
"define the following environment variables to give a hint to the build "
"system::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:228
msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:238
msgid ""
"Cross-compiling from some Ubuntu versions may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:242
msgid ""
"You can change that configuration following those instructions, for 64-bit::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:250
msgid "And for 32-bit::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:258
msgid "Creating Windows export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:260
msgid ""
"Windows export templates are created by compiling Godot without the editor, "
"with the following flags::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:268
msgid ""
"If you plan on replacing the standard export templates, copy these to the "
"following location, replacing ``<version>`` with the version identifier "
"(such as ``3.1.1.stable`` or ``3.2.dev``)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:274
msgid "With the following names::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:281
msgid ""
"However, if you are using custom modules or custom engine code, you may "
"instead want to configure your binaries as custom export templates here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:287
msgid ""
"You don't need to copy them in this case, just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build, you will automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:4
msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:10
msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:16
msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:19
msgid "GCC 7+ or Clang 6+."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:20
msgid "Python 3.5+."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:21
msgid ""
"SCons 3.0+ build system. If your distribution uses Python 2 by default, or "
"you are using a version of SCons prior to 3.1.2, you will need to change the "
"version of Python that SCons uses by changing the shebang (the first line) "
"of the SCons script file to ``#! /usr/bin/python3``. Use the command ``which "
"scons`` to find the location of the SCons script file."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:26
msgid "pkg-config (used to detect the dependencies below)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:27
msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:28
msgid "MesaGL development libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:29
msgid "ALSA development libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:30
msgid "PulseAudio development libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:31
msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:32
msgid "*Optional* - yasm (for WebM SIMD optimizations)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:41
msgid "Distro-specific one-liners"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:43
msgid "**Alpine Linux**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:64
msgid "**FreeBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:70
msgid "**Gentoo**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:81
msgid "**OpenBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:85
msgid "**openSUSE**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:90
msgid "**NetBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:94
msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:96
msgid "**Solus**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:105
msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:111
msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:118
msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:124
msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:131
msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:142
#: ../../docs/development/compiling/compiling_for_osx.rst:81
msgid "Compiling a headless/server build"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:144
#: ../../docs/development/compiling/compiling_for_osx.rst:83
msgid ""
"To compile a *headless* build which provides editor functionality to export "
"projects in an automated manner, use::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:149
#: ../../docs/development/compiling/compiling_for_osx.rst:88
msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:154
msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:160
#: ../../docs/development/compiling/compiling_for_osx.rst:99
#: ../../docs/development/compiling/compiling_for_web.rst:29
msgid "Building export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:162
msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:170
msgid ""
"To build X11 (Linux, \\*BSD) export templates, run the build system with the "
"following parameters:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:173
msgid "(32 bits)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:180
msgid "(64 bits)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:187
msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:190
msgid ""
"To create standard export templates, the resulting files must be copied to:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:196
msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux X11\" by "
"Godot):"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:205
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:211
msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:216
msgid "Using Clang and LLD for faster development"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:218
msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:221
msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:223
msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:225
msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:230
msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:233
msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:237
msgid "Using Pyston for faster development"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:239
msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:245
msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:246
msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:247
msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:249
msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:254
msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:257
msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:4
msgid "Compiling for macOS"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:10
msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:16
msgid "For compiling under macOS, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:18
msgid "`Python 3.5+ <https://www.python.org>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:19
msgid "`SCons 3.0+ <https://www.scons.org>`_ build system."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:20
msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:22
msgid ""
"*Optional* - `yasm <https://yasm.tortall.net/>`_ (for WebM SIMD "
"optimizations)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:24
msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons and yasm using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:29
msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:32
msgid ""
"Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, "
"you can easily install SCons and yasm using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:47
msgid "Start a terminal, go to the root directory of the engine source code."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:49
msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:53
msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:57
msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands and then use ``lipo`` to bundle them together::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:61
msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:71
msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/osx_tools.app``. Typically, for an "
"optimized editor binary built with ``target=release_debug``::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:93
msgid ""
"To compile a release *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:101
msgid ""
"To build macOS export templates, you have to compile with ``tools=no`` (no "
"editor) and respectively for ``target=release`` (release template) and "
"``target=release_debug``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:105
msgid ""
"Official templates are universal binaries which support both Intel x86_64 "
"and ARM64 architectures. You can also create export templates that support "
"only one of those two architectures by leaving out the ``lipo`` step below."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:109
msgid "For Intel x86_64::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:114
msgid "For ARM64 (Apple M1)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:119
msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands blocks and then use ``lipo`` to bundle them together::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:125
msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/osx_template.app``. The release and "
"debug builds should be placed in ``osx_template.app/Contents/MacOS`` with "
"the names ``godot_osx_release.64`` and ``godot_osx_debug.64`` respectively. "
"You can do so with the following commands (assuming a universal build, "
"otherwise replace the ``.universal`` extension with the one of your arch-"
"specific binaries)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:138
msgid ""
"You can then zip the ``osx_template.app`` folder to reproduce the ``osx."
"zip`` template from the official Godot distribution::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:144
msgid "Cross-compiling for macOS from Linux"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:146
msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:151
msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:157
msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:159
msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:162
msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:168
msgid "Now you can compile with SCons like you normally would::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:172
msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:4
msgid "Compiling for Android"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:10
msgid ""
"This page describes how to compile Android export template binaries from "
"source. If you're looking to export your project to Android instead, read :"
"ref:`doc_exporting_for_android`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:14
msgid "Note"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:16
msgid ""
"In most cases, using the built-in deployer and export templates is good "
"enough. Compiling the Android APK manually is mostly useful for custom "
"builds or custom packages for the deployer."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:20
msgid ""
"Also, you still need to follow the steps mentioned in the :ref:"
"`doc_exporting_for_android` tutorial before attempting to build a custom "
"export template."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:27
msgid "For compiling under Windows, Linux or macOS, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:29
msgid "`Python 3.5+ <https://www.python.org/downloads/>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:30
msgid "`SCons 3.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:31
msgid ""
"`Android SDK <https://developer.android.com/studio/#command-tools>`_ "
"(command-line tools are sufficient)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:34
msgid "Required SDK components will be automatically installed."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:35
msgid ""
"On Linux, **do not use an Android SDK provided by your distribution's "
"repositories as it will often be outdated**."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:38
msgid "Gradle (will be downloaded and installed automatically if missing)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:39
msgid "JDK 11 (either OpenJDK or Oracle JDK)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:41
msgid ""
"You can download a build from `ojdkbuild <https://github.com/ojdkbuild/"
"ojdkbuild>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:52
msgid "Setting up the buildsystem"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:54
msgid ""
"Set the environment variable ``ANDROID_SDK_ROOT`` to point to the Android "
"SDK. If you downloaded the Android command-line tools, this would be the "
"folder where you extracted the contents of the ZIP archive."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:58
msgid "Install the necessary SDK components in this folder:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:60
msgid ""
"Accept the SDK component licenses by running the following command where "
"``android_sdk_path`` is the path to the Android SDK, then answering all the "
"prompts with ``y``:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:67
msgid ""
"Complete setup by running the following command where ``android_sdk_path`` "
"is the path to the Android SDK."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:73
msgid ""
"To set the environment variable on Windows, press :kbd:`Windows + R`, type "
"\"control system\", then click on **Advanced system settings** in the left "
"pane, then click on **Environment variables** on the window that appears."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:77
msgid ""
"To set the environment variable on Linux or macOS, use ``export "
"ANDROID_SDK_ROOT=/path/to/android-sdk`` where ``/path/to/android-sdk`` "
"points to the root of the SDK directories."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:82
msgid "Building the export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:84
msgid ""
"Godot needs two export templates for Android: the optimized \"release\" "
"template (``android_release.apk``) and the debug template (``android_debug."
"apk``). As Google will require all APKs to include ARMv8 (64-bit) libraries "
"starting from August 2019, the commands below will build an APK containing "
"both ARMv7 and ARMv8 libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:90
msgid ""
"Compiling the standard export templates is done by calling SCons from the "
"Godot root directory with the following arguments:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:93
msgid ""
"Release template (used when exporting with **Debugging Enabled** unchecked)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:106
msgid "The resulting APK will be located at ``bin/android_release.apk``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:108
msgid "Debug template (used when exporting with **Debugging Enabled** checked)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:121
msgid "The resulting APK will be located at ``bin/android_debug.apk``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:124
msgid "Adding support for x86 devices"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:126
msgid ""
"If you also want to include support for x86 and x86-64 devices, run the "
"SCons command a third and fourth time with the ``android_arch=x86``, and "
"``android_arch=x86_64`` arguments before building the APK with Gradle. For "
"example, for the release template:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:144
msgid ""
"This will create a fat binary that works on all platforms. The final APK "
"size of exported projects will depend on the platforms you choose to support "
"when exporting; in other words, unused platforms will be removed from the "
"APK."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:150
msgid "Cleaning the generated export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:152
msgid ""
"You can use the following commands to remove the generated export templates:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:164
msgid "Using the export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:166
msgid ""
"Godot needs release and debug APKs that were compiled against the same "
"version/commit as the editor. If you are using official binaries for the "
"editor, make sure to install the matching export templates, or build your "
"own from the same version."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:171
msgid ""
"When exporting your game, Godot opens the APK, changes a few things inside "
"and adds your files."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:175
msgid "Installing the templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:177
msgid ""
"The newly-compiled templates (``android_debug.apk`` and ``android_release."
"apk``) must be copied to Godot's templates folder with their respective "
"names. The templates folder can be located in:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:181
msgid "Windows: ``%APPDATA%\\Godot\\templates\\<version>\\``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:182
msgid "Linux: ``$HOME/.local/share/godot/templates/<version>/``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:183
msgid "macOS: ``$HOME/Library/Application Support/Godot/templates/<version>/``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:185
msgid ""
"``<version>`` is of the form ``major.minor[.patch].status`` using values "
"from ``version.py`` in your Godot source repository (e.g. ``3.0.5.stable`` "
"or ``3.1.dev``). You also need to write this same version string to a "
"``version.txt`` file located next to your export templates."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:192
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your APKs as custom export templates here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:198
msgid ""
"You don't even need to copy them, you can just reference the resulting file "
"in the ``bin\\`` directory of your Godot source folder, so that the next "
"time you build you will automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:207
msgid "Platform doesn't appear in SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:209
msgid ""
"Double-check that you've set the ``ANDROID_SDK_ROOT`` environment variable. "
"This is required for the platform to appear in SCons' list of detected "
"platforms. See :ref:`Setting up the buildsystem "
"<doc_android_setting_up_the_buildsystem>` for more information."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:216
msgid "Application not installed"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:218
msgid ""
"Android might complain the application is not correctly installed. If so:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:221
msgid "Check that the debug keystore is properly generated."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:222
msgid "Check that the jarsigner executable is from JDK 8."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:224
msgid ""
"If it still fails, open a command line and run `logcat <https://developer."
"android.com/studio/command-line/logcat>`_:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:230
msgid ""
"Then check the output while the application is installed; the error message "
"should be presented there. Seek assistance if you can't figure it out."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:235
msgid "Application exits immediately"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:237
msgid ""
"If the application runs but exits immediately, this might be due to one of "
"the following reasons:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:240
msgid ""
"Make sure to use export templates that match your editor version; if you use "
"a new Godot version, you *have* to update the templates too."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:242
msgid ""
"``libgodot_android.so`` is not in ``libs/<android_arch>/`` where "
"``<android_arch>`` is the device's architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:244
msgid ""
"The device's architecture does not match the exported one(s). Make sure your "
"templates were built for that device's architecture, and that the export "
"settings included support for that architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:248
msgid "In any case, ``adb logcat`` should also show the cause of the error."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:4
msgid "Compiling for iOS"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:10
msgid ""
"This page describes how to compile iOS export template binaries from source. "
"If you're looking to export your project to iOS instead, read :ref:"
"`doc_exporting_for_ios`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:16
msgid ""
"SCons 3.0+ (you can install it via `Homebrew <https://brew.sh/>`_ or "
"`MacPorts <https://www.macports.org/>`_, you should be able to run ``scons`` "
"in a terminal when installed)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:19
msgid ""
"Xcode 10.0 (or later) with the iOS (10.0) SDK and the command line tools."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:30
msgid "Open a Terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:36
msgid "for a debug build, or:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:42
msgid ""
"for a release build (check ``platform/iphone/detect.py`` for the compiler "
"flags used for each configuration)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:45
msgid "Alternatively, you can run"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:51
msgid "for a Simulator executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:53
msgid ""
"For recent devices, Apple requires 64-bit versions of application binaries "
"when you are uploading to the Apple Store. The best way to provide these is "
"to create a bundle in which there are both 32-bit and 64-bit binaries, so "
"every device will be able to run the game."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:56
msgid ""
"It can be done in three steps: first compile the 32-bit version, then "
"compile the 64-bit version and then use ``lipo`` to bundle them into one "
"\"universal\" binary. All those steps can be performed with following "
"commands:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:67
msgid ""
"If you also want to provide a simulator build (reduces the chance of any "
"linker errors with dependencies), you'll need to build and lipo the "
"``x86_64`` architecture as well."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:81
msgid ""
"To run on a device or simulator, follow these instructions: :ref:"
"`doc_exporting_for_ios`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:84
msgid ""
"Replace or add your executable to the Xcode project, and change the "
"\"executable name\" property on Info.plist accordingly if you use an "
"alternative build."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:4
msgid "Cross-compiling for iOS on Linux"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:8
msgid ""
"The procedure for this is somewhat complex and requires a lot of steps, but "
"once you have the environment properly configured it will be easy to compile "
"Godot for iOS anytime you want."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:13
msgid "Disclaimer"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:15
msgid ""
"While it is possible to compile for iOS on a Linux environment, Apple is "
"very restrictive about the tools to be used (especially hardware-wise), "
"allowing pretty much only their products to be used for development. So this "
"is **not official**. However, a `statement from Apple in 2010 <http://www."
"apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-"
"Guidelines.html>`__ says they relaxed some of the `App Store review "
"guidelines <https://developer.apple.com/app-store/review/guidelines/>`__ to "
"allow any tool to be used, as long as the resulting binary does not download "
"any code, which means it should be OK to use the procedure described here "
"and cross-compiling the binary."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:29
msgid ""
"`XCode with the iOS SDK <https://developer.apple.com/xcode/download>`__ (a "
"dmg image)"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:31
msgid ""
"`Clang >= 3.5 <http://clang.llvm.org>`__ for your development machine "
"installed and in the ``PATH``. It has to be version >= 3.5 to target "
"``arm64`` architecture."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:34
msgid ""
"`Fuse <https://github.com/libfuse/libfuse>`__ for mounting and umounting the "
"dmg image."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:36
msgid ""
"`darling-dmg <https://github.com/darlinghq/darling-dmg>`__, which needs to "
"be built from source. The procedure for that is explained below."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:40
msgid ""
"For building darling-dmg, you'll need the development packages of the "
"following libraries: fuse, icu, openssl, zlib, bzip2."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:43
msgid ""
"`cctools-port <https://github.com/tpoechtrager/cctools-port>`__ for the "
"needed build tools. The procedure for building is quite peculiar and is "
"described below."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:47
msgid "This also has some extra dependencies: automake, autogen, libtool."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:50
msgid "Configuring the environment"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:53
msgid "darling-dmg"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:55
msgid "Clone the repository on your machine:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:61
msgid "Build it:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:73
msgid "Preparing the SDK"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:75
msgid "Mount the XCode image:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:84
msgid "Extract the iOS SDK:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:93
msgid "Pack the SDK:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:101
msgid "Toolchain"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:103
msgid "Build cctools:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:111
msgid ""
"Copy the tools to a nicer place. Note that the SCons scripts for building "
"will look under ``usr/bin`` inside the directory you provide for the "
"toolchain binaries, so you must copy to such subdirectory, akin to the "
"following commands:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:121
msgid ""
"Now you should have the iOS toolchain binaries in ``/home/user/iostoolchain/"
"usr/bin``."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:125
msgid "Compiling Godot for iPhone"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:127
msgid ""
"Once you've done the above steps, you should keep two things in your "
"environment: the built toolchain and the iPhoneOS SDK directory. Those can "
"stay anywhere you want since you have to provide their paths to the SCons "
"build command."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:132
msgid ""
"For the iPhone platform to be detected, you need the ``OSXCROSS_IOS`` "
"environment variable defined to anything."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:139
msgid ""
"Now you can compile for iPhone using SCons like the standard Godot way, with "
"some additional arguments to provide the correct paths:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:148
msgid "Producing fat binaries"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:150
msgid ""
"Apple requires a fat binary with both architectures (``armv7`` and "
"``arm64``) in a single file. To do this, use the ``arm-apple-darwin11-lipo`` "
"executable. The following example assumes you are in the root Godot source "
"directory:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:162
msgid "Then you will have iOS fat binaries in ``bin`` directory."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:4
msgid "Compiling for Universal Windows Platform"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:10
msgid ""
"This page describes how to compile UWP export template binaries from source. "
"If you're looking to export your project to UWP instead, read :ref:"
"`doc_exporting_for_uwp`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:16
msgid "SCons 3.0+ (see :ref:`doc_compiling_for_windows` for more details)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:17
msgid ""
"Visual Studio 2017 or later. See :ref:`doc_compiling_for_windows` about the "
"caveats of installing it and the various prompts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:19
msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:20
msgid ""
"`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` "
"(default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:24
msgid ""
"The ANGLE repo by Microsoft has been discontinued and the ``ms_master`` "
"branch has been cleared out."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:27
msgid ""
"As a temporary workaround however, it is still possible to download an older "
"state of the source code via commit `c61d048 <https://github.com/microsoft/"
"angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:31
msgid ""
"This page will eventually be updated in the future to reflect the new build "
"instructions."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:43
msgid ""
"You need to open a proper Visual Studio prompt for the target architecture "
"you want to build. Check :ref:`doc_compiling_for_windows` to see how these "
"prompts work."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:47
msgid ""
"There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) "
"and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with "
"``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:51
msgid ""
"Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE "
"source code. The build process will also build ANGLE to produce the required "
"DLLs for the selected architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:55
msgid ""
"Once you're set, run the SCons command similarly to the other platforms::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:60
msgid "Creating UWP export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:62
msgid ""
"To export using the editor you need to properly build package the templates. "
"You need all three architectures with ``debug`` and ``release`` templates to "
"be able to export."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:66
msgid ""
"Open the command prompt for one architecture and run SCons twice (once for "
"each target)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:72
msgid "Repeat for the other architectures."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:74
msgid ""
"In the end your ``bin`` folder will have the ``.exe`` binaries with a name "
"like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/"
"arch)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:78
msgid ""
"Copy one of these to ``misc/dist/uwp_template`` inside the Godot source "
"folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, "
"under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, "
"``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, "
"putting them along with the executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:84
msgid ""
"Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting "
"Zip according to the target/architecture of the template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:94
msgid ""
"Move those templates to the ``[versionstring]\\templates`` folder in Godot "
"settings path, where `versionstring` is the version of Godot you have "
"compiled the export templates for - e.g. `3.0.alpha` for the alpha version "
"of Godot 3. If you don't want to replace the templates, you can set the "
"\"Custom Package\" property in the export window."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:101
msgid "Running UWP apps with Visual Studio"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:103
msgid ""
"If you want to debug the UWP port or simply run your apps without packaging "
"and signing, you can deploy and launch them using Visual Studio. It might be "
"the easiest way if you are testing on a device such as a Windows Phone or an "
"Xbox One."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:108
msgid ""
"Within the ANGLE source folder, open ``templates`` and double-click the "
"``install.bat`` script file. This will install the Visual Studio project "
"templates for ANGLE apps."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:112
msgid ""
"If you have not built Godot yet, open the ``winrt/10/src/angle.sln`` "
"solution from the ANGLE source and build it to Release/Win32 target. You may "
"also need to build it for ARM if you plan to run on a device. You can also "
"use MSBuild if you're comfortable with the command line."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:117
msgid ""
"Create a new Windows App project using the \"App for OpenGL ES (Windows "
"Universal)\" project template, which can be found under the ``Visual C++/"
"Windows/Universal`` category."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:121
msgid ""
"This is a base project with the ANGLE dependencies already set up. However, "
"by default it picks the debug version of the DLLs which usually have poor "
"performance. So in the \"Binaries\" filter, click in each of the DLLs there "
"and in the \"Properties\" window and change the relative path from "
"``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:127
msgid ""
"In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to "
"the Godot executable for UWP you have. In the \"Properties\" window, set "
"\"Content\" to ``True`` so it's included in the project."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:131
msgid ""
"Right-click the ``Package.appxmanifest`` file and select \"Open With... > "
"XML (Text) Editor\". In the ``Package/Applications/Application`` element, "
"replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to "
"``godot.uwp.exe`` (or whatever your Godot executable is called). Also change "
"the ``EntryPoint`` attribute to ``GodotUWP.App``. This will ensure that the "
"Godot executable is correctly called when the app starts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:138
msgid ""
"Create a folder (*not* a filter) called ``game`` in your Visual Studio "
"project folder and there you can put either a ``data.pck`` file or your "
"Godot project files. After that, make sure to include it all with the \"Add "
"> Existing Item\" command and set their \"Content\" property to ``True`` so "
"they're copied to the app."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:144
msgid ""
"To ease the workflow, you can open the \"Solution Properties\" and in the "
"\"Configuration\" section untick the \"Build\" option for the app. You still "
"have to build it at least once to generate some needed files, you can do so "
"by right-clicking the project (*not* the solution) in the \"Solution "
"Explorer\" and selecting \"Build\"."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:150
msgid ""
"Now you can just run the project and your app should open. You can also use "
"the \"Start Without Debugging\" option from the \"Debug\" menu (or press :"
"kbd:`Ctrl + F5`) to make it launch faster."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:4
msgid "Compiling for the Web"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:8
msgid ""
"This page describes how to compile HTML5 editor and export template binaries "
"from source. If you're looking to export your project to HTML5 instead, "
"read :ref:`doc_exporting_for_web`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:16
msgid "To compile export templates for the Web, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:18
msgid "`Emscripten 1.39.9+ <https://emscripten.org>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:19
msgid "`Python 3.5+ <https://www.python.org/>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:20
msgid "`SCons 3.0+ <https://www.scons.org>`__ build system."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:31
msgid ""
"Before starting, confirm that ``emcc`` is available in your PATH. This is "
"usually configured by the Emscripten SDK, e.g. when invoking ``emsdk "
"activate`` and ``source ./emsdk_env.sh``/``emsdk_env.bat``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:35
msgid ""
"Open a terminal and navigate to the root directory of the engine source "
"code. Then instruct SCons to build the JavaScript platform. Specify "
"``target`` as either ``release`` for a release build or ``release_debug`` "
"for a debug build::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:42
msgid ""
"By default, the :ref:`JavaScript singleton <doc_javascript_eval>` will be "
"built into the engine. Official export templates also have the JavaScript "
"singleton enabled. Since ``eval()`` calls can be a security concern, the "
"``javascript_eval`` option can be used to build without the singleton::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:50
msgid ""
"The engine will now be compiled to WebAssembly by Emscripten. Once finished, "
"the resulting file will be placed in the ``bin`` subdirectory. Its name is "
"``godot.javascript.opt.zip`` for release or ``godot.javascript.opt.debug."
"zip`` for debug."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:55
msgid ""
"Finally, rename the zip archive to ``webassembly_release.zip`` for the "
"release template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:60
msgid "And ``webassembly_debug.zip`` for the debug template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:65
msgid "Threads and GDNative"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:67
msgid ""
"The default export templates do not include threads and GDNative support for "
"performance and compatibility reasons. See the :ref:`export page "
"<doc_javascript_export_options>` for more info."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:71
msgid ""
"You can build the export templates using the option ``threads_enabled=yes`` "
"or ``gdnative_enabled=yes`` to enable threads or GDNative support::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:80
msgid ""
"Once finished, the resulting file will be placed in the ``bin`` "
"subdirectory. Its name will have either the ``.threads`` or ``.gdnative`` "
"suffix."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:83
msgid ""
"Finally, rename the zip archives to ``webassembly_release_threads.zip`` and "
"``webassembly_release_gdnative.zip`` for the release template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:89
msgid ""
"And ``webassembly_debug_threads.zip`` and ``webassembly_debug_gdnative.zip`` "
"for the debug template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:96
msgid "Building the Editor"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:98
msgid ""
"It is also possible to build a version of the Godot editor that can run in "
"the browser. The editor version requires threads support and is not "
"recommended over the native build. You can build the editor with::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:104
msgid ""
"Once finished, the resulting file will be placed in the ``bin`` "
"subdirectory. Its name will be ``godot.javascript.opt.tools.threads.zip``. "
"You can upload the zip content to your web server and visit it with your "
"browser to use the editor."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:108
msgid ""
"Refer to the :ref:`export page <doc_javascript_export_options>` for the web "
"server requirements."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:4
msgid "Compiling with Mono"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:11
msgid "Mono 6.12.0 or greater"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:12
msgid "MSBuild"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:13
msgid "NuGet"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:14
msgid "**On Linux/macOS only:** pkg-config"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:16
msgid ""
"You may need to import necessary certificates for NuGet to perform HTTPS "
"requests."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:19
msgid ""
"The recommended method is to use **curl**'s CA (Certificate Authorities) "
"certificate bundle."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:21
msgid ""
"Run the following commands to download and import it. On Windows, you can "
"run it from the Mono command line prompt (or the regular prompt if you added "
"Mono's ``bin`` directory to your ``PATH`` environment variable)::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:29
msgid ""
"Alternatively, you can use the following command, though it's deprecated and "
"may not work correctly::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:34
msgid "Environment variables"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:36
msgid ""
"By default, SCons will try to find Mono in the Windows Registry on Windows "
"or via ``pkg-config`` on other platforms. You can specify a different "
"installation directory by passing the ``mono_prefix`` command-line option to "
"SCons; e.g. ``scons [...] mono_prefix=%ProgramFiles%/Mono``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:41
msgid ""
"This is the directory that contains the subdirectories ``include`` and "
"``lib``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:44
msgid "Enable the Mono module"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:46
msgid ""
"By default, the Mono module is disabled when building. To enable it, add the "
"option ``module_mono_enabled=yes`` to the SCons command line."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:50
msgid "Generate the glue"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:52
msgid ""
"Glue sources are the wrapper functions that will be called by managed "
"methods. These source files must be generated before building your final "
"binaries. In order to generate them, first, you must build a temporary Godot "
"binary with the options ``tools=yes`` and ``mono_glue=no``::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:59
msgid ""
"After the build finishes, you need to run the compiled executable with the "
"parameter ``--generate-mono-glue`` followed by the path to an output "
"directory. This path must be ``modules/mono/glue`` in the Godot directory::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:65
msgid ""
"This command will tell Godot to generate the file ``modules/mono/glue/"
"mono_glue.gen.cpp``, the C# solution for the Godot API at ``modules/mono/"
"glue/GodotSharp/GodotSharp/Generated``, and the C# solution for the editor "
"tools at ``modules/mono/glue/GodotSharp/GodotSharpEditor/Generated``. Once "
"these files are generated, you can build Godot for all the desired targets "
"without having to repeat this process."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:71
msgid ""
"``<godot_binary>`` refers to the tools binary you compiled above with the "
"Mono module enabled. Its exact name will differ based on your system and "
"configuration, but should be of the form ``bin/godot.<platform>.tools.<bits>."
"mono``, e.g. ``bin/godot.x11.tools.64.mono`` or ``bin/godot.windows.tools.64."
"mono.exe``. Be especially aware of the **.mono** suffix! If you've "
"previously compiled Godot without Mono support, you might have similarly "
"named binaries without this suffix. These binaries can't be used to generate "
"the Mono glue."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:83
msgid ""
"**Do not build your final binaries with** ``mono_glue=no``. This disables C# "
"scripting. This option must be used only for the temporary binary that will "
"generate the glue. Godot will print a warning at startup if it was built "
"without the glue sources."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:87
msgid ""
"The glue sources must be regenerated every time the ClassDB-registered API "
"changes. That is, for example, when a new method is registered to the "
"scripting API or one of the parameters of such a method changes. Godot will "
"print an error at startup if there is an API mismatch between ClassDB and "
"the glue sources."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:95
msgid "Rebuild with Mono glue"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:97
msgid ""
"Once you have generated the Mono glue, you can build the final binary with "
"``mono_glue=yes``. This is the default value for ``mono_glue``, so you can "
"also omit it. To build a Mono-enabled editor::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:103
msgid "And Mono-enabled export templates::"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:107
msgid ""
"If everything went well, apart from the normal output, SCons should have "
"created the following files in the ``bin`` directory:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:110
msgid ""
"If you're not linking the Mono runtime statically, the build script will "
"place the Mono runtime shared library (``monosgen-2.0``) next to the Godot "
"binary in the output directory. Make sure to include this library when "
"distributing Godot. When targeting Android, no extra steps are required as "
"this library is automatically copied to ``#platform/android/java/libs`` and "
"Gradle takes care of the rest."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:116
msgid ""
"Unlike \"classical\" Godot builds, when building with the Mono module "
"enabled (and depending on the target platform), a data directory may be "
"created both for the editor and for export templates. This directory is "
"important for proper functioning and must be distributed together with "
"Godot. More details about this directory in :ref:`Data "
"directory<compiling_with_mono_data_directory>`."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:127
msgid "Example (Windows)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:144
msgid "Example (X11)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:163
msgid "Data directory"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:165
msgid ""
"The data directory is a dependency for Godot binaries built with the Mono "
"module enabled. It contains important files for the correct functioning of "
"Godot. It must be distributed together with the Godot executable."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:169
msgid ""
"The information below doesn't apply for Android, iOS and WASM, as there is "
"no data directory for these platforms."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:175
msgid ""
"The name of the data directory for an export template differs based on the "
"configuration it was built with. The format is ``data.mono.<platform>.<bits>."
"<target>``, e.g. ``data.mono.x11.32.release_debug`` or ``data.mono."
"windows.64.release``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:180
msgid ""
"This directory must be placed with its original name next to the Godot "
"export templates. When exporting a project, Godot will also copy this "
"directory with the game executable but the name will be changed to "
"``data_<APPNAME>``, where ``<APPNAME>`` is the application name as specified "
"in the project setting ``application/config/name``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:186
msgid ""
"In the case of macOS, where the export template is compressed as a ZIP "
"archive, the contents of the data directory can be placed in the following "
"locations inside the ZIP archive:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:191
#: ../../docs/development/compiling/compiling_with_mono.rst:213
msgid "``bin/data.mono.<platform>.<bits>.<target>/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:191
msgid "``/osx_template.app/Contents/Frameworks/GodotSharp/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:193
#: ../../docs/development/compiling/compiling_with_mono.rst:215
msgid "``bin/data.mono.<platform>.<bits>.<target>/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:193
msgid "``/osx_template.app/Contents/Resources/GodotSharp/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:199
msgid ""
"The name of the data directory for the Godot editor will always be "
"``GodotSharp``. The contents of this directory are the following:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:202
msgid "``Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:203
msgid "``Mono`` (optional)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:204
msgid "``Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:206
msgid ""
"The ``Api`` subdirectory contains the Godot API assemblies. On macOS, if the "
"Godot editor is distributed as a bundle, the contents of the data directory "
"may be placed in the following locations:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:211
msgid "``bin/data.mono.<platform>.<bits>.<target>/Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:211
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:213
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:215
msgid "``<bundle_name>.app/Contents/Resources/GodotSharp/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:217
msgid "``bin/data.mono.<platform>.<bits>.<target>/Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:217
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:220
msgid ""
"The ``Mono`` subdirectory is optional. It will be needed when distributing "
"the editor, as issues can arise when the user-installed Mono version isn't "
"identical to the one the Godot editor was built with. Pass "
"``copy_mono_root=yes`` to SCons when building the editor in order to create "
"this folder and its contents."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:225
msgid ""
"The ``Tools`` subdirectory contains tools required by the editor, like the "
"``GodotTools`` assemblies and its dependencies."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:229
msgid "Building the Mono runtime"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:231
msgid ""
"When building Godot for the desktop, you will likely use the pre-built Mono "
"runtime that is installed on your system. This likely won't be the case when "
"targeting other platforms like Android, iOS and WebAssembly. You will have "
"to build the Mono runtime yourself for those platforms."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:236
msgid ""
"We recommend using these `build scripts <https://github.com/godotengine/"
"godot-mono-builds>`_. They simplify this process but also include some "
"patches needed for proper functioning with Godot. See the README on the link "
"above for instructions on how to use the scripts."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:242
msgid "Targeting Android"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:244
msgid ""
"Compiling the Android export templates with Mono is a bit simpler than it is "
"for the desktop platforms, as there are no additional steps required after "
"building. There is no need to worry about run-time dependencies like a data "
"directory or the shared library (when dynamically linking) as those are "
"automatically added to the Gradle project."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:250
msgid ""
"Once you've built Mono, you can proceed to build Godot with the instructions "
"described in this page and the :ref:`Compiling for "
"Android<doc_compiling_for_android>` page. Make sure to let SCons know about "
"the location of the Mono runtime you've just built, e.g.: ``scons [...] "
"mono_prefix=\"$HOME/mono-installs/android-armeabi-v7a-release\"`` (This path "
"may be different on your system)."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:258
msgid "Targeting iOS"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:260
msgid ""
"Once you've built Mono, you can proceed to build Godot with the instructions "
"described in this page and the :ref:`Compiling for "
"iOS<doc_compiling_for_ios>` page. Make sure to let SCons know about the "
"location of the Mono runtime you've just built, e.g.: ``scons [...] "
"mono_prefix=\"$HOME/mono-installs/ios-arm64-release\"`` (This path may be "
"different on your system)."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:267
msgid ""
"After building Godot for each architecture, you will notice SCons has copied "
"the Mono libraries for each of them to the output directory:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:280
msgid ""
"The last three are only for iOS devices and are not available for the iOS "
"simulator."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:282
msgid ""
"These libraries must be put in universal (multi-architecture) \"fat\" files "
"to be distributed with the export templates."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:285
msgid ""
"The following bash script will create the \"fat\" libraries in the directory "
"``#bin/ios/iphone-mono-libs``:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:301
msgid ""
"The ``iphone-mono-libs`` folder must be distributed with the export "
"templates. The Godot editor will look for the libraries in ``<templates>/"
"iphone-mono-libs/lib<name>.iphone.fat.a``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:305
msgid "Targeting WebAssembly"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:307
msgid ""
"Building for WebAssembly currently involves the same process regardless of "
"whether the Mono module is enabled."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:309
msgid ""
"Once you've built Mono, you can proceed to build Godot with the instructions "
"described in this page and the :ref:`Compiling for the "
"Web<doc_compiling_for_web>` page. Make sure to let SCons know about the "
"location of the Mono runtime you've just built, e.g.: ``scons [...] "
"mono_prefix=\"$HOME/mono-installs/wasm-runtime-release\"`` (This path may be "
"different on your system)."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:317
msgid "Base Class Library"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:319
msgid ""
"The export templates must also include the BCL (Base Class Library) for each "
"target platform. Godot looks for the BCL folder at ``<templates>/bcl/"
"<target_platform>``, where ``<target_platform>`` is the same name passed to "
"the SCons ``platform`` option, e.g.: ``<templates>/bcl/windows``, "
"``<templates>/bcl/javascript``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:324
msgid "Alternatively, Godot will look for them in the following locations:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:327
msgid "``<templates>/bcl/monodroid``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:329
msgid "``<templates>/bcl/monotouch``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:331
msgid "WebAssembly"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:331
msgid "``<templates>/bcl/wasm``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:333
msgid "Linux and macOS"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:333
msgid "``<templates>/bcl/net_4_x``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:335
msgid "``<templates>/bcl/net_4_x_win``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:338
msgid ""
"As of now, we're assuming the same BCL profile can be used for both Linux "
"and macOS, but this may change in the future as they're not guaranteed to be "
"the same (as is the case with the Windows BCL)."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:342
msgid ""
"If the target platform is the same as the platform of the Godot editor, then "
"the editor will use the BCL it's running on (``<data_folder>/Mono/lib/"
"mono/4.5``) if it cannot find the BCL in the export templates."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:347
msgid "AOT cross-compilers"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:349
msgid ""
"To perform ahead-of-time (AOT) compilation for other platforms, Godot needs "
"to have access to the Mono cross-compilers for that platform and "
"architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:352
msgid ""
"Godot will look for the cross-compiler executable in the AOT compilers "
"folder. The location of this folder is ``<data_folder>/Tools/aot-compilers/"
"``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:355
msgid ""
"In order to build the cross-compilers we recommend using these `build "
"scripts <https://github.com/godotengine/godot-mono-builds>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:358
msgid ""
"After building them, copy the executable to the Godot AOT compilers "
"directory. The executable name is ``<triple>-mono-sgen``, e.g.: ``aarch64-"
"apple-darwin-mono-sgen``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:362
msgid "Command-line options"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:364
msgid ""
"The following is the list of command-line options available when building "
"with the Mono module:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:367
msgid "**module_mono_enabled**\\ =yes | **no**"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:369
msgid "Build Godot with the Mono module enabled."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:371
msgid "**mono_glue**\\ =\\ **yes** | no"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:373
msgid ""
"Whether to include the glue source files in the build and define "
"``MONO_GLUE_DISABLED`` as a preprocessor macro."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:376
msgid "**mono_prefix**\\ =path"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:378
msgid ""
"Path to the Mono installation directory for the target platform and "
"architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:380
msgid "**mono_static**\\ =yes | no"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:382
msgid "Whether to link the Mono runtime statically."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:383
msgid ""
"The default is **yes** for iOS and WASM, and **no** for other platforms."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:385
msgid "**copy_mono_root**\\ =yes | **no**"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:387
msgid ""
"Whether to copy the Mono framework assemblies and configuration files "
"required by the Godot editor."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:4
msgid "Optimizing a build for size"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:9
#: ../../docs/community/contributing/cpp_usage_guidelines.rst:7
msgid "Rationale"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:11
msgid ""
"Sometimes, it is desired to optimize a build for size rather than speed. "
"This means not compiling unused functions from the engine, as well as using "
"specific compiler flags to aid on decreasing build size. Common situations "
"include creating builds for mobile and Web platforms."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:16
msgid ""
"This tutorial aims to give an overview on different methods to create a "
"smaller binary. Before continuing, it is recommended to read the previous "
"tutorials on compiling Godot for each platform."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:20
msgid ""
"The options below are listed from the most important (greatest size savings) "
"to the least important (lowest size savings)."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:24
msgid "Stripping binaries"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:26
msgid "**Space savings:** Very high"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:27
#: ../../docs/development/compiling/optimizing_for_size.rst:56
#: ../../docs/development/compiling/optimizing_for_size.rst:72
#: ../../docs/development/compiling/optimizing_for_size.rst:96
#: ../../docs/development/compiling/optimizing_for_size.rst:113
msgid "**Difficulty:** Easy"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:28
#: ../../docs/development/compiling/optimizing_for_size.rst:73
msgid "**Performed in official builds:** Yes"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:30
msgid ""
"If you build Windows (MinGW), Linux or macOS binaries from source, remember "
"to strip debug symbols from binaries by installing the ``strip`` package "
"from your distribution then running:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:38
msgid "On Windows, ``strip.exe`` is included in most MinGW toolchain setups."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:40
msgid ""
"This will reduce the size of compiled binaries by a factor between 5× and "
"10×. The downside is that crash backtraces will no longer provide accurate "
"information (which is useful for troubleshooting the cause of a crash). :ref:"
"`C++ profilers <doc_using_cpp_profilers>` will also no longer be able to "
"display function names (this does not affect the built-in GDScript profiler)."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:48
msgid ""
"The above command will not work on Windows binaries compiled with MSVC and "
"platforms such as Android and HTML5. Instead, pass ``debug_symbols=no`` on "
"the SCons command line when compiling."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:53
msgid "Optimizing for size instead of speed"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:55
#: ../../docs/development/compiling/optimizing_for_size.rst:71
msgid "**Space savings:** High"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:57
msgid "**Performed in official builds:** Yes, but only for HTML5"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:59
msgid ""
"Godot 3.1 onwards allows compiling using size optimizations (instead of "
"speed). To enable this, set the ``optimize`` flag to ``size``:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:66
msgid "Some platforms such as WebAssembly already use this mode by default."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:69
msgid "Compiling with link-time optimization"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:75
msgid ""
"Enabling link-time optimization produces more efficient binaries, both in "
"terms of performance and file size. It works by eliminating duplicate "
"template functions and unused code. It can currently be used with the GCC "
"and MSVC compilers:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:84
msgid ""
"Linking becomes much slower and more RAM-consuming with this option, so it "
"should be used only for release builds:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:87
msgid ""
"When compiling the ``master`` branch, you need to have at least 8 GB of RAM "
"available for successful linking with LTO enabled."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:89
msgid ""
"When compiling the ``3.x`` branch, you need to have at least 6 GB of RAM "
"available for successful linking with LTO enabled."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:93
msgid "Disabling 3D"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:95
#: ../../docs/development/compiling/optimizing_for_size.rst:112
msgid "**Space savings:** Moderate"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:97
#: ../../docs/development/compiling/optimizing_for_size.rst:114
#: ../../docs/development/compiling/optimizing_for_size.rst:153
msgid "**Performed in official builds:** No"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:99
msgid ""
"For 2D games, having the whole 3D engine available usually makes no sense. "
"Because of this, there is a build flag to disable it:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:105
msgid ""
"Tools must be disabled in order to use this flag, as the editor is not "
"designed to operate without 3D support. Without it, the binary size can be "
"reduced by about 15%."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:110
msgid "Disabling advanced GUI objects"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:116
msgid ""
"Most small games don't require complex GUI controls such as Tree, ItemList, "
"TextEdit or GraphEdit. They can be disabled using a build flag:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:123
msgid "This is everything that will be disabled:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:125
msgid "FileDialog"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:126
msgid "PopupMenu"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:127
msgid "Tree"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:128
msgid "TextEdit"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:129
msgid "TreeItem"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:130
msgid "OptionButton"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:131
msgid "SpinBox"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:132
msgid "ColorPicker"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:133
msgid "ColorPickerButton"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:134
msgid "RichTextLabel"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:135
msgid "RichTextEffect"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:136
msgid "CharFXTransform"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:137
msgid "PopupDialog"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:138
msgid "WindowDialog"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:139
msgid "AcceptDialog"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:140
msgid "ConfirmationDialog"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:141
msgid "MarginContainer"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:143
msgid "SplitContainer"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:144
msgid "HSplitContainer"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:145
msgid "GraphNode"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:146
msgid "GraphEdit"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:149
msgid "Disabling unwanted modules"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:151
msgid "**Space savings:** Very low to moderate depending on modules"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:152
msgid "**Difficulty:** Medium to hard depending on modules"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:155
msgid ""
"A lot of Godot's functions are offered as modules. You can see a list of "
"modules with the following command:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:162
msgid ""
"The list of modules that can be disabled will appear, together with all "
"build options. If you are working on a simple 2D game, you could disable a "
"lot of them:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:170
msgid ""
"If this proves not to work for your use case, you should review the list of "
"modules and see which ones you actually still need for your game (e.g. you "
"might want to keep networking-related modules, regex support, or theora/webm "
"to play videos)."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:175
msgid ""
"Alternatively, you can supply a list of disabled modules by creating "
"``custom.py`` at the root of the source, with the contents similar to the "
"following:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:218
msgid ":ref:`doc_overriding_build_options`."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:4
msgid "Compiling with script encryption key"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:8
msgid ""
"The export dialog gives you the option to encrypt your scripts with a 256-"
"bit AES key when releasing your project. This will make sure your scripts "
"are not stored in plain text and can not easily be ripped by some script "
"kiddie."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:12
msgid ""
"Of course, the key needs to be stored in the binary, but if it's compiled, "
"optimized and without symbols, it would take some effort to find it."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:15
msgid ""
"For this to work, you need to build the export templates from source, with "
"that same key."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:20
msgid ""
"This will **not** work if you use official, precompiled export templates. It "
"is absolutely **required** to compile your own export templates to use PCK "
"encryption."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:27
msgid ""
"Generate a 256-bit AES key in hexadecimal format. You can use the aes-256-"
"cbc variant from `this service <https://asecuritysite.com/encryption/"
"keygen>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:30
msgid ""
"Alternatively, you can generate it yourself using `OpenSSL <https://www."
"openssl.org/>`__ command-line tools:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:37
msgid "The output in ``godot.gdkey`` should be similar to:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:44
msgid ""
"You can generate the key without redirecting the output to a file, but that "
"way you can minimize the risk of exposing the key."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:47
msgid ""
"Set this key as environment variable in the console that you will use to "
"compile Godot, like this:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:63
msgid ""
"Compile Godot export templates and set them as custom export templates in "
"the export preset options."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:66
msgid "Set the encryption key in the **Script** tab of the export preset:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:70
msgid "Export the project. The game should run with encrypted scripts now."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:75
msgid ""
"If you get an error like below, it means the key wasn't properly included in "
"your Godot build. Godot is encrypting the scripts during export, but can't "
"read them at runtime."
msgstr ""

#: ../../docs/development/cpp/index.rst:5
msgid "Setting up a development environment"
msgstr ""

#: ../../docs/development/cpp/index.rst:7
msgid ""
"To modify Godot's source code, you need to set up a development environment. "
"Start here."
msgstr ""

#: ../../docs/development/cpp/index.rst:16
msgid "Getting started with Godot's source code"
msgstr ""

#: ../../docs/development/cpp/index.rst:18
msgid ""
"This section covers the basics that you will encounter in (almost) every "
"source file."
msgstr ""

#: ../../docs/development/cpp/index.rst:32
msgid "Extending Godot by modifying its source code"
msgstr ""

#: ../../docs/development/cpp/index.rst:34
msgid ""
"This section covers what you can do by modifying Godot's C++ source code."
msgstr ""

#: ../../docs/development/cpp/index.rst:47
msgid "Debugging and profiling"
msgstr ""

#: ../../docs/development/cpp/index.rst:49
msgid ""
"This section is about finding spots to optimize in the engine code when you "
"need it in your project."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/index.rst:2
msgid "Configuring an IDE"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/index.rst:4
msgid ""
"We assume that you have already `cloned <https://github.com/godotengine/"
"godot>`_ and :ref:`compiled <toc-devel-compiling>` Godot."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/index.rst:7
msgid ""
"You can easily develop Godot with any text editor and by invoking ``scons`` "
"on the command line, but if you want to work with an IDE (Integrated "
"Development Environment), here are setup instructions for some popular ones:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/index.rst:24
msgid ""
"It is possible to use other IDEs, but their setup is not documented yet."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:4
msgid "Android Studio"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:6
msgid ""
"`Android Studio <https://developer.android.com/studio>`_ is a free "
"`JetBrains <https://www.jetbrains.com/>`_ IDE for Android development. It "
"has a feature-rich editor which supports Java and C/C++. It can be used to "
"work on Godot's core engine as well as the Android platform codebase."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:12
#: ../../docs/development/cpp/configuring_an_ide/clion.rst:10
#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:9
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:9
#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:12
#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:10
#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:10
msgid "Importing the project"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:14
msgid ""
"From the Android Studio's welcome window select **Open an existing Android "
"Studio project**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:21
msgid "Android Studio's welcome window."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:23
msgid ""
"Navigate to ``<Godot root directory>/platform/android/java`` and select the "
"``settings.gradle`` file."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:24
msgid "Android Studio will import and index the project."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:25
msgid ""
"To build the project, follow the :ref:`compiling instructions <toc-devel-"
"compiling>`."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/android_studio.rst:27
#: ../../docs/development/cpp/configuring_an_ide/clion.rst:43
#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:86
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:110
#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:67
#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:152
#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:109
msgid ""
"If you run into any issues, ask for help in one of `Godot's community "
"channels <https://godotengine.org/community>`__."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:4
msgid "CLion"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:6
msgid ""
"`CLion <https://www.jetbrains.com/clion/>`_ is a commercial `JetBrains "
"<https://www.jetbrains.com/>`_ IDE for C++."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:12
msgid ""
"CLion requires a ``CMakeLists.txt`` file as a project file, which is "
"problematic for Godot because it uses the SCons buildsystem instead of "
"CMake. However, there is a ``CMakeLists.txt`` configuration for :ref:"
"`Android Studio <doc_configuring_an_ide_android_studio>` which can also be "
"used by CLion."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:17
msgid ""
"From the CLion's welcome window choose the option to import an existing "
"project. If you've already opened another project, choose **File > Open** "
"from the top menu."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:20
msgid ""
"Navigate to ``<Godot root directory>/platform/android/java/"
"nativeSrcsConfigs`` (the ``CMakeLists.txt`` file is located there) and "
"select it (but *not* the ``CMakeLists.txt`` file itself), then click **OK**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:27
msgid "The folder containing the ``CMakeLists.txt`` file."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:29
msgid ""
"If this popup window appears, select **This Window** to open the project:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:34
msgid ""
"Choose **Tools > CMake > Change Project Root** from the top menu and select "
"the Godot root folder."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:40
msgid ""
"You should be now be able to see all the project files. Autocomplete should "
"work once the project has finished indexing."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:47
#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:69
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:73
#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:30
#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:56
#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:72
msgid "Debugging the project"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:49
msgid ""
"Since CLion does not support SCons, you won't be able to compile, launch, "
"and debug Godot from CLion in one step. You will first need to `compile "
"godot yourself <https://docs.godotengine.org/en/stable/development/compiling/"
"index.html>`__ and run the binary without CLion. You will then be able to "
"debug Godot by using the `Attach to process <https://www.jetbrains.com/help/"
"clion/attaching-to-local-process.html>`__ feature."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:52
msgid "Run the compilation in debug mode by entering ``scons``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:54
msgid ""
"Run the binary you have created (in the bin directory). If you want to debug "
"a specific project, run the binary with the following arguments : ``--editor "
"--path path/to/your/godot/project``. To run the project instead of editing "
"it, remove the ``--editor`` argument."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:56
msgid "In CLion, go to **Run > Attach to Process...**"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:61
msgid "Find and Select godot in the list (or type the binary name/Process ID)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:66
msgid "You can now use the debugging tools from CLion."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/clion.rst:70
msgid ""
"If you run the binary without any arguments, you will only debug the project "
"manager window. Don't forget to add the ``--path path/to/your/godot/"
"project`` argument to debug a project."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:4
msgid "Code::Blocks"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:6
msgid ""
"`Code::Blocks <https://codeblocks.org/>`_ is a free, open source, cross "
"platform IDE."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:9
msgid "Creating a new project"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:11
msgid ""
"From Code::Blocks' main screen, click **Create a new project** or select "
"**File > New > Project...**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:17
msgid ""
"In the **New from template** window, from **Projects**, select **Empty "
"project**, and click **Go**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:23
msgid "Click Next, to pass the welcome to the new empty project wizard."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:29
msgid ""
"The project file should be created in the root of the cloned project folder. "
"To achieve this, first, ensure that the **Project title** is the same as the "
"folder name that Godot was cloned into. Unless you cloned the project into a "
"folder with a different name, this will be ``godot``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:31
msgid ""
"Second, ensure that the **Folder to create project in** is the folder you "
"ran the Git clone command from, not the ``godot`` project folder. Confirm "
"that the **Resulting filename** field will create the project file in the "
"root of the cloned project folder."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:37
msgid ""
"The compiler and configuration settings are managed through **SCons** and "
"will be configured later. However, it's worth deselecting the **Create "
"\"Release\" configuration** option; so only a single build target is created "
"before clicking **Finish**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:44
msgid "Configuring the build"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:46
msgid ""
"The first step is to change the project properties. Right-click on the new "
"project and select **Properties...**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:52
msgid ""
"Check the **This is a custom Makefile** property. Click OK to save the "
"changes."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:58
msgid ""
"The next step is to change the build options. Right-click on the new project "
"and select **Build Options...**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:64
msgid ""
"Select the **\"Make\" commands** tab and remove all the existing commands "
"for all the build targets. For each build target enter the **SCons** command "
"for creating the desired build in the **Build project/target** field. The "
"minimum is ``scons``. For details on the **SCons** build options, see :ref:"
"`doc_introduction_to_the_buildsystem`. It's also useful to add the ``scons --"
"clean`` command in the **Clean project/target** field to the project's "
"default commmands."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:66
msgid ""
"If you're using Windows, all the commands need to be preceded with ``cmd /"
"c`` to iniitalize the command interpreter."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:76
msgid "Windows example:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:82
msgid ""
"Code::Blocks should now be configured to build Godot; so either select "
"**Build > Build**, click the gear button, or press :kbd:`Ctrl + F9`."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:85
msgid "Configuring the run"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:87
msgid ""
"Once **SCons** has successfully built the desired target, reopen the project "
"**Properties...** and select the **Build targets** tab. In the **Output "
"filename** field, browse to the ``bin`` folder and select the compiled file."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:89
msgid ""
"Deselect the **Auto-generate filename prefix** and **Auto-generate filename "
"extension** options."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:95
msgid ""
"Code::Blocks should now be configured to run your compiled Godot executable; "
"so either select **Build > Run**, click the green arrow button, or press :"
"kbd:`Ctrl + F10`."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:97
msgid ""
"There are two additional points worth noting. First, if required, the "
"**Execution working dir** field can be used to test specific projects, by "
"setting it to the folder containing the ``project.godot`` file. Second, the "
"**Build targets** tab can be used to add and remove build targets for "
"working with and creating different builds."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:100
msgid "Adding files to the project"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:102
msgid ""
"To add all the Godot code files to the project, right-click on the new "
"project and select **Add files recursively...**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:108
msgid ""
"It should automatically select the project folder; so simply click **Open**. "
"By default, all code files are included, so simply click **OK**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:115
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:91
msgid "Code style configuration"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:117
msgid ""
"Before editing any files, remember that all code needs to comply with the :"
"ref:`doc_code_style_guidelines`. One important difference with Godot is the "
"use of tabs for indents. Therefore, the key default editor setting that "
"needs to be changed in Code::Blocks is to enable tabs for indents. This "
"setting can be found by selecting **Settings > Editor**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:123
msgid ""
"Under **General Settings**, on the **Editor Settings** tab, under **Tab "
"Options** check **Use TAB character**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/code_blocks.rst:129
msgid ""
"That's it. You're ready to start contributing to Godot using the Code::"
"Blocks IDE. Remember to save the project file and the **Workspace**. If you "
"run into any issues, ask for help in one of `Godot's community channels "
"<https://godotengine.org/community>`__."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:4
msgid "KDevelop"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:6
msgid ""
"`KDevelop <https://www.kdevelop.org>`_ is a free, open source IDE for all "
"desktop platforms."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:11
msgid "From the KDevelop's main screen select **Open Project**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:17
msgid "KDevelop's main screen."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:19
msgid "Navigate to the Godot root folder and select it."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:20
msgid ""
"On the next screen, choose **Custom Build System** for the **Project "
"Manager**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:26
msgid ""
"After the project has been imported, open the project configuration by right-"
"clicking on it in the **Projects** panel and selecting **Open Configuration.."
"** option."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:33
msgid ""
"Under **Language Support** open the **Includes/Imports** tab and add the "
"following paths:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:49
msgid "Apply the changes."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:50
msgid ""
"Under **Custom Build System** add a new build configuration with the "
"following settings:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:53
msgid "Build Directory"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:53
msgid "*blank*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:55
msgid "**True**"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:57
msgid "Executable"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:57
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:59
msgid "**scons**"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:59
#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:61
#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:24
msgid ""
"See :ref:`doc_introduction_to_the_buildsystem` for a full list of arguments."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:66
msgid "Apply the changes and close the configuration window."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:71
msgid "Select **Run > Configure Launches...** from the top menu."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:77
msgid "Click **Add** to create a new launch configuration."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/kdevelop.rst:78
msgid ""
"Select **Executable** option and specify the path to your executable located "
"in the ``<Godot root directory>/bin`` folder. The name depends on your build "
"configuration, e.g. ``godot.x11.tools.64`` for 64-bit X11 platform with "
"``tools`` enabled."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:4
msgid "Qt Creator"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:6
msgid ""
"`Qt Creator <https://doc.qt.io/qtcreator/index.html>`_ is a free, open "
"source IDE for all desktop platforms."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:11
msgid ""
"From the Qt Creator's main screen select **New Project > Import Project > "
"Import Existing Project**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:17
msgid "Under **Location** select the Godot root folder."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:23
msgid ""
"Next, you can choose which folders and files will be visible to the project. "
"While C/C++ files are added automatically, other extensions can be "
"potentially useful: ``*.glsl`` for shader files, ``*.py`` for buildsystem "
"files, ``*.java`` for Android platform development, ``*.mm`` for macOS "
"platform development."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:32
msgid ""
"You can change this configuration later by right-clicking on your project "
"and selecting the **Edit Files...** option."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:40
msgid "Finish the import."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:41
msgid ""
"Open the ``project_name.includes`` file and add a line containing ``.`` to "
"it to correctly enable the code completion."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:48
msgid "From the left-side menu select **Projects** and open the **Build** tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:49
msgid "Delete the predefined ``make`` build step."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:55
msgid ""
"Click **Add Build Step > Custom Process Step** to add a new build step with "
"the following settings:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:68
msgid ""
"If the build fails with ``Could not start process \"scons\"``, it can mean "
"that ``scons`` is not in your ``PATH`` environment variable. In this case, "
"you'll have to specify the full path to the SCons binary."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:75
msgid "From the left-side menu select **Projects** and open the **Run** tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:76
msgid ""
"Under **Executable** specify the path to your executable located in the "
"``<Godot root directory>/bin`` folder. The name depends on your build "
"configuration, e.g. ``godot.x11.tools.64`` for 64-bit X11 platform with "
"``tools`` enabled. You can use ``%{buildDir}`` to reference the project "
"root, e.g: ``%{buildDir}/bin/godot.x11.opt.tools.64``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:80
msgid ""
"If you want to run a specific project, specify its root folder under "
"**Working directory**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:81
msgid ""
"If you want to run the editor, add ``-e`` to the **Command line arguments** "
"field."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:87
#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:55
msgid ""
"To learn more about command line arguments, refer to the :ref:`command line "
"tutorial <doc_command_line_tutorial>`."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:93
msgid ""
"Developers must follow the project's :ref:`code style "
"<doc_code_style_guidelines>` and the IDE should help them follow it. By "
"default, Qt Creator uses spaces for indentation which doesn't match the "
"Godot code style guidelines. You can change this behavior by changing the "
"**Code Style** in **Tools > Options > C++**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/qt_creator.rst:102
msgid ""
"Click on **Edit** to change the current settings, then click on **Copy Built-"
"in Code Style** button to set a new code style. Set a name for it (e.g. "
"Godot) and change the Tab policy to be **Tabs Only**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:4
msgid "Visual Studio"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:6
msgid ""
"`Visual Studio Community <https://visualstudio.microsoft.com>`__ is a "
"Windows-only IDE by `Microsoft <https://microsoft.com>`_ that's free for "
"individual use or non-commercial use within organizations. It has many "
"useful features, such as memory view, performance view, source control and "
"more."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:14
msgid ""
"Visual Studio requires a solution file to work on a project. While Godot "
"does not come with the solution file, it can be generated using SCons."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:17
msgid ""
"Navigate to the Godot root folder and open a Command Prompt or PowerShell "
"window."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:18
msgid "Run ``scons platform=windows vsproj=yes`` to generate the solution."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:19
msgid ""
"You can now open the project by double-clicking on the ``godot.sln`` in the "
"project root or by using the **Open a project or solution** option inside of "
"the Visual Studio."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:21
msgid "Use the **Build** top menu to build the project."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:23
msgid ""
"Visual Studio must be configured with the C++ package. It can be selected in "
"the intaller:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:32
msgid ""
"Visual Studio features a powerful debugger. This allows the user to examine "
"Godot's source code, stop at specific points in the code, inspect the "
"current execution context, and make live changes to the codebase."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:36
msgid ""
"You can launch the project with the debugger attached using the **Debug > "
"Start Debugging** option from the top menu. However, unless you want to "
"debug the project manager specifically, you'd need to configure debugging "
"options first. This is due to the fact that when the Godot project manager "
"opens a project, the initial process is terminated and the debugger gets "
"detached."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:41
msgid ""
"To configure the launch options to use with the debugger use **Project > "
"Properties** from the top menu:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:47
msgid ""
"Open the **Debugging** section and under **Command Arguments** add two new "
"arguments: the ``-e`` flag opens the editor instead of the project manager, "
"and the ``--path`` argument tells the executable to open the specified "
"project (must be provided as an *absolute* path to the project root, not the "
"``project.godot`` file)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:58
msgid ""
"Even if you start the project without a debugger attached it can still be "
"connected to the running process using **Debug > Attach to Process...** menu."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio.rst:61
msgid ""
"To check that everything is working, put a breakpoint in ``main.cpp`` and "
"press :kbd:`F5` to start debugging."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:6
msgid ""
"`Visual Studio Code <https://code.visualstudio.com>`_ is a free cross-"
"platform code editor by `Microsoft <https://microsoft.com>`_ (not to be "
"confused with :ref:`doc_configuring_an_ide_vs`)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:12
msgid ""
"Make sure the C/C++ extension is installed. You can find instructions in the "
"`official documentation <https://code.visualstudio.com/docs/languages/"
"cpp>`_. Alternatively, `clangd <https://open-vsx.org/extension/llvm-vs-code-"
"extensions/vscode-clangd>`_ can be used instead."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:16
msgid "When using the clangd extension, run ``scons compiledb=yes``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:17
msgid ""
"From the Visual Studio Code's main screen open the Godot root folder with "
"**File > Open Folder...**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:19
msgid ""
"Press :kbd:`Ctrl + Shift + P` to open the command prompt window and enter "
"*Configure Task*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:24
msgid "Select the **Create tasks.json file from template** option."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:29
msgid "Then select **Others**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:34
msgid ""
"Within the ``tasks.json`` file find the ``\"tasks\"`` array and add a new "
"section to it:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:50
msgid "An example of a filled out ``tasks.json``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:52
msgid ""
"Arguments can be different based on your own setup and needs. See :ref:"
"`doc_introduction_to_the_buildsystem` for a full list of arguments."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:58
msgid ""
"To run and debug the project you need to create a new configuration in the "
"``launch.json`` file."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:60
msgid "Press :kbd:`Ctrl + Shift + D` to open the Run panel."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:61
msgid ""
"If ``launch.json`` file is missing you will be prompted to create a new one."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:66
msgid ""
"Select **C++ (GDB/LLDB)**. There may be another platform specific option "
"here. If selected, adjust the configuration example provided accordingly."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:68
msgid ""
"Within the ``launch.json`` file find the ``\"configurations\"`` array and "
"add a new section to it:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:136
msgid "An example of a filled out ``launch.json``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:141
msgid ""
"Due to sporadic performance issues, it is recommended to use LLDB over GDB "
"on Unix-based systems. Make sure that the `CodeLLDB extension <https://"
"marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb>`_ is "
"installed."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:145
msgid ""
"If you encounter issues with lldb, you may consider using gdb (see the "
"X11_gdb configuration)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:147
msgid ""
"Do note that lldb may work better with llvm-based builds. See :ref:"
"`doc_compiling_for_x11` for further information."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/visual_studio_code.rst:149
msgid ""
"The name under ``program`` depends on your build configuration, e.g. ``godot."
"x11.tools.64`` for 64-bit X11 platform with ``tools`` enabled."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:4
msgid "Xcode"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:6
msgid ""
"`Xcode <https://developer.apple.com/xcode>`_ is a free macOS-only IDE. You "
"can download it from the Mac App Store."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:12
msgid ""
"From Xcode's main screen create a new project using the **Other > External "
"Build System** template."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:18
msgid ""
"Open your build targets from the **Targets** section and select the **Info** "
"tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:19
msgid "Fill out the form with the following settings:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:22
msgid "Build Tool"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:22
msgid "A full path to the **scons** executable, e.g. **/usr/local/bin/scons**"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:26
msgid "Directory"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:26
msgid "A full path to the Godot root folder"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:33
msgid ""
"Add a Command Line Tool target which will be used for indexing the project "
"by choosing **File > New > Target...**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:40
msgid "Select **OS X > Application > Command Line Tool**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:46
msgid ""
"Name it something so you know not to compile with this target (e.g. "
"``GodotXcodeIndex``)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:48
msgid ""
"For this target open the **Build Settings** tab and look for **Header Search "
"Paths**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:49
msgid ""
"Set **Header Search Paths** to the absolute path to the Godot root folder. "
"You need to include subdirectories as well. To achieve that, add two two "
"asterisks (``**``) to the end of the path, e.g. ``/Users/me/repos/godot-"
"source/**``."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:53
msgid ""
"Add the Godot source to the project by dragging and dropping it into the "
"project file browser."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:54
msgid "Uncheck **Create external build system project**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:60
msgid ""
"Next select **Create groups** for the **Added folders** option and check "
"*only* your command line indexing target in the **Add to targets** section."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:67
msgid "Xcode will now index the files. This may take a few minutes."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:68
msgid ""
"Once Xcode is done indexing, you should have jump-to-definition, "
"autocompletion, and full syntax highlighting."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:74
msgid ""
"To enable debugging support you need to edit the external build target's "
"build and run schemes."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:76
msgid "Open the scheme editor of the external build target."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:77
msgid "Locate the **Build > Post Actions** section."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:78
msgid "Add a new script run action"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:79
msgid ""
"Under **Provide build settings from** select your project. This allows to "
"reference the project directory within the script."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:81
msgid ""
"Create a script that will give the binary a name that Xcode can recognize, e."
"g.:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:91
msgid "Build the external build target."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:93
msgid "Open the scheme editor again and select **Run**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:99
msgid ""
"Set the **Executable** to the file you linked in your post-build action "
"script."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:100
msgid "Check **Debug executable**."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:101
msgid ""
"You can add two arguments on the **Arguments** tab: the ``-e`` flag opens "
"the editor instead of the project manager, and the ``--path`` argument tells "
"the executable to open the specified project (must be provided as an "
"*absolute* path to the project root, not the ``project.godot`` file)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide/xcode.rst:106
msgid ""
"To check that everything is working, put a breakpoint in ``platform/osx/"
"godot_main_osx.mm`` and run the project."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:4
msgid "Introduction to Godot development"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:6
msgid ""
"This page is meant to introduce the global organization of Godot Engine's "
"source code, and give useful tips for extending/fixing the engine on the C++ "
"side."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:11
msgid "Architecture diagram"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:13
msgid ""
"The following diagram describes the architecture used by Godot, from the "
"core components down to the abstracted drivers, via the scene structure and "
"the servers."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:20
msgid "Debugging the editor with gdb"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:22
msgid ""
"If you are writing or correcting bugs affecting Godot Engine's editor, "
"remember that the binary will by default run the project manager first, and "
"then only run the editor in another process once you've selected a project. "
"To launch a project directly, you need to run the editor by passing the ``-"
"e`` argument to Godot Engine's binary from within your project's folder. "
"Typically:"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:35
msgid "Or:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:4
msgid "Common engine methods and macros"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:6
msgid ""
"Godot's C++ codebase makes use of dozens of custom methods and macros which "
"are used in almost every file. This page is geared towards beginner "
"contributors, but it can also be useful for those writing custom C++ modules."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:11
msgid "Print text"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:31
msgid ""
"If you need to add placeholders in your messages, use format strings as "
"described below."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:35
msgid "Format a string"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:37
msgid ""
"The ``vformat()`` function returns a formatted :ref:`class_String`. It "
"behaves in a way similar to C's ``sprintf()``:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:51
msgid ""
"In most cases, try to use ``vformat()`` instead of string concatenation as "
"it makes for more readable code."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:55
msgid "Convert an integer or float to a string"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:57
msgid "This is mainly useful when printing numbers directly."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:68
msgid "Internationalize a string"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:70
msgid "There are two types of internationalization in Godot's codebase:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:72
msgid ""
"``TTR()``: **Editor (\"tools\") translations** will only be processed in the "
"editor. If a user uses the same text in one of their projects, it won't be "
"translated if they provide a translation for it. When contributing to the "
"engine, this is generally the macro you should use for localizable strings."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:76
msgid ""
"``RTR()``: **Run-time translations** will be automatically localized in "
"projects if they provide a translation for the given string. This kind of "
"translation shouldn't be used in editor-only code."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:87
msgid ""
"To insert placeholders in localizable strings, wrap the localization macro "
"in a ``vformat()`` call as follows:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:97
msgid ""
"When using ``vformat()`` and a translation macro together, always wrap the "
"translation macro in ``vformat()``, not the other way around. Otherwise, the "
"string will never match the translation as it will have the placeholder "
"already replaced when it's passed to TranslationServer."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:103
msgid "Clamp a value"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:105
msgid ""
"Godot provides macros for clamping a value with a lower bound (``MAX``), an "
"upper bound (``MIN``) or both (``CLAMP``):"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:117
msgid ""
"This works with any type that can be compared to other values (like ``int`` "
"and ``float``)."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:121
msgid "Microbenchmarking"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:123
msgid ""
"If you want to benchmark a piece of code but don't know how to use a "
"profiler, use this snippet:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:135
msgid ""
"This will print the time spent between the ``begin`` declaration and the "
"``end`` declaration."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:140
msgid ""
"You may have to ``#include \"core/os/os.h\"`` if it's not present already."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:142
msgid ""
"When opening a pull request, make sure to remove this snippet as well as the "
"include if it wasn't there previously."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:146
msgid "Get project/editor settings"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:148
msgid "There are four macros available for this:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:160
msgid ""
"If a default value has been specified elsewhere, don't specify it again to "
"avoid repetition:"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:170
msgid ""
"It's recommended to use ``GLOBAL_DEF``/``EDITOR_DEF`` only once per setting "
"and use ``GLOBAL_GET``/``EDITOR_GET`` in all other places where it's "
"referenced."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:174
msgid "Error macros"
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:176
msgid ""
"Godot features many error macros to make error reporting more convenient."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:180
msgid ""
"Conditions in error macros work in the **opposite** way of GDScript's built-"
"in ``assert()`` function. An error is reached if the condition inside "
"evaluates to ``true``, not ``false``."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:186
msgid ""
"Only variants with custom messages are documented here, as these should "
"always be used in new contributions. Make sure the custom message provided "
"includes enough information for people to diagnose the issue, even if they "
"don't know C++. In case a method was passed invalid arguments, you can print "
"the invalid value in question to ease debugging."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:192
msgid ""
"For internal error checking where displaying a human-readable message isn't "
"necessary, remove ``_MSG`` at the end of the macro name and don't supply a "
"message argument."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:196
msgid ""
"Also, always try to return processable data so the engine can keep running "
"well."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:240
msgid ""
"See `core/error_macros.h <https://github.com/godotengine/godot/blob/3.x/core/"
"error_macros.h>`__ in Godot's codebase for more information about each error "
"macro."
msgstr ""

#: ../../docs/development/cpp/common_engine_methods_and_macros.rst:243
msgid ""
"Some functions return an error code (materialized by a return type of "
"``Error``). This value can be returned directly from an error macro. See the "
"list of available error codes in `core/error_list.h <https://github.com/"
"godotengine/godot/blob/3.x/core/error_list.h>`__."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better understanding."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C99 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:132
#: ../../docs/development/cpp/core_types.rst:166
#: ../../docs/development/cpp/core_types.rst:182
#: ../../docs/development/cpp/core_types.rst:198
#: ../../docs/development/cpp/core_types.rst:209
#: ../../docs/development/cpp/core_types.rst:220
#: ../../docs/development/cpp/core_types.rst:233
#: ../../docs/development/cpp/variant_class.rst:38
#: ../../docs/development/cpp/variant_class.rst:57
#: ../../docs/development/cpp/object_class.rst:36
#: ../../docs/development/cpp/object_class.rst:94
#: ../../docs/development/cpp/object_class.rst:266
#: ../../docs/development/cpp/object_class.rst:282
#: ../../docs/development/cpp/object_class.rst:303
#: ../../docs/development/cpp/object_class.rst:322
#: ../../docs/development/cpp/custom_godot_servers.rst:475
#: ../../docs/development/cpp/custom_audiostreams.rst:23
#: ../../docs/development/cpp/custom_audiostreams.rst:117
#: ../../docs/development/cpp/custom_audiostreams.rst:348
msgid "References:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/"
"typedefs.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:58
msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:106
msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:114
msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:126
msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:134
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/"
"memory.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:135
msgid ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/"
"pool_vector.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:138
msgid "Containers"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:140
msgid "Godot provides also a set of common containers:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:142
msgid "Vector"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:143
msgid "List"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:144
msgid "Set"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:145
msgid "Map"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:147
msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:158
msgid "The Vector<> class also has a few nice features:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:160
msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:162
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:168
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:169
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:170
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:171
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:176
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:184
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:187
msgid "StringName"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:189
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:194
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:200
msgid ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/"
"string_name.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:203
msgid "Math types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:205
msgid ""
"There are several linear math types available in the core/math directory."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:211
msgid "`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:214
#: ../../docs/development/file_formats/tscn.rst:140
msgid "NodePath"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:216
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:222
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/"
"node_path.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:225
msgid "RID"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:227
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:235
#: ../../docs/development/cpp/custom_godot_servers.rst:319
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:4
msgid "Variant class"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:9
msgid ""
"Variant is the most important datatype of Godot, it's the most important "
"class in the engine. A Variant takes up only 20 bytes and can store almost "
"any engine datatype inside of it. Variants are rarely used to hold "
"information for long periods of time, instead they are used mainly for "
"communication, editing, serialization and generally moving data around."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:16
msgid "A Variant can:"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:18
msgid "Store almost any datatype"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:19
msgid ""
"Perform operations between many variants (GDScript uses Variant as its "
"atomic/native datatype)."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:21
msgid "Be hashed, so it can be compared quickly to other variants"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:22
msgid "Be used to convert safely between datatypes"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:23
msgid ""
"Be used to abstract calling methods and their arguments (Godot exports all "
"its functions through variants)"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:25
msgid "Be used to defer calls or move data between threads."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:26
msgid "Be serialized as binary and stored to disk, or transferred via network."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:28
msgid ""
"Be serialized to text and use it for printing values and editable settings."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:30
msgid "Work as an exported property, so the editor can edit it universally."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:31
msgid "Be used for dictionaries, arrays, parsers, etc."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:33
msgid ""
"Basically, thanks to the Variant class, writing Godot itself was a much, "
"much easier task, as it allows for highly dynamic constructs not common of C+"
"+ with little effort. Become a friend of Variant today."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:40
msgid ""
"`core/variant.h <https://github.com/godotengine/godot/blob/3.x/core/variant."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:43
msgid "Containers: Dictionary and Array"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:45
msgid ""
"Both are implemented using variants. A Dictionary can match any datatype "
"used as key to any other datatype. An Array just holds an array of Variants. "
"Of course, a Variant can also hold a Dictionary and an Array inside, making "
"it even more flexible."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:50
msgid ""
"Modifications to a container will modify all references to it. A Mutex "
"should be created to lock it if multi threaded access is desired."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:54
msgid ""
"Copy-on-write (COW) mode support for containers was dropped with Godot 3.0."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:59
msgid ""
"`core/dictionary.h <https://github.com/godotengine/godot/blob/3.x/core/"
"dictionary.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:60
msgid ""
"`core/array.h <https://github.com/godotengine/godot/blob/3.x/core/array.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:4
msgid "Object class"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:8
msgid ""
"This page describes the C++ implementation of objects in Godot. Looking for "
"the Object class reference? :ref:`Have a look here. <class_Object>`"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:12
msgid "General definition"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:14
msgid ""
":ref:`Object <class_object>` is the base class for almost everything. Most "
"classes in Godot inherit directly or indirectly from it. Objects provide "
"reflection and editable properties, and declaring them is a matter of using "
"a single macro like this."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:26
msgid "This makes Objects gain a lot of functionality, like for example"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:38
msgid ""
"`core/object.h <https://github.com/godotengine/godot/blob/3.x/core/object."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:41
msgid "Registering an Object"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:43
msgid ""
"ClassDB is a static class that holds the entire list of registered classes "
"that inherit from Object, as well as dynamic bindings to all their methods "
"properties and integer constants."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:47
msgid "Classes are registered by calling:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:53
msgid ""
"Registering it will allow the class to be instanced by scripts, code, or "
"creating them again when deserializing."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:56
msgid "Registering as virtual is the same but it can't be instanced."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:62
msgid ""
"Object-derived classes can override the static function ``static void "
"_bind_methods()``. When one class is registered, this static function is "
"called to register all the object methods, properties, constants, etc. It's "
"only called once. If an Object derived class is instanced but has not been "
"registered, it will be registered as virtual automatically."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:69
msgid ""
"Inside ``_bind_methods``, there are a couple of things that can be done. "
"Registering functions is one:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:76
msgid "Default values for arguments can be passed in reverse order:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:82
msgid ""
"``D_METHOD`` is a macro that converts \"methodname\" to a StringName for "
"more efficiency. Argument names are used for introspection, but when "
"compiling on release, the macro ignores them, so the strings are unused and "
"optimized away."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:87
msgid "Check ``_bind_methods`` of Control or Object for more examples."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:89
msgid ""
"If just adding modules and functionality that is not expected to be "
"documented as thoroughly, the ``D_METHOD()`` macro can safely be ignored and "
"a string passing the name can be passed for brevity."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:96
msgid ""
"`core/class_db.h <https://github.com/godotengine/godot/blob/3.x/core/"
"class_db.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:101
msgid "Classes often have enums such as:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:110
msgid ""
"For these to work when binding to methods, the enum must be declared "
"convertible to int, for this a macro is provided:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:117
msgid "The constants can also be bound inside ``_bind_methods``, by using:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:125
msgid "Properties (set/get)"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:127
msgid "Objects export properties, properties are useful for the following:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:129
msgid "Serializing and deserializing the object."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:130
msgid "Creating a list of editable values for the Object derived class."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:132
msgid ""
"Properties are usually defined by the PropertyInfo() class. Usually "
"constructed as:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:145
msgid ""
"This is an integer property, named \"amount\", hint is a range, range goes "
"from 0 to 49 in steps of 1 (integers). It is only usable for the editor "
"(edit value visually) but won't be serialized."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:149
msgid "Another example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:155
msgid ""
"This is a string property, can take any string but the editor will only "
"allow the defined hint ones. Since no usage flags were specified, the "
"default ones are PROPERTY_USAGE_STORAGE and PROPERTY_USAGE_EDITOR."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:159
msgid ""
"There are plenty of hints and usage flags available in object.h, give them a "
"check."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:162
msgid ""
"Properties can also work like C# properties and be accessed from script "
"using indexing, but this usage is generally discouraged, as using functions "
"is preferred for legibility. Many properties are also bound with categories, "
"such as \"animation/frame\" which also make indexing impossible unless using "
"operator []."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:168
msgid ""
"From ``_bind_methods()``, properties can be created and bound as long as set/"
"get functions exist. Example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:175
msgid "This creates the property using the setter and the getter."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:180
msgid "Binding properties using ``_set``/``_get``/``_get_property_list``"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:182
msgid ""
"An additional method of creating properties exists when more flexibility is "
"desired (i.e. adding or removing properties on context)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:185
msgid ""
"The following functions can be overridden in an Object derived class, they "
"are NOT virtual, DO NOT make them virtual, they are called for every "
"override and the previous ones are not invalidated (multilevel call)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:197
msgid ""
"This is also a little less efficient since ``p_property`` must be compared "
"against the desired names in serial order."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:201
msgid "Dynamic casting"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:203
msgid ""
"Godot provides dynamic casting between Object-derived classes, for example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:213
msgid ""
"If cast fails, NULL is returned. This system uses RTTI, but it also works "
"fine (although a bit slower) when RTTI is disabled. This is useful on "
"platforms where a small binary size is ideal, such as HTML5 or consoles "
"(with low memory footprint)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:221
msgid ""
"Objects can have a set of signals defined (similar to Delegates in other "
"languages). Connecting to them is rather easy:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:230
msgid ""
"The method ``_node_entered_tree`` must be registered to the class using "
"``ClassDB::bind_method`` (explained before)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:233
msgid ""
"Adding signals to a class is done in ``_bind_methods``, using the "
"``ADD_SIGNAL`` macro, for example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:243
msgid ""
"All objects in Godot have a :ref:`_notification "
"<class_Object_method__notification>` method that allows it to respond to "
"engine level callbacks that may relate to it. More information can be found "
"on the :ref:`doc_godot_notifications` page."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:248
#: ../../docs/development/cpp/custom_godot_servers.rst:19
#: ../../docs/development/cpp/custom_godot_servers.rst:316
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:18
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:39
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:303
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:356
#: ../../docs/development/editor/creating_icons.rst:102
msgid "References"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:250
msgid ""
":ref:`Reference <class_reference>` inherits from Object and holds a "
"reference count. It is the base for reference counted object types. "
"Declaring them must be done using Ref<> template. For example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:262
msgid ""
"``myref`` is reference counted. It will be freed when no more Ref<> "
"templates point to it."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:268
msgid ""
"`core/reference.h <https://github.com/godotengine/godot/blob/3.x/core/"
"reference.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:271
msgid "Resources:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:273
msgid ""
":ref:`Resource <class_resource>` inherits from Reference, so all resources "
"are reference counted. Resources can optionally contain a path, which "
"reference a file on disk. This can be set with ``resource.set_path(path)``. "
"This is normally done by the resource loader though. No two different "
"resources can have the same path, attempt to do so will result in an error."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:279
msgid "Resources without a path are fine too."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:284
msgid ""
"`core/resource.h <https://github.com/godotengine/godot/blob/3.x/core/"
"resource.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:287
msgid "Resource loading"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:289
msgid "Resources can be loaded with the ResourceLoader API, like this:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:295
msgid ""
"If a reference to that resource has been loaded previously and is in memory, "
"the resource loader will return that reference. This means that there can be "
"only one resource loaded from a file referenced on disk at the same time."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:300
msgid "resourceinteractiveloader (TODO)"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:305
msgid ""
"`core/io/resource_loader.h <https://github.com/godotengine/godot/blob/3.x/"
"core/io/resource_loader.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:308
msgid "Resource saving"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:310
msgid "Saving a resource can be done with the resource saver API:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:316
msgid ""
"Instance will be saved. Sub resources that have a path to a file will be "
"saved as a reference to that resource. Sub resources without a path will be "
"bundled with the saved resource and assigned sub-IDs, like ``res://"
"someresource.res::1``. This also helps to cache them when loaded."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:324
msgid ""
"`core/io/resource_saver.h <https://github.com/godotengine/godot/blob/3.x/"
"core/io/resource_saver.h>`__"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:2
msgid "Inheritance class tree"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:5
msgid "Object"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:15
msgid "Control"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:20
msgid "Node2D"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:25
msgid "Spatial"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:29
msgid "Source files: :download:`class_tree.zip <files/class_tree.zip>`."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:4
msgid "Custom modules in C++"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:7
#: ../../docs/development/cpp/binding_to_external_libraries.rst:7
msgid "Modules"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:9
msgid ""
"Godot allows extending the engine in a modular way. New modules can be "
"created and then enabled/disabled. This allows for adding new engine "
"functionality at every level without modifying the core, which can be split "
"for use and reuse in different modules."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:14
msgid ""
"Modules are located in the ``modules/`` subdirectory of the build system. By "
"default, dozens of modules are enabled, such as GDScript (which, yes, is not "
"part of the base engine), the Mono runtime, a regular expressions module, "
"and others. As many new modules as desired can be created and combined. The "
"SCons build system will take care of it transparently."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:22
#: ../../docs/development/cpp/custom_godot_servers.rst:26
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:24
#: ../../docs/development/cpp/custom_audiostreams.rst:29
msgid "What for?"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:24
msgid ""
"While it's recommended that most of a game be written in scripting (as it is "
"an enormous time saver), it's perfectly possible to use C++ instead. Adding "
"C++ modules can be useful in the following scenarios:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:28
msgid "Binding an external library to Godot (like PhysX, FMOD, etc)."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:29
msgid "Optimize critical parts of a game."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:30
msgid "Adding new functionality to the engine and/or editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:31
msgid "Porting an existing game."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:32
msgid "Write a whole, new game in C++ because you can't live without C++."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:35
msgid "Creating a new module"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:37
msgid ""
"Before creating a module, make sure to :ref:`download the source code of "
"Godot and compile it <toc-devel-compiling>`."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:40
msgid ""
"To create a new module, the first step is creating a directory inside "
"``modules/``. If you want to maintain the module separately, you can "
"checkout a different VCS into modules and use it."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:44
msgid ""
"The example module will be called \"summator\" (``godot/modules/summator``). "
"Inside we will create a simple summator class:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:74
msgid "And then the cpp file."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:104
msgid ""
"Then, the new class needs to be registered somehow, so two more files need "
"to be created:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:113
#: ../../docs/development/cpp/binding_to_external_libraries.rst:79
msgid ""
"These files must be in the top-level folder of your module (next to your "
"``SCsub`` and ``config.py`` files) for the module to be registered properly."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:116
#: ../../docs/development/cpp/binding_to_external_libraries.rst:82
msgid "These files should contain the following:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:143
msgid ""
"Next, we need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:154
msgid ""
"With multiple sources, you can also add each file individually to a Python "
"string list:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:162
msgid ""
"This allows for powerful possibilities using Python to construct the file "
"list using loops and logic statements. Look at some modules that ship with "
"Godot by default for examples."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:166
#: ../../docs/development/cpp/binding_to_external_libraries.rst:161
msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:174
msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone ``env`` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example ``SCsub`` with custom flags:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:192
msgid ""
"And finally, the configuration file for the module, this is a simple python "
"script that must be named ``config.py``:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:205
msgid ""
"The module is asked if it's OK to build for the specific platform (in this "
"case, ``True`` means it will build for every platform)."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:208
msgid ""
"And that's it. Hope it was not too complex! Your module should look like "
"this:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:220
msgid ""
"You can then zip it and share the module with everyone else. When building "
"for every platform (instructions in the previous sections), your module will "
"be included."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:224
msgid ""
"There is a parameter limit of 5 in C++ modules for things such as "
"subclasses. This can be raised to 13 by including the header file ``core/"
"method_bind_ext.gen.inc``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:229
#: ../../docs/development/cpp/binding_to_external_libraries.rst:217
msgid "Using the module"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:231
#: ../../docs/development/cpp/binding_to_external_libraries.rst:219
msgid "You can now use your newly created module from any script:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:243
msgid "The output will be ``60``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:245
msgid ""
"The previous Summator example is great for small, custom modules, but what "
"if you want to use a larger, external library? Refer to :ref:"
"`doc_binding_to_external_libraries` for details about binding to external "
"libraries."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:250
msgid ""
"If your module is meant to be accessed from the running project (not just "
"from the editor), you must also recompile every export template you plan to "
"use, then specify the path to the custom template in each export preset. "
"Otherwise, you'll get errors when running the project as the module isn't "
"compiled in the export template. See the :ref:`Compiling <toc-devel-"
"compiling>` pages for more information."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:259
msgid "Compiling a module externally"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:261
msgid ""
"Compiling a module involves moving the module's sources directly under the "
"engine's ``modules/`` directory. While this is the most straightforward way "
"to compile a module, there are a couple of reasons as to why this might not "
"be a practical thing to do:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:266
msgid ""
"Having to manually copy modules sources every time you want to compile the "
"engine with or without the module, or taking additional steps needed to "
"manually disable a module during compilation with a build option similar to "
"``module_summator_enabled=no``. Creating symbolic links may also be a "
"solution, but you may additionally need to overcome OS restrictions like "
"needing the symbolic link privilege if doing this via script."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:273
msgid ""
"Depending on whether you have to work with the engine's source code, the "
"module files added directly to ``modules/`` changes the working tree to the "
"point where using a VCS (like ``git``) proves to be cumbersome as you need "
"to make sure that only the engine-related code is committed by filtering "
"changes."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:279
msgid ""
"So if you feel like the independent structure of custom modules is needed, "
"lets take our \"summator\" module and move it to the engine's parent "
"directory:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:287
msgid ""
"Compile the engine with our module by providing ``custom_modules`` build "
"option which accepts a comma-separated list of directory paths containing "
"custom C++ modules, similar to the following:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:295
msgid ""
"The build system shall detect all modules under the ``../modules`` directory "
"and compile them accordingly, including our \"summator\" module."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:300
msgid ""
"Any path passed to ``custom_modules`` will be converted to an absolute path "
"internally as a way to distinguish between custom and built-in modules. It "
"means that things like generating module documentation may rely on a "
"specific path structure on your machine."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:307
msgid ""
":ref:`Introduction to the buildsystem - Custom modules build option "
"<doc_buildsystem_custom_modules>`."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:310
msgid "Improving the build system for development"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:314
msgid ""
"This shared library support is not designed to support distributing a module "
"to other users without recompiling the engine. For that purpose, use :ref:"
"`GDNative <doc_what_is_gdnative>` instead."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:318
msgid ""
"So far, we defined a clean SCsub that allows us to add the sources of our "
"new module as part of the Godot binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:321
msgid ""
"This static approach is fine when we want to build a release version of our "
"game, given we want all the modules in a single binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:324
msgid ""
"However, the trade-off is that every single change requires a full "
"recompilation of the game. Even though SCons is able to detect and recompile "
"only the file that was changed, finding such files and eventually linking "
"the final binary takes a long time."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:328
msgid ""
"The solution to avoid such a cost is to build our own module as a shared "
"library that will be dynamically loaded when starting our game's binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:369
msgid ""
"Once compiled, we should end up with a ``bin`` directory containing both the "
"``godot*`` binary and our ``libsummator*.so``. However given the .so is not "
"in a standard directory (like ``/usr/lib``), we have to help our binary find "
"it during runtime with the ``LD_LIBRARY_PATH`` environment variable:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:380
msgid ""
"You have to ``export`` the environment variable. Otherwise, you won't be "
"able to run your project from the editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:383
msgid ""
"On top of that, it would be nice to be able to select whether to compile our "
"module as shared library (for development) or as a part of the Godot binary "
"(for release). To do that we can define a custom flag to be passed to SCons "
"using the ``ARGUMENT`` command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:414
msgid ""
"Now by default ``scons`` command will build our module as part of Godot's "
"binary and as a shared library when passing ``summator_shared=yes``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:417
msgid ""
"Finally, you can even speed up the build further by explicitly specifying "
"your shared module as target in the SCons command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:425
msgid "Writing custom documentation"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:427
msgid ""
"Writing documentation may seem like a boring task, but it is highly "
"recommended to document your newly created module in order to make it easier "
"for users to benefit from it. Not to mention that the code you've written "
"one year ago may become indistinguishable from the code that was written by "
"someone else, so be kind to your future self!"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:433
msgid "There are several steps in order to setup custom docs for the module:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:435
msgid ""
"Make a new directory in the root of the module. The directory name can be "
"anything, but we'll be using the ``doc_classes`` name throughout this "
"section."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:438
msgid "Now, we need to edit ``config.py``, add the following snippet:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:450
msgid ""
"The ``get_doc_path()`` function is used by the build system to determine the "
"location of the docs. In this case, they will be located in the ``modules/"
"summator/doc_classes`` directory. If you don't define this, the doc path for "
"your module will fall back to the main ``doc/classes`` directory."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:456
msgid ""
"The ``get_doc_classes()`` method is necessary for the build system to know "
"which registered classes belong to the module. You need to list all of your "
"classes here. The classes that you don't list will end up in the main ``doc/"
"classes`` directory."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:463
msgid ""
"You can use Git to check if you have missed some of your classes by checking "
"the untracked files with ``git status``. For example::"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:468
msgid "Example output::"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:480
msgid "Now we can generate the documentation:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:482
msgid ""
"We can do this via running Godot's doctool i.e. ``godot --doctool <path>``, "
"which will dump the engine API reference to the given ``<path>`` in XML "
"format."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:485
msgid ""
"In our case we'll point it to the root of the cloned repository. You can "
"point it to an another folder, and just copy over the files that you need."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:488
msgid "Run command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:494
msgid ""
"Now if you go to the ``godot/modules/summator/doc_classes`` folder, you will "
"see that it contains a ``Summator.xml`` file, or any other classes, that you "
"referenced in your ``get_doc_classes`` function."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:498
msgid ""
"Edit the file(s) following :ref:`doc_updating_the_class_reference` and "
"recompile the engine."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:500
msgid ""
"Once the compilation process is finished, the docs will become accessible "
"within the engine's built-in documentation system."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:503
msgid ""
"In order to keep documentation up-to-date, all you'll have to do is simply "
"modify one of the XML files and recompile the engine from now on."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:506
msgid ""
"If you change your module's API, you can also re-extract the docs, they will "
"contain the things that you previously added. Of course if you point it to "
"your godot folder, make sure you don't lose work by extracting older docs "
"from an older engine build on top of the newer ones."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:511
msgid ""
"Note that if you don't have write access rights to your supplied ``<path>``, "
"you might encounter an error similar to the following:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:523
msgid "Adding custom editor icons"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:525
msgid ""
"Similarly to how you can write self-contained documentation within a module, "
"you can also create your own custom icons for classes to appear in the "
"editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:528
msgid ""
"For the actual process of creating editor icons to be integrated within the "
"engine, please refer to :ref:`doc_editor_icons` first."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:531
msgid "Once you've created your icon(s), proceed with the following steps:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:533
msgid ""
"Make a new directory in the root of the module named ``icons``. This is the "
"default path for the engine to look for module's editor icons."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:536
msgid ""
"Move your newly created ``svg`` icons (optimized or not) into that folder."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:538
msgid ""
"Recompile the engine and run the editor. Now the icon(s) will appear in "
"editor's interface where appropriate."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:541
msgid ""
"If you'd like to store your icons somewhere else within your module, add the "
"following code snippet to ``config.py`` to override the default path:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:550
msgid "Summing up"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:552
msgid "Remember to:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:554
msgid "use ``GDCLASS`` macro for inheritance, so Godot can wrap it"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:555
msgid ""
"use ``_bind_methods`` to bind your functions to scripting, and to allow them "
"to work as callbacks for signals."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:558
msgid ""
"But this is not all, depending what you do, you will be greeted with some "
"(hopefully positive) surprises."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:561
msgid ""
"If you inherit from :ref:`class_Node` (or any derived node type, such as "
"Sprite), your new class will appear in the editor, in the inheritance tree "
"in the \"Add Node\" dialog."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:564
msgid ""
"If you inherit from :ref:`class_Resource`, it will appear in the resource "
"list, and all the exposed properties can be serialized when saved/loaded."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:567
msgid ""
"By this same logic, you can extend the Editor and almost any area of the "
"engine."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:4
msgid "Binding to external libraries"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:9
msgid ""
"The Summator example in :ref:`doc_custom_modules_in_c++` is great for small, "
"custom modules, but what if you want to use a larger, external library? "
"Let's look at an example using `Festival <http://www.cstr.ed.ac.uk/projects/"
"festival/>`_, a speech synthesis (text-to-speech) library written in C++."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:14
msgid ""
"To bind to an external library, set up a module directory similar to the "
"Summator example:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:20
msgid "Next, you will create a header file with a simple TTS class:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:45
msgid "And then you'll add the cpp file."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:70
msgid ""
"Just as before, the new class needs to be registered somehow, so two more "
"files need to be created:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:109
msgid ""
"Next, you need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:121
msgid ""
"You'll need to install the external library on your machine to get the .a "
"library files. See the library's official documentation for specific "
"instructions on how to do this for your operation system. We've included the "
"installation commands for Linux below, for reference."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:132
msgid ""
"The voices that Festival uses (and any other potential external/3rd-party "
"resource) all have varying licenses and terms of use; some (if not most) of "
"them may be be problematic with Godot, even if the Festival Library itself "
"is MIT License compatible. Please be sure to check the licenses and terms of "
"use."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:137
msgid ""
"The external library will also need to be installed inside your module to "
"make the source files accessible to the compiler, while also keeping the "
"module code self-contained. The festival and speech_tools libraries can be "
"installed from the modules/tts/ directory via git using the following "
"commands:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:147
msgid ""
"If you don't want the external repository source files committed to your "
"repository, you can link to them instead by adding them as submodules (from "
"within the modules/tts/ directory), as seen below:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:156
msgid ""
"Please note that Git submodules are not used in the Godot repository. If you "
"are developing a module to be merged into the main Godot repository, you "
"should not use submodules. If your module doesn't get merged in, you can "
"always try to implement the external library as a GDNative C++ plugin."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:181
msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone `env` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example `SCsub` with custom flags:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:199
msgid "The final module should look like this:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:228
msgid "And the output will be ``is_spoken: True`` if the text is spoken."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:4
msgid "Custom Godot servers"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:9
msgid ""
"Godot implements multi-threading as servers. Servers are daemons which "
"manage data, process it, and push the result. Servers implement the mediator "
"pattern which interprets resource ID and process data for the engine and "
"other modules. In addition, the server claims ownership for its RID "
"allocations."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:15
msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:21
msgid ""
"`Why does Godot use servers and RIDs? <https://godotengine.org/article/why-"
"does-godot-use-servers-and-rids>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:22
msgid "`Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:23
msgid "`Mediator pattern <https://en.wikipedia.org/wiki/Mediator_pattern>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:28
msgid "Adding artificial intelligence."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:29
msgid "Adding custom asynchronous threads."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:30
msgid "Adding support for a new input device."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:31
msgid "Adding writing threads."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:32
msgid "Adding a custom VoIP protocol."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:33
msgid "And more..."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:36
msgid "Creating a Godot server"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:38
msgid ""
"At minimum, a server must have a static instance, a sleep timer, a thread "
"loop, an initialization state and a cleanup procedure."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:274
msgid "Custom managed resource data"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:276
msgid ""
"Godot servers implement a mediator pattern. All data types inherit "
"``RID_Data``. ``RID_Owner<MyRID_Data>`` owns the object when ``make_rid`` is "
"called. During debug mode only, RID_Owner maintains a list of RIDs. In "
"practice, RIDs are similar to writing object-oriented C code."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:318
msgid ":ref:`RID<class_rid>`"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:322
msgid "Registering the class in GDScript"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:324
msgid ""
"Servers are allocated in ``register_types.cpp``. The constructor sets the "
"static instance and ``init()`` creates the managed thread; "
"``unregister_types.cpp`` cleans up the server."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:328
msgid ""
"Since a Godot server class creates an instance and binds it to a static "
"singleton, binding the class might not reference the correct instance. "
"Therefore, a dummy class must be created to reference the proper Godot "
"server."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:332
msgid ""
"In ``register_server_types()``, ``Engine::get_singleton()->add_singleton`` "
"is used to register the dummy class in GDScript."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:376
msgid ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:379
msgid "Bind methods"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:381
msgid ""
"The dummy class binds singleton methods to GDScript. In most cases, the "
"dummy class methods wraps around."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:389
msgid "Binding Signals"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:391
msgid ""
"It is possible to emit signals to GDScript by calling the GDScript dummy "
"object."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:466
msgid "MessageQueue"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:468
msgid ""
"In order to send commands into SceneTree, MessageQueue is a thread-safe "
"buffer to queue set and call methods for other threads. To queue a command, "
"obtain the target object RID and use either ``push_call``, ``push_set``, or "
"``push_notification`` to execute the desired behavior. The queue will be "
"flushed whenever either ``SceneTree::idle`` or ``SceneTree::iteration`` is "
"executed."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:477
msgid ""
"`core/message_queue.cpp <https://github.com/godotengine/godot/blob/3.x/core/"
"message_queue.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:480
msgid "Summing it up"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:482
msgid "Here is the GDScript sample code:"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:508
msgid ""
"The actual `Hilbert Hotel <https://en.wikipedia.org/wiki/"
"Hilbert%27s_paradox_of_the_Grand_Hotel>`__ is impossible."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:509
msgid "Connecting signal example code is pretty hacky."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:4
msgid "Custom resource format loaders"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:9
msgid ""
"ResourceFormatLoader is a factory interface for loading file assets. "
"Resources are primary containers. When load is called on the same file path "
"again, the previous loaded Resource will be referenced. Naturally, loaded "
"resources must be stateless."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:14
msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to this guide :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:20
msgid ":ref:`ResourceLoader<class_resourceloader>`"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:21
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:358
msgid ""
"`core/io/resource_loader.cpp <https://github.com/godotengine/godot/blob/"
"master/core/io/resource_loader.cpp>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:26
msgid "Adding new support for many file formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:27
msgid "Audio formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:28
msgid "Video formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:29
msgid "Machine learning models"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:32
msgid "What not?"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:34
msgid "Raster images"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:36
msgid "ImageFormatLoader should be used to load images."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:41
msgid ""
"`core/io/image_loader.h <https://github.com/godotengine/godot/blob/master/"
"core/io/image_loader.h>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:45
msgid "Creating a ResourceFormatLoader"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:47
msgid ""
"Each file format consist of a data container and a ``ResourceFormatLoader``."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:49
msgid ""
"ResourceFormatLoaders are usually simple classes which return all the "
"necessary metadata for supporting new extensions in Godot. The class must "
"return the format name and the extension string."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:53
msgid ""
"In addition, ResourceFormatLoaders must convert file paths into resources "
"with the ``load`` function. To load a resource, ``load`` must read and "
"handle data serialization."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:109
msgid "Creating a ResourceFormatSaver"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:111
msgid ""
"If you'd like to be able to edit and save a resource, you can implement a "
"``ResourceFormatSaver``:"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:158
msgid "Creating custom data types"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:160
msgid ""
"Godot may not have a proper substitute within its :ref:`doc_core_types` or "
"managed resources. Godot needs a new registered data type to understand "
"additional binary formats such as machine learning models."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:164
msgid "Here is an example of creating a custom datatype:"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:262
msgid "Considerations"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:264
msgid ""
"Some libraries may not define certain common routines such as IO handling. "
"Therefore, Godot call translations are required."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:267
msgid ""
"For example, here is the code for translating ``FileAccess`` calls into "
"``std::istream``."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:305
msgid "`istream <http://www.cplusplus.com/reference/istream/istream/>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:306
msgid ""
"`streambuf <http://www.cplusplus.com/reference/streambuf/streambuf/?"
"kw=streambuf>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:307
msgid ""
"`core/io/fileaccess.h <https://github.com/godotengine/godot/blob/master/core/"
"os/file_access.h>`_"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:310
msgid "Registering the new file format"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:312
msgid ""
"Godot registers ``ResourcesFormatLoader`` with a ``ResourceLoader`` handler. "
"The handler selects the proper loader automatically when ``load`` is called."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:361
msgid "Loading it on GDScript"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:363
msgid ""
"Save a file called ``demo.json`` with the following contents and place it in "
"the project's root folder:"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:379
msgid "Then attach the following script to any node::"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:4
msgid "Custom AudioStreams"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:9
msgid ""
"AudioStream is the base class of all audio emitting objects. "
"AudioStreamPlayer binds onto an AudioStream to emit PCM data into an "
"AudioServer which manages audio drivers."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:13
msgid ""
"All audio resources require two audio based classes: AudioStream and "
"AudioStreamPlayback. As a data container, AudioStream contains the resource "
"and exposes itself to GDScript. AudioStream references its own internal "
"custom AudioStreamPlayback which translates AudioStream into PCM data."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:19
msgid ""
"This guide assumes the reader knows how to create C++ modules. If not, refer "
"to this guide :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:25
#: ../../docs/development/cpp/custom_audiostreams.rst:119
#: ../../docs/development/cpp/custom_audiostreams.rst:350
msgid ""
"`servers/audio/audio_stream.h <https://github.com/godotengine/godot/blob/"
"master/servers/audio/audio_stream.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:26
#: ../../docs/development/cpp/custom_audiostreams.rst:351
msgid ""
"`scene/audio/audioplayer.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/audio/audio_player.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:31
msgid "Binding external libraries (like Wwise, FMOD, etc)."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:32
msgid "Adding custom audio queues"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:33
msgid "Adding support for more audio formats"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:36
msgid "Create an AudioStream"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:38
msgid ""
"An AudioStream consists of three components: data container, stream name, "
"and an AudioStreamPlayback friend class generator. Audio data can be loaded "
"in a number of ways such as with an internal counter for a tone generator, "
"internal/external buffer, or a file reference."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:43
msgid ""
"Some AudioStreams need to be stateless such as objects loaded from "
"ResourceLoader. ResourceLoader loads once and references the same object "
"regardless how many times ``load`` is called on a specific resource. "
"Therefore, playback state must be self-contained in AudioStreamPlayback."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:123
msgid "Create an AudioStreamPlayback"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:125
msgid ""
"AudioStreamPlayer uses ``mix`` callback to obtain PCM data. The callback "
"must match sample rate and fill the buffer."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:127
msgid ""
"Since AudioStreamPlayback is controlled by the audio thread, i/o and dynamic "
"memory allocation are forbidden."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:232
msgid "Resampling"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:234
msgid ""
"Godot's AudioServer currently uses 44100 Hz sample rate. When other sample "
"rates are needed such as 48000, either provide one or use "
"AudioStreamPlaybackResampled. Godot provides cubic interpolation for audio "
"resampling."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:238
msgid ""
"Instead of overloading ``mix``, AudioStreamPlaybackResampled uses "
"``_mix_internal`` to query AudioFrames and ``get_stream_sampling_rate`` to "
"query current mix rate."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:349
msgid ""
"`core/math/audio_frame.h <https://github.com/godotengine/godot/blob/master/"
"core/math/audio_frame.h>`__"
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:2
msgid "Debugging on macOS"
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:5
msgid "Debugging Godot editor"
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:7
msgid ""
"Attaching a debugger to the signed macOS process requires the \"com.apple."
"security.get-task-allow\" entitlement, which is not enabled by default, "
"since apps can't be notarized as long as it is enabled. If you want to debug "
"an official build of the editor it should be re-signed with the proper "
"entitlements."
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:10
msgid ""
"Create an ``editor.entitlements`` text file with the following contents:"
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:35
msgid "Then use the following command to re-sign the editor::"
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:40
msgid "Debugging exported project"
msgstr ""

#: ../../docs/development/cpp/macos_debug.rst:42
msgid ""
"To allow debugging, select the ``codesign\\debugging`` (``com.apple.security."
"get-task-allow``) entitlement during the export. When it is selected, "
"notarization is not supported and should be disabled."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:4
msgid "Using C++ profilers"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:6
msgid ""
"To optimize Godot's performance, you need to know what to optimize first. To "
"this end, profilers are useful tools."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:11
msgid ""
"There is a built-in GDScript profiler in the editor, but using C++ profiler "
"may be useful in cases where the GDScript profiler is not accurate enough or "
"is missing information due to bugs in the profiler."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:16
msgid "Recommended profilers"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:18
msgid "`VerySleepy <http://www.codersnotes.com/sleepy/>`__ (Windows only)"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:19
msgid "`HotSpot <https://github.com/KDAB/hotspot>`__ (Linux only)"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:20
msgid "`Xcode Instruments <https://developer.apple.com/xcode/>`__ (macOS only)"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:22
msgid ""
"These profilers may not be the most powerful or flexible options, but their "
"standalone operation and limited feature set tends to make them easier to "
"use."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:26
msgid "Setting up Godot"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:28
msgid ""
"To get useful profiling information, it is **absolutely required** to use a "
"Godot build that includes debugging symbols. Official binaries do not "
"include debugging symbols, since these would make the download size "
"significantly larger."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:32
msgid ""
"To get profiling data that best matches the production environment, you "
"should compile binaries with the following SCons options:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:35
msgid "For editor binaries: ``target=release_debug use_lto=yes``"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:36
msgid "For debug export templates: ``target=release_debug use_lto=yes``"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:37
msgid ""
"For release export templates: ``tools=no target=release debug_symbols=yes`` "
"- ``debug_symbols=yes`` is required as export templates are stripped from "
"debugging symbols by default."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:40
msgid ""
"It is possible to run a profiler on less optimized builds (e.g. "
"``target=debug`` without LTO), but results will naturally be less "
"representative of real world conditions."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:45
msgid ""
"Do *not* strip debugging symbols on the binaries using the ``strip`` command "
"after compiling the binaries. Otherwise, you will no longer get useful "
"profiling information when running a profiler."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:50
msgid "Benchmarking startup/shutdown times"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:52
msgid ""
"If you're looking into optimizing Godot's startup/shutdown performance, you "
"can tell the profiler to use the ``--quit`` command line option on the Godot "
"binary. This will exit Godot just after it finished starting. The ``--quit`` "
"option works with ``--editor``, ``--project-manager`` or ``--path <path to "
"project directory>`` (which runs a project directly)."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:60
msgid ""
"See :ref:`doc_command_line_tutorial` for more command line arguments "
"supported by Godot."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:64
msgid "Profiler-specific instructions"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:67
msgid "VerySleepy"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:69
msgid ""
"Start the Godot editor or your project first. If you start the project "
"manager, make sure to edit or run a project first. Otherwise, the profiler "
"will not track the child process since the project manager will spawn a "
"child process for every project edited or run."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:73
msgid ""
"Open VerySleepy and select the Godot executable in the list of processes on "
"the left:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:77
msgid "Click the **Profile All** button on the right to start profiling."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:78
msgid ""
"Perform the actions you wish to profile in the editor or project. When "
"you're done, click **Stop** (*not* Abort)."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:79
msgid "Wait for the results window to appear."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:80
msgid ""
"Once the results window appears, filter the view to remove external modules "
"(such as the graphics driver). You can filter by module by finding a line "
"whose **Module** matches the Godot executable name, right-clicking that line "
"then choosing **Filter Module to <Godot executable name>** in the dropdown "
"that appears."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:84
msgid "Your results window should now look something like this:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:89
msgid "HotSpot"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:91
msgid "Open HotSpot. Click **Record Data**:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:95
msgid ""
"In the next window, specify the path to the Godot binary that includes debug "
"symbols."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:96
msgid ""
"Specify command line arguments to run a specific project, with or without "
"the editor."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:97
msgid ""
"The path to the working directory can be anything if an absolute path is "
"used for the ``--path`` command line argument. Otherwise, it must be set to "
"that the relative path to the project is valid."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:100
msgid ""
"Make sure **Elevate Privileges** is checked if you have administrative "
"privileges. While not essential for profiling Godot, this will ensure all "
"events can be captured. Otherwise, some events may be missing in the "
"capture. Your settings should now look something like this:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:107
msgid ""
"Click **Start Recording** and perform the actions you wish to profile in the "
"editor/project."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:108
msgid ""
"Quit the editor/project normally or use the **Stop Profiling** button in "
"HotSpot to stop profiling early. Stopping profiling early can result in "
"cleaner profiles if you're not interested in the engine's quit procedure."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:111
msgid ""
"Click **View Results** and wait for the profiling visualization to be "
"generated:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:115
msgid ""
"Use the tabs at the top to navigate between the different views. These views "
"show the same data, but in different ways. The **Flame Graph** tab is a good "
"way to see which functions take up the most time at a glance. These "
"functions are therefore the most important ones to optimize, since "
"optimizing them will improve performance the most."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:120
msgid ""
"At the bottom of all tabs except **Summary**, you will also see a list of "
"CPU threads started by the engine among with the CPU utilization for each "
"thread. This lets you see threads that can be a bottleneck at a given point "
"in time."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:128
msgid ""
"If you don't want the startup procedure to be included in the profile, you "
"can also attach HotSpot to a running process by clicking **Record Data** "
"then setting the **Launch Application** dropdown option to **Attach To "
"Process(es)**."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:133
msgid ""
"This process attachment-based workflow is similar to the one used by "
"VerySleepy."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:136
msgid "Xcode Instruments"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:138
msgid ""
"Open Xcode. Select **Open Developer Tool** - **Instruments** from the "
"**Xcode** app menu:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:139
msgid "Double-click on **Time Profiler** in the **Instruments** window:"
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:143
msgid ""
"In the Time Profiler window, click on the **Target** menu, select **Choose "
"target...** and specify the path to the Godot binary, command line arguments "
"and environment variables in the next window."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:149
msgid ""
"You can also attach the Time Profiler to a running process by selecting it "
"from the **Target** menu."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:152
msgid ""
"Click the **Start an immediate mode recording** button to start profiling."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:156
msgid ""
"Perform the actions you wish to profile in the editor or project. When "
"you're done, click the **Stop** button."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:159
msgid "Wait for the results to appear."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:160
msgid ""
"At the bottom of the window you will see a call tree for all CPU threads "
"started, and the **Heaviest Stack Trace** overview."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:162
msgid ""
"Select **Hide system libraries** in the **Call Tree** menu (at the bottom of "
"window) to remove external modules."
msgstr ""

#: ../../docs/development/cpp/using_cpp_profilers.rst:164
msgid ""
"You can use the timeline at the top of the window to display details for the "
"specific time period."
msgstr ""

#: ../../docs/development/editor/index.rst:2
msgid "Editor development"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:4
msgid "Introduction to editor development"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:6
msgid "On this page, you will learn:"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:8
msgid "The **design decisions** behind the Godot editor."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:9
msgid "How to work efficiently on the Godot editor's C++ code."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:11
msgid ""
"This guide is aimed at current or future engine contributors. To create "
"editor plugins in GDScript, see :ref:`doc_making_plugins` instead."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:16
msgid ""
"If you are new to Godot, we recommended you to read :ref:"
"`doc_godot_design_philosophy` before continuing. Since the Godot editor is a "
"Godot project written in C++, much of the engine's philosophy applies to the "
"editor."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:22
msgid "Technical choices"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:24
msgid ""
"The Godot editor is drawn using Godot's renderer and :ref:`UI system <toc-"
"gui-basics>`. It does *not* rely on a toolkit such as GTK or Qt. This is "
"similar in spirit to software like Blender. While using toolkits makes it "
"easier to achieve a \"native\" appearance, they are also quite heavy and "
"their licensing is not compatible with Godot's."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:30
msgid ""
"The editor is fully written in C++. It can't contain any GDScript or C# code."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:33
msgid "Directory structure"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:35
msgid ""
"The editor's code is fully self-contained in the `editor/ <https://github."
"com/godotengine/godot/tree/master/editor>`__ folder of the Godot source "
"repository."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:39
msgid ""
"Some editor functionality is also implemented via :ref:`modules "
"<doc_custom_modules_in_c++>`. Some of these are only enabled in editor "
"builds to decrease the binary size of export templates. See the `modules/ "
"<https://github.com/godotengine/godot/tree/master/modules>`__ folder in the "
"Godot source repository."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:45
msgid "Some important files in the editor are:"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:47
msgid ""
"`editor/editor_node.cpp <https://github.com/godotengine/godot/blob/3.x/"
"editor/editor_node.cpp>`__: Main editor initialization file. Effectively the "
"\"main scene\" of the editor."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:49
msgid ""
"`editor/project_manager.cpp <https://github.com/godotengine/godot/blob/3.x/"
"editor/project_manager.cpp>`__: Main project manager initialization file. "
"Effectively the \"main scene\" of the project manager."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:51
msgid ""
"`editor/plugins/canvas_item_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/3.x/editor/plugins/canvas_item_editor_plugin.cpp>`__: "
"The 2D editor viewport and related functionality (toolbar at the top, "
"editing modes, overlaid helpers/panels, …)."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:53
msgid ""
"`editor/plugins/spatial_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/3.x/editor/plugins/spatial_editor_plugin.cpp>`__: The 3D editor "
"viewport and related functionality (toolbar at the top, editing modes, "
"overlaid panels, …)."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:55
msgid ""
"`editor/spatial_editor_gizmos.cpp <https://github.com/godotengine/godot/"
"blob/3.x/editor/spatial_editor_gizmos.cpp>`__: Where the 3D editor gizmos "
"are defined and drawn. This file doesn't have a 2D counterpart as 2D gizmos "
"are drawn by the nodes themselves."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:60
msgid "Editor dependencies in ``scene/`` files"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:62
msgid ""
"When working on an editor feature, you may have to modify files in Godot's "
"GUI nodes, which you can find in the ``scene/`` folder."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:65
msgid ""
"One rule to keep in mind is that you must **not** introduce new dependencies "
"to ``editor/`` includes in other folders such as ``scene/``. This applies "
"even if you use ``#ifdef TOOLS_ENABLED``."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:69
msgid ""
"To make the codebase easier to follow and more self-contained, the allowed "
"dependency order is:"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:72
msgid "``editor/`` -> ``scene/`` -> ``servers/`` -> ``core/``"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:74
msgid ""
"This means that files in ``editor/`` can depend on includes from ``scene/``, "
"``servers/``, and ``core/``. But, for example, while ``scene/`` can depend "
"on includes from ``servers/`` and ``core/``, it cannot depend on includes "
"from ``editor/``."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:78
msgid ""
"Currently, there are some dependencies to ``editor/`` includes in ``scene/`` "
"files, but `they are in the process of being removed <https://github.com/"
"godotengine/godot/issues/29730>`__."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:83
msgid "Development tips"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:85
msgid ""
"To iterate quickly on the editor, we recommend to set up a test project and :"
"ref:`open it from the command line <doc_command_line_tutorial>` after "
"compiling the editor. This way, you don't have to go through the project "
"manager every time you start Godot."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:4
msgid "Editor icons"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:6
msgid ""
"When a new class is created and exposed to scripting, the editor's interface "
"will display it with a default icon representing the base class it inherits "
"from. In most cases, it's still recommended to create icons for new classes "
"to improve the user experience."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:12
msgid "Creating icons"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:14
msgid ""
"To create new icons, you first need a vector graphics editor installed. For "
"instance, you can use the open source `Inkscape <https://inkscape.org/>`_ "
"editor."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:17
msgid "Clone the ``godot`` repository containing all the editor icons:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:23
msgid ""
"The icons must be created in a vector graphics editor in SVG format. There "
"are two main requirements to follow:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:26
msgid ""
"Icons must be 16×16. In Inkscape, you can configure the document size in "
"**File > Document Properties**."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:28
msgid ""
"Lines should be snapped to pixels whenever possible to remain crisp at lower "
"DPI. You can create a 16×16 grid in Inkscape to make this easier."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:31
msgid ""
"Once you're satisfied with the icon's design, save the icon in the cloned "
"repository's ``editor/icons`` folder. The icon name should match the "
"intended name in a case-sensitive manner. For example, to create an icon for "
"CPUParticles2D, name the file ``CPUParticles2D.svg``."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:37
msgid "Color conversion for light editor themes"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:39
msgid ""
"If the user has configured their editor to use a light theme, Godot will "
"convert the icon's colors based on a `set of predefined color mappings "
"<https://github.com/godotengine/godot/blob/"
"b9f2e57d6240346f1833fd0390de195c956299e7/editor/editor_themes.cpp#L122-"
"L184>`__. This is to ensure the icon always displays with a sufficient "
"contrast rate. Try to restrict your icon's color palette to colors found in "
"the list above. Otherwise, your icon may become difficult to read on a light "
"background."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:47
msgid "Icon optimization"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:49
msgid ""
"Because the editor renders SVGs once at load time, they need to be small in "
"size so they can be efficiently parsed. Editor icons must be first optimized "
"before being added to the engine, to do so:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:53
msgid ""
"Install `svgcleaner <https://github.com/RazrFalcon/svgcleaner>`__ by "
"downloading a binary from its `Releases tab <https://github.com/RazrFalcon/"
"svgcleaner/releases/latest>`__ and placing it into a location in your "
"``PATH`` environment variable."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:58
msgid ""
"Run the command below, replacing ``svg_source.svg`` with the path to your "
"SVG file (which can be a relative or absolute path):"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:65
msgid ""
"The ``--multipass`` switch improves compression, so make sure to include it. "
"The optimized icon will be saved to ``svg_optimized.svg``. You can also "
"change the destination parameter to any relative or absolute path you'd like."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:71
msgid ""
"While this optimization step won't impact the icon's quality noticeably, it "
"will still remove editor-only information such as guides. Therefore, it's "
"recommended to keep the source SVG around if you need to make further "
"changes."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:77
msgid "Integrating and sharing the icons"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:79
msgid ""
"If you're contributing to the engine itself, you should make a pull request "
"to add optimized icons to ``editor/icons`` in the main repository. Recompile "
"the engine to make it pick up new icons for classes."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:83
msgid ""
"It's also possible to create custom icons within a module. If you're "
"creating your own module and don't plan to integrate it with Godot, you "
"don't need to make a separate pull request for your icons to be available "
"within the editor as they can be self-contained."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:88
msgid ""
"For specific instructions on how to create module icons, refer to :ref:"
"`Creating custom module icons<doc_custom_module_icons>`."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:94
msgid "If icons don't appear in the editor, make sure that:"
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:96
msgid ""
"Each icon's filename matches the naming requirement as described previously."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:98
msgid ""
"``modules/svg`` is enabled (it should be enabled by default). Without it, "
"icons won't appear in the editor at all."
msgstr ""

#: ../../docs/development/editor/creating_icons.rst:104
msgid ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:4
msgid "Editor style guide"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:9
msgid "Thanks for your interest in contributing to the Godot editor!"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:11
msgid ""
"This page describes the grammar and writing style used throughout the Godot "
"editor. Following this style guide will help your contribution get merged "
"faster since there will be fewer review steps required."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:16
msgid "Writing style"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:18
msgid ""
"**Write messages (errors, warnings, ...) as full sentences.** They should "
"start with an uppercase letter and end with a period."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:20
msgid ""
"**Try to keep sentences short.** This makes it more likely that their "
"translations will be short as well, which is a good thing to avoid UI bugs."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:22
msgid ""
"**Use contractions.** For example, use \"isn't\" instead of \"is not\". An "
"exception to this rule can be made when you specifically want to emphasize "
"one of the contraction's words."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:25
msgid ""
"**Use double quotes in messages** (``\"\"``) instead of single quotes "
"(``''``). Double quotes should be used to quote user input, file paths and "
"possibly other things depending on the context."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:31
msgid ""
"Try to follow the :ref:`doc_docs_writing_guidelines` in addition to the "
"guidelines outlined above."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:35
msgid "Button and menu texts"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:37
msgid "Capitalize text in buttons and menu actions:"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:39
msgid "**Good:** *Open Editor Data Folder*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:40
msgid "**Bad:** *Open editor data folder*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:42
msgid ""
"If a menu action opens a modal dialog, suffix it with an ellipsis (``...``)."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:44
msgid "**Good:** *Editor Settings...*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:45
msgid "**Bad:** *Editor Settings*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:48
msgid "Inspector sections"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:50
msgid ""
"In general, don't create sections that contain less than 3 items. Sections "
"that contain few items make it difficult to navigate the inspector, while "
"missing the benefits of using sections such as folding."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:54
msgid ""
"There are some valid exceptions for this, such as material features in :ref:"
"`class_SpatialMaterial`."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:57
msgid "This advice also applies to the Project Settings and Editor Settings."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:60
msgid "Inspector performance hints"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:62
msgid ""
"Enum properties that noticeably impact performance should have a performance "
"hint associated. The hint should refer to the *absolute* performance impact, "
"rather than being relative to the other options provided in the enum. Here "
"are some examples taken from the Godot editor:"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:67
msgid "**Screen-space antialiasing:** *Disabled (Fastest), FXAA (Fast)*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:68
msgid ""
"**MSAA quality:** *Disabled (Fastest), 2x (Fast), 4x (Average), 8x (Slow), "
"16x (Slower)*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:70
msgid ""
"**DirectionalLight mode:** *Orthogonal (Fast), PSSM 2 Splits (Average), PSSM "
"4 Splits (Slow)*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:73
msgid ""
"For consistency, try to stick to the terms below (from fastest to slowest):"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:75
msgid "*Fastest, Faster, Fast, Average, Slow, Slower, Slowest*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:77
msgid ""
"Their usage doesn't have to be contiguous. For example, you can use only "
"\"Fast\" and \"Slow\" from the list above."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:80
msgid ""
"If you're adding a new enum, its values should be ordered from the fastest "
"option to the slowest option."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:84
msgid "Tooltips"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:86
msgid ""
"Consider adding tooltips whenever the action performed by a button or menu "
"action isn't obvious. You can also provide additional context or highlight "
"caveats in the tooltip."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:90
msgid ""
"You can do this by calling ``set_tooltip(TTR(\"Text here.\"))`` on the "
"Control-based node in question. If the tooltip is particularly long (more "
"than ~80 characters), wrap it over several lines by adding line breaks using "
"``\\n``."
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:94
msgid ""
"Tooltips should follow the writing style described above. In addition to "
"this, use indicative mood instead of imperative mood:"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:97
msgid "**Good:** *Computes global illumination for the selected GIProbe.*"
msgstr ""

#: ../../docs/development/editor/editor_style_guide.rst:98
msgid "**Bad:** *Compute global illumination for the selected GIProbe.*"
msgstr ""

#: ../../docs/development/file_formats/index.rst:2
msgid "Godot file formats"
msgstr ""

#: ../../docs/development/file_formats/gdscript_grammar.rst:4
msgid "GDScript grammar"
msgstr ""

#: ../../docs/development/file_formats/gdscript_grammar.rst:6
msgid ""
"This is the formal grammar of GDScript written in `EBNF <https://en."
"wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form>`_, for reference "
"purposes."
msgstr ""

#: ../../docs/development/file_formats/gdscript_grammar.rst:9
msgid ""
"This grammar is descriptive only, derived from the reference documentation "
"and current implementation. The GDScript parser is **not** generated from a "
"grammar definition. Inconsistencies here likely mean an error in this "
"grammar, not a bug in GDScript."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:4
msgid "TSCN file format"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:6
msgid ""
"The TSCN (text scene) file format represents a single scene tree inside "
"Godot. Unlike binary SCN files, TSCN files have the advantage of being "
"mostly human-readable and easy for version control systems to manage."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:10
msgid ""
"The ESCN (exported scene) file format is identical to the TSCN file format, "
"but is used to indicate to Godot that the file has been exported from "
"another program and should not be edited by the user from within Godot. "
"Unlike SCN and TSCN files, during import, ESCN files are compiled to binary "
"SCN files stored inside the ``.import/`` folder. This reduces the data size "
"and speeds up loading, as binary formats are faster to load compared to text-"
"based formats."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:18
msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `resource_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/resource_format_text.cpp>`_ in the "
"``ResourceFormatLoaderText`` class."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:23
msgid "File structure"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:25
msgid "There are five main sections inside the TSCN file:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:27
msgid "File Descriptor"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:28
#: ../../docs/development/file_formats/tscn.rst:279
msgid "External resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:29
#: ../../docs/development/file_formats/tscn.rst:301
msgid "Internal resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:33
msgid ""
"The file descriptor looks like ``[gd_scene load_steps=3 format=2]`` and "
"should be the first entry in the file. The ``load_steps`` parameter is equal "
"to the total amount of resources (internal and external) plus one (for the "
"file itself). If the file has no resources, ``load_steps`` is omitted. The "
"engine will still load the file correctly if ``load_steps`` is incorrect, "
"but this will affect loading bars and any other piece of code relying on "
"that value."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:40
msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with ``[ext_resource .....]``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:45
msgid ""
"A TSCN file may contain single-line comments starting with a semicolon (``;"
"``). However, comments will be discarded when saving the file using the "
"Godot editor."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:49
msgid "Entries inside the file"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:51
msgid ""
"A heading looks like ``[<resource_type> key=value key=value key=value ...]`` "
"where resource_type is one of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:55
msgid "``ext_resource``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:56
msgid "``sub_resource``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:57
msgid "``node``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:58
msgid "``connection``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:60
msgid ""
"Below every heading comes zero or more ``key = value`` pairs. The values can "
"be complex datatypes such as Arrays, Transforms, Colors, and so on. For "
"example, a spatial node looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:73
msgid ""
"The scene tree is made up of… nodes! The heading of each node consists of "
"its name, parent and (most of the time) a type. For example ``[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:77
msgid "Other valid keywords include:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:79
msgid "``instance``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:80
msgid "``instance_placeholder``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:81
msgid "``owner``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:82
msgid ""
"``index`` (sets the order of appearance in the tree. If absent, inherited "
"nodes will take precedence over plain ones)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:83
msgid "``groups``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:85
msgid ""
"The first node in the file, which is also the scene root, must not have a "
"``parent=Path/To/Node`` entry in its heading. All scene files should have "
"exactly *one* scene root. If it doesn't, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but shouldn't contain the "
"scene root's name. If the node is a direct child of the scene root, the path "
"should be ``\".\"``. Here is an example scene tree (but without any node "
"content):"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:101
msgid ""
"Similar to the internal resource, the document for each node is currently "
"incomplete. Fortunately, it is easy to find out because you can simply save "
"a file with that node in it. Some example nodes are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:142
msgid ""
"A tree structure is not enough to represent the whole scene. Godot uses a "
"``NodePath(Path/To/Node)`` structure to refer to another node or attribute "
"of the node anywhere in the scene tree. For instance, MeshInstance uses "
"``NodePath()`` to point to its skeleton. Likewise, Animation tracks use "
"``NodePath()`` to point to node properties to animate."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:169
msgid ""
"The Skeleton node inherits the Spatial node, but also may have a list of "
"bones described in key-value pairs in the format ``bones/Id/"
"Attribute=Value``. The bone attributes consist of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:174
msgid "``parent``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:175
msgid "``rest``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:176
msgid "``pose``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:177
#: ../../docs/development/file_formats/tscn.rst:398
msgid "``enabled``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:178
msgid "``bound_children``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:180
msgid "``name`` must be the first attribute of each bone."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:181
msgid ""
"``parent`` is the index of parent bone in the bone list, with parent index, "
"the bone list is built to a bone tree."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:183
msgid "``rest`` is the transform matrix of bone in its \"resting\" position."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:184
msgid "``pose`` is the pose matrix; use ``rest`` as the basis."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:185
msgid ""
"``bound_children`` is a list of ``NodePath()`` which point to "
"BoneAttachments belonging to this bone."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:188
msgid "Here's an example of a skeleton node with two bones:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:209
msgid "BoneAttachment"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:211
msgid ""
"BoneAttachment node is an intermediate node to describe some node being "
"parented to a single bone in a Skeleton node. The BoneAttachment has a "
"``bone_name=NameOfBone`` attribute, and the corresponding bone being the "
"parent has the BoneAttachment node in its ``bound_children`` list."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:216
msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:241
msgid "AnimationPlayer"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:243
msgid ""
"AnimationPlayer works as an animation library. It stores animations listed "
"in the format ``anim/Name=SubResource(ResourceId)``; each line refers to an "
"Animation resource. All the animation resources use the root node of "
"AnimationPlayer. The root node is stored as ``root_node=NodePath(Path/To/"
"Node)``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:265
msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:269
msgid ""
"References to the resources are handled by ``id`` numbers in the resource's "
"heading. External resources and internal resources are referred to with "
"``ExtResource(id)`` and ``SubResource(id)``, respectively. Because there "
"have different methods to refer to internal and external resources, you can "
"have the same ID for both an internal and external resource."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:275
msgid ""
"For example, to refer to the resource ``[ext_resource id=3 "
"type=\"PackedScene\" path=....]``, you would use ``ExtResource(3)``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:281
msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of a path, a type and an ID."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:284
msgid ""
"Godot always generates absolute paths relative to the resource directory and "
"thus prefixed with ``res://``, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:288
msgid "Some example external resources are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:296
msgid ""
"Like TSCN files, a TRES file may contain single-line comments starting with "
"a semicolon (``;``). However, comments will be discarded when saving the "
"resource using the Godot editor."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:303
msgid ""
"A TSCN file can contain meshes, materials and other data. These are "
"contained in the *internal resources* section of the file. The heading for "
"an internal resource looks similar to those of external resources, except "
"that it doesn't have a path. Internal resources also have ``key=value`` "
"pairs under each heading. For example, a capsule collision shape looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:317
msgid ""
"Some internal resources contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"*before* the reference to it. This means that order matters in the file's "
"internal resources section."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:322
msgid ""
"Unfortunately, documentation on the formats for these subresources isn't "
"complete. Some examples can be found by inspecting saved resource files, but "
"others can only be found by looking through Godot's source."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:329
msgid ""
"ArrayMesh consists of several surfaces, each in the format "
"``surface\\Index={}``. Each surface is a set of vertices and a material."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:332
msgid "TSCN files support two surface formats:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:334
msgid "For the old format, each surface has three essential keys:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:336
msgid "``primitive``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:337
msgid "``arrays``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:338
msgid "``morph_arrays``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:340
msgid ""
"``primitive`` is an enumerate variable, ``primitive=4`` which is "
"``PRIMITIVE_TRIANGLES`` is frequently used."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:343
msgid "``arrays`` is a two-dimensional array, it contains:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:345
msgid "Vertex positions array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:346
msgid "Normals array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:347
msgid "Tangents array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:348
msgid "Vertex colors array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:349
msgid "UV array 1"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:350
msgid "UV array 2"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:351
msgid "Bone indexes array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:352
msgid "Bone weights array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:353
msgid "Vertex indexes array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:355
msgid ""
"``morph_arrays`` is an array of morphs. Each morph is exactly an ``arrays`` "
"without the vertex indexes array."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:358
msgid "An example of ArrayMesh:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:384
msgid ""
"An animation resource consists of tracks. Besides, it has ``length``, "
"``loop`` and ``step`` applied to all the tracks."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:387
msgid "``length`` and ``step`` are both durations in seconds."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:389
msgid ""
"Each track is described by a list of key-value pairs in the format ``tracks/"
"Id/Attribute``. Each track includes:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:392
msgid "``type``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:393
msgid "``path``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:394
msgid "``interp``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:395
msgid "``keys``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:396
msgid "``loop_wrap``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:397
msgid "``imported``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:400
msgid ""
"The ``type`` must be the first attribute of each track. The value of "
"``type`` can be:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:403
msgid "``transform``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:404
msgid "``value``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:405
msgid "``method``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:407
msgid ""
"The ``path`` has the format ``NodePath(Path/To/Node:attribute)``. It's the "
"path to the animated node or attribute, relative to the root node defined in "
"the AnimationPlayer."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:411
msgid ""
"The ``interp`` is the method to interpolate frames from the keyframes. It is "
"an enum variable with one of the following values:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:414
msgid "``0`` (constant)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:415
msgid "``1`` (linear)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:416
msgid "``2`` (cubic)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:418
msgid ""
"The ``keys`` correspond to the keyframes. It appears as a "
"``PoolRealArray()``, but may have a different structure for tracks with "
"different types."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:421
msgid ""
"A Transform track uses every 12 real numbers in the ``keys`` to describe a "
"keyframe. The first number is the timestamp. The second number is the "
"transition followed by a 3-number translation vector, followed by a 4-number "
"rotation quaternion (X, Y, Z, W) and finally a 3-number scale vector. The "
"default transition in a Transform track is 1.0."
msgstr ""

#: ../../docs/community/contributing/index.rst:2
msgid "Contributing"
msgstr ""

#: ../../docs/community/contributing/index.rst:4
msgid ""
"Everyone is most welcome to contribute to Godot. Here are some ways in which "
"you can contribute to the project:"
msgstr ""

#: ../../docs/community/contributing/index.rst:7
msgid ""
"Improving the engine by fixing bugs, coding new features, or refining "
"existing ones."
msgstr ""

#: ../../docs/community/contributing/index.rst:8
msgid ""
"Writing or proofreading documentation. You can contribute both to this "
"reference manual or the code reference."
msgstr ""

#: ../../docs/community/contributing/index.rst:10
msgid ""
"Translating the editor or documentation from English to other languages."
msgstr ""

#: ../../docs/community/contributing/index.rst:11
msgid ""
"Reporting issues or `writing detailed proposals <https://github.com/"
"godotengine/godot-proposals/>`__."
msgstr ""

#: ../../docs/community/contributing/index.rst:17
msgid ""
"You would like to contribute but you don't know how or what to do? You can "
"get answers below."
msgstr ""

#: ../../docs/community/contributing/index.rst:29
msgid "Contributing to the engine"
msgstr ""

#: ../../docs/community/contributing/index.rst:31
msgid ""
"The guides below explain how to contribute to the engine's core. You will "
"learn about the code style, the contribution workflow, and more."
msgstr ""

#: ../../docs/community/contributing/index.rst:49
msgid "Writing documentation"
msgstr ""

#: ../../docs/community/contributing/index.rst:51
msgid ""
"We always need help to improve the documentation, be it the class reference "
"or the manual. Below, you can find our content and writing guidelines and "
"concrete guides to make changes to the documentation."
msgstr ""

#: ../../docs/community/contributing/index.rst:56
msgid "Guidelines"
msgstr ""

#: ../../docs/community/contributing/index.rst:58
msgid ""
"Here are the principles and guidelines we strive to follow to write "
"accessible documentation."
msgstr ""

#: ../../docs/community/contributing/index.rst:70
msgid "Writing the manual"
msgstr ""

#: ../../docs/community/contributing/index.rst:80
msgid "Class reference guides"
msgstr ""

#: ../../docs/community/contributing/index.rst:82
msgid "The pages below focus on the class reference."
msgstr ""

#: ../../docs/community/contributing/index.rst:84
msgid ""
"As the reference is included in the Godot editor, its source files are part "
"of the `godot repository <https://github.com/godotengine/godot>`_. We use "
"XML files to write it, so the process to contribute to the class reference "
"differs from writing the online manual."
msgstr ""

#: ../../docs/community/contributing/index.rst:99
msgid "Translating the documentation"
msgstr ""

#: ../../docs/community/contributing/index.rst:101
msgid ""
"The community is always working hard on making Godot and its documentation "
"available to more people. Localizing the documentation is a colossal and "
"ongoing effort you can be part of."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:4
msgid "Ways to contribute"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:6
msgid ""
"Godot Engine is a non-profit, community-driven free and open source project. "
"Almost all (but our lead dev Juan, more on that below) developers are "
"working *pro bono* on their free time, out of personal interest and for the "
"love of creating a libre engine of exceptional quality."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:11
msgid ""
"This means that to thrive, Godot needs as many users as possible to get "
"involved by contributing to the engine. There are many ways to contribute to "
"such a big project, making it possible for everybody to bring something "
"positive to the engine, regardless of their skill set:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:16
msgid ""
"**Be part of the community.** The best way to contribute to Godot and help "
"it become ever better is simply to use the engine and promote it by word-of-"
"mouth, in the credits or splash screen of your games, blog posts, tutorials, "
"videos, demos, gamedev or free software events, support on the Q&A, forums, "
"Contributors Chat, Discord, etc. Participate! Being a user and advocate "
"helps spread the word about our great engine, which has no marketing budget "
"and can therefore only rely on its community to become more mainstream."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:25
msgid ""
"**Make games.** It's no secret that, to convince new users and especially "
"the industry at large that Godot is a relevant market player, we need great "
"games made with Godot. We know that the engine has a lot of potential, both "
"for 2D and 3D games, but given its young age we still lack big releases that "
"will draw attention to Godot. So keep working on your awesome projects, each "
"new game increases our credibility on the gamedev market!"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:32
msgid ""
"**Get involved in the engine's development.** This can be by contributing "
"code via pull requests, testing the development snapshots or directly the "
"git *master* branch, report bugs or suggest enhancements on the issue "
"tracker, improve the official documentation (both the class reference and "
"tutorials) and its translations. The following sections will cover each of "
"those \"direct\" ways of contributing to the engine."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:40
msgid ""
"**Donate.** Godot is a non-profit project, but it can still benefit from "
"user donations for many things. Apart from usual expenses such as hosting "
"costs or promotional material on events, we also use donation money to "
"acquire hardware when necessary (e.g. we used donation money to buy a "
"MacBook Pro to implement Retina/HiDPI support and various other macOS-"
"related features). Most importantly, we also used donation money to hire "
"core developers so they can work full-time on the engine. Even with a low "
"monthly wage, we need a steady donation income to continue doing this, which "
"has been very beneficial to the project so far. So if you want to donate "
"some money to the project, check `our website <https://godotengine.org/"
"donate>`_ for details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:54
msgid "Contributing code"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:56
msgid ""
"The possibility to study, use, modify and redistribute modifications of the "
"engine's source code are the fundamental rights that Godot's `MIT <https://"
"tldrlegal.com/license/mit-license>`_ license grants you, making it `free and "
"open source software <https://en.wikipedia.org/wiki/Free_and_open-"
"source_software>`_."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:61
msgid ""
"As such, everyone is entitled to modify `Godot's source code <https://github."
"com/godotengine/godot>`_, and send those modifications back to the upstream "
"project in the form of a patch (a text file describing the changes in a "
"ready-to-apply manner) or - in the modern workflow that we use - via a so-"
"called \"pull request\" (PR), i.e. a proposal to directly merge one or more "
"Git commits (patches) into the main development branch."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:68
msgid "Contributing code changes upstream has two big advantages:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:70
msgid ""
"Your own code will be reviewed and improved by other developers, and will be "
"further maintained directly in the upstream project, so you won't have to "
"reapply your own changes every time you move to a newer version. On the "
"other hand it comes with a responsibility, as your changes have to be "
"generic enough to be beneficial to all users, and not just your project; so "
"in some cases it might still be relevant to keep your changes only for your "
"own project, if they are too specific."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:78
msgid ""
"The whole community will benefit from your work, and other contributors will "
"behave the same way, contributing code that will be beneficial to you. At "
"the time of this writing, more than 1000 developers have contributed code "
"changes to the engine!"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:83
msgid ""
"To ensure good collaboration and overall quality, the Godot developers "
"enforce some rules for code contributions, for example regarding the style "
"to use in the C++ code (indentation, brackets, etc.) or the Git and PR "
"workflow."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:87
msgid ""
"A good place to start is by searching for issues tagged as `good first issue "
"<https://github.com/godotengine/godot/issues?"
"q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22>`_ on GitHub."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:91
msgid ""
"Technical details about the PR workflow are outlined in a specific section, :"
"ref:`doc_pr_workflow`."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:94
msgid ""
"Details about the code style guidelines and the ``clang-format`` tool used "
"to enforce them are outlined in :ref:`doc_code_style_guidelines`."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:98
msgid ""
"All pull requests must go through a review process before being accepted. "
"Depending on the scope of the changes, it may take some time for a "
"maintainer responsible for the modified part of the engine to provide their "
"review. We value all of our contributors and ask them to be patient in the "
"meantime, as it is expected that in an open source project like Godot, there "
"is going to be way more contributions than people validating them."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:105
msgid ""
"To make sure that your time and efforts aren't wasted, it is recommended to "
"vet the idea first before implementing it and putting it for a review as a "
"PR. To that end, Godot has a `proposal system <https://github.com/"
"godotengine/godot-proposals>`_. Its usage is encouraged to plan changes and "
"discuss them with the community. Implementation details can also be "
"discussed with other contributors on the `Godot Contributors Chat <https://"
"chat.godotengine.org/>`_."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:111
msgid ""
"Proposals are only required when working on an enhancement or a new feature. "
"Bug reports are sufficient for fixing issues."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:115
msgid "Testing and reporting issues"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:117
msgid ""
"Another great way of contributing to the engine is to test development "
"releases or the development branch and to report issues. It is also helpful "
"to report issues discovered in stable releases, so that they can be fixed in "
"the development branch and in future maintenance releases."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:123
msgid "Testing development versions"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:125
msgid "To help with the testing, you have several possibilities:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:127
msgid ""
"Compile the engine from source yourself, following the instructions of the :"
"ref:`Compiling <toc-devel-compiling>` page for your platform."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:130
msgid ""
"Test official pre-release binaries when they are announced (usually on the "
"blog and other community platforms), such as alpha, beta and release "
"candidate (RC) builds."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:133
msgid ""
"Test \"trusted\" unofficial builds of the development branch; just ask "
"community members for reliable providers. Whenever possible, it's best to "
"use official binaries or to compile yourself though, to be sure about the "
"provenance of your binaries."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:138
msgid ""
"As mentioned previously, it is also helpful to keep your eyes peeled for "
"potential bugs that might still be present in the stable releases, "
"especially when using some niche features of the engine which might get less "
"testing by the developers."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:144
msgid "Filing an issue on GitHub"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:146
msgid ""
"Godot uses `GitHub's issue tracker <https://github.com/godotengine/godot/"
"issues>`_ for bug reports and enhancement suggestions. You will need a "
"GitHub account to be able to open a new issue there, and click on the **New "
"issue** button."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:150
msgid ""
"When you report a bug, you should keep in mind that the process is similar "
"to an appointment with your doctor. You noticed *symptoms* that make you "
"think that something might be wrong (the engine crashes, some features don't "
"work as expected, etc.). It's the role of the bug triaging team and the "
"developers to then help make the diagnosis of the issue you met, so that the "
"actual cause of the bug can be identified and addressed."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:157
msgid ""
"You should therefore always ask yourself: what is relevant information to "
"give so that other Godot contributors can understand the bug, identify it "
"and hopefully fix it. Here are some of the most important infos that you "
"should always provide:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:162
msgid ""
"**Operating system.** Sometimes bugs are system-specific, i.e. they happen "
"only on Windows, or only on Linux, etc. That's particularly relevant for all "
"bugs related to OS interfaces, such as file management, input, window "
"management, audio, etc."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:167
msgid ""
"**Hardware.** Sometimes bugs are hardware-specific, i.e. they happen only on "
"certain processors, graphic cards, etc. If you are able to, it can be "
"helpful to include information on your hardware."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:171
msgid ""
"**Godot version.** This is a must-have. Some issues might be relevant in the "
"current stable release, but fixed in the development branch, or the other "
"way around. You might also be using an obsolete version of Godot and "
"experiencing a known issue fixed in a later version, so knowing this from "
"the start helps to speed up the diagnosis."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:177
msgid ""
"**How to reproduce the bug.** In the majority of cases, bugs are "
"reproducible, i.e. it is possible to trigger them reliably by following some "
"steps. Please always describe those steps as clearly as possible, so that "
"everyone can try to reproduce the issue and confirm it. Ideally, make a demo "
"project that reproduces this issue out of the box, zip it and attach it to "
"the issue (you can do this by drag and drop). Even if you think that the "
"issue is trivial to reproduce, adding a minimal project that lets everyone "
"reproduce it is a big added value. You have to keep in mind that there are "
"thousands of issues in the tracker, and developers can only dedicate little "
"time to each issue."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:188
msgid ""
"When you click the **New issue** button, you should be presented with a text "
"area prefilled with our issue template. Please try to follow it so that all "
"issues are consistent and provide the required information."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:193
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:4
msgid "Contributing to the documentation"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:195
msgid ""
"There are two separate resources referred to as \"documentation\" in Godot:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:197
msgid ""
"**The class reference.** This is the documentation for the complete Godot "
"API as exposed to GDScript and the other scripting languages. It can be "
"consulted offline, directly in Godot's code editor, or online at :ref:`Godot "
"API <toc-class-ref>`. To contribute to the class reference, you have to edit "
"the XML file corresponding to the class and make a pull request. See :ref:"
"`doc_updating_the_class_reference` and :ref:"
"`doc_class_reference_writing_guidelines` for more details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:205
msgid ""
"**The tutorials and engine documentation and its translations.** This is the "
"part you are reading now, which is distributed in the HTML format. Its "
"contents are generated from plain text files in the reStructured Text (rst) "
"format, to which you can contribute via pull requests on the `godot-docs "
"<https://github.com/godotengine/godot-docs>`_ GitHub repository. See :ref:"
"`doc_contributing_to_the_documentation` for more details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:213
msgid "Contributing translations"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:215
msgid ""
"To make Godot accessible to everyone, including users who may prefer "
"resources in their native language instead of English, our community helps "
"translate both the Godot editor and its documentation in many languages."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:219
msgid "See :ref:`doc_editor_and_docs_localization` for more details."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:4
msgid "Best practices for engine contributors"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:9
msgid ""
"Godot has a large amount of users who have the ability to contribute, given "
"the project itself is aimed mainly at users with the ability to do "
"programming. Despite this, not all of them have the same level of experience "
"working in large projects or in software engineering, which can lead to "
"common misunderstandings and bad practices during the process of "
"contributing code to the project."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:18
msgid ""
"The scope of this document is to be a list of best practices for "
"contributors to follow, as well as to create a language they can use to "
"refer to common situations that arise in the process of submitting their "
"contributions."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:22
msgid ""
"While some may find it useful to extend this to general software "
"development, our intention is to just restrict to situations that are most "
"common in our project."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:26
msgid ""
"Contributions are most of the time categorized as bug fixes, enhancements or "
"new features. To abstract this idea, we will call them *Solutions*, because "
"they always seek to solve something that can be described as a *Problem*."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:31
msgid "Best Practices"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:34
msgid "#1: The problem always comes first"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:36
msgid ""
"Many contributors are extremely creative and just enjoy the process of "
"designing abstract data structures, creating nice user interfaces, or simply "
"love programming. Whatever the case may be, they come up with cool ideas, "
"which may or may not be solving any real problems."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:43
msgid ""
"These are usually called *Solutions in search of a problem*. In an ideal "
"world, they would not be harmful but, in reality, code takes time to write, "
"takes space as source and binary and requires maintenance once it exists. "
"Avoiding the addition of anything unnecessary is always considered a good "
"practice in software development."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:50
msgid "#2: To solve the problem, it has to exist in the first place"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:52
msgid ""
"This is a variation of the previous practice. Adding anything unnecessary is "
"not a good idea, but what constitutes what is necessary and what isn't?"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:57
msgid ""
"The answer to this question is that the problem needs to *exist* before it "
"can be actually solved. It must not be speculation or a belief. The user "
"must be using the software as intended to create something they *need*. In "
"this process, the user may stumble into a problem that requires a solution "
"to proceed, or in order to achieve greater productivity. In this case, *a "
"solution is needed*."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:63
msgid ""
"Believing that problems may arise in the future and that the software needs "
"to be ready to solve them by the time they appear is called *\"Future "
"proofing\"* and its characterized by lines of thought such as:"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:67
msgid "I think it would be useful for users to..."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:68
msgid "I think users will eventually need to..."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:70
msgid ""
"This is generally considered a bad habit because trying to solve problems "
"that *don't actually exist* in the present will often lead to code that will "
"be written but never used, or that is considerably more complex to use and "
"maintain than it needs to be."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:76
msgid "#3: The problem has to be complex or frequent"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:78
msgid ""
"Software is designed to solve problems, but we can't expect it to solve "
"*every problem that exists under the sun*. As a game engine, Godot will "
"solve problems for you, so it helps you to make games better and faster, but "
"it won't make the *entire game* for you. A line must be drawn somewhere."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:85
msgid ""
"Whether a problem is worth solving is determined by the difficulty the user "
"has to work around it. This difficulty can be expressed as:"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:88
msgid "The complexity of the problem"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:89
msgid "The frequency the problem"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:91
msgid ""
"If the problem is *too complex* for most users to solve, the software must "
"offer a ready-made solution for it. Likewise, if the problem is easy for the "
"user to work around, offering such a solution is unnecessary and it's up to "
"the user to do it."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:96
msgid ""
"The exception, however, is when the user stumbles into this problem "
"*frequently enough* that having to do the simple solution every time becomes "
"an annoyance. In this case, the software must offer a solution to simplify "
"this use case."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:100
msgid ""
"In our experience, in most cases it's usually obvious to tell when a problem "
"is complex or frequent, but cases may arise where drawing this line is "
"difficult. This is why discussing with other developers (next point) is "
"always advised."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:105
msgid "#4: The solution must be discussed with others"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:107
msgid ""
"It is often the case that when users stumble upon problems, they are only "
"immersed in their project, so they will naturally try to solve the problem "
"from their perspective, thinking only about their use case."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:111
msgid ""
"Because of this, user proposed solutions don't always contemplate other use "
"cases that developers are often aware of, so they are often biased towards "
"their own requirements."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:117
msgid ""
"For developers, the perspective is different. They may find the user's "
"problem too unique to justify a solution (instead of a user workaround), or "
"maybe they will suggest a partial (usually simpler or lower level) solution "
"that applies to a wider range of known problems, and leave the rest of the "
"solution up to the user."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:123
msgid ""
"In any case, before attempting a contribution, it is important to discuss "
"the actual problems with the other developers or contributors, so a better "
"agreement on implementation can be reached."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:127
msgid ""
"The only exception, in this case, is when an area of code has a clear owner "
"(agreed by the other contributors), who talks to users directly and has the "
"most knowledge to implement a solution directly."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:131
msgid ""
"Also, Godot's philosophy is to favor ease of use and maintenance over "
"absolute performance. Performance optimizations will be considered, but they "
"may not be accepted if they make something too difficult to use or if they "
"add too much complexity to the codebase."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:137
msgid "#5: To each problem, its own solution"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:139
msgid ""
"For programmers, it is always a most enjoyable challenge to find the most "
"optimal solutions to problems. Things, however, may go overboard sometimes "
"and programmers will try to come up with solutions that solve as many "
"problems as possible."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:144
msgid ""
"The situation will often take a turn for the worse when, in order to make "
"this solution appear even more fantastic and flexible, the pure speculation-"
"based problems (as described in #2) also make their appearance on stage."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:150
msgid ""
"The main problem is that, in reality, it rarely works this way. Most of the "
"time, writing an individual solution to each problem results in code that is "
"simpler and more maintainable."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:154
msgid ""
"Additionally, solutions that target individual problems are better for the "
"users, as they find something that does exactly what they need, without "
"having to learn and remember a more complex system they will only need for "
"simple tasks."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:159
msgid ""
"Big and flexible solutions also have an additional drawback which is that, "
"over time, they are rarely flexible enough for all users, who keep "
"requesting more functions added (and making the API and codebase more and "
"more complex)."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:164
msgid "#6: Cater to common use cases, leave the door open for the rare ones"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:166
msgid ""
"This is a continuation of the previous point, which further explains why "
"this way of thinking and designing software is preferred."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:169
msgid ""
"As mentioned before (in point #2), it is very difficult for us (as human "
"beings who design software) to actually understand all future user needs. "
"Trying to write very flexible structures that cater to many use cases at "
"once is often a mistake."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:174
msgid ""
"We may come up with something we believe is brilliant, but when it's "
"actually used, we will find that users will never even use half of it, or "
"that they will require features that don't quite accommodate our original "
"design, forcing us to either throw it away or make it even more complex."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:179
msgid ""
"The question is then, how to design software that gives users what *we know "
"they need*, but that is flexible enough to allow them to do *what we don't "
"know they might need* in the future?"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:185
msgid ""
"The answer to this question is that, to ensure users still can do what they "
"want to do, we need to give them access to a *low level API* that they can "
"use to achieve what they want, even if it's more work for them because it "
"means reimplementing some logic that already exists."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:190
msgid ""
"In real-life scenarios, these use cases will be at most rare and uncommon "
"anyway, so it makes sense a custom solution needs to be written. This is why "
"it's important to still provide users the basic building blocks to do it."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:195
msgid "#7: Prefer local solutions"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:197
msgid ""
"When looking for a solution to a problem, be it implementing a new feature "
"or fixing a bug, sometimes the easiest path is to add data or a new function "
"in the core layers of code."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:201
msgid ""
"The main problem here is, adding something to the core layers that will only "
"be used from a single location far away will not only make the code more "
"difficult to follow (split in two), but also make the core API larger, more "
"complex, more difficult to understand in general."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:206
msgid ""
"This is bad, because readability and cleanness of core APIs is always of "
"extreme importance given how much code relies on it, and because it's key "
"for new contributors as a starting point to learning the codebase."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:214
msgid ""
"The common reasoning for wanting to do this is that it's usually less code "
"to simply add a hack in the core layers."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:217
msgid ""
"Despite this, this practice is not advised. Generally, the code for a "
"solution should be closer to where the problem originates, even if it "
"involves more code, duplicated, more complex or is less efficient. More "
"creativity might be needed, but this path is always the advised one."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:223
msgid "#8: Don't use complex canned solutions for simple problems"
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:225
msgid ""
"Not every problem has a simple solution and, many times, the right choice is "
"to use a third party library to solve the problem."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:228
msgid ""
"As Godot requires to be shipped in a large amount of platforms, we can't "
"link libraries dynamically. Instead, we bundle them in our source tree."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:233
msgid ""
"As a result, we are very picky with what goes in, and we tend to prefer "
"smaller libraries (in fact, single header ones are our favorite). Only in "
"cases where there is no other choice we end up bundling something larger."
msgstr ""

#: ../../docs/community/contributing/best_practices_for_engine_contributors.rst:237
msgid ""
"Also, libraries must use a permissive enough license to be included into "
"Godot. Some examples of acceptable licenses are Apache 2.0, BSD, MIT, ISC, "
"and MPL 2.0. In particular, we cannot accept libraries licensed under the "
"GPL or LGPL since these licenses effectively disallow static linking in "
"proprietary software (which Godot is distributed as in most exported "
"projects). This requirement also applies to the editor, since we may want to "
"run it on iOS in the long term. Since iOS doesn't support dynamic linking, "
"static linking the only option on that platform."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:4
msgid "Pull request workflow"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:8
msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:16
msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:22
msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:27
msgid "Git source repository"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:29
msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:33
msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:36
msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:46
msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:52
msgid "The branches on the Git repository are organized as follows:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:54
msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:58
msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:68
msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:72
msgid "Forking and cloning"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:74
msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:81
msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:86
msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:91
msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:94
msgid "To clone your fork from GitHub, use the following command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:100
msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:104
msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:111
msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:118
msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:123
msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:127
msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:130
msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:138
msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's project manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:143
msgid "Branching"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:145
msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:157
msgid "This command is equivalent:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:164
msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:170
msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:180
msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:189
msgid "Updating your branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:191
msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:197
msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:205
msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:210
msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:217
msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:222
msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:226
msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:230
msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:237
msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:242
msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:246
msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:252
msgid "Making changes"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:254
msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:258
msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:265
msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:268
msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:270
msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:272
msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:273
msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:275
msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:276
msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:278
msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:283
msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:286
msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:288
msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:291
msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:294
msgid "Here's how the shell history could look like on our example:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:326
msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:331
msgid "Pushing changes to a remote"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:333
msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:342
msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:350
msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:355
msgid "Issuing a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:357
msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:364
msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:371
msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:377
msgid "Modifying a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:379
msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:383
msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:398
msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:428
msgid "The interactive rebase"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:430
msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request of your to *rebase* your branch to *squash* some or all of the "
"commits into one."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:435
msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:440
msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:445
msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:450
msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:458
msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:463
msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:473
msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:482
msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:495
msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:500
msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:514
msgid ""
"This is a sane behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:522
msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:527
msgid "Deleting a Git branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:529
msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:534
msgid "To delete our better project manager branch locally, use this command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:540
msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:543
msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:549
msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:4
msgid "Testing pull requests"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:6
msgid ""
"Many people are developing new features or fixing bugs on GitHub. To help "
"with engine development, you may be asked to test those pull requests with a "
"Godot build that includes code from the pull request in question."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:10
msgid ""
"Thanks to GitHub Actions, all `pull requests <https://github.com/godotengine/"
"godot/pulls>`__ have continuous builds available. These builds let you try "
"out pull requests without having to compile anything from source."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:15
msgid "Downloading a compiled build"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:17
msgid ""
"You can download pull request builds from GitHub Actions. Since only signed "
"in users may download builds directly from GitHub Actions, the procedure "
"varies depending on whether you have a GitHub account or not."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:23
msgid ""
"Due to a GitHub Actions limitation, builds are only available for 90 days "
"after the pull request was last updated. If you still wish to try a pull "
"request locally, you can :ref:`compile the pull request branch from source "
"<doc_testing_pull_requests_compile>` instead."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:30
msgid "If you have a GitHub account"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:32
msgid ""
"Open the pull request page. Click the **Checks** tab near the top of the "
"page:"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:36
msgid ""
"In the list of platforms that appears on the left, select your platform by "
"clicking it then choose the type of build you need (editor or export "
"template). If in doubt, select an editor build:"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:42
msgid ""
"Click the **Artifacts** dropdown on the right of the page then click the "
"artifact's name to download it:"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:47
#: ../../docs/community/contributing/testing_pull_requests.rst:79
msgid ""
"Extract the ZIP archive then run the executable. Note that Windows and macOS "
"binaries are not code signed. This means you may have to bypass a security "
"warning before you can run the executable. If you frequently test pull "
"request builds, it may be better to disable Windows SmartScreen or `disable "
"macOS Gatekeeper <https://disable-gatekeeper.github.io/>`__ permanently."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:54
msgid "If you don't have a GitHub account"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:56
msgid ""
"If you don't have a GitHub account and can't sign up for one, you can use "
"the third-party `nightly.link <https://nightly.link>`__ service to generate "
"a universal download link."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:60
#: ../../docs/community/contributing/testing_pull_requests.rst:94
msgid ""
"Open the pull request page. Click the *fork*'s branch name near the top of "
"the page:"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:64
msgid ""
"Now that you are on the fork's branch page, click the ``.github`` folder at "
"the top of the file list. Then, click on the ``workflows`` folder (whicb is "
"inside the ``.github`` folder). Click the workflow file for the platform you "
"wish to download artifacts for. *After* clicking on the file (which opens "
"the file view), copy the page URL from your browser's address bar."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:69
msgid ""
"Open the `nightly.link <https://nightly.link>`__ website and paste the URL "
"you just copied into the text field located below the heading **Paste a "
"GitHub link, get a nightly.link!**. After pasting the URL, click **Get "
"links** on the right. If the the format of the URL you pasted is correct, "
"you should be presented with a page like this:"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:77
msgid "Click the URL of the artifact you wish to download."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:88
msgid "Compiling a pull request branch from source"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:90
msgid ""
"This approach may be needed for pull requests that were last updated more "
"than 90 days ago, or to test on platforms and configurations that are not "
"supported by Godot's GitHub Actions setup."
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:98
msgid ""
"Now that you are on the fork's branch page, click the green **Code** button "
"on the right of the page then choose **Download ZIP** in the dropdown:"
msgstr ""

#: ../../docs/community/contributing/testing_pull_requests.rst:103
msgid ""
"Extract the ZIP archive and follow the :ref:`compiling <toc-devel-"
"compiling>` instructions for your operating system."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:4
msgid "Bisecting regressions"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:8
msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:14
msgid "The guide below explains how to find a regression by bisecting."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:17
msgid "What is bisecting?"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:19
msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:27
msgid "Using official builds to speed up bisecting"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:29
msgid ""
"Before using Git's ``bisect`` command, we strongly recommend trying to "
"reproduce the bug with an older (or newer) official release. This greatly "
"reduces the range of commits that potentially need to be built from source "
"and tested. You can find binaries of official releases, as well as alphas, "
"betas, and release candidates `here <https://downloads.tuxfamily.org/"
"godotengine/>`__."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:35
msgid ""
"For example, if you've reported a bug against Godot 3.2, you should first "
"try to reproduce the bug in Godot 3.1 (not a patch release, see below for "
"the reason). If the bug doesn't occur there, try to reproduce it in Godot "
"3.2 *beta 1* (which is roughly in the middle of all test builds available). "
"If you can't reproduce the bug with Godot 3.2 beta 1, then try newer betas "
"and RC builds. If you do manage to reproduce the bug with Godot 3.2 beta 1, "
"then try older alpha builds."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:44
msgid ""
"For bisecting regressions, don't use patch releases such as Godot 3.1.2. "
"Instead, use the minor version's first release like Godot 3.1. This is "
"because patch releases are built from a separate *stable branch*. This kind "
"of branch doesn't follow the rest of Godot's development, which is done in "
"the ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:51
msgid "The Git bisect command"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:53
msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:61
msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:66
msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:72
msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:80
msgid ""
"If you're using a stable release as the \"good\" or \"bad\" build, use one "
"of the following commit hashes depending on the version:"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:89
msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:92
msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:104
msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:112
msgid ""
"Since building Godot takes a while, you want to dedicate as many CPU threads "
"as possible to the task. This is what the ``-j`` parameter does. Here, the "
"command assigns 4 CPU threads to compiling Godot."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:116
msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:118
msgid "If the build **still** exhibits the bug, run the following command:"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:124
msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:130
msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:137
msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""

#: ../../docs/community/contributing/bisecting_regressions.rst:144
msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-scm."
"com/docs/git-bisect>`__."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:4
msgid "Bug triage guidelines"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:6
msgid ""
"This page describes the typical workflow of the bug triage team aka bugsquad "
"when handling issues and pull requests on Godot's `GitHub repository "
"<https://github.com/godotengine/godot>`__. It is bound to evolve together "
"with the bugsquad, so do not hesitate to propose modifications to the "
"following guidelines."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:13
msgid "Issues management"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:15
msgid "GitHub proposes various features to manage issues:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:17
msgid "Set one or several labels from a predefined list"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:18
msgid "Set one milestone from a predefined list"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:19
msgid "Keep track of the issue in the project dashboard"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:20
msgid ""
"Define one contributor as \"assignee\" among the Godot engine organization "
"members"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:23
msgid ""
"As the Godot engine organization on GitHub currently has a restricted number "
"of contributors, we do not use assignees extensively for now. All "
"contributors are welcome to take on any issue, if relevant after mentioning "
"it on the issue ticket and/or discussing the best way to resolve it with "
"other developers."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:29
msgid "For the time being, we do not use the project dashboard feature either."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:31
msgid ""
"As far as possible, we try to assign labels (and milestones, when relevant) "
"to both issues and pull requests."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:35
msgid "Labels"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:37
msgid "The following labels are currently defined in the Godot repository:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:39
msgid "**Categories:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:41
msgid ""
"*Archived*: either a duplicate of another issue, or invalid. Such an issue "
"would also be closed."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:43
msgid ""
"*Breaks compat*: describes something that can only be fixed by breaking "
"compatibility with existing projects."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:45
msgid "*Bug*: describes something that is not working properly."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:46
msgid ""
"*Cherrypick*: describes something that can be backported to a stable branch "
"after being merged in the ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:48
msgid ""
"*Crash:* describes a bug that causes the engine to crash. This label is only "
"used for \"hard\" crashes, not freezes."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:50
msgid ""
"*Confirmed*: has been confirmed by at least one other contributor than the "
"bug reporter (typically for *Bug* reports). The purpose of this label is to "
"let developers know which issues are still reproducible when they want to "
"select what to work on. It is therefore a good practice to add in a comment "
"on what platform and what version or commit of Godot the issue could be "
"reproduced; if a developer looks at the issue one year later, the "
"*Confirmed* label may not be relevant anymore."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:58
#: ../../docs/community/contributing/bug_triage_guidelines.rst:158
msgid ""
"*Discussion*: the issue is not consensual and needs further discussion to "
"define what exactly should be done to address the topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:61
msgid ""
"*Documentation*: issue related to the documentation. Mainly to request "
"enhancements in the API documentation. Issues related to the ReadTheDocs "
"documentation should be filed on the `godot-docs <https://github.com/"
"godotengine/godot-docs>`_ repository."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:65
msgid ""
"*Enhancement*: describes a proposed enhancement to an existing functionality."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:67
msgid ""
"*Feature proposal*: describes a wish for a new feature to be implemented. "
"Note that the main Godot repository no longer accepts feature requests. "
"Please use `godot-proposals <https://github.com/godotengine/godot-"
"proposals>`__ instead."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:71
msgid ""
"*For PR meeting*: the issue needs to be discussed in a pull request meeting. "
"These meetings are public and are held on the `Godot Contributors Chat "
"<https://chat.godotengine.org/>`_."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:73
msgid ""
"*Good first issue*: the issue is *assumed* to be an easy one to fix, which "
"makes it a great fit for new contributors who need to become familiar with "
"the code base."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:76
msgid ""
"*High priority:* the issue is particularly important as it can prevent "
"people from releasing their projects or cause data loss."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:78
msgid ""
"*Needs work*: the pull request needs additional work before it can be merged."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:79
msgid ""
"*Needs testing*: the issue/pull request could not be completely tested and "
"thus need further testing. This can mean that it needs to be tested on "
"different hardware/software configurations or even that the steps to "
"reproduce are not certain."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:83
msgid ""
"*Performance*: issues that directly impact engine or editor performance. Can "
"also be used for pull requests that improve performance or add low-end-"
"friendly options. Should not be coupled with *Usability*."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:86
msgid ""
"*PR welcome / Hero wanted!*: Contributions for issues with these labels are "
"especially welcome. Note that this **doesn't** mean you can't work on issues "
"without these labels."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:89
msgid ""
"*Regression*: the bug appeared after a stable release not exhibiting the bug "
"was released."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:91
#: ../../docs/community/contributing/bug_triage_guidelines.rst:169
msgid ""
"*Salvageable*: the pull request can't be merged due to design issues or "
"merge conflicts and its author is not active anymore. However, it can still "
"be picked up by an external contributor to bring it to a mergeable state. To "
"do so, you need to open a new pull request based on the original pull "
"request."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:95
msgid ""
"*Tracker*: issue used to track other issues (like all issues related to the "
"plugin system)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:97
msgid ""
"*Usability*: issues that directly impact user usability. Should not be "
"coupled with *Performance*."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:99
msgid ""
"The categories are used for general triage of the issues. They can be "
"combined in some way when relevant, e.g. an issue can be labelled "
"*Enhancement* and *Usability* at the same time if it's an issue to improve "
"usability. Or *Feature proposal* and *Discussion* if it's a non-consensual "
"feature request, or one that is not precise enough to be worked on."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:105
msgid "**Topics:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:107
msgid ""
"*2D*: relates to 2D-specific issues. Should be coupled with one of the "
"labels below, and should not be coupled with *3D*."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:108
msgid ""
"*3D*: relates to 3D-specific issues. Should be coupled with one of the "
"labels below, and should not be coupled with *2D*."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:109
msgid "*Assetlib*: relates to issues with the asset library."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:110
msgid "*Audio*: relates to the audio features (low and high level)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:111
msgid ""
"*Buildsystem*: relates to building issues, either linked to the SCons "
"buildsystem or to compiler peculiarities."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:113
msgid "*Codestyle*: relates to the programming style used within the codebase."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:114
msgid ""
"*Core*: anything related to the core engine. It might be further split later "
"on as it's a pretty big topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:116
msgid "*Editor*: relates to issues in the editor (mainly UI)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:117
msgid "*GDNative*: relates to the GDNative module."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:118
msgid "*GDScript*: relates to GDScript."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:119
msgid "*GUI*: relates to GUI (Control) nodes."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:120
msgid "*Import*: relates to the resource import system."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:121
msgid "*Input*: relates to input system."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:122
msgid "*Mono*: relates to the C# / Mono bindings."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:123
msgid ""
"*Navigation*: relates to the navigation system (including A* and navmeshes)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:124
msgid "*Network*: relates to networking."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:125
msgid "*Physics*: relates to the physics engine (2D/3D)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:126
msgid "*Plugin*: relates to problems encountered while writing plugins."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:127
msgid "*Porting*: relates to some specific platforms or exporting projects."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:128
msgid "*Rendering*: relates to the 2D and 3D rendering engines."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:129
msgid "*Shaders*: relates to the Godot shader language or visual shaders."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:130
msgid "*Tests*: relates to unit tests."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:131
msgid "*Thirdparty*: relates to third-party libraries used in Godot."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:132
msgid ""
"*VisualScript*: relates to issues with the visual scripting language (*not* "
"visual shaders)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:133
msgid "*XR*: relates to Augmented Reality or Virtual Reality."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:135
msgid ""
"Issues would typically correspond to only one topic, though it's not "
"unthinkable to see issues that fit two bills. The general idea is that there "
"will be specialized contributors teams behind all topics, so they can focus "
"on the issues labelled with their team's topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:140
msgid "**Platforms:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:142
msgid "*Android*, *HTML5*, *iOS*, *Linux*, *macOS*, *Windows*, *UWP*"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:144
msgid ""
"By default, it is assumed that a given issue applies to all platforms. If "
"one of the platform labels is used, it is then exclusive and the previous "
"assumption doesn't stand anymore (so if it's a bug on e.g. Android and Linux "
"exclusively, select those two platforms)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:150
msgid "Documentation labels"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:152
msgid ""
"In the `documentation repository <https://github.com/godotengine/godot-"
"docs>`__, we use the following labels:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:155
msgid ""
"*Bug*: Incorrect information in an existing page. Not to be used for "
"*missing* information."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:157
msgid ""
"*Class reference*: the issue is about the class reference, not a "
"documentation page."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:161
msgid "*Enhancememnt*: new information to be added in an existing page."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:162
msgid "*New page*: a new page to be created."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:163
msgid ""
"*Hero wanted!*: contributions for issues with these labels are especially "
"welcome. Note that this **doesn't** mean you can't work on issues without "
"these labels."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:166
msgid ""
"*Organization*: The issue involves moving pages around or reorganizing "
"content."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:167
msgid ""
"*Redirect*: a redirection needs to be created in the Read the Docs backend. "
"Only administrators can do this."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:173
msgid "*Topic:Mono*: the issue is about C# support in Godot."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:174
msgid ""
"*Topic:Website*: the issue relates to the Sphinx/Read the Docs frontend or "
"backend, not the documentation contents."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:178
msgid "Milestones"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:180
msgid ""
"`Milestones <https://github.com/godotengine/godot/milestones>`_ correspond "
"to planned future versions of Godot for which there is an existing roadmap. "
"Issues that fit in the said roadmap should be filed under the corresponding "
"milestone; if they don't correspond to any current roadmap, they should be "
"left without milestone. As a rule of thumb, an issue corresponds to a given "
"milestone if it concerns a feature that is new in the milestone, or a "
"critical bug that can't be accepted in any future stable release, or "
"anything that Juan wants to work on right now. :)"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:189
msgid ""
"Contributors are free to pick issues regardless of their assigned milestone; "
"if a fix is proposed for a bug that was not deemed urgent and thus without "
"milestone, it would likely still be very welcome."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:4
msgid "Code style guidelines"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:8
msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:15
msgid "C++ and Objective-C"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:17
msgid ""
"There are no written guidelines, but the code style agreed upon by the "
"developers is enforced via the `clang-format <http://clang.llvm.org/docs/"
"ClangFormat.html>`__ code beautifier, which takes care for you of all our "
"conventions. To name a few:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:22
msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:23
msgid "One space around math and assignments operators as well as after commas"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:24
msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:26
msgid "See further down regarding header includes"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:28
msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:32
msgid ""
"As long as you ensure that your style matches the surrounding code and that "
"you not introducing trailing whitespace or space-based indentation, you "
"should be fine. If you plan to contribute regularly however, we strongly "
"advise that you setup clang-format locally to check and automatically fix "
"all your commits."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:37
msgid ""
"Godot's code style should *not* be applied to third-party code, i.e. that is "
"included in Godot's source tree but was not written specifically for our "
"project. Such code usually come from different upstream projects with their "
"own style guides (or lack thereof), and don't want to introduce differences "
"that would make syncing with upstream repositories harder."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:44
msgid ""
"Third-party code is usually included in the ``thirdparty/`` folder and can "
"thus easily be excluded from formatting scripts. For the rare cases where a "
"third-party code snippet needs to be included directly within a Godot file, "
"you can use ``/* clang-format off */`` and ``/* clang-format on */`` to tell "
"clang-format to ignore a chunk of code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:53
msgid ""
"These guidelines only cover code formatting. See :ref:"
"`doc_cpp_usage_guidelines` for a list of language features that are "
"permitted in pull requests."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:57
msgid "Using clang-format locally"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:59
msgid ""
"First of all, you will need to install clang-format. As of now, you need to "
"use **clang-format 13** to be compatible with Godot's format. Later versions "
"might be suitable, but previous versions may not support all used options, "
"or format some things differently, leading to style issues in pull requests."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:65
#: ../../docs/community/contributing/code_style_guidelines.rst:270
msgid "Installation"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:67
msgid "Here's how to install clang-format:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:69
msgid ""
"Linux: It will usually be available out-of-the-box with the clang toolchain "
"packaged by your distribution. If your distro version is not the required "
"one, you can download a pre-compiled version from the `LLVM website <http://"
"releases.llvm.org/download.html>`__, or if you are on a Debian derivative, "
"use the `upstream repos <http://apt.llvm.org/>`__."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:74
msgid ""
"macOS and Windows: You can download precompiled binaries from the `LLVM "
"website <http://releases.llvm.org/download.html>`__. You may need to add the "
"path to the binary's folder to your system's ``PATH`` environment variable "
"to be able to call ``clang-format`` out of the box."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:79
msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:82
#: ../../docs/community/contributing/code_style_guidelines.rst:282
msgid "Manual usage"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:84
msgid ""
"You can apply clang-format manually one or more files with the following "
"command:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:91
msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:93
msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:99
#: ../../docs/community/contributing/code_style_guidelines.rst:297
msgid "Pre-commit hook"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:101
msgid ""
"For ease of use, we provide a pre-commit hook for Git that will run clang-"
"format automatically on all your commits to check them, and let you apply "
"its changes in the final commit."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:105
msgid ""
"This \"hook\" is a script which can be found in ``misc/hooks``, refer to "
"that folder's README.md for installation instructions."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:108
msgid ""
"If your clang-format is not in the ``PATH``, you may have to edit the ``pre-"
"commit-clang-format`` to point to the correct binary for it to work. The "
"hook was tested on Linux and macOS, but should also work in the Git Shell on "
"Windows."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:114
msgid "IDE plugin"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:116
msgid ""
"Most IDEs or code editors have beautifier plugins that can be configured to "
"run clang-format automatically, for example each time you save a file."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:119
msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:121
msgid ""
"Qt Creator: `Beautifier plugin <http://doc.qt.io/qtcreator/creator-"
"beautifier.html>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:122
msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:123
msgid ""
"Visual Studio: `ClangFormat <https://marketplace.visualstudio.com/items?"
"itemName=LLVMExtensions.ClangFormat>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:124
msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:125
msgid ""
"CLion: Starting from version ``2019.1``, no plugin is required. Instead, "
"enable `ClangFormat <https://www.jetbrains.com/help/clion/clangformat-as-"
"alternative-formatter.html#clion-support>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:128
msgid "(Pull requests welcome to extend this list with tested plugins.)"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:133
msgid "Header includes"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:135
msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:138
msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:140
msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:143
msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:146
msgid ""
"Then come headers from Godot's own code base, included in alphabetical order "
"(enforced by ``clang-format``) with paths relative to the root folder. Those "
"includes should be done with quotes, e.g. ``#include \"core/object.h\"``. "
"The block of Godot header includes should then be followed by an empty line "
"for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:151
msgid ""
"Finally, third-party headers (either from ``thirdparty`` or from the "
"system's include paths) come next and should be included with the < and > "
"symbols, e.g. ``#include <png.h>``. The block of third-party headers should "
"also be followed by an empty line for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:155
msgid ""
"Godot and third-party headers should be included in the file that requires "
"them, i.e. in the `.h` header if used in the declarative code or in the `."
"cpp` if used only in the imperative code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:247
msgid "Java"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:249
msgid ""
"Godot's Java code (mostly in ``platform/android``) is also enforced via "
"``clang-format``, so see the instructions above to set it up. Keep in mind "
"that this style guide only applies to code written and maintained by Godot, "
"not third-party code such as the ``java/src/com/google`` subfolder."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:255
msgid "Python"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:257
msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:260
msgid ""
"For those, we follow the `Black style guide <https://github.com/psf/"
"black#the-black-code-style>`__. Blacken your Python changes using `Black "
"<https://pypi.org/project/black/>`__."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:264
msgid "Using black locally"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:266
msgid ""
"First of all, you will need to install black. Black requires Python 3.6.0+ "
"to run."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:272
msgid "Here's how to install black:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:279
msgid "You then have different possibilities to apply black to your changes:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:284
msgid ""
"You can apply ``black`` manually to one or more files with the following "
"command:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:291
msgid ""
"``-l 120`` means that the allowed number of characters per line is 120. This "
"number was agreed upon by the developers."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:293
msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:299
msgid ""
"For ease of use, we provide a pre-commit hook for Git that will run black "
"automatically on all your commits to check them, and let you apply its "
"changes in the final commit."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:303
msgid ""
"This \"hook\" is a script which can be found in ``misc/hooks``. Refer to "
"that folder's ``README.md`` for installation instructions."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:308
msgid "Editor integration"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:310
msgid ""
"Many IDEs or code editors have beautifier plugins that can be configured to "
"run black automatically, for example each time you save a file. For details "
"you can check `Black editor integration <https://github.com/psf/black#editor-"
"integration>`__."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:315
msgid "Comment style guide"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:317
msgid ""
"This comment style guide applies to all programming languages used within "
"Godot's codebase."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:320
msgid ""
"Begin comments with a space character to distinguish them from disabled code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:321
msgid ""
"Use sentence case for comments. Begin comments with an uppercase character "
"and always end them with a period."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:323
msgid "Reference variable/function names and values using backticks."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:324
msgid "Wrap comments to ~100 characters."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:325
msgid ""
"You can use ``TODO:``, ``FIXME:``, ``NOTE:``, or ``HACK:`` as adominitions "
"when needed."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:328
#: ../../docs/community/contributing/code_style_guidelines.rst:351
msgid "**Example:**"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:336
msgid ""
"Don't repeat what the code says in a comment. Explain the *why* rather than "
"*how*."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:338
msgid "**Bad:**"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:345
msgid ""
"You can use Javadoc-style comments above function or macro definitions. It's "
"recommended to use Javadoc-style comments *only* for methods which are not "
"exposed to scripting. This is because exposed methods should be documented "
"in the :ref:`class reference XML <doc_updating_the_class_reference>` instead."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:363
msgid ""
"For member variables, don't use Javadoc-style comments but use single-line "
"comments instead:"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:4
msgid "C++ usage guidelines"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:9
msgid ""
"Since Godot 4.0, the C++ standard used throughout the codebase is a subset "
"of **C++17**. While modern C++ brings a lot of opportunities to write "
"faster, more readable code, we chose to restrict our usage of C++ to a "
"subset for a few reasons:"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:14
msgid ""
"It makes it easier to review code in online editors. This is because engine "
"contributors don't always have access to a full-featured IDE while reviewing "
"code."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:17
msgid ""
"It makes the code easier to grasp for beginner contributors (who may not be "
"professional C++ programmers). Godot's codebase is known to be easy to learn "
"from, and we'd like to keep it that way."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:21
msgid ""
"To get your pull request merged, it needs to follow the C++ usage guidelines "
"outlined here. Of course, you can use features not allowed here in your own "
"C++ modules or GDNative scripts."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:27
msgid ""
"Prior to Godot 4.0, the C++ standard used throughout the codebase was C++03, "
"with a handful of C++14 extensions. If you are contributing a pull request "
"to the `3.x` branch rather than `master`, your code can't use C++17 "
"features. Instead, your code must be able to be built with a C++14 compiler."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:32
msgid ""
"The guidelines below don't apply to third-party dependencies, although we "
"generally favor small libraries instead of larger solutions. See also :ref:"
"`doc_best_practices_for_engine_contributors`."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:38
msgid "See :ref:`doc_code_style_guidelines` for formatting guidelines."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:41
msgid "Disallowed features"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:43
msgid ""
"**Any feature not listed below is allowed.** Using features like "
"``constexpr`` variables and ``nullptr`` is encouraged when possible. Still, "
"try to keep your use of modern C++ features conservative. Their use needs to "
"serve a real purpose, such as improving code readability or performance."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:49
msgid "Standard Template Library"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:51
msgid ""
"We don't allow using the `STL <https://en.wikipedia.org/wiki/"
"Standard_Template_Library>`__ as Godot provides its own data types (among "
"other things). See :ref:`doc_faq_why_not_stl` for more information."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:55
msgid ""
"This means that pull requests should **not** use ``std::string``, ``std::"
"vector`` and the like. Instead, use Godot's datatypes as described below:"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:58
msgid "Use ``String`` instead of ``std::string``."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:59
msgid ""
"Use ``Vector`` instead of ``std::vector``. In some cases, ``LocalVector`` "
"can be used as an alternative (ask core developers first)."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:61
msgid "Use ``Array`` instead of ``std::array``."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:65
msgid ""
"Godot also has a List datatype (which is a linked list). While List is "
"already used in the codebase, it typically performs worse than other "
"datatypes like Vector and Array. Therefore, List should be avoided in new "
"code unless necessary."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:70
msgid "``auto`` keyword"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:72
msgid ""
"Please don't use the ``auto`` keyword for type inference. While it can avoid "
"repetition, it can also lead to confusing code:"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:83
msgid ""
"Keep in mind hover documentation often isn't readily available for pull "
"request reviewers. Most of the time, reviewers will use GitHub's online "
"viewer to review pull requests."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:87
msgid ""
"We chose to forbid ``auto`` instead of allowing it on a case-by-case basis "
"to avoid having to decide on difficult edge cases. Thank you for your "
"understanding."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:91
msgid "Lambdas"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:93
msgid ""
"Lambdas should be used conservatively when they make code effectively faster "
"or simpler, and do not impede readability. Please ask before using lambdas "
"in a pull request."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:98
msgid "``#pragma once`` directive"
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:100
msgid ""
"To follow the existing style, please use standard ``#ifdef``-based include "
"guards instead of ``#pragma once`` in new files."
msgstr ""

#: ../../docs/community/contributing/cpp_usage_guidelines.rst:105
msgid ""
"See :ref:`doc_code_style_guidelines_header_includes` for guidelines on "
"sorting includes in C++ and Objective-C files."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:4
msgid "Content guidelines"
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:6
msgid ""
"This document is here to help us assess what we should include in the "
"official documentation. Below, you will find a couple of principles and "
"recommendations to write accessible content."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:10
msgid "We want to achieve two goals:"
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:12
msgid ""
"**Empathize with our users.** We should write in a way that makes it easy "
"for them to learn from the docs."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:14
msgid ""
"**Write a complete reference manual**. Our goal here is not to teach "
"programming foundations. Instead, we should provide a reference for how "
"Godot's features work."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:19
msgid "Guidelines and principles"
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:21
msgid ""
"Below are the guidelines we should strive to follow. They are not hard "
"rules, though: exceptionally, a topic will require breaking one or more of "
"these. Still, we should strive to achieve the two goals listed above."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:26
msgid "Writing complete and accessible documentation"
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:28
msgid ""
"**A feature doesn't exist unless it is documented**. If a user can't find "
"information about a feature and how it works, it doesn't exist to them. We "
"should ensure that we cover everything Godot does."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:34
msgid ""
"When adding or updating an engine feature, the documentation team needs to "
"know about it. Contributors should open an issue on the `godot-docs` "
"repository when their work gets merged and requires documentation."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:38
msgid ""
"Do your best to keep documents **under 1000 words in length**. If a page "
"goes past that threshold, consider splitting it into two parts if possible. "
"Limiting page size forces us to write concisely and to break large documents "
"so they each focus on a particular problem."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:43
msgid ""
"Make it clear what **problem** each page or section of a page tackles and "
"what the user will learn from it. Users need to know if they're reading the "
"correct guide to solving problems they encounter. For example, instead of "
"writing the heading \"Signals\", consider writing \"Reacting to changes with "
"signals\". The second title makes it clear what the purpose of signals is."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:51
msgid ""
"Long section titles lead to long entries in the side menu, which can make "
"navigation cumbersome. Try to keep headings five words long or less."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:54
msgid ""
"If the page assumes specific knowledge of other Godot features, mention it "
"and link it to the corresponding documentation. For instance, a page about "
"physics may use signals, in which case we could note that the page that "
"introduces signals is a pre-requisite."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:60
msgid "Limiting cognitive load"
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:62
msgid ""
"Limit the cognitive load required to read the documentation. The simpler and "
"more explicit language we use, the more efficient it becomes for people to "
"learn. You can do so by:"
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:66
msgid "Introducing only one new concept at a time whenever possible."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:67
msgid "Using simple English, as we recommend in our writing guidelines."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:68
msgid ""
"Including one or more **concrete usage examples**. Prefer a real-world "
"example to abstract code like ``foobar``."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:71
msgid ""
"While many people may understand more complex language and abstract "
"examples, you will lose others. Also, understandable writing and practical "
"examples benefit everyone."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:75
msgid ""
"Always make an effort to **put yourself in the user's shoes**. When we "
"understand something thoroughly, it becomes evident to us. We may fail to "
"think about details relevant to a newcomer, but **good documentation meets "
"users where they are**. We should strive to explain each feature's "
"capabilities or intended uses with the most straightforward language "
"possible."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:81
msgid ""
"Try to remember what you first needed to know when learning about the "
"feature or concept. What new terms did you need to learn? What confused you? "
"What was the hardest to grasp? You will want users to review your work, and "
"we recommend you practice explaining the feature before writing about it."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:88
msgid ""
"Having programming foundations is a pre-requisite to use a complex engine "
"like Godot. Talking about variables, functions, or classes is acceptable. "
"But we should favor plain language over specific terminology like "
"\"metaprogramming\". If you need to use precise terms, be sure to define "
"them."
msgstr ""

#: ../../docs/community/contributing/content_guidelines.rst:93
msgid ""
"When a page assumes knowledge of another engine feature, declare it at the "
"beginning and link to resources that cover what users need. You may also "
"link to other websites for pre-requisites beyond the documentation's scope. "
"For example, you could link to an introduction to programming in the getting "
"started guide, or a website that teaches math theory in the math section."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:4
msgid "Docs writing guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:6
msgid ""
"The Godot community is rich and international. Users come from all around "
"the world. Some of them are young, and many aren't native English speakers. "
"That's why we must all write using a clear and a common language. For the "
"class reference, the goal is to make it easy to read for everyone and "
"precise."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:12
msgid "In summary, always try to:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:14
#: ../../docs/community/contributing/docs_writing_guidelines.rst:44
msgid "Use the active voice"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:15
#: ../../docs/community/contributing/docs_writing_guidelines.rst:79
msgid "Use precise action verbs"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:16
#: ../../docs/community/contributing/docs_writing_guidelines.rst:101
msgid "Avoid verbs that end in -ing"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:17
msgid "Remove unnecessary adverbs and adjectives."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:18
msgid ""
"Ban these 8 words: obvious, simple, basic, easy, actual, just, clear, and "
"however"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:19
#: ../../docs/community/contributing/docs_writing_guidelines.rst:219
msgid "Use explicit references"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:20
#: ../../docs/community/contributing/docs_writing_guidelines.rst:240
msgid "Use 's to show possession"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:21
msgid "Use the Oxford comma"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:23
msgid "There are 3 rules to describe classes:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:25
#: ../../docs/community/contributing/docs_writing_guidelines.rst:377
msgid "Give an overview of the node in the brief description"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:26
#: ../../docs/community/contributing/docs_writing_guidelines.rst:406
msgid "Mention what methods return if it's useful"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:27
#: ../../docs/community/contributing/docs_writing_guidelines.rst:431
msgid "Use \"if true\" to describe booleans"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:31
msgid ""
"A technical writer's job is to pack as much information as possible into the "
"smallest and clearest sentences possible. These guidelines will help you "
"work towards that goal."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:37
msgid ""
"See the :ref:`content guidelines <doc_content_guidelines>` for information "
"on the types of documentation you can write in the official documentation."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:41
msgid "7 rules for clear English"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:46
msgid ""
"Use the active voice when possible. Take the classes, methods, and constants "
"you describe as the subject. It's natural to write using the passive voice, "
"but it's harder to read and produces longer sentences."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:52
msgid "Passive:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:58
msgid "Active:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:64
#: ../../docs/community/contributing/docs_writing_guidelines.rst:412
msgid "**Don't** use the passive voice:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:71
msgid "**Do** use the node's name as a noun:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:81
msgid ""
"Favor precise yet common verbs over generic ones like ``make``, ``set``, and "
"any expression you can replace with a single word."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:84
msgid ""
"**Don't** repeat the method's name. It already states it sets the pivot "
"value to a new one:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:92
msgid ""
"**Do** explain what's the consequence of this \"set\": use precise verbs "
"like ``place``, ``position``, ``rotate``, ``fade``, etc."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:103
msgid ""
"The progressive forms describe continuous actions. E.g. \"is calling\", \"is "
"moving\"."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:106
msgid "**Don't** use the progressive form for instant changes."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:113
msgid "**Do** use simple present, past, or future."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:120
msgid ""
"Exception: If the subject is not clear, replacing \"ing\" verbs is not an "
"improvement. For example, in the previous sentence, \"it replaces\" would "
"not make much sense where \"replacing\" currently is."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:124
msgid ""
"You may use the progressive tense to describe actions that are continuous in "
"time. Anything like animation or coroutines."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:129
msgid ""
"Verbs can turn into adjectival nouns with -ing. This is not a conjugation, "
"so you may use them: ``the remaining movement``, ``the missing file``, etc."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:134
msgid "Remove unnecessary adverbs and adjectives"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:136
msgid ""
"Write as few adjectives and adverbs as possible. Only use them if they add "
"key information to the description."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:139
msgid ""
"**Don't** use redundant or meaningless adverbs. Words that lengthen the "
"documentation but don't add any information:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:146
msgid "**Do** write short sentences in a simple, descriptive language:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:153
msgid "Ban these 8 words"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:155
msgid "**Don't** ever use these 8 banned words:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:157
msgid "obvious"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:158
msgid "simple"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:159
msgid "basic"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:160
msgid "easy"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:161
msgid "actual"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:162
msgid "just"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:163
msgid "clear"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:164
msgid "however (some uses)"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:166
msgid ""
"Game creation and programming aren't simple, and nothing's easy to someone "
"learning to use the API for the first time. Other words in the list, like "
"``just`` or ``actual`` won't add any info to the sentence. Don't use "
"corresponding adverbs either: obviously, simply, basically, easily, "
"actually, clearly."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:172
msgid ""
"**Don't** example. The banned words lengthen the description and take "
"attention away from the most important info:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:180
msgid "**Do** remove them:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:187
msgid ""
"\"Simple\" never helps. Remember, for other users, anything could be complex "
"or frustrate them. There's nothing like a good old *it's simple* to make you "
"cringe. Here's the old brief description, the first sentence on the Timer "
"node's page:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:197
msgid "**Do** explain what the node does instead:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:204
msgid "**Don't** use \"basic\", it is too vague:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:211
msgid "**Do** use the brief description to offer an overview of the node:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:221
msgid "Favor explicit references over implicit ones."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:223
msgid ""
"**Don't** use words like \"the former\", \"the latter\", etc. They're not "
"the most common in English, and they require you to check the reference."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:230
msgid "**Do** repeat words. They remove all ambiguity:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:236
msgid ""
"If you need to repeat the same variable name 3 or 4 times, you probably need "
"to rephrase your description."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:242
msgid ""
"Avoid \"The milk **of** the cow\". It feels unnatural in English. Write "
"\"The cow's milk\" instead."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:245
msgid "**Don't** write \"of the X\":"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:251
msgid ""
"**Do** use ``'s``. It lets you put the main subject at the start of the "
"sentence, and keep it short:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:259
msgid "Use the Oxford comma to enumerate anything"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:261
msgid "From the Oxford dictionary:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:263
msgid ""
"The 'Oxford comma' is an optional comma before the word 'and' at the end of "
"a list: *We sell books, videos, and magazines.*"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:266
msgid ""
"[...] Not all writers and publishers use it, but it can clarify the meaning "
"of a sentence when the items in a list are not single words: *These items "
"are available in black and white, red and yellow, and blue and green.*"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:269
msgid "**Don't** leave the last element of a list without a comma:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:275
msgid ""
"**Do** add a comma before `and` or `or`, for the last element of a list with "
"more than two elements."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:284
msgid "How to write methods and classes"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:287
msgid "Dynamic vs static typing"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:289
msgid ""
"The code examples in the documentation should follow a consistent style not "
"to confuse users. As static type hints are an optional feature of GDScript, "
"we chose to stick to writing dynamic code. This leads to writing GDScript "
"that is concise and accessible."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:294
msgid "The exception is topics that explain static typing concepts to users."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:296
msgid "**Don't** add a type hint with a colon or by casting:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:306
msgid "**Do** write constants and variables with dynamic typing:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:316
msgid "**Don't** write functions with inferred arguments or return types:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:327
msgid "**Do** write functions using dynamic typing:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:339
msgid "Use real-world code examples where appropriate"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:341
msgid ""
"Real-world examples are more accessible to beginners than abstract ``foos`` "
"and ``bars``. You can also copy them directly from your game projects, "
"ensuring that any code snippet compiles without errors."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:345
msgid ""
"Writing ``var speed = 10`` rather than ``var my_var = 10`` allows beginners "
"to understand code better. It gives them a frame of reference as to where "
"they could use the code snippets in a live project."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:349
msgid "**Don't** write made-up examples:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:360
msgid "**Do** write concrete examples:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:372
msgid ""
"Of course, there are times when using real-world examples is impractical. In "
"those situations, you should still avoid using names such as ``my_var``, "
"``foo()`` or ``my_func()`` and consider more meaningful names for your "
"examples."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:379
msgid ""
"The brief description is the reference's most important sentence. It's the "
"user's first contact with a node:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:382
msgid "It's the only description in the \"Create New Node\" dialog."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:383
msgid "It's at the top of every page in the reference"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:385
msgid ""
"The brief description should explain the node's role and its functionality, "
"in up to 200 characters."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:388
msgid "**Don't** write tiny and vague summaries:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:395
msgid "**Do** give an overview of the node's functionality:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:402
msgid ""
"Use the node's full description to provide more information, and a code "
"example, if possible."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:408
msgid ""
"Some methods return important values. Describe them at the end of the "
"description, ideally on a new line. No need to mention the return values for "
"any method whose name starts with ``set`` or ``get``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:419
msgid "**Do** always use \"Returns\"."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:426
msgid ""
"Notice the exception to the \"direct voice\" rule: with the move method, an "
"external collider can influence the method and the body that calls ``move``. "
"In this case, you can use the passive voice."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:433
msgid ""
"For boolean member variables, always use ``if true`` and/or ``if false``, to "
"stay explicit. ``Controls whether or not`` may be ambiguous and won't work "
"for every member variable."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:437
msgid ""
"Also, surround boolean values, variable names and methods with ``[code][/"
"code]``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:439
msgid "**Do** start with \"if true\":"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:448
msgid "Use ``[code]`` around arguments"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:450
msgid ""
"In the class reference, always surround arguments with ``[code][/code]``. In "
"the documentation and in Godot, it will display like ``this``. When you edit "
"XML files in the Godot repository, replace existing arguments written like "
"'this' or \\`this\\` with ``[code]this[/code]``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:457
msgid "Common vocabulary to use in Godot's documentation"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:459
msgid ""
"The developers chose some specific words to refer to areas of the interface. "
"They're used in the sources, in the documentation, and you should always use "
"them instead of synonyms, so the users know what you're talking about."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:467
msgid "Overview of the interface and common vocabulary"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:469
msgid ""
"In the top left corner of the editor lie the ``main menus``. In the center, "
"the buttons change the ``workspace``. And together the buttons in the top "
"right are the ``playtest buttons``. The area in the center, that displays "
"the 2D or the 3D space, is the ``viewport``. At its top, you find a list of "
"``tools`` inside the ``toolbar``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:475
msgid ""
"The tabs or dockable panels on either side of the viewport are ``docks``. "
"You have the ``FileSystem dock``, the ``Scene dock`` that contains your "
"scene tree, the ``Import dock``, the ``Node dock``, and the ``Inspector`` or "
"``Inspector dock``. With the default layout you may call the tabbed docks "
"``tabs``: the ``Scene tab``, the ``Node tab``..."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:481
msgid ""
"The Animation, Debugger, etc. at the bottom of the viewport are ``panels``. "
"Together they make up the ``bottom panels``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:484
msgid ""
"Foldable areas of the Inspector are ``sections``. The node's parent class "
"names, which you can't fold, are ``Classes`` e.g. the ``KinematicBody2D "
"class``. And individual lines with key-value pairs are ``properties``. E.g. "
"``position`` or ``modulate color`` are both ``properties``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:491
msgid "Keyboard shortcut guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:493
msgid ""
"Keyboard and mouse shortcuts should make use of the ``:kbd:`` tag, which "
"allows shortcuts to stand out from the rest of the text and inline code. Use "
"the compact form for modifier keys (:kbd:`Ctrl`/:kbd:`Cmd`) instead of their "
"spelled out form (:kbd:`Control`/:kbd:`Command`). For combinations, use the "
"``+`` symbol with a space on either side of the symbol."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:499
msgid ""
"Make sure to mention shortcuts that differ on macOS compared to other "
"platforms. On macOS, ``Cmd`` often replaces ``Ctrl`` in keyboard shortcuts."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:502
msgid ""
"Try to integrate the shortcut into sentences the best you can. Here are some "
"examples with the ``:kbd:`` tag left as-is for better visibility:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:505
msgid ""
"Press ``:kbd:`Ctrl + Alt + T``` to toggle the panel (``:kbd:`Cmd + Alt + "
"T``` on macOS)."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:506
msgid ""
"Press ``:kbd:`Space``` and hold the left mouse button to pan in the 2D "
"editor."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:507
msgid "Press ``:kbd:`Shift + Up Arrow``` to move the node upwards by 8 pixels."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:510
msgid "Image contribution guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:512
msgid ""
"A significant part of the documentation is images, and there are several "
"important guidelines to follow."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:515
msgid ""
"First, you should always be using the default editor theme and text when "
"taking screenshots."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:518
msgid ""
"To improve the appearance of 3D screenshots, use 4× MSAA, enable anisotropic "
"filtering on the project's textures, and set the anisotropic filter quality "
"to 16× in Project Settings."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:522
msgid ""
"Screenshot sizes should not exceed 1920×1080 to ensure fast loading on "
"slower connections."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:525
msgid ""
"When you need to highlight an area of the editor to show something, like a "
"button or option, use a 2 pixel-thick yellow outline without a bevel. If the "
"outline is on a dark background, the outline should be yellow so it can be "
"easily seen by colorblind people. Please do not use red as it won't be "
"visible for some users."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:531
msgid ""
"Before you add or replace any images in the documentation, they should be "
"run through a PNG compressor to save size. You can use the lossless OxiPNG "
"compressor included in `Squoosh <https://squoosh.app/>`__ for this purpose. "
"For heavier images, consider using a lossy compressor like `pngquant "
"<https://pngquant.org/>`_. With it, almost no image quality is lost during "
"compression."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:540
msgid ""
"The program pngquant must be installed locally as it's not available in "
"Squoosh."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:4
msgid "Documentation guidelines"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:6
msgid ""
"This page describes the rules to follow if you want to contribute to Godot "
"Engine by writing or reviewing documentation, or by translating existing "
"documentation. Also, have a look at README of the `godot-docs GitHub "
"repository <https://github.com/godotengine/godot-docs>`_ and the `docs front "
"page <https://docs.godotengine.org>`_ on what steps to follow and how to "
"contact the docs team."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:14
msgid "How to contribute"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:16
msgid ""
"Creating or modifying documentation pages is mainly done via the `godot-docs "
"GitHub repository <https://github.com/godotengine/godot-docs>`_. The HTML "
"(or PDF and EPUB) documentation is generated from the .rst files "
"(reStructuredText markup language) in that repository. Modifying those pages "
"in a pull request and getting it merged will trigger a rebuild of the online "
"documentation."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:23
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:22
msgid ""
"For details on Git usage and the pull request workflow, please refer to the :"
"ref:`doc_pr_workflow` page. Most of what it describes regarding the main "
"godotengine/godot repository is also valid for the docs repository."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:28
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:27
msgid ""
"The class reference's source files are in the `Godot engine repository "
"<https://github.com/godotengine/godot>`_. We generate the :ref:`Godot API "
"<toc-class-ref>` section of this documentation from them. If you want to "
"update the description of a class, its methods, or properties, read :ref:"
"`doc_updating_the_class_reference`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:34
msgid ""
"If you want to edit the **API reference**, please note that it should *not* "
"be done in the godot-docs repository. Instead, you should edit the ``doc/"
"classes/*`` XML files of Godot's main repository. These files are then later "
"used to generate the in-editor documentation as well as the API reference of "
"the online docs. Read more here: :ref:`doc_updating_the_class_reference`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:42
msgid "The 'Edit on GitHub' link"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:44
msgid ""
"If you're reading documentation on `docs.godotengine.org <https://docs."
"godotengine.org>`_, you'll see an **Edit on GitHub** hyperlink at the top "
"right of the page. Once you've created a GitHub account, you can propose "
"changes to a page you're reading as follows:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:49
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:82
msgid "Click the **Edit on GitHub** button."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:51
msgid ""
"On the GitHub page you're taken to, click the pencil icon in the top-right "
"corner near the **Raw**, **Blame** and **History** buttons. It has the "
"tooltip \"Edit the file in a fork of this project\"."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:55
msgid "Complete all the edits you want to make for that page."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:57
msgid ""
"Summarize the changes you made in the form at the bottom of the page and "
"click the button labelled **Propose file change** when done."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:60
msgid ""
"On the following screens, click the **Create pull request** button until you "
"see a message like *Username wants to merge 1 commit into godotengine:master "
"from Username:patch-6*."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:64
msgid ""
"A reviewer will evaluate your changes and incorporate them into the docs if "
"they're acceptable. You might also be asked to make modifications to your "
"changes before they're included."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:69
msgid "What makes good documentation?"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:71
msgid ""
"Documentation should be well written in plain English, using well-formed "
"sentences and various levels of sections and subsections. It should be clear "
"and objective. Also, have a look at the :ref:`doc_docs_writing_guidelines`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:75
msgid ""
"We differentiate tutorial pages from other documentation pages by these "
"definitions:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:78
msgid ""
"Tutorial: a page aiming at explaining how to use one or more concepts in the "
"editor or scripts in order to achieve a specific goal with a learning "
"purpose (e.g. \"Making a simple 2d Pong game\", \"Applying forces to an "
"object\")."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:82
msgid ""
"Documentation: a page describing precisely one and only one concept at a "
"time, if possible exhaustively (e.g. the list of methods of the Sprite "
"class, or an overview of the input management in Godot)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:86
msgid ""
"You are free to write the kind of documentation you wish, as long as you "
"respect the following rules (and the ones on the repo)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:90
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:120
msgid "Titles"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:92
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:122
msgid "Always begin pages with their title and a Sphinx reference name:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:101
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:133
msgid ""
"The reference allows linking to this page using the ``:ref:`` format, e.g. "
"``:ref:`doc_insert_your_title_here``` would link to the above example page "
"(note the lack of leading underscore in the reference)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:105
msgid ""
"Also, avoid American CamelCase titles: title's first word should begin with "
"a capitalized letter, and every following word should not. Thus, this is a "
"good example:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:109
msgid "Insert your title here"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:111
msgid "And this is a bad example:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:113
msgid "Insert Your Title Here"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:115
msgid ""
"Only project, people and node class names should have capitalized first "
"letter."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:119
msgid "Translating existing pages"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:121
msgid ""
"You can help to translate the official Godot documentation on our `Hosted "
"Weblate <https://hosted.weblate.org/engage/godot-engine/>`_."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:None
msgid "Translation state"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:130
msgid ""
"There also is the official `Godot i18n repository <https://github.com/"
"godotengine/godot-docs-l10n>`_ where you can see when the data was last "
"synchronized."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:135
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:180
msgid "License"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:137
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:182
msgid ""
"This documentation and every page it contains is published under the terms "
"of the `Creative Commons Attribution 3.0 license (CC-BY-3.0) <https://"
"tldrlegal.com/license/creative-commons-attribution-(cc)>`_, with attribution "
"to \"Juan Linietsky, Ariel Manzur and the Godot community\"."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:140
#: ../../docs/community/contributing/contributing_to_the_documentation.rst:187
msgid ""
"By contributing to the documentation on the GitHub repository, you agree "
"that your changes are distributed under this license."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:6
msgid ""
"This guide explains how to contribute to Godot's documentation, be it by "
"writing or reviewing pages."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:11
msgid ""
"If you want to translate pages or the class reference from English to other "
"languages, read :ref:`doc_editor_and_docs_localization`."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:17
msgid ""
"To modify or create pages in the reference manual, you need to edit ``.rst`` "
"files in the `godot-docs GitHub repository <https://github.com/godotengine/"
"godot-docs>`_. Modifying those pages in a pull request triggers a rebuild of "
"the online documentation upon merging."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:35
msgid "What is the Godot documentation"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:37
msgid ""
"The Godot documentation is intended as a comprehensive reference manual for "
"the Godot game engine. It is not meant to contain step-by-step tutorials, "
"except for two game creation tutorials in the Getting Started section."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:41
msgid ""
"We strive to write factual content in an accessible and well-written "
"language. To contribute, you should also read:"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:44
msgid ""
"The :ref:`doc_docs_writing_guidelines`. There, you will find rules and "
"recommendations to write in a way that everyone understands."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:46
msgid ""
"The content guidelines. They explain the principles we follow to write the "
"documentation and the kind of content we accept."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:50
msgid "Contributing changes"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:52
msgid ""
"**Pull Requests should use the** ``master`` **branch by default.** Only make "
"Pull Requests against other branches (e.g. ``2.1`` or ``3.0``) if your "
"changes only apply to that specific version of Godot."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:56
msgid ""
"Though less convenient to edit than a wiki, this Git repository is where we "
"write the documentation. Having direct access to the source files in a "
"revision control system is a plus to ensure our documentation quality."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:61
msgid "Editing existing pages"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:63
msgid ""
"To edit an existing page, locate its ``.rst`` source file and open it in "
"your favorite text editor. You can then commit the changes, push them to "
"your fork, and make a pull request. **Note that the pages in** ``classes/`` "
"**should not be edited here.** They are automatically generated from Godot’s "
"`XML class reference <https://github.com/godotengine/godot/tree/master/doc/"
"classes>`__. See :ref:`doc_updating_the_class_reference` for details."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:70
msgid ""
"To build the manual and test changes on your computer, see :ref:"
"`doc_building_the_manual`."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:74
msgid "Editing pages online"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:76
msgid ""
"You can edit the documentation online by clicking the **Edit on GitHub** "
"link in the top-right of every page."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:79
msgid ""
"Doing so takes you to the GitHub text editor. You need to have a GitHub "
"account and to log in to use it. Once logged in, you can propose change like "
"so:"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:84
msgid ""
"On the GitHub page you're taken to, click the pencil icon in the top-right "
"corner near the **Raw**, **Blame**, and **Delete** buttons. It has the "
"tooltip \"Fork this project and edit the file\"."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:88
msgid "Edit the text in the text editor."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:90
msgid ""
"At the bottom of the web page, summarize the changes you made and click the "
"button **Propose file change**. Make sure to replace the placeholder "
"\"Update file.rst\" by a short but clear one-line description, as this is "
"the commit title."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:94
msgid ""
"On the following screens, click the **Create pull request** button until you "
"see a message like *Username wants to merge 1 commit into godotengine:master "
"from Username:patch-1*."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:98
msgid ""
"Another contributor will review your changes and merge them into the docs if "
"they're good. They may also make changes or ask you to do so before merging."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:102
msgid "Adding new pages"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:104
msgid ""
"Before adding a new page, please ensure that it fits in the documentation:"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:106
msgid ""
"Look for `existing issues <https://github.com/godotengine/godot-docs/"
"issues>`_ or open a new one to see if the page is necessary."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:109
msgid "Ensure there isn't a page that already covers the topic."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:110
msgid "Read our :ref:`doc_content_guidelines`."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:112
msgid ""
"To add a new page, create a ``.rst`` file with a meaningful name in the "
"section you want to add a file to, e.g. ``tutorials/3d/light_baking.rst``."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:115
msgid ""
"You should then add your page to the relevant \"toctree\" (table of "
"contents, e.g. ``tutorials/3d/index.rst``). Add your new filename to the "
"list on a new line, using a relative path and no extension, e.g. here "
"``light_baking``."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:131
msgid ""
"The reference ``_doc_insert_your_title_here`` and the title should match."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:137
msgid "Write your titles like plain sentences, without capitalizing each word:"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:139
msgid "**Good:** Understanding signals in Godot"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:140
msgid "**Bad:** Understanding Signals In Godot"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:142
msgid ""
"Only propers nouns, projects, people, and node class names should have their "
"first letter capitalized."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:146
msgid "Sphinx and reStructuredText syntax"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:148
msgid ""
"Check Sphinx’s `reST Primer <https://www.sphinx-doc.org/en/stable/rest."
"html>`__ and the `official reference <http://docutils.sourceforge.net/rst."
"html>`__ for details on the syntax."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:152
msgid ""
"Sphinx uses specific reST comments to do specific operations, like defining "
"the table of contents (``.. toctree::``) or cross-referencing pages. Check "
"the `official Sphinx documentation <https://www.sphinx-doc.org/en/stable/"
"index.html>`__ for more details. To learn how to use Sphinx directives like "
"``.. note::`` or ``.. seealso::``, check out the `Sphinx directives "
"documentation <https://www.sphinx-doc.org/en/master/usage/restructuredtext/"
"directives.html>`__."
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:161
msgid "Adding images and attachments"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:163
msgid ""
"To add images, please put them in an ``img/`` folder next to the ``.rst`` "
"file with a meaningful name and include them in your page with:"
msgstr ""

#: ../../docs/community/contributing/contributing_to_the_documentation.rst:170
msgid ""
"Similarly, you can include attachments, like assets as support material for "
"a tutorial, by placing them into a ``files/`` folder next to the ``.rst`` "
"file, and using this inline markup:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:4
msgid "Building the manual with Sphinx"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:6
msgid ""
"This page explains how to build a local copy of the Godot manual using the "
"Sphinx docs engine. This allows you to have local HTML files and build the "
"documentation as a PDF, EPUB, or LaTeX file, for example."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:10
msgid "To get started, you need to:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:12
msgid ""
"Clone the `godot-docs repository <https://github.com/godotengine/godot-docs/"
">`__."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:13
msgid "Install `Sphinx <https://www.sphinx-doc.org/>`__"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:14
msgid ""
"To build the docs as HTML files, install the `readthedocs.org theme <https://"
"github.com/snide/sphinx_rtd_theme>`__."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:16
msgid ""
"Install the Sphinx extensions defined in the `godot-docs repository <https://"
"github.com/godotengine/godot-docs/>`__ ``requirements.txt`` file."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:19
msgid ""
"We recommend using `pip <https://pip.pypa.io>`__, Python’s package manager "
"to install all these tools. It comes pre-installed with `Python <https://www."
"python.org/>`__. Ensure that you install and use Python 3. Here are the "
"commands to clone the repository and then install all requirements."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:24
msgid ""
"You may need to write ``python3 -m pip`` (Unix) or  ``py -m pip`` (Windows) "
"instead of ``pip3``. If both approaches fail, `check that you have pip3 "
"installed <https://pip.pypa.io/en/stable/installation/>`__."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:33
msgid ""
"With the programs installed, you can build the HTML documentation from the "
"root folder of this repository with the following command:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:44
msgid "If you run into errors, you may try the following command:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:50
msgid ""
"Building the documentation requires at least 8 GB of RAM to run without disk "
"swapping, which slows it down. If you have at least 16 GB of RAM, you can "
"speed up compilation by running:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:62
msgid ""
"The compilation will take some time as the ``classes/`` folder contains "
"hundreds of files."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:65
msgid ""
"You can then browse the documentation by opening ``_build/html/index.html`` "
"in your web browser."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:68
msgid ""
"In case you of a ``MemoryError`` or ``EOFError``, you can remove the "
"``classes/`` folder and run ``make`` again. This will drop the class "
"references from the final HTML documentation but will keep the rest intact."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:72
msgid ""
"If you delete the ``classes/`` folder, do not use ``git add .`` when working "
"on a pull request or the whole ``classes/`` folder will be removed when you "
"commit. See `#3157 <https://github.com/godotengine/godot-docs/"
"issues/3157>`__ for more detail."
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:78
msgid ""
"Alternatively, you can build the documentation by running the sphinx-build "
"program manually:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:85
msgid ""
"You can also specify a list of files to build, which can greatly speed up "
"compilation:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:92
msgid "Building with Sphinx and virtualenv"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:94
msgid ""
"If you want your Sphinx installation scoped to the project, you can install "
"sphinx-build using virtualenv. To do so, run this command from this "
"repository's root folder:"
msgstr ""

#: ../../docs/community/contributing/building_the_manual.rst:104
msgid "Then, run ``make html`` as shown above."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:4
msgid "Contributing to the class reference"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:8
msgid ""
"The class reference is available online in the :ref:`classes <toc-class-"
"ref>` section of the documentation and in the Godot editor, from the help "
"menu."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:11
msgid ""
"In the class reference, some methods, variables, and signals lack "
"descriptions. Others changed with recent releases and need updates. The "
"developers can't write the entire reference on their own. Godot needs you, "
"and all of us, to contribute."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:16
msgid ""
"**Important:** If you plan to make large changes, you should create an issue "
"on the `godot-docs repository <https://github.com/godotengine/godot-docs/>`_ "
"or comment on an existing issue. Doing so lets others know you're already "
"taking care of a given class."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:23
msgid ""
"You can find the writing guidelines for the class reference :ref:`here "
"<doc_class_reference_writing_guidelines>`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:25
msgid ""
"For details on Git usage and the pull request workflow, please refer to the :"
"ref:`doc_pr_workflow` page."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:28
msgid ""
"If you want to translate the class reference from English to another "
"language, see :ref:`doc_editor_and_docs_localization`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:31
msgid ""
"This guide is also available as a `video tutorial on YouTube <https://www."
"youtube.com/watch?v=5jeHXxeX-JY>`_."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:36
msgid ""
"Not sure which class to contribute to? Take a look at the class reference's "
"completion status `here <https://godotengine.github.io/doc-status/>`_."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:39
msgid ""
"You can find the source files for the class reference in Godot's GitHub "
"repository: `doc/classes/ <https://github.com/godotengine/godot/tree/master/"
"doc/classes>`_."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:43
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:97
msgid ""
"For some modules in the engine's source code, you'll find the XML files in "
"the ``modules/<module_name>/doc_classes/`` directory instead."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:46
msgid ""
"Always edit the API reference through these source XML files. Do not edit "
"the generated ``.rst`` files :ref:`in the online documentation <toc-class-"
"ref>`, hosted in the `godot-docs <https://github.com/godotengine/godot-"
"docs>`_ repository."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:53
msgid ""
"Unless you make minor changes, like fixing a typo, we do not recommend using "
"the GitHub web editor to edit the class reference's XML."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:55
msgid ""
"It lacks features to edit XML well, like keeping indentations consistent, "
"and it does not allow amending commits based on reviews."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:57
msgid ""
"Also, it doesn't allow you to test your changes in the engine or with "
"validation scripts as described in :ref:"
"`doc_class_reference_writing_guidelines_editing_xml`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:62
msgid "Updating the documentation template"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:64
msgid ""
"When you create a new class or modify the engine's API, you need to re-"
"generate the XML files in ``doc/classes/``."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:66
msgid ""
"To do so, you first need to compile Godot. See the :ref:"
"`doc_introduction_to_the_buildsystem` page to learn how. Then, execute the "
"compiled Godot binary from the Godot root directory with the ``--doctool`` "
"option. For example, if you're on 64-bit Linux, the command is::"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:73
msgid ""
"The XML files in doc/classes should then be up-to-date with current Godot "
"Engine features. You can then check what changed using the ``git diff`` "
"command. Please only include changes that are relevant to your work on the "
"API in your commits. You can discard changes in other XML files using ``git "
"checkout``."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:4
msgid "Class reference writing guidelines"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:6
msgid ""
"This page explains how to write the class reference. You will learn where to "
"write new descriptions for the classes, methods, and properties for Godot's "
"built-in node types."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:12
msgid ""
"To learn to submit your changes to the Godot project using the Git version "
"control system, see :ref:`doc_updating_the_class_reference`."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:15
msgid ""
"The reference for each class is contained in an XML file like the one below:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:65
msgid ""
"It starts with brief and long descriptions. In the generated docs, the brief "
"description is always at the top of the page, while the long description "
"lies below the list of methods, variables, and constants. You can find "
"methods, member variables, constants, and signals in separate XML nodes."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:70
msgid ""
"For each, you want to learn how they work in Godot's source code. Then, fill "
"their documentation by completing or improving the text in these tags:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:73
msgid "`<brief_description>`"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:74
msgid "`<description>`"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:75
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:80
msgid "`<constant>`"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:76
msgid ""
"`<method>` (in its `<description>` tag; return types and arguments don't "
"take separate documentation strings)"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:78
msgid "`<member>`"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:79
msgid ""
"`<signal>` (in its `<description>` tag; arguments don't take separate "
"documentation strings)"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:82
msgid ""
"Write in a clear and simple language. Always follow the :ref:`writing "
"guidelines <doc_docs_writing_guidelines>` to keep your descriptions short "
"and easy to read. **Do not leave empty lines** in the descriptions: each "
"line in the XML file will result in a new paragraph, even if it is empty."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:90
msgid "How to edit class XML"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:92
msgid ""
"Edit the file for your chosen class in ``doc/classes/`` to update the class "
"reference. The folder contains an XML file for each class. The XML lists the "
"constants and methods you will find in the class reference. Godot generates "
"and updates the XML automatically."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:100
msgid ""
"Edit it using your favorite text editor. If you use a code editor, make sure "
"that it doesn't change the indent style: you should use tabs for the XML and "
"four spaces inside BBCode-style blocks. More on that below."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:104
msgid ""
"To check that the modifications you've made are correct in the generated "
"documentation, navigate to the ``doc/`` folder and run the command ``make "
"rst``. This will convert the XML files to the online documentation's format "
"and output errors if anything's wrong."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:109
msgid ""
"Alternatively, you can build Godot and open the modified page in the built-"
"in code reference. To learn how to compile the engine, read the :ref:"
"`compilation guide <toc-devel-compiling>`."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:113
msgid ""
"We recommend using a code editor that supports XML files like Vim, Atom, "
"Visual Studio Code, Notepad++, or another to comfortably edit the file. You "
"can also use their search feature to find classes and properties quickly."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:120
msgid "Improve formatting with BBCode style tags"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:122
msgid ""
"Godot's class reference supports BBCode-like tags. They add nice formatting "
"to the text. Here's the list of available tags:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:126
msgid "Effect"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:126
msgid "Result"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:128
msgid "[Class]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:128
msgid "Link a class"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:128
msgid "Move the [Sprite]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:128
msgid "Move the :ref:`class_Sprite`."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:130
msgid "[method methodname]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:130
msgid "Link to a method in this class"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:130
msgid "Call [method hide]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:130
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:132
msgid "Call :ref:`hide <class_Spatial_method_hide>`."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:132
msgid "[method Class.methodname]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:132
msgid "Link to another class's method"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:132
msgid "Call [method Spatial.hide]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:134
msgid "[member membername]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:134
msgid "Link to a member in this class"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:134
msgid "Get [member scale]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:134
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:136
msgid "Get :ref:`scale <class_Node2D_property_scale>`."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:136
msgid "[member Class.membername]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:136
msgid "Link to another class's member"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:136
msgid "Get [member Node2D.scale]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:138
msgid "[signal signalname]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:138
msgid "Link to a signal in this class"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:138
msgid "Emit [signal renamed]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:138
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:140
msgid "Emit :ref:`renamed <class_Node_signal_renamed>`."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:140
msgid "[signal Class.signalname]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:140
msgid "Link to another class's signal"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:140
msgid "Emit [signal Node.renamed]."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:142
msgid "[b] [/b]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:142
msgid "Bold"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:142
msgid "Some [b]bold[/b] text."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:142
msgid "Some **bold** text."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:144
msgid "[i] [/i]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:144
msgid "Italic"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:144
msgid "Some [i]italic[/i] text."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:144
msgid "Some *italic* text."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:146
msgid "[code] [/code]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:146
msgid "Monospace"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:146
msgid "Some [code]monospace[/code] text."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:146
msgid "Some ``monospace`` text."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:148
msgid "[kbd] [/kbd]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:148
msgid "Keyboard/mouse shortcut"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:148
msgid "Some [kbd]Ctrl + C[/kbd] key."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:148
msgid "Some :kbd:`Ctrl + C` key."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:150
msgid "[codeblock] [/codeblock]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:150
msgid "Multiline preformatted block"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:150
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:152
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:154
#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:156
msgid "*See below.*"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:152
msgid "[codeblocks] [/codeblocks]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:152
msgid "[codeblock] for multiple languages"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:154
msgid "[gdscript] [/gdscript]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:154
msgid "GDScript codeblock tab in codeblocks"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:156
msgid "[csharp] [/csharp]"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:156
msgid "C# codeblock tab in codeblocks"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:159
msgid ""
"Use ``[codeblock]`` for pre-formatted code blocks. Inside ``[codeblock]``, "
"always use **four spaces** for indentation. The parser will delete tabs. For "
"example:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:171
msgid "Will display as:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:179
msgid ""
"If you need to have different code version in GDScript and C#, use "
"``[codeblocks]`` instead. If you use ``[codeblocks]``, you also need to have "
"at least one of the language-specific tags, ``[gdscript]`` and ``[csharp]``."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:183
msgid ""
"Always write GDScript code examples first! You can use this `experimental "
"code translation tool <https://github.com/HaSa1002/codetranslator>`_ to "
"speed up your workflow."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:204
msgid "The above will display as:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:221
msgid ""
"To denote important information, add a paragraph starting with \"[b]Note:[/"
"b]\" at the end of the description:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:228
msgid ""
"To denote crucial information that could cause security issues or loss of "
"data if not followed carefully, add a paragraph starting with \"[b]Warning:[/"
"b]\" at the end of the description:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:236
msgid ""
"For deprecated properties, add a paragraph starting with \"[i]Deprecated.[/"
"i]\". Notice the use of italics instead of bold:"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:243
msgid ""
"In all the paragraphs described above, make sure the punctuation is part of "
"the BBCode tags for consistency."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:247
msgid "I don't know what this method does!"
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:249
msgid ""
"No problem. Leave it behind, and list the methods you skipped when you "
"request a pull of your changes. Another writer will take care of it."
msgstr ""

#: ../../docs/community/contributing/class_reference_writing_guidelines.rst:252
msgid ""
"You can still look at the methods' implementation in Godot's source code on "
"GitHub. If you have doubts, feel free to ask on the `Q&A website <https://"
"godotengine.org/qa/>`__ and `Godot Contributors Chat <https://chat."
"godotengine.org/>`_."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:4
msgid "Editor and docs localization"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:8
msgid ""
"Godot aims to make game development available to everyone, including people "
"who may not know or be comfortable with English. Therefore, we do our best "
"to make the most important resources available in many languages, thanks to "
"the translation effort of the community."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:13
msgid "These resources include:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:15
msgid ""
"The `Godot editor's interface <https://hosted.weblate.org/projects/godot-"
"engine/godot/>`__ (ca. 15,000 words)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:17
msgid ""
"The `online documentation <https://hosted.weblate.org/projects/godot-engine/"
"godot-docs/>`__ (editor manual and tutorials, ca. 300,000 words)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:19
msgid ""
"The `class reference <https://hosted.weblate.org/projects/godot-engine/godot-"
"class-reference/>`__, available both online and in the editor (ca. 200,000 "
"words)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:22
msgid ""
"To manage translations, we use the GNU gettext file format (``PO`` files), "
"and the open source `Weblate <https://weblate.org>`__ web-based localization "
"platform, which allows easy collaboration of many contributors to complete "
"the translation for the various components, and keep them up to date. Click "
"the bold links above to access each resource on Weblate."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:28
msgid ""
"This page gives an overview of the general translation workflow on Weblate, "
"and some resource-specific instructions on e.g. how to handle some keywords "
"or the localization of images."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:34
msgid ""
"Translating all the official Godot content is a massive undertaking, so we "
"advise prioritizing the resources as they are listed above: first the editor "
"interface, then the online documentation, and eventually the class reference "
"if there are enough translators to keep up with updates."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:40
msgid "Using Weblate for translations"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:42
msgid ""
"While our translations eventually reside in the Git repositories of the "
"Godot engine and its documentation, all translation updates are handled "
"through Weblate, and thus direct pull requests to the Git repositories are "
"not accepted. Translations are synced manually between Weblate and the Godot "
"repositories by maintainers."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:48
msgid ""
"You should therefore `register on Weblate <https://hosted.weblate.org/"
"accounts/register/>`__ to contribute to Godot's translations."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:51
msgid ""
"Once signed in, browse to the Godot resource which you want to contribute to "
"(in this page we will use the `editor translation <https://hosted.weblate."
"org/projects/godot-engine/godot/>`__ as an example) to find the list of all "
"languages:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:59
msgid ""
"Feel free to consult Weblate's own documentation on the `translation "
"workflow <https://docs.weblate.org/en/latest/user/translating.html>`__ for "
"more details."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:64
msgid "Adding a new language"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:66
msgid ""
"If your language is already listed, click on its name to access the "
"overview, and skip the rest of this section."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:69
msgid ""
"If your language is not listed, scroll to the bottom of the list of "
"languages and click the \"Start new translation\" button, and select the "
"language you want to translate to:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:77
msgid ""
"If your language is spoken in several countries with only limited regional "
"variations, please consider adding it with its generic variant (e.g. ``fr`` "
"for French) instead of a regional variant (e.g. ``fr_FR`` for French "
"(France), ``fr_CA`` for French (Canada), or ``fr_DZ`` for French (Algeria))."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:82
msgid ""
"Godot has a huge amount of content to translate, so duplicating the work for "
"regional variants should only be done if the language variations are "
"significant enough. Additionally, if a translation is done with for a "
"regional variant, it will only be available automatically for users located "
"in this region (or having their system language configured for this region)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:88
msgid ""
"When regional variations are significant enough to warrant separate "
"translations, we advise to focus on completing a generic variant first if "
"possible, then duplicate the fully completed translation for regional "
"variants and do the relevant edits. This is typically a good strategy for e."
"g. Spanish (work on ``es`` first, then duplicate it to ``es_AR``, ``es_ES``, "
"``es_MX``, etc. if necessary) or Portuguese (``pt_BR`` vs ``pt_PT``)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:97
msgid "Translation interface"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:99
msgid ""
"Once a language has been selected, you will see an overview of the "
"translation status, including how many strings are left to translate or "
"review. Each item can be clicked and used to browse through the "
"corresponding list. You can also click the \"Translate\" button to get "
"started on the list of strings needing action."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:107
msgid ""
"After selecting a list of clicking \"Translate\", you will see the main "
"translation interface where all the work happens:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:112
msgid "On that page, you have:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:114
msgid ""
"A toolbar which lets you cycle through strings of the current list, change "
"to another predefined list or do a custom search, etc. There is also a "
"\"Zen\" editing mode with a simplified interface."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:117
msgid ""
"The actual string you are working on in the \"Translation\" panel. By "
"default, there should be the English source string and an edit box for your "
"language. If you are familiar with other languages, you can add them in your "
"user settings to give you more context for translation. Once you are done "
"editing the current string, press \"Save\" to confirm changes and move to "
"the next entry. Alternatively, use the \"Skip\" button to skip it. The "
"\"Needs editing\" checkbox means that the original string was updated, and "
"the translation therefore needs review to take those changes into account "
"(in PO jargon, these are so-called \"fuzzy\" strings). Such strings won't be "
"used in the translation until fixed."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:127
msgid ""
"The bottom panel has various tools which can help with the translation "
"effort, such as context from nearby strings (usually from the same editor "
"tool or documentation page, so they might use similar terms), comments from "
"other translators, machine translations, and a list of all other existing "
"translations for that string."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:132
msgid ""
"On the top right, the glossary shows terms for which an entry has been added "
"previously, and which are included in the current string. For example, if "
"you decided with fellow translators to use a specific translation for the "
"\"node\" term in Godot, you can add it to the glossary to ensure that other "
"translators use the same convention."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:137
msgid ""
"The bottom right panel includes information on the source string. The most "
"relevant item is the \"source string location\", which links you to the "
"original string on GitHub. You may need to search for the string in the page "
"to locate it and its surrounding context."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:143
msgid "Locating original content"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:145
msgid ""
"PO files are an ordered list of source strings (``msgid``) and their "
"translation (``msgstr``), and by default, Weblate will present the strings "
"in that order. It can therefore be useful to understand how the content is "
"organized in the PO files to help you locate the original content and use it "
"as a reference when translating."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:153
msgid ""
"It is primordial to use the original context as reference when translating, "
"as many words have several possible translations depending on the context. "
"Using the wrong translation can actually be detrimental to the user and make "
"things harder to understand than if they stayed in English. Using the "
"context also makes the translation effort much easier and more enjoyable, as "
"you can see directly if the translation you wrote will make sense in context."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:161
msgid ""
"The editor interface's translation template is generated by parsing all the "
"C++ source code in **alphabetical order**, so all the strings defined in a "
"given file will be grouped together. For example, if the \"source string "
"location\" indicates ``editor/code_editor.cpp``, the current string (and the "
"nearby ones) is defined in the ``editor/code_editor.cpp`` code file, and is "
"thereby related to the code editors in Godot (GDScript, shaders)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:167
msgid ""
"The online documentation's translation template is generated from the source "
"RST files in the same order as seen in the **table of contents**, so for "
"example the first strings are from the front page of the documentation. The "
"recommended workflow is therefore to find a unique string corresponding to a "
"page that you want to translate, and then translate all the strings with the "
"same source string location while comparing with the online version of that "
"page in English. An example of source string location could be "
"``getting_started/step_by_step/nodes_and_scenes.rst`` for the page :ref:"
"`doc_nodes_and_scenes`."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:176
msgid ""
"The class reference's translation template is generated from the source XML "
"files in **alphabetical order**, which is also the same as the order of the "
"table of contents for the online version. You can therefore locate the "
"source string corresponding to the brief description of a given class to "
"find the first string to translate and all other descriptions from that "
"class should be in the subsequent strings on Weblate. For example, the "
"descriptions for the :ref:`class_Node2D` class would have the source string "
"location ``doc/classes/Node2D.xml``."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:185
msgid ""
"A handy tool to locate specific pages/classes is to use Weblate's advanced "
"search feature, and especially the \"Location strings\" query (which can "
"also be used with the ``location:`` token, e.g. ``location:nodes_and_scenes."
"rst``):"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:195
msgid ""
"When a given source string is used in multiple source locations, they will "
"all be concatenated into one. For example, the above ``location:"
"nodes_and_scenes.rst`` query would land first on the \"Introduction\" source "
"string which is used in dozens of pages, including some that come before "
"``nodes_and_scenes.rst`` in the template. Clicking the \"Next\" button then "
"brings us to the \"Scene and nodes\" title string displayed above. So it may "
"happen that a given paragraph or section title is not at the location you'd "
"expect it when reading the online version of a page."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:206
msgid "Respecting the markup syntax"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:208
msgid ""
"Each translation resource originates from a different source code format, "
"and having some notions on the markup language used for each resource is "
"important to avoid creating syntax errors in your translations."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:213
msgid "Editor interface (C++)"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:215
msgid "The editor translations originate from C++ strings, and may use:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:217
msgid ""
"**C format specifiers** such as ``%s`` (a string) or ``%d`` (a number). "
"These specifiers are replaced by content at runtime, and should be preserved "
"and placed in your translation where necessary for it to be meaningful after "
"substitution. You may need to refer to the source string location to "
"understand what kind of content will be substituted if it's not clear from "
"the sentence. Example (``%s``  will be substituted with a file name or "
"path)::"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:230
msgid ""
"**C escape characters** such as ``\\n`` (line break) or ``\\t`` "
"(tabulation). In the Weblate editor, the ``\\n`` characters are replaced by "
"``↵`` (return) and ``\\t`` by ``↹``. Tabs are not used much, but you should "
"make sure to use line breaks in the same way as the original English string "
"(Weblate will issue a warning if you don't). Line breaks might sometimes be "
"used for vertical spacing, or manual wrapping of long lines which would "
"otherwise be too long especially in the editor translation). Example::"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:247
msgid ""
"Only logical order of the characters matters, in the right-to-left text, "
"format specifiers may be displayed as ``s%``."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:251
msgid "Online documentation (RST)"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:253
msgid ""
"The documentation translations originate from reStructuredText (RST) files, "
"which also use their own markup syntax to style text, create internal and "
"external links, etc. Here are some examples::"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:295
msgid ""
"See Sphinx's `reStructured Text primer <https://www.sphinx-doc.org/en/master/"
"usage/restructuredtext/basics.html>`__ for a quick overview of the markup "
"language you may find in source strings. You may encounter especially the "
"inline markup (bold, italics, inline code) and the internal and external "
"hyperlink markup."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:301
msgid "Class reference (BBCode)"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:303
msgid ""
"The class reference is documented in the main Godot repository using XML "
"files, and with BBCode-like markup for styling and internal references."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:306
msgid ""
"Some of the tags used are from the original BBCode (e.g. ``[b]Bold[/b]`` and "
"``[i]Italics[/i]``), while others are Godot-specific and used for advanced "
"features such as inline code (e.g. ``[code]true[/code]``), linking to "
"another class (e.g. ``[Node2D]``) or to a property in a given class (e.g. "
"``[member Node2D.position]``), or for multiline code blocks. Example::"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:318
msgid ""
"In the above example, ``[code]name[/code]``, ``[code]alpha[/code]``, and "
"``[Color]`` should *not* be translated, as they refer respectively to "
"argument names and a class of the Godot API. Similarly, the contents of the "
"``[codeblock]`` should not be translated, as ``ColorN`` is a function of the "
"Godot API and ``\"red\"`` is one of the named colors it supports. At most, "
"you can translate the name of the variable which holds the result (``red "
"= ...``)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:325
msgid ""
"Note also that in the XML, each line is a paragraph, so you should not add "
"line breaks if they are not part of the original translation."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:330
msgid ""
"See our documentation for class reference writers for the :ref:`list of "
"BBCode-like tags <doc_class_reference_writing_guidelines_bbcode>` which are "
"used throughout the class reference."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:335
msgid "Offline translation and testing"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:337
msgid ""
"While we advise using the Weblate interface to write translations, you also "
"have the possibility to download the PO file locally to translate it with "
"your preferred PO editing application, such as `Poedit <https://poedit.net/"
">`__ or `Lokalize <https://userbase.kde.org/Lokalize>`__."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:342
msgid ""
"To download the PO file locally, browse to the translation overview for your "
"language, and select the first item in the \"Files\" menu:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:347
msgid ""
"Once you are done with a series of edits, use the \"Upload translation\" "
"item in that same menu and select your file. Choose \"Add as translation\" "
"for the file upload mode."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:353
msgid ""
"If a significant amount of time has passed between your download of the PO "
"file and the upload of the edited version, there is a risk to overwrite the "
"translations authored by other contributors in the meantime. This is why we "
"advise to use the online interface so that you always work on the latest "
"version."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:359
msgid ""
"If you want to test changes locally (especially for the editor translation), "
"you can use the downloaded PO file and :ref:`compile Godot from source <toc-"
"devel-compiling>`."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:362
msgid ""
"Rename the editor translation PO file to ``<lang>.po`` (e.g. ``eo.po`` for "
"Esperanto) and place it in the ``editor/translations/`` folder (`GitHub "
"<https://github.com/godotengine/godot/tree/master/editor/translations>`__)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:366
msgid ""
"You can also test class reference changes the same way by renaming the PO "
"file similarly and placing it in the ``doc/translations/`` folder (`GitHub "
"<https://github.com/godotengine/godot/tree/master/doc/translations>`__)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:371
msgid "Localizing documentation images"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:373
msgid ""
"The online documentation includes many images, which can be screenshots of "
"the Godot editor, custom-made graphs, of any other kind of visual content. "
"Some of it includes text and might thus be relevant to localize in your "
"language."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:377
msgid ""
"This part is not handled via Weblate, but directly on the `godot-docs-l10n "
"<https://github.com/godotengine/godot-docs-l10n>`_ Git repository where the "
"documentation translations are synced from Weblate."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:383
msgid ""
"The workflow is not the most straightforward and requires some knowledge of "
"Git. We plan to work on a simplified Web tool which could be used to manage "
"image localization in a convenient way, abstracting away these steps."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:387
msgid ""
"To translate an image, you should first locate it in the original English "
"documentation. To do so, browse the relevant page in the docs, e.g. :ref:"
"`doc_intro_to_the_editor_interface`. Click the \"Edit on GitHub\" link in "
"the top right corner:"
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:394
msgid ""
"On GitHub, click on the image you want to translate. If relevant, click on "
"\"Download\" to download it locally and edit it with an image edition tool. "
"Note the full path to the image as it will be needed further down (here "
"``getting_started/step_by_step/img/project_manager_first_open.png``)."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:401
msgid ""
"Create your localized version of the image, either by editing the English "
"one, or by taking a screenshot of the editor with your language, if it's an "
"editor screenshot. Some images may also have source files available in SVG "
"format, so you can browse the ``img/`` folder which contains them to check "
"for that."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:406
msgid ""
"Name your localized image like the original one, but with the language code "
"added before the extension, e.g. ``project_manager_first_open.png`` would "
"become ``project_manager_first_open.fr.png`` for the French localization."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:410
msgid ""
"Finally, on godot-docs-l10n_, recreate the same folder structure as for the "
"original image in the ``images`` subfolder (`GitHub <https://github.com/"
"godotengine/godot-docs-l10n/tree/master/images>`_), and place your "
"translated image there. In our example, the end result should be ``images/"
"getting_started/step_by_step/img/project_manager_first_open.fr.png``."
msgstr ""

#: ../../docs/community/contributing/editor_and_docs_localization.rst:416
msgid ""
"Repeat this for other images and :ref:`make a Pull Request "
"<doc_pr_workflow>`."
msgstr ""

#: ../../docs/community/asset_library/index.rst:2
msgid "Asset Library"
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:4
msgid "About the Asset Library"
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:6
msgid ""
"The Godot Asset Library, otherwise known as the AssetLib, is a repository of "
"user-submitted Godot addons, scripts, tools, and other resources, "
"collectively referred to as assets. They're available to all Godot users for "
"download directly from within the engine, but it can also be accessed at "
"Godot's `official website <https://godotengine.org/asset-library/asset>`_."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:11
msgid ""
"On the surface, the Asset Library might look and function similar to asset "
"stores available for other engines, such as Unity's Asset Store, or Unreal "
"Engine's Marketplace, where you can submit both freely-available assets, as "
"well as paid, commercial ones. In addition, often times such assets are "
"distributed under non-free, proprietary licenses, limiting what you can do "
"with them."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:17
msgid ""
"The Asset Library is different - all assets are distributed free of charge, "
"and under a host of open-source licenses (such as the MIT license, the GPL, "
"and the Boost Software License). This makes the AssetLib more similar to the "
"software repositories of a Linux distribution."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:21
msgid ""
"This set of pages will cover how to use the AssetLib (both from inside "
"Godot, and on the website), how you can submit your own assets, and what the "
"guidelines for submission are."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:24
msgid ""
"Please note that the AssetLib is relatively young - it may have various pain "
"points, bugs, and usability issues. As with all Godot projects, the code "
"repository is available on `GitHub <https://github.com/godotengine/godot-"
"asset-library>`_, where you can submit pull requests and issues, so please "
"do not hesitate to visit it!"
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:29
msgid "Types of assets"
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:31
msgid ""
"Be aware that there are, broadly, two different types of assets you can post."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:33
msgid ""
"Assets labeled as \"Templates\", \"Projects\", or \"Demos\" appear under the "
"\"Templates\" tab in the Godot project manager. These assets are standalone "
"Godot projects that can run by themselves."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:37
msgid ""
"Other assets show up inside of the Godot editor under the \"AssetLib\" main "
"screen tab, next to \"2D\", \"3D\", and \"Script\". These assets are meant "
"to be downloaded and placed into an existing Godot project."
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:45
msgid "Can paid assets be uploaded to the asset library?"
msgstr ""

#: ../../docs/community/asset_library/what_is_assetlib.rst:47
msgid ""
"Not to the official one, though in the future, there might be other asset "
"libraries which allow it. That said, you are allowed to monetize and sell "
"Godot assets outside the Asset Library."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:4
msgid "Using the Asset Library"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:7
msgid "On the website"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:12
msgid ""
"As mentioned before, you can access the web frontend of the Asset Library on "
"`Godot's official website <https://godotengine.org/asset-library/asset>`_. "
"This is what it looks like when you first visit it:"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:18
msgid ""
"At the top, you see the **header**, which takes you to various other parts "
"of the AssetLib - at the moment, it's empty, as we are not logged in."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:22
msgid "Searching"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:24
msgid ""
"In the center is the **search bar + settings** section, and the **assets** "
"section below it - this lets you filter out certain kinds of assets based on "
"a host of criteria. These include the asset **category** (such as 2D tools, "
"scripts and demos), **engine version** they are intended for, **sorting "
"order** (by update date, by name, etc.) and **support level**."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:30
msgid ""
"While most other filter settings should be fairly self-explanatory, it's "
"worth going over what \"support level\" means in the Asset Library. "
"Currently there are three support levels, and each asset can belong to only "
"one."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:34
msgid ""
"**Official** assets are created and maintained by the official Godot Engine "
"developers. Currently, these include the official engine demos, which "
"showcase how various areas of the engine work."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:38
msgid ""
"**Community** assets are submitted and maintained by the members of the "
"Godot community."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:41
msgid ""
"**Testing** assets are works-in-progress, and may contain bugs and usability "
"issues. They are not recommended for use in serious projects, but you are "
"encouraged to download, test them, and submit issues to the original authors."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:45
msgid ""
"You can mix and match any of the search filters and criteria, and upon "
"clicking the Search button, receive the list of all assets in the Library "
"that match them."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:50
msgid ""
"Note that the search results are not updated in real-time, so you will have "
"to re-submit the search query each time you change the query settings."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:54
msgid "Breakdown of an asset"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:56
msgid ""
"Now let's take a look at what an asset's page looks like and what it "
"contains."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:60
msgid "Asset's thumbnail/icon."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:61
msgid "Asset's name."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:62
msgid "Current version number of the asset."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:63
msgid "Asset's category, Godot version, and support status."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:64
msgid "Asset's original author/submitter."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:65
msgid "The license the asset is distributed under."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:66
msgid "The date of the asset's latest edit/update."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:67
msgid "A textual description of the asset."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:68
msgid "Links related to the asset (download link, file list, issue tracker)."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:69
msgid "Images and videos showcasing the asset."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:72
msgid "Registering and logging in"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:74
msgid ""
"In order to upload assets to the AssetLib, you need to be logged in, and to "
"do that, you need a registered user account. In the future, this may also "
"give you access to other features, such as commenting on or rating the "
"existing assets. You do *not* need to be logged in to browse and download "
"the assets."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:79
msgid "The login/registration page can be accessed from the AssetLib header."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:83
msgid ""
"From here, you can register your account, which requires a valid email "
"address, a username, and a (preferably strong) password."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:88
msgid "Then, you can use your username and password to log in."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:92
msgid ""
"This will change the look of the AssetLib header. Now you get access to a "
"handful of new functions:"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:95
msgid ""
"The feed, which shows a list of status updates on your submitted assets (and "
"possibly more in the future)."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:96
msgid "A list of your uploaded assets."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:97
msgid "The ability to submit new assets."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:101
msgid ""
"You can learn how to submit assets to the Library, and what the asset "
"submission guidelines are, in the next part of this tutorial, :ref:"
"`doc_submitting_to_assetlib`."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:107
msgid "In the editor"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:111
msgid ""
"The editor will display different categories of assets depending on whether "
"you're browsing the project manager's **Templates** tab or the editor's "
"**AssetLib** tab."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:115
msgid ""
"The project manager's **Templates** tab will only display assets that are "
"standalone projects by themselves. This is denoted on the asset library with "
"the *Templates*, *Demos* and *Projects* categories."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:119
msgid ""
"The editor's **AssetLib** tab will only display assets that are *not* "
"standalone projects by themselves. In other words, it will display assets "
"from all categories except *Templates*, *Demos* and *Projects*."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:123
msgid "You can also access the AssetLib directly from Godot:"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:129
msgid ""
"Click on it, and Godot will fetch info about the assets from the AssetLib. "
"Once it's finished, you will see a window similar to what the AssetLib "
"website looks like, with some differences:"
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:135
msgid ""
"Similarly to the web version of the AssetLib, here you can search for assets "
"by category, name, and sort them by factors such as name or edit date."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:138
msgid ""
"Notably, you can only fetch assets for the current version of Godot you are "
"running. Projects, Demos and Templates can be downloaded from the Project "
"Manager view of the AssetLib. Addons (tools, scripts, materials etc.) can be "
"downloaded from the in-project AssetLib and added to the current project. In "
"addition, unlike when using the web frontend, the search results are updated "
"in real-time (you do not have to press Search after every change to your "
"search query for the changes to take place)."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:146
msgid ""
"In the future, you will be able to choose a different AssetLib provider to "
"fetch assets from (using the Site dropdown menu), however currently only the "
"official `Godot website <https://godotengine.org>`_ version of the AssetLib "
"is supported, as well as the version that may be running on your local "
"machine's web server (the localhost option)."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:152
msgid "When you click on an asset, you will see more information about it."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:156
msgid ""
"If you click on the Install button, Godot will fetch an archive of the "
"asset, and will track download progress of it at the bottom of the editor "
"window. If the download fails, you can retry it using the Retry button."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:162
msgid ""
"When it finishes, you can proceed to install it using the Install button. "
"This will bring up the Package Installer window."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:167
msgid ""
"Here you can see a list of all the files that will be installed. You can "
"tick off any of the files that you do not wish to install, and Godot will "
"also inform you about any problems with files that it cannot install. These "
"files will be shown in red, and hovering over them will show you a message "
"stating why it cannot be installed."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:175
msgid ""
"Once you are done, you can press the Install button, which will unzip all "
"the files in the archive, and import any assets contained therein, such as "
"images or 3D models. Once this is done, you should see a message stating "
"that the Package installation is complete."
msgstr ""

#: ../../docs/community/asset_library/using_assetlib.rst:182
msgid ""
"You may also use the Import button to import asset archives obtained "
"elsewhere (such as downloading them directly from the AssetLib web "
"frontend), which will take you through the same package installation "
"procedure as with the assets downloaded directly via Godot that we just "
"covered."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:4
msgid "Submitting to the Asset Library"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:9
msgid ""
"This tutorial aims to serve as a guide on how you can submit your own assets "
"to the `Godot Asset Library <https://godotengine.org/asset-library/asset>`_ "
"and share them with the Godot community."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:13
msgid ""
"As mentioned in the :ref:`doc_using_assetlib` document, in order to be able "
"to submit assets to the AssetLib, you need to have a registered account, and "
"be logged in."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:18
msgid "Submission guidelines"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:20
msgid ""
"Before submitting your asset, please ensure it follows all of the "
"requirements, and also consider following the recommendations."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:26
msgid ""
"Generally speaking, most assets people submit to the asset library are "
"accepted. However, in order for your asset to be accepted, there are a few "
"requirements your asset needs to meet to be approved."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:30
msgid ""
"The asset must **work**. If the asset doesn't run or otherwise doesn't work "
"in the specified Godot version, then it will be rejected."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:33
msgid ""
"The asset must have a proper **.gitignore** file. It's important to keep "
"redundant data out of the repository. `Here's a template. <https://raw."
"githubusercontent.com/aaronfranke/gitignore/godot/Godot.gitignore>`_"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:37
msgid ""
"No **submodules**, or any submodules must be non-essential. GitHub does not "
"include submodules in the downloaded ZIP file, so if the asset needs the "
"contents of the submodule, your asset won't work."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:41
msgid ""
"The **license** needs to be correct. The license listed on the asset library "
"must match the license in the repository. The repo MUST have a license file, "
"called either \"LICENSE\" or \"LICENSE.md\". This file must contain the "
"license text itself and a copyright statement that includes the year(s) and "
"copyright holder."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:47
msgid ""
"Use proper **English** for the name and description of your asset. This "
"includes using correct capitalization, and using full sentences in the "
"description. You can also include other languages, but there should at least "
"be an English version."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:52
msgid ""
"The icon link must be a **direct link**. For icons hosted on GitHub, the "
"link must start with \"raw.githubusercontent.com\", not \"github.com\"."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:56
msgid "Recommendations"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:58
msgid ""
"These things are not required for your asset to be approved, but if you "
"follow these recommendations, you can help make the asset library a better "
"place for all users."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:62
msgid ""
"Fix or suppress all script **warnings**. The warning system is there to help "
"identify issues with your code, but people using your asset don't need to "
"see them."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:66
msgid ""
"Make your code conform to the official **style guides**. Having a consistent "
"style helps other people read your code, and it also helps if other people "
"wish to contribute to your asset. See: the :ref:`doc_gdscript_styleguide` or "
"the :ref:`doc_c_sharp_styleguide`."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:71
msgid ""
"If you have screenshots in your repo, place them in their own subfolder and "
"add an empty **.gdignore** file in the same folder (note: **gd**, not "
"**git**). This prevents Godot from importing your screenshots. On Windows, "
"open a command prompt in the project folder and run ``type nul > .gdignore`` "
"to create a file whose name starts with a period."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:77
msgid ""
"If your asset is a library for working with other files, consider including "
"**example files** in the asset."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:80
msgid ""
"Consider adding a **.gitattributes** file to your repo. This file allows "
"giving extra instructions to Git, such as specifying line endings and "
"listing files not required for your asset to function with the ``export-"
"ignore`` directive. This directive removes such files from the resulting ZIP "
"file, preventing them from being downloaded by the asset library users. "
"These are common examples of **.gitattributes**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:89
msgid "Projects / Templates"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:96
msgid "Addons / Asset Packs"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:108
msgid ""
"If you are submitting a plugin, add a **copy** of your license and readme to "
"the plugin folder itself. This is the folder that users are guaranteed to "
"keep with their project, so a copy ensures they always have those files "
"handy (and helps them fulfill your licensing terms)."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:113
msgid ""
"The **icon** should be a square, its aspect ratio should be 1:1. It should "
"also ideally have a minimum resolution of 64x64 pixels."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:116
msgid ""
"While the asset library allows more than just GitHub, consider hosting your "
"asset's source code on **GitHub**. Other services may not work reliably, and "
"a lack of familiarity can be a barrier to contributors."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:121
msgid "Submitting"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:123
msgid ""
"Once you are logged in, you will be able to head over to the \"Submit "
"Assets\" page of the AssetLib, which will look like this:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:128
msgid ""
"While it may look like a lot (and there is more as you scroll down), each "
"field is described in terms of what you should put in. We will nonetheless "
"go over what is required in the submission form here as well."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:133
msgid "**Asset Name**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:133
msgid ""
"The name of your asset. Should be a unique, descriptive title of what your "
"asset is."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:139
msgid "**Category**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:136
msgid ""
"The category that your asset belongs to, and will be shown in search "
"results. The category is split into **Addons** and **Projects**. In-editor, "
"assets of the Project type (Templates, Demos, Projects) only show up when "
"viewing the AssetLib from the Project Manager, while assets of the Addon "
"type will only be visible from inside a project."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:145
msgid "**Godot version**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:142
msgid ""
"The version of the engine that the asset works with. Currently, it's not "
"possible to have a single asset entry contain downloads for multiple engine "
"versions, so you may need to re-submit the asset multiple times, with an "
"entry for each Godot version it supports. This is particularly important "
"when dealing with major versions of the engine, such as Godot 2.x and Godot "
"3.x."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:152
msgid "**Version**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:148
msgid ""
"The version number of the asset. While you are free to choose and use any "
"versioning scheme that you like, you may want to look into something such as "
"`SemVer <https://semver.org>`_ if you want your asset's versioning scheme to "
"be clear and consistent. Note that there is also an internal version number, "
"incremented every time the asset download URL is changed or updated."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:157
msgid "**Repository host**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:155
msgid ""
"Assets uploaded to the AssetLib are not hosted on it directly. Instead, they "
"point to repositories hosted on third-party Git providers, such as GitHub, "
"GitLab or Bitbucket. This is where you choose which provider your asset "
"uses, so the site can compute the final download link."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:160
msgid "**Repository URL**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:160
msgid ""
"The URL to your asset's files/webpage. This will vary based on your choice "
"of provider, but it should look similar to `https://github.com/<user>/"
"<project>`."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:165
msgid "**Issues URL**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:163
msgid ""
"The URL to your asset's issue tracker. Again, this will differ from "
"repository host to repository host, but will likely look similar to `https://"
"github.com/<user>/<project>/issues`. You may leave this field empty if you "
"use your provider's issue tracker, and it's part of the same repository."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:169
msgid "**Download Commit**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:168
msgid ""
"The commit of the asset. For example, "
"`b1d3172f89b86e52465a74f63a74ac84c491d3e1`. The site computes the actual "
"download URL from this."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:173
msgid "**Icon URL**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:172
msgid ""
"The URL to your asset's icon (which will be used as a thumbnail in the "
"AssetLib search results and on the asset's page). Should be an image in "
"either the PNG or JPG format."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:178
msgid "**License**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:176
msgid ""
"The license under which you are distributing the asset. The list includes a "
"variety of free and open-source software licenses, such as GPL (v2 and v3), "
"MIT, BSD and Boost Software License. You can visit `OpenSource.org <https://"
"opensource.org>`_ for a detailed description of each of the listed licenses."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:184
msgid "**Description**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:181
msgid ""
"Finally, you can use the Description field for a textual overview of your "
"asset, its features and behavior, a changelog, et cetera. In the future, "
"formatting with Markdown will be supported, but currently, your only option "
"is plain text."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:186
msgid ""
"You may also include up to three video and/or image previews, which will be "
"shown at the bottom of the asset page. Use the \"Enable\" checkbox on each "
"of the preview submission boxes to enable them."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:190
msgid "**Type**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:191
msgid "Either an image, or a video."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:192
msgid "**Image/YouTube URL**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:193
msgid "Either a link to the image, or to a video, hosted on YouTube."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:197
msgid "**Thumbnail URL**:"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:195
msgid ""
"A URL to an image that will be used as a thumbnail for the preview. This "
"option will be removed eventually, and thumbnails will be automatically "
"computed instead."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:199
msgid ""
"Once you are done, press \"Submit\". Your asset will be entered into the "
"review queue. You can check all assets currently pending a review `here "
"<https://godotengine.org/asset-library/asset/edit?&asset=-1>`_ . The "
"approval process is manual and may take up to a few days for your asset to "
"be accepted (or rejected), so please be patient!"
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:206
msgid ""
"You may have some luck accelerating the approval process by messaging the "
"moderators and AssetLib reviewers on the `Godot Contributors Chat <https://"
"chat.godotengine.org/>`_, or the official Discord server."
msgstr ""

#: ../../docs/community/asset_library/submitting_to_assetlib.rst:210
msgid ""
"You will be informed when your asset is reviewed. If it was rejected, you "
"will be told why that may have been, and you will be able to submit it again "
"with the appropriate changes."
msgstr ""

#: ../../docs/community/channels.rst:4
msgid "Community channels"
msgstr ""

#: ../../docs/community/channels.rst:6
msgid ""
"So, where is the Godot community and where can you ask questions and get "
"help?"
msgstr ""

#: ../../docs/community/channels.rst:8
msgid ""
"Note that some of these channels are run and moderated by members of the "
"Godot community or third parties."
msgstr ""

#: ../../docs/community/channels.rst:10
msgid ""
"A brief overview over these and other channels is also available on the "
"`Godot website <https://godotengine.org/community>`_."
msgstr ""

#: ../../docs/community/channels.rst:13
msgid "Q&A"
msgstr ""

#: ../../docs/community/channels.rst:15
msgid "`Official Godot Questions & Answers <https://godotengine.org/qa/>`_"
msgstr ""

#: ../../docs/community/channels.rst:18
msgid "Rocket.Chat"
msgstr ""

#: ../../docs/community/channels.rst:20
msgid "`Godot Contributors Chat <https://chat.godotengine.org/>`_"
msgstr ""

#: ../../docs/community/channels.rst:23
msgid "IRC on Libera.Chat"
msgstr ""

#: ../../docs/community/channels.rst:27
msgid ""
"As of January 2021, core developer chat has moved to the Godot Contributors "
"Chat platform listed above."
msgstr ""

#: ../../docs/community/channels.rst:29
msgid ""
"`General: #godotengine <https://web.libera.chat/?channels=#godotengine>`_"
msgstr ""

#: ../../docs/community/channels.rst:31
msgid ""
"IRC is less active than Discord. Please stick around to get an answer, as it "
"may take several hours for someone to see and answer your questions."
msgstr ""

#: ../../docs/community/channels.rst:35
msgid "Other chats"
msgstr ""

#: ../../docs/community/channels.rst:37
msgid "`Discord <https://discord.gg/4JBkykG>`_"
msgstr ""

#: ../../docs/community/channels.rst:38
msgid ""
"`Matrix (IRC compatible) <https://matrix.to/#/#godotengine:matrix.org>`_"
msgstr ""

#: ../../docs/community/channels.rst:41
msgid "Language-based communities"
msgstr ""

#: ../../docs/community/channels.rst:43
msgid ""
"See the `User groups <https://godotengine.org/community/user-groups>`_ page "
"of the website for a list of local communities."
msgstr ""

#: ../../docs/community/channels.rst:47
msgid "Social networks"
msgstr ""

#: ../../docs/community/channels.rst:49
msgid "`GitHub <https://github.com/godotengine/>`_"
msgstr ""

#: ../../docs/community/channels.rst:50
msgid "`Facebook group <https://www.facebook.com/groups/godotengine/>`_"
msgstr ""

#: ../../docs/community/channels.rst:51
msgid ""
"`Twitter <https://twitter.com/godotengine>`_ (see also the `#GodotEngine "
"<https://twitter.com/hashtag/GodotEngine>`_ hashtag)"
msgstr ""

#: ../../docs/community/channels.rst:53
msgid "`Reddit <https://www.reddit.com/r/godot>`_"
msgstr ""

#: ../../docs/community/channels.rst:54
msgid "`YouTube <https://www.youtube.com/c/GodotEngineOfficial>`_"
msgstr ""

#: ../../docs/community/channels.rst:55
msgid "`Steam <https://steamcommunity.com/app/404790>`_"
msgstr ""

#: ../../docs/community/channels.rst:58
msgid "Forum"
msgstr ""

#: ../../docs/community/channels.rst:60
msgid "`Godot Forums <https://godotforums.org/>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:4
msgid "Tutorials and resources"
msgstr ""

#: ../../docs/community/tutorials.rst:6
msgid ""
"This is a list of third-party tutorials and resources created by the Godot "
"community. For resources, remember that there is the official `Godot Asset "
"Library <https://godotengine.org/asset-library/asset>`_ full of official and "
"community resources too! Also, have a look at this `huge list over at Reddit "
"<https://www.reddit.com/r/godot/comments/an0iq5/"
"godot_tutorials_list_of_video_and_written/>`_."
msgstr ""

#: ../../docs/community/tutorials.rst:8
msgid ""
"Think there is something missing here? Feel free to submit a `Pull Request "
"<https://github.com/godotengine/godot-docs/blob/master/community/tutorials."
"rst>`_ as always."
msgstr ""

#: ../../docs/community/tutorials.rst:11
msgid "Where to start"
msgstr ""

#: ../../docs/community/tutorials.rst:13
msgid ""
"The Godot video tutorials by `GDQuest <https://www.youtube.com/channel/"
"UCxboW7x0jZqFdvMdCFKTMsQ/playlists>`_, `Game from Scratch <https://www."
"youtube.com/watch?v=iDEcP8Mc-7s&list=PLS9MbmO_ssyDk79j9ewONxV88fD5e_o5d>`_ "
"and `KidsCanCode <https://www.youtube.com/channel/UCNaPQ5uLX5iIEHUCLmfAgKg/"
"playlists>`_ are well-regarded in the community and often recommended as a "
"gentle introduction to beginners."
msgstr ""

#: ../../docs/community/tutorials.rst:15
msgid ""
"If you're interested in Visual Scripting, `Emilio's tutorials <https://www."
"youtube.com/channel/UC9DR22-qohBDtZ74R3FxOZg>`_ may be worth a look."
msgstr ""

#: ../../docs/community/tutorials.rst:17
msgid ""
"If you're interested in a complete introduction to programming using Godot "
"and GDScript, the unofficial `Godot Tutorials <https://www.youtube.com/"
"channel/UCnr9ojBEQGgwbcKsZC-2rIg>`_ YouTube channel is a good place to start."
msgstr ""

#: ../../docs/community/tutorials.rst:19
msgid ""
"GDQuest's *Learn GDScript From Zero* is a free and open source interactive "
"tutorial for absolute beginners to learn to program with Godot's GDScript "
"language. It is available as a `desktop application <https://gdquest.itch.io/"
"learn-godot-gdscript>`_  or `in the browser <https://gdquest.github.io/learn-"
"gdscript>`_."
msgstr ""

#: ../../docs/community/tutorials.rst:21
msgid ""
"Some tutorials mentioned below provide more advanced tutorials, e.g. on 3D "
"or shaders."
msgstr ""

#: ../../docs/community/tutorials.rst:24
msgid "Video tutorials"
msgstr ""

#: ../../docs/community/tutorials.rst:26
msgid ""
"`Godot Tutorials <https://www.youtube.com/channel/"
"UCnr9ojBEQGgwbcKsZC-2rIg>`_ (2D, GDScript, Programming Basics)."
msgstr ""

#: ../../docs/community/tutorials.rst:27
msgid ""
"`Emilio <https://www.youtube.com/channel/UC9DR22-qohBDtZ74R3FxOZg>`_ (2D, "
"GDScript and VisualScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:28
msgid ""
"`FinePointCGI <https://www.youtube.com/channel/UCSojAWUnEUTUcdA9iJ6bryQ>`_ "
"(2D, 3D, GDScript and C#)."
msgstr ""

#: ../../docs/community/tutorials.rst:29
msgid ""
"`GDQuest <https://www.youtube.com/channel/UCxboW7x0jZqFdvMdCFKTMsQ/"
"playlists>`_ (2D and 3D, GDScript, VisualScript and C#)."
msgstr ""

#: ../../docs/community/tutorials.rst:30
msgid ""
"`Game Development Center <https://www.youtube.com/c/GameDevelopmentCenter>`_ "
"(2D, networked multiplayer, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:31
msgid ""
"`Game Endeavor <https://www.youtube.com/channel/UCLweX1UtQjRjj7rs_0XQ2Eg/"
"videos>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:32
msgid ""
"`Game from Scratch <https://www.youtube.com/watch?"
"v=iDEcP8Mc-7s&list=PLS9MbmO_ssyDk79j9ewONxV88fD5e_o5d>`_ (2D and 3D, "
"GDScript and C#)."
msgstr ""

#: ../../docs/community/tutorials.rst:33
msgid ""
"`HeartBeast <https://www.youtube.com/watch?v=wETY5_9kFtA&list=PL9FzW-"
"m48fn2jlBu_0DRh7PvAt-GULEmd>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:34
msgid ""
"`KidsCanCode <https://www.youtube.com/channel/UCNaPQ5uLX5iIEHUCLmfAgKg/"
"playlists>`__ (2D and 3D, GDScript and VisualScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:35
msgid ""
"`Mister Taft Creates <https://www.youtube.com/playlist?"
"list=PL4vbr3u7UKWqwQlvwvgNcgDL1p_3hcNn2>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:36
msgid ""
"`Miziziziz <https://www.youtube.com/playlist?"
"list=PLmugv6_kd0qN6AyjG245_Pdak4MXKUx88>`_ (2D and 3D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:37
msgid ""
"`P1X / Krzysztof Jankowski <https://www.youtube.com/playlist?"
"list=PLvDk7UKhld4xGPovdB4IFtAHYMYjx_-3K>`_ (3D)."
msgstr ""

#: ../../docs/community/tutorials.rst:38
msgid ""
"`Pigdev <https://www.youtube.com/playlist?"
"list=PLPMN4vCRFdordS3E-3zi0Hdh7pAsbWQ6a>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:39
msgid ""
"`Steincodes <https://www.youtube.com/c/steincodes/playlists>`__ (2D, "
"GDScript and VisualScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:40
msgid ""
"`TheBuffED <https://www.youtube.com/watch?"
"v=ygGaN1EOQEA&list=PLvN5Z3tTxXEDfQkt4Frg6ALirespSwZd7>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:41
msgid ""
"`Code with Tom <https://www.youtube.com/playlist?"
"list=PLiUQR4U_J9ec0k91iHPme_qtfS1nrWF3W>`_ (2D and 3D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:42
msgid ""
"`BornCG <https://www.youtube.com/playlist?"
"list=PLda3VoSoc_TSBBOBYwcmlamF1UrjVtccZ>`_ (2D and 3D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:43
msgid ""
"`Gonkee <https://www.youtube.com/channel/UCJqCPFHdbc6443G3Sz6VYDw>`_ (2D and "
"3D, GDScript, Shaders)."
msgstr ""

#: ../../docs/community/tutorials.rst:44
msgid ""
"`TheGuideKnight <https://www.youtube.com/playlist?"
"list=PLYcTJBw32KtX2fvOdtO_fS3Nd6sxM71tn>`_ (2D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:45
msgid ""
"`GDScript Dude <https://www.youtube.com/channel/UCQs0i6vKISElM6mh7OzLouQ>`_ "
"(GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:46
msgid "`Garbaj <https://www.youtube.com/c/Garbaj/>`_ (3D, GDScript)."
msgstr ""

#: ../../docs/community/tutorials.rst:47
msgid ""
"`Kasper Frandsen <https://www.youtube.com/c/KasperFrandsen/>`_ (3D, Shaders)."
msgstr ""

#: ../../docs/community/tutorials.rst:50
msgid "Text tutorials"
msgstr ""

#: ../../docs/community/tutorials.rst:52
msgid "`FinepointCGI website by Mitch <http://finepointcgi.io/>`__"
msgstr ""

#: ../../docs/community/tutorials.rst:53
msgid "`GDScript website by Andrew Wilkes <https://gdscript.com>`__"
msgstr ""

#: ../../docs/community/tutorials.rst:54
msgid "`Godot Recipes by KidsCanCode <http://godotrecipes.com/>`__"
msgstr ""

#: ../../docs/community/tutorials.rst:55
msgid "`Steincodes <https://steincodes.tumblr.com>`__"
msgstr ""

#: ../../docs/community/tutorials.rst:58
msgid "Devlogs"
msgstr ""

#: ../../docs/community/tutorials.rst:60
msgid ""
"`Andrea Catania (Physics & AI) <https://www.youtube.com/channel/"
"UCm4RuvYtgpgFDTCgaEUT5uQ/videos>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:61
msgid ""
"`Bastiaan Olij (AR & VR) <https://www.youtube.com/channel/UCrbLJYzJjDf2p-"
"vJC011lYw/videos>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:66
msgid ""
"`awesome-godot: A curated list of free/libre plugins, scripts and add-ons "
"<https://github.com/godotengine/awesome-godot>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:67
msgid ""
"`Zeef Godot Engine: A curated directory of resources by Andre Schmitz "
"<https://godot-engine.zeef.com/andre.antonio.schmitz>`_"
msgstr ""
