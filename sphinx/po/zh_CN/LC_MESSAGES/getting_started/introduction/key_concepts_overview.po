# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Overview of Godot's key concepts"
msgstr "Godot 关键概念概述"

msgid ""
"Every game engine revolves around abstractions you use to build your "
"applications. In Godot, a game is a **tree** of **nodes** that you group "
"together into **scenes**. You can then wire these nodes so they can "
"communicate using **signals**."
msgstr ""
"任何游戏引擎都是围绕着构建程序所用的抽象的。在 Godot 中，游戏就是一棵由\\ **"
"节点**\\ 构成的\\ **树**\\ ，树又可以结合起来构成\\ **场景**\\ 。然后你还可以"
"将这些节点连起来，让它们通过\\ **信号**\\ 进行通信。"

msgid ""
"These are the four concepts you will learn here. We're going to look at them "
"briefly to give you a sense of how the engine works. In the getting started "
"series, you will get to use them in practice."
msgstr ""
"这就是你将在这里学习的四个概念。我们将简要地看一下它们，让你对引擎的工作原理"
"有一个了解。在入门系列中，你将在实践中使用它们。"

msgid "Scenes"
msgstr "场景"

msgid ""
"In Godot, you break down your game in reusable scenes. A scene can be a "
"character, a weapon, a menu in the user interface, a single house, an entire "
"level, or anything you can think of. Godot's scenes are flexible; they fill "
"the role of both prefabs and scenes in some other game engines."
msgstr ""
"在 Godot 中，你把你的游戏分解成可重复使用的场景。场景可以是一个角色、一件武"
"器、用户界面中的一个菜单、一座房子、整个关卡，或者任何你能想到的东西。Godot "
"的场景很灵活，既能够充当预制件（Prefab），又能够用作其他游戏引擎中的场景。"

msgid ""
"You can also nest scenes. For example, you can put your character in a "
"level, and drag and drop a scene as a child of it."
msgstr ""
"你还可以嵌套场景。例如，你可以把你的角色放在关卡中，然后拖放一个场景作为它的"
"子级。"

msgid "Nodes"
msgstr "节点"

msgid ""
"A scene is composed of one or more **nodes**. Nodes are your game's smallest "
"building blocks that you arrange into trees. Here's an example of a "
"character's nodes."
msgstr ""
"场景由若干\\ **节点**\\ 组成。节点是你的游戏最小的构件，你将其排列成树状。下"
"面是一个人物节点的例子。"

msgid ""
"It is made of a ``KinematicBody2D`` node named \"Character\", a ``Sprite``, "
"a ``Camera2D``, and a ``CollisionShape2D``."
msgstr ""
"它由一个名为“Character”的 ``KinematicBody2D`` 节点、\\ ``Sprite``\\ 、\\ "
"``Camera2D``\\ 、\\ ``CollisionShape2D`` 组成。"

msgid ""
"The node names end with \"2D\" because this is a 2D scene. Their 3D "
"counterpart have names that end with \"3D\"."
msgstr ""
"节点名称以“2D”结尾，因为这是一个 2D 场景。它们的 3D 对应节点的名称以“3D”结"
"尾。"

msgid ""
"Notice how nodes and scenes look the same in the editor. When you save a "
"tree of nodes as a scene, it then shows as a single node, with its internal "
"structure hidden in the editor."
msgstr ""
"注意节点和场景在编辑器中看起来是一样的。当你把一棵节点树保存为场景时，它就显"
"示为一个单一的节点，其内部结构在编辑器中是隐藏的。"

msgid ""
"Godot provides an extensive library of base node types you can combine and "
"extend to build more powerful ones. 2D, 3D, or user interface, you will do "
"most things with these nodes."
msgstr ""
"Godot 提供了丰富的基础节点类型库，你可以通过组合和扩展来建立更强大的节点。无"
"论是 2D、3D 还是用户界面，你都可以用这些节点完成大多数事情。"

msgid "The scene tree"
msgstr "场景树"

msgid ""
"All your game's scenes come together in the **scene tree**, literally a tree "
"of scenes. And as scenes are trees of nodes, the scene tree also is a tree "
"of nodes. But it's easier to think of your game in terms of scenes as they "
"can represent characters, weapons, doors, or your user interface."
msgstr ""
"游戏的所有场景都汇集在\\ **场景树**\\ 中，字面意思是一棵场景树。由于场景是节"
"点树，因此场景树也是节点树。但是，从场景的角度来考虑您的游戏更容易，因为它们"
"可以代表角色、武器、门或您的用户界面。"

msgid "Signals"
msgstr "信号"

msgid ""
"Nodes emit signals when some event occurs. This feature allows you to make "
"nodes communicate without hard-wiring them in code. It gives you a lot of "
"flexibility in how you structure your scenes."
msgstr ""
"节点在发生某些事件时发出信号。此功能无需在代码中硬连接它们就能让节点相互通"
"信。它为您提供了构建场景的灵活性。"

msgid ""
"Signals are Godot's version of the *observer* pattern. You can read more "
"about it here: https://gameprogrammingpatterns.com/observer.html"
msgstr ""
"信号是 Godot 版的\\ *观察者*\\ 模式。你可以在这里查看更多相关内容：\\ "
"https://gameprogrammingpatterns.com/observer.html"

msgid ""
"For example, buttons emit a signal when pressed. You can connect to this "
"signal to run code in reaction to this event, like starting the game or "
"opening a menu."
msgstr ""
"例如，按钮在按下时会发出信号。您可以连接到此信号以运行代码以响应此事件，例如"
"启动游戏或打开菜单。"

msgid ""
"Other built-in signals can tell you when two objects collided, when a "
"character or monster entered a given area, and much more. You can also "
"define new signals tailored to your game."
msgstr ""
"其他内置信号可以告诉您两个对象何时碰撞，角色或怪物何时进入给定区域等等。您还"
"可以针对游戏量身定制新的信号。"

msgid "Summary"
msgstr "总结"

msgid ""
"Nodes, scenes, the scene tree, and signals are four core concepts in Godot "
"that you will manipulate all the time."
msgstr "节点、场景、场景树和信号是 Godot 中的四个核心概念，您将一直操纵它们。"

msgid ""
"Nodes are your game's smallest building blocks. You combine them to create "
"scenes that you then combine and nest into the scene tree. You can then use "
"signals to make nodes react to events in other nodes or different scene tree "
"branches."
msgstr ""
"节点是游戏最小的构建块。你把它们组合起来创建场景，再把它们组合起来并嵌套到场"
"景树中。最后，你可以使用信号来使节点对其他节点或不同的场景树分支中的事件做出"
"响应。"

msgid ""
"After this short breakdown, you probably have many questions. Bear with us "
"as you will get many answers throughout the getting started series."
msgstr ""
"经过这个简短的分解，你可能有很多问题。请耐心等待，你将在整个入门系列中得到更"
"多解答。"

msgid "Translation status"
msgstr "翻译状态"
