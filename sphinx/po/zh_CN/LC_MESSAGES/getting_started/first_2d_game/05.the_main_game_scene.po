# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "The main game scene"
msgstr "游戏主场景"

msgid ""
"Now it's time to bring everything we did together into a playable game scene."
msgstr "现在是时候将我们所做的一切整合到一个可玩的游戏场景中了。"

msgid ""
"Create a new scene and add a :ref:`Node <class_Node>` named ``Main``. (The "
"reason we are using Node instead of Node2D is because this node will be a "
"container for handling game logic. It does not require 2D functionality "
"itself.)"
msgstr ""
"创建新场景并添加一个 :ref:`Node <class_Node>` 节点，命名为 ``Main``\\ 。（我"
"们之所以使用 Node 而不是 Node2D，是因为这个节点会作为处理游戏逻辑的容器使用。"
"本身是不需要 2D 功能的。）"

msgid ""
"Click the **Instance** button (represented by a chain link icon) and select "
"your saved ``Player.tscn``."
msgstr ""
"点击\\ **实例化**\\ 按钮（由链条图标表示）并选择保存的 ``Player.tscn``\\ 。"

msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"现在, 将以下节点添加为 ``Main`` 的子节点, 并按如下所示对其进行命名(值以秒为单"
"位):"

msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>`\\ （名为 ``MobTimer``\\ ）——控制怪物产生的频率"

msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ":ref:`Timer <class_Timer>`\\ （名为 ``ScoreTimer``\\ ）——每秒增加分数"

msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>`\\ （名为 ``StartTimer``\\ ）——在开始之前给出延迟"

msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>`\\ （名为 ``StartPosition``\\ ）——表示玩"
"家的起始位置"

msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "如下设置每个 ``Timer`` 节点的 ``Wait Time`` 属性："

msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``\\ ：\\ ``0.5``"

msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``\\ ：\\ ``1``"

msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``\\ ：\\ ``2``"

msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"此外，将 ``StartTimer`` 的 ``One Shot`` 属性设置为“启用”，并将 "
"``StartPosition`` 节点的 ``Position`` 设置为 ``(240, 450)``\\ 。"

msgid "Spawning mobs"
msgstr "生成怪物"

msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"``Main`` 节点将产生新的生物, 我们希望它们出现在屏幕边缘的随机位置. 添加一个名"
"为 ``MobPath`` 的 :ref:`Path2D <class_Path2D>` 节点作为 ``Main`` 的子级. 当你"
"选择 ``Path2D`` 时, 你将在编辑器顶部看到一些新按钮:"

msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""
"选择中间的按钮（“添加点”），然后通过点击给四角添加点来绘制路径。要使点吸附到"
"网格，请确保同时选中“使用网格吸附”和“使用吸附”。这些选项可以在“锁定”按钮左侧"
"找到，图标为一个磁铁加三个点或一些交叉线。"

msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"以\\ *顺时针*\\ 的顺序绘制路径，否则小怪会\\ *向外*\\ 而非\\ *向内*\\ 生成！"

msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr "在图像上放置点 ``4`` 后, 点击 ``闭合曲线`` 按钮, 你的曲线将完成."

msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"现在已经定义了路径, 添加一个 :ref:`PathFollow2D <class_PathFollow2D>` 节点作"
"为 ``MobPath`` 的子节点, 并将其命名为 ``MobSpawnLocation``. 该节点在移动时, "
"将自动旋转并沿着该路径, 因此我们可以使用它沿路径来选择随机位置和方向."

msgid "Your scene should look like this:"
msgstr "您的场景应如下所示:"

msgid "Main script"
msgstr "Main 脚本"

msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"将脚本添加到 ``Main``. 在脚本的顶部, 我们使用 ``export (PackedScene)`` 来允许"
"我们选择要实例化的 ``Mob`` 场景."

msgid ""
"We also add a call to ``randomize()`` here so that the random number "
"generator generates different random numbers each time the game is run:"
msgstr ""
"我们还在此处添加了对 ``randomize()`` 的调用，以便随机数生成器在每次运行游戏时"
"生成不同的随机数："

msgid ""
"Click the ``Main`` node and you will see the ``Mob Scene`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""
"单击 ``Main`` 节点，就可以在“检查器”的“Script Variables”（脚本变量）下看到 "
"``Mob Scene`` 属性。"

msgid "You can assign this property's value in two ways:"
msgstr "有两种方法来给这个属性赋值:"

msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" dock and drop it in the **Mob "
"Scene** property."
msgstr "将 ``Mob.tscn`` 从“文件系统”面板拖放到 ``Mob Scene`` 属性里。"

msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr "单击“[空]”旁边的下拉箭头按钮，选择“加载”。选择 ``Mob.tscn``\\ 。"

msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""
"在场景树中选择 ``Player`` 节点, 然后选择 ``节点(Node)`` 选项卡(位于右侧属性"
"旁), 确保已选择 ``信号(Signals)`` ."

msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"你可以看到 ``Player`` 的信号列表. 找到 ``hit`` 信号并双击(或右键选择 \"连接信"
"号...\"). 我们将在打开的界面创建 ``game_over`` 函数, 用来处理游戏结束时发生的"
"事情. 在 ``连接信号到方法`` 窗口底部的 ``接收方法`` 框中键入 ``game_over`` . "
"添加以下代码, 以及 ``new_game`` 函数以设置新游戏的所需内容:"

msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"现在将每个 ``Timer`` 节点( ``StartTimer`` , ``ScoreTimer`` 和 ``MobTimer`` )"
"的 ``timeout()`` 信号连接到 ``main`` 脚本。 ``StartTimer`` 将启动其他两个计时"
"器.。 ``ScoreTimer`` 将使得分加1。"

msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position. When "
"we spawn a mob, we'll pick a random value between ``150.0`` and ``250.0`` "
"for how fast each mob will move (it would be boring if they were all moving "
"at the same speed)."
msgstr ""
"在 ``_on_MobTimer_timeout()`` 中， 我们先创建小怪实例，然后沿着 ``Path2D`` 路"
"径随机选取起始位置，最后让小怪移动。\\ ``PathFollow2D`` 节点将沿路径移动，并"
"会自动旋转，所以我们将使用它来选择怪物的方位和朝向。生成小怪后，我们会在 "
"``150.0`` 和 ``250.0`` 之间选取随机值，表示每只小怪的移动速度（如果它们都以相"
"同的速度移动，那么就太无聊了）。"

msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr "注意，必须使用 ``add_child()`` 将新实例添加到场景中。"

msgid ""
"Why ``PI``? In functions requiring angles, Godot uses *radians*, not "
"degrees. Pi represents a half turn in radians, about ``3.1415`` (there is "
"also ``TAU`` which is equal to ``2 * PI``). If you're more comfortable "
"working with degrees, you'll need to use the ``deg2rad()`` and ``rad2deg()`` "
"functions to convert between the two."
msgstr ""
"为什么使用 ``PI``\\ ？在需要角度的函数中，Godot 使用\\ *弧度*\\ 而不是度数。"
"圆周率（Pi）表示转半圈的弧度，约为 ``3.1415``\\ （还有等于 ``2 * PI`` 的 "
"``TAU``\\ ）。如果您更喜欢使用度数，则需使用 ``deg2rad()`` 和 ``rad2deg()`` "
"函数在两种单位之间进行转换。"

msgid "Testing the scene"
msgstr "测试场景"

msgid ""
"Let's test the scene to make sure everything is working. Add this "
"``new_game`` call to ``_ready()``:"
msgstr ""
"让我们测试这个场景，确保一切正常。请将对 ``new_game`` 的调用添加至 "
"``_ready()``\\ ："

msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""
"让我们同时指定 ``Main`` 作为我们的“主场景”——游戏启动时自动运行的场景。按下“运"
"行”按钮，当弹出提示时选择 ``Main.tscn``\\ 。"

msgid ""
"If you had already set another scene as the \"Main Scene\", you can right "
"click ``Main.tscn`` in the FileSystem dock and select \"Set As Main Scene\"."
msgstr ""
"如果你已经将别的场景设置为“主场景”了，你可以在文件系统面板上右键点击 ``Main."
"tscn`` 并选择“设为主场景”。"

msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""
"你应该可以四处移动游戏角色，观察敌人的生成，以及玩家被敌人击中时会消失。"

msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr "当你确定一切正常时，在 ``_ready()`` 中移除对 ``new_game()`` 的调用。"

msgid ""
"What's our game lacking? Some user interface. In the next lesson, we'll add "
"a title screen and display the player's score."
msgstr ""
"我们的游戏还缺点啥？缺用户界面。在下一课中，我们将会添加标题界面并且显示玩家"
"的分数。"

msgid "Translation status"
msgstr "翻译状态"
