# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "创建玩家场景"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr "项目设置到位后，我们可以开始处理玩家控制的角色。"

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"第一个场景, 我们会定义 ``Player`` 对象. 单独创建Player场景的好处之一是, 在游"
"戏的其他部分做出来之前, 我们就可以对其进行单独测试."

msgid "Node structure"
msgstr "节点结构"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"首先，我们需要为玩家对象选择一个根节点。一般而言，场景的根节点应该反映对象所"
"需的功能——对象\\ *是什么*\\ 。单击“其他节点”按钮并将 :ref:"
"`Area2D<class_Area2D>` 节点添加到场景中。"

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot 将在场景树中的节点旁边显示警告图标。你现在可以忽略它。我们稍后再谈。"

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"使用 ``Area2D`` 可以检测到与玩家重叠或进入玩家内的物体. 通过双击节点名称将其"
"名称更改为 ``Player``. 我们已经设置好了场景的根节点, 现在可以向该角色中添加其"
"他节点来增加功能."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"在将任何子级添加到 ``Player`` 节点之前，我们要确保不会通过点击它们而意外地移"
"动它们或调整其大小。请选中该节点，然后点击锁右侧的图标；它的工具提示显示“确保"
"对象的子级不可选择”。"

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"保存场景。点击“场景 -> 保存”，或者在 Windows/Linux 平台上按下 :kbd:"
"`Ctrl+S`\\ ，在 macOS 上按下 :kbd:`Cmd+S`\\ 。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "对于此项目，我们将遵循 Godot 的命名约定。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**\\ ：类（节点）使用 PascalCase（大驼峰命名法），变量和函数使用 "
"snake_case（蛇形命名法），常量使用 ALL_CAPS（全大写）（请参阅 :ref:"
"`doc_gdscript_styleguide`\\ ）。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**\\ ：类、导出变量和方法使用 PascalCase（大驼峰命名法），私有字段使用 "
"_camelCase（前缀下划线的小驼峰命名法），局部变量和参数使用 camelCase（小驼峰"
"命名法）（请参阅 :ref:`doc_c_sharp_styleguide`\\ ）。连接信号时，请务必准确键"
"入方法名称。"

msgid "Sprite animation"
msgstr "精灵动画"

msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"点击 ``Player`` 节点并添加一个 :ref:`AnimatedSprite <class_AnimatedSprite>` "
"节点作为子节点。\\ ``AnimatedSprite`` 将处理我们玩家的外观和动画。请注意，节"
"点旁边有一个警告符号。\\ ``AnimatedSprite`` 需要一个 :ref:`SpriteFrames "
"<class_SpriteFrames>` 资源，是一个可显示的动画列表。要创建它，在“检查器”面板"
"中找到 ``Frames`` 属性，然后点击“[空]”->“新建 SpriteFrames”。再次点击来打开 "
"``动画帧`` 面板："

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"左边是一个动画列表。点击“defalult”动画并将其重命名为“walk”。然后点击“新建动"
"画”按钮，创建另一个名为“up”的动画。在“文件系统”选项卡中找到玩家图像——它们应该"
"在你之前解压的 ``art`` 文件夹中。将每个动画的两张图像，\\ "
"``playerGrey_up[1/2]`` 和 ``playerGrey_walk[1/2]``\\ ，拖到对应动画的面板"
"的“动画帧”处："

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"玩家图像对于游戏窗口来说有点太大，所以我们需要缩小它们。点击 "
"``AnimatedSprite`` 节点并将 ``Scale`` 属性设置为 ``(0.5, 0.5)``\\ 。你可以"
"在“检查器”面板中的 ``Node2D`` 标题下找到它。"

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"最后，添加一个 :ref:`CollisionShape2D <class_CollisionShape2D>` 作为 "
"``Player`` 的子项。它会决定玩家的“攻击框”（Hitbox），也就是碰撞区域的范围。对"
"于这个角色而言，最合适的是 ``CapsuleShape2D`` 节点，那么请在“检查"
"器”的“Shape”旁，单击“[空]” -> “新建 CapsuleShape2D”。调整两个大小句柄，让形状"
"覆盖住整个精灵："

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完成后, 你的 ``Player`` 场景看起来应该像这样:"

msgid "Make sure to save the scene again after these changes."
msgstr "修改完成后请确保再次保存场景."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"在下一部分中，我们将向玩家节点添加一个脚本，以移动它并为其添加动画效果。然"
"后，我们将设置碰撞检测，以了解玩家何时被某些东西击中。"

msgid "Translation status"
msgstr "翻译状态"
