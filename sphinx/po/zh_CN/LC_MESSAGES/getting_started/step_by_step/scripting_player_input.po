# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Listening to player input"
msgstr "监听玩家的输入"

msgid ""
"Building upon the previous lesson :ref:`doc_scripting_first_script`, let's "
"look at another important feature of any game: giving control to the player. "
"To add this, we need to modify our ``Sprite.gd`` code."
msgstr ""
"在上一课 :ref:`doc_scripting_first_script` 的基础上，让我们看看任何游戏的另一"
"个重要特征：将控制权交给玩家。为了增加这一点，我们需要修改 ``Sprite.gd`` 的代"
"码。"

msgid "You have two main tools to process the player's input in Godot:"
msgstr "在 Godot 中，你有两个主要工具来处理玩家的输入："

msgid ""
"The built-in input callbacks, mainly ``_unhandled_input()``. Like "
"``_process()``, it's a built-in virtual function that Godot calls every time "
"the player presses a key. It's the tool you want to use to react to events "
"that don't happen every frame, like pressing :kbd:`Space` to jump. To learn "
"more about input callbacks, see :ref:`doc_inputevent`."
msgstr ""
"内置的输入回调，主要是 ``_unhandled_input()``\\ 。像 ``_process()``\\ ，它是"
"一个内置的虚函数，Godot 每次在玩家按下一个键时都会调用。它是你想用来对那些不"
"是每一帧都发生的事件做出反应的工具，比如按 :kbd:`Space` 来跳跃。要了解更多关"
"于输入回调的信息，请参阅 :ref:`doc_inputevent` 。"

msgid ""
"The ``Input`` singleton. A singleton is a globally accessible object. Godot "
"provides access to several in scripts. It's the right tool to check for "
"input every frame."
msgstr ""
"``Input`` 单例。单例是一个全局可访问的对象。Godot 在脚本中提供对几个对象的访"
"问。它是每一帧检查输入的有效工具。"

msgid ""
"We're going to use the ``Input`` singleton here as we need to know if the "
"player wants to turn or move every frame."
msgstr ""
"我们这里将使用 ``Input`` 单例，因为我们需要知道在每一帧中玩家是否想转身或者移"
"动。"

msgid ""
"For turning, we should use a new variable: ``direction``. In our "
"``_process()`` function, replace the ``rotation += angular_speed * delta`` "
"line with the code below."
msgstr ""
"对于转弯，我们应该使用一个新的变量：\\ ``direction``\\ 。在我们的 "
"``_process()`` 函数中，将 ``rotation += angular_speed * delta`` 替换成以下代"
"码。"

msgid ""
"Our ``direction`` local variable is a multiplier representing the direction "
"in which the player wants to turn. A value of ``0`` means the player isn't "
"pressing the left or the right arrow key. A value of ``1`` means the player "
"wants to turn right, and ``-1`` means they want to turn left."
msgstr ""
"我们的 ``direction`` 局部变量是一个乘数，代表玩家想要转向的方向。\\ ``0`` 的"
"值表示玩家没有按左或右方向键。\\ ``1`` 表示玩家想向右转，而 ``-1`` 表示他们想"
"向左转。"

msgid ""
"To produce these values, we introduce conditions and the use of ``Input``. A "
"condition starts with the ``if`` keyword in GDScript and ends with a colon. "
"The condition is the expression between the keyword and the end of the line."
msgstr ""
"为了产生这些值，我们引入了条件和 ``Input`` 的使用。条件以 GDScript 中的 "
"``if`` 关键字开始，以冒号结束。条件是关键字和行末之间的表达式。"

msgid ""
"To check if a key was pressed this frame, we call ``Input."
"is_action_pressed()``. The method takes a text string representing an input "
"action and returns ``true`` if the action is pressed, ``false`` otherwise."
msgstr ""
"为了检查当前帧玩家是否按下了某个键，我们需要调用 ``Input."
"is_action_pressed()``\\ 。这个方法使用一个字符串来表示一个输入动作。当该按键"
"被按下时，函数返回 ``true``\\ ，否则这个函数将返回 ``false``\\ 。"

msgid ""
"The two actions we use above, \"ui_left\" and \"ui_right\", are predefined "
"in every Godot project. They respectively trigger when the player presses "
"the left and right arrows on the keyboard or left and right on a gamepad's D-"
"pad."
msgstr ""
"上面我们使用的两个动作，“ui_left”和“ui_right”，是每个 Godot 项目中预定义的。"
"它们分别在玩家按键盘上的左右箭头或游戏手柄上的左右键时触发。"

msgid ""
"You can see and edit input actions in your project by going to Project -> "
"Project Settings and clicking on the Input Map tab."
msgstr ""
"打开“项目 -> 项目设置”并点击“输入映射”选项卡，就可以查看并编辑项目中的输入动"
"作。"

msgid ""
"Finally, we use the ``direction`` as a multiplier when we update the node's "
"``rotation``: ``rotation += angular_speed * direction * delta``."
msgstr ""
"最后，当我们更新节点的 ``rotation`` 时，我们使用 ``direction`` 作为乘数：\\ "
"``rotation += angular_speed * direction * delta``\\ 。"

msgid ""
"If you run the scene with this code, the icon should rotate when you press :"
"kbd:`Left` and :kbd:`Right`."
msgstr ""
"如果你用这段代码运行场景，当你按下 :kbd:`左方向键` 和 :kbd:`右方向键` 时，图"
"标应该会旋转。"

msgid "Moving when pressing \"up\""
msgstr "按“上”时移动"

msgid ""
"To only move when pressing a key, we need to modify the code that calculates "
"the velocity. Replace the line starting with ``var velocity`` with the code "
"below."
msgstr ""
"为了只在按下一个键时移动，我们需要修改计算速度的代码。用下面的代码替换以 "
"``var velocity`` 开始的一行。"

msgid ""
"We initialize the ``velocity`` with a value of ``Vector2.ZERO``, another "
"constant of the built-in ``Vector`` type representing a 2D vector of length "
"0."
msgstr ""
"我们将 ``velocity`` 的值初始化为 ``Vector2.ZERO``\\ ，这是内置 ``Vector`` 类"
"型的一个常量，代表长度为 0 的二维向量。"

msgid ""
"If the player presses the \"ui_up\" action, we then update the velocity's "
"value, causing the sprite to move forward."
msgstr "如果玩家按下“ui_up”动作，我们就会更新速度的值，使精灵向前移动。"

msgid "Complete script"
msgstr "完整脚本"

msgid "Here is the complete ``Sprite.gd`` file for reference."
msgstr "这是完整的 ``Sprite.gd`` 文件，仅供参考。"

msgid ""
"If you run the scene, you should now be able to rotate with the left and "
"right arrow keys and move forward by pressing :kbd:`Up`."
msgstr ""
"如果你运行这个场景，你现在应该能够用左右方向键进行旋转，并通过按 :kbd:`Up` 向"
"前移动。"

msgid "Summary"
msgstr "总结"

msgid ""
"In summary, every script in Godot represents a class and extends one of the "
"engine's built-in classes. The node types your classes inherit from give you "
"access to properties like ``rotation`` and ``position`` in our sprite's "
"case. You also inherit many functions, which we didn't get to use in this "
"example."
msgstr ""
"总之，Godot中的每个脚本都代表一个类，并扩展了引擎的一个内置类。在我们sprite的"
"例子中，你的类所继承的节点类型可以让你访问一些属性，如 ``rotation`` 和 "
"``position`` 。你还继承了许多函数，但我们在这个例子中没有使用这些函数。"

msgid ""
"In GDScript, the variables you put at the top of the file are your class's "
"properties, also called member variables. Besides variables, you can define "
"functions, which, for the most part, will be your classes' methods."
msgstr ""
"在 GDScript 中，放在文件顶部的变量是类的属性，也称为成员变量。除了变量之外，"
"您还可以定义函数，在大多数情况下，这些函数将是类的方法。"

msgid ""
"Godot provides several virtual functions you can define to connect your "
"class with the engine. These include ``_process()``, to apply changes to the "
"node every frame, and ``_unhandled_input()``, to receive input events like "
"key and button presses from the users. There are quite a few more."
msgstr ""
"Godot 提供了几个虚函数，您可以定义这些函数来将类与引擎连接起来。其中包括 "
"``_process()`` ，用于每帧将更改应用于节点，以及 ``_unhandled_input()`` ，用于"
"接收用户的输入事件，如按键和按钮。还有很多。"

msgid ""
"The ``Input`` singleton allows you to react to the players' input anywhere "
"in your code. In particular, you'll get to use it in the ``_process()`` loop."
msgstr ""
"``Input`` 单例允许您在代码中的任何位置对玩家的输入做出反应。 尤其是，你在 "
"``_process()`` 循环中使用它。"

msgid ""
"In the next lesson :ref:`doc_signals`, we'll build upon the relationship "
"between scripts and nodes by having our nodes trigger code in scripts."
msgstr ""
"在下一课 :ref:`doc_signals` 中，我们会让节点触发脚本中的代码，让脚本和代码之"
"间产生联系。"

msgid "Translation status"
msgstr "翻译状态"
