# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "创建实例"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""
"上一部分中，我们了解到场景是一系列组织成树状结构的节点，其中只有一个节点是根"
"节点。你可以将项目拆分成任意数量的场景。这一特性可以帮你将游戏拆解成不同的组"
"件，并进行组织。"

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""
"你可以创建任意数量的场景，保存成扩展名为 ``.tscn`` 的文件，表示“text "
"scene”（文本场景）。上节课的 ``Label.tscn`` 文件就是一个例子。我们把这些文件"
"叫作“打包场景”（Packed Scene），因为它们将场景的内容信息进行了打包。"

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""
"这是一个小球的例子。它由以下内容组成：一个叫“Ball”的 :ref:`RigidBody2D "
"<class_RigidBody2D>` 节点是根节点，可以让小球下落、在撞墙后反弹，一个 :ref:"
"`Sprite <class_Sprite>` 节点，以及一个 :ref:`CollisionShape2D "
"<class_CollisionShape2D>`\\ 。"

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""
"保存场景过后，这个场景就可以作为蓝图使用：你可以在其他场景中进行任意数量的翻"
"制。将对象根据模板进行翻制的这一过程就叫作\\ **实例化**\\ 。"

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""
"我们在上一部分提到过，实例化场景的行为与节点类似：编辑器默认会隐藏其中的内"
"容。实例化 Ball 之后，你只会看到 Ball 节点。请注意制作出的副本，名字是唯一"
"的。"

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""
"Ball 场景的实例最开始都和 ``Ball.tscn`` 有相同的结构和属性。不过你也可以单独"
"修改各个实例，比如修改反弹的方式、重量等源场景所暴露的属性。"

msgid "In practice"
msgstr "实践"

msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: :download:"
"`instancing.zip <files/instancing.zip>`."
msgstr ""
"让我们来实践一下实例化，看看到底在 Godot 里是如何使用的。我们为您准备了小球的"
"示例项目，欢迎下载：\\ :download:`instancing.zip <files/instancing.zip>`\\ 。"

msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""
"将压缩包解压到电脑上。然后打开 Godot，在项目管理器中点击“导入”按钮来导入这个"
"项目。"

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr "在弹出框中点击浏览按钮，定位到刚才解压的文件夹。"

msgid "Double-click the ``project.godot`` file to open it."
msgstr "双击打开 ``project.godot`` 文件。"

msgid "Finally, click the Import & Edit button."
msgstr "最后点击“导入并编辑”按钮。"

msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""
"这个项目里包含两个打包场景：\\ ``Main.tscn``\\ ，包含了小球会碰撞的墙体，以"
"及 ``Ball.tscn``\\ 。应该会自动打开 Main 场景。"

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""
"让我们为 Main 节点添加一个小球作为子节点。在“场景”面板中，选择 Main 节点。然"
"后点击场景面板顶部的链接图标。这个按钮的作用是为当前选中节点添加另一个场景的"
"实例作为子节点。"

msgid "Double-click the ball scene to instance it."
msgstr "双击小球场景来实例化。"

msgid "The ball appears in the top-left corner of the viewport."
msgstr "小球会出现在视口的左上角。"

msgid "Click on it and drag it towards the center of the view."
msgstr "点击它，然后拖拽到视图的中心。"

msgid "Play the game by pressing F5. You should see it fall."
msgstr "按 F5 运行游戏。你应该会看到它往下掉。"

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""
"现在我们希望创建更多的 Ball 节点实例。保持小球仍处于选中的状态，按下 :kbd:"
"`Ctrl-D`\\ （macOS 则是 :kbd:`Cmd-D`\\ ）调用制作副本命令。点击并将新的小球拖"
"到别的位置。"

msgid "You can repeat this process until you have several in the scene."
msgstr "你可以重复这个过程在场景中多建几个。"

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""
"再次运行游戏。现在你应该看到每个小球都各自下落。这就是实例的作用。每一个都是"
"模板场景的独立副本。"

msgid "Editing scenes and instances"
msgstr "编辑场景和实例"

msgid "There is more to instances. With this feature, you can:"
msgstr "实例还有很多用法。使用这个特性，你可以："

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr "使用“检查器”修改一个小球的属性，不影响其他实例。"

msgid ""
"Change the default properties of every Ball by opening the ``Ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""
"打开 ``Ball.tscn`` 场景修改 Ball 节点，从而修改所有 Ball 的默认属性。在保存"
"时，项目中所有 Ball 的实例都会受到更新。"

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr "修改实例上的属性总是会覆盖对应打包场景中的值。"

msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""
"让我们来试一试。打开 ``Ball.tscn`` 然后选中 Ball 节点。在右侧的“检查器”中，点"
"击展开 PhysicsMaterial 属性。"

msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""
"将其 Bounce（弹力）属性设为 ``2``\\ ，只要点击对应的数字字段、输入 ``2``\\ 、"
"然后按 :kbd:`Enter` 就可以了。"

msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""
"按 :kbd:`F5` 运行游戏，请注意所有的小球都更有弹性了。因为 Ball 场景是所有实例"
"的模板，对它进行修改并保存，就会导致所有实例同时进行更新。"

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr "现在让我们来调整单个实例。点击视口上方的对应选项卡回到 Main 场景。"

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""
"选择一个 Ball 实例节点，然后“检查器”中将 Gravity Scale（重力缩放）设为 "
"``10``\\ 。"

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr "在被调整过的属性旁边就会多一个灰色的“复原”按钮。"

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"这个图标表示你覆盖了源打包场景中的值。即使你修改了原始场景中的这个属性，这个"
"覆盖后的值也还是会保留在这个实例中。点击复原图标会将属性恢复成保存场景中的"
"值。"

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr "重新运行游戏，请注意这个小球会比其他小球落得快得多。"

msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""
"如果你修改了一个实例中的 ``PhysicsMaterial``\\ ，那么就会影响到其他所有实例。"
"这是因为 ``PhysicsMaterial`` 是一个资源，而资源是跨实例共享的。要让某个实例的"
"资源唯一，请在“检查器”中对其右键，然后选择弹出菜单中的“唯一化”。"

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr "资源也是 Godot 游戏的关键组件，我们会在后续课程中介绍。"

msgid "Scene instances as a design language"
msgstr "作为设计语言的场景实例"

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""
"Godot中的实例和场景提供了一种优秀的设计语言，使该引擎与其他引擎不同。我们从一"
"开始就围绕这个概念设计Godot。"

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""
"我们建议在使用 Godot 制作游戏时忽略架构代码模式，例如模型-视图-控制器 "
"（MVC） 或实体关系图。相反，你可以从想象玩家将在游戏中看到的元素开始，并围绕"
"它们构建代码。"

msgid "For example, you could break down a shooter game like so:"
msgstr "例如，你可以这样拆解一个射击游戏："

msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"对于几乎任何类型的游戏，都可以想出这样的图表。矩形表示的是从玩家角度可以在游"
"戏中看到的实体，箭头表示的是场景之间的从属关系。"

msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"在得到这样的图之后，建议你为其中的每一个元素都创建一个场景。而无论是通过代码"
"还是直接通过编辑器来创建场景树，你都将会用到实例化的方法。"

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"程序员们乐于花费大量时间来设计抽象的架构，尽力使得组件能够适用于这个架构。基"
"于场景的设计取代了这种方法，使得开发更快、更直接，能够让你去专注于游戏逻辑本"
"身。因为大多数游戏的组件都是直接映射成一个场景，所以使用基于场景实例化的设计"
"意味着需要很少的其他架构代码。"

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"这里是另一个更复杂的开放世界类游戏的示例，这个示例包括有很多资产和嵌套元素："

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""
"想象一下，我们从创建房间开始。我们可以制作几个不同的房间场景，在其中有独特的"
"家具安排。后来，我们可以制作一个房屋场景，在内部使用多个房间实例。我们将用许"
"多实例化的房子和一个大的地形来创建一个城堡，我们将把城堡放在这个地形上。每一"
"个场景都将是一个或多个子场景的实例。"

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"之后，我们可以创建代表守卫的场景，将它们加到城堡之中。也就会间接地加到了游戏"
"世界里。"

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"使用 Godot，就可以很容易地像这样迭代你的游戏，因为你需要做的就是创建并实例化"
"更多的场景。我们将编辑器设计成了易于程序员、设计师、艺术家使用的形式。一个典"
"型的团队开发过程会涉及 2D 或 3D 美术、关卡设计师、游戏设计师、动画师等，他们"
"都可以用 Godot 编辑器工作。"

msgid "Summary"
msgstr "总结"

msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr "实例化，从蓝图生成对象的过程有许多方便的用途。通过场景，它为您提供："

msgid "The ability to divide your game into reusable components."
msgstr "能将你的游戏分离成可以重复利用的组件。"

msgid "A tool to structure and encapsulate complex systems."
msgstr "一个构建和封装复杂系统的工具。"

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr "一种以自然方式思考游戏项目结构的语言。"

msgid "Translation status"
msgstr "翻译状态"
