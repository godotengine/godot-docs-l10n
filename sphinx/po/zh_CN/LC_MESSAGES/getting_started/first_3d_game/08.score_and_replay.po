# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Score and replay"
msgstr "分数与重玩"

msgid ""
"In this part, we'll add the score, music playback, and the ability to "
"restart the game."
msgstr "在这一部分中，我们会添加计分、播放音乐、重启游戏的能力。"

msgid ""
"We have to keep track of the current score in a variable and display it on "
"screen using a minimal interface. We will use a text label to do that."
msgstr ""
"我们要用一个变量来记录当前的分数，使用最简的界面在屏幕上显示。我们会用文本标"
"签来实现。"

msgid ""
"In the main scene, add a new *Control* node as a child of *Main* and name it "
"*UserInterface*. You will automatically be taken to the 2D screen, where you "
"can edit your User Interface (UI)."
msgstr ""
"在主场景中，添加一个新的 *Control* 节点作为 *Main* 的子项，命名为 "
"*UserInterface*\\ 。你会被自动切换到 2D 屏幕，可以在这里编辑你的用户界面 "
"User Interface（UI）。"

msgid "Add a *Label* node and rename it to *ScoreLabel*."
msgstr "添加一个 *Label* 节点并重命名为 *ScoreLabel*\\ 。"

msgid "|image0|"
msgstr "|image0|"

msgid "image0"
msgstr "image0"

msgid ""
"In the *Inspector*, set the *Label*'s *Text* to a placeholder like \"Score: "
"0\"."
msgstr ""
"在\\ *检查器*\\ 中将该 *Label* 的 *Text* 设为类似“Score: 0”的占位内容。"

msgid "|image1|"
msgstr "|image1|"

msgid "image1"
msgstr "image1"

msgid ""
"Also, the text is white by default, like our game's background. We need to "
"change its color to see it at runtime."
msgstr ""
"并且，文本默认是白色的，和我们的游戏背景一样。我们需要修改它的颜色，才能在运"
"行时看到。"

msgid ""
"Scroll down to *Theme Overrides*, and expand *Colors* and click the black "
"box next to *Font Color* to tint the text."
msgstr ""
"向下滚动到 *Theme Overrides*\\ （主题覆盖）然后展开 *Colors*\\ （颜色）并点"
"击 *Font Color*\\ （字体颜色）旁边的黑框来为文字着色。"

msgid "|image2|"
msgstr "|image2|"

msgid "image2"
msgstr "image2"

msgid "Pick a dark tone so it contrasts well with the 3D scene."
msgstr "选择一个暗色调，与 3D 场景形成对比。"

msgid "|image3|"
msgstr "|image3|"

msgid "image3"
msgstr "image3"

msgid ""
"Finally, click and drag on the text in the viewport to move it away from the "
"top-left corner."
msgstr "最后单击视口中的文本，将其拖离左上角。"

msgid "|image4|"
msgstr "|image4|"

msgid "image4"
msgstr "image4"

msgid ""
"The *UserInterface* node allows us to group our UI in a branch of the scene "
"tree and use a theme resource that will propagate to all its children. We'll "
"use it to set our game's font."
msgstr ""
"*UserInterface* 节点让我们可以将 UI 组合到场景树的一个分支上，并且也让主题资"
"源能够传播到它的所有子节点上。我们将会用它来设置游戏的字体。"

msgid "Creating a UI theme"
msgstr "创建 UI 主题"

msgid ""
"Once again, select the *UserInterface* node. In the *Inspector*, create a "
"new theme resource in *Theme -> Theme*."
msgstr ""
"再次选中 *UserInterface* 节点。在\\ *检查器*\\ 中为 *Theme -> Theme* 创建一个"
"新的主题资源。"

msgid "|image5|"
msgstr "|image5|"

msgid "image5"
msgstr "image5"

msgid ""
"Click on it to open the theme editor In the bottom panel. It gives you a "
"preview of how all the built-in UI widgets will look with your theme "
"resource."
msgstr ""
"单击这个资源就会在底部面板中打开主题编辑器。会展示使用你的主题资源时内置 UI "
"控件的外观。"

msgid "|image6|"
msgstr "|image6|"

msgid "image6"
msgstr "image6"

msgid "By default, a theme only has one property, the *Default Font*."
msgstr "默认情况下，主题只有一个属性，\\ *Default Font*\\ （默认字体）。"

msgid ""
"You can add more properties to the theme resource to design complex user "
"interfaces, but that is beyond the scope of this series. To learn more about "
"creating and editing themes, see :ref:`doc_gui_skinning`."
msgstr ""
"你可以为主题资源添加更多属性，从而设计更复杂的用户界面，不过这就超出本系列的"
"范畴了。要学习主题的创建和编辑，请参阅 :ref:`doc_gui_skinning`\\ 。"

msgid "Click the *Default Font* property and create a new *DynamicFont*."
msgstr ""
"单击 *Default Font*\\ （默认字体）属性，创建一个新的 *DynamicFont*\\ 。"

msgid "|image7|"
msgstr "|image7|"

msgid "image7"
msgstr "image7"

msgid ""
"Expand the *DynamicFont* by clicking on it and expand its *Font* section. "
"There, you will see an empty *Font Data* field."
msgstr ""
"单击展开 *DynamicFont*\\ ，然后展开 *Font*\\ （字体）部分。在这里你会看到一个"
"空的 *Font Data*\\ （字体数据）字段。"

msgid "|image8|"
msgstr "|image8|"

msgid "image8"
msgstr "image8"

msgid ""
"This one expects a font file like the ones you have on your computer. "
"DynamicFont supports the following formats:"
msgstr ""
"这里需要的是一个字体文件，就是你电脑上用的那种。DynamicFont 支持以下格式："

msgid "TrueType (``.ttf``)"
msgstr "TrueType（\\ ``.ttf``\\ ）"

msgid "OpenType (``.otf``)"
msgstr "OpenType（\\ ``.otf``\\ ）"

msgid "Web Open Font Format 1 (``.woff``)"
msgstr "Web 开放字体格式 1（\\ ``.woff``\\ ）"

msgid "Web Open Font Format 2 (``.woff2``, since Godot 3.5)"
msgstr "Web 开放字体格式 2（\\ ``.woff2``\\ ，从 Godot 3.5 开始支持）"

msgid ""
"In the *FileSystem* dock, expand the ``fonts`` directory and click and drag "
"the ``Montserrat-Medium.ttf`` file we included in the project onto the *Font "
"Data*. The text will reappear in the theme preview."
msgstr ""
"在\\ *文件系统*\\ 面板中，展开 ``fonts`` 目录，单击我们包含在项目里的 "
"``Montserrat-Medium.ttf`` 文件并将其拖放到 *Font Data* 上。文本就又会出现在主"
"题预览中了。"

msgid ""
"The text is a bit small. Set the *Settings -> Size* to ``22`` pixels to "
"increase the text's size."
msgstr ""
"文本有一点小。将 *Settings -> Size* 设置为 ``22`` 像素即可增大文本的大小。"

msgid "|image9|"
msgstr "|image9|"

msgid "image9"
msgstr "image9"

msgid "Keeping track of the score"
msgstr "跟踪得分"

msgid ""
"Let's work on the score next. Attach a new script to the *ScoreLabel* and "
"define the ``score`` variable."
msgstr ""
"我们下一步是进行计分。为 *ScoreLabel* 附加一个新的脚本，并在其中定义 "
"``score``\\ （分数）变量。"

msgid ""
"The score should increase by ``1`` every time we squash a monster. We can "
"use their ``squashed`` signal to know when that happens. However, as we "
"instantiate monsters from the code, we cannot do the connection in the "
"editor."
msgstr ""
"每踩扁一只怪物，这个分数就应该加 ``1``\\ 。我们可以使用它们的 ``squashed`` 信"
"号来得知发生的时间。不过，因为我们是用代码实例化的怪物，我们无法在编辑器中连"
"接信号。"

msgid ""
"Instead, we have to make the connection from the code every time we spawn a "
"monster."
msgstr "不过，我们可以在每次生成一只怪物时通过代码来进行连接。"

msgid ""
"Open the script ``Main.gd``. If it's still open, you can click on its name "
"in the script editor's left column."
msgstr ""
"打开 ``Main.gd`` 脚本。如果它还开着，你可以在脚本编辑器左栏中点击它的名字。"

msgid "|image10|"
msgstr "|image10|"

msgid "image10"
msgstr "image10"

msgid ""
"Alternatively, you can double-click the ``Main.gd`` file in the *FileSystem* "
"dock."
msgstr "或者，你也可以在\\ *文件系统*\\ 面板中双击 ``Main.gd`` 文件。"

msgid ""
"At the bottom of the ``_on_MobTimer_timeout()`` function, add the following "
"line."
msgstr "在 ``_on_MobTimer_timeout()`` 函数的最后添加下面这一行代码。"

msgid ""
"This line means that when the mob emits the ``squashed`` signal, the "
"*ScoreLabel* node will receive it and call the function "
"``_on_Mob_squashed()``."
msgstr ""
"这一行的意思是，当小怪发出 ``squashed`` 信号时，\\ *ScoreLabel* 节点就会接收"
"到并调用 ``_on_Mob_squashed()`` 函数。"

msgid ""
"Head back to the ``ScoreLabel.gd`` script to define the "
"``_on_Mob_squashed()`` callback function."
msgstr "回到 ``ScoreLabel.gd`` 脚本，定义回调函数 ``_on_Mob_squashed()``\\ 。"

msgid "There, we increment the score and update the displayed text."
msgstr "这里我们将进行加分并更新显示的文本。"

msgid ""
"The second line uses the value of the ``score`` variable to replace the "
"placeholder ``%s``. When using this feature, Godot automatically converts "
"values to text, which is convenient to output text in labels or using the "
"``print()`` function."
msgstr ""
"第二行用 ``score`` 变量的值替换占位符 ``%s``\\ 。使用此功能时，Godot 会自动将"
"值转换为文本，用来向标签中输出文本或者使用 ``print()`` 函数非常方便。"

msgid ""
"You can learn more about string formatting here: :ref:`doc_gdscript_printf`."
msgstr ""
"你可以在这里了解更多关于字符串格式化的内容：\\ :ref:"
"`doc_gdscript_printf`\\ 。"

msgid ""
"You can now play the game and squash a few enemies to see the score increase."
msgstr "你现在可以玩游戏，压死几个敌人，看看分数的增长。"

msgid "|image11|"
msgstr "|image11|"

msgid "image11"
msgstr "image11"

msgid ""
"In a complex game, you may want to completely separate your user interface "
"from the game world. In that case, you would not keep track of the score on "
"the label. Instead, you may want to store it in a separate, dedicated "
"object. But when prototyping or when your project is simple, it is fine to "
"keep your code simple. Programming is always a balancing act."
msgstr ""
"在一个复杂的游戏中，你可能想把你的用户界面与游戏世界完全分开。在这种情况下，"
"你就不会在标签上记录分数了。相反，你可能想把它存储在一个单独的、专门的对象"
"中。但当原型设计或你的项目很简单时，保持你的代码简单就可以了。编程总是一种平"
"衡的行为。"

msgid "Retrying the game"
msgstr "重玩游戏"

msgid ""
"We'll now add the ability to play again after dying. When the player dies, "
"we'll display a message on the screen and wait for input."
msgstr ""
"我们现在就要添加死亡后重玩的能力。玩家死亡后，我们会在屏幕上现实一条消息并等"
"待输入。"

msgid ""
"Head back to the *Main* scene, select the *UserInterface* node, add a "
"*ColorRect* node as a child of it and name it *Retry*. This node fills a "
"rectangle with a uniform color and will serve as an overlay to darken the "
"screen."
msgstr ""
"回到 *Main* 场景，选中 *UserInterface* 节点，添加 *ColorRect* 节点作为其子项"
"并命名为 *Retry*\\ （重试）。该节点会使用单一色彩填充矩形，我们用它来覆盖画"
"面，达到变暗的效果。"

msgid ""
"To make it span over the whole viewport, you can use the *Layout* menu in "
"the toolbar."
msgstr "你可以使用工具栏上的\\ *布局*\\ 菜单来让它覆盖整个视口。"

msgid "|image12|"
msgstr "|image12|"

msgid "image12"
msgstr "image12"

msgid "Open it and apply the *Full Rect* command."
msgstr "点击打开，并应用\\ *整个矩形*\\ 命令。"

msgid "|image13|"
msgstr "|image13|"

msgid "image13"
msgstr "image13"

msgid ""
"Nothing happens. Well, almost nothing: only the four green pins move to the "
"corners of the selection box."
msgstr ""
"什么都没发生。好吧，是几乎什么都没有：只有四个绿色的大头针移动到了选择框的四"
"个角落。"

msgid "|image14|"
msgstr "|image14|"

msgid "image14"
msgstr "image14"

msgid ""
"This is because UI nodes (all the ones with a green icon) work with anchors "
"and margins relative to their parent's bounding box. Here, the "
"*UserInterface* node has a small size and the *Retry* one is limited by it."
msgstr ""
"这是因为 UI 节点（图标都是绿色）使用的是锚点和边距，它们都相对于它们父节点包"
"围框。这里的 *UserInterface* 节点比较小，所以 *Retry* 会受限于它。"

msgid ""
"Select the *UserInterface* and apply *Layout -> Full Rect* to it as well. "
"The *Retry* node should now span the whole viewport."
msgstr ""
"选中 *UserInterface* 然后也对其使用\\ *布局 -> 整个矩形*\\ 。\\ *Retry* 节点"
"就应该覆盖整个视口了。"

msgid ""
"Let's change its color so it darkens the game area. Select *Retry* and in "
"the *Inspector*, set its *Color* to something both dark and transparent. To "
"do so, in the color picker, drag the *A* slider to the left. It controls the "
"color's alpha channel, that is to say, its opacity."
msgstr ""
"让我们修改它的颜色，把游戏区域变暗。选中 *Retry*\\ ，在\\ *检查器*\\ 中将 "
"*Color*\\ （颜色）设置为透明的暗色。要实现整个效果，可以在取色器中将 *A* 滑动"
"条拖到左边。它控制的是颜色的 Alpha 通道，也就是不透明度。"

msgid "|image15|"
msgstr "|image15|"

msgid "image15"
msgstr "image15"

msgid ""
"Next, add a *Label* as a child of *Retry* and give it the *Text* \"Press "
"Enter to retry.\""
msgstr ""
"接下来，添加一个 *Label* 作为 *Retry* 的子项，将其 *Text* 设为“Press Enter "
"to retry.”（按回车键重试。）"

msgid "|image16|"
msgstr "|image16|"

msgid "image16"
msgstr "image16"

msgid ""
"To move it and anchor it in the center of the screen, apply *Layout -> "
"Center* to it."
msgstr "要将其移动并锚定到屏幕中央，请对其使用\\ *局部 -> 居中*\\ 。"

msgid "|image17|"
msgstr "|image17|"

msgid "image17"
msgstr "image17"

msgid "Coding the retry option"
msgstr "编写重试选项"

msgid ""
"We can now head to the code to show and hide the *Retry* node when the "
"player dies and plays again."
msgstr "我们现在就可以去编写代码，在玩家死亡时显示 *Retry* 节点，重玩时隐藏。"

msgid ""
"Open the script ``Main.gd``. First, we want to hide the overlay at the start "
"of the game. Add this line to the ``_ready()`` function."
msgstr ""
"打开 ``Main.gd`` 脚本。首先。我们想要在游戏开始时隐藏覆盖层。将这一行加到 "
"``_ready()`` 函数中。"

msgid "Then, when the player gets hit, we show the overlay."
msgstr "然后在玩家受到攻击时，我们就显示这个覆盖层。"

msgid ""
"Finally, when the *Retry* node is visible, we need to listen to the player's "
"input and restart the game if they press enter. To do this, we use the built-"
"in ``_unhandled_input()`` callback."
msgstr ""
"最后，当 *Retry* 节点可见时，我们需要监听玩家的输入，按下回车键时让游戏重启。"
"可以使用内置的 ``_unhandled_input()`` 回调来实现。"

msgid ""
"If the player pressed the predefined ``ui_accept`` input action and *Retry* "
"is visible, we reload the current scene."
msgstr ""
"如果玩家按下了预设的 ``ui_accept`` 输入动作并且 *Retry* 是可见状态，我们就重"
"新加载当前场景。"

msgid ""
"The function ``get_tree()`` gives us access to the global :ref:`SceneTree "
"<class_SceneTree>` object, which allows us to reload and restart the current "
"scene."
msgstr ""
"我们可以通过 ``get_tree()`` 函数访问全局 :ref:`SceneTree <class_SceneTree>` "
"对象，然后用它来重新加载并重启当前场景。"

msgid "Adding music"
msgstr "添加音乐"

msgid ""
"To add music that plays continuously in the background, we're going to use "
"another feature in Godot: :ref:`autoloads <doc_singletons_autoload>`."
msgstr ""
"要添加音乐，让音乐在后台连续播放，我们就要用到 Godot 的另一项特性：\\ :ref:`"
"自动加载 <doc_singletons_autoload>`\\ 。"

msgid ""
"To play audio, all you need to do is add an *AudioStreamPlayer* node to your "
"scene and attach an audio file to it. When you start the scene, it can play "
"automatically. However, when you reload the scene, like we do to play again, "
"the audio nodes are also reset, and the music starts back from the beginning."
msgstr ""
"要播放音频，只需往场景里添加一个 *AudioStreamPlayer* 节点，然后为它附加一个音"
"频文件。启动场景时，就会自动播放。然而，如果重新加载了场景，比如我们在重玩的"
"时候就这么干了，这些音频节点也会被重置，音乐也就会从头开始播放。"

msgid ""
"You can use the autoload feature to have Godot load a node or a scene "
"automatically at the start of the game, outside the current scene. You can "
"also use it to create globally accessible objects."
msgstr ""
"你可以使用自动加载功能来让 Godot 在游戏开始时自动加载节点或场景，不依赖于当前"
"场景。你还可以用它来创建能够全局访问的对象。"

msgid ""
"Create a new scene by going to the *Scene* menu and clicking *New Scene*."
msgstr "在\\ *场景*\\ 菜单中单击\\ *新建场景*\\ 来创建一个新场景。"

msgid "|image18|"
msgstr "|image18|"

msgid "image18"
msgstr "image18"

msgid ""
"Click the *Other Node* button to create an *AudioStreamPlayer* and rename it "
"to *MusicPlayer*."
msgstr ""
"单击\\ *其他节点*\\ 按钮，创建一个 *AudioStreamPlayer* 然后将其重命名为 "
"*MusicPlayer*\\ （音乐播放器）。"

msgid "|image19|"
msgstr "|image19|"

msgid "image19"
msgstr "image19"

msgid ""
"We included a music soundtrack in the ``art/`` directory, ``House In a "
"Forest Loop.ogg``. Click and drag it onto the *Stream* property in the "
"*Inspector*. Also, turn on *Autoplay* so the music plays automatically at "
"the start of the game."
msgstr ""
"我们在 ``art/`` 目录中包含了一条音乐音轨 ``House In a Forest Loop.ogg``\\ 。"
"单击并把它拖放到\\ *检查器*\\ 中的 *Stream*\\ （流）属性上。同时要打开 "
"*Autoplay*\\ ，这样音乐就会在游戏开始时自动播放了。"

msgid "|image20|"
msgstr "|image20|"

msgid "image20"
msgstr "image20"

msgid "Save the scene as ``MusicPlayer.tscn``."
msgstr "将这个场景保存为 ``MusicPlayer.tscn``\\ 。"

msgid ""
"We have to register it as an autoload. Head to the *Project -> Project "
"Settings…* menu and click on the *Autoload* tab."
msgstr ""
"我们需要将其注册为自动加载。前往菜单\\ *项目 -> 项目设置...*\\ ，然后单击\\ *"
"自动加载*\\ 选项卡。"

msgid ""
"In the *Path* field, you want to enter the path to your scene. Click the "
"folder icon to open the file browser and double-click on ``MusicPlayer."
"tscn``. Then, click the *Add* button on the right to register the node."
msgstr ""
"*路径*\\ 输入框中需要输入场景的路径。单击文件夹图标打开文件浏览器，然后双击 "
"``MusicPlayer.tscn``\\ 。接下来，单击右侧的\\ *添加*\\ 按钮，将该节点进行注"
"册。"

msgid "|image21|"
msgstr "|image21|"

msgid "image21"
msgstr "image21"

msgid ""
"If you run the game now, the music will play automatically. And even when "
"you lose and retry, it keeps going."
msgstr ""
"现在再运行游戏，音乐就会自动播放了。而且即便你死了然后重试，它还是会在持续播"
"放。"

msgid ""
"Before we wrap up this lesson, here's a quick look at how it works under the "
"hood. When you run the game, your *Scene* dock changes to give you two tabs: "
"*Remote* and *Local*."
msgstr ""
"在这一节课结束之前，我们来看一下在底层发生了什么。运行游戏时，你的\\ *场景"
"*\\ 面板会多出来两个选项卡：\\ *远程*\\ 和\\ *本地*\\ 。"

msgid "|image22|"
msgstr "|image22|"

msgid "image22"
msgstr "image22"

msgid ""
"The *Remote* tab allows you to visualize the node tree of your running game. "
"There, you will see the *Main* node and everything the scene contains and "
"the instantiated mobs at the bottom."
msgstr ""
"你可以在\\ *远程*\\ 选项卡中查看运行中的游戏的节点树。你会看到 *Main* 节点以"
"及场景中所包含的所有东西，最底部是实例化的小怪。"

msgid "|image23|"
msgstr "|image23|"

msgid "image23"
msgstr "image23"

msgid ""
"At the top are the autoloaded *MusicPlayer* and a *root* node, which is your "
"game's viewport."
msgstr ""
"顶部的是自动加载的 *MusicPlayer* 以及一个 *root* 节点，这是你的游戏的视口。"

msgid ""
"And that does it for this lesson. In the next part, we'll add an animation "
"to make the game both look and feel much nicer."
msgstr "这一节课就是这样。在下一部分，我们会添加动画，让游戏更美观。"

msgid "Here is the complete ``Main.gd`` script for reference."
msgstr "这是一个仅供参考的 ``Main.gd`` 脚本。"

msgid "Translation status"
msgstr "翻译状态"
