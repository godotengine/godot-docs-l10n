# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Player scene and input actions"
msgstr "Player 场景与输入事件"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""
"在接下来的两节课程中，我们将会设计玩家场景、注册自定义输入动作、编写玩家移动"
"代码。在最后，你将会得到一个可以八方向移动的可游玩角色。"

msgid ""
"Create a new scene by going to the Scene menu in the top-left and clicking "
"*New Scene*. Create a *KinematicBody* node as the root and name it *Player*."
msgstr ""
"创建一个新场景，在左上角的“场景”菜单中点击\\ *新建场景*\\ 即可。创建一个 "
"*KinematicBody* 节点作为根节点，并将其命名为 *Player*\\ （玩家）。"

msgid "|image0|"
msgstr "|image0|"

msgid "image0"
msgstr "image0"

msgid ""
"Kinematic bodies are complementary to the area and rigid bodies used in the "
"2D game tutorial. Like rigid bodies, they can move and collide with the "
"environment, but instead of being controlled by the physics engine, you "
"dictate their movement. You will see how we use the node's unique features "
"when we code the jump and squash mechanics."
msgstr ""
"动力学实体（Kinematic Body）对应的是 2D 游戏教程中的区域（Area）和刚体"
"（Rigid Body）。它与刚体类似，可以移动并与环境发生碰撞，但它的运动并不是由物"
"理引擎控制的，完全掌控在你的手上。编写跳跃踩踏机制时，就会看到如何使用该节点"
"的这一独一无二的特性。"

msgid ""
"To learn more about the different physics node types, see the :ref:"
"`doc_physics_introduction`."
msgstr ""
"要学习更多关于不同物理节点类型的内容，请参阅 :ref:"
"`doc_physics_introduction`\\ 。"

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""
"现在，我们将为角色的 3D 模型创建一个基本的装备。稍后我们将在播放动画时通过代"
"码旋转模型。"

msgid ""
"Add a *Spatial* node as a child of *Player* and name it *Pivot*. Then, in "
"the FileSystem dock, expand the ``art/`` folder by double-clicking it and "
"drag and drop ``player.glb`` onto the *Pivot* node."
msgstr ""
"为 *Player* 添加一个 *Spatial* 节点作为子项，命名为 *Pivot*\\ （轴心）。然后"
"在文件系统面板中，双击展开 ``art/`` 文件夹，将 ``player.glb`` 拖放到 *Pivot* "
"节点上。"

msgid "|image1|"
msgstr "|image1|"

msgid "image1"
msgstr "image1"

msgid ""
"This should instantiate the model as a child of *Pivot*. You can rename it "
"to *Character*."
msgstr ""
"这样应该就会把这个模型实例化为 *Pivot* 的子项。你可以将其重命名为 "
"*Character*\\ （角色）。"

msgid "|image2|"
msgstr "|image2|"

msgid "image2"
msgstr "image2"

msgid ""
"The ``.glb`` files contain 3D scene data based on the open-source GLTF 2.0 "
"specification. They're a modern and powerful alternative to a proprietary "
"format like FBX, which Godot also supports. To produce these files, we "
"designed the model in `Blender 3D <https://www.blender.org/>`__ and exported "
"it to GLTF."
msgstr ""
"``.glb`` 文件包含基于开源的 GLTF 2.0 规范的 3D 场景数据。它们是一种现代的、强"
"大的并替代 FBX 等专有格式的文件，Godot 也支持这种格式。为了制作这些文件，我们"
"在 `Blender 3D <https://www.blender.org/>`__ 中设计了模型，并将其导出为 "
"GLTF。"

msgid ""
"As with all kinds of physics nodes, we need a collision shape for our "
"character to collide with the environment. Select the *Player* node again "
"and add a *CollisionShape*. In the *Inspector*, assign a *SphereShape* to "
"the *Shape* property. The sphere's wireframe appears below the character."
msgstr ""
"与所有类型的物理节点一样，我们需要一个碰撞形状，让我们的角色与环境碰撞。再次"
"选择 *Player* 节点并添加 *CollisionShape*\\。在 *检查器* 中，将 "
"*SphereShape* 分配给 *Shape* 属性。球体的线框显示在角色下方。"

msgid "|image3|"
msgstr "|image3|"

msgid "image3"
msgstr "image3"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Shrink it a bit by "
"dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""
"它将是物理引擎用来与环境碰撞的形状，因此我们希望它更适合 3D 模型。通过拖动视"
"口中的橙色点将其缩小一点。我的球体半径约为 ``0.8`` 米。"

msgid ""
"Then, move the shape up so its bottom roughly aligns with the grid's plane."
msgstr "然后，向上移动形状，使其底部与网格平面大致对齐。"

msgid "|image4|"
msgstr "|image4|"

msgid "image4"
msgstr "image4"

msgid ""
"You can toggle the model's visibility by clicking the eye icon next to the "
"*Character* or the *Pivot* nodes."
msgstr ""
"您可以通过单击 *Character* 或 *Pivot* 节点旁边的眼睛图标来切换模型的可见性。"

msgid "|image5|"
msgstr "|image5|"

msgid "image5"
msgstr "image5"

msgid "Save the scene as ``Player.tscn``."
msgstr "将场景保存为 ``Player.tscn``\\ 。"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr "节点准备就绪后，我们开始编写程序。但首先，我们需要定义一些输入动作。"

msgid "Creating input actions"
msgstr "创建输入事件"

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""
"要移动角色，我们就要监听玩家的输入，比如按下方向键。在 Godot 中，我们能够使用"
"代码来绑定按键，但还有一个非常强大的系统，可以让你为一系列按键和按钮设置标"
"签。这样可以简化我们的脚本，让它们更易读。"

msgid ""
"This system is the Input Map. To access its editor, head to the *Project* "
"menu and select *Project Settings…*."
msgstr ""
"这个系统是“按键映射”。在编辑器中可以在\\ *项目*\\ 菜单中选择\\ *项目设置...* "
"来打开。"

msgid "|image6|"
msgstr "|image6|"

msgid "image6"
msgstr "image6"

msgid ""
"At the top, there are multiple tabs. Click on *Input Map*. This window "
"allows you to add new actions at the top; they are your labels. In the "
"bottom part, you can bind keys to these actions."
msgstr ""
"顶部有许多标签。点击\\ *按键映射*\\ 。你可以在这个窗口顶部添加新的动作；即标"
"签。下半部分可以为这些动作绑定按键。"

msgid "|image7|"
msgstr "|image7|"

msgid "image7"
msgstr "image7"

msgid ""
"Godot projects come with some predefined actions designed for user interface "
"design, which we could use here. But we're defining our own to support "
"gamepads."
msgstr ""
"Godot 项目针对用户界面设计提供了一些预定义的动作，我们这里可以直接使用。不过"
"为了支持手柄，我们还是自己来定义。"

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""
"我们要把这些动作命名为 ``move_left``\\ 、\\ ``move_right``\\ 、\\ "
"``move_forward``\\ 、\\ ``move_back``\\ 、\\ ``jump``\\ （向左移动、向右移"
"动、向前移动、向后移动、跳跃）。"

msgid "To add an action, write its name in the bar at the top and press Enter."
msgstr "要添加动作，可以在顶部的框中输入名称然后按回车键。"

msgid "|image8|"
msgstr "|image8|"

msgid "image8"
msgstr "image8"

msgid ""
"Create the five actions. Your window should have them all listed at the "
"bottom."
msgstr "创建这五个动作。它们应该都会列在你窗口的底部。"

msgid "|image9|"
msgstr "|image9|"

msgid "image9"
msgstr "image9"

msgid ""
"To bind a key or button to an action, click the \"+\" button to its right. "
"Do this for ``move_left`` and in the drop-down menu, click *Key*."
msgstr ""
"要为动作绑定按键或按钮，请点击右侧的“+”按钮。对 ``move_left`` 执行此操作，然"
"后在下拉菜单中点击\\ *按键*\\ 。"

msgid "|image10|"
msgstr "|image10|"

msgid "image10"
msgstr "image10"

msgid ""
"This option allows you to add a keyboard input. A popup appears and waits "
"for you to press a key. Press the left arrow key and click *OK*."
msgstr ""
"这个选项是用来添加键盘输入的。会有一个弹出框等待你去按键。请按左方向键，然后"
"点击\\ *确定*\\ 。"

msgid "|image11|"
msgstr "|image11|"

msgid "image11"
msgstr "image11"

msgid "Do the same for the A key."
msgstr "请用 A 键重复此操作。"

msgid "|image12|"
msgstr "|image12|"

msgid "image12"
msgstr "image12"

msgid ""
"Let's now add support for a gamepad's left joystick. Click the \"+\" button "
"again but this time, select *Joy Axis*."
msgstr ""
"现在让我们为手柄左摇杆添加支持。再次点击“+”按钮，这一次选择\\ *摇杆轴*\\ 。"

msgid "|image13|"
msgstr "|image13|"

msgid "image13"
msgstr "image13"

msgid ""
"The popup gives you two drop-down menus. On the left, you can select a "
"gamepad by index. *Device 0* corresponds to the first plugged gamepad, "
"*Device 1* corresponds to the second, and so on. You can select the joystick "
"and direction you want to bind to the input action on the right. Leave the "
"default values and press the *Add* button."
msgstr ""
"弹出框中有两个下拉菜单。左侧是用来选择手柄索引号的。\\ *设备 0* 对应第一个插"
"入的手柄，\\ *设备 1* 对应第二个插入的，以此类推。右侧可以选择要绑定输入动作"
"的摇杆和方向。请保持默认值，然后点击\\ *添加*\\ 按钮。"

msgid "|image14|"
msgstr "|image14|"

msgid "image14"
msgstr "image14"

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's right axis to ``move_right``. After binding all "
"keys, your interface should look like this."
msgstr ""
"为其他输入动作也执行同样的操作。比如将右方向键、D、左摇杆的右轴绑定给 "
"``move_right``\\ 。全部绑定完后，你的界面应该类似这样。"

msgid "|image15|"
msgstr "|image15|"

msgid "image15"
msgstr "image15"

msgid ""
"We have the ``jump`` action left to set up. Bind the Space key and the "
"gamepad's A button. To bind a gamepad's button, select the *Joy Button* "
"option in the menu."
msgstr ""
"我们还剩 ``jump`` 动作没有设置。请绑定空格键和手柄的 A 键。要绑定手柄按钮，请"
"在菜单中选择\\ *手柄按键*\\ 选项。"

msgid "|image16|"
msgstr "|image16|"

msgid "image16"
msgstr "image16"

msgid "Leave the default values and click the *Add* button."
msgstr "请保持默认值，然后点击\\ *添加*\\ 按钮。"

msgid "|image17|"
msgstr "|image17|"

msgid "image17"
msgstr "image17"

msgid "Your jump input action should look like this."
msgstr "你的跳跃输入动作应该看上去类似这样。"

msgid "|image18|"
msgstr "|image18|"

msgid "image18"
msgstr "image18"

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""
"这些就是这个游戏所需的所有动作了。你可以使用这个菜单来对项目中的任意按键和按"
"钮组进行标记。"

msgid "In the next part, we'll code and test the player's movement."
msgstr "在下一部分，我们将为玩家的移动进行编程和测试。"

msgid "Translation status"
msgstr "翻译状态"
