# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "拉取请求工作流程"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Godot 使用的所谓“PR 工作流程”对于许多使用 Git 的项目来说都很常见，并且对于资"
"深自由软件贡献者应该很熟悉。其思想就是只有少数（如果有的话）能直接提交给 "
"*master* 分支。而贡献者 *fork* 项目（即创建它的副本，他们可以按照自己的意愿修"
"改），然后使用 GitHub 的界面从其 fork 的某个分支请求 *pull* 到原始（通常命名"
"为 *upstream*\\ ）仓库的某个分支。"

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"然后, 生成的 *拉取请求* (PR)可以由其他贡献者审查, 可能批准它, 拒绝它, 或者最"
"常要求修改它. 一旦获得批准,PR就可以由其中一个核心开发人员合并, 其提交将成为目"
"标分支(通常是 *master* 分支)的一部分."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"我们将一起通过一个例子来展示典型的工作流程和相关的Git命令. 但首先, 让我们快速"
"了解一下Godot的Git仓库的组织结构."

msgid "Git source repository"
msgstr "Git 源仓库"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"GitHub 上的\\ `仓库 <https://github.com/godotengine/godot>`_\\ 是一个 `Git "
"<https://git-scm.com>`_ 代码仓库以及一个嵌入式问题跟踪器和 PR 系统。"

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"如果您正在为文档做贡献，可以在\\ `这里 <https://github.com/godotengine/godot-"
"docs>`_\\ 找到它的仓库。"

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Git 版本控制系统是用于跟踪源代码的连续编辑的工具——目的是高效地为 Godot 做贡"
"献，\\ *强烈*\\ 建议学习 Git 命令行的基础知识。Git 有一些图形界面，但是它们通"
"常会鼓励用户养成关于 Git 和 PR 工作流程的不良习惯，因此我们建议不要去使用。特"
"别是，我们建议不要使用 GitHub 的在线编辑器进行代码贡献（尽管可以进行较小的修"
"复或文档更改），因为它会对每个文件和每个修改强制执行一次提交，因此很快导致 "
"PR 的 Git 历史记录不可读（尤其是在同行评审之后）。"

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Git 的“书”的第一部分很好地介绍了该工具的原理，以及你在日常工作流程中需要掌握"
"的各种命令。你可以在 `Git SCM <https://git-scm.com/book/en/v2>`_ 网站上在线阅"
"读。你还可以尝试 `GitHub 的交互式指南 <https://try.github.io/>`__\\ 。"

msgid "The branches on the Git repository are organized as follows:"
msgstr "Git 仓库上的分支被组织如下："

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"``master`` 分支是开发下一个主要版本的地方. 作为开发分支, 它可能不稳定, 不适合"
"用于生产. 这是应该优先进行PR的地方."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"稳定分支以其版本命名，例如：\\ ``3.1`` 和 ``2.1``\\ 。它们用于将 ``master`` "
"分支中的错误修复和增强功能回传到当前维护的稳定版本（例如 3.1.2 或 2.1.6）。一"
"般说来，最后一个稳定分支会被维护到下一个次要版本（例如 ``3.0`` 分支被维护到"
"了 Godot 3.1 的发布）。如果你想针对被维护的稳定分支做 PR，请先检查你的修改是"
"否也与 ``master`` 分支有关，如果是，请优先为 ``master`` 分支做 PR。发布管理者"
"可以在相关的情况下将修复的内容挑选到稳定分支。"

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr "偶尔也会有特性分支, 通常是为了在某个时候合并到 ``master`` 分支."

msgid "Forking and cloning"
msgstr "分叉和克隆"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"第一步是在 GitHub 上 *fork* `godotengine/godot <https://github.com/"
"godotengine/godot>`_ 库。为此，你需要拥有一个 GitHub 帐户并登录。在仓库的 "
"GitHub 页面的右上角，你应该看到如下所示的“Fork”按钮："

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"点击它，一段时间后，您应该被重定向到您自己的 Godot 仓库分叉，并将 GitHub 用户"
"名作为名称空间："

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"然后您可以 *克隆* 您的分叉, 即创建在线仓库的本地副本(在Git中叫做 *origin "
"remote*). 如果您还没有, 若您使用的是Windows或macOS, 请从 `其网站 <https://"
"git-scm.com>`_ 下载Git；若您使用的是Linux, 请通过您的软件包管理器安装它."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"如果您使用的是Windows, 请打开Git Bash键入命令.macOS和Linux用户可以使用各自的"
"终端."

msgid "To clone your fork from GitHub, use the following command:"
msgstr "要从GitHub克隆您的fork, 请使用以下命令:"

msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"在我们的示例中，“$”字符表示典型 UNIX shell 上的命令行提示符。它不是命令的一部"
"分，不应该键入。"

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"稍后, 您应该在当前工作目录中有一个 ``godot`` 目录. 使用 ``cd`` 命令进入它:"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr "我们将从建立对我们分叉的原始仓库的引用开始:"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"这将创建一个名为 ``upstream`` 的引用, 指向原始的 ``godotengine/godot`` 版本"
"库. 当你想从它的 ``master`` 分支拉取新的提交来更新你的fork时, 这将很有用. 你"
"有另一个名为 ``origin`` 的远程引用, 它指向你的fork( ``USERNAME/godot`` )."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"您只需要做一次上面的步骤, 只要您保留本地的 ``godot`` 文件夹(您可以随意移动"
"它, 相关的元数据隐藏在它的 ``.git`` 子文件夹中)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr "*开分支、拉取、编码、暂存、提交、推送、变基……非常有技术含量。*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"这对Daft Punk的 *技术* 的不良看法显示了Git初学者对其工作流程的一般概念: 许多"
"奇怪的命令可以通过复制和粘贴来学习, 希望它们能按预期运行. 这实际上并不是一种"
"糟糕的学习方式, 只要您好奇并且在迷失时毫不犹豫地询问您的搜索引擎, 因此, 我们"
"将为您提供在Git中工作时要了解的基本命令."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's project manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"下面, 我们将假设你想在Godot的项目管理器中实现一个功能, 该功能在 ``editor/"
"project_manager.cpp`` 文件中编码."

msgid "Branching"
msgstr "分支"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"默认情况下, ``git clone`` 应该让您进入fork(``origin``)的 ``master`` 分支. 要"
"开始自己的功能开发, 我们将创建一个功能分支:"

msgid "This command is equivalent:"
msgstr "此命令是等效的:"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "如果您想回到 ``master`` 分支, 您会使用:"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr "您可以使用 ``git branch`` 命令查看当前使用的分支:"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"创建新分支之前，请务必始终返回到 ``master`` 分支，因为您当前的分支将用作新分"
"支的基础。或者，您可以在新分支的名称之后指定一个自定义基础分支："

msgid "Updating your branch"
msgstr "更新您的分支"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"第一次（在您 fork 上游仓库之后）是不需要这样做的。但是，下次您想要处理某些事"
"情时，您会注意到您的 fork 的 ``master`` 落后于上游 ``master`` 分支几个提交："
"其他贡献者的拉取请求同时被合并。"

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"为了确保您开发的功能与当前的上游 ``master`` 分支之间不会发生冲突，您将不得不"
"通过\\ *拉取*\\ 上游分支来更新您的分支。"

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"``--rebase`` 参数将确保您所提交的任何本地更改将被“重新应用”到“拉动”分支的顶"
"部，这通常是我们在 PR 工作流程中想要的。这样，当您打开请求请求时，您自己的提"
"交将是与上游 ``master`` 分支的唯一区别。"

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"变基时，如果您提交同时在上游分支中已更改的修改后的代码，则可能会发生冲突。如"
"果发生这种情况，Git 将在冲突的提交处停止，并要求您解决冲突。您可以使用任何文"
"本编辑器执行此操作，然后进行更改（稍后再进行介绍），然后继续执行 ``git "
"rebase --continue``\\ 。如果以后的提交也有冲突，请重复该操作，直到变基操作完"
"成。"

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"如果您不确定变基期间发生了什么并且感到恐慌（不用担心，我们都要做前几次），则"
"可以使用 ``git rebase --abort`` 中止变基。这样您就返回了该分支在调用 ``git "
"pull --rebase`` 前的原始状态。"

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"如果省略了 ``--rebase`` 参数，则将创建一个合并提交，告诉 Git 如何处理两个不同"
"的分支。如果发生任何冲突，将通过此合并提交立即解决所有冲突。"

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"虽然这是有效的工作流程，并且默认行为是 ``git pull``\\ ，但是我们的 PR 工作流"
"程并不赞成在 PR 中使用合并提交。我们仅在将 PR 合并到上游分支时才使用它们。"

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"我们的理念是，PR 应该代表对代码库所做更改的最后阶段，并且我们对合并之前在中间"
"阶段所做的错误和修复不感兴趣。Git 提供了很棒的工具来“改写历史”，让它好像我们"
"第一次就做对了一样，并且我们乐于使用它来确保更改在合并之后很容易被查看和理"
"解。"

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"如果您已经创建了一个合并提交而不使用 ``rebase``\\ ，或者进行了其他任何导致不"
"希望的历史记录的更改，那么最好的选择是在上游分支上进行\\ *交互式变基*\\ 。相"
"关说明请参见\\ :ref:`专门的章节 <doc_pr_workflow_rebase>`\\ 。"

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"如果您想在任何时候将本地分支\\ *重置*\\ 为给定的提交或分支，则可以使用 ``git "
"reset --hard <commit ID>`` 或 ``git reset --hard <remote>/<branch>`` 来实现。"
"（例如 ``git reset --hard upstream/master``\\ ）。"

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"请注意，这将删除您可能已在此分支中提交的所有更改。如果您错误地丢失了提交，请"
"使用 ``git reflog`` 命令查找您想要还原的先前状态的提交 ID，并将其用作 ``git "
"reset --hard`` 的参数，回到那个状态。"

msgid "Making changes"
msgstr "做出变更"

msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"接下来，您将使用常用的开发环境（文本编辑器、IDE 等）对我们示例中的 ``editor/"
"project_manager.cpp`` 文件进行更改。"

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"默认情况下，这些修改是\\ *未暂存的*\\ 。暂存区是位于工作目录（你进行修改的地"
"方）和本地 Git 仓库（提交和所有元数据在 ``.git`` 文件夹中）之间的一层。要把工"
"作目录中的修改带到 Git 仓库，你需要用 ``git add`` 命令把它们归档，然后用 "
"``git commit`` 命令提交。"

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr "在暂存之前, 暂存后和提交之后, 您应该了解各种命令来查看当前工作."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr "``git diff`` 将显示当前未暂存的更改, 即工作目录和暂存区域之间的差异."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr "``git checkout -- <files>`` 将撤消给定文件的未暂存更改."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr "``git add <files>`` 将 *暂存* 列出的文件的更改."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` 将显示当前的暂存的更改, 即暂存区域和上次提交之间的差异."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr "``git reset HEAD <files>`` 将 *取消暂存* 列出的文件的更改."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr "``git status`` 将显示当前暂存和未暂存的修改."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` 将提交暂存文件. 它将打开一个文本编辑器(您可以使用 "
"``GIT_EDITOR`` 环境变量或Git配置中的 ``core.editor`` 设置来定义要使用的编辑"
"器), 以便您编写提交日志. 您可以使用 ``git commit -m \"Cool commit log\"`` 直"
"接写日志."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"``git commit --amend`` 允许您使用当前暂存的更改来修改最后一次提交（使用 "
"``git add`` 添加）。如果要修复上一次提交中的错误（错误、错别字、样式问题"
"等），这是最佳选择。"

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` 将显示当前分支的最后提交. 如果您做了本地提交, 它们应该显示在顶部."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` 将显示上次提交的更改. 您还可以指定提交哈希以查看该提交的更改."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"要记住的东西太多了！不用担心, 当您需要进行更改时, 只需检查一下备忘单, 然后边"
"做边学即可."

msgid "Here's how the shell history could look like on our example:"
msgstr "以下是我们的示例中shell历史记录的样子:"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"有了这个, 我们应该在 ``better-project-manager`` 分支中有两个新的提交, 这些提"
"交不在 ``master`` 分支中. 它们仍然只是本地的, 远程分支不知道它们, 上游仓库也"
"不知道."

msgid "Pushing changes to a remote"
msgstr "将更改推送到远程"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"这就是 ``git push`` 将发挥作用的地方。在 Git 中，提交总是在本地仓库中完成"
"（Subversion 则不同，其提交将直接修改远程仓库）。您需要将新的提交\\ *推送*\\ "
"到远程分支，才能与世界共享它们。语法是："

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"如果您希望远程分支与本地分支具有相同的名称, 则可以省略有关远程分支的部分, 在"
"本示例中就是这种情况, 因此我们将执行以下操作:"

msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""
"Git会要求您提供用户名和密码, 更改将发送到您的远程分支. 如果您在GitHub上查看"
"fork的页面, 则应该看到一个带有已添加提交的新分支."

msgid "Issuing a pull request"
msgstr "发出拉取请求"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"当你在 GitHub 上加传你的 fork 的分支时，你应该看到一行字：\\ *“This branch "
"is 2 commits ahead of godotengine:master.”*\\ （如果你的 ``master`` 分支与上"
"游的 ``master`` 分支不同步，则可能落后一些提交）。"

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"在这一行，有一个“Pull request”链接。点击它将打开一个表单，让你在 "
"``godotengine/godot`` 上游仓库发出 Pull request。它应该显示你的两个提交，并说"
"明“Able to merge”（能够合并）。如果不是这样（例如，它有更多的提交，或者说有合"
"并冲突），请勿创建 PR，因为出现了问题。到 `Godot 贡献者聊天 <https://chat."
"godotengine.org/>`_\\ 去寻求支持吧 :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"为PR使用明确的标题, 并将必要的详细信息放在注释区域. 您可以拖放屏幕截图,GIF或"
"压缩的项目(如果相关), 以展示您的工作实现的内容. 点击 \"创建拉取请求\", 没错！"

msgid "Modifying a pull request"
msgstr "修改拉取请求"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"虽然它是由其他贡献者审核的，但您经常需要对尚未合并的 PR 进行更改，可能是基于"
"贡献者的要求，也可能是因为您在测试时发现了自己的问题。"

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"好消息是您只需通过对您发出拉取请求的分支进行操作，就可以修改拉取请求。例如，"
"您可以在该分支上进行新的提交，将其推送到您的分支，PR 就会自动更新："

msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"但请注意，在我们的 PR 工作流程中，我们偏向于将代码库从一种功能状态转换为另一"
"种功能状态的提交，而没有中间提交来解决您自己的代码或样式问题中的错误。在大多"
"数情况下，我们会倾向于在给定的 PR 中进行一次提交（除非有充分的理由将更改分"
"开）。与其撰写新的提交，不如考虑使用 ``git commit --amend`` 来修改先前提交的"
"修复。上面的示例将变为："

msgid "The interactive rebase"
msgstr "交互式变基"

msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request of your to *rebase* your branch to *squash* some or all of the "
"commits into one."
msgstr ""
"如果你没有严格按照上面的步骤对提交进行\\ *修订*\\ ，而是创建了修复提交，或者"
"你在编写修改时没有注意到我们的工作流程和 Git 使用技巧，审核人可能会要求将你的"
"分支进行\\ *变基*\\ ，将其中一些或者所有提交\\ *压缩*\\ 成一个。"

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"确实, 如果对某些修订进行了一些修订, 以解决原始提交中的错误, 错别字等, 则它们"
"与将来的变更日志阅读器无关, 后者希望了解Godot代码库中发生了什么, 或者何时以及"
"如何进行给定文件是最后修改的."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"为了把那些不相干的提交压缩到主要的提交中, 我们将不得不 *重写历史记录* . 没"
"错, 我们有这个权力. 你可能会读到这是一种不好的做法, 当涉及到上游仓库的分支"
"时, 这确实是事实. 但在你的fork中, 你可以做任何你想做的事, 而且一切都可以得到"
"整洁的PR :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"我们将使用\\ *交互式变基* ``git rebase -i`` 来执行此操作。此命令将使用提交哈"
"希作为参数，并允许您修改该提交哈希与分支的最后一个提交之间的所有提交，即所谓"
"的 ``HEAD``\\ 。"

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"虽然您可以将任何提交 ID 赋给 ``git rebase-i`` 并查看其间的所有内容，但最常见"
"和最方便的工作流涉及在上游 ``master`` 分支上进行变基，您可以使用："

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"由于远程分支和本地分支之间的区别, 在Git中引用分支有点棘手. 这里, ``upstream/"
"master`` (带有 `/` )是从 ``upstream`` remote的 ``master`` 分支中提取的本地分"
"支."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"交互式变基只能在本地分支上进行，因此 `/` 在这里很重要。由于上游远程服务器会经"
"常变动，您的本地 ``upstream/master`` 分支可能会过时，因此您可以使用 ``git "
"fetch upstream master`` 来更新。与 ``git pull--rebase upstream master`` 相"
"反，\\ ``fetch`` 只会更新 ``upstream/master`` 的引用（与本地 ``master`` 分支"
"不同……是的，这很混乱，但你会逐渐熟悉这一点）。"

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"这将打开一个文本编辑器（默认为 ``vi``\\ ，请参阅 `Git 文档 <https://git-scm."
"com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ 把它配置为您"
"最喜欢的一个），内容可能如下所示："

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"编辑器还将显示有关如何对这些提交采取行动的说明. 特别是, 它应该告诉您 "
"``pick`` 意味着使用该提交(什么都不做), 并且 ``squash`` 和 ``fixup`` 可以用于"
"在其父提交中 *合并* 提交. ``squash`` 和 ``fixup`` 之间的区别在于 ``fixup`` 会"
"从压缩的提交中丢弃提交日志. 在我们的示例中, 我们对保持 ``修复错字`` 提交的日"
"志不感兴趣, 因此我们使用:"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"保存并退出编辑器后，就会进行变基。第二个提交将被合并到第一个提交中，现在应该"
"能够通过 ``git log`` 和 ``git show`` 确认您只有一个具有先前两个提交的更改的提"
"交。"

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"但！你改写了历史, 现在你的本地和远程分支有分歧. 实际上, 以上示例中的提交"
"1b4aad7将已更改, 因此获得了新的提交哈希. 如果您尝试推送到远程分支, 将引发错"
"误:"

msgid ""
"This is a sane behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"这是一个理智的行为,Git不会让你推送会覆盖远程内容的修改. 但这正是我们想做的, "
"所以我们必须 *强制* 它:"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"还有没错！ Git很乐意用您在本地拥有的东西 *替换* 您的远程分支(所以使用 ``git "
"log`` 确保您想要的东西). 这也将相应地更新PR."

msgid "Deleting a Git branch"
msgstr "删除 Git 分支"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"在您的提交请求合并之后, 您应该做的最后一件事是: 删除用于PR的Git分支. 如果不删"
"除分支不会有问题, 但是这样做是一个好习惯. 您将需要执行两次, 一次是对本地分"
"支, 另一次是对GitHub上的远程分支."

msgid "To delete our better project manager branch locally, use this command:"
msgstr "要在本地删除 ``better project manager`` 分支, 请使用以下命令:"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"或者, 如果分支尚未合并, 我们想要删除它, 不是使用 ``-d``, 而是使用 ``-D``."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr "接下来, 要删除GitHub上的远程分支, 请使用以下命令:"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr "您还可以从GitHub PR本身删除远程分支, 一旦合并或关闭它就会出现一个按钮."

msgid "Translation status"
msgstr "翻译状态"
