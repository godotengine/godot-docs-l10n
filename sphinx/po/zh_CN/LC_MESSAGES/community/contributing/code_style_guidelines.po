# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Code style guidelines"
msgstr "代码风格规范"

msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""
"在给 Godot 的源代码做贡献时，你需要遵循下面概述的样式规范。其中一些是通过持续"
"集成过程进行检查的，评审人员将要求你修复潜在的问题，因此最好按照下面概述的方"
"式设置系统，以确保所有提交都遵循规范。"

msgid "C++ and Objective-C"
msgstr "C++ 和 Objective-C"

msgid ""
"There are no written guidelines, but the code style agreed upon by the "
"developers is enforced via the `clang-format <http://clang.llvm.org/docs/"
"ClangFormat.html>`__ code beautifier, which takes care for you of all our "
"conventions. To name a few:"
msgstr ""
"没有书面的规范，但是开发人员默认的代码风格是通过 `clang-format <http://clang."
"llvm.org/docs/ClangFormat.html>`__ 代码美化器强制执行的，它可以满足我们所有的"
"约定。举几个例子："

msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr "缩进和对齐都是基于制表符的（分别是一个和两个制表符）"

msgid "One space around math and assignments operators as well as after commas"
msgstr "数学和赋值运算符以及逗号后面有一个空格"

msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr "指针和引用运算符附加到变量标识符，而不是类型名称"

msgid "See further down regarding header includes"
msgstr "有关头文件的引入，请参见下文"

msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""
"Clang 格式使用的规则在 Godot 仓库的 `.clang-format <https://github.com/"
"godotengine/godot/blob/master/.clang-format>`__ 文件中进行了概述。"

msgid ""
"As long as you ensure that your style matches the surrounding code and that "
"you not introducing trailing whitespace or space-based indentation, you "
"should be fine. If you plan to contribute regularly however, we strongly "
"advise that you setup clang-format locally to check and automatically fix "
"all your commits."
msgstr ""
"只要你确保你的样式与周围的代码匹配, 并且你没有引入尾随空格或基于空格的缩进, "
"就应该没问题. 但如果你计划定期贡献, 我们强烈建议你在本地设置clang-format以检"
"查并自动修复所有提交."

msgid ""
"Godot's code style should *not* be applied to third-party code, i.e. that is "
"included in Godot's source tree but was not written specifically for our "
"project. Such code usually come from different upstream projects with their "
"own style guides (or lack thereof), and don't want to introduce differences "
"that would make syncing with upstream repositories harder."
msgstr ""
"Godot的代码风格 *不应该* 适用于第三方代码, 即包含在Godot的源代码树中, 但不是"
"专门为我们的项目编写的. 这样的代码通常来自不同的上游项目, 有他们自己的风格指"
"南(或缺乏风格规则), 我们不想引入差异, 使其与上游仓库的同步更加困难."

msgid ""
"Third-party code is usually included in the ``thirdparty/`` folder and can "
"thus easily be excluded from formatting scripts. For the rare cases where a "
"third-party code snippet needs to be included directly within a Godot file, "
"you can use ``/* clang-format off */`` and ``/* clang-format on */`` to tell "
"clang-format to ignore a chunk of code."
msgstr ""
"第三方代码通常包含在 ``thirdparty/`` 文件夹中, 因此可以很容易地从格式化脚本中"
"排除. 在极少数情况下, 第三方代码片段需要直接包含在Godot文件中, 你可以使用 ``/"
"* clang-format off */`` 和 ``/* clang-format on */`` 来告诉clang-format忽略某"
"块儿的代码."

msgid ""
"These guidelines only cover code formatting. See :ref:"
"`doc_cpp_usage_guidelines` for a list of language features that are "
"permitted in pull requests."
msgstr ""
"这些规范只涉及代码的格式化。拉取请求中所允许的语言特性列表请参阅 :ref:"
"`doc_cpp_usage_guidelines`\\ 。"

msgid "Using clang-format locally"
msgstr "在本地使用 clang-format"

msgid ""
"First of all, you will need to install clang-format. As of now, you need to "
"use **clang-format 13** to be compatible with Godot's format. Later versions "
"might be suitable, but previous versions may not support all used options, "
"or format some things differently, leading to style issues in pull requests."
msgstr ""
"首先，您需要安装 clang-format。截至目前，您需要使用 **clang-format 13** 才能"
"与 Godot 的格式兼容。后续版本可能也能用，但更早的版本就可能无法支持所有用到的"
"选项，或者使用不同的格式，导致拉取请求存在样式问题。"

msgid "Installation"
msgstr "安装"

msgid "Here's how to install clang-format:"
msgstr "以下是如何安装 clang-format："

msgid ""
"Linux: It will usually be available out-of-the-box with the clang toolchain "
"packaged by your distribution. If your distro version is not the required "
"one, you can download a pre-compiled version from the `LLVM website <http://"
"releases.llvm.org/download.html>`__, or if you are on a Debian derivative, "
"use the `upstream repos <http://apt.llvm.org/>`__."
msgstr ""
"Linux: 通常会随您的发行版打包的clang工具链一起提供. 如果您的分发版本不是必需"
"的版本, 您可以从 `LLVM 网站 <http://releases.llvm.org/download.html>`__ 下载"
"预编译的版本, 或者, 如果您使用的是Debian衍生版本, 请使用 `上游仓库 <http://"
"apt.llvm.org/>`__."

msgid ""
"macOS and Windows: You can download precompiled binaries from the `LLVM "
"website <http://releases.llvm.org/download.html>`__. You may need to add the "
"path to the binary's folder to your system's ``PATH`` environment variable "
"to be able to call ``clang-format`` out of the box."
msgstr ""
"macOS和Windows: 您可以从 `LLVM 网站 <http://releases.llvm.org/download."
"html>`__ 下载预编译的二进制文件. 您可能需要将二进制文件的文件夹的路径添加到系"
"统的 ``PATH`` 环境变量中, 以便能够直接调用 ``clang-format``."

msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr "然后, 你就有不同的可能性将clang-format应用于你的更改:"

msgid "Manual usage"
msgstr "手动使用"

msgid ""
"You can apply clang-format manually one or more files with the following "
"command:"
msgstr "你可以使用以下命令手动将 clang-format 应用于一个或多个文件："

msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""
"``-i`` 表示更改应直接写入文件(默认情况下,clang-format只会将固定版本输出到终"
"端)."

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""
"该路径可以指向几个文件, 一个接一个, 也可以使用如在典型的Unix shell中的通配"
"符. 在通配时要小心, 以免对Godot树中的已编译对象(.o和.a文件)运行clang格式. 因"
"此, 最好使用 ``core/*. {cpp,h}`` 而不是 ``core/*``."

msgid "Pre-commit hook"
msgstr "预提交钩子"

msgid ""
"For ease of use, we provide a pre-commit hook for Git that will run clang-"
"format automatically on all your commits to check them, and let you apply "
"its changes in the final commit."
msgstr ""
"为了易于使用, 我们为Git提供了一个预提交钩子, 它将在你的所有提交上自动运行"
"clang-format来检查它们, 并允许你在最终提交中应用其更改."

msgid ""
"This \"hook\" is a script which can be found in ``misc/hooks``, refer to "
"that folder's README.md for installation instructions."
msgstr ""
"这个“钩子”（hook）是一个可以在 ``misc/hooks`` 中找到的脚本，安装说明请参阅该"
"文件夹的 README.md。"

msgid ""
"If your clang-format is not in the ``PATH``, you may have to edit the ``pre-"
"commit-clang-format`` to point to the correct binary for it to work. The "
"hook was tested on Linux and macOS, but should also work in the Git Shell on "
"Windows."
msgstr ""
"如果你的clang-format不在 ``PATH`` 中, 你可能需要编辑 ``pre-commit-clang-"
"format`` 来指向正确的二进制格式才能工作. 钩子在Linux和macOS上测试过, 但也应该"
"在Windows上的Git Shell中运行."

msgid "IDE plugin"
msgstr "IDE插件"

msgid ""
"Most IDEs or code editors have beautifier plugins that can be configured to "
"run clang-format automatically, for example each time you save a file."
msgstr ""
"大多数IDE或代码编辑器都有美化插件, 可以配置为自动运行clang-format, 例如每次保"
"存文件时."

msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr "以下是一些IDE的美化插件的非详尽列表:"

msgid ""
"Qt Creator: `Beautifier plugin <http://doc.qt.io/qtcreator/creator-"
"beautifier.html>`__"
msgstr ""
"Qt Creator：\\ `美化插件 <http://doc.qt.io/qtcreator/creator-beautifier."
"html>`__"

msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""
"Visual Studio Code：\\ `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"

msgid ""
"Visual Studio: `ClangFormat <https://marketplace.visualstudio.com/items?"
"itemName=LLVMExtensions.ClangFormat>`__"
msgstr ""
"Visual Studio：\\ `ClangFormat <https://marketplace.visualstudio.com/items?"
"itemName=LLVMExtensions.ClangFormat>`__"

msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr ""
"vim：\\ `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"

msgid ""
"CLion: Starting from version ``2019.1``, no plugin is required. Instead, "
"enable `ClangFormat <https://www.jetbrains.com/help/clion/clangformat-as-"
"alternative-formatter.html#clion-support>`__"
msgstr ""
"CLion：从 ``2019.1`` 版本起不再需要插件。启用 `ClangFormat <https://www."
"jetbrains.com/help/clion/clangformat-as-alternative-formatter.html#clion-"
"support>`__ 即可"

msgid "(Pull requests welcome to extend this list with tested plugins.)"
msgstr "(欢迎拉取请求以使用测试过的插件来扩展此列表.)"

msgid "Header includes"
msgstr "标头引入"

msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""
"当添加新的C++或Objective-C文件或在现有文件中引入新的标头时, 应遵循以下规则:"

msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""
"文件中的第一行应该是Godot的版权标头和MIT许可证, 从另一个文件复制粘贴. 确保调"
"整文件名."

msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr "在 ``.h`` 头文件中, 引入防护应该与 ``FILENAME_H`` 形式一起使用."

msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""
"在 ``.cpp`` 文件(如 ``filename.cpp`` )中, 第一个引入应该是声明类的那个(例如 "
"``#include \"filename.h\"``), 然后使用空行分隔."

msgid ""
"Then come headers from Godot's own code base, included in alphabetical order "
"(enforced by ``clang-format``) with paths relative to the root folder. Those "
"includes should be done with quotes, e.g. ``#include \"core/object.h\"``. "
"The block of Godot header includes should then be followed by an empty line "
"for separation."
msgstr ""
"然后来自Godot自己的代码库的标头, 按字母顺序(由 ``clang-format`` 强制)引入, 并"
"具有相对于根文件夹的路径. 这些引入应该用引号来完成, 例如 ``#include \"core/"
"object.h\"``. 然后,Godot标头引入的块应用一个空行以进行分隔."

msgid ""
"Finally, third-party headers (either from ``thirdparty`` or from the "
"system's include paths) come next and should be included with the < and > "
"symbols, e.g. ``#include <png.h>``. The block of third-party headers should "
"also be followed by an empty line for separation."
msgstr ""
"最后, 第三方头文件(无论是来自 ``thirdparty`` 还是来自系统的包含路径)接下来, "
"应该用 < and > 符号包含, 例如 ``#include <png.h>`` . 第三方头文件块的后面也应"
"该有一个空行来分隔."

msgid ""
"Godot and third-party headers should be included in the file that requires "
"them, i.e. in the `.h` header if used in the declarative code or in the `."
"cpp` if used only in the imperative code."
msgstr ""
"Godot和第三方标头应包含在需要它们的文件中, 即, 如果在声明性代码中使用, 则在 "
"`.h` 标头中；如果仅在命令性代码中使用, 则在 `.cpp` 中."

msgid "Example:"
msgstr "示例："

msgid "Java"
msgstr "Java"

msgid ""
"Godot's Java code (mostly in ``platform/android``) is also enforced via "
"``clang-format``, so see the instructions above to set it up. Keep in mind "
"that this style guide only applies to code written and maintained by Godot, "
"not third-party code such as the ``java/src/com/google`` subfolder."
msgstr ""
"Godot的Java代码(主要在 ``platform/android`` 中)也是通过 ``clang-format`` 来执"
"行的, 所以请看上面的说明来设置它. 请记住, 本风格规则只适用于Godot编写和维护的"
"代码, 而不是第三方代码, 如 ``java/src/com/google`` 子文件夹."

msgid "Python"
msgstr "Python"

msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""
"Godot的SCons构建系统是用Python编写的, 源代码树中包含的各种脚本也使用Python."

msgid ""
"For those, we follow the `Black style guide <https://github.com/psf/"
"black#the-black-code-style>`__. Blacken your Python changes using `Black "
"<https://pypi.org/project/black/>`__."
msgstr ""
"对于这些, 我们遵循 `黑色风格指南 <https://github.com/psf/black#the-黑色代码样"
"式>`__ . 使用 `Black使Python 更改变黑 <https://pypi.org/project/black/>`__ ."

msgid "Using black locally"
msgstr "本地使用黑色"

msgid ""
"First of all, you will need to install black. Black requires Python 3.6.0+ "
"to run."
msgstr "首先, 您需要安装black.Black需要python3.6.0+才能运行."

msgid "Here's how to install black:"
msgstr "下面介绍如何安装black:"

msgid "You then have different possibilities to apply black to your changes:"
msgstr "然后, 您有不同的可能性将黑色应用于您的更改:"

msgid ""
"You can apply ``black`` manually to one or more files with the following "
"command:"
msgstr "您可以使用以下命令将 ``black`` 手动应用于一个或多个文件:"

msgid ""
"``-l 120`` means that the allowed number of characters per line is 120. This "
"number was agreed upon by the developers."
msgstr "``-l 120`` 表示每行允许的字符数为 120。这个数字是经过开发者们商定的。"

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell."
msgstr ""
"该路径可以指向多个文件, 可以一个接一个, 也可以像典型的unixshell一样使用通配"
"符."

msgid ""
"For ease of use, we provide a pre-commit hook for Git that will run black "
"automatically on all your commits to check them, and let you apply its "
"changes in the final commit."
msgstr ""
"为了便于使用, 我们为Git提供了一个预提交钩子, 它将在您的所有提交上自动运行以检"
"查您的提交, 并让您在最终提交中应用其更改."

msgid ""
"This \"hook\" is a script which can be found in ``misc/hooks``. Refer to "
"that folder's ``README.md`` for installation instructions."
msgstr ""
"这个 \"hook\" 是一个脚本, 可以在 ``misc/hooks`` 中找到. 请参考该文件夹的 "
"``README.md`` , 了解安装说明."

msgid "Editor integration"
msgstr "编辑器集成"

msgid ""
"Many IDEs or code editors have beautifier plugins that can be configured to "
"run black automatically, for example each time you save a file. For details "
"you can check `Black editor integration <https://github.com/psf/black#editor-"
"integration>`__."
msgstr ""
"许多集成开发环境或代码编辑器都有美化插件, 可以配置为自动运行black, 例如每次保"
"存文件时. 有关详细信息, 可以查看 `black 编辑器集成 <https://github.com/psf/"
"black#editor-integration>`__ ."

msgid "Comment style guide"
msgstr "评论风格指南"

msgid ""
"This comment style guide applies to all programming languages used within "
"Godot's codebase."
msgstr "本注释风格指南适用于Godot代码库中使用的所有编程语言."

msgid ""
"Begin comments with a space character to distinguish them from disabled code."
msgstr "以空间字符开始注释, 以将其与禁用代码区分开来."

msgid ""
"Use sentence case for comments. Begin comments with an uppercase character "
"and always end them with a period."
msgstr "注释使用句子大小写. 注释以大写字母开头, 并始终以句号结束."

msgid "Reference variable/function names and values using backticks."
msgstr "使用反引号引用变量和函数名和值."

msgid "Wrap comments to ~100 characters."
msgstr "将注释控制在~100个字符。"

msgid ""
"You can use ``TODO:``, ``FIXME:``, ``NOTE:``, or ``HACK:`` as adominitions "
"when needed."
msgstr ""
"你可以在需要的时候使用 ``TODO:`` , ``FIXME:`` , ``NOTE:`` , ``HACK:`` 作为强"
"调."

msgid "**Example:**"
msgstr "**示例:**"

msgid ""
"Don't repeat what the code says in a comment. Explain the *why* rather than "
"*how*."
msgstr "不要在注释中重复代码的内容. 解释 *为什么* 而不是 *如何* ."

msgid "**Bad:**"
msgstr "**错误做法：**"

msgid ""
"You can use Javadoc-style comments above function or macro definitions. It's "
"recommended to use Javadoc-style comments *only* for methods which are not "
"exposed to scripting. This is because exposed methods should be documented "
"in the :ref:`class reference XML <doc_updating_the_class_reference>` instead."
msgstr ""
"你可以在函数或宏定义上面使用Javadoc风格的注释. 建议只对不公开给脚本的方法使用"
"Javadoc风格的注释. 这是因为公开的方法应该在 :ref:`class reference XML "
"<doc_updating_the_class_reference>` 中进行记录."

msgid ""
"For member variables, don't use Javadoc-style comments but use single-line "
"comments instead:"
msgstr "对于成员变量, 不要使用Javadoc式的注释, 而是使用单行注释:"

msgid "Translation status"
msgstr "翻译状态"
