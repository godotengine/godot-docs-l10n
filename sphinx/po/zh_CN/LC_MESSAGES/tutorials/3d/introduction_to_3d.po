# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to 3D"
msgstr "3D 简介"

msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simple no longer work. To "
"aid in this transition, it is worth mentioning that Godot uses similar APIs "
"for 2D and 3D. Most nodes are the same and are present in both 2D and 3D "
"versions. In fact, it is worth checking the 3D platformer tutorial, or the "
"3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""
"创造一个3D游戏很有挑战性. 那个多出来的的Z轴使许多有助于使2D游戏变得简单的常用"
"技术不再起作用. 为了帮助习惯这种转变, 值得一提的是,Godot在2D和3D上使用了类似"
"的API. 大多数节点是相同的, 并且以2D和3D版本存在. 事实上, 可以看看3D平台游戏教"
"程或3D运动学角色教程, 这些教程大部分与2D游戏相同."

msgid ""
"In 3D, math is a little more complex than in 2D, so also checking the :ref:"
"`doc_vector_math` entry in the wiki (which was especially created for game "
"developers, not mathematicians or engineers) will help pave the way for you "
"to develop 3D games efficiently."
msgstr ""
"在3D中, 数学比2D更复杂一些, 所以看看Wiki里的 :ref:`doc_vector_math` 将有助于"
"为有效开发3D游戏铺平道路(它是为游戏开发者, 而不是数学家或工程师, 特别创建的)."

msgid "Spatial node"
msgstr "Spatial 节点"

msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Spatial <class_Spatial>` node for "
"everything 3D."
msgstr ""
":ref:`Node2D <class_Node2D>` 是 2D 的基础节点。\\ :ref:`Control "
"<class_Control>` 是所有 GUI 的基础节点。同理，3D 引擎中的所有 3D 物体都使用 :"
"ref:`Spatial <class_Spatial>`\\ （空间）节点。"

msgid ""
"Spatial nodes have a local transform, which is relative to the parent node "
"(as long as the parent node is also of **or inherits from** the type "
"Spatial). This transform can be accessed as a 4×3 :ref:`Transform "
"<class_Transform>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (X, Y and Z angles) and scale."
msgstr ""
"Spatial 节点有一个局部变换，它是相对于父节点而言的（只要父节点也是\\ **或者继"
"承自**\\ Spatial 类型）。这个变换可以以 4×3 的 :ref:`Transform "
"<class_Transform>` 形式访问，也可以以 3 个 :ref:`Vector3 <class_Vector3>` 成"
"员的形式访问，分别代表位置、欧拉旋转（X、Y、Z 角度）和缩放。"

msgid "3D content"
msgstr "3D 内容"

msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (usually referred to as Digital Content Creation tools, or DCCs) and "
"exported to an exchange file format to be imported in Godot. This is "
"required since 3D formats are not as standardized as images."
msgstr ""
"2D 中加载图像内容和绘图都非常直观，3D 就有所不同，会稍微难一些。3D 内容需要使"
"用特殊的 3D 工具（通常称为数字内容创建工具，Digital Content Creation 工具，简"
"称 DCC）来创建，然后导出到某种交换文件格式，才能被 Godot 导入。这是因为 3D 格"
"式的标准化不及图像。"

msgid "DCC-created models"
msgstr "DCC创建的模型"

msgid ""
"There are two pipelines to import 3D models in Godot. The first and most "
"common one is by :ref:`doc_importing_3d_scenes`, which allows you to import "
"entire scenes (just as they look in the DCC), including animation, skeletal "
"rigs, blend shapes, etc."
msgstr ""
"有两条线路可以导入3D模型到Godot中. 第一个也是最常见的一个, 是通过 :ref:"
"`doc_importing_3d_scenes` , 它允许导入整个场景(就像它们在DCC中看起来的那样), "
"包括动画, 骨架绑定, 混合形状等."

msgid ""
"The second pipeline is by importing simple .OBJ files as mesh resources, "
"which can be then put inside a :ref:`MeshInstance <class_MeshInstance>` node "
"for display."
msgstr ""
"第二条路线是通过导入简单的 .OBJ 文件作为网格资源，然后将其放入 :ref:"
"`MeshInstance <class_MeshInstance>` 节点中显示。"

msgid "Generated geometry"
msgstr "生成的几何体"

msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use the :"
"ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""
"通过直接使用 :ref:`Mesh <class_Mesh>` 资源可以创建自定义几何体。只需创建数组"
"并使用 :ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` 函数即可。也可以使用辅助"
"类 :ref:`SurfaceTool <class_SurfaceTool>`，它提供了一个更直接的 API 和帮助工"
"具，用于索引、生成法线、切线等。"

msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""
"在任何情况下, 这种方法都是为了用于生成静态几何体(不会经常更新的模型), 因为创"
"建顶点数组并将它们提交给3D API具有显著的性能开销."

msgid "Immediate geometry"
msgstr "即时几何体"

msgid ""
"If, instead, there is a requirement to generate simple geometry that will be "
"updated often, Godot provides a special node, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>`, which provides an OpenGL 1.x style immediate-"
"mode API to create points, lines, triangles, etc."
msgstr ""
"相反, 如果需要生成会经常更新的简单几何体,Godot会提供一个特殊节点 :ref:"
"`ImmediateGeometry <class_ImmediateGeometry>` , 它会提供OpenGL 1.x风格的即时"
"模式API来创建点, 线, 三角形等."

msgid "2D in 3D"
msgstr "3D 中的 2D"

msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:"
"`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games "
"that take advantage of mixing with 3D backgrounds, more realistic parallax, "
"lighting/shadow effects, etc."
msgstr ""
"虽然Godot包装了强大的2D引擎, 但许多类型的游戏会使用在3D环境中的2D效果. 通过使"
"用不旋转的固定相机(正交或透视), 可以使用诸如 :ref:`Sprite3D "
"<class_Sprite3D>` 和 :ref:`AnimatedSprite3D <class_AnimatedSprite3D>` 等节点"
"来创建混合了具有3D背景, 更逼真的视差, 灯光/阴影效果等的2D游戏."

msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""
"当然, 缺点在于与普通2D相比增加了复杂性并降低了与普通2D 相比的性能, 以及缺乏进"
"行像素工作时的参考."

msgid "Environment"
msgstr "环境"

msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""
"除了编辑场景之外, 编辑环境通常也很常见. Godot提供了一个 :ref:"
"`WorldEnvironment <class_WorldEnvironment>` 节点, 该节点允许更改背景颜色, 模"
"式(就像放一个天空盒时那样)以及应用多种内置处理后效果. 环境可以在Camera中被覆"
"写."

msgid "3D viewport"
msgstr "3D 视口"

msgid ""
"Editing 3D scenes is done in the 3D tab. This tab can be selected manually, "
"but it will be automatically enabled when a Spatial node is selected."
msgstr ""
"编辑3D场景可以在3D选项卡中完成. 该选项卡可以手动选择, 但在选择Spatial节点时将"
"自动启用."

msgid ""
"Default 3D scene navigation controls are similar to Blender (aiming to have "
"some sort of consistency in the free software pipeline..), but options are "
"included to customize mouse buttons and behavior to be similar to other "
"tools in the Editor Settings:"
msgstr ""
"默认的3D场景导航控制类似于Blender(旨在在自由软件工作流程中具有某种一致性), 但"
"在编辑器设置中也包含了自定义鼠标按钮和行为使其看上去像其他工具的选项:"

msgid "Coordinate system"
msgstr "坐标系"

msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything in 3D, with 1 unit being equal to 1 meter. Physics and "
"other areas are tuned for this scale. Therefore, attempting to use a "
"different scale is usually a bad idea (unless you know what you are doing)."
msgstr ""
"Godot 在 3D 中使用的都是\\ `公制 <https://zh.wikipedia.org/zh-cn/"
"%E7%B1%B3%E5%88%B6>`__\\ ，1 个单位等于 1 米。物理和其他区域都为此而调整过。"
"因此，试图使用不同的比例通常是一个坏主意（除非你知道你在做什么）。"

msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set your DCC to metric). Godot allows scaling post-import and, while this "
"works in most cases, in rare situations it may introduce floating-point "
"precision issues (and thus, glitches or artifacts) in delicate areas such as "
"rendering or physics. Make sure your artists always work in the right scale!"
msgstr ""
"使用 3D 资产时，最好使用正确的比例（将 DCC 设置为公制）。Godot 允许在导入后缩"
"放，尽管在大多数时都没问题，但在极少数情况下，会在渲染或物理等敏感区域带来浮"
"点精度问题（带来毛刺或失真）。所以，请确保你的渲染总是在正确的比例下工作！"

msgid ""
"The Y coordinate is used for \"up\", though for most objects that need "
"alignment (like lights, cameras, capsule collider, vehicle, etc.), the Z "
"axis is used as a \"pointing towards\" direction. This convention roughly "
"means that:"
msgstr ""
"Y坐标用于 \"向上 \", 但对于大多数需要对齐的物体(如灯光, 摄像机, 胶囊碰撞体, "
"载具等),Z轴用作\" 指向\"方向. 这个约定大致意味着:"

msgid "**X** is sides"
msgstr "**X** 是两边"

msgid "**Y** is up/down"
msgstr "**Y** 是上/下"

msgid "**Z** is front/back"
msgstr "**Z** 是前/后"

msgid "Space and manipulation gizmos"
msgstr "空间与操纵小工具"

msgid ""
"Moving objects in the 3D view is done through the manipulator gizmos. Each "
"axis is represented by a color: Red, Green, Blue represent X, Y, Z "
"respectively. This convention applies to the grid and other gizmos too (and "
"also to the shader language, ordering of components for Vector3, Color, "
"etc.)."
msgstr ""
"在 3D 视图中移动物体是通过操纵器小工具完成的。每个轴用一种颜色表示：红、绿、"
"蓝分别代表 X、Y、Z。这种惯例也适用于网格和其他小工具（也适用于着色器语言、"
"Vector3、Color 等组件的顺序）。"

msgid "Some useful keybindings:"
msgstr "一些有用的键盘绑定:"

msgid ""
"To snap placement or rotation, press :kbd:`Ctrl` while moving, scaling or "
"rotating."
msgstr "在移动, 缩放或旋转时, 按 :kbd:`Ctrl` 键, 可进行吸附放置或旋转."

msgid "To center the view on the selected object, press :kbd:`F`."
msgstr "要将视图集中在所选对象上, 按 :kbd:`F`."

msgid "View menu"
msgstr "视图菜单"

msgid ""
"The view options are controlled by the \"View\" menu in the viewport's "
"toolbar."
msgstr "视图选项由视口工具栏中的“视图”菜单控制。"

msgid "You can hide the gizmos in the 3D view of the editor through this menu:"
msgstr "你可以通过这个菜单在编辑器的 3D 视图中隐藏小工具："

msgid ""
"To hide a specific type of gizmos, you can toggle them off in the \"View\" "
"menu."
msgstr "要隐藏特定类型的小工具，你可以在“视图”菜单中把它们切换掉。"

msgid "Default environment"
msgstr "默认环境"

msgid ""
"When created from the Project Manager, the 3D environment has a default sky."
msgstr "从项目管理器中创建时,3D环境具有默认的天空."

msgid ""
"Given how physically based rendering works, it is advised to always try to "
"work with a default environment in order to provide indirect and reflected "
"light to your objects."
msgstr ""
"鉴于基于物理的渲染工作方式, 建议总是使用一个默认环境, 以便为对象提供间接和反"
"射光."

msgid "Cameras"
msgstr "相机"

msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera <class_Camera>` is also added to the scene. "
"Cameras can work in either orthogonal or perspective projections:"
msgstr ""
"无论在 3D 空间中放置多少物体，除非在场景中添加了 :ref:`Camera "
"<class_Camera>`\\ ，否则不会显示任何内容。相机可以在正交或透视投影中工作："

msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""
"摄像机与父视口或其祖先视口相关联, 且仅显示到他们上面. 由于场景树的根是一个视"
"口, 默认情况下会在其上显示摄像机, 但如果需要子视口(作为渲染目标或画中画), 则"
"需要自己的子摄像头才能显示."

msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr "处理多台摄像机时, 每个视口都遵循以下规则:"

msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""
"如果场景树中没有摄像机，则第一个进入的摄像机将成为活跃摄像机。进入场景的其他"
"摄像机将被忽略（除非它们被设置为 *current*\\ ）。"

msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""
"如果相机设置了“\\ *current*\\ ”属性，则无论场景中是否有其他相机，都会使用它。"
"如果该属性已设置，它将变为活动状态，取代之前的摄像机。"

msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr "如果活动摄像机离开了场景树，则按树形顺序排列的第一台摄像机将取代它。"

msgid "Lights"
msgstr "灯光"

msgid ""
"Godot has a limit of up to 8 lights per mesh. Aside from that, there is no "
"limitation on the number of lights, nor of types of lights, in Godot. As "
"many as desired can be added, as long as performance allows, and no more "
"than 8 lights shine on a single mesh."
msgstr ""
"Godot的每个网格最多限制8个灯. 除此之外, 在Godot中, 对灯的数量和灯的类型都没有"
"限制. 在性能允许的情况下, 可以根据需要, 添加任意数量的灯, 而单个网格上照射的"
"灯不超过8盏."

msgid "Translation status"
msgstr "翻译状态"
