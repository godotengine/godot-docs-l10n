# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the MeshDataTool"
msgstr "使用 MeshDataTool"

msgid ""
"The :ref:`MeshDataTool <class_meshdatatool>` is not used to generate "
"geometry. But it is helpful for dynamically altering geometry, for example "
"if you want to write a script to tessellate, simplify, or deform meshes."
msgstr ""
":ref:`MeshDataTool <class_meshdatatool>` 不是用来生成几何体的, 但它对动态改变"
"几何体很有帮助, 例如, 如果你想写一个脚本来分割, 简化或变形网格."

msgid ""
"The MeshDataTool is not as fast as altering arrays directly using ArrayMesh. "
"However, it provides more information and tools to work with meshes than the "
"ArrayMesh does. When the MeshDataTool is used, it calculates mesh data that "
"is not available in ArrayMeshes such as faces and edges, which are necessary "
"for certain mesh algorithms. If you do not need this extra information then "
"it may be better to use an ArrayMesh."
msgstr ""
"MeshDataTool不像直接使用ArrayMesh改变数组那么快. 但是, 它提供了比ArrayMesh更"
"多的信息和工具来处理网格. 当使用MeshDataTool时, 它会计算ArrayMeshes中没有的网"
"格数据, 如面和边, 这些数据对于某些网格算法来说是必要的. 如果您不需要这些额外"
"的信息, 那么使用 ArrayMesh 可能会更好."

msgid ""
"MeshDataTool can only be used on Meshes that use the PrimitiveType ``Mesh."
"PRIMITIVE_TRIANGLES``."
msgstr ""
"MeshDataTool 只能用于使用 ``Mesh.PRIMITIVE_TRIANGLES`` PrimitiveType 的网格。"

msgid ""
"We initialize the MeshDataTool from an ArrayMesh by calling "
"``create_from_surface()``. If there is already data initialized in the "
"MeshDataTool, calling ``create_from_surface()`` will clear it for you. "
"Alternatively, you can call ``clear()`` yourself before re-using the "
"MeshDataTool."
msgstr ""
"我们通过调用 ``create_from_surface()`` 来使用 ArrayMesh 初始化 MeshDataTool。"
"如果该 MeshDataTool 中已经有初始化的数据了，调用 ``create_from_surface()`` 会"
"为你将其清除。或者你可以在重用 MeshDataTool 之前自己调用 ``clear()``\\ 。"

msgid ""
"In the examples below, assume an ArrayMesh called ``mesh`` has already been "
"created. See :ref:`ArrayMesh tutorial <doc_arraymesh>` for an example of "
"mesh generation."
msgstr ""
"下面的例子中，假定已经创建了一个名叫 ``mesh`` 的 ArrayMesh。网格生成的示例"
"见 :ref:`ArrayMesh 教程 <doc_arraymesh>`\\ 。"

msgid ""
"``create_from_surface()`` uses the vertex arrays from the ArrayMesh to "
"calculate two additional arrays, one for edges and one for faces, for a "
"total of three arrays."
msgstr ""
"``create_from_surface()`` 使用 ArrayMesh 中的顶点数组来计算另外两个数组，一个"
"是边、一个是面，总计三个数组。"

msgid ""
"An edge is a connection between any two vertices. Each edge in the edge "
"array contains a reference to the two vertices it is composed of, and up to "
"two faces that it is contained within."
msgstr ""
"边缘是任意两个顶点之间的连接. 边缘数组中的每一条边缘都包含了对它所组成的两个"
"顶点的引用, 以及它所包含的最多的两个面."

msgid ""
"A face is a triangle made up of three vertices and three corresponding "
"edges. Each face in the face array contains a reference to the three "
"vertices and three edges it is composed of."
msgstr ""
"面是由三个顶点和三条对应的边组成的三角形. 面数组中的每个面都包含了它所组成的"
"三个三角形和三条边的参考."

msgid ""
"The vertex array contains edge, face, normal, color, tangent, uv, uv2, bone, "
"and weight information connected with each vertex."
msgstr ""
"顶点数组包含与每个顶点相连的边、面、法线、颜色、切线、uv、uv2、骨骼和权重信"
"息。"

msgid ""
"To access information from these arrays you use a function of the form "
"``get_****()``:"
msgstr "为了从这些数组中获取信息, 你可以使用 ``get_ **** ()`` 的函数："

msgid ""
"What you choose to do with these functions is up to you. A common use case "
"is to iterate over all vertices and transform them in some way:"
msgstr ""
"你选择用这些函数做什么取决于你。一个常见的用例是对所有顶点进行迭代，并以某种"
"方式对它们进行转换："

msgid ""
"These modifications are not done in place on the ArrayMesh. If you are "
"dynamically updating an existing ArrayMesh, first delete the existing "
"surface before adding a new one using :ref:`commit_to_surface() "
"<class_meshdatatool_method_commit_to_surface>`:"
msgstr ""
"这些修改不是在 ArrayMesh 上直接进行的。如果你要动态更新现有的 ArrayMesh，请在"
"添加新表面前使用 :ref:`commit_to_surface() "
"<class_meshdatatool_method_commit_to_surface>` 来删除已有表面："

msgid ""
"Below is a complete example that turns a spherical mesh called ``mesh`` into "
"a randomly deformed blob complete with updated normals and vertex colors. "
"See :ref:`ArrayMesh tutorial <doc_arraymesh>` for how to generate the base "
"mesh."
msgstr ""
"下面是一个完整的示例，将一个叫做 ``mesh`` 的球体网格变成随机变形的块状，法线"
"和顶点颜色也进行了更新。如何生成基础网格见 :ref:`ArrayMesh 教程 "
"<doc_arraymesh>`。"

msgid "Translation status"
msgstr "翻译状态"
