# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Nodes and terminology"
msgstr "节点与术语"

msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"在继续之前，必须注意\\ *节点*\\ 这个术语需要谨慎使用。当指代\\ *Visual "
"Script 节点*\\ （也称\\ *节点*\\ ）时，此文本将指代用线连接的小盒子，它们是图"
"的一部分。当指代\\ *场景节点*\\ 时，它的意思的是构成场景的元素，是树的一部"
"分。它们的命名类似，但是功能不同。除非另有说明，否则此处的\\ *节点*\\ 指的是 "
"*Visual Script 节点*\\ 。"

msgid "Node properties"
msgstr "节点属性"

msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"与大多数可视化脚本实现一样, 每个节点都具有可编辑的属性. 但是, 在Godot中, 为了"
"便于阅读, 我们尽量避免使用可编辑的控件来复杂化节点."

msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""
"节点仍将所需信息显示为文本，但编辑是通过\\ *检查器*\\ 完成的。要编辑它们，请"
"选择任何节点并在\\ *检查器*\\ 中编辑其属性。"

msgid "Ports and connections"
msgstr "端口和连接"

msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Godot 可视化脚本中的编程是通过\\ *节点*\\ 和每个函数内的\\ *端口连接*\\ 完成"
"的。"

msgid "Ports"
msgstr "端口"

msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Godot 可视脚本中的节点具有\\ *端口*\\ 。这些端点出现在节点的左侧和右侧，并可"
"用于建立\\ *连接*\\ ：\\ *端口*\\ 有两种类型：\\ *序列*\\ 和\\ *数据*\\ 。"

msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""
"*序列端口* 指示执行操作的顺序. 通常, 当一个 *节点* 完成处理后, 它将从右侧的端"
"口之一转到下一个节点. 如果未连接任何内容, 则该函数可能会终止, 或者可能尝试另"
"一个输出 *序列端口* (取决于节点). 因此, 您可以遵循白线来遵循函数中的逻辑流"
"程. 并非每个 *节点* 都有 *序列端口*. 实际上, 大多数都没有."

msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"*数据端口* 端口包含类型化的值. 类型可以是任何常规Godot类型, 例如布尔, 整数, "
"字符串, Vector3, 数组, 任何对象或场景节点等. 节点右侧的 *数据端口* 被视为输"
"出, 而左侧的端口是输入. 连接它们可以使信息流动到下一个节点."

msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"但并非所有的 *数据端口* 类型都兼容并且允许连接. 要特别注意颜色和图标, 因为每"
"种类型都有不同的表示形式:"

msgid "Connections"
msgstr "连接"

msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr "连接是一个相对简单的过程。将\\ *输出端口*\\ 拖向\\ *输入端口*\\ 。"

msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"断开连接需要一点练习. 在 *数据端口* 断开是通过拖走 *输入* 来实现的, 而对于 *"
"序列端口*, 则通过拖走 *输出* 来实现."

msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""
"乍一看这很奇怪, 但是发生的原因是 *数据端口* 为 ``1:N`` (单个输出端口可以连接"
"到许多输入), 而 *序列端口* 为 ``N:1`` (许多序列输出可以连接到单个输入)."

msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"连接到空白区域(拖动以进行连接, 但在空白区域上未按下)也是上下文相关的, 它将提"
"供最常用操作的列表. 对序列, 它将是条件节点:"

msgid "While, for data, a contextual set/get/call menu will open:"
msgstr "而对于数据, 将打开上下文设置/获取/调用菜单:"

msgid "Adding nodes"
msgstr "添加节点"

msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"最后！我们到了有趣的部分！但是, 在更详细地解释每种类型节点的作用之前, 让我们"
"简单地看一下最常添加和处理节点的方式."

msgid "Accessing scene nodes"
msgstr "访问场景节点"

msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"最常见的任务之一是访问场景树节点（同样，不要与 *Visual Script 节点*\\ 混"
"淆）。从场景树中拖放到画布上，将要求你在此节点上\\ *调用方法*\\ （有时称为\\ "
"*成员函数*\\ ）。"

msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"虽然在大多数情况下都需要访问属性(在下面进行更多介绍), 但有时 *调用方法* 也可"
"能有用. 方法对对象执行特定的操作. 在上述情况下, 可以将鼠标指针映射到控件的局"
"部坐标中. 另一个常见用例是使用 ``queue_free`` 方法对要删除的节点进行排队."

msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"必须注意，仅当正在编辑的场景在其中一个节点中包含你的 *Visual Script* 时，这才"
"起作用！否则，将出现一个警告。"

msgid "Accessing scene node properties"
msgstr "访问场景节点属性"

msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"这是在可视化脚本中编辑\\ *场景节点*\\ 的最常用方法。从\\ *场景树*\\ 中选择 *"
"场景节点*\\ ，转到“检查器”，找到要编辑的属性的 *名称*\\ （提示，\\ *不是*\\ "
"值！）并将其拖到画布上："

msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr "结果是可以通过写入 *数据端口* 从脚本中更改此值."

msgid ""
"If instead reading this value is desired, drag the node again but hold :kbd:"
"`Ctrl` (or :kbd:`Cmd` on macOS). This will create a getter:"
msgstr ""
"如果需要读取该值, 请再次拖动该节点, 但按住 :kbd:`Ctrl` 键(macOS :kbd:`Cmd`). "
"这将创建一个 ``getter`` :"

msgid "In this case, the value can be read from a *Data Port*."
msgstr "在这种情况下, 可以从 *数据端口* 读取值."

msgid "Variables"
msgstr "变量"

msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"变量是脚本本地的, 可以保存值的内存容器. 可以通过上一步中描述的方法从脚本的任"
"何函数或从其他脚本中读取此值."

msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"要添加变量, 请按成员面板的 *变量* 部分中的 ``+`` 按钮. 双击新变量以重命名它:"

msgid "Right-clicking the variable allows you to configure its properties:"
msgstr "右键单击该变量可以配置其属性:"

msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""
"如上所示，变量的类型、初始值，以及一些属性提示都是可以修改的。选择“导出”选项"
"会在选择节点时使“检查器”中的变量可见。通过上一步中描述的方法，这也使其可用于"
"其他脚本。"

msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr "要在脚本中使用该变量, 只需将其拖到画布上即可创建一个 ``getter``:"

msgid "Likewise, hold :kbd:`Ctrl` (or :kbd:`Cmd` on macOS) to drop a setter:"
msgstr ""
"同样, 按住 :kbd:`Ctrl` ( 或者在macOS上按住 :kbd:`Cmd` )放置一个 ``setter`` :"

msgid "Signals"
msgstr "信号"

msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"也可以在脚本中创建自己的信号并使用它们. 为此, 除了 *信号* 之外, 执行与上一步"
"中的变量相同的步骤:"

msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr "也可以通过右键单击菜单来编辑信号以自定义其参数:"

msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""
"您创建的信号将与内置节点信号一起出现在检查器中。这使您可以从另一个\\ *场景节"
"点*\\ 中的另一个脚本连接它："

msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr "最后, 要发出信号, 只需将其拖动到画布上:"

msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr "请记住, 发出信号是一种顺序操作, 因此它必须来自序列端口."

msgid "Adding more nodes"
msgstr "添加更多节点"

msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"既然已经涵盖了基础知识, 那么让我们讨论一下可用于画布的大量实用程序节点！ 在成"
"员面板下方, 存在所有可用节点类型的列表:"

msgid ""
"Pressing :kbd:`Ctrl + F` (or :kbd:`Cmd + F` on macOS) allows you to search "
"the list."
msgstr "按下 :kbd:`Ctrl + F` (或macOS :kbd:`Cmd + F` ) 打开搜索列表."

msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"它们中的任何一个都可以拖到场景中。与节点不同（例如，从检查器中拖动属性会自动"
"将上下文设置为在编辑的节点），这些节点的添加没有任何“上下文”信息，因此必须手"
"动完成。"

msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"请记住, 你可以检查类参考以了解每个节点的功能, 因为在那里有文档记录. 提到的, "
"节点类型的简要概述如下:"

msgid "Constants"
msgstr "常量"

msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"常量节点是提供值的节点, 这些值虽然不随时间变化, 但可用作参考值. 大多数情况下"
"它们是整数或浮点数."

msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""
"第一个是 ``Constant``, 它允许您选择任何类型的任何值作为常量, 从整数(``42``)到"
"字符串(``Hello!``). 通常, 由于 *数据节点* 中的默认输入值, 通常不使用此节点, "
"但知道它存在是很好的."

msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"第二个是 ``GlobalConstant`` 节点, 其中包含Godot中用于全局类型的一长串常量. 在"
"这里, 你可以找到一些有用的常量来引用键名, 手柄或鼠标按钮等."

msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr "第三个是 ``MathConstant``, 它提供典型的数学常数, 如PI, E等."

msgid "Data"
msgstr "数据"

msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"数据节点处理各种对信息的访问.Godot中的任何信息都可以通过这些节点进行访问, 因"
"此它们是一些最重要的节点, 并且种类繁多."

msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr "这里有趣的节点有很多类型, 因此下面将简要描述它们:"

msgid "Action"
msgstr "动作"

msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"在处理来自设备的输入时, 动作节点至关重要. 你可以在(@TODO ACTION TUTE LINK)中"
"阅读有关动作的更多信息. 在下面的示例中, 当按下 ``move_right`` 动作时, 控件将"
"移动到右侧."

msgid "Engine Singleton"
msgstr "引擎单例(``Singleton``)"

msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""
"引擎单例是全局接口(这意味着无需引用即可访问它们；与场景节点不同, 它们始终可"
"用). 它们有多种用途, 但总的来说, 它们对于低级访问或与操作系统相关的访问很有"
"用."

msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr "请记住, 将连接拖动到空白区域将有助于你调用以下函数或设置/获取属性:"

msgid "Local Variables"
msgstr "局部变量"

msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""
"这些节点可以用作图形的临时存储. 确保它们在使用时都具有相同的名称和类型, 并且"
"它们将引用相同的内存."

msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced setter (setting requires a sequence port)."
msgstr ""
"从上面可以看到, 有两个可用的节点: 一个简单的 ``getter`` 和一个左侧有序列端口"
"的 ``setter`` (设置需要一个序列端口)."

msgid "Scene Node"
msgstr "场景节点"

msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""
"这只是对树中节点的引用, 但是通过将实际节点从场景树拖动到画布上(这将创建并配置"
"它), 将更易于使用此节点."

msgid "Self"
msgstr "仅自己"

msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""
"在极少数情况下, 可能需要将此场景节点作为参数传递. 为此, 可以调用函数并设置/获"
"取属性, 或将节点(或甚至具有脚本的节点本身)从场景树拖到画布上."

msgid "SceneTree"
msgstr "SceneTree"

msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""
"此节点类似于 ``Singleton`` 节点, 因为它引用包含活动场景的 ``SceneTree``. 但"
"是, ``SceneTree`` 仅在节点位于场景中并且处于活动状态时才起作用, 否则访问它将"
"返回一个错误."

msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""
"``SceneTree`` 允许许多低级别的事情, 比如设置拉伸选项, 调用编组, 制作计时器, "
"甚至加载另一个场景. 这是一个适合熟悉的类."

msgid "Preload"
msgstr "预加载(``Preload``)"

msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""
"这与GDScript中的 ``preload()`` 功能相同. 它维护此资源已加载并可以使用. 与实例"
"化节点相比, 将所需的资源从文件系统停靠面板拖到画布上更为简单."

msgid "Resource Path"
msgstr "资源路径"

msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""
"此节点是一个简单的帮助器, 用于获取你选择的资源的路径的字符串. 它在从磁盘加载"
"东西的函数中很有用."

msgid "Comment"
msgstr "注释(``Comment``)"

msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""
"``Comment`` 节点用作可以调整大小以放置其他节点的节点. 在选择它时, 它不会试图"
"获得焦点或被放到顶层. 它也可以用来在上面写文字."

msgid "Flow Control"
msgstr "流控制"

msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr "流控制节点通常根据给定条件, 允许执行以采取不同的分支."

msgid "Condition"
msgstr "条件(``Condition``)"

msgid ""
"This is a simple node that checks a bool port. If ``true``, it will go via "
"the \"true\" sequence port. If ``false``, the second. After going for either "
"of them, it goes via the \"done\" port. Leaving sequence ports disconnected "
"is fine if not all of them are used."
msgstr ""
"这是一个检查布尔端口的简单节点. 如果为 ``true`` , 它将执行 ``true`` 序列端"
"口. 如果为 ``false`` , 则执行第二个. 在执行完上面两个端口中的任意一个时, 会执"
"行 ``done`` 端口. 对没有使用的端口保持断开即可."

msgid "Iterator"
msgstr "迭代器(``Iterator``)"

msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""
"Godot中的某些数据类型(即数组, 字典)是可迭代的. 这意味着可以为它具有的每个元素"
"运行一些代码."

msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""
"Iterator 节点遍历所有元素，并且对于每个元素，它通过“each”序列端口，从而使元素"
"在“elem”数据端口中可用。"

msgid "When done, it goes via the \"exit\" sequence port."
msgstr "完成后，它将通过“exit”序列端口。"

msgid "Return"
msgstr "返回(``Return``)"

msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""
"某些函数可以返回值. 一般来说, 对于虚函数,Godot会为你添加 ``Return`` 节点. 返"
"回节点强制函数结束."

msgid "Sequence"
msgstr "序列(``Sequence``)"

msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr "此节点主要用于组织图形. 它按顺序调用其序列端口."

msgid "TypeCast"
msgstr "类型转换(``TypeCast``)"

msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""
"这是一个有用且常用的节点. 您可以使用它将参数或其他对象转换为您想要的类型. 之"
"后, 您甚至可以拖动对象输出以完全完成."

msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr "也可以转换为脚本, 这将允许完整的脚本属性和功能:"

msgid "Switch"
msgstr "选择(``Switch``)"

msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr "``Switch`` 节点类似于 ``Condition`` 节点, 但它同时匹配许多值."

msgid "While"
msgstr "While"

msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""
"这是一种更原始的迭代形式. 只要满足 ``cond`` 数据端口中的条件, 就会调用 ``重复"
"`` 序列输出."

msgid "Functions"
msgstr "函数"

msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""
"函数是简单的帮助器, 大多数情况下都是确定的. 它们将一些参数作为输入并返回输"
"出. 它们几乎从未排序."

msgid "Built-In"
msgstr "内置"

msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from :ref:`GDScript<class_@GDScript>`. Most of them are mathematical "
"functions, but others can be useful helpers. Make sure to take a look at the "
"list at some point."
msgstr ""
"有一个内置帮助器列表. 该列表与 :ref:`GDScript<class_@GDScript>` 中的列表几乎"
"相同. 它们中的大多数是数学函数, 但其他函数可能是有用的帮助器. 请确保一定要看"
"一下清单."

msgid "By Type"
msgstr "按类型"

msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""
"这些是基本类型可用的方法. 例如, 如果你想要一个点积, 你可以搜索 ``点(dot)`` 而"
"不是 ``Vector3`` 类型. 在大多数情况下, 只需搜索节点列表即可, 它应该更快."

msgid "Call"
msgstr "调用(``Call``)"

msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""
"这是通用调用节点. 很少直接使用它, 而是通过拖动到已配置的节点上的空白处."

msgid "Constructors"
msgstr "构造函数"

msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""
"这些是创建Godot基本数据类型所需的所有函数. 例如, 如果需要从3个浮点数中创建一"
"个 ``Vector3``, 则必须使用构造函数."

msgid "Destructor"
msgstr "析构函数"

msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr "这与构造函数相反, 它允许将任何基本类型(即 ``Vector3``)分离到子元素中."

msgid "Emit Signal"
msgstr "发射信号"

msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""
"从任何物体发出信号. 一般来说, 这并不是很有用, 因为拖动信号到画布的效果更好."

msgid "Get/Set"
msgstr "获取/设置"

msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""
"通用的 ``Getter/Setter`` 节点。从检查器中拖拽属性效果更好，因为在拖放时它们就"
"被正确配置。"

msgid "Wait"
msgstr "等待（\\ ``Wait``\\ ）"

msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""
"``Wait`` 节点将暂停执行函数直到发生某些事情(实际上, 直到恢复, 可以经过许多"
"帧). 默认节点允许你等待经过一帧, 一固定帧或给定的时间量, 直到恢复执行为止."

msgid "Yield"
msgstr "Yield"

msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr "这个节点完全暂停脚本的执行, 它将使函数返回一个值, 该值可用于恢复执行."

msgid "Yield Signal"
msgstr "Yield 信号"

msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr "与 ``Yield`` 相同, 但要等到一个给定的信号发出."

msgid "Index"
msgstr "索引"

msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr "通用索引操作符, 不常用, 但它的存在是好的, 以防万一."

msgid "Operators"
msgstr "运算符"

msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""
"这些大多是通用运算符, 例如加法, 乘法, 比较等. 默认情况下, 它们大多数都接受任"
"何数据类型(如果输入的类型与运算符期望的类型不匹配, 则在运行时将引发错误). 始"
"终建议为运算符设置正确的类型, 以更快地发现错误并使图形更易于阅读."

msgid "Expression Node"
msgstr "表达式节点"

msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""
"*Expression* 节点是所有操作符中最强大的。如果使用得当，它可以极大地简化数学或"
"逻辑繁重的可视化脚本。在上面键入的任何表达式，它将实时执行。"

msgid "Expression nodes can:"
msgstr "表达式节点可以："

msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""
"根据自定义输入, 执行数学和逻辑表达式(例如: ``a*5+b``, 其中 ``a`` 和 ``b`` 为"
"自定义输入):"

msgid "Access local variables or properties:"
msgstr "访问局部变量或属性:"

msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as ``sin()``, ``cos()``, ``print()``, as well as constructors, such as "
"``Vector3(x, y, z)``, ``Rect2(...)``, etc.:"
msgstr ""
"使用GDScript现有的大部分内置函数, 例如 ``sin()`` , ``cos()`` , ``print()`` , "
"以及构造函数, 例如 ``Vector3(x,y,z)`` , ``Rect2(..)`` 等:"

msgid "Call API functions:"
msgstr "调用API函数:"

msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr "使用顺序模式, 这在遵守处理顺序的情况下更有意义:"

msgid "Translation status"
msgstr "翻译状态"
