# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDNative C example"
msgstr "GDNative C 示例"

msgid "Introduction"
msgstr "前言"

msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""
"本教程将向你介绍创建GDNative模块的最低要求. 这应该是你进入GDNative世界的起"
"点. 了解本教程的内容将有助于你理解之后的所有内容."

msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."
msgstr ""
"在我们开始之前, 你可以在 `GDNative-demos 仓库 <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_ 下载我们下面描述的例子对象"
"的源代码."

msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""
"这个例子项目还包含一个SConstruct文件, 使编译变得更容易一些, 但在本教程中, 我"
"们将通过手工操作来了解这个过程."

msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""
":ref:`GDNative <class_GDNative>` 可用于创建多种类型的Godot附加功能, 使用的接"
"口有 :ref:`PluginScript <class_PluginScript>` 或 :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>` . 在本教程中, 我们将探讨如何创建一个 :ref:"
"`NativeScript <class_NativeScript>` 模块.NativeScript允许用C或C++写逻辑, 就像"
"写GDScript文件一样. 我们将创建这个GDScript的C语言等效物:"

msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""
"未来的教程将重点介绍其他类型的GDNative模块, 并解释何时以及如何使用每一种模块."

msgid "Prerequisites"
msgstr "先决条件"

msgid "Before we start you'll need a few things:"
msgstr "在我们开始之前, 您需要一些东西:"

msgid "A Godot executable for your target version."
msgstr "目标版本的Godot可执行文件."

msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""
"一个C语言编译器. 在Linux上, 从你的软件包管理器安装 ``gcc`` 或 ``clang`` . 在"
"macOS上, 你可以从Mac App Store上安装Xcode. 在Windows上, 你可以使用Visual "
"Studio 2015或更高版本, 或者MinGW-w64."

msgid ""
"A Git clone of the `godot-headers repository <https://github.com/godotengine/"
"godot-headers.git>`_: these are the C headers for Godot's public API exposed "
"to GDNative."
msgstr ""
"Git 克隆 `godot-headers 仓库 <https://github.com/godotengine/godot-headers."
"git>`_\\ ：这些是暴露给 GDNative 的 Godot 公共 API 的 C 头文件。"

msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""
"对于后者, 我们建议你为这个GDNative示例项目创建一个专用文件夹, 在该文件夹中打"
"开终端并执行:"

msgid "This will download the required files into that folder."
msgstr "这会将所需文件下载到该文件夹中."

msgid ""
"If you plan to use Git for your GDNative project, you can also add ``godot-"
"headers`` as a Git submodule."
msgstr ""
"如果你打算在你的 GDNative 项目中使用 Git，可以将 ``godot-headers`` 添加为 "
"Git 子模块。"

msgid ""
"The ``godot-headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.4``) and ideally actual release (e.g. ``3.4.4-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""
"``godot-headers`` 仓库有不同的分支。GDNative 也在随着 Godot 发展。虽然我们努"
"力保持不同版本之间的兼容性，但你应该根据 Godot 稳定分支（如 ``3.4`` ）和实际"
"情况使用版本（如 ``3.4.4-stable`` ）构建你的 GDNative 模块。用旧版本的 Godot "
"头文件构建的 GDNative 模块\\ *可能*\\ 可以在新版本的引擎上运行，但反之则不"
"行。"

msgid ""
"The ``master`` branch of the ``godot-headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""
"``godot-headers`` 仓库的 ``master`` 分支与Godot的 ``master`` 分支保持一致，因"
"此包含了GDNative类和结构定义，可以在最新的开发版本中运行。"

msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot-headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.4.4-stable`` tag for "
"use with Godot 3.4.4. In your cloned repository, you can do:"
msgstr ""
"如果你想为 Godot 的稳定版本编写 GDNative 模块，请查看可用的 Git 标签（用 "
"``git tags``\\ ），找到与你的引擎版本匹配的标签。在 ``godot-headers`` 仓库"
"中，这些标签以 ``godot-`` 为前缀，所以你可以检查 ``godot-3.4.4-stable`` 标"
"签，以用于 Godot 3.4.4。在你的克隆版本库中，可以执行以下操作："

msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.4``), which you would also "
"check out with ``git checkout 3.4``."
msgstr ""
"如果由于任何原因缺少了与稳定版相匹配的标签，你可以回到与之相匹配的稳定分支"
"（例如 ``3.4``\\ ），你也可以用 ``git checkout 3.4`` 来获取。"

msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""
"如果您使用您自己的影响 GDNative 的更改从源代码构建 Godot，您可以在 "
"``<godotsource>/modules/gdnative/include`` 中找到更新的类和结构定义"

msgid "Our C source"
msgstr "我们的 C 源代码"

msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""
"让我们从编写我们的主代码开始. 最终, 我们希望有一个文件结构, 看起来像这样:"

msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot-headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""
"打开Godot，在你的 ``godot-headers`` Git克隆旁创建一个名为 ``simple`` 的新项"
"目。这将创建 ``simple`` 文件夹和 ``project.godot`` 文件。然后在 ``simple`` 文"
"件夹旁边手动创建 ``src`` 文件夹，并在 ``simple`` 文件夹中创建一个 ``bin`` 子"
"文件夹。"

msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""
"我们先来看看我们的 ``simple.c`` 文件包含什么. 现在, 在我们的例子中, 只做了一"
"个没有头文件的C源文件, 以保持事情的简单. 一旦你开始编写更大的项目, 建议将你的"
"项目分成多个文件. 但这不属于本教程的范围."

msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""
"我们将一点一点地看源代码, 所以下面所有的部分应该都放在一个大文件里. 每一部分"
"在我们添加它的时候进行解释."

msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""
"上面的代码包括GDNative API结构头文件和一个标准头文件, 我们将进一步使用这个头"
"文件进行字符串操作. 然后它定义了两个指向两个不同结构的指针.GDNative支持大量的"
"函数, 用于回调到Godot的主可执行文件. 为了让你的模块能够访问这些函数,GDNative"
"为你的应用程序提供了一个包含所有这些函数指针的结构."

msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""
"为了保持这种实现模块化和易于扩展，核心功能可直接通过 ``core`` API 结构提供，"
"但其他功能有自己的 ``GDNative struct`` 结构体，可通过扩展访问。"

msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""
"在我们的示例中, 我们访问其中一个扩展, 以获取对NativeScript特别需要的函数的访"
"问权限."

msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""
"NativeScript的行为与Godot中的任何其他脚本一样. 由于NativeScript API的级别相当"
"低, 因此它需要库比其他脚本系统(如GDScript)更详细地指定许多内容. 创建"
"NativeScript实例时, 将调用库给定的构造函数. 当该实例被销毁时, 将执行给定的析"
"构函数."

msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""
"这些是我们将为对象实现的函数的前置声明. 需要一个构造函数和析构函数. 此外, 该"
"对象将有一个名为 ``get_data`` 的方法."

msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""
"接下来是Godot在加载动态库时将调用的第一个入口点. 这些方法的前缀都是 "
"``godot_`` (你可以在后面修改), 其后是它们的名字. ``gdnative_init`` 是一个初始"
"化动态库的函数.Godot会给它一个指向结构的指针, 该结构包含各种我们可能觉得有用"
"的信息, 其中包括指向API结构的指针."

msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr "对于任何其他API结构, 我们需要遍历扩展数组并检查扩展的类型."

msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""
"接下来是 ``gdnative_terminate`` , 在卸载库之前调用它. 当没有任何对象使用它时,"
"Godot将卸载库. 在这里, 您可以进行任何需要清理的清理工作. 对于我们的示例, 我们"
"只是要清除我们的API指针."

msgid ""
"Finally, we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""
"最后, 我们有 ``nativescript_init`` , 这是我们今天需要的最重要的函数. 这个函数"
"将被Godot调用, 作为加载GDNative库的一部分, 并将我们提供的对象反馈给引擎."

msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""
"我们首先通过调用 ``nativescript_register_class`` 来告诉引擎哪些类是可以实现"
"的. 这里的第一个参数是句柄指针. 第二个是对象类的名称. 第三个是 '继承' 的Godot"
"中的对象类型；这不是真正的继承, 但也足够接近. 最后, 第四和第五个参数是对构造"
"函数和析构函数的描述."

msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot-headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""
"然后我们通过调用 ``nativescript_register_method`` 来告诉 Godot 我们的方法，本"
"例中是我们的一个方法。在我们的例子中，就是 ``get_data``\\ 。第一个参数仍然是"
"句柄指针。第二个是我们要注册的对象类的名称。第三个是函数的名字，它将被 "
"GDScript 所知。第四个是属性设置，参阅 ``godot-headers/nativescript/"
"godot_nativescript.h`` 中的 ``godot_method_rpc_mode`` 枚举的相关值，第五个也"
"是最后一个参数是调用方法时要调用的函数的描述。"

msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""
"描述结构 ``instance_method`` 包含函数本身的指针, 作为第一个字段. 这些结构中的"
"另外两个字段是用于指定每个方法的用户数据. 第二个字段是 ``method_data`` , 在每"
"次函数调用时作为 ``p_method_data`` 参数传递. 这对于在可能的多个不同的脚本类的"
"不同方法上重复使用一个函数是很有用的. 如果 ``method_data`` 值是一个需要释放的"
"内存指针, 第三个 ``free_func`` 字段可以包含一个指向释放该内存的函数的指针. 当"
"脚本本身(不是实例！)被卸载时(所以通常是在库卸载时), 这个释放函数会被调用."

msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""
"现在, 是时候开始处理我们对象的功能了. 首先, 我们定义一个结构, 用于存储"
"GDNative类实例的成员数据."

msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""
"然后, 我们定义我们的构造函数. 我们在构造函数中所做的就是为结构分配内存并用一"
"些数据填充它. 请注意, 我们使用Godot的内存函数, 以便跟踪内存, 然后将指针返回到"
"我们的新结构. 如果实例化多个对象, 则此指针将充当我们的实例标识符."

msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""
"该指针将作为名为 ``p_user_data`` 的参数传递给与我们的对象相关的任何函数, 并且"
"可以用于标识我们的实例并访问其成员数据."

msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr "当Godot完成我们的对象时, 我们会调用析构函数, 并释放实例的成员数据."

msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""
"最后, 我们实现我们的 ``get_data`` 函数. 数据总是以变量的形式发送和返回, 所以"
"为了返回我们的数据, 也就是一个字符串, 我们首先需要把C语言的字符串转换成Godot"
"的字符串对象, 然后把这个字符串对象复制到我们要返回的变量中."

msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""
"字符串在 Godot 中进行堆分配，因此它们具有释放内存的析构函数。析构函数名为 "
"``godot_类型名称_destroy``\\ 。使用 String 创建 Variant 时，它会引用这个 "
"String。这意味着可以“销毁”原始 String 以减少引用计数。如果没有发生这种情况，"
"String 的内存将泄漏，因为引用计数永远不会为零，内存永远不会被释放。返回的变体"
"会被 Godot 自动销毁。"

msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""
"在更复杂的操作中，跟踪哪个值需要重新分配以及哪个值不需要可能会造成混淆。一般"
"来说：当将调用 C++ 析构函数时，请调用 ``godot_类型名称_destroy``\\ 。创建 "
"Variant 后，将调用 C++ 中的 String 类析构函数，在 C 中也是如此。"

msgid "The variant we return is destroyed automatically by Godot."
msgstr "我们返回的变体由Godot自动销毁."

msgid "And that is the whole source code of our module."
msgstr "这就是我们模块的完整源代码."

msgid "Compiling"
msgstr "编译"

msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""
"我们现在需要编译我们的源代码. 如前所述, 我们在GitHub上的示例项目包含一个SCons"
"配置, 它为你做了所有的艰苦工作, 但在我们的教程中, 我们将直接调用编译器."

msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""
"假设你坚持使用上面建议的文件夹结构, 最好在 ``src`` 文件夹中打开一个终端会话, "
"从那里执行命令. 确保在你继续之前创建 ``bin`` 文件夹."

msgid "On Linux:"
msgstr "在Linux上:"

msgid "On macOS:"
msgstr "在macOS上:"

msgid "On Windows:"
msgstr "在Windows上:"

msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""
"在Windows构建中, 你还会得到一个 ``libsimple.lib`` 库. 这是一个库, 你可以将其"
"编译到项目中, 以提供对DLL的访问. 我们得到的是一个副产品, 我们不需要它:)当把你"
"的游戏导出发布时, 这个文件将被忽略."

msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr "创建GDNativeLibrary (``.gdnlib``)文件"

msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""
"模块编译完成后, 需要创建一个相应的 :ref:`GDNativeLibrary "
"<class_GDNativeLibrary>` 资源, 扩展名为 ``.gdnlib`` , 与动态库放在一起. 这个"
"文件告诉Godot哪些动态库是模块的一部分, 需要在每个平台上加载."

msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr "我们可以使用Godot来生成这个文件, 所以在编辑器中打开 \"简单\" 项目."

msgid "Start by clicking the create resource button in the Inspector:"
msgstr "首先单击“检查器”中的创建资源按钮："

msgid "And select ``GDNativeLibrary``:"
msgstr "并选择 ``GDNativeLibrary``:"

msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""
"你应该看到一个上下文编辑器出现在底部面板中. 使用右下角的 \"展开底部面板\" 按"
"钮将其展开到全高:"

msgid "General properties"
msgstr "常规属性"

msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr "在检查器中, 你有各种属性来控制加载库."

msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""
"如果启用 *Load Once* , 我们的库只被加载一次, 每个使用我们库的单独脚本将使用相"
"同的数据. 你在全局定义的任何变量都可以从你创建的对象的任何实例中访问. 如果禁"
"用 *Load Once* , 那么每次脚本访问库的时候都会有一份新的库被加载到内存中."

msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""
"如果 *Singleton* 被启用, 我们的库就会自动加载, 并调用一个叫做 "
"``godot_gdnative_singleton`` 的函数. 我们将把这个问题留给另一个教程."

msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""
"*符号前缀* 是我们核心函数的前缀, 比如前面看到的 ``godot_`` 中的 "
"``godot_nativescript_init`` . 如果你使用多个希望静态链接的GDNative库, 你将不"
"得不使用不同的前缀. 这又是一个需要在单独的教程中深入探讨的问题, 目前只需要在"
"部署到iOS时使用, 因为这个平台不喜欢动态库."

msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""
"*Reloadable* 定义了当编辑器失去和获得焦点时, 是否应该重新加载库, 通常是为了从"
"外部对库的任何变化中获取新的或修改的符号."

msgid "Platform libraries"
msgstr "平台库"

msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""
"GDNativeLibrary编辑器插件可以让你为你所要支持的每个平台和架构配置两件事."

msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""
"*动态库* 一栏(保存文件中的 ``entry`` 部分)告诉我们每个平台和特征组合需要加载"
"哪个动态库. 这也告知导出器在向特定平台导出时需要导出哪些文件."

msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""
"*Dependencies* 列(也称 ``依赖`` 部分)告诉Godot为了让库工作, 每个平台还需要导"
"出哪些文件. 如果您的GDNative模块使用另一个DLL来实现第三方库的功能, 这就是您列"
"出该DLL的地方."

msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""
"在我们的例子中, 我们只构建了Linux, macOS和/或Windows的库, 所以你可以通过点击"
"文件夹按钮在相关字段中链接它们. 如果你建立了所有三个库, 你应该有这样的东西:"

msgid "Saving the resource"
msgstr "保存资源"

msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""
"然后, 我们可以通过检查器中的保存按钮将GDNativeLibrary资源保存为 ``bin/"
"libsimple.gdnlib``:"

msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr "该文件以基于文本的格式保存, 其内容应类似于以下内容:"

msgid "Creating the NativeScript (``.gdns``) file"
msgstr "创建NativeScript (``.gdns``)文件"

msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"SIMPLE\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""
"通过 ``.gdnlib`` 文件，我们已经告诉 Godot 如何加载库，现在需要告诉它关于我们"
"的“SIMPLE”对象类。通过创建一个 :ref:`NativeScript <class_NativeScript>` 资源"
"文件，扩展名为 ``.gdns``\\ 。"

msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""
"就像对GDNativeLibrary资源所做的那样, 点击按钮在检查器中创建一个新资源, 并选"
"择 ``NativeScript``:"

msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"SIMPLE\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""
"检查器将显示一些我们需要填写的属性。在 *Class Name* 中，输入 \"SIMPLE\" ，这"
"是在调用 ``godot_nativescript_register_class`` 时在C源码中声明的对象类名称。"
"通过点击 *Library* 和选择 *Load* 来选择我们的 ``.gdnlib`` 文件:"

msgid ""
"The *Class Name* must have the same spelling as the one given in "
"``godot_nativescript_init`` when registering the class."
msgstr "*类名* 必须与注册时在 ``godot_nativescript_init`` 中给出的拼写相同."

msgid "Finally, click on the save icon and save this as ``bin/simple.gdns``:"
msgstr "最后点击保存图标并将其另存为 ``bin/simple.gdns`` :"

msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""
"现在是时候建立我们的场景了. 在你的场景中添加一个控件节点作为根节点, 并命名为 "
"``main`` . 然后添加一个按钮和一个标签作为子节点. 把它们放在屏幕上合适的地方, "
"并给你的按钮起个名字."

msgid "Select the control node and attach a script to it:"
msgstr "选择控制节点, 给它附加一个脚本:"

msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr "接下来将按钮上的 ``pressed`` 信号与你的脚本连接起来:"

msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr "不要忘记保存你的场景, 把它称为 ``main.tscn`` ."

msgid "Now we can implement our ``main.gd`` code:"
msgstr "现在我们可以实现 ``main.gd`` 代码:"

msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""
"做完这一切后, 我们的项目就可以工作了. 第一次运行时,Godot会询问主场景设置, 选"
"择 ``main.tscn`` 文件, 然后就可以了:"

msgid "Translation status"
msgstr "翻译状态"
