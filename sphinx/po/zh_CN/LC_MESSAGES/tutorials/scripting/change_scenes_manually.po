# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Change scenes manually"
msgstr "手动更改场景"

msgid ""
"Sometimes it helps to have more control over how one swaps scenes around. As "
"mentioned above, a :ref:`Viewport <class_Viewport>`'s child nodes will "
"render to the image it generates. This holds true even for nodes outside of "
"the \"current\" scene. Autoloads fall into this category, but so do scenes "
"which one instances and adds to the tree at runtime:"
msgstr ""
"有时候, 有必要更好地控制如何交换场景. 如上所述, 一个 :ref:`Viewport "
"<class_Viewport>` 的子节点将呈现给它生成的图像. 即使对于 \"当前\" 场景之外的"
"节点, 这也适用. Autoloads属于这一类, 但是一个实例在运行时添加到树中的场景也是"
"如此:"

msgid ""
"To complete the cycle and swap out the new scene with the old one, "
"developers have a choice to make. Many strategies exist for removing a scene "
"from view of the :ref:`Viewport <class_Viewport>`. The tradeoffs involve "
"balancing operation speed and memory consumption as well as balancing data "
"access and integrity."
msgstr ""
"要完成循环并将旧场景替换为旧场景, 开发人员可以选择制作. 从视图中删除场景有很"
"多策略 :ref:`Viewport <class_Viewport>`. 权衡涉及平衡操作速度和内存消耗以及平"
"衡数据访问和完整性."

msgid ""
"**We can delete the existing scene.** :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` and :ref:`SceneTree.change_scene_to() "
"<class_SceneTree_method_change_scene_to>` will delete the current scene "
"immediately. Developers can also delete the main scene though. Assuming the "
"root node's name is \"Main\", one could do ``get_node(\"/root/Main\")."
"free()`` to delete the whole scene."
msgstr ""
"**我们可以删除现有场景.** :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` 和 :ref:`SceneTree.change_scene_to() "
"<class_SceneTree_method_change_scene_to>` 会立即删除当前场景. 不过开发者也可"
"以删除主场景. 假设根节点的名字是 \"Main\", 可以执行 ``get_node(\"/root/"
"Main\").free()`` 来删除整个场景."

msgid "Unloads memory."
msgstr "卸载内存."

msgid "Pro: RAM is no longer dragging the dead weight."
msgstr "好处: RAM不再拖累自重."

msgid ""
"Con: Returning to that scene is now more expensive since it must be loaded "
"back into memory again (takes time AND memory). Not a problem if returning "
"soon is unnecessary."
msgstr ""
"坏处: 回到那个场景现在更加昂贵, 因为它必须再次加载回内存(需要时间和内存). 如"
"果不久就回来是不必要的."

msgid ""
"Con: No longer have access to that scene's data. Not a problem if using that "
"data soon is unnecessary."
msgstr "坏处: 无法再访问该场景的数据. 如果不久就使用这些数据就不成问题了."

msgid ""
"Note: It can be useful to preserve the data in a soon-to-be-deleted scene by "
"re-attaching one or more of its nodes to a different scene, or even directly "
"to the :ref:`SceneTree <class_SceneTree>`."
msgstr ""
"注意: 通过将一个或多个节点重新附加到不同的场景, 甚至直接将其重新附加到 :ref:"
"`SceneTree <class_SceneTree>`, 可以将数据保存在即将删除的场景中."

msgid "Processing stops."
msgstr "处理停止."

msgid ""
"Pro: No nodes means no process, physics process, or input handling. The CPU "
"is available to work on the new scene's contents."
msgstr ""
"好处: 没有节点意味着没有进程, 物理过程或输入处理. CPU可用于处理新场景的内容."

msgid ""
"Con: Those nodes' processing and input handling no longer operate. Not a "
"problem if using the updated data is unnecessary."
msgstr ""
"坏处: 这些节点的处理和输入处理不再运行. 如果不需要使用更新的数据, 则不成问题."

msgid ""
"**We can hide the existing scene.** By changing the visibility or collision "
"detection of the nodes, we can hide the entire node sub-tree from the "
"player's perspective."
msgstr ""
"**我们可以隐藏现有场景.** 通过更改节点的可见性或碰撞检测, 我们可以从游戏角色"
"的角度隐藏整个节点子树."

msgid "Memory still exists."
msgstr "记忆仍然存在."

msgid "Pro: One can still access the data if need be."
msgstr "好处: 如果需要, 仍然可以访问数据."

msgid "Pro: There's no need to move any more nodes around to save data."
msgstr "好处: 无需再移动任何节点来保存数据."

msgid ""
"Con: More data is being kept in memory which will be become a problem on "
"memory-sensitive platforms like web or mobile."
msgstr ""
"坏处: 更多数据被保存在内存中, 这将成为对内存敏感平台(如Web或移动设备)的问题."

msgid "Processing continues."
msgstr "处理继续."

msgid ""
"Pro: Data continues to receive processing updates, so the scene will keep "
"updated any data within it that relies on delta time or frame data."
msgstr ""
"好处: 数据继续接收处理更新, 因此场景将不断更新其中依赖于增量时间或帧数据的任"
"何数据."

msgid ""
"Pro: Nodes are still members of groups (since groups belong to the :ref:"
"`SceneTree <class_SceneTree>`)."
msgstr ""
"Pro: 节点仍然是组的成员(因为组属于 :ref:`SceneTree <class_SceneTree>`)."

msgid ""
"Con: The CPU's attention is now divided between both scenes. Too much load "
"could result in low frame rates. One should be sure to test performance as "
"they go to ensure the target platform can support the load they are giving "
"it."
msgstr ""
"坏处: 现在CPU的注意力分散在两个场景之间. 负载过大可能导致帧速率降低. 应该确保"
"测试性能, 以确保目标平台能够支持它们提供的负载."

msgid ""
"**We can remove the existing scene from the tree.** Assign a variable to the "
"existing scene's root node. Then use :ref:`Node.remove_child(Node) "
"<class_Node_method_remove_child>` to detach the entire scene from the tree."
msgstr ""
"**我们可以从树上删除现有的场景.** 给现有场景的根节点分配一个变量. 然后使用 :"
"ref:`Node.remove_child(Node) <class_Node_method_remove_child>` 来将整个场景从"
"树上分离."

msgid "Memory still exists (similar pros/cons as with hiding it from view)."
msgstr "记忆仍然存在(与从视图中隐藏它相似的优点/缺点)."

msgid "Processing stops (similar pros/cons as with deleting it completely)."
msgstr "处理停止(类似于完全删除它的优点/缺点)."

msgid ""
"Pro: This variation of \"hiding\" it is much easier to show/hide. Rather "
"than potentially keeping track of multiple changes to the scene, one must "
"only call the one method add/remove_child pair of methods. It is similar to "
"disabling game objects in other engines."
msgstr ""
"好处：这种形式的“隐藏”更容易进行显示/隐藏。人们必须只调用一个方法 add / "
"remove_child 方法，而不是潜在地跟踪场景的多个变化。它类似于在其他引擎中禁用游"
"戏对象。"

msgid ""
"Con: Unlike with hiding it from view only, the data contained within the "
"scene will become stale if it relies on delta time, input, groups, or other "
"data that is derived from :ref:`SceneTree <class_SceneTree>` access."
msgstr ""
"坏处：与仅从视图中隐藏它不同，如果场景中包含的数据依赖于时间增量、输入、分组"
"或其他通过访问 :ref:`SceneTree <class_SceneTree>` 才能得到的数据，则它将变为"
"陈旧。"

msgid ""
"There are also cases where one may wish to have many scenes present at the "
"same time. Perhaps one is adding their own singleton at runtime, or "
"preserving a a scene's data between scene changes (adding the scene to the "
"root node)."
msgstr ""
"在有些情况下, 人们可能希望有许多场景同时存在. 也许人们在运行时添加他们自己的"
"单例, 或者在场景变化之间保留一个场景的数据(将场景添加到根节点)."

msgid ""
"Perhaps instead they wish to display multiple scenes at the same time using :"
"ref:`ViewportContainers <class_ViewportContainer>`. This is optimal in cases "
"where the intent is to render different content in different parts of the "
"screen. Minimaps and split-screen multiplayer are good examples."
msgstr ""
"也许他们希望使用 :ref:`ViewportContainers <class_ViewportContainer>` 来同时显"
"示多个场景。这意图是在屏幕的不同部分渲染不同内容的情况下是最理想的。迷你地图"
"和多人分屏游戏就是很好的例子。"

msgid ""
"Each option will have cases where it is best appropriate, so one must "
"examine the effects of each and determine what path best fits their unique "
"situation."
msgstr ""
"每个选项都有最合适的情况, 因此必须检查每个选项的效果并确定最适合其独特情况的"
"路径."

msgid "Translation status"
msgstr "翻译状态"
