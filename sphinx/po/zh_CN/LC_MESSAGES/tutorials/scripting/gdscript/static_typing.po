# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "GDScript 中的静态类型"

msgid "In this guide, you will learn:"
msgstr "在本指南中，您将学会："

msgid "**How to use types in GDScript**"
msgstr "**如何在 GDScript 中使用类型**"

msgid "That **static types can help you avoid bugs**"
msgstr "**静态类型可以帮助您避免 bug**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"在何处以及如何使用此新语言功能完全取决于您: 您可以只在某些敏感的GDScript文件"
"中使用它, 也可以在任何地方使用它, 或者像往常一样编写代码！"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr "静态类型可用于变量、常量、函数、参数、返回类型。"

msgid "Typed GDScript is available since Godot 3.1."
msgstr "从 Godot 3.1 开始，可以使用类型化的 GDScript。"

msgid "A brief look at static typing"
msgstr "静态类型简介"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"有了GDScript中的类型,Godot在编写代码时甚至可以检测到更多错误！它会在你工作时"
"为你和你的团队提供更多信息. 因为当你调用方法时, 会显示出参数的类型."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"想象你正在编写背包系统。您编写一个 ``Item``\\ （道具）节点，然后再编写一个 "
"``Inventory``\\ （背包）。要将道具添加到背包中，使用代码的人员应始终将 "
"``Item`` 传递给 ``Inventory.add`` 方法。有了类型，您就可以强制执行以下操作："

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"类型化的GDScript的另一个显著优点是新的 **警告系统** . 从版本3.1开始,Godot会在"
"您编写代码时向您发出有关代码的警告: 引擎会识别代码中可能导致运行时出现问题的"
"部分, 但您可以决定是否要保留代码. 稍后详细介绍."

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"静态类型还为您提供了更好的代码补全选项. 下面, 您可以看到一个名为 "
"``PlayerController`` 类的动态和静态类型补全选项之间的区别."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"您之前可能已经将节点存储在变量中, 并输入了一个点, 但是没有代码自动补全建议:"

msgid "code completion options for dynamic"
msgstr "动态类型的代码补全选项"

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"这是因为动态代码. Godot无法知道您传递给函数的节点或值类型. 但是, 如果您明确地"
"声明了类型, 则将从该节点类型获取所有公共方法和变量:"

msgid "code completion options for typed"
msgstr "静态类型的代码补全选项"

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"将来, 类型化的GDScript也将提高代码性能: 实时编译和其他编译器改进已经出现在路"
"线图上！"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"总体而言, 类型化编程可为您提供更加结构化的体验. 它有助于防止错误并改善脚本的"
"自我描述能力. 当您在团队中或长期项目中工作时, 这特别有用: 研究表明, 开发人员"
"将大部分时间都花在阅读别人的代码或他们过去编写并忘记的脚本上. 代码越清晰, 越"
"结构化, 理解得就越快, 前进的速度就越快."

msgid "How to use static typing"
msgstr "如何使用静态类型"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"要定义变量或常量的类型, 请在变量名称后加上一个冒号, 后跟它的类型. 例如 ``var "
"health: int`` . 这将强制变量的类型保持不变:"

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr "如果您写冒号但省略写类型时,Godot将尝试推测类型:"

msgid "Currently you can use three types of… types:"
msgstr "当前, 您可以使用三类…类型:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`内置类型 <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"核心类和节点（\\ ``Object``\\ 、\\ ``Node``\\ 、\\ ``Area2D``\\ 、\\ "
"``Camera2D`` 等）"

msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"您自己定义的类。查看新的 :ref:`class_name <doc_gdscript_basics_class_name>` "
"特性，以便在编辑器中注册类型。"

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"您不需要为常量编写类型提示, 因为Godot会根据分配的值自动设置. 但是您仍然可以这"
"样做, 以使代码的意图更加清晰."

msgid "Custom variable types"
msgstr "自定义变量类型"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"您可以将任何类(包括您的自定义类)用作类型. 有两种在脚本中使用它们的方法. 第一"
"种方法是将要用作类型的脚本预加载为常量:"

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"第二种方法是在创建时使用 ``class_name`` 关键字. 对于上面的示例, 您的 ``Rifle."
"gd`` 看起来就像这样:"

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"如果使用 ``class_name`` ,Godot会在编辑器中注册一个全局 ``Rifle`` 类型, 您可以"
"在任何地方使用它而无需将其预加载到常量中:"

msgid "Variable casting"
msgstr "变量转换"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr "类型转换是类型语言的关键概念. 转换是将值从一种类型转换为另一种类型."

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"想象您的游戏中的一个敌人, ``extends Area2D``. 您希望它与游戏角色, 即一个附带"
"有一个名为 ``PlayerController`` 的脚本的 ``KinematicBody2D``, 碰撞. 您可以使"
"用 ``on_body_entered`` 信号来检测碰撞. 使用类型化的代码, 您检测到的物体(body)"
"将是通用的 ``PhysicsBody2D``, 而不是 ``_on_body_entered`` 回调上使用的 "
"``PlayerController``."

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"您可以使用 ``as`` 转换关键字检查这个 ``PhysicsBody2D`` 是否是您的游戏角色, 并"
"再次使用冒号 ``:`` 来强制变量使用这种类型. 这会强制变量坚持使用 "
"``PlayerController`` 类型:"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"在处理自定义类型时, 如果 ``body`` 没有扩展为 ``PlayerController`` , 则 "
"``player`` 变量将被设置为 ``null`` . 我们可以用它来检查物体是否为游戏玩家角"
"色. 多亏了类型转换, 我们还将获得 ``player`` 变量的代码自动补全功能."

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr "如果您尝试使用内置类型进行转换并失败, 则Godot将引发错误."

msgid "Safe lines"
msgstr "安全行"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"您也可以使用转换来确保安全行. 安全行是Godot 3.1中的新工具, 可以告诉您歧义的代"
"码行何时是类型安全的. 由于您有时会混合类型化代码和动态代码, 有时如果指令在运"
"行时触发错误,Godot可能没有足够的信息判断."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"当您需要获得子节点时会发生这种情况。让我们以计时器为例：使用动态代码，您可以"
"使用 ``$Timer`` 获取节点。GDScript 支持\\ `鸭子类型 <https://stackoverflow."
"com/a/4205163/8125343>`__\\ ，所以即使您的计时器是 ``Timer`` 类型，它也扩展"
"了 ``Node`` 和 ``Object`` 这两个类。使用动态 GDScript，只要节点具有您需要调用"
"的方法，您也不必关心节点的类型。"

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"当您得到一个节点时, 您可以使用强制转换来告诉Godot, 您期望的类型: ``($Timer "
"as Timer)`` , ``($Player as KinematicBody2D)`` 等.Godot将确保该类型有效, 如果"
"是, 则行号在脚本编辑器的左侧变为绿色."

msgid "Unsafe vs Safe Line"
msgstr "不安全 vs 安全的行"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "不安全代码 (第 7 行) vs 安全代码 (第 6 行和第 8 行)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr "可以在编辑器设置中关闭安全行或更改其颜色."

msgid "Define the return type of a function with the arrow ->"
msgstr "使用箭头 ``->`` 定义函数的返回类型"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"要定义函数的返回类型, 请在声明后写一个短划线和一个右尖括号 ``->``, 后跟返回类"
"型:"

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr "类型 ``void`` 表示函数不返回任何内容. 您可以使用任何类型, 如变量:"

msgid "You can also use your own nodes as return types:"
msgstr "您还可以使用自己的节点作为返回类型:"

msgid "Typed or dynamic: stick to one style"
msgstr "静态还是动态：坚持一种风格"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"强类型的 GDScript 和动态 GDScript 可以共存于同一项目，但还是建议选择其一，以"
"确保代码库和同伴间的一致性。如果你们遵循相同的规范，那么大家都可以更轻松地协"
"作，阅读和理解他人的代码也会更加迅速。"

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"类型化的代码需要编写更多, 但是您将获得上面讨论的好处. 下面是内容一样的空脚本"
"示例, 首先是使用动态风格:"

msgid "And with static typing:"
msgstr "其次是使用静态类型:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"如您所见, 您也可以对引擎虚函数的参数进行类型声明. 与任何方法一样, 信号回调参"
"数也可以使用类型. 下面是一个动态风格的 ``body_entered`` 信号示例:"

msgid "And the same callback, with type hints:"
msgstr "以及具有类型提示的, 相同的回调:"

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"您可以自由替代类型, 例如把参数转换为您自己的类型 ``CollisionObject2D``:"

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"``bullet`` 变量在这里保存任何继承了 ``CollisionObject2D`` 的节点类, 但我们需"
"要确保它是我们的 ``Bullet`` , 即那个我们为项目创建的节点类型. 如果它是其他任"
"何东西, 比如 ``Area2D`` , 或任何不扩展 ``Bullet`` 的节点, ``bullet`` 变量值将"
"是 ``null`` ."

msgid "Warning system"
msgstr "警告系统"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr "关于GDScript警告系统的文档已移至 :ref:`doc_gdscript_warning_system`."

msgid "Cases where you can't specify types"
msgstr "无法指定类型的情况"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"为了总结这个介绍, 我们将介绍一些不能使用类型提示的情况. 以下所有示例 **都会触"
"发错误** ."

msgid "You can't use Enums as types:"
msgstr "您不能将枚举作为类型:"

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr "您无法指定数组中单个成员的类型. 这会给您一个错误:"

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"您不能在 ``for`` 循环中强制指定类型, 因为 ``for`` 关键字循环中每个元素已经有"
"不同的类型. 所以您 **不能** 指定类型:"

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "两个脚本不能循环依赖:"

msgid "Summary"
msgstr "总结"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"类型化的GDScript是一个强大的工具. 从Godot 3.1版开始可用, 它可以帮助您编写更多"
"结构化的代码, 避免常见错误, 以及创建可伸缩的系统. 将来, 由于即将进行的编译器"
"优化, 静态类型也将为您带来不错的性能提升."

msgid "Translation status"
msgstr "翻译状态"
