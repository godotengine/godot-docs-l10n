# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript style guide"
msgstr "GDScript 风格指南"

msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"该样式指南列出了编写优雅 GDScript 的约定。目标是促进编写干净、可读的代码，促"
"进项目、讨论和教程之间的一致性。希望这也会促进开发自动格式化工具。"

msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"由于 GDScript 与 Python 非常接近，因此本指南的灵感来自 Python 的 `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ 编程风格指南。"

msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"风格指南并不是硬性的规则手册。有时，您可能无法应用下面的一些规范。当这种情况"
"发生时，请使用你最好的判断，并询问其他开发人员的见解。"

msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"一般来说，在项目和团队中保持代码的一致性比一板一眼地遵循本指南更为重要。"

msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr "Godot的内置脚本编辑器默认使用了很多这些约定. 让它帮助你."

msgid "Here is a complete class example based on these guidelines:"
msgstr "下面是基于这些规范的完整的类的示例："

msgid "Formatting"
msgstr "格式"

msgid "Encoding and special characters"
msgstr "编码和特殊字符"

msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr "使用换行符（\\ **LF**\\ ）换行，而不是 CRLF 或 CR。\\ *（编辑器默认）*"

msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr "在每个文件的末尾使用一个换行符。\\ *（编辑器默认）*"

msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"使用不带\\ `字节顺序标记 <https://zh.wikipedia.org/zh-cn/"
"%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F>`_\\ 的 "
"**UTF-8** 编码。\\ *（编辑器默认）*"

msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr "使用\\ **制表符**\\ 代替空格进行缩进。\\ *（编辑器默认）*"

msgid "Indentation"
msgstr "缩进"

msgid "Each indent level should be one greater than the block containing it."
msgstr "每个缩进级别必须大于包含它的代码块."

msgid "**Good**:"
msgstr "**良好的** :"

msgid "**Bad**:"
msgstr "**糟糕的** :"

msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr "使用2个缩进级别来区分续行与常规代码块."

msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr "此规则的例外是数组, 字典和枚举. 使用单个缩进级别来区分连续行:"

msgid "Trailing comma"
msgstr "行尾逗号"

msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""
"请在数组、字典和枚举的最后一行使用逗号。这将使版本控制中的重构更容易，Diff 也"
"更美观，因为添加新元素时不需要修改最后一行。"

msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr "单行列表中不需要行尾逗号，因此在这种情况下不要添加它们。"

msgid "Blank lines"
msgstr "空白行"

msgid "Surround functions and class definitions with two blank lines:"
msgstr "用两个空行包围函数和类定义:"

msgid "Use one blank line inside functions to separate logical sections."
msgstr "函数内部使用一个空行来分隔逻辑部分."

msgid ""
"We use a single line between classes and function definitions in the class "
"reference and in short code snippets in this documentation."
msgstr "在类参考和本文档的短代码片段中，我们会在类和函数定义之间使用单个空行。"

msgid "Line length"
msgstr "行的长度"

msgid "Keep individual lines of code under 100 characters."
msgstr "把每行代码控制在100个字符以内."

msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"如果可以的话, 尽量把行控制在80个字符以下. 这有助于在小屏幕上阅读代码, 并在外"
"部文本编辑器中并排打开两个脚本. 例如, 在查看差异修订时."

msgid "One statement per line"
msgstr "一条语句一行"

msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"不要在一行上合并多个语句. 不要像C语言那样, 不能使用单行条件语句(三元运算符除"
"外)."

msgid "The only exception to that rule is the ternary operator:"
msgstr "该规则的唯一例外是三元运算符："

msgid "Format multiline statements for readability"
msgstr "为可读性格式化多行语句"

msgid ""
"When you have particularly long ``if`` statements or nested ternary "
"expressions, wrapping them over multiple lines improves readability. Since "
"continuation lines are still part of the same expression, 2 indent levels "
"should be used instead of one."
msgstr ""
"如果你的 ``if`` 语句特别长，或者是嵌套的三元表达式时，把它们拆分成多行可以提"
"高可读性。因为这些连续的行仍然属于同一个表达式，应该缩进两级而不是一级。"

msgid ""
"GDScript allows wrapping statements using multiple lines using parentheses "
"or backslashes. Parentheses are favored in this style guide since they make "
"for easier refactoring. With backslashes, you have to ensure that the last "
"line never contains a backslash at the end. With parentheses, you don't have "
"to worry about the last line having a backslash at the end."
msgstr ""
"GDScript 允许使用括号或反斜杠将语句拆成多行。本风格指南倾向于使用括号，因为重"
"构起来更简单。使用反斜杠的话，你必须保证最后一行的末尾没有反斜杠。而如果是括"
"号，你就不必担心最后一行的反斜杠问题。"

msgid ""
"When wrapping a conditional expression over multiple lines, the ``and``/"
"``or`` keywords should be placed at the beginning of the line continuation, "
"not at the end of the previous line."
msgstr ""
"把条件表达式拆分成多行时，\\ ``and`` 和 ``or`` 关键字应当放在下一行的开头，而"
"不是上一行的结尾。"

msgid "Avoid unnecessary parentheses"
msgstr "避免不必要的圆括号"

msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations or wrapping over multiple lines, they only "
"reduce readability."
msgstr ""
"避免表达式和条件语句中的括号。除非需要修改操作顺序或者是在拆分多行，否则它们"
"只会降低可读性。"

msgid "Boolean operators"
msgstr "布尔运算"

msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "首选布尔运算符的英文版本，因为它们是最易懂的："

msgid "Use ``and`` instead of ``&&``."
msgstr "使用 ``and`` 代替 ``&&``\\ 。"

msgid "Use ``or`` instead of ``||``."
msgstr "使用 ``or`` 代替 ``||``\\ 。"

msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"也可以在布尔运算符周围使用括号来清除任何歧义。这可以使长表达式更容易阅读。"

msgid "Comment spacing"
msgstr "注释间距"

msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"普通注释开头应该留一个空格，但如果是为了停用代码而将其注释掉则不需要留。这样"
"可以用来区分文本注释和停用的代码。"

msgid ""
"In the script editor, to toggle the selected code commented, press :kbd:"
"`Ctrl + K`. This feature adds a single # sign at the start of the selected "
"lines."
msgstr ""
"在脚本编辑器中，要切换已注释的选定代码，请按 :kbd:`Ctrl + K`\\ 。此功能在选定"
"行的开头添加一个 # 注释符号。"

msgid "Whitespace"
msgstr "空格"

msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"请始终在运算符前后和逗号后使用一个空格。同时，请避免在字典引用和函数调用中使"
"用多余的空格。"

msgid "Don't use spaces to align expressions vertically:"
msgstr "不要使用空格来垂直对齐表达式："

msgid "Quotes"
msgstr "引号"

msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"尽量使用双引号，除非单引号可以让字符串中需要转义的字符变少。见如下示例："

msgid "Numbers"
msgstr "数字"

msgid ""
"Don't omit the leading or trailing zero in floating-point numbers. "
"Otherwise, this makes them less readable and harder to distinguish from "
"integers at a glance."
msgstr ""
"不要忽略浮点数中的前导或后缀零。否则，这会使它们的可读性降低，很难一眼与整数"
"区分开。"

msgid "**Good**::"
msgstr "**良好的**\\ ： ::"

msgid "**Bad**::"
msgstr "**糟糕的**\\ ： ::"

msgid ""
"Use lowercase for letters in hexadecimal numbers, as their lower height "
"makes the number easier to read."
msgstr "对于十六进制数字，请使用小写字母，因为它们较矮，使数字更易于阅读。"

msgid ""
"Take advantage of GDScript's underscores in literals to make large numbers "
"more readable."
msgstr "利用 GDScript 的文字下划线，使大数字更易读。"

msgid "Naming conventions"
msgstr "命名约定"

msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"这些命名约定遵循 Godot 引擎风格. 打破这些都会使你的代码与内置的命名约定冲突, "
"导致风格不一致的代码."

msgid "File names"
msgstr "文件命名"

msgid ""
"Use snake_case for file names. For named classes, convert the PascalCase "
"class name to snake_case::"
msgstr ""
"文件名用 snake_case 命名法，对于有名字的类，将其名字从 PascalCase 命名转化为 "
"snake_case： ::"

msgid ""
"This is consistent with how C++ files are named in Godot's source code. This "
"also avoids case sensitivity issues that can crop up when exporting a "
"project from Windows to other platforms."
msgstr ""
"这种命名于 Godot 源码中的 C++ 文件命名保持了一致. 这也防止了由 Windows 导出到"
"其他大小写敏感平台时发生的问题."

msgid "Classes and nodes"
msgstr "类与节点"

msgid "Use PascalCase for class and node names:"
msgstr "对类和节点名称使用帕斯卡命名法(PascalCase):"

msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr "将类加载到常量或变量时同样适用:"

msgid "Functions and variables"
msgstr "函数与变量"

msgid "Use snake\\_case to name functions and variables:"
msgstr "函数与变量使用 snake\\_case 命名："

msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr "在用户必须覆盖的虚方法、私有函数、私有变量前加一个下划线（\\_）："

msgid "Signals"
msgstr "信号"

msgid "Use the past tense to name signals:"
msgstr "用过去时态来命名信号:"

msgid "Constants and enums"
msgstr "常数和枚举"

msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr "使用 CONSTANT\\_CASE, 全部大写, 用下划线(\\_)分隔单词 :"

msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"对枚举的\\ *名称*\\ 使用 PascalCase，对其成员使用 CONSTANT\\_CASE， 因为它们"
"是常量："

msgid "Code order"
msgstr "代码顺序"

msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"第一节主要讨论代码顺序. 有关格式, 请参见 :ref:`formatting`. 有关命名约定, 请"
"参见 :ref:`naming_conventions`."

msgid "We suggest to organize GDScript code this way:"
msgstr "我们建议按以下方式组织GDScript代码:"

msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"我们优化了顺序, 使从上到下阅读代码变得容易, 帮助第一次阅读代码的开发人员了解"
"代码的工作原理, 并避免与变量声明顺序相关的错误."

msgid "This code order follows four rules of thumb:"
msgstr "此代码顺序遵循四个经验法则:"

msgid "Properties and signals come first, followed by methods."
msgstr "首先是属性和信号, 然后是方法."

msgid "Public comes before private."
msgstr "公共变量优先于私有变量."

msgid "Virtual callbacks come before the class's interface."
msgstr "虚回调出现在类的接口之前."

msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"对象的构造和初始化函数 ``_init`` 和 ``_ready`` 在修改对象的函数之前运行."

msgid "Class declaration"
msgstr "类声明"

msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr "如果代码要在编辑器中运行, 请将 ``tool`` 关键字放在脚本的第一行."

msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""
"如有必要，在后面加上 `class_name`\\ 。您可以使用此功能将 GDScript 文件转换为"
"项目中的全局类型。有关更多信息，请参阅 :ref:`doc_gdscript`。"

msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr "然后, 如果类扩展了内置类型, 则添加 `extends` 关键字."

msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""
"然后, 您应该添加类的可选文档字符串作为注释. 您可以使用它来向您的团队解释类的"
"角色, 工作原理, 以及其他开发人员应该如何使用它, 下面举个例子."

msgid "Signals and properties"
msgstr "信号和属性"

msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr "先声明信号, 后跟属性(即成员变量), 它们都在文档注释(docstring)之后."

msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr "枚举应该在信号之后, 因为您可以将它们用作其他属性的导出提示."

msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr "然后, 按该顺序写入常量, 导出变量, 公共变量, 私有变量和 onready 变量."

msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""
"GDScript编译器在 ``_ready`` 函数回调之前计算onready变量. 您可以使用它来缓存节"
"点依赖项, 也就是说, 在您的类所依赖的场景中获取子节点. 这就是上面的例子所展示"
"的."

msgid "Member variables"
msgstr "成员变量"

msgid ""
"Don't declare member variables if they are only used locally in a method, as "
"it makes the code more difficult to follow. Instead, declare them as local "
"variables in the method's body."
msgstr ""
"如果变量只在方法中使用, 勿声明其为成员变量, 因为我们难以定位在何处使用了该变"
"量. 相反, 你应该将它们在方法内部定义为局部变量."

msgid "Local variables"
msgstr "局部变量"

msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""
"声明局部变量的位置离首次使用它的位置越近越好. 这让人更容易跟上代码的思路, 而"
"不需要上下翻找该变量的声明位置."

msgid "Methods and static functions"
msgstr "方法和静态函数"

msgid "After the class's properties come the methods."
msgstr "在类的属性之后是方法."

msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""
"从 ``_init()`` 回调方法开始, 引擎将在创建内存对象时调用该方法. 接下来是 "
"``_ready()`` 回调, 当Godot向场景树添加一个节点时调用它."

msgid ""
"These functions should come first because they show how the object is "
"initialized."
msgstr "这些函数应该声明在脚本最前面, 因为它们显示了对象是如何初始化的."

msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""
"``_unhandling_input()`` 和 ``_physics_process`` 等其他内置的虚回调应该放在后"
"面。它们控制对象的主循环和与游戏引擎的交互。"

msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr "类的其余接口, 公共和私有方法, 都是按照这个顺序出现的."

msgid "Static typing"
msgstr "静态类型"

msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"从Godot 3.1开始,GDScript支持 :ref:`可选的静态类型 "
"<doc_gdscript_static_typing>`."

msgid "Declared types"
msgstr "声明类型"

msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr "要声明变量的类型, 使用 ``<variable>: <type>``:"

msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr "要声明函数的返回类型, 使用``-> <type>``:"

msgid "Inferred types"
msgstr "推断类型"

msgid "In most cases you can let the compiler infer the type, using ``:=``:"
msgstr "在大多数情况下, 你可以让编译器使用 ``:=`` 来推断类型:"

msgid ""
"However, in a few cases when context is missing, the compiler falls back to "
"the function's return type. For example, ``get_node()`` cannot infer a type "
"unless the scene or file of the node is loaded in memory. In this case, you "
"should set the type explicitly."
msgstr ""
"然而, 在少数情况下, 当上下文缺失时, 编译器会回退到函数的返回类型. 例如, 在节"
"点的场景或文件被加载到内存中之前, ``get_node()`` 无法自动推断类型. 在这种情况"
"下, 你应该明确地设置类型."

msgid ""
"Alternatively, you can use the ``as`` keyword to cast the return type, and "
"that type will be used to infer the type of the var."
msgstr ""
"或者，你也可以使用 ``as`` 关键字来转换返回类型，这个类型会被用于推导变量的类"
"型。"

msgid ""
"This option is also considered more :ref:`type-"
"safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""
"这种做法也比第一种更\\ :ref:`类型安全"
"<doc_gdscript_static_typing_safe_lines>`。"

msgid "Translation status"
msgstr "翻译状态"
