# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript：动态语言简介"

msgid "About"
msgstr "关于"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"本教程旨在快速介绍如何更有效地使用GDScript. 它只关注特定于该语言的常见情况, "
"但是也涉及许多关于动态类型语言的信息."

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr "对于没有或几乎没有动态类型语言经验的程序员来说, 它特别有用."

msgid "Dynamic nature"
msgstr "动态性"

msgid "Pros & cons of dynamic typing"
msgstr "动态类型的优缺点"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript是一种动态类型语言. 因此, 它的主要优点是:"

msgid "The language is simple and easy to learn."
msgstr "这种语言简单易学."

msgid "Most code can be written and changed quickly and without hassle."
msgstr "大多数代码都可以快速地编写和更改, 而且没有任何麻烦."

msgid "Less code written means less errors & mistakes to fix."
msgstr "编写更少的代码意味着要修复的错误和失误更少."

msgid "Easier to read the code (less clutter)."
msgstr "更容易阅读代码(减少混乱)."

msgid "No compilation is required to test."
msgstr "测试不需要编译."

msgid "Runtime is tiny."
msgstr "运行时(Runtime)很小."

msgid "Duck-typing and polymorphism by nature."
msgstr "本质上是鸭子类型和多态性."

msgid "While the main disadvantages are:"
msgstr "主要缺点是:"

msgid "Less performance than statically typed languages."
msgstr "比静态类型语言的性能要低."

msgid "More difficult to refactor (symbols can't be traced)"
msgstr "重构更加困难(无法追踪符号)"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"一些通常在静态类型语言编译时检测到的错误, 只会在运行代码时出现(因为表达式解析"
"更严格)."

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr "代码补全的灵活性较低(某些变量的类型只能在运行时确定)."

msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"这转化为现实, 意味着Godot+GDScript是一个旨在快速高效创建游戏的组合. 对于计算"
"量很大并且无法从引擎内置工具(例如向量类型, 物理引擎, 数学库等)中受益的游戏, "
"也存在使用C++的可能性. 这允许您依旧使用GDScript创建游戏的绝大部分, 并在需要性"
"能的地方添加少量C++代码."

msgid "Variables & assignment"
msgstr "变量与赋值"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"动态类型语言中的所有变量都类似“变体”。这意味着它们的类型不是固定的，只能通过"
"赋值修改。示例："

msgid "Static:"
msgstr "静态的："

msgid "Dynamic:"
msgstr "动态的："

msgid "As function arguments:"
msgstr "作为函数参数："

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr "函数也是动态的，这意味着它们可以用不同的参数调用，例如："

msgid "Pointers & referencing:"
msgstr "指针和引用："

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"在 C、C++ 等静态语言中（Java 和 C# 某种程度上也是）存在变量和变量的指针/引用"
"的区别。后者的作用是，如果传的是原始对象的引用，那么其他函数就可以修改这个对"
"象。"

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"在 C# 或 Java 中，非内置类型（int、float、某些时候的 String）的任何东西都是指"
"针或引用。而且引用会被自动垃圾回收，这意味着它们在不再使用时被删除。动态类型"
"的语言也倾向于使用这种内存模型。一些示例："

msgid "C++:"
msgstr "C++："

msgid "Java:"
msgstr "Java："

msgid "GDScript:"
msgstr "GDScript："

msgid ""
"In GDScript, only base types (int, float, String and PoolArray types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"在 GDScript 中，只有基础类型（int、float、String、PoolArray 类型）会通过值传"
"递给函数（值会被复制）。其他所有类型（实例、数组、字典等）都会作为引用传递。"
"继承自 :ref:`class_Reference` 的类（未指定父类时会默认继承它）在不使用时将被"
"释放，但对手动继承自 :ref:`class_Object` 的类也允许手动管理内存。"

msgid ""
"A value is **passed by value** when it is copied every time it's specified "
"as a function parameter. One consequence of this is that the function cannot "
"modify the parameter in a way that is visible from outside the function::"
msgstr ""
"**按值传递**\\ 指的是用作函数参数时，每次都会复制一份。因此，函数是无法对参数"
"造成外部可见的修改的： ::"

msgid ""
"A value is **passed by reference** when it is *not* copied every time it's "
"specified as a function parameter. This allows modifying a function "
"parameter within a function body (and having the modified value accessible "
"outside the function). The downside is that the data passed as a function "
"parameter is no longer guaranteed to be immutable, which can cause difficult-"
"to-track bugs if not done carefully::"
msgstr ""
"**按引用传递**\\ 指的是用作函数参数时，\\ *不会*\\ 每次都复制一份。这样函数体"
"内就可以修改参数（函数外部也可以访问到这个修改后的值）。缺点是无法保证作为参"
"数的数据不被修改，如果使用不当，可能会导致难以排查的问题： ::"

msgid ""
"Compared to passing by value, passing by reference can perform better when "
"using large objects since copying large objects in memory can be slow."
msgstr ""
"与按值传递相比，按引用传递在使用大型对象时性能更好，因为在内存中复制大型对象"
"比较慢。"

msgid ""
"Additionally, in Godot, base types such as String are **immutable**. This "
"means that modifying them will *always* return a copy of the original value, "
"rather than modifying the value in-place."
msgstr ""
"另外，在 Godot 中，String 等基础类型都是\\ **不可修改**\\ 的。这意味着修改他"
"们的值\\ *总是*\\ 会返回原始值的副本，而不是对原值进行修改。"

msgid "Arrays"
msgstr "数组"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"动态类型语言的数组内部可以包含许多不同的混合数据类型, 并且始终是动态的(可以随"
"时调整大小). 比较在静态类型语言中的数组示例:"

msgid "And in GDScript:"
msgstr "以及在GDScript中:"

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr "在动态类型语言中, 数组也可以作为其他数据类型有多种用法, 例如列表:"

msgid "Or unordered sets:"
msgstr "或无序集合:"

msgid "Dictionaries"
msgstr "字典"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"字典是动态类型化语言中的一个强大工具. 来自静态类型语言(例如C++或C#)的大多数程"
"序员都忽略了它们的存在, 并不必要地增加了他们的工作难度. 这种数据类型通常不存"
"在于此类语言中(或仅以受限的形式)."

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"字典可以完全忽略用作键或值的数据类型, 将任何值映射到任何其他值. 与流行的观点"
"相反, 它们是有效的, 因为它们可以通过哈希表实现. 事实上, 它们非常高效, 一些语"
"言甚至可以像实现字典一样实现数组."

msgid "Example of Dictionary:"
msgstr "字典的示例:"

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr "字典也是动态的, 键可以在任何一点添加或删除, 花费很少:"

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"在大多数情况下, 使用字典可以更容易地实现二维数组. 这里有一个简单的战舰游戏的"
"示例:"

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"字典还可以用作数据标记或快速结构. 虽然GDScript字典类似于python字典, 但它也支"
"持Lua风格的语法和索引, 这使得它对于编写初始状态和快速结构非常有用:"

msgid "For & while"
msgstr "For & while"

msgid "Iterating in some statically typed languages can be quite complex:"
msgstr "在一些静态类型的语言中迭代可能非常复杂:"

msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "这通常在动态类型语言中得到极大简化:"

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr "容器数据类型(数组和字典)是可迭代的. 字典允许迭代键:"

msgid "Iterating with indices is also possible:"
msgstr "迭代索引也是可能的:"

msgid "The range() function can take 3 arguments:"
msgstr "range() 函数可以有 3 个参数："

msgid "Some statically typed programming language examples:"
msgstr "一些静态类型的编程语言示例:"

msgid "Translate to:"
msgstr "转变成:"

msgid "And backwards looping is done through a negative counter:"
msgstr "反向循环是通过一个负计数器完成的:"

msgid "Becomes:"
msgstr "变成:"

msgid "While"
msgstr "While"

msgid "while() loops are the same everywhere:"
msgstr "while() 循环在任何地方都是相同的："

msgid "Custom iterators"
msgstr "自定义迭代器"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"在默认迭代器无法完全满足你的需求的情况下, 你可以通过重写脚本中 ``Variant`` 类"
"的 ``_iter_init``, ``_iter_next``, 和 ``_iter_get`` 函数来创建自定义迭代器. "
"正向迭代器的一个示例实现如下:"

msgid "And it can be used like any other iterator:"
msgstr "它可以像任何其他迭代器一样使用:"

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"确保在 ``_iter_init`` 中重置迭代器的状态, 否则使用自定义迭代器的嵌套for循环将"
"无法正常工作."

msgid "Duck typing"
msgstr "鸭子类型"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"当从静态类型语言迁移到动态类型语言时, 最难掌握的概念之一是鸭子类型. 鸭子类型"
"使整个代码设计更加简单和直接, 但是它的工作方式并不明显."

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"举个示例, 想象一个大石头从隧道里掉下来, 在路上砸碎了一切. 在静态类型语言中石"
"头的代码有点像:"

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"这样，任何能被岩石砸碎的东西都必须继承 ``Smashable``\\ 。如果角色、敌人、家"
"具、小石块都易碎，它们需要从 ``Smashable`` 类继承，可能需要多次继承。如果不希"
"望进行多重继承，那么它们必须继承像 ``Entity`` 这样的公共类。然而，如果只是其"
"中几个能被粉碎的话，在 ``Entity`` 中添加一个虚方法 ``smash()`` 并不十分优雅。"

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"使用动态类型的语言, 这将不是问题. 鸭子类型确保你只需在需要的地方定义一个 "
"``smash()`` 函数, 就行了. 无需考虑继承, 基类等."

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"就是这样. 如果击中大岩石的对象有一个 ``smash()`` 方法, 它将被调用. 不需要考虑"
"继承或多态性. 动态类型化语言只关心具有所需方法或成员的实例, 而不关心它继承什"
"么或其类型. 鸭子类型的定义应该使这一点更清楚:"

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*“当我看到一只鸟像鸭子一样走路、像鸭子一样游泳、像鸭子一样呱呱叫时，我就管它"
"叫鸭子”*"

msgid "In this case, it translates to:"
msgstr "在这种情况下，它可转变成："

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr "*“如果物体可以被砸碎，不要在意它是什么，只管砸碎它。”*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "是的，称它为绿巨人（Hulk）类型适乎更合适。"

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"有可能被击中的对象并没有smash()函数。一些动态类型的语言在调用方法不存在时，会"
"简单地忽略它，但GDScript更严格，所以有必要检查函数是否存在:"

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr "然后, 简单地定义这个方法, 岩石触碰的任何东西都可以被粉碎了."

msgid "Translation status"
msgstr "翻译状态"
