# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# features"
msgstr "C# 特征"

msgid ""
"This page provides an overview of the commonly used features of both C# and "
"Godot and how they are used together."
msgstr "本页概述了C#和Godot的常用特征以及它们如何一起使用."

msgid "Type conversion and casting"
msgstr "类型转换和强制转换"

msgid ""
"C# is a statically typed language. Therefore, you can't do the following:"
msgstr "C#是一种静态类型语言. 因此, 您无法执行以下操作:"

msgid ""
"The method ``GetNode()`` returns a ``Node`` instance. You must explicitly "
"convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""
"方法 ``GetNode()`` 返回一个 ``Node`` 实例. 在这种情况下, 你必须将其显式转换为"
"所需的派生类型, ``Sprite``."

msgid "For this, you have various options in C#."
msgstr "为此, 在C#中有多种选择."

msgid "**Casting and Type Checking**"
msgstr "**强制转换和类型检查**"

msgid ""
"Throws ``InvalidCastException`` if the returned node cannot be cast to "
"Sprite. You would use it instead of the ``as`` operator if you are pretty "
"sure it won't fail."
msgstr ""
"如果返回的节点无法转换为Sprite, 则抛出 ``InvalidCastException`` . 如果您非常"
"确定它不会失败, 您可以使用它而不是 ``as`` 运算符."

msgid "**Using the AS operator**"
msgstr "**使用AS运算符**"

msgid ""
"The ``as`` operator returns ``null`` if the node cannot be cast to Sprite, "
"and for that reason, it cannot be used with value types."
msgstr ""
"如果节点无法转换为 ``Sprite``, 则 ``as`` 运算符返回 ``null``, 因此它不能与值"
"类型一起使用."

msgid "**Using the generic methods**"
msgstr "**使用泛型方法**"

msgid ""
"Generic methods are also provided to make this type conversion transparent."
msgstr "还提供了泛型方法以使该类型转换透明."

msgid ""
"``GetNode<T>()`` casts the node before returning it. It will throw an "
"``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""
"``GetNode <T>()`` 在返回之前强制转换节点. 如果节点无法强制转换为所需类型, 它"
"将抛出一个 ``InvalidCastException``."

msgid ""
"``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if "
"the node cannot be cast to the desired type."
msgstr ""
"``GetNodeOrNull <T>()`` 使用 ``as`` 运算符, 如果节点无法强制转换为所需类型, "
"则返回 ``null``."

msgid "**Type checking using the IS operator**"
msgstr "**使用IS运算符进行类型检查**"

msgid ""
"To check if the node can be cast to Sprite, you can use the ``is`` operator. "
"The ``is`` operator returns false if the node cannot be cast to Sprite, "
"otherwise it returns true."
msgstr ""
"要检查节点是否可以强制转换为 ``Sprite``, 可以使用 ``is`` 运算符. 如果节点无法"
"转换为 ``Sprite``, 则 ``is`` 运算符返回 ``false``, 否则返回 ``true``."

msgid ""
"For more advanced type checking, you can look into `Pattern Matching "
"<https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""
"对于更高级的类型检查, 你可以查看 `模式匹配 <https://docs.microsoft.com/en-us/"
"dotnet/csharp/pattern-matching>`_."

msgid "C# signals"
msgstr "C# 信号"

msgid ""
"For a complete C# example, see the **Handling a signal** section in the step "
"by step :ref:`doc_scripting` tutorial."
msgstr ""
"有关完整的C#示例, 请参阅逐步 :ref:`doc_scripting` 教程中的 **处理信号** 部分."

msgid ""
"Declaring a signal in C# is done with the ``[Signal]`` attribute on a "
"delegate."
msgstr ""
"在C#中声明一个信号是通过一个 ``delegate`` 上的 ``[Signal]`` 特性完成的."

msgid ""
"These signals can then be connected either in the editor or from code with "
"``Connect``. If you want to connect a signal in the editor, you need to "
"(re)build the project assemblies to see the new signal. This build can be "
"manually triggered by clicking the “Build” button at the top right corner of "
"the editor window."
msgstr ""
"这些信号可以在编辑器或者在代码中使用 ``Connect`` 进行连接. 如果想在编辑器中连"
"接一个信号, 你需要(重新)生成项目组件才能看到这个新的信号. 生成操作可以点击 编"
"辑窗口右上角的 \"Build\" 按钮手动触发."

msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr "发射信号是通过 ``EmitSignal`` 方法完成的."

msgid ""
"Notice that you can always reference a signal name with the ``nameof`` "
"keyword (applied on the delegate itself)."
msgstr ""
"请注意, 你始终可以使用 ``nameof`` 关键字引用信号名称(应用于 ``委托"
"(delegate)`` 本身)."

msgid ""
"It is possible to bind values when establishing a connection by passing a "
"Godot array."
msgstr "在建立连接时，可以通过传递一个Godot数组来绑定值。"

msgid ""
"Signals support parameters and bound values of all the `built-in types "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/"
"built-in-types-table>`_ and Classes derived from :ref:`Godot.Object "
"<class_Object>`. Consequently, any ``Node`` or ``Reference`` will be "
"compatible automatically, but custom data objects will need to extend from "
"`Godot.Object` or one of its subclasses."
msgstr ""
"信号支持所有 `内置类型 <https://docs.microsoft.com/en-us/dotnet/csharp/"
"language-reference/keywords/built-in-types-table>`_ 的参数和绑定值, 以及从 :"
"ref:`Godot.Object <class_Object>` 派生的类. 因此, 任何 ``Node`` 或 "
"``Reference`` 将自动兼容, 但是自定义数据对象将需要从 ``Godot.Object`` 或其子"
"类之中扩展."

msgid ""
"Finally, signals can be created by calling ``AddUserSignal``, but be aware "
"that it should be executed before any use of said signals (with ``Connect`` "
"or ``EmitSignal``)."
msgstr ""
"最后, 可以通过调用 ``AddUserSignal`` 来创建信号, 但要注意它应该在使用所述信号"
"之前执行(使用 ``Connect`` 或 ``EmitSignal``)."

msgid "Preprocessor defines"
msgstr "预处理器符号定义"

msgid ""
"Godot has a set of defines that allow you to change your C# code depending "
"on the environment you are compiling to."
msgstr "为了能够根据目标编译环境改变 C# 代码，Godot 提供了一组符号定义。"

msgid ""
"If you created your project before Godot 3.2, you have to modify or "
"regenerate your `csproj` file to use this feature (compare "
"``<DefineConstants>`` with a new 3.2+ project)."
msgstr ""
"如果是Godot 3.2之前创建的项目, 你需要修改或重新生成你的 `csproj` 文件来使用这"
"个功能(可与一个3.2+新项目中的 ``<DefineConstants>`` 相对比)."

msgid "Examples"
msgstr "示例"

msgid "For example, you can change code based on the platform:"
msgstr "例如, 你可以根据平台更改代码:"

msgid ""
"Or you can detect which engine your code is in, useful for making cross-"
"engine libraries:"
msgstr "或者你可以检测代码所在的引擎, 这对于制作跨引擎库很有用:"

msgid "Full list of defines"
msgstr "完整的定义列表"

msgid "``GODOT`` is always defined for Godot projects."
msgstr "所有 Godot 项目都会定义 ``GODOT``\\ 。"

msgid ""
"One of ``GODOT_64`` or ``GODOT_32`` is defined depending on if the "
"architecture is 64-bit or 32-bit."
msgstr "根据架构是 64 位还是 32 位，会定义 ``GODOT_64`` 或 ``GODOT_32``\\ 。"

msgid ""
"One of ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, ``GODOT_ANDROID``, "
"``GODOT_IOS``, ``GODOT_HTML5``, or ``GODOT_SERVER`` depending on the OS. "
"These names may change in the future. These are created from the "
"``get_name()`` method of the :ref:`OS <class_OS>` singleton, but not every "
"possible OS the method returns is an OS that Godot with Mono runs on."
msgstr ""
"根据操作系统，会定义 ``GODOT_X11`` 、 ``GODOT_WINDOWS`` 、 ``GODOT_OSX`` 、 "
"``GODOT_ANDROID`` 、 ``GODOT_IOS`` 、 ``GODOT_HTML5`` 、 ``GODOT_SERVER`` 的"
"其中之一，将来可能会更改这些名称。这些名称是根据 :ref:`OS <class_OS>` 单例的 "
"``get_name()`` 方法创建的，但这个函数所能够返回的操作系统并不是都能够运行使"
"用 Mono 的 Godot。"

msgid ""
"When **exporting**, the following may also be defined depending on the "
"export features:"
msgstr "在 **导出** 时, 根据导出功能, 还可能定义以下内容:"

msgid ""
"One of ``GODOT_PC``, ``GODOT_MOBILE``, or ``GODOT_WEB`` depending on the "
"platform type."
msgstr ""
"``GODOT_PC`` , ``GODOT_MOBILE`` 或 ``GODOT_WEB`` 中的一种, 取决于平台类型."

msgid ""
"One of ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` on Android only "
"depending on the architecture."
msgstr ""
"``GODOT_ARM64_V8A`` 或 ``GODOT_ARMEABI_V7A`` 中的一个，仅在 Android 系统上，"
"取决于架构。"

msgid ""
"One of ``GODOT_ARM64`` or ``GODOT_ARMV7`` on iOS only depending on the "
"architecture."
msgstr "``GODOT_ARM64`` 或 ``GODOT_ARMV7`` 中的一个, 仅在iOS上, 取决于架构."

msgid ""
"Any of ``GODOT_S3TC``, ``GODOT_ETC``, and ``GODOT_ETC2`` depending on the "
"texture compression type."
msgstr ""
"``GODOT_S3TC`` , ``GODOT_ETC`` 和 ``GODOT_ETC2`` 中的任一种, 取决于纹理压缩类"
"型."

msgid ""
"Any custom features added in the export menu will be capitalized and "
"prefixed: ``foo`` -> ``GODOT_FOO``."
msgstr ""
"所有在导出菜单中添加的自定义功能都会被大写并加上前缀: ``foo`` -> "
"``GODOT_FOO`` ."

msgid ""
"To see an example project, see the OS testing demo: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/os_test"
msgstr ""
"如果想要参考一个示例项目, 可以参考该OS测试demo:https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/os_test"

msgid "Translation status"
msgstr "翻译状态"
