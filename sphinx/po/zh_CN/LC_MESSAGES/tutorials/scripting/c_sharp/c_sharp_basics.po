# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# 基础"

msgid "Introduction"
msgstr "前言"

msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"C#支持是3.0版本的一项新功能. 因此, 您仍然可能会遇到一些问题, 或是发现文档中某"
"些需要改进的地方. 请在 `引擎 GitHub 页面 <https://github.com/godotengine/"
"godot/issues>`_ 上报告Godot中C#的问题, 并在 `文档 GitHub 页面 <https://"
"github.com/godotengine/godot-docs/issues>`_ 上报告任何文档问题."

msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"这个页面简单介绍了C#是什么, 以及如何在Godot中使用C#. 然后, 您可能想看看 :ref:"
"`如何使用特定功能 <doc_c_sharp_features>`, 阅读有关 :ref:`C#和GDScript API 之"
"间的差异 <doc_c_sharp_differences>` 并(重新)访问逐步教程的 :ref:`编写脚本部"
"分 <doc_scripting>`."

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 6.x .NET framework, including full support for "
"C# 8.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""
"C#是由Microsoft开发的一种高级编程语言. 在Godot中, 它是使用Mono 6.x .NET框架实"
"现的, 其中包括对C# 8.0的完全支持.Mono是Microsoft .NET Framework的开源实现, 基"
"于C#的ECMAC标准和公共语言运行时. 检查其功能的一个很好的起点是Mono文档中的 `兼"
"容性 <http://www.mono-project.com/docs/about-mono/compatibility/>`_ 页面."

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"这 **不是** 一个关于C#语言整体的全面教程. 如果你还不熟悉其语法或功能, 请参阅 "
"`Microsoft C #指南 <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ "
"或在其他地方寻找合适的介绍."

msgid "Setting up C# for Godot"
msgstr "为Godot设置C#"

msgid "Prerequisites"
msgstr "先决条件"

msgid ""
"Install the latest stable version of the `.NET SDK <https://dotnet.microsoft."
"com/download>`__, previously known as the .NET Core SDK."
msgstr ""
"安装最新的稳定版 `.NET SDK <https://dotnet.microsoft.com/download>`__\\ ，之"
"前叫做 .NET Core SDK。"

msgid ""
"From Godot 3.2.3 onwards, installing Mono SDK is not a requirement anymore, "
"except it is required if you are building the engine from source."
msgstr ""
"从 Godot 3.2.3 开始，就不再要求安装 Mono SDK 了，除非你是要从源码开始构建引"
"擎。"

msgid ""
"Godot bundles the parts of Mono needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, which needs to be installed separately."
msgstr ""
"Godot 捆绑了运行已经编译好的游戏所需的 Mono 部分，但 Godot 不包括构建和编译游"
"戏所需的 MSBuild 和 C# 编译器等工具。这些工具包含在 .NET SDK 中，需要单独安"
"装。"

msgid ""
"In summary, you must have installed the .NET SDK **and** the Mono-enabled "
"version of Godot."
msgstr "综上所述，你必须安装了 .NET SDK **和**\\ 支持 Mono 的 Godot 版本。"

msgid "Additional notes"
msgstr "补充说明"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr "如果您使用 64 位版本的 Godot，请务必安装 64 位版本的 SDK。"

msgid ""
"If you are building Godot from source, install the latest stable version of "
"`Mono <https://www.mono-project.com/download/stable/>`__, and make sure to "
"follow the steps to enable Mono support in your build as outlined in the :"
"ref:`doc_compiling_with_mono` page."
msgstr ""
"如果你是从源码编译Godot, 请安装最新的稳定版 `Mono <https://www.mono-project."
"com/download/stable/>`__ , 并确保按照 :ref:`doc_compiling_with_mono` 页面中概"
"述的步骤在构建中启用Mono支持."

msgid "Configuring an external editor"
msgstr "配置外部编辑器"

msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Mono**. "
"Under **Mono**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot内置的脚本编辑器对C#的支持是最小的. 考虑使用外部IDE或编辑器, 如 `Visual "
"Studio Code <https://code.visualstudio.com/>`__ 或MonoDevelop. 这些都为C#提供"
"了自动完成, 调试和其他有用的功能. 要在Godot中选择一个外部编辑器, 点击 "
"**Editor → Editor Settings** , 向下滚动到 **Mono** . 在 **Mono** 下, 点击 "
"**Editor** , 然后选择您的外部编辑器.Godot目前支持以下外部编辑器:"

msgid "Visual Studio 2019"
msgstr "Visual Studio 2019"

msgid "Visual Studio Code"
msgstr "Visual Studio Code"

msgid "MonoDevelop"
msgstr "MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "Mac版的Visual Studio"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "关于如何配置外部编辑器, 请参见以下章节:"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"阅读完 \"预备知识\" 部分, 就可以下载安装 `JetBrains Rider <https://www."
"jetbrains.com/rider/download>`__ ."

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "在Godot的 **Editor → Editor Settings** 菜单中:"

msgid ""
"Set **Mono** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""
"设置 **Mono** -> **Editor** -> **External Editor** 为 **JetBrains Rider** ."

msgid "Set **Mono** -> **Builds** -> **Build Tool** to **dotnet CLI**."
msgstr "设置 **Mono** -> **Builds** -> **Build Tool** 为 **dotnet CLI** ."

msgid "In Rider:"
msgstr "在Rider中:"

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "设置 **MSBuild version** 为 **.NET Core** ."

msgid "Install the **Godot support** plugin."
msgstr "安装 **Godot支持** 插件."

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"看完 \"预备知识\" 部分, 就可以下载安装 `Visual Studio Code <https://code."
"visualstudio.com/download>`__ (又名VS Code)."

msgid ""
"Set **Mono** -> **Editor** -> **External Editor** to **Visual Studio Code**."
msgstr ""
"设置 **Mono** -> **Editor** -> **External Editor** 为 **Visual Studio "
"Code** ."

msgid "In Visual Studio Code:"
msgstr "在 Visual Studio Code 中:"

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"安装 `C # <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ 扩展."

msgid ""
"Install the `Mono Debug <https://marketplace.visualstudio.com/items?"
"itemName=ms-vscode.mono-debug>`__ extension."
msgstr ""
"安装 `Mono Debug <https://marketplace.visualstudio.com/items?itemName=ms-"
"vscode.mono-debug>`__ 扩展。"

msgid ""
"Install the `C# Tools for Godot <https://marketplace.visualstudio.com/items?"
"itemName=neikeq.godot-csharp-vscode>`__ extension."
msgstr ""
"安装 `C# Tools for Godot <https://marketplace.visualstudio.com/items?"
"itemName=neikeq.godot-csharp-vscode>`__ 扩展."

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""
"如果你使用的是 Linux，需要安装 `Mono SDK <https://www.mono-project.com/"
"download/stable/#download-lin>` 才能使用 C# 工具插件。"

msgid ""
"To configure a project for debugging open the Godot project folder in VS "
"Code. Go to the Run tab and click on **Add Configuration...**. Select **C# "
"Godot** from the dropdown menu. Open the ``tasks.json`` and ``launch.json`` "
"files that were created. Change the executable setting in ``launch.json`` "
"and  command settings in ``tasks.json`` to your Godot executable path. Now, "
"when you start the debugger in VS Code, your Godot project will run."
msgstr ""
"要配置一个用于调试的项目，请在 VS Code 中打开 Godot 项目文件夹。进入运行选项"
"卡，点击\\ **添加配置...**\\ 。从下拉菜单中选择 **C# Godot**\\ 。打开创建的 "
"``tasks.json`` 和 ``launch.json`` 文件。将 ``launch.json`` 中的可执行文件设置"
"以及 ``tasks.json`` 中的命令设置修改为你的 Godot 可执行文件路径。这样，当你"
"在 VS Code 中启动调试器时，就会运行你的 Godot 项目。"

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio (仅限Windows)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"下载并安装最新版本的 `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`__ . 如果你选择了正确的工作负载,Visual Studio将包含所需的SDK, 所"
"以你不需要手动安装 \"预先告知\" 部分列出的内容."

msgid "While installing Visual Studio, select these workloads:"
msgstr "在安装Visual Studio时, 选择这些工作负载:"

msgid "Mobile development with .NET"
msgstr "使用.NET进行移动开发"

msgid ".NET Core cross-platform development"
msgstr ".NET Core跨平台开发"

msgid "Set **Mono** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""
"设置 **Mono** -> **Editor** -> **External Editor** 为 **Visual Studio** ."

msgid ""
"Next, you can download the Godot Visual Studio extension from github `here "
"<https://github.com/godotengine/godot-csharp-visualstudio/releases>`__. "
"Double click on the downloaded file and follow the installation process."
msgstr ""
"接下来，你需要在\\ `这里 <https://github.com/godotengine/godot-csharp-"
"visualstudio/releases>`__\\ 从 GitHub 上下载 Godot Visual Studio 扩展。双击下"
"载的文件，并按照安装过程进行安装。"

msgid ""
"The option to debug your game in Visual Studio may not appear after "
"installing the extension. To enable debugging, there is a `workaround for "
"Visual Studio 2019 <https://github.com/godotengine/godot-csharp-visualstudio/"
"issues/10#issuecomment-720153256>`__. There is `a separate issue about this "
"problem in Visual Studio 2022 <https://github.com/godotengine/godot-csharp-"
"visualstudio/issues/28>`__."
msgstr ""
"安装扩展后，可能不会出现在 Visual Studio 里调试游戏的选项。要启用调试，有一个"
"\\ `针对 Visual Studio 2019 的变通方案 <https://github.com/godotengine/godot-"
"csharp-visualstudio/issues/10#issuecomment-720153256>`__\\ 。这个问题针对 "
"Visual Studio 2022 有\\ `单独的工单 <https://github.com/godotengine/godot-"
"csharp-visualstudio/issues/28>`__\\ 。"

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""
"如果你看到了类似“Unable to find package Godot.NET.Sdk”的错误，你的 NuGet 配置"
"可能有问题，需要进行修复。"

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""
"修复 NuGet 配置文件的简单方法就是重新生成一个。在文件浏览器窗口中前往 "
"``%AppData%\\NuGet``\\ 。将 ``NuGet.Config`` 文件重命名或删除。重新构建 "
"Godot 项目时，就会自动用默认值创建该文件。"

msgid "Creating a C# script"
msgstr "创建C#脚本"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"成功为Godot设置C#之后, 在场景的节点的上下文菜单中选择 ``附加脚本`` 时, 应该看"
"到以下选项:"

msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""
"请注意, 虽然在某些细节上有所差别, 使用C#编写代码时, 大多数概念的工作方式是相"
"通的. 如果您是刚接触Godot的新手, 此时您可能需要按照以下教程 :ref:"
"`doc_scripting`. 虽然在文档中缺乏详细的C#示例, 但大部分概念都能够在GDScript轻"
"松地阐述清楚."

msgid "Project setup and workflow"
msgstr "项目设置和工作流程"

msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""
"当您创建第一个C#脚本时,Godot会为您的Godot项目初始化C#项目文件. 这包括生成C#解"
"决方案( ``.sln`` )和项目文件( ``.csproj`` ), 以及一些实用程序文件和文件夹"
"( ``Properties/AssemblyInfo.cs`` 和 ``.mono``). 除了 ``.mono`` 之外的所有这些"
"都很重要, 应该被保存在您的版本控制系统中. 而 ``.mono`` 可以安全地添加到VCS的"
"忽略列表中. 在进行故障排除时, 删除 ``.mono`` 文件夹并让它重新生成, 有时可能会"
"有所帮助."

msgid "Example"
msgstr "示例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "这是一个空白的C#脚本, 带有一些注释, 以演示其工作方式."

msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"如您所见, 通常在GDScript中的全局作用域内的函数(如Godot的 ``print`` 函数)可在 "
"``GD`` 类中使用, 该类是 ``Godot`` 命名空间的一部分. 有关 ``GD`` 类中方法的列"
"表, 请参见 :ref:`@GDScript <class_@gdscript>` 和 :ref:`@GlobalScope "
"<class_@globalscope>` 的类参考页."

msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""
"请记住, 您希望附加到节点上的类应与 ``.cs`` 文件具有相同的名称. 否则, 您将收到"
"以下错误, 并且将无法运行场景: *\"无法找到类XXX, 对应脚本res://XXX.cs\"*"

msgid "General differences between C# and GDScript"
msgstr "C#和GDScript之间的一般差异"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C#API使用 ``PascalCase`` 而不是GDScript / C++中使用的 ``snake_case`` . 在可能"
"的情况下, 字段和getters/setters已转换为属性. 一般来说,C#Godot API一贯力求尽可"
"能合理."

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "有关更多信息, 请参见 :ref:`doc_c_sharp_differences` 页面."

msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the word **Build** in the top right corner of the "
"editor. You can also click **Mono** at the bottom of the editor window to "
"reveal the Mono panel, then click the **Build Project** button."
msgstr ""
"每当你想在编辑器中看到新导出的变量或信号时，你都需要重新构建项目。这种构建可"
"以通过点击编辑器右上角的 **Build** 来手动触发。你也可以点击编辑器窗口底部的 "
"**Mono** 来显示Mono面板，然后点击 **Build Project** 按钮。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr "你还需要重新构建项目集, 以应用 \"工具\" 脚本中的更改."

msgid "Current gotchas and known issues"
msgstr "目前的陷阱和已知问题"

msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""
"由于C#支持对Godot来说是比较新, 因此仍有一些成长的痛苦和事情需要解决. 以下是在"
"Godot中使用C#时应注意的最重要问题的列表, 但是如果有疑问, 还可以查看官方的 "
"`Mono 问题的问题追踪器 <https://github.com/godotengine/godot/labels/"
"topic%3Amono>`_."

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "编写编辑器插件是可能的, 但是目前相当复杂."

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "热重载时, 当前状态不被保存和恢复, 导出变量除外."

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "附加C#脚本需要引用一个类, 该类名需要匹配其文件名."

msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation."
msgstr ""
"``Get()``/``Set()``, ``Call()``/``CallDeferred()`` 等方法, 以及信号连接方法 "
"``Connect()`` 都依赖于Godot的 ``snake_case`` API命名规范. 所以, "
"``CallDeferred(\"AddChild\")`` 无法调用 ``AddChild`` , 因为API需要原始 "
"``snake_case`` 版本的 ``add_child`` . 不过, 自定义属性和方法没有此限制."

msgid ""
"Exporting Mono projects is supported for desktop platforms (Linux, Windows "
"and macOS), Android, HTML5, and iOS. The only platform not supported yet is "
"UWP."
msgstr ""
"导出 Mono 项目支持桌面平台（Linux、Windows 和 macOS）、Android、HTML5 和 "
"iOS，唯一还不支持的平台是 UWP。"

msgid "Performance of C# in Godot"
msgstr "在Godot中C#的性能"

msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""
"根据一些初步的 `基准测试 <https://github.com/cart/godot3-bunnymark>`_ ，C#在"
"Godot中的性能——虽然通常处于相同的数量级——但在某些天真的情况下大约是使用"
"GDScript的 **~4×** 。C++仍然要快一些； 具体情况将根据您的用例而有所不同。对于"
"大多数常规脚本工作负载而言，GDScript可能足够快。C#速度更快，但与Godot通信时需"
"要进行一些昂贵的编组（marshalling）。"

msgid "Using NuGet packages in Godot"
msgstr "在Godot中使用NuGet包"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>`_ 包可以与Godot一起安装和使用, 就像任何C#项目"
"一样. 许多IDE都可以直接添加软件包. 也可以通过在项目根目录下的 ``.csproj`` 文"
"件中添加软件包引用来手动添加它们:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"从Godot 3.2.3开始，Godot在下次构建项目时自动下载并设置新添加的NuGet包。"

msgid "Profiling your C# code"
msgstr "分析 C# 代码"

msgid ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ is available for Linux and macOS. Due to a Mono change, it does "
"not work on Windows currently."
msgstr ""
"`Monon日志分析器(Mono log profiler) <https://www.mono-project.com/docs/"
"debug+profile/profile/profiler/>`_ 可用于Linux和macOS . 由于Mono的变化, 它目"
"前在Windows上无法使用."

msgid ""
"External Mono profiler like `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ can be used as described `here <https://github.com/godotengine/"
"godot/pull/34382>`_."
msgstr ""
"外部的Mono分析器比如 `JetBrains dotTrace <https://www.jetbrains.com/profiler/"
">`_ 使用方法在 `这里 <https://github.com/godotengine/godot/pull/34382>`_."

msgid "Translation status"
msgstr "翻译状态"
