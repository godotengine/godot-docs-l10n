# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Android in-app purchases"
msgstr "Android 应用内购买"

msgid ""
"Godot offers a first-party ``GodotGooglePlayBilling`` Android plugin since "
"Godot 3.2.2. The new plugin uses the `Google Play Billing library <https://"
"developer.android.com/google/play/billing>`__ instead of the now deprecated "
"AIDL IAP implementation."
msgstr ""
"自 Godot 3.2.2 以来，Godot提供了一个第一方的 ``GodotGooglePlayBilling`` "
"Android 插件。新插件使用 `Google Play Billing 库 <https://developer.android."
"com/google/play/billing>`__\\ ，而不是现在已经废弃的 AIDL IAP 实现。"

msgid ""
"If you learn better by looking at an example, you can find the demo project "
"`here <https://github.com/godotengine/godot-demo-projects/tree/master/mobile/"
"android_iap>`__."
msgstr ""
"如果您更善于通过查看示例学习，可以在\\ `这里 <https://github.com/godotengine/"
"godot-demo-projects/tree/master/mobile/android_iap>`__\\ 找到演示项目。"

msgid "Migrating from Godot 3.2.1 and lower (GodotPaymentsV3)"
msgstr "从 Godot 3.2.1 和更低版本迁移（GodotPaymentsV3）"

msgid ""
"The new ``GodotGooglePlayBilling`` API is not compatible with its "
"predecessor ``GodotPaymentsV3``."
msgstr ""
"新的 ``GodotGooglePlayBilling`` API 与其前身 ``GodotPaymentsV3`` 不兼容。"

msgid "Changes"
msgstr "修改"

msgid ""
"You need to enable the Custom Build option in your Android export settings "
"and install the ``GodotGooglePlayBilling`` plugin manually (see below for "
"details)"
msgstr ""
"你需要在你的 Android 导出设置中启用 Custom Build 选项，并手动安装 "
"``GodotGooglePlayBilling`` 插件（详见下文）"

msgid ""
"All purchases have to be acknowledged by your app. This is a `requirement "
"from Google <https://developer.android.com/google/play/billing/"
"integrate#process>`__. Purchases that are not acknowledged by your app will "
"be refunded."
msgstr ""
"所有的购买都必须被你的应用程序所确认。这是 `Google 的要求 <https://developer."
"android.com/google/play/billing/integrate#process>`__\\ 。您的应用程序未确认"
"的购买将被退款。"

msgid "Support for subscriptions"
msgstr "支持订阅"

msgid "Signals (no polling or callback objects)"
msgstr "信号（没有轮询或回调对象）"

msgid "Usage"
msgstr "用法"

msgid "Getting started"
msgstr "入门"

msgid ""
"If not already done, make sure you have enabled and successfully set up :ref:"
"`Android Custom Builds <doc_android_custom_build>`. Grab "
"the``GodotGooglePlayBilling`` plugin binary and config from the `releases "
"page <https://github.com/godotengine/godot-google-play-billing/releases>`__ "
"and put both into `res://android/plugins`. The plugin should now show up in "
"the Android export settings, where you can enable it."
msgstr ""
"如果还没有完成, 请确保你已经启用并成功设置 :ref:`Android Custom Builds "
"<doc_android_custom_build>`. 从 `releases page <https://github.com/"
"godotengine/godot-google-play-billing/releases>`__\"中抓取 "
"``GodotGooglePlayBilling`` 插件二进制文件和配置文件, 并将两者放入 `res://"
"android/plugins` 中. 现在该插件应该出现在Android导出设置中, 你可以启用它."

msgid ""
"To use the ``GodotGooglePlayBilling`` API you first have to get the "
"``GodotGooglePlayBilling`` singleton and start the connection:"
msgstr ""
"要使用 ``GodotGooglePlayBilling`` API, 你首先要获得 "
"``GodotGooglePlayBilling`` 单例, 并启动连接:"

msgid ""
"All API methods only work if the API is connected. You can use ``payment."
"isReady()`` to check the connection status."
msgstr ""
"所有的 API 方法只有在 API 被连接的情况下才会工作，你可以使用 ``payment."
"isReady()`` 检查连接状态。"

msgid "Querying available items"
msgstr "查询可获取的项目"

msgid ""
"As soon as the API is connected, you can query SKUs using "
"``querySkuDetails``."
msgstr "只要连接了 API，你就可以使用 ``querySkuDetails`` 来查询 SKU。"

msgid "Full example:"
msgstr "完整示例："

msgid "Purchase an item"
msgstr "购买项目"

msgid ""
"To initiate the purchase flow for an item, call ``purchase``. You **must** "
"query the SKU details for an item before you can initiate the purchase flow "
"for it."
msgstr ""
"要启动一个项目的购买流程，请调用 ``purchase``\\ 。在启动购买流程之前，你\\ **"
"必须**\\ 查询该项目的 SKU 详情。"

msgid ""
"Then, wait for the ``_on_purchases_updated`` callback and handle the "
"purchase result:"
msgstr "然后，等待 ``_on_purchases_updated`` 回调并处理购买结果："

msgid "Check if the user purchased an item"
msgstr "检查用户是否购买了某个项目"

msgid ""
"To get all purchases, call ``queryPurchases``. Unlike most of the other "
"functions, ``queryPurchases`` is a synchronous operation and returns a :ref:"
"`Dictionary <class_Dictionary>` with a status code and either an array of "
"purchases or an error message. Only active subscriptions and non-consumed "
"one-time purchases are returned."
msgstr ""
"要获得所有的购买，请调用 ``queryPurchases``\\ 。与大多数其他函数不同的是，\\ "
"``queryPurchases`` 是一个同步操作，会返回一个 :ref:`Dictionary "
"<class_Dictionary>`\\ ，其中包含状态码和一个购买数组或一个错误信息。只会返回"
"处于活跃状态的订阅和尚未消耗的一次性购买。"

msgid "Consumables"
msgstr "消耗品"

msgid ""
"If your in-app item is not a one-time purchase but a consumable item (e.g. "
"coins) which can be purchased multiple times, you can consume an item by "
"calling ``consumePurchase`` with a purchase token. Call ``queryPurchases`` "
"to get the purchase token. Calling ``consumePurchase`` automatically "
"acknowledges a purchase. Consuming a product allows the user to purchase it "
"again, and removes it from appearing in subsequent ``queryPurchases`` calls."
msgstr ""
"如果你的应用内物品不是一次性购买，而是可以多次购买的消耗品（如硬币），你可以"
"用购买令牌调用 ``consumePurchase`` 来消耗物品。调用 ``queryPurchases`` 来获取"
"购买令牌。调用 ``consumePurchase`` 会自动确认购买。消耗产品后，用户就可以再一"
"次进行购买，同时也会将其从后续 ``queryPurchases`` 的返回中移除。"

msgid "Subscriptions"
msgstr "订阅"

msgid ""
"Subscriptions don't work much different from regular in-app items. Just use "
"``\"subs\"`` as second argument to ``querySkuDetails`` to get subscription "
"details. Check ``is_auto_renewing`` in the results of ``queryPurchases()`` "
"to see if a user has cancelled an auto-renewing subscription"
msgstr ""
"订阅的工作原理和普通的应用内项目没有太大区别. 只要使用 ``\"subs\"`` 作为 "
"``querySkuDetails`` 的第二个参数, 就可以得到订阅的详细信息. 在 "
"``queryPurchases()`` 的结果中检查 ``is_auto_renewing`` 来查看用户是否取消了自"
"动更新的订阅"

msgid "Translation status"
msgstr "翻译状态"
