# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom HTML page for Web export"
msgstr "导出自定义 HTML 页面"

msgid ""
"While Web export templates provide a default HTML page fully capable of "
"launching the project without any further customization, it may be "
"beneficial to create a custom HTML page. While the game itself cannot easily "
"be directly controlled from the outside yet, such page allows to customize "
"the initialization process for the engine."
msgstr ""
"虽然 Web 导出模板提供了一个默认的 HTML 页面，完全能够在没有任何进一步定制的情"
"况下启动项目，但创建自定义 HTML 页面可能是有益的。虽然游戏本身还不能轻易地从"
"外部直接控制，但这样的页面允许自定义引擎的初始化过程。"

msgid "Some use-cases where customizing the default page is useful include:"
msgstr "自定义默认页面在某些情况下非常有用，包括："

msgid "Loading files from a different directory than the page;"
msgstr "读取与该页面不同目录下的文件；"

msgid "Loading a ``.zip`` file instead of a ``.pck`` file as the main pack;"
msgstr "加载 ``.zip`` 文件而不是 ``.pck`` 文件作为主资源包；"

msgid "Loading the engine from a different directory than the main pack file;"
msgstr "从主资源包文件以外的目录中加载引擎文件；"

msgid ""
"Adding a click-to-play button so that games can be started in the fullscreen "
"mode;"
msgstr "添加“点击开始”按钮，使游戏可以在全屏模式下启动；"

msgid ""
"Loading some extra files before the engine starts, making them available in "
"the project file system as soon as possible;"
msgstr "在引擎启动之前加载一些额外的文件，以便稍后在文件系统中可用；"

msgid ""
"Passing custom command line arguments, e.g. ``-s`` to start a ``MainLoop`` "
"script."
msgstr "传递自定义 \"命令行\" 参数, 例如 ``-s`` 启动 ``MainLoop`` 脚本."

msgid ""
"The default HTML page is available in the Godot Engine repository at `/misc/"
"dist/html/full-size.html <https://github.com/godotengine/godot/blob/master/"
"misc/dist/html/full-size.html>`__ but the following template can be used as "
"a much simpler example:"
msgstr ""
"默认的HTML页面可在Godot引擎仓库 `/misc/dist/html/full-size.html <https://"
"github.com/godotengine/godot/blob/master/misc/dist/html/full-size.html>`__ 中"
"找到, 但以下模板可作为一个更简单的例子:"

msgid "Setup"
msgstr "场景布置"

msgid ""
"As shown by the example above, it is mostly a regular HTML document, with "
"few placeholders which needs to be replaced during export, an html "
"``<canvas>`` element, and some simple JavaScript code that calls the :js:"
"class:`Engine` class."
msgstr ""
"如上面的例子所示，它主要是一个普通的HTML文档，有几个占位符需要在导出时替换，"
"一个html ``<canvas>`` 元素，和一些简单的JavaScript代码，调用 :js:class:"
"`Engine` 类。"

msgid "The only required placeholders are:"
msgstr "唯一需要的占位符是:"

msgid ""
"``$GODOT_URL``: The name of the main JavaScript file, which provides the :js:"
"class:`Engine` class required to start the engine and that must be included "
"in the HTML as a ``<script>``. The name is generated from the *Export Path* "
"during the export process."
msgstr ""
"``$GODOT_URL`` : 主JavaScript文件的名称，它提供了启动引擎所需的 :js:class:"
"`Engine` 类，必须作为 ``<script>`` 包含在HTML中。这个名字是在导出过程中从*导"
"出路径Export Path* 生成的。"

msgid ""
"``$GODOT_CONFIG``: A JavaScript object, containing the export options and "
"can be later overridden. See :js:attr:`EngineConfig` for the full list of "
"overrides."
msgstr ""
"``$GODOT_CONFIG`` : 一个JavaScript对象，包含导出选项，以后可以被重写。参见 :"
"js:attr:`EngineConfig` 获取完整的重写列表。"

msgid ""
"The following optional placeholders will enable some extra features in your "
"custom HTML template."
msgstr "以下可选的占位符将在你的自定义 HTML 模板中实现一些额外的功能。"

msgid ""
"``$GODOT_PROJECT_NAME``: The project name as defined in the Project "
"Settings. It is a good idea to use it as a ``<title>`` in your template."
msgstr ""
"``$GODOT_PROJECT_NAME``: 在项目设置中定义的项目名称。在你的模板中使用它作为 "
"``<title>`` 是一个好主意。"

msgid ""
"``$GODOT_HEAD_INCLUDE``: A custom string to include in the HTML document "
"just before the end of the ``<head>`` tag. It is customized in the export "
"options under the *Html / Head Include* section. While you fully control the "
"HTML page you create, this variable can be useful for configuring parts of "
"the HTML ``head`` element from the Godot Editor, e.g. for different Web "
"export presets."
msgstr ""
"``$GODOT_HEAD_INCLUDE``. 在HTML文件中, 在 ``<head>`` 标签结尾前包含的一个自定"
"义字符串. 它是在*Html / Head Include*部分的导出选项中自定义的. 虽然你可以完全"
"控制你所创建的HTML页面, 但这个变量对于从Godot Editor中配置HTML``head`` 元素的"
"部分内容很有用, 例如, 对于不同的Web导出预设."

msgid ""
"When the custom page is ready, it can be selected in the export options "
"under the *Html / Custom Html Shell* section."
msgstr ""
"当自定义页面准备好后, 可以在 *Html / Custom Html Shell* 部分的导出选项中选择."

msgid "Starting the project"
msgstr "启动项目"

msgid ""
"To be able to start the game, you need to write a script that initializes "
"the engine — the control code. This process consists of three steps, though "
"as shown most of them can be skipped depending on how much customization is "
"needed (or be left to a default behavior)."
msgstr ""
"为了能够启动游戏，你需要写一个脚本来初始化引擎 — 控制代码。这个过程包括三个步"
"骤，不过如图所示，其中大部分步骤可以跳过，这取决于需要多少定制化的内容，或者"
"留给默认行为。"

msgid ""
"See the :ref:`HTML5 shell class reference <doc_html5_shell_classref>`, for "
"the full list of methods and options available."
msgstr ""
"参见 :ref:`HTML5 shell 类参考 <doc_html5_shell_classref>`\\ ，以获得可用方法"
"和选项的完整列表。"

msgid ""
"First, the engine must be loaded, then it needs to be initialized, and after "
"this the project can finally be started. You can perform every of these "
"steps manually and with great control. However, in the simplest case all you "
"need to do is to create an instance of the :js:class:`Engine` class with the "
"exported configuration, and then call the :js:meth:`engine.startGame <Engine."
"prototype.startGame>` method optionally overriding any :js:attr:"
"`EngineConfig` parameters."
msgstr ""
"首先，引擎必须被加载，然后需要被初始化，在这之后，项目最终可以被启动。你可以"
"手动执行这些步骤中的每一步，而且控制得很好。然而，在最简单的情况下，你需要做"
"的是用导出的配置创建一个 :js:class:`Engine` 类的实例，然后调用 :js:meth:"
"`engine.startGame <Engine.prototype.startGame>` 方法，可选择重写任何 :js:"
"attr:`EngineConfig` 参数。"

msgid ""
"This snippet of code automatically loads and initializes the engine before "
"starting the game. It uses the given configuration to to load the engine. "
"The :js:meth:`engine.startGame <Engine.prototype.startGame>` method is "
"asynchronous and returns a ``Promise``. This allows your control code to "
"track if the game was loaded correctly without blocking execution or relying "
"on polling."
msgstr ""
"这段代码在启动游戏前自动加载和初始化引擎。它使用给定的配置来加载引擎。\\ :js:"
"meth:`engine.startGame <Engine.prototype.startGame>` 方法是异步的，返回一个 "
"``Promise``\\ 。这允许你的控制代码跟踪游戏是否被正确加载，而无需阻塞执行或依"
"赖轮询。"

msgid ""
"In case your project needs to have special control over the start arguments "
"and dependency files, the :js:meth:`engine.start <Engine.prototype.start>` "
"method can be used instead. Note, that this method do not automatically "
"preload the ``pck`` file, so you will probably want to manually preload it "
"(and any other extra file) via the :js:meth:`engine.preloadFile <Engine."
"prototype.preloadFile>` method."
msgstr ""
"如果你的项目需要对启动参数和依赖文件进行特别控制，可以使用 :js:meth:`engine."
"start <Engine.prototype.start>` 方法来代替。注意，这个方法不会自动预加载 "
"``pck`` 文件，所以你可能要通过 :js:meth:`engine.preloadFile <Engine."
"prototype.preloadFile>` 方法手动预加载它和任何其他额外的文件。"

msgid ""
"Optionally, you can also manually :js:meth:`engine.init <Engine.prototype."
"init>` to perform specific actions after the module initialization, but "
"before the engine starts."
msgstr ""
"另外，你也可以手动 :js:meth:`engine.init <Engine.prototype.init>` 在模块初始"
"化之后，但在引擎启动之前，执行特定的动作。"

msgid ""
"This process is a bit more complex, but gives you full control over the "
"engine startup process."
msgstr "这个过程有点复杂，但可以让你完全控制引擎的启动过程。"

msgid ""
"To load the engine manually the :js:meth:`Engine.load` static method must be "
"called. As this method is static, multiple engine instances can be spawned "
"if the share the same ``wasm``."
msgstr ""
"要手动加载引擎，必须调用 :js:meth:`Engine.load` 静态方法。由于这个方法是静态"
"的，如果多个引擎实例共享相同的 ``wasm`` ，就可以产生多个引擎实例。"

msgid ""
"Multiple instances cannot be spawned by default, as the engine is "
"immediately unloaded after it is initialized. To prevent this from happening "
"see the :js:attr:`unloadAfterInit` override option. It is still possible to "
"unload the engine manually afterwards by calling the :js:meth:`Engine."
"unload` static method. Unloading the engine frees browser memory by "
"unloading files that are no longer needed once the instance is initialized."
msgstr ""
"默认情况下不能生成多个实例，因为引擎被初始化后会立即卸载。为了防止这种情况发"
"生，请看 :js:attr:`unloadAfterInit` 覆盖选项。之后仍然可以通过调用 :js:meth:"
"`Engine.unload` 静态方法来手动卸载引擎。卸载引擎可以通过卸载实例初始化后不再"
"需要的文件来释放浏览器内存。"

msgid "Customizing the behavior"
msgstr "自定义行为"

msgid ""
"In the Web environment several methods can be used to guarantee that the "
"game will work as intended."
msgstr "在 Web 环境下，可以使用几种方法来保证游戏能够按照预期的方式运行。"

msgid ""
"If you target a specific version of WebGL, or just want to check if WebGL is "
"available at all, you can call the :js:meth:`Engine.isWebGLAvailable` "
"method. It optionally takes an argument that allows to test for a specific "
"major version of WebGL."
msgstr ""
"如果您的目标是 WebGL 的特定版本，或者只是想检查 WebGL 是否可用，您可以调用 :"
"js:meth:`Engine.isWebGLAvailable` 方法。它可以选择接受一个参数，允许测试 "
"WebGL 的特定主要版本。"

msgid ""
"As the real executable file does not exist in the Web environment, the "
"engine only stores a virtual filename formed from the base name of loaded "
"engine files. This value affects the output of the :ref:`OS."
"get_executable_path() <class_OS_method_get_executable_path>` method and "
"defines the name of the automatically started main pack. The :js:attr:"
"`executable` override option can be used to override this value."
msgstr ""
"由于真正的可执行文件不存在于 Web 环境中，引擎只存储一个由加载的引擎文件的基本"
"名称形成的虚拟文件名。这个值会影响 :ref:`OS.get_executable_path() "
"<class_OS_method_get_executable_path>` 方法的输出，并定义自动启动的主包的名"
"称。\\ :js:attr:`executable` 选项可以用来重写这个值。"

msgid "Customizing the presentation"
msgstr "自定义展现形式"

msgid ""
"Several configuration options can be used to further customize the look and "
"behavior of the game on your page."
msgstr "有几个配置选项可以用来进一步定制你页面上游戏的外观和行为。"

msgid ""
"By default, the first canvas element on the page is used for rendering. To "
"use a different canvas element the :js:attr:`canvas` override option can be "
"used. It requires a reference to the DOM element itself."
msgstr ""
"默认情况下会使用页面上的第一个 canvas 元素来渲染。要使用其他 canvas 元素，可"
"以使用 :js:attr:`canvas` 选项重写。它需要一个对 DOM 元素本身的引用。"

msgid ""
"The way the engine resize the canvas can be configured via the :js:attr:"
"`canvasResizePolicy` override option."
msgstr ""
"引擎调整画布大小的方式可以通过 :js:attr:`canvasResizePolicy` 覆盖选项进行配"
"置。"

msgid ""
"If your game takes some time to load, it may be useful to display a custom "
"loading UI which tracks the progress. This can be achieved with the :js:attr:"
"`onProgress` callback option, which allows to set up a callback function "
"that will be called regularly as the engine loads new bytes."
msgstr ""
"如果你的游戏需要一些时间来加载，显示一个跟踪进度的自定义加载UI可能是有用的。"
"这可以通过 :js:attr:`onProgress` 回调选项来实现，它允许设置一个回调函数，当引"
"擎加载新字节时，该函数将被定期调用。"

msgid ""
"Be aware that in some cases ``total`` can be ``0``. This means that it "
"cannot be calculated."
msgstr "请注意，在某些情况下 ``total`` 可能是 ``0``\\ 。这意味着无法计算。"

msgid ""
"If your game supports multiple languages, the :js:attr:`locale` override "
"option can be used to force a specific locale, provided you have a valid "
"language code string. It may be good to use server-side logic to determine "
"which languages a user may prefer. This way the language code can be taken "
"from the ``Accept-Language`` HTTP header, or determined by a GeoIP service."
msgstr ""
"如果你的游戏支持多种语言， :js:attr:`locale` 覆盖选项可以用来强制使用一个特定"
"的语言，只要你有一个有效的语言代码字符串。使用服务器端的逻辑来确定用户可能喜"
"欢哪种语言可能较好。这样，语言代码可以从 ``Accept-Language`` HTTP头中获取，或"
"者由GeoIP服务决定。"

msgid "Debugging"
msgstr "调试"

msgid ""
"To debug exported projects, it may be useful to read the standard output and "
"error streams generated by the engine. This is similar to the output shown "
"in the editor console window. By default, standard ``console.log`` and "
"``console.warn`` are used for the output and error streams respectively. "
"This behavior can be customized by setting your own functions to handle "
"messages."
msgstr ""
"要调试导出的项目, 可能需要读取引擎生成的标准输出和错误流. 这与编辑器控制台窗"
"口中显示的输出类似. 默认情况下, 标准的 ``console.log`` 和 ``console."
"warning`` 分别用于输出和错误流. 这种行为可以通过设置自己的函数来处理消息来定"
"制."

msgid ""
"Use the :js:attr:`onPrint` override option to set a callback function for "
"the output stream, and the :js:attr:`onPrintError` override option to set a "
"callback function for the error stream."
msgstr ""
"使用 :js:attr:`onPrint` 覆盖选项为输出流设置一个回调函数，以及 :js:attr:"
"`onPrintError` 覆盖选项为错误流设置一个回调函数。"

msgid ""
"When handling the engine output keep in mind, that it may not be desirable "
"to print it out in the finished product."
msgstr "在处理引擎输出时，请记住，在成品中打印出来可能是不可取的。"

msgid "Translation status"
msgstr "翻译状态"
