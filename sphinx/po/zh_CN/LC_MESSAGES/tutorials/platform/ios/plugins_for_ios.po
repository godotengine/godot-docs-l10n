# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Plugins for iOS"
msgstr "iOS 的插件"

msgid ""
"Godot provides StoreKit, GameCenter, iCloud services and other plugins. They "
"are using same model of asynchronous calls explained below."
msgstr ""
"Godot 提供了 StoreKit、GameCenter、iCloud 服务等插件。它们使用下面解释的相同"
"异步调用模型。"

msgid "ARKit and Camera access are also provided as plugins."
msgstr "ARKit和Camera访问也作为插件提供."

msgid ""
"Latest updates, documentation and source code can be found at `Godot iOS "
"plugins repository <https://github.com/godotengine/godot-ios-plugins>`_"
msgstr ""
"最新的更新、文档和源代码可以在Godot iOS插件库找到 `Godot iOS plugins "
"repository <https://github.com/godotengine/godot-ios-plugins>`_"

msgid "Accessing plugin singletons"
msgstr "访问插件单例"

msgid ""
"To access plugin functionality, you first need to check that the plugin is "
"exported and available by calling the `Engine.has_singleton()` function, "
"which returns a registered singleton."
msgstr ""
"要访问插件功能, 首先需要通过调用 `Engine.has_singleton()` 函数来检查插件是否"
"导出并可用, 该函数会返回一个注册的单例."

msgid "Here's an example of how to do this in GDScript:"
msgstr "下面是一个如何在GDScript中做到这一点的例子:"

msgid "Asynchronous methods"
msgstr "异步方法"

msgid ""
"When requesting an asynchronous operation, the method will look like this:"
msgstr "请求异步操作时, 方法如下所示:"

msgid ""
"The parameter will usually be a Dictionary, with the information necessary "
"to make the request, and the call will have two phases. First, the method "
"will immediately return an Error value. If the Error is not 'OK', the call "
"operation is completed, with an error probably caused locally (no internet "
"connection, API incorrectly configured, etc). If the error value is 'OK', a "
"response event will be produced and added to the 'pending events' queue. "
"Example:"
msgstr ""
"参数通常是一个字典，包含发出请求所需的信息，并且调用将有两个阶段。首先，该方"
"法将立即返回 Error 值。如果这个 Error 不是“OK”，则调用操作完成，可能在本地引"
"起错误（没有网络连接、API 配置不正确等）。如果错误值是“OK”，则会生成响应事件"
"并将其添加到“挂起事件”队列中。例如："

msgid ""
"Remember that when a call returns OK, the API will *always* produce an event "
"through the pending_event interface, even if it's an error, or a network "
"timeout, etc. You should be able to, for example, safely block the interface "
"waiting for a reply from the server. If any of the APIs don't behave this "
"way it should be treated as a bug."
msgstr ""
"请记住，当一个调用返回 OK 时，API 将\\ *始终*\\ 通过 pending_event 接口产生一"
"个事件，即使它是一个错误，或网络超时等。您应该能够，例如，安全地阻止等待的接"
"口来自服务器的回复。如果任何 API 不以这种方式运行，则应将其视为错误。"

msgid "The pending event interface consists of two methods:"
msgstr "挂起事件接口包含两个方法："

msgid ""
"``get_pending_event_count()`` Returns the number of pending events on the "
"queue."
msgstr "``get_pending_event_count()`` 返回队列中挂起事件的数量。"

msgid ""
"``Variant pop_pending_event()`` Pops the first event from the queue and "
"returns it."
msgstr "``Variant pop_pending_event()`` 弹出队列中的第一个事件并返回它。"

msgid "Store Kit"
msgstr "Store Kit"

msgid ""
"Implemented in `Godot iOS InAppStore plugin <https://github.com/godotengine/"
"godot-ios-plugins/blob/master/plugins/inappstore/in_app_store.mm>`_."
msgstr ""
"实现在 `Godot iOS InAppStore 插件 <https://github.com/godotengine/godot-ios-"
"plugins/blob/master/plugins/inappstore/in_app_store.mm>`_ ."

msgid ""
"The Store Kit API is accessible through the ``InAppStore`` singleton. It is "
"initialized automatically."
msgstr "Store Kit API 可通过 ``InAppStore`` 单例访问。它是自动初始化的。"

msgid "The following methods are available and documented below:"
msgstr "提供了以下方法，文档如下："

msgid "``purchase``"
msgstr "``purchase``"

msgid ""
"Purchases a product ID through the Store Kit API. You have to call "
"``finish_transaction(product_id)`` once you receive a successful response or "
"call ``set_auto_finish_transaction(true)`` prior to calling ``purchase()``. "
"These two methods ensure the transaction is completed."
msgstr ""
"通过 Store Kit API 购买一个产品 ID。你需要在收到成功响应后调用 "
"``finish_transaction(product_id)``\\ ，或者在调用 ``purchase()`` 之前调用 "
"``set_auto_finish_transaction(true)``\\ 。这两个方法确保事务完成。"

msgid "Parameters"
msgstr "参数"

msgid ""
"Takes a dictionary as a parameter, with one field, ``product_id``, a string "
"with your product ID. Example:"
msgstr ""
"参数是一个字典，包含一个 ``product_id`` 字段，是你的商品的字符串 ID。例子："

msgid "Response event"
msgstr "响应事件"

msgid "The response event will be a dictionary with the following fields:"
msgstr "响应事件将是包含以下字段的字典："

msgid "On error:"
msgstr "出错时："

msgid "On success:"
msgstr "成功时："

msgid "``request_product_info``"
msgstr "``request_product_info``"

msgid "Requests the product info on a list of product IDs."
msgstr "在产品ID列表中请求产品信息."

msgid ""
"Takes a dictionary as a parameter, with a single ``product_ids`` key to "
"which a string array of product IDs is assigned. Example:"
msgstr ""
"参数为字典，只有一个字段 ``product_ids``\\ ，是产品 ID 字符串的数组。例如："

msgid "``restore_purchases``"
msgstr "``restore_purchases``"

msgid ""
"Restores previously made purchases on user's account. This will create "
"response events for each previously purchased product ID."
msgstr ""
"恢复用户账户之前完成的购买。会为每一个之前购买过的产品 ID 创建响应事件。"

msgid "The response events will be dictionaries with the following fields:"
msgstr "响应事件将是包含以下字段的字典："

msgid "``set_auto_finish_transaction``"
msgstr "``set_auto_finish_transaction``"

msgid ""
"If set to ``true``, once a purchase is successful, your purchase will be "
"finalized automatically. Call this method prior to calling ``purchase()``."
msgstr ""
"设为 ``true`` 时，一旦购买成功，就会自动结束购买。请在调用 ``purchase()`` 前"
"调用本方法。"

msgid ""
"Takes a boolean as a parameter which specifies if purchases should be "
"automatically finalized. Example:"
msgstr "参数为布尔值，表示购买是否应该自动结束。例如："

msgid "``finish_transaction``"
msgstr "``finish_transaction``"

msgid ""
"If you don't want transactions to be automatically finalized, call this "
"method after you receive a successful purchase response."
msgstr "如果你不希望自动结束交易事务，请在接收到成功购买响应后调用本方法。"

msgid ""
"Takes a string ``product_id`` as an argument. ``product_id`` specifies what "
"product to finalize the purchase on. Example:"
msgstr ""
"参数 ``product_id`` 是一个字符串。\\ ``product_id`` 表示需要结束购买的产品。"
"例如："

msgid "Game Center"
msgstr "游戏中心"

msgid ""
"Implemented in `Godot iOS GameCenter plugin <https://github.com/godotengine/"
"godot-ios-plugins/blob/master/plugins/gamecenter/game_center.mm>`_."
msgstr ""
"在 `Godot iOS GameCenter 插件 <https://github.com/godotengine/godot-ios-"
"plugins/blob/master/plugins/gamecenter/game_center.mm>`_\\ 中实现。"

msgid ""
"The Game Center API is available through the \"GameCenter\" singleton. It "
"has the following methods:"
msgstr "Game Center API 可以通过“GameCenter”单例使用。它有以下方法："

msgid "and the pending events interface:"
msgstr "以及未决事件接口："

msgid "``authenticate``"
msgstr "``authenticate``"

msgid "Authenticates a user in Game Center."
msgstr "在游戏中心对用户进行身份验证."

msgid "``post_score``"
msgstr "``post_score``"

msgid "Posts a score to a Game Center leaderboard."
msgstr "将分数发布到游戏中心排行榜."

msgid "Takes a dictionary as a parameter, with two fields:"
msgstr "参数为一个字典，有两个字段："

msgid "``score`` a float number"
msgstr "``score`` 浮点数"

msgid "``category`` a string with the category name"
msgstr "``category`` 表示类别名称的字符串"

msgid "Example:"
msgstr "示例："

msgid "``award_achievement``"
msgstr "``award_achievement``"

msgid "Modifies the progress of a Game Center achievement."
msgstr "修改游戏中心成就的进度."

msgid "Takes a Dictionary as a parameter, with 3 fields:"
msgstr "将Dictionary作为参数, 包含3个字段:"

msgid "``name`` (string) the achievement name"
msgstr "``name``\\ （字符串）成就名称"

msgid ""
"``progress`` (float) the achievement progress from 0.0 to 100.0 (passed to "
"``GKAchievement::percentComplete``)"
msgstr ""
"``progress``\\ （float）成就进度从 0.0 到 100.0（传递给 ``GKAchievement :: "
"percentComplete``\\ ）"

msgid ""
"``show_completion_banner`` (bool) whether Game Center should display an "
"achievement banner at the top of the screen"
msgstr ""
"``show_completion_banner``\\ （bool）游戏中心是否应该在屏幕顶部显示成就横幅"

msgid "``reset_achievements``"
msgstr "``reset_achievements``"

msgid "Clears all Game Center achievements. The function takes no parameters."
msgstr "清除所有 Game Center 成就。该函数不带参数。"

msgid "``request_achievements``"
msgstr "``request_achievements``"

msgid ""
"Request all the Game Center achievements the player has made progress on. "
"The function takes no parameters."
msgstr "请求游戏角色取得进步的所有游戏中心成就. 该函数不带参数."

msgid "``request_achievement_descriptions``"
msgstr "``request_achievement_descriptions``"

msgid ""
"Request the descriptions of all existing Game Center achievements regardless "
"of progress. The function takes no parameters."
msgstr "无论进度如何, 都要求描述所有现有的Game Center成就. 该函数不带参数."

msgid "``show_game_center``"
msgstr "``show_game_center``"

msgid ""
"Displays the built in Game Center overlay showing leaderboards, "
"achievements, and challenges."
msgstr "显示内置的游戏中心叠加层, 显示排行榜, 成就和挑战."

msgid "Takes a Dictionary as a parameter, with two fields:"
msgstr "将Dictionary作为参数, 包含两个字段:"

msgid ""
"``view`` (string) (optional) the name of the view to present. Accepts "
"\"default\", \"leaderboards\", \"achievements\", or \"challenges\". Defaults "
"to \"default\"."
msgstr ""
"``view``\\ （字符串）（可选）要呈现的视图的名称。接受“default”（默"
"认）“leaderboards”（排行榜）“achievements”（成就）“challenges”（挑战）。默认"
"为“default”。"

msgid ""
"``leaderboard_name`` (string) (optional) the name of the leaderboard to "
"present. Only used when \"view\" is \"leaderboards\" (or \"default\" is "
"configured to show leaderboards). If not specified, Game Center will display "
"the aggregate leaderboard."
msgstr ""
"``leaderboard_name``\\ （字符串）（可选）要显示的排行榜的名称。仅"
"在“view”为“leaderboards”（或“default”被配置为显示排行榜）时使用。如果未指定，"
"Game Center 将显示聚合排行榜。"

msgid "Examples:"
msgstr "示例："

msgid "On close:"
msgstr "关闭时："

msgid "Multi-platform games"
msgstr "多平台游戏"

msgid ""
"When working on a multi-platform game, you won't always have the "
"\"GameCenter\" singleton available (for example when running on PC or "
"Android). Because the gdscript compiler looks up the singletons at compile "
"time, you can't just query the singletons to see and use what you need "
"inside a conditional block, you need to also define them as valid "
"identifiers (local variable or class member). This is an example of how to "
"work around this in a class:"
msgstr ""
"在开发多平台游戏时，您不会总是使用“GameCenter”单例（例如在 PC 或 Android 上运"
"行时）。 因为 GDScript 编译器在编译时查找单例，所以不能只查询单例以查看和使用"
"条件块中需要的内容，还需要将它们定义为有效标识符（局部变量或类成员）。 这是一"
"个如何在类中解决此问题的示例："

msgid "Translation status"
msgstr "翻译状态"
