# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "WebRTC"
msgstr "WebRTC"

msgid "HTML5, WebSocket, WebRTC"
msgstr "HTML5、WebSocket、WebRTC"

msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""
"Godot的一大特点是它能够导出到HTML5/WebAssembly平台, 当用户访问您的网页时, 您"
"的游戏可以直接在浏览器中运行."

msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""
"这对于演示和完整的游戏来说都是一个很好的机会, 但过去有一些限制, 在网络领域, "
"浏览器过去只支持HTTPRequests, 直到最近, 首先是WebSocket, 然后是WebRTC被提出为"
"标准."

msgid "WebSocket"
msgstr "WebSocket"

msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is quite simple, but a very powerful tool to send push "
"notifications to browsers, and has been used to implement chats, turn-based "
"games, etc."
msgstr ""
"当WebSocket协议在2011年12月被标准化后, 它允许浏览器与WebSocket服务器建立稳定"
"的双向连接. 该协议相当简单, 但却是一个非常强大的向浏览器发送推送通知的工具, "
"并已被用于实现聊天, 回合制游戏等."

msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""
"不过,WebSockets仍然使用TCP连接, 这对可靠性有好处, 但对减少延迟没有好处, 所以"
"不适合实时应用, 比如VoIP和快节奏的游戏."

msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""
"为此, 从2010年开始, 谷歌开始研究一项名为WebRTC的新技术, 后来在2017年, 这项技"
"术成为W3C候选推荐.WebRTC是一套复杂得集合规范, 并且在后台依靠许多其他技术"
"(ICE, DTLS, SDP)来提供两个对等体之间快速, 实时, 安全的通信."

msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr ""
"其想法是找到两个对等体之间最快的路线, 并尽可能建立直接通信(尽量避开中继服务"
"器)."

msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""
"然而, 这是有代价的, 那就是在通信开始之前, 两个对等体之间必须交换一些媒介信息"
"(以会话描述协议--SDP字符串的形式). 这通常采取所谓的WebRTC信号服务器的形式."

msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""
"对等体连接到信号服务器(例如 WebSocket 服务器)并发送其媒介信息. 然后, 服务器将"
"此信息转发到其他对等体, 允许它们建立所需的直接通信. 这一步完成后, 对等体可以"
"断开与信号服务器的连接, 并保持直接的点对点(P2P)连接打开状态."

msgid "Using WebRTC in Godot"
msgstr "在 Godot 中使用 WebRTC"

msgid ""
"WebRTC is implemented in Godot via two main classes :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API "
"implementation :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`. See "
"section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` for "
"more details."
msgstr ""
"在Godot中,WebRTC是通过两个主要的类来实现的 :ref:`WebRTCPeerConnection "
"<class_WebRTCPeerConnection>` 和 :ref:`WebRTCDataChannel "
"<class_WebRTCDataChannel>`, 加上多人游戏API实现 :ref:`WebRTCMultiplayer "
"<class_WebRTCMultiplayer>`. 更多细节请参见 :ref:`high-level multiplayer "
"<doc_high_level_multiplayer>` 章节."

msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDNative plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://github."
"com/godotengine/webrtc-native/releases>`__."
msgstr ""
"这些类在HTML5中自动可用, 但 **需要在本地(非HTML5)平台上使用外部GDNative插件"
"** . 查看 `webrtc-native 插件库 <https://github.com/godotengine/webrtc-"
"native>`__ , 以获取说明和最新的 `发布 <https://github.com/godotengine/webrtc-"
"native/releases>`__ ."

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""
"当导出到 Android 时，在导出项目或使用一键部署之前，确保在 Android 导出预设中"
"启用 ``INTERNET`` 权限。否则，任何形式的网络通信都会被 Android 系统阻止。"

msgid "Minimal connection example"
msgstr "最小连接示例"

msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""
"这个例子将向您展示如何在同一应用程序中的两个对等体之间创建WebRTC连接. 这在现"
"实场景中并不是很有用, 但会让你对如何设置WebRTC连接有一个很好的概览."

msgid "This will print:"
msgstr "这将打印:"

msgid "Local signaling example"
msgstr "本地信号示例"

msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""
"这个例子在上一个例子的基础上进行了扩展, 将对等体分离在两个不同的场景中, 并使"
"用 :ref:`singleton <doc_singletons_autoload>` 作为信号服务器."

msgid "And now for the local signaling server:"
msgstr "现在是本地信号服务器:"

msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""
"这个本地信号服务器应该是作为一个 :ref:`singleton <doc_singletons_autoload>` "
"来连接同一场景中的两个对等体."

msgid "Then you can use it like this:"
msgstr "然后, 您可以这样使用它:"

msgid "This will print something similar to this:"
msgstr "将打印出类似这样的内容:"

msgid "Remote signaling with WebSocket"
msgstr "使用 WebSocket 进行远程信号传输"

msgid ""
"A more advanced demo using WebSocket for signaling peers and :ref:"
"`WebRTCMultiplayer <class_WebRTCMultiplayer>` is available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/webrtc_signaling`."
msgstr ""
"一个更高级的演示，使用 WebSocket 作为信号对等体和 :ref:`WebRTCMultiplayer "
"<class_WebRTCMultiplayer>` 在 `godot 演示项目 <https://github.com/"
"godotengine/godot-demo-projects>`_ `networking/webrtc_signaling` 下提供。"

msgid "Translation status"
msgstr "翻译状态"
