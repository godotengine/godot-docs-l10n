# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Ray-casting"
msgstr "发射射线"

msgid "Introduction"
msgstr "前言"

msgid ""
"One of the most common tasks in game development is casting a ray (or custom "
"shaped object) and checking what it hits. This enables complex behaviors, "
"AI, etc. to take place. This tutorial will explain how to do this in 2D and "
"3D."
msgstr ""
"游戏开发中最常见的任务之一是发射射线(或自定义形状的对象)并检查其击中的内容. "
"这可以产生复杂的行为, 如AI等. 本教程将介绍如何在2D和3D中执行此操作."

msgid ""
"Godot stores all the low level game information in servers, while the scene "
"is just a frontend. As such, ray casting is generally a lower-level task. "
"For simple raycasts, node such as :ref:`RayCast <class_RayCast>` and :ref:"
"`RayCast2D <class_RayCast2D>` will work, as they will return every frame "
"what the result of a raycast is."
msgstr ""
"Godot 将所有底层游戏信息存储在服务器中，场景只是一个前端。因此，光线投射通常"
"是较底层的任务。对于简单的光线投射，使用 :ref:`RayCast <class_RayCast>` 和 :"
"ref:`RayCast2D <class_RayCast2D>` 节点就可以了，因为它们将每一帧都返回光线投"
"射的结果。"

msgid ""
"Many times, though, ray-casting needs to be a more interactive process so a "
"way to do this by code must exist."
msgstr ""
"但是, 很多时候, 射线投射应该是一个更具交互性的过程, 因此必须存在通过代码执行"
"此操作的方法."

msgid "Space"
msgstr "空间"

msgid ""
"In the physics world, Godot stores all the low level collision and physics "
"information in a *space*. The current 2d space (for 2D Physics) can be "
"obtained by accessing :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`. For 3D, it's :ref:`Spatial."
"get_world().space <class_Spatial_method_get_world>`."
msgstr ""
"在物理世界中,Godot将所有低级的碰撞和物理信息存储在一个 *空间* 中. 当前的2D空"
"间, 对于2D物理, 可以通过访问 :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>` 获得. 对于3D, 则为 :ref:`Spatial."
"get_world().space <class_Spatial_method_get_world>` ."

msgid ""
"The resulting space :ref:`RID <class_RID>` can be used in :ref:"
"`PhysicsServer <class_PhysicsServer>` and :ref:`Physics2DServer "
"<class_Physics2DServer>` respectively for 3D and 2D."
msgstr ""
"结果空间 :ref:`RID <class_RID>` 可在3D的 :ref:`PhysicsServer "
"<class_PhysicsServer>` 和2D的 :ref:`Physics2DServer <class_Physics2DServer>` "
"中."

msgid "Accessing space"
msgstr "获取空间"

msgid ""
"Godot physics runs by default in the same thread as game logic, but may be "
"set to run on a separate thread to work more efficiently. Due to this, the "
"only time accessing space is safe is during the :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` callback. Accessing "
"it from outside this function may result in an error due to space being "
"*locked*."
msgstr ""
"Godot物理默认与游戏逻辑运行在同一个线程中, 但可以设置为在一个单独的线程上运"
"行, 以便更高效地工作. 由于这一点, 只有在 :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` 回调期间访问空间才是安全的. 从这个函数"
"之外访问它可能会因为空间被 *锁定* 而导致错误."

msgid ""
"To perform queries into physics space, the :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` and :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` must be used."
msgstr ""
"要对物理空间执行查询, 必须使用 :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` 和 :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` ."

msgid "Use the following code in 2D:"
msgstr "在 2D 中使用以下代码："

msgid "Or more directly:"
msgstr "或者更直接："

msgid "And in 3D:"
msgstr "在 3D 中："

msgid "Raycast query"
msgstr "Raycast 查询"

msgid ""
"For performing a 2D raycast query, the method :ref:"
"`Physics2DDirectSpaceState.intersect_ray() "
"<class_Physics2DDirectSpaceState_method_intersect_ray>` may be used. For "
"example:"
msgstr ""
"为了执行二维 raycast射线查询, 可以使用方法 :ref:`Physics2DDirectSpaceState."
"intersect_ray() <class_Physics2DDirectSpaceState_method_intersect_ray>` . 例"
"如:"

msgid ""
"The result is a dictionary. If the ray didn't hit anything, the dictionary "
"will be empty. If it did hit something, it will contain collision "
"information:"
msgstr ""
"结果是一个字典. 如果射线没有击中任何东西, 字典将是空的. 如果它确实碰撞到了物"
"体, 将包含碰撞信息碰撞:"

msgid ""
"The ``result`` dictionary when a collision occurs contains the following "
"data:"
msgstr "发生碰撞时，\\ ``result`` 字典包含以下数据："

msgid "The data is similar in 3D space, using Vector3 coordinates."
msgstr "与 3D 空间类似，数据使用的是 Vector3 坐标。"

msgid "Collision exceptions"
msgstr "碰撞例外"

msgid ""
"A common use case for ray casting is to enable a character to gather data "
"about the world around it. One problem with this is that the same character "
"has a collider, so the ray will only detect its parent's collider, as shown "
"in the following image:"
msgstr ""
"光线投射的常见用例是使角色能够收集有关其周围世界的数据。这种情况的一个问题是"
"该角色上有碰撞体，因此光线只会检测到其父节点上的碰撞体，如下图所示："

msgid ""
"To avoid self-intersection, the ``intersect_ray()`` function can take an "
"optional third parameter which is an array of exceptions. This is an example "
"of how to use it from a KinematicBody2D or any other collision object node:"
msgstr ""
"为了避免自相交, ``intersect_ray()`` 函数可以采用可选的第三个参数, 这是一个排"
"除数组. 这是如何从KinematicBody2D或任何其他碰撞对象节点使用它的示例:"

msgid "The exceptions array can contain objects or RIDs."
msgstr "例外数组可以包含对象或 RID。"

msgid "Collision Mask"
msgstr "碰撞遮罩"

msgid ""
"While the exceptions method works fine for excluding the parent body, it "
"becomes very inconvenient if you need a large and/or dynamic list of "
"exceptions. In this case, it is much more efficient to use the collision "
"layer/mask system."
msgstr ""
"虽然例外方法适用于排除父体, 但如果需要大型和/或动态的例外列表, 则会变得非常不"
"方便. 在这种情况下, 使用碰撞层/遮罩系统要高效得多."

msgid ""
"The optional fourth argument for ``intersect_ray()`` is a collision mask. "
"For example, to use the same mask as the parent body, use the "
"``collision_mask`` member variable:"
msgstr ""
"``intersect_ray()`` 的第四个可选参数是一个碰撞掩码. 例如, 要使用与父级相同的"
"掩码, 请使用 ``collision_mask`` 成员变量:"

msgid ""
"See :ref:`doc_physics_introduction_collision_layer_code_example` for details "
"on how to set the collision mask."
msgstr ""
"关于如何设置碰撞掩码, 请参阅 :ref:"
"`doc_physics_introduction_collision_layer_code_example` ."

msgid "3D ray casting from screen"
msgstr "来自屏幕的 3D 光线投射"

msgid ""
"Casting a ray from screen to 3D physics space is useful for object picking. "
"There is not much need to do this because :ref:`CollisionObject "
"<class_CollisionObject>` has an \"input_event\" signal that will let you "
"know when it was clicked, but in case there is any desire to do it manually, "
"here's how."
msgstr ""
"将一条射线从屏幕上投射到3D物理空间, 对于对象的选取是很有用, 但没有太多必要这"
"样做, 因为 :ref:`CollisionObject <class_CollisionObject>` 有一个 "
"\"input_event\" 信号, 会让你知道它是什么时候被点击的, 但是如果有想要手动操作"
"需要, 可这样."

msgid ""
"To cast a ray from the screen, you need a :ref:`Camera <class_Camera>` node. "
"A ``Camera`` can be in two projection modes: perspective and orthogonal. "
"Because of this, both the ray origin and direction must be obtained. This is "
"because ``origin`` changes in orthogonal mode, while ``normal`` changes in "
"perspective mode:"
msgstr ""
"要从屏幕投射光线, 您需要 :ref:`Camera <class_Camera>` 节点. ``相机`` 可以是两"
"种投影模式: 透视和正交. 因此, 必须获得射线原点和方向. 这是因为 ``origin`` 在"
"正交模式下改变, 而 ``normal`` 在透视模式下改变:"

msgid "To obtain it using a camera, the following code can be used:"
msgstr "要使用相机获取它, 可以使用以下代码:"

msgid ""
"Remember that during ``_input()``, the space may be locked, so in practice "
"this query should be run in ``_physics_process()``."
msgstr ""
"请记住，在 ``_input()`` 期间空间可能被锁定，所以实践中应该在 "
"``_physics_process()`` 中运行这个查询。"

msgid "Translation status"
msgstr "翻译状态"
