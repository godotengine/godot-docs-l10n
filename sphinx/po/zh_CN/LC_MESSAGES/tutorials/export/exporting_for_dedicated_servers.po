# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Exporting for dedicated servers"
msgstr "为专用服务器导出"

msgid ""
"If you want to run a dedicated server for your project on a machine that "
"doesn't have a GPU or display server available, you'll need to use a server "
"build of Godot."
msgstr ""
"如果要在没有 GPU 或显示服务器的计算机上为项目运行专用服务器, 则需要使用 "
"Godot 的服务器版本."

msgid "Platform support"
msgstr "平台支持"

msgid ""
"**Linux:** `Download an official Linux server binary <https://godotengine."
"org/download/server>`__. To compile a server binary from source, follow "
"instructions in :ref:`doc_compiling_for_x11`."
msgstr ""
"**Linux:** `下载官方Linux 服务器二进制文件 <https://godotengine.org/download/"
"server>`__. 要从源码编译服务器二进制文件, 请遵循 :ref:"
"`doc_compiling_for_x11` 中的说明."

msgid ""
"**macOS:** :ref:`Compile a server binary from source for macOS "
"<doc_compiling_for_osx>`."
msgstr ""
"**macOS :** :ref:`从源代码编译macOS 的服务器二进制文件 "
"<doc_compiling_for_osx>`."

msgid ""
"**Windows:** There is no dedicated server build for Windows yet. As an "
"alternative, you can use the ``--no-window`` command-line argument to "
"prevent Godot from spawning a window. Note that even with the ``--no-"
"window`` command-line argument, you'll need to have OpenGL support available "
"on the Windows machine."
msgstr ""
"**Windows:** 目前还没有运行在Windows平台下的专用服务器版本. 可以使用 ``--no-"
"window`` 命令行参数来防止Godot创建窗口. 请注意, 即使使用了 ``--no-window`` , "
"还是需要OpenGL支持."

msgid ""
"If your project uses C#, you'll have to use a Mono-enabled server binary."
msgstr "如果项目使用C#, 那么就必须使用带有Mono的服务器."

msgid "\"Headless\" versus \"server\" binaries"
msgstr "“无头”与“服务器”二进制文件的比较"

msgid ""
"The `server download page <https://godotengine.org/download/server>`__ "
"offers two kinds of binaries with several differences."
msgstr ""
"在 `服务器下载页面 <https://godotengine.org/download/server>`__ 提供了两种不"
"同的可执行文件."

msgid ""
"**Server:** Use this one for running dedicated servers. It does not contain "
"editor functionality, and is therefore smaller and more optimized."
msgstr ""
"**Server（服务器）：**\\ 不包含编辑器的功能，体积更小、优化更高，是在服务器平"
"台下的最佳选择。"

msgid ""
"**Headless:** This binary contains editor functionality and is intended to "
"be used for exporting projects. This binary *can* be used to run dedicated "
"servers, but it's not recommended as it's larger and less optimized."
msgstr ""
"**Headless（无头）：**\\ 包含编辑器功能的可执行文件，目的是用来导出项目。该可"
"执行文件\\ **可以**\\ 用来运行专用服务，但是因为其体积较大、优化程度较低，所"
"以不建议将其作为专用服务器使用。"

msgid "Exporting a PCK file"
msgstr "导出 PCK 文件"

msgid "There are two ways to export a project for a server:"
msgstr "有两种方法可以导出服务项目:"

msgid ""
"Create a Linux/X11 export preset, define a custom Release export template "
"that points to the server binary then export the project as usual."
msgstr ""
"创建Linux/X11导出预设, 并为Release(custom_template/release)选定指向服务器的可"
"执行文件, 然后照往常一样导出项目即可."

msgid "Export a PCK file only, preferably from a Linux/X11 export preset."
msgstr "只导出PCK文件, 建议从Linux/X11导出预设设定中导出."

msgid ""
"Both methods should result in identical output. The text below describes the "
"PCK file approach."
msgstr "这两种方法的输出结果应该是相同的. 下文介绍了PCK文件的方法."

msgid ""
"Once you've downloaded a server binary, you should export a PCK file "
"containing your project data. After creating the export preset, click "
"**Export PCK/ZIP** at the bottom of the Export dialog then choose a "
"destination path. The **Export With Debug** checkbox in the file dialog has "
"no bearing on the final PCK file, so you can leave it as-is."
msgstr ""
"一旦下载好一个服务器二进制文件, 你应当导出包含项目-数据的PCK文件. 创建导出预"
"设后, 点击导出对话框底部的 **Export PCK/ZIP** , 然后选择一个目标路径. 文件对"
"话框的 **Export With Debug** 检查框不会对最终的PCK文件造成影响, 所以可以让它"
"保持原样."

msgid "See :ref:`doc_exporting_projects` for more information."
msgstr "详见 :ref:`doc_exporting_projects` ."

msgid ""
"If you're exporting the project from a headless editor, call the headless "
"editor with the `--export-pack` option while in the project folder to export "
"only a PCK file."
msgstr ""
"如果你要从无头编辑器中导出项目，那么在项目文件夹中使用 `--export-pack` 选项调"
"用无头编辑器，就可以只导出一个 PCK 文件。"

msgid ""
"The PCK file will include resources not normally needed by the server, such "
"as textures and sounds. This means the PCK file will be larger than it could "
"possibly be. Support for stripping unneeded resources from a PCK for server "
"usage is planned in a future Godot release."
msgstr ""
"PCK文件会包含如材质, 声音等服务器通常不需要的资源, 因此PCK文件会比可能的要"
"大. 未来的Godot版本计划加入对去除PCK文件中服务器不需要资源的支持."

msgid ""
"On the bright side, this allows the same PCK file to be used both by a "
"client and dedicated server build. This can be useful if you want to ship a "
"single archive that can be used both as a client and dedicated server."
msgstr ""
"从好的方面, 这允许客户端和专用服务构建使用同一个PCK文件. 如果你想发布一个既可"
"用于客户端又可用于专用服务的单一存档文件, 可能很有用."

msgid "Preparing the server distribution"
msgstr "准备服务分布"

msgid ""
"After downloading or compiling a server binary, you should now place it in "
"the same folder as the PCK file you've exported. The server binary should "
"have the same name as the PCK (excluding the extension). This lets Godot "
"detect and use the PCK file automatically. If you want to start a server "
"with a PCK that has a different name, you can specify the path to the PCK "
"file using the ``--main-pack`` command-line argument::"
msgstr ""
"下载或编译服务器二进制文件后，应将其放在与你导出的 PCK 文件相同的文件夹中。服"
"务器二进制文件的名称应该与 PCK 文件相同（不包括扩展名）。这可以让 Godot 自动"
"检测使用 PCK 文件。如果你想用不同名字的 PCK 启动服务器，你可以使用 ``--main-"
"pack`` 命令行参数指定 PCK 文件的路径： ::"

msgid "Starting the dedicated server"
msgstr "启动专用服务"

msgid ""
"If both your client and server are part of the same Godot project, you will "
"have to add a way to start the server directly using a command-line "
"argument. This can be done by adding the following code snippet in your main "
"scene (or a singleton)'s ``_ready()`` method::"
msgstr ""
"如果你的客户端和服务都是同一个 Godot 项目的一部分，你必须添加一个使用命令行参"
"数直接启动服务的方法。这可以通过在你的主场景（或单例）的 ``_ready()`` 方法中"
"添加以下代码片段来实现： ::"

msgid ""
"Alternatively, you can make the dedicated server always start up if a "
"headless or server binary is detected::"
msgstr "另外，你也可以让专用服务在检测到无头或服务器二进制时总是启动： ::"

msgid ""
"If your client and server are separate Godot projects, your server should "
"most likely be configured in a way where running the main scene starts a "
"server automatically."
msgstr ""
"如果你的客户端和服务器是独立的Godot项目, 服务器通常应该配置成运行主场景时自启"
"服务的方式."

msgid "Next steps"
msgstr "下一步"

msgid ""
"On Linux, to make your dedicated server restart after a crash or system "
"reboot, you can `create a systemd service <https://medium.com/@benmorel/"
"creating-a-linux-service-with-systemd-611b5c8b91d6>`__. This also lets you "
"view server logs in a more convenient fashion, with automatic log rotation "
"provided by systemd."
msgstr ""
"在Linux上, 为了让你的专用服务在崩溃或系统重启后重新启动, 你可以 `创建一个系统"
"服务 <https://medium.com/@benmorel/creating-a-linux-servicewith-"
"systemd-611b5c8b91d6>`__ . 这也可以更方便的查看服务器日志, 系统提供的日志自动"
"轮询功能."

msgid ""
"If you have experience with containers, you could also look into wrapping "
"your dedicated server in a `Docker <https://www.docker.com/>`__ container. "
"This way, it can be used more easily in an automatic scaling setup (which is "
"outside the scope of this tutorial)."
msgstr ""
"如果你有容器的经验, 可以考虑将专用服务器包装在一个 `Docker <https://www."
"docker.com/>`__ 容器中. 这样, 在弹性配置中可以更容易地使用它(这不在本教程的范"
"围内)."

msgid "Translation status"
msgstr "翻译状态"
