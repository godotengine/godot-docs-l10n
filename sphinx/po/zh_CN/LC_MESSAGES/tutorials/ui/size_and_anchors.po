# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Size and anchors"
msgstr "大小和锚点"

msgid ""
"If a game was always going to be run on the same device and at the same "
"resolution, positioning controls would be a simple matter of setting the "
"position and size of each one of them. Unfortunately, that is rarely the "
"case."
msgstr ""
"如果一个游戏总是用同一分辨率在同样的设备上运行, 摆放控件将是一个简单的事, 只"
"要逐个设置它们的位置属性和大小属性即可. 不幸的是, 能像这样处理的情况很少."

msgid ""
"Only TVs nowadays have a standard resolution and aspect ratio. Everything "
"else, from computer monitors to tablets, portable consoles and mobile phones "
"have different resolutions and aspect ratios."
msgstr ""
"如今只有电视机有标准分辨率和纵横比. 而其他所有设备, 从计算机显示器到平板电"
"脑, 便携游戏主机和手机等等, 都有不同的分辨率和纵横比."

msgid ""
"There are several ways to handle this, but for now, let's just imagine that "
"the screen resolution has changed and the controls need to be re-positioned. "
"Some will need to follow the bottom of the screen, others the top of the "
"screen, or maybe the right or left margins."
msgstr ""
"有几种方法来处理这个问题, 但现在, 让我们想象一下, 屏幕分辨率已经改变, 控件需"
"要重新定位. 有的需要跟随屏幕的底部, 有的需要跟随屏幕的顶部, 也有的需要跟随左"
"右边距."

msgid ""
"This is done by editing the *margin* properties of controls. Each control "
"has four margins: left, right, bottom and top. By default, all of them "
"represent a distance in pixels relative to the top-left corner of the parent "
"control or (in case there is no parent control) the viewport."
msgstr ""
"这是通过编辑控件的 *margin* 属性来实现的。每个控件都有四个边距：左、右、底、"
"顶。默认情况下，它们都表示相对于父控件的左上角或（在没有父控件的情况下）视口"
"的像素距离。"

msgid ""
"When horizontal (left, right) and/or vertical (top, bottom) anchors are "
"changed to 1, the margin values become relative to the bottom-right corner "
"of the parent control or viewport."
msgstr ""
"当水平(左, 右)和/或 垂直(上, 下)锚点被改为1时, 边距值就会变成相对于父控件或视"
"口的右下角."

msgid ""
"Here, the control is set to expand its bottom-right corner with that of the "
"parent, so when re-sizing the parent, the control will always cover it, "
"leaving a 20 pixel margin:"
msgstr ""
"在这里, 控件被设置为与父级的右下角一起展开, 所以当调整父级的大小时, 控件将始"
"终覆盖它, 并留下20像素的空白:"

msgid "Centering a control"
msgstr "使控件居中"

msgid ""
"To center a control in its parent, set its anchors to 0.5 and each margin to "
"half of its relevant dimension. For example, the code below shows how a "
"TextureRect can be centered in its parent:"
msgstr ""
"要将控件集中到其父控件中, 其锚定值为0.5, 每个边距为其相关尺寸的一半. 例如, 下"
"面的代码显示了如何将纹理矩形居中到它的父节点:"

msgid ""
"Setting each anchor to 0.5 moves the reference point for the margins to the "
"center of its parent. From there, we set negative margins so that the "
"control gets its natural size."
msgstr ""
"将每个锚定值设置为0.5, 将边缘的参考点移动到父锚点的中心. 在此基础上, 我们设置"
"了负边距, 以便控件获得其自然大小."

msgid "Layout Presets"
msgstr "布局预设"

msgid ""
"Instead of manually adjusting the margin and anchor values, you can use the "
"toolbar's Layout menu, above the viewport. Besides centering, it gives you "
"many options to align and resize control nodes."
msgstr ""
"除了手动调整边距和锚点的值之外，你还可以使用视口上方工具栏中的“布局”菜单。其"
"中有居中等诸多选项，可以用来对齐并调整节点的大小。"

msgid "Translation status"
msgstr "翻译状态"
