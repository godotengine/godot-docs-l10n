# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Theme type variations"
msgstr "主题类型变种"

msgid ""
"When designing a user interface there may be times when a :ref:`Control "
"<class_Control>` node needs to have a different look than what is normally "
"defined by a :ref:`Theme <class_Theme>`. Every control node has theme "
"property overrides, which allow you to redefine the styling for each "
"individual UI element."
msgstr ""
"设计用户界面时，有时候会想要让某个 :ref:`Control <class_Control>` 节点看起来"
"和 :ref:`Theme <class_Theme>` 中定义的一般样式不同。每个控件节点都有主题属性"
"覆盖项，可以让你针对单独的 UI 元素定义不同的样式。"

msgid ""
"This approach quickly becomes hard to manage, if you need to share the same "
"custom look between several controls. Imagine that you use gray, blue, and "
"red variants of :ref:`Button <class_Button>` throughout your project. "
"Setting it up every time you add a new button element to your interface is a "
"tedious task."
msgstr ""
"如果你需要让若干控件都使用同一个自定义的外观，这样的做法很快就会变得难以管"
"理。想象一下，你的项目里需要用到灰色、蓝色、红色变种的 :ref:`Button "
"<class_Button>`。每在界面里添加一个按钮元素都需要进行设置，非常繁琐。"

msgid ""
"To help with the organization and to better utilize the :ref:`power of "
"themes <doc_gui_skinning>` you can use theme type variations. These work "
"like normal theme types, but instead of being self-sufficient and standalone "
"they extend another, base type."
msgstr ""
"为了方便组织，更好地发挥\\ :ref:`主题的威力 <doc_gui_skinning>`\\ ，你可以使"
"用主题类型变种。它们用起来就像普通的主题类型，但无法自给自足，不是独立的，扩"
"展自其他类型，称作基础类型。"

msgid ""
"Following the previous example, your theme can have some styles, colors, and "
"fonts defined for the ``Button`` type, customizing the looks of every button "
"element in your UI. To then have a gray, red, or blue button you would "
"create a new type, e.g. ``GrayButton``, and mark it as a variation of the "
"base ``Button`` type."
msgstr ""
"还是上面的例子，你的主题可以为 ``Button`` 类型定义样式、颜色、以及字体，UI 中"
"的所有按钮元素都会得到自定义。如果要再有灰色、红色、蓝色按钮，你就会创建一个"
"新的类型，例如 ``GrayButton``\\ ，然后把它标记为基础 ``Button`` 类型的变种。"

msgid ""
"Type variations can replace some aspects of the base type, but keep others. "
"They can also define properties that the base style hasn't defined. For "
"example, your ``GrayButton`` can override the ``normal`` style from the base "
"``Button`` and add ``font_color`` that ``Button`` has never defined. The "
"control will use a combination of both types giving priority to the type "
"variation."
msgstr ""
"类型变种可以在替换掉基础类型的某些内容的同时保留其他方面。它们还可以定义基础"
"样式没有定义的属性。例如，你的 ``GrayButton`` 可以覆盖基础 ``Button`` 的 "
"``normal`` 样式，加上 ``Button`` 里没有定义的 ``font_color``\\ 。控件会使用这"
"两个类型的组合，并且优先使用类型变种。"

msgid ""
"The way controls resolve what theme items they use from each type and each "
"theme is better described in the :ref:`Customizing a project "
"<doc_gui_theme_in_project>` section of the \"Introduction to GUI skinning\" "
"article."
msgstr ""
"控件如何确定使用哪个类型、哪个主题、哪个主题项目，在《GUI 皮肤简介》一文的"
"\\ :ref:`自定义项目 <doc_gui_theme_in_project>`\\ 部分有更详尽的描述。"

msgid "Creating a type variation"
msgstr "创建类型变种"

msgid ""
"To create a type variation open the theme editor, then click the plus icon "
"next to the **Type** dropdown on the right side of the editor. Type in what "
"you want to name your theme type variation in the text box, then click **Add "
"Type**."
msgstr ""
"要创建主题变种，请打开主题编辑器，然后点击编辑器右侧\\ **类型**\\ 下拉框旁的"
"加号图标。在文本框中输入你给你的主题类型变种起的名字，然后点击\\ **添加类型"
"**\\ 。"

msgid ""
"Below the **Type** dropdown are the property tabs. Switch to the tab with a "
"wrench and screwdriver icon."
msgstr ""
"**类型**\\ 下拉框的下方是属性选项卡。请切换到图标是扳手和螺丝刀的选项卡。"

msgid ""
"Click on the plus icon next to the **Base Type** field. You can select the "
"base type there, which would typically be the name of a control node class "
"(e.g., ``Button``, ``Label``, etc). Type variations can also chain and "
"extend other type variations. This works in the same way control nodes "
"inherit styling of their base class. For example, ``CheckButton`` inherits "
"styles from ``Button`` because corresponding node types extend each other."
msgstr ""
"点击\\ **基础类型**\\ 字段旁的加号。你可以在此处选择基础类型，一般就是控件节"
"点的类名（例如 ``Button``\\ 、\\ ``Label`` 等）。类型变种还可以进行嵌套，扩展"
"其他类型变种。这就和控件节点的继承基类风格一样。例如，\\ ``CheckButton`` 继"
"承 ``Button`` 的风格，因为对应的节点类型存在扩展关系。"

msgid ""
"After you select the base type, you should now be able to see its properties "
"on the other tabs in the theme editor. You can edit them as usual."
msgstr ""
"选好基础类型之后，你应该就能在主题编辑器的其他选项卡中看到对应的属性了。你可"
"以像往常一样去编辑。"

msgid "Using a type variation"
msgstr "使用类型变种"

msgid ""
"Now that a type variation has been created you can apply it to your nodes. "
"In the inspector dock, under the **Theme** property of a control node, you "
"can find the **Theme Type Variation** property. It is empty by default, "
"which means that only the base type has an effect on this node."
msgstr ""
"现在已经创建好了一个类型变种，你可以将其应用到你的节点上了。检查器面板中，在"
"控件节点的 **Theme** 属性下，你可以找到 **Theme Type Variation** 属性。默认为"
"空，表示只有基础类型会对这个节点起效。"

msgid ""
"You can either select a type variations from a dropdown list, or input its "
"name manually. Variations appear on the list only if the type variation "
"belongs to the project-wide theme, which you can configure in the project "
"settings. For any other case you have to input the name of the variation "
"manually. Click on the pencil icon to the right. Then type in the name of "
"the type variation and click the check mark icon or press enter. If a type "
"variation with that name exists it will now be used by the node."
msgstr ""
"你可以从下拉列表中选择一个类型变种，或者手动输入名称。属于项目主题的变种才会"
"出现在列表中，项目主题可以在项目设置中配置。其他情况下，你就得手动输入变种的"
"名称了。请点击右侧的铅笔图标。然后输入类型变种的名称，并点击对勾图标或者按回"
"车键。如果存在使用这个名称的类型变种，该节点就会去使用。"

msgid "Translation status"
msgstr "翻译状态"
