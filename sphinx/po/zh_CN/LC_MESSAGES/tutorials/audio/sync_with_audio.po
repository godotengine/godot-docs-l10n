# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Sync the gameplay with audio and music"
msgstr "同步游戏音频及音乐"

msgid "Introduction"
msgstr "前言"

msgid ""
"In any application or game, sound and music playback will have a slight "
"delay. For games, this delay is often so small that it is negligible. Sound "
"effects will come out a few milliseconds after any play() function is "
"called. For music this does not matter as in most games it does not interact "
"with the gameplay."
msgstr ""
"在任何应用程序或游戏中, 声音和音乐播放都会有轻微的延迟. 对于游戏, 这种延迟往"
"往小到可以忽略不计. 在调用任意play()函数后, 声音效果将在几毫秒后出现. 对于音"
"乐来说这并不重要, 因为在大多数游戏中它不会产生互动."

msgid ""
"Still, for some games (mainly, rhythm games), it may be required to "
"synchronize player actions with something happening in a song (usually in "
"sync with the BPM). For this, having more precise timing information for an "
"exact playback position is useful."
msgstr ""
"不过, 对于一些游戏(主要是节奏游戏), 可能会需要让玩家的操作与歌曲中发生的事情"
"同步(通常与BPM同步). 因此, 得到一个具体播放位置的更精确的定时信息就很有用了."

msgid ""
"Achieving very low playback timing precision is difficult. This is because "
"many factors are at play during audio playback:"
msgstr ""
"极其精准地定位播放时间是非常困难的. 因为在音频回放过程中有很多因素在起作用:"

msgid ""
"Audio is mixed in chunks (not continuously), depending on the size of audio "
"buffers used (check latency in project settings)."
msgstr ""
"音频以块(不连续)的形式混合在一起, 具体取决于所使用的音频缓冲区的大小(在项目设"
"置中检查延迟)."

msgid "Mixed chunks of audio are not played immediately."
msgstr "混合的音频块不会立即播放."

msgid "Graphics APIs display two or three frames late."
msgstr "图形应用程序接口延迟显示两到三帧."

msgid "When playing on TVs, some delay may be added due to image processing."
msgstr "当在电视上播放时, 由于图像处理可能会增加一些延迟."

msgid ""
"The most common way to reduce latency is to shrink the audio buffers (again, "
"by editing the latency setting in the project settings). The problem is that "
"when latency is too small, sound mixing will require considerably more CPU. "
"This increases the risk of skipping (a crack in sound because a mix callback "
"was lost)."
msgstr ""
"最常见的减少延迟的方法是缩小音频缓冲区(同样是通过编辑项目设置中的延迟设置). "
"问题是, 当延迟很小时, 声音混合将占用大量的CPU. 这就增加了跳音的风险(由于混合"
"回调丢失, 导致声音出现裂缝)."

msgid ""
"This is a common tradeoff, so Godot ships with sensible defaults that should "
"not need to be altered."
msgstr ""
"这是一种常见的折衷方案, 因此Godot附带了合理的默认值. 一般这些默认值不需要更"
"改."

msgid ""
"The problem, in the end, is not this slight delay but synchronizing graphics "
"and audio for games that require it. Beginning with Godot 3.2, some helpers "
"were added to obtain more precise playback timing."
msgstr ""
"归根结底, 问题并不在于这一点点的延迟, 而是同步游戏的画面和声音. 从Godot 3.2开"
"始, 加入了一些辅助工具, 帮助获取更精确的播放时间."

msgid "Using the system clock to sync"
msgstr "使用系统时钟同步"

msgid ""
"As mentioned before, If you call :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>`, sound will not begin "
"immediately, but when the audio thread processes the next chunk."
msgstr ""
"如前所述, 如果你调用 :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>` , 声音不会立即开始播放, 而是在音"
"频线程处理下一个块时开始."

msgid ""
"This delay can't be avoided but it can be estimated by calling :ref:"
"`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>`."
msgstr ""
"这个延迟是无法避免的, 但是可以通过调用 :ref:`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>` 来估"
"算."

msgid ""
"The output latency (what happens after the mix) can also be estimated by "
"calling :ref:`AudioServer."
"get_output_latency()<class_AudioServer_method_get_output_latency>`."
msgstr ""
"输出延迟(混音后的情况)可以通过调用 :ref:`AudioServer."
"get_output_latency()<class_AudioServer_method_get_output_latency>` 来估算."

msgid ""
"Add these two and it's possible to guess almost exactly when sound or music "
"will begin playing in the speakers during *_process()*:"
msgstr ""
"把这两样加起来, 就可以几乎准确地猜到 *_process()* 中的音效或音乐什么时候开始"
"在扬声器中播放:"

msgid ""
"In the long run, though, as the sound hardware clock is never exactly in "
"sync with the system clock, the timing information will slowly drift away."
msgstr ""
"然而, 从长远来看, 由于声音硬件时钟从未与系统时钟完全同步, 计时信息会逐渐偏移."

msgid ""
"For a rhythm game where a song begins and ends after a few minutes, this "
"approach is fine (and it's the recommended approach). For a game where "
"playback can last a much longer time, the game will eventually go out of "
"sync and a different approach is needed."
msgstr ""
"在节奏游戏中, 一首歌持续时长仅有几分钟, 这种方法就很适合(也是推荐的方法). 而"
"对于一款播放时间更长的游戏来说, 游戏最终将失去同步, 因此需要一种不同的方法."

msgid "Using the sound hardware clock to sync"
msgstr "使用声音硬件时钟同步"

msgid ""
"Using :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"to obtain the current position for the song sounds ideal, but it's not that "
"useful as-is. This value will increment in chunks (every time the audio "
"callback mixed a block of sound), so many calls can return the same value. "
"Added to this, the value will be out of sync with the speakers too because "
"of the previously mentioned reasons."
msgstr ""
"虽然可以使用 :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"来获取歌曲的当前位置, 但实际并没有那么实用. 这个值(每逢音频回调混合一块声音"
"时)将以块为单位递增, 导致多次调用可能返回相同的值. 除此之外, 由于前面提到的原"
"因, 该值也将与扬声器失去同步."

msgid ""
"To compensate for the \"chunked\" output, there is a function that can "
"help: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_method_get_time_since_last_mix>`."
msgstr ""
"为了补偿 \"chunked\"(分块)输出, 有个函数能有所帮助: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_method_get_time_since_last_mix>`."

msgid ""
"Adding the return value from this function to *get_playback_position()* "
"increases precision:"
msgstr "将这个函数的返回值与 *get_playback_position()* 相加可以提高精度:"

msgid ""
"To increase precision, subtract the latency information (how much it takes "
"for the audio to be heard after it was mixed):"
msgstr "为了提高精度, 减去延迟信息(音频从混合后到被听见花费的时间):"

msgid ""
"The result may be a bit jittery due how multiple threads work. Just check "
"that the value is not less than in the previous frame (discard it if so). "
"This is also a less precise approach than the one before, but it will work "
"for songs of any length, or synchronizing anything (sound effects, as an "
"example) to music."
msgstr ""
"由于多线程的工作方式, 结果可能会有点轻微抖动. 只需检查该值是否小于前一帧中的"
"值(如果小于, 则将其丢弃). 这个方法也不如之前的精确, 但它适用于任何长度的歌"
"曲, 或者将任何东西(例如音效)与音乐同步."

msgid "Here is the same code as before using this approach:"
msgstr "下面是使用这种方法之前相同的代码:"

msgid "Translation status"
msgstr "翻译状态"
