# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Inspector plugins"
msgstr "检查器插件"

msgid ""
"The inspector dock allows you to create custom widgets to edit properties "
"through plugins. This can be beneficial when working with custom datatypes "
"and resources, although you can use the feature to change the inspector "
"widgets for built-in types. You can design custom controls for specific "
"properties, entire objects, and even separate controls associated with "
"particular datatypes."
msgstr ""
"检查器面板支持以插件的形式来创建自定义小工具编辑属性。尽管可以用它来修改内置"
"类型的检查器小工具，但它在需要处理自定义数据类型和资源时尤其有用。你不但可以"
"为特定的属性或者整个对象设计自定义控件，还可以为特定数据类型设计单独的控件。"

msgid ""
"This guide explains how to use the :ref:`class_EditorInspectorPlugin` and :"
"ref:`class_EditorProperty` classes to create a custom interface for "
"integers, replacing the default behavior with a button that generates random "
"values between 0 and 99."
msgstr ""
"这份指南会介绍如何使用 :ref:`class_EditorInspectorPlugin` 和 :ref:"
"`class_EditorProperty` 类来为整数类型创建自定义的界面，将默认的行为替换为一个"
"按了以后就会生成 0 到 99 之间随机数的按钮。"

msgid "The default behavior on the left and the end result on the right."
msgstr "左图为默认行为，右图为最终结果。"

msgid "Setting up your plugin"
msgstr "创建你的插件"

msgid "Create a new empty plugin to get started."
msgstr "从创建新的空插件开始。"

msgid "See :ref:`doc_making_plugins` guide to set up your new plugin."
msgstr "如何创建新插件请参阅 :ref:`doc_making_plugins`\\ 。"

msgid ""
"Let's assume you've called your plugin folder ``my_inspector_plugin``. If "
"so, you should end up with a new ``addons/my_inspector_plugin`` folder that "
"contains two files: ``plugin.cfg`` and ``plugin.gd``."
msgstr ""
"让我们假设你的插件文件夹叫做 ``my_inspector_plugin``\\ 。那么此时你新建的 "
"``addons/my_inspector_plugin`` 文件夹中就有两个文件：\\ ``plugin.cfg`` 和 "
"``plugin.gd``\\ 。"

msgid ""
"As before, ``plugin.gd`` is a script extending :ref:`class_EditorPlugin` and "
"you need to introduce new code for its ``_enter_tree`` and ``_exit_tree`` "
"methods. To set up your inspector plugin, you must load its script, then "
"create and add the instance by calling ``add_inspector_plugin()``. If the "
"plugin is disabled, you should remove the instance you have added by calling "
"``remove_inspector_plugin()``."
msgstr ""
"和之前一样，\\ ``plugin.gd`` 是一个扩展了 :ref:`class_EditorPlugin` 的脚本，"
"你需要在 ``_enter_tree`` 和 ``_exit_tree`` 方法中加入新的代码。要创建自己的检"
"查器插件，你必须加载对应的脚本，然后创建并调用 ``add_inspector_plugin()`` 来"
"添加实例。禁用插件时，你应该调用 ``remove_inspector_plugin()`` 将该实例移除。"

msgid ""
"Here, you are loading a script and not a packed scene. Therefore you should "
"use ``new()`` instead of ``instance()``."
msgstr ""
"因为你在这里读取的是脚本而不是场景包，所以应该使用 ``new()`` 而不是 "
"``instance()``\\ 。"

msgid "Interacting with the inspector"
msgstr "与检查器交互"

msgid ""
"To interact with the inspector dock, your ``MyInspectorPlugin.gd`` script "
"must extend the :ref:`class_EditorInspectorPlugin` class. This class "
"provides several virtual methods that affect how the inspector handles "
"properties."
msgstr ""
"要和检查器面板交互，你的 ``MyInspectorPlugin.gd`` 脚本必须继承自 :ref:"
"`class_EditorInspectorPlugin` 类。这个类提供了不少虚方法，可以用来控制检查器"
"对属性的处理。"

msgid ""
"To have any effect at all, the script must implement the ``can_handle()`` "
"method. This function is called for each edited :ref:`class_Object` and must "
"return ``true`` if this plugin should handle the object or its properties."
msgstr ""
"脚本必须实现 ``can_handle()`` 方法才能生效。编辑任何 :ref:`class_Object` 对象"
"时都会调用这个函数，插件想要处理该对象或其属性的话，就必须返回 ``true``\\ 。"

msgid "This includes any :ref:`class_Resource` attached to the object."
msgstr "要处理附加在该对象上的 :ref:`class_Resource` 也同样如此。"

msgid ""
"You can implement four other methods to add controls to the inspector at "
"specific positions. The ``parse_begin()`` and ``parse_end()`` methods are "
"called only once at the beginning and the end of parsing for each object, "
"respectively. They can add controls at the top or bottom of the inspector "
"layout by calling ``add_custom_control()``."
msgstr ""
"另外还有四个方法可以实现，用来往检查器的特定位置添加空间。\\ "
"``parse_begin()`` 和 ``parse_end()`` 方法顾名思义，只会在每个对象开始解析和结"
"束解析的时候调用一次。在其中调用 ``add_custom_control()`` 就可以在检查器布局"
"的顶部或底部添加控件。"

msgid ""
"As the editor parses the object, it calls the ``parse_category()`` and "
"``parse_property()`` methods. There, in addition to "
"``add_custom_control()``, you can call both ``add_property_editor()`` and "
"``add_property_editor_for_multiple_properties()``. Use these last two "
"methods to specifically add :ref:`class_EditorProperty`-based controls."
msgstr ""
"编辑器解析对象时，会调用 ``parse_category()`` 和 ``parse_property()`` 方法。"
"在这两个函数中，除了 ``add_custom_control()`` 以外，你还可以调用 "
"``add_property_editor()`` 和 "
"``add_property_editor_for_multiple_properties()``\\ ，这两个函数是专门用来添"
"加基于 :ref:`class_EditorProperty` 的控件的。"

msgid "Adding an interface to edit properties"
msgstr "添加编辑属性的界面"

msgid ""
"The :ref:`class_EditorProperty` class is a special type of :ref:"
"`class_Control` that can interact with the inspector dock's edited objects. "
"It doesn't display anything but can house any other control nodes, including "
"complex scenes."
msgstr ""
":ref:`class_EditorProperty` 是一种特殊的 :ref:`class_Control`\\ ，可以与检查"
"器面板所编辑的对象进行交互。它本身不显示任何内容，但可以放入其他控件节点，甚"
"至是复杂的场景。"

msgid ""
"There are three essential parts to the script extending :ref:"
"`class_EditorProperty`:"
msgstr "扩展 :ref:`class_EditorProperty` 的脚本有三个必不可少的部分："

msgid ""
"You must define the ``_init()`` method to set up the control nodes' "
"structure."
msgstr "必须定义 ``_init()`` 方法，设置控件节点的结构。"

msgid ""
"You should implement the ``update_property()`` to handle changes to the data "
"from the outside."
msgstr "应该实现 ``update_property()``\\ ，处理外部对数据的更改。"

msgid ""
"A signal must be emitted at some point to inform the inspector that the "
"control has changed the property using ``emit_changed``."
msgstr ""
"必须在某处使用 ``emit_changed`` 触发信号，告知检查器本控件对属性进行了修改。"

msgid ""
"You can display your custom widget in two ways. Use just the default "
"``add_child()`` method to display it to the right of the property name, and "
"use ``add_child()`` followed by ``set_bottom_editor()`` to position it below "
"the name."
msgstr ""
"显示自定义小工具的方法有两种。可以只用默认的 ``add_child()`` 方法可以把它显示"
"到属性名称的右边，在 ``add_child()`` 之后再调用 ``set_bottom_editor()`` 就可"
"以把它显示到名称的下边。"

msgid ""
"Using the example code above you should be able to make a custom widget that "
"replaces the default :ref:`class_SpinBox` control for integers with a :ref:"
"`class_Button` that generates random values."
msgstr ""
"使用上面的示例代码，可以实现用自定义的小工具替代整数默认的 :ref:"
"`class_SpinBox` 控件，点击 :ref:`class_Button` 后生成随机值。"

msgid "Translation status"
msgstr "翻译状态"
