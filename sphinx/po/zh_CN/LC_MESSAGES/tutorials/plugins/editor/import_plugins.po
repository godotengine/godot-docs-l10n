# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Import plugins"
msgstr "导入插件"

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""
"本教程假设您已经知道如何制作通用插件. 如有疑问, 请参阅 :ref:"
"`doc_making_plugins` 页面. 这也假设您熟悉Godot的导入系统."

msgid "Introduction"
msgstr "前言"

msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, Ogg Vorbis "
"sounds, and many more."
msgstr ""
"导入插件是一种特殊的编辑器工具, 它允许Godot导入自定义资源, 并将其作为一级资源"
"对待. 编辑器本身捆绑了很多导入插件来处理常见的资源, 如PNG图片, Collada和glTF"
"模型, Ogg Vorbis声音等等."

msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material. In this example it will contain the pure blue color "
"(zero red, zero green, and full blue):"
msgstr ""
"本教程将向您展示如何创建一个简单的导入插件, 以将自定义文本文件作为材质资源加"
"载. 此文本文件将包含由逗号分隔的三个数值, 它表示颜色的三个通道, 并且生成的颜"
"色将用作导入材质的反射(主颜色). 在此示例中, 它将包含纯蓝色(红色0, 绿色0和满蓝"
"色):"

msgid "Configuration"
msgstr "配置"

msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""
"首先, 我们需要一个通用插件来处理导入插件的初始化和销毁. 让我们先添加 "
"``plugin.cfg`` 文件:"

msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr "然后我们需要 ``material_import.gd`` 文件来在需要时添加和删除导入插件:"

msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""
"当这个插件被激活时, 它将创建一个新的导入插件实例(我们很快就会制作), 并使用 :"
"ref:`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` 方法"
"将其加入编辑器. 我们在类成员 ``import_plugin'`` 中存储它的引用, 这样我们就可"
"以在以后删除它时引用它. :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` 方法在插件停用时被调用, 以"
"清理内存并让编辑器知道导入插件不再可用."

msgid ""
"Note that the import plugin is a reference type, so it doesn't need to be "
"explicitly released from memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""
"注意, 导入插件是一个引用类型, 所以它不需要明确地用 ``free()`` 函数从内存中释"
"放. 当它超出范围时, 将被引擎自动释放."

msgid "The EditorImportPlugin class"
msgstr "EditorImportPlugin 类"

msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible for implementing the methods "
"that are called by Godot when it needs to know how to deal with files."
msgstr ""
"这个展示的主角是 :ref:`EditorImportPlugin 类 <class_EditorImportPlugin>`. 它"
"负责实现Godot需要知道如何处理文件时调用的方法."

msgid "Let's begin to code our plugin, one method at time:"
msgstr "让我们开始编写我们的插件, 一个方法:"

msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name for your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""
"第一个方法是 :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. 这"
"是你的插件的唯一名称,Godot用它来知道在某个文件中使用了哪个导入. 当文件需要重"
"新导入时, 编辑器会知道该调用哪个插件."

msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible for returning the name of the type it imports and it "
"will be shown to the user in the Import dock."
msgstr ""
":ref:`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"方法负责返回它导入的类型的名称, 它将在导入停靠区显示给用户."

msgid ""
"You should choose this name as a continuation to \"Import as\", e.g. "
"*\"Import as Silly Material\"*. You can name it whatever you want but we "
"recommend a descriptive name for your plugin."
msgstr ""
"你选择的名字应该可以接到“导入为”后面，例如\\ *“导入为 Silly Material”*\\ 。你"
"可以随心所欲地命名，但我们建议为你的插件起一个描述性的名字。"

msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""
"Godot的导入系统通过扩展名检测文件类型. 在 :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"方法中, 返回一个字符串数组, 代表这个插件能理解的每个扩展名. 如果一个扩展名被"
"一个以上的插件识别, 用户可以在导入文件时选择使用哪一个."

msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""
"许多插件可能会使用像 ``.json`` 和 ``.txt`` 这样的常见扩展. 此外, 项目中可能存"
"在仅作为游戏数据的文件, 不应导入. 导入时必须小心以验证数据. 永远不要指望文件"
"格式正确."

msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to declare what will be "
"used in the import."
msgstr ""
"导入的文件被保存在项目根部的 ``.import`` 文件夹中. 它们的扩展名应与你要导入的"
"资源类型相匹配, 但由于Godot不能告诉你将使用什么(因为同一资源可能有多个有效的"
"扩展名), 你需要声明将在导入时使用的内容."

msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""
"由于我们正在导入材质, 因此我们将对此类资源类型使用特殊扩展. 如果要导入场景, "
"可以使用 ``scn`` . 通用资源可以使用 ``res`` 扩展名. 但是, 引擎不会以任何方式"
"强制执行此操作."

msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""
"导入的资源具有特定类型，编辑器可以据此知道它属于哪个属性槽。这样就能够将其从"
"文件系统面板拖放到检查器的属性之中。"

msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr "在我们的示例中, 它是 :ref:`class_SpatialMaterial`, 可以应用于3D对象."

msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""
"如果需要从同一扩展中导入不同类型, 则必须创建多个导入插件. 您可以在另一个文件"
"上抽象导入代码, 以避免在这方面出现重复."

msgid "Options and presets"
msgstr "选项和预设"

msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""
"您的插件可以提供不同的选项, 以允许用户控制资源的导入方式. 如果一组选定的选项"
"很常见, 您还可以创建不同的预设以使用户更容易. 下图显示了选项在编辑器中的显示"
"方式:"

msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""
"由于可能有许多预设并且它们用数字标识, 因此使用枚举是一个很好的做法, 因此您可"
"以使用名称来引用它们."

msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr "既然定义了枚举, 让我们继续看一下导入插件的方法:"

msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""
":ref:`get_preset_count() <class_EditorImportPlugin_method_get_preset_count>` "
"方法返回这个插件定义的预置数量. 我们现在只有一个预设, 但我们可以通过返回我们"
"的 ``Presets`` 枚举的大小来使该方法适应未来的需求."

msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""
"这里我们有 :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` 方法, 它给出预设的名字, 因"
"为它们将被展示给用户, 所以一定要使用简短而清晰的名字."

msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""
"我们可以在这里使用 ``match`` 语句来使代码更加结构化. 这样, 将来很容易添加新的"
"预设. 我们使用catch all模式来返回一些东西. 虽然Godot不会要求超出您定义的预设"
"计数的预设, 但最好是安全起见."

msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""
"如果您只有一个预设, 则可以直接返回其名称, 但如果您这样做, 则在添加更多预设时"
"必须小心."

msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""
"这是定义可用选项的方法. :ref:`get_import_options() "
"<class_EditorImportPlugin_method_get_import_options>` 返回一个字典数组, 每个"
"字典包含一些可被检查的键, 以便在其显示给用户时定制选项. 下表显示了可能的键:"

msgid "Key"
msgstr "键"

msgid "Type"
msgstr "类型"

msgid "Description"
msgstr "描述"

msgid "``name``"
msgstr "``name``"

msgid "String"
msgstr "字符串"

msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr "选项的名称. 显示时, 下划线变为空格, 首字母大写."

msgid "``default_value``"
msgstr "``default_value``"

msgid "Any"
msgstr "任何类型"

msgid "The default value of the option for this preset."
msgstr "此预设的选项的默认值."

msgid "``property_hint``"
msgstr "``property_hint``"

msgid "Enum value"
msgstr "枚举值"

msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""
":ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` 中的一个值, 作为提示使"
"用."

msgid "``hint_string``"
msgstr "``hint_string``"

msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr "属性的提示文本. 与您在GDScript中的 ``export`` 语句中添加相同."

msgid "``usage``"
msgstr "``usage``"

msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""
":ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` 中的一个值来"
"定义用途."

msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr "``name`` 和 ``default_value`` 键是 **强制** , 其余是可选的."

msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""
"请注意, ``get_import_options`` 方法接收预设编号, 因此您可以为每个不同的预设"
"(尤其是默认值)配置选项. 在这个示例中, 我们使用 ``match`` 语句, 但是如果您有很"
"多选项并且预设只改变了您可能想要首先创建选项数组的值, 然后根据预设更改它."

msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""
"即使您没有定义预设(通过使 ``get_preset_count`` 返回零), 也会调用 "
"``get_import_options`` 方法. 您必须返回一个数组, 即使它是空的, 否则您可能会得"
"到错误."

msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""
"对于 :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` 方法, 我们只需返回 "
"``true`` , 因为我们所有的选项(即我们定义的单个选项)始终是可见的."

msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""
"如果只有在使用某个值设置了另一个选项时才需要使某个选项可见, 则可以在此方法中"
"添加逻辑."

msgid "The ``import`` method"
msgstr "``import`` 方法"

msgid ""
"The heavy part of the process, responsible for converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""
"负责将文件转换为资源的重要部分由 :ref:`import() "
"<class_EditorImportPlugin_method_import>` 方法涵盖. 我们的示例代码有点长, 所"
"以让我们分成几个部分:"

msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""
"我们导入方法的第一部分是打开并读取源文件. 使用 :ref:`File <class_File>` 类来"
"做到这一点, 传递 ``source_file`` 参数, 该参数由编辑器提供."

msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr "如果打开文件时出错, 我们将其返回以让编辑器知道导入不成功."

msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""
"此代码获取之前读取的文件行, 并将其拆分为以逗号分隔的片段. 如果有多于或少于三"
"个值, 则认为该文件无效并报告错误."

msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""
"然后它创建一个新的 :ref:`Color <class_Color>` 变量, 并根据输入文件设置其值. "
"如果启用了 ``use_red_anyway`` 选项, 那么它将颜色设置为纯红色."

msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""
"这一部分制作了一个新的 :ref:`SpatialMaterial <class_SpatialMaterial>` , 这是"
"导入的资源. 我们创建一个新的实例, 然后将其反射颜色设置为我们之前得到的值."

msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""
"这是最后一个部分, 也是相当重要的部分, 因为在这里我们把制作好的资源保存到磁盘"
"上. 保存文件的路径由编辑器通过 ``save_path`` 参数生成并告知. 注意, 这个参数 "
"**没有** 扩展名, 所以我们用 :ref:`string formatting <doc_gdscript_printf>` 添"
"加它. 为此, 我们调用前面定义的 ``get_save_extension`` 方法, 这样我们就可以确"
"保它们不会丢失同步."

msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""
"我们还返回 :ref:`ResourceSaver.save() <class_ResourceSaver_method_save>` 方法"
"的结果, 所以如果这一步有错误, 编辑器会知道."

msgid "Platform variants and generated files"
msgstr "平台变体和生成的文件"

msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""
"您可能已经注意到我们的插件忽略了 ``import`` 方法的两个参数。那些是\\ *返回参"
"数*\\ （因此它们的名称以 ``r`` 开头），这意味着编辑器会在调用您的 import 方法"
"之后读取它们。它们都是可以填充信息的数组。"

msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""
"``r_platform_variants`` 参数用于需要根据目标平台导入不同的资源. 虽然被称为 *"
"平台* 变体, 但它是基于 :ref:`feature tags <doc_feature_tags>` 的存在, 所以即"
"使是同一个平台也可以有多个变体, 这取决于设置."

msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""
"要导入平台变体, 需要在扩展名之前使用feature标记保存它, 然后将标记推送到 "
"``r_platform_variants`` 数组, 以便编辑可以知道您做了."

msgid ""
"For example, let's say we save a different material for a mobile platform. "
"We would need to do something like the following:"
msgstr "例如, 假设我们为移动平台保存一个不同的材质. 我们将需要做如下的事情:"

msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""
"``r_gen_files`` 参数用于在导入过程中生成并需要保留的额外文件. 编辑器将查看它"
"以了解依赖关系并确保不会无意中删除额外文件."

msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""
"这也是一个数组, 应该填充您保存的文件的完整路径. 例如, 让我们为下一个传递创建"
"另一个材质并将其保存在不同的文件中:"

msgid "Trying the plugin"
msgstr "试试这个插件"

msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""
"这是理论上的, 但是现在导入插件已经完成了, 让我们来测试一下. 确保您创建了示例"
"文件(包含介绍部分中描述的内容)并将其另存为 ``test.mtxt`` . 然后在 \"项目设置"
"\" 中激活插件."

msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""
"如果一切顺利, 导入插件将添加到编辑器中并扫描文件系统, 使自定义资源显示在"
"FileSystem基座上. 如果选择它并聚焦导入面板, 则可以看到选择该选项的唯一选项."

msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""
"在场景中创建一个 MeshInstance 节点，为其 Mesh 属性设置一个新的 SphereMesh。"
"在“检查器”中展开 Material 部分，然后将文件从“文件系统”面板拖动到材质属性。对"
"象将在视口中使用导入材质的蓝色进行更新。"

msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""
"转到导入面板, 启用 \"强制使用红色\" 选项, 然后单击 \"重新导入\". 这将更新导入"
"的材质, 并应该自动更新显示红色的视图."

msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""
"就是这样！ 您的第一个导入插件已经完成！ 现在获得创意并为您自己心爱的格式制作"
"插件. 这对于以自定义格式编写数据然后在Godot中使用它就像它们是本机资源一样非常"
"有用. 这显示了导入系统如何强大和可扩展."

msgid "Translation status"
msgstr "翻译状态"
