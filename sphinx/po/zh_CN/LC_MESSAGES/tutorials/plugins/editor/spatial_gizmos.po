# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Spatial gizmo plugins"
msgstr "Spatial 小工具插件"

msgid "Introduction"
msgstr "前言"

msgid ""
"Spatial gizmo plugins are used by the editor and custom plugins to define "
"the gizmos attached to any kind of Spatial node."
msgstr ""
"Spatial 小工具插件是由编辑器和自定义插件来定义附加到任何类型的 Spatial 节点的"
"小工具。"

msgid ""
"This tutorial will show you the two main approaches to defining your own "
"custom gizmos. The first option works well for simple gizmos and creates "
"less clutter in your plugin structure, while the second one will let you "
"store some per-gizmo data."
msgstr ""
"本教程将向您展示定义您自己的自定义小工具的两种主要方法。第一种方法对于简单的"
"小工具来说效果很好，并且在你的插件结构中较少的混乱，而第二种方法将让你存储每"
"个小工具的一些数据。"

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""
"本教程假设您已经知道如何制作通用插件。如有疑问，请参阅 :ref:"
"`doc_making_plugins` 页面。"

msgid "The EditorSpatialGizmoPlugin"
msgstr "EditorSpatialGizmoPlugin"

msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""
"不管我们选择什么方式，都需要创建一个新的 :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>`\\ 。我们可以为新建的小工具类型设置名称并定"
"义其他行为，比如是否可以隐藏。"

msgid "This would be a basic setup:"
msgstr "这是一个基本设置:"

msgid ""
"For simple gizmos, just inheriting :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""
"简单的小工具只要继承 :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` 就足够了。如果你想存储每个小工具的一些数"
"据，或者你要把 Godot 3.0 的小工具移植到 3.1+，你应该选择第二种方法。"

msgid "Simple approach"
msgstr "简单方法"

msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`has_gizmo()<class_EditorSpatialGizmoPlugin_method_has_gizmo>` method so "
"that it returns ``true`` when the spatial parameter is of our target type."
msgstr ""
"第一步，在我们的自定义小工具插件中，重写 :ref:"
"`has_gizmo()<class_EditorSpatialGizmoPlugin_method_has_gizmo>` 方法，当空间参"
"数为目标类型时，它将返回 ``true``\\ 。"

msgid ""
"Then we can override methods like :ref:"
"`redraw()<class_EditorSpatialGizmoPlugin_method_redraw>` or all the handle "
"related ones."
msgstr ""
"我们可以重写譬如 :ref:"
"`redraw()<class_EditorSpatialGizmoPlugin_method_redraw>` 的方法，或所有与句柄"
"相关的方法。"

msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `redraw` method using :ref:"
"`get_material()<class_EditorSpatialGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""
"请注意，我们在 `_init` 方法中创建了一个材质，并在 `redraw` 方法中使用 :ref:"
"`get_material()<class_EditorSpatialGizmoPlugin_method_get_material>` 取得它。"
"该方法根据小工具的状态（选择中和/或可编辑）来获取材质的变体。"

msgid "So the final plugin would look somewhat like this:"
msgstr "您最后的场景应该是这样的:"

msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>` to get properly "
"working handles."
msgstr ""
"注意，我们只是在重绘方法中添加了一些句柄，但是我们仍然需要在 :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>` 中实现其他与句柄"
"相关的回调，以获得正确的工作句柄。"

msgid "Alternative approach"
msgstr "替代方法"

msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`, maybe because we want to "
"have some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""
"在某些情况下，我们希望提供自己的 :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>` 实现，也许是因为我们想要在每个"
"小工具中存储一些状态，或者正在移植一个旧的小工具插件，而不想经历重写过程。"

msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`create_gizmo()<class_EditorSpatialGizmoPlugin_method_create_gizmo>`, so it "
"returns our custom gizmo implementation for the Spatial nodes we want to "
"target."
msgstr ""
"在这些情况下，我们需要做的就是在我们的新小工具插件中覆盖 :ref:"
"`create_gizmo()<class_EditorSpatialGizmoPlugin_method_create_gizmo>`，让它返"
"回我们想要实现的目标 Spatial 节点的自定义小工具。"

msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorSpatialGizmo<class_EditorSpatialGizmo>`, like so:"
msgstr ""
"这样，所有的小工具逻辑和绘图方法都可以在一个新的类中实现，这个类扩展自 :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`\\ ，像这样："

msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>` to get properly working "
"handles."
msgstr ""
"请注意，我们刚刚在重绘方法中添加了一些句柄，但我们仍然需要在 :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>` 中实现其余的与句柄相关的回调，"
"以获得正确工作的句柄。"

msgid "Translation status"
msgstr "翻译状态"
