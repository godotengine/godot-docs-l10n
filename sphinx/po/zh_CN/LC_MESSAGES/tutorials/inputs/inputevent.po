# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "使用 InputEvent"

msgid "What is it?"
msgstr "它是什么？"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"无论是在操作系统或平台上, 管理输入通常很复杂. 为了简化输入管理, 引擎提供了一"
"个特殊的内置类型 :ref:`InputEvent <class_InputEvent>`. 此类型可被设置成包含多"
"种类型的输入事件. 输入事件通过引擎传递, 可在多个位置接收, 具体位置取决于目的."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr "这里有一个简单的示例，按下 ESC 键时关闭您的游戏："

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"但是，使用所提供的 :ref:`InputMap <class_InputMap>` 功能更简洁灵活，它允许您"
"定义输入操作并分配不同的键。这样，您可以定义多个键的相同动作，例如键盘ESC键和"
"游戏手柄上的启动按钮。然后，你可以在不更新代码的情况下轻松更改项目设置中的此"
"映射，甚至在上面构建键映射功能，以便您的游戏在运行时更改键值映射！"

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"您可以在\\ **项目 > 项目设置 > 按键映射**\\ 下设置您的输入映射，这些动作的使"
"用方法如下："

msgid "How does it work?"
msgstr "工作原理是怎样的？"

msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""
"每个输入事件都来源于用户/角色（尽管可以生成一个 InputEvent 并将其反馈给引擎，"
"这在手势操作中非常有用）。每个平台的操作对象都将从设备读取事件，然后将它们发"
"送到 MainLoop。因为 :ref:`SceneTree <class_SceneTree>` 是默认的 MainLoop 实"
"现，所以事件会被提交给它。Godot 提供了一个获取当前 SceneTree 对象的函数：\\ "
"**get_tree()**\\ 。"

msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
"但是 SceneTree 不知道如何处理这个事件，所以 SceneTree 把它交给视口，"
"从“根”\\ :ref:`Viewport <class_Viewport>`\\ （场景树的第一个节点）开始查找。"
"Viewport 会对接收到的输入做很多事情，依次为:"

msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""
"首先，标准的 :ref:`Node._input() <class_Node_method__input>` 函数将在任何覆写"
"它的节点中被调用（在没有被 :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>` 禁用的情况下 ）。如果任何函数消耗了该"
"输入事件，它可以调用 :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`\\ ，该事件将不再传播。这让您可"
"以在 GUI 响应之前过滤事件。对于游戏性的输入，\\ :ref:`Node."
"_unhandled_input() <class_Node_method__unhandled_input>` 通常更合适，因为它允"
"许 GUI 拦截事件。"

msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"gui_input\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""
"然后，它会尝试将输入提供给 GUI，并查看是否有任何控件可以接收它。如果有，\\ :"
"ref:`Control <class_Control>` 将通过虚函数 :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` 被调用并发出“gui_input”信号（此函数可通过"
"继承它的脚本重新实现）。如果控件想“消耗”该事件，它将调用 :ref:`Control."
"accept_event() <class_Control_method_accept_event>` 阻止事件的传播。用 :ref:"
"`Control.mouse_filter <class_Control_property_mouse_filter>` 属性来控制 :ref:"
"`Control <class_Control>` 是否通过 :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` 回调接收鼠标事件的通知，以及是否进一步传播"
"这些事件。"

msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""
"如果到目前为止没有函数消耗该事件，则在被覆盖时将调用未处理回调（并且未通过 :"
"ref:`Node."
"set_process_unhandled_input()<class_Node_method_set_process_unhandled_input>` "
"禁用）。如果任何函数消耗了该事件，它可以调用 :ref:`SceneTree."
"set_input_as_handled()<class_SceneTree_method_set_input_as_handled>` 来设置已"
"经处理了该事件，它就将不再传播。未处理的输入回调是全屏游戏事件的理想选择，因"
"为当 GUI 处于激活状态时不会收到它们。"

msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport with :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` turned on, a ray to the "
"physics world (in the ray direction from the click) will be cast. (For the "
"root viewport, this can also be enabled in :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) If "
"this ray hits an object, it will call the :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` function in the "
"relevant physics object (bodies receive this callback by default, but areas "
"do not. This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""
"如果到目前为止没有人想要这个事件，并且 Viewport 中分配的 :ref:`Camera "
"<class_Camera>` 启用了\\ :ref:`对象拾取 "
"<class_viewport_property_physics_object_picking>`\\ ，就会（从点击的射线方"
"向）往物理世界中投射一条射线。（如果是根视图，则是在\\ :ref:`项目设置 "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`\\ 中启"
"用。）如果这条射线命中了某个对象，就会调用相关物理对象的 :ref:"
"`CollisionObject._input_event() <class_CollisionObject_method__input_event>` "
"函数（物理实体默认接受这个回调，区域则不会。可以使用 :ref:`Area "
"<class_Area>` 的属性进行设置）。"

msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""
"最后，如果事件未被处理，它将被传递给树中的下一个 Viewport，否则将被忽略。"

msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""
"将事件发送到场景中的所有侦听节点时, 视口将以反向深度优先顺序执行: 从场景树底"
"部的节点开始, 到根节点结束:"

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"GUI事件也在场景树上传播，但由于这些事件针对的是特定的控件，所以只有目标控件节"
"点的第一个父节点才会收到该事件。"

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"根据Godot基于节点的设计, 这使得专门的子节点能够处理和消费特定的事件, 而它们的"
"父级节点, 以及最终的场景根节点, 可以在需要时提供更通用的行为."

msgid "Anatomy of an InputEvent"
msgstr "InputEvent 剖析"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` 只是一个基本的内置类型, 它不代表任何东"
"西, 只包含一些基本信息, 如事件ID(每个事件增加), 设备索引等."

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr "InputEvent有几种专门的类型, 如下表所述:"

msgid "Event"
msgstr "事件"

msgid "Type Index"
msgstr "类型索引"

msgid "Description"
msgstr "描述"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "NONE"
msgstr "NONE"

msgid "Empty Input Event."
msgstr "空输入事件."

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

msgid "KEY"
msgstr "键"

msgid "Contains a scancode and Unicode value, as well as modifiers."
msgstr "包含一个键盘扫描码和Unicode值, 以及修饰键."

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "MOUSE_BUTTON"
msgstr "MOUSE_BUTTON"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "包含点击信息, 例如按钮, 修饰键等."

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

msgid "MOUSE_MOTION"
msgstr "MOUSE_MOTION"

msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr "包含运动信息, 例如相对位置, 绝对位置和速度."

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "JOYSTICK_MOTION"
msgstr "JOYSTICK_MOTION"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "包含操纵杆/ Joypad模拟轴信息."

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "JOYSTICK_BUTTON"
msgstr "JOYSTICK_BUTTON"

msgid "Contains Joystick/Joypad button information."
msgstr "包含操纵杆/ Joypad按钮信息."

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid "SCREEN_TOUCH"
msgstr "SCREEN_TOUCH"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr "包含多点触控按下/释放信息. (仅适用于移动设备)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid "SCREEN_DRAG"
msgstr "SCREEN_DRAG"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr "包含多点触控拖动信息. (仅适用于移动设备)"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

msgid "SCREEN_ACTION"
msgstr "SCREEN_ACTION"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr "包含一般动作. 这些事件通常由程序员作为反馈生成. (以下更多内容)"

msgid "Actions"
msgstr "动作"

msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""
"InputEvent可能代表也可能不代表预定义的动作. 动作很有用, 因为它们在编写游戏逻"
"辑时抽象输入设备. 这允许:"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"相同的代码可以在具有不同输入的不同设备上工作(例如,PC上的键盘, 控制台上的"
"Joypad)."

msgid "Input to be reconfigured at run-time."
msgstr "输入要在运行时重新配置."

msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr "动作可以在“项目设置”菜单的“动作”选项卡中创建。"

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"任何事件都有方法 :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"或者, 可能希望从游戏代码中向游戏提供一个动作, 一个很好的例子是检测手势.Input"
"单例有一个方法来实现这个功能 :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>` . 通常这样使用它:"

msgid "InputMap"
msgstr "InputMap"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"经常需要的从代码中定制和重新映射输入. 如果你的整个运行流程依赖于动作, 那么 :"
"ref:`InputMap <class_InputMap>` 单例是在运行时重新分配或创建不同动作的理想选"
"择. 这个单例不被保存(必须手动修改), 其状态从项目设置进行(project.godot). 所以"
"任何这种类型的动态系统, 都需要以程序员认为最合适的方式来存储设置."

msgid "Translation status"
msgstr "翻译状态"
