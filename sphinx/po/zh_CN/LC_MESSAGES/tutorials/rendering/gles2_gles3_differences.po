# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Differences between GLES2 and GLES3"
msgstr "GLES2 和 GLES3 之间的差异"

msgid ""
"This page documents the differences between GLES2 and GLES3 that are by "
"design and are not the result of bugs. There may be differences that are "
"unintentional, but they should be reported as bugs."
msgstr ""
"本页面记录了GLES2和GLES3之间的差异, 这些差异是经过设计的, 不是因bug造成的. 可"
"能有些差异是无心之过, 但它们应该被报告为bug."

msgid ""
"\"GLES2\" and \"GLES3\" are the names used in Godot for the two OpenGL-based "
"rendering backends. In terms of graphics APIs, the GLES2 backend maps to "
"OpenGL 2.1 on desktop, OpenGL ES 2.0 on mobile and WebGL 1.0 on the web. The "
"GLES3 backend maps to OpenGL 3.3 on desktop, OpenGL ES 3.0 on mobile and "
"WebGL 2.0 on the web."
msgstr ""
"“GLES2”和“GLES3”是 Godot 中两个渲染后端的名称，它们都基于 OpenGL。在图形 API "
"方面，GLES2 后端映射到桌面的 OpenGL 2.1、移动版的 OpenGL ES 2.0、Web 版的 "
"WebGL 1.0。GLES3 后端映射到桌面的 OpenGL 3.3、移动版的 OpenGL ES 3.0、Web 版"
"的 WebGL 2.0。"

msgid "Particles"
msgstr "粒子"

msgid ""
"GLES2 cannot use the :ref:`Particles <class_Particles>` or :ref:`Particles2D "
"<class_Particles2D>` nodes as they require advanced GPU features. Instead, "
"use :ref:`CPUParticles <class_CPUParticles>` or :ref:`CPUParticles2D "
"<class_CPUParticles2D>`, which provides a similar interface to a :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`."
msgstr ""
"GLES2 无法使用 :ref:`Particles <class_Particles>` 和 :ref:`Particles2D "
"<class_Particles2D>` 节点，因为这些节点都需要用到高级 GPU 特性。请换用 :ref:"
"`CPUParticles <class_CPUParticles>` 和 :ref:`CPUParticles2D "
"<class_CPUParticles2D>`\\ ，提供了类似 :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>` 的接口。"

msgid ""
"Particles and Particles2D can be converted to their CPU equivalent node with "
"the \"Convert to CPUParticles\" option in the editor."
msgstr ""
"Particles 和 Particles2D 可以通过编辑器中的“转换为 CPUParticles”选项转换为等"
"效的 CPU 节点。"

msgid "``SCREEN_TEXTURE`` mip-maps"
msgstr "``SCREEN_TEXTURE`` 多级渐远纹理"

msgid ""
"In GLES2, ``SCREEN_TEXTURE`` (accessed via a :ref:`ShaderMaterial "
"<class_ShaderMaterial>`) does not have computed mip-maps. So when accessing "
"at a different LOD, the texture will not appear blurry."
msgstr ""
"在 GLES2 中，\\ ``SCREEN_TEXTURE``\\ （通过 :ref:`ShaderMaterial "
"<class_ShaderMaterial>` 访问）不具有计算出的多级渐远纹理。因此使用不同 LOD 访"
"问时，该纹理不会变得模糊。"

msgid "``DEPTH_TEXTURE``"
msgstr "``DEPTH_TEXTURE``"

msgid ""
"While GLES2 supports ``DEPTH_TEXTURE`` in shaders, it may not work on some "
"old hardware (especially mobile)."
msgstr ""
"虽然 GLES2 支持在着色器中使用 ``DEPTH_TEXTURE``\\ ，在一些旧硬件（尤其是移动"
"设备）上仍可能无法工作。"

msgid "Color space"
msgstr "色彩空间"

msgid ""
"GLES2 and GLES3 are in different color spaces. This means that colors will "
"appear slightly different between them especially when lighting is used."
msgstr ""
"GLES2 和 GLES3 所用的色彩空间不同。也就是说两者之间的颜色会有细微的差别，特别"
"是在使用灯光的时候。"

msgid ""
"If your game is going to use both GLES2 and GLES3, you can use an ``if`` "
"statement check and see if the output is in sRGB, using ``OUTPUT_IS_SRGB``. "
"``OUTPUT_IS_SRGB`` is ``true`` in GLES2 and ``false`` in GLES3."
msgstr ""
"如果您在游戏中同时使用 GLES2 和 GLES3，您可以使用 ``if`` 语句检查 "
"``OUTPUT_IS_SRGB`` 判断输出是否为 sRGB。\\ ``OUTPUT_IS_SRGB`` 在 GLES2 中返"
"回 ``true``\\ ，在 GLES3 中返回 ``false``\\ 。"

msgid "HDR"
msgstr "HDR"

msgid ""
"GLES2 is not capable of using High Dynamic Range (HDR) rendering features. "
"If HDR is set for your project, or for a given viewport, Godot will still "
"use Low Dynamic Range (LDR) which limits viewport values to the ``0-1`` "
"range."
msgstr ""
"GLES2 无法使用高动态范围（High Dynamic Range、HDR）渲染特性。如果你的项目或者"
"某个特定的视图使用了 HDR，Godot 仍会使用低动态范围（Low Dynamic Range、"
"LDR），视图中的取值会被限制在 ``0-1`` 的范围内。"

msgid ""
"The Viewport **Debanding** property and associated project setting will also "
"have no effect when HDR is disabled. This means debanding can't be used in "
"GLES2."
msgstr ""
"禁用 HDR 时，Viewport 的 **Debanding（条带消除）** 属性和相关的项目设置也会失"
"效。所以在 GLES2 中无法使用条带消除功能。"

msgid "SpatialMaterial features"
msgstr "SpatialMaterial 的特性"

msgid ""
"In GLES2, the following advanced rendering features in the :ref:"
"`SpatialMaterial <class_SpatialMaterial>` are missing:"
msgstr ""
"在 GLES2 中， :ref:`SpatialMaterial <class_SpatialMaterial>` 缺失如下高级渲染"
"特性："

msgid "Refraction"
msgstr "Refraction(折射)"

msgid "Subsurface scattering"
msgstr "次表面散射"

msgid "Anisotropy"
msgstr "Anisotropy（各向异性）"

msgid "Clearcoat"
msgstr "Clearcoat（清漆）"

msgid "Depth mapping"
msgstr "深度映射"

msgid "When using SpatialMaterials they will not even appear in the editor."
msgstr "使用 SpatialMaterials 时，它们甚至不会出现在编辑器中。"

msgid ""
"In custom :ref:`ShaderMaterials <class_ShaderMaterial>`, you can set values "
"for these features but they will be non-functional. For example, you will "
"still be able to set the ``SSS`` built-in (which normally adds subsurface "
"scattering) in your shader, but nothing will happen."
msgstr ""
"在自定义 :ref:`ShaderMaterials <class_ShaderMaterial>` 中，您可以为这些特性设"
"置值，但它们是非功能性的。例如，您仍然可以在着色器中设置内置的 ``SSS``\\ （通"
"常会增加次表面散射），但什么都不会发生。"

msgid "Environment features"
msgstr "环境特性"

msgid ""
"In GLES2, the following features in the :ref:`Environment "
"<class_Environment>` are missing:"
msgstr "在 GLES2 中，\\ :ref:`Environment <class_Environment>` 缺失以下特性："

msgid "Auto exposure"
msgstr "自动曝光"

msgid "Tonemapping"
msgstr "色调映射"

msgid "Screen space reflections"
msgstr "屏幕空间反射"

msgid "Screen space ambient occlusion"
msgstr "屏幕空间环境遮挡"

msgid "That means that in GLES2 environments you can only set:"
msgstr "这意味着在 GLES2 环境中，您只能设置："

msgid "Sky (including procedural sky)"
msgstr "天空（包括程序式天空）"

msgid "Ambient light"
msgstr "环境光"

msgid "Fog"
msgstr "雾"

msgid "Depth of field"
msgstr "景深"

msgid "Glow (also known as bloom)"
msgstr "辉光（也称为泛光）"

msgid "Adjustment"
msgstr "调整"

msgid "GIProbes"
msgstr "GIProbe"

msgid ""
":ref:`GIProbes <class_GIProbe>` do not work in GLES2. Instead use :ref:"
"`Baked Lightmaps <class_BakedLightmap>`. For a description of how baked "
"lightmaps work see the :ref:`Baked Lightmaps tutorial <doc_baked_lightmaps>`."
msgstr ""
":ref:`GIProbe <class_GIProbe>` 在 GLES2 中不起作用。请换用\\ :ref:`烘焙灯光贴"
"图 <class_BakedLightmap>`。有关烘焙灯光贴图工作原理的描述见\\ :ref:`烘焙灯光"
"贴图教程 <doc_baked_lightmaps>`。"

msgid "Contact shadows"
msgstr "接触阴影"

msgid ""
"The ``shadow_contact`` property of :ref:`Lights <class_Light>` is not "
"supported in GLES2 and so does nothing."
msgstr ""
":ref:`Light <class_Light>` 的 ``shadow_contact`` 属性在 GLES2 中不被支持，没"
"有任何效果。"

msgid "Light performance"
msgstr "灯光性能"

msgid ""
"In GLES2, performance scales poorly with several lights, as each light is "
"processed in a separate render pass (in opposition to GLES3 which is all "
"done in a single pass). Try to limit scenes to as few lights as possible in "
"order to achieve greatest performance."
msgstr ""
"在GLES2中, 使用多盏灯光会造成性能不佳, 因为每盏灯光都在一个单独的渲染通道中处"
"理(与GLES3相反,GLES3是一次性完成渲染). 尝试将场景灯光控制在尽可能少的情况, 以"
"达到最好效果."

msgid "Texture compression"
msgstr "纹理压缩"

msgid ""
"On mobile, GLES2 requires ETC texture compression, while GLES3 requires "
"ETC2. ETC2 is enabled by default, so if exporting to mobile using GLES2 make "
"sure to set the project setting ``rendering/vram_compression/import_etc`` "
"and then reimport textures."
msgstr ""
"在移动端,GLES2需要进行纹理压缩, 而GLES3需要ETC2纹理压缩. 默认启用ETC2纹理压"
"缩, 因此, 如果使用GLES2导出到移动端, 请确保在项目设置中设定了 ``渲染/显存_压"
"缩/导入_etc压缩``, 然后重新导入纹理."

msgid ""
"Since ETC doesn't support transparency, you must reimport textures that "
"contain an alpha channel to use the Uncompressed, Lossy or Lossless "
"compression mode (instead of Video RAM). This can be done in the Import dock "
"after selecting them in the FileSystem dock."
msgstr ""
"由于ETC不支持透明度, 您必须重新导入包含alpha通道的纹理, 以使用未压缩, 有损或"
"无损压缩模式(而不是视频RAM). 这可以在文件系统栏中选择它们后, 在导入栏中完成."

msgid "Blend shapes"
msgstr "融合变形"

msgid ""
"In GLES2, blend shapes are implemented on the CPU instead of the GPU. "
"Accordingly, they may not perform as well as blend shapes in GLES3. To avoid "
"performance issues when using blend shapes in GLES2, try to minimize the "
"number of blend shapes that are updated each frame."
msgstr ""
"在 GLES2 中，形状混合是在 CPU 而不是 GPU 上实现的。相应的，性能可能不及 "
"GLES3 中的混合形状。要避免在 GLES2 中使用混合形状的性能问题，请尝试让每一帧中"
"所需更新的混合形状尽可能地少。"

msgid "Shading language"
msgstr "着色语言"

msgid ""
"GLES3 provides many built-in functions that GLES2 does not. Below is a list "
"of functions that are not available or are have limited support in GLES2."
msgstr ""
"GLES3提供了许多GLES2没有提供的内置函数. 下面是在GLES2中不可用或支持有限的函数"
"列表."

msgid ""
"For a complete list of built-in GLSL functions see the :ref:`Shading "
"Language doc <doc_shading_language>`."
msgstr ""
"完整的 GLSL 内置函数列表见\\ :ref:`着色器语言文档 <doc_shading_language>`。"

msgid "Function"
msgstr "函数"

msgid "vec_type **modf** ( vec_type x, out vec_type i )"
msgstr "vec_type **modf** ( vec_type x, out vec_type i )"

msgid "vec_int_type **floatBitsToInt** ( vec_type x )"
msgstr "vec_int_type **floatBitsToInt** ( vec_type x )"

msgid "vec_uint_type **floatBitsToUint** ( vec_type x )"
msgstr "vec_uint_type **floatBitsToUint** ( vec_type x )"

msgid "vec_type **intBitsToFloat** ( vec_int_type x )"
msgstr "vec_type **intBitsToFloat** ( vec_int_type x )"

msgid "vec_type **uintBitsToFloat** ( vec_uint_type x )"
msgstr "vec_type **uintBitsToFloat** ( vec_uint_type x )"

msgid "ivec2 **textureSize** ( sampler2D_type s, int lod )"
msgstr "ivec2 **textureSize** ( sampler2D_type s, int lod )"

msgid "See workaround below"
msgstr "请参阅下面的解决方法"

msgid "ivec2 **textureSize** ( samplerCube s, int lod )"
msgstr "ivec2 **textureSize** ( samplerCube s, int lod )"

msgid "vec4_type **texture** ( sampler_type s, vec_type uv [, float bias] )"
msgstr "vec4_type **texture** ( sampler_type s, vec_type uv [, float bias] )"

msgid "**bias** not available in vertex shader"
msgstr "**bias** 在顶点着色器中不可用"

msgid ""
"vec4_type **textureProj** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""
"vec4_type **textureProj** ( sampler_type s, vec_type uv [, float bias] )"

msgid "vec4_type **textureLod** ( sampler_type s, vec_type uv, float lod )"
msgstr "vec4_type **textureLod** ( sampler_type s, vec_type uv, float lod )"

msgid "Only available in vertex shader on some hardware"
msgstr "只在某些硬件的顶点着色器中可用"

msgid "vec4_type **textureProjLod** ( sampler_type s, vec_type uv, float lod )"
msgstr ""
"vec4_type **textureProjLod** ( sampler_type s, vec_type uv, float lod )"

msgid ""
"vec4_type **textureGrad** ( sampler_type s, vec_type uv, vec_type dPdx, "
"vec_type dPdy )"
msgstr ""
"vec4_type **textureGrad** ( sampler_type s, vec_type uv, vec_type dPdx, "
"vec_type dPdy)"

msgid "vec_type **dFdx** ( vec_type p )"
msgstr "vec_type **dFdx** ( vec_type p )"

msgid "vec_type **dFdy** ( vec_type p )"
msgstr "vec_type **dFdy** ( vec_type p )"

msgid "vec_type **fwidth** ( vec_type p )"
msgstr "vec_type **fwidth** ( vec_type p )"

msgid ""
"Functions not in GLES2's GLSL were added with Godots own shader standard "
"library. These functions may perform worse in GLES2 compared to GLES3."
msgstr ""
"GLES2的GLSL中没有的函数是用Godots自己的shader标准库添加的, 这些函数在GLES2中"
"的表现可能比GLES3差."

msgid "``textureSize()`` workaround"
msgstr "``textureSize()`` 变通方法"

msgid ""
"GLES2 does not support ``textureSize()``. You can get the size of a texture "
"the old fashioned way by passing in a uniform with the texture size yourself."
msgstr ""
"GLES2不支持 ``textureSize()`` . 你可以用老式的方式获得纹理的大小, 通过传入一"
"个带有纹理大小的uniform."

msgid "Built in variables and render modes"
msgstr "内置变量和渲染模式"

msgid ""
"Godot also provides many built-in variables and render modes. Some cannot be "
"supported in GLES2. Below is a list of built-in variables and render modes "
"that, when written to, will have no effect or could even cause issues when "
"using the GLES2 backend."
msgstr ""
"Godot还提供了许多内置变量和渲染模式. 有些变量在GLES2中无法被支持. 以下是一些"
"内置变量和渲染模式的列表, 这些变量和渲染模式在写入GLES2后端时不会有任何影响, "
"甚至可能会导致问题."

msgid "Variable / Render Mode"
msgstr "可变和渲染模式"

msgid "``ensure_correct_normals``"
msgstr "``ensure_correct_normals``"

msgid "``INSTANCE_ID``"
msgstr "``INSTANCE_ID``"

msgid "``DEPTH``"
msgstr "``DEPTH``"

msgid "``ANISOTROPY``"
msgstr "``ANISOTROPY``"

msgid "``ANISOTROPY_FLOW``"
msgstr "``ANISOTROPY_FLOW``"

msgid "``SSS_STRENGTH``"
msgstr "``SSS_STRENGTH``"

msgid "Translation status"
msgstr "翻译状态"
