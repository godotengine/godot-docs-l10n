# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Beziers, curves and paths"
msgstr "贝塞尔、曲线和路径"

msgid ""
"Bezier curves are a mathematical approximation of natural geometric shapes. "
"We use them to represent a curve with as little information as possible and "
"with a high level of flexibility."
msgstr ""
"贝塞尔曲线是一种自然几何形状的数学近似. 我们用它们来代表一个曲线, 含有尽可能"
"少的信息, 保持高水平的灵活性."

msgid ""
"Unlike more abstract mathematical concepts, Bezier curves were created for "
"industrial design. They are a popular tool in the graphics software industry."
msgstr ""
"不像抽象的数学概念, 贝塞尔曲线是为工业设计. 它们是图形软件行业中的流行工具."

msgid ""
"They rely on :ref:`interpolation<doc_interpolation>`, which we saw in the "
"previous article, combining multiple steps to create smooth curves. To "
"better understand how Bezier curves work, let's start from its simplest "
"form: Quadratic Bezier."
msgstr ""
"它们依赖于 :ref:`插值 <doc_interpolation>`, 我们在上一篇文章中看到, 如何结合"
"多个步骤来创建平滑的曲线. 为了更好地理解贝塞尔曲线的工作原理, 我们从最简单的"
"形式开始: 二次贝塞尔曲线."

msgid "Quadratic Bezier"
msgstr "二次贝塞尔曲线"

msgid "Take three points, the minimum required for Quadratic Bezier to work:"
msgstr "取三个点, 这是建立二次贝塞尔曲线所需的最小值:"

msgid ""
"To draw a curve between them, we first interpolate gradually over the two "
"vertices of each of the two segments formed by the three points, using "
"values ranging from 0 to 1. This gives us two points that move along the "
"segments as we change the value of ``t`` from 0 to 1."
msgstr ""
"要在它们之间画一条曲线，我们首先使用 0 到 1 之间的值，在由这三个点构成的两个"
"线段的每个顶点上逐步插值。当我们把 ``t`` 值从 0 变成 1 时，就得到了两个沿着线"
"段移动的点。"

msgid ""
"We then interpolate ``q0`` and ``q1`` to obtain a single point ``r`` that "
"moves along a curve."
msgstr ""
"然后，我们插值 ``q0`` 和 ``q1``\\ ，以获得沿着曲线移动的单点 ``r``\\ 。"

msgid "This type of curve is called a *Quadratic Bezier* curve."
msgstr "这种类型的曲线就被称为\\ *二次贝塞尔*\\ 曲线。"

msgid "*(Image credit: Wikipedia)*"
msgstr "*(图像来源: 维基百科)*"

msgid "Cubic Bezier"
msgstr "三次贝塞尔曲线"

msgid ""
"Building upon the previous example, we can get more control by interpolating "
"between four points."
msgstr "基于前面的例子, 我们可以通过在四个点之间插值得到更多的控制."

msgid ""
"We first use a function with four parameters to take four points as an "
"input, ``p0``, ``p1``, ``p2`` and ``p3``:"
msgstr ""
"首先我们使用一个带有四个参数的函数，以 ``p0``\\ 、\\ ``p1``\\ 、\\ "
"``p2``\\ 、\\ ``p3`` 四个点作为输入："

msgid ""
"We apply a linear interpolation to each couple of points to reduce them to "
"three:"
msgstr "我们对每两个点进行线性插值, 将它们减少到三个:"

msgid "We then take our three points and reduce them to two:"
msgstr "然后我们把这三个点缩减为两个点:"

msgid "And to one:"
msgstr "然后到一个:"

msgid "Here is the full function:"
msgstr "这里给出了完整的函数:"

msgid ""
"The result will be a smooth curve interpolating between all four points:"
msgstr "结果将是在所有四个点之间的平滑曲线插值:"

msgid ""
"Cubic Bezier interpolation works the same in 3D, just use ``Vector3`` "
"instead of ``Vector2``."
msgstr ""
"三次贝塞尔插值在三维中也是一样的，只需使用 ``Vector3`` 代替 ``Vector2``\\ 。"

msgid "Adding control points"
msgstr "添加控制点"

msgid ""
"Building upon Cubic Bezier, we can change the way two of the points work to "
"control the shape of our curve freely. Instead of having ``p0``, ``p1``, "
"``p2`` and ``p3``, we will store them as:"
msgstr ""
"在三次贝塞尔的基础上，我们可以通过改变两个点的工作方式来自由地控制曲线的形"
"状。我们不使用 ``p0``\\ 、\\ ``p1``\\ 、\\ ``p2``\\ 、\\ ``p3``\\ ，而是将它"
"们存储为："

msgid "``point0 = p0``: Is the first point, the source"
msgstr "``point0 = p0``\\ ：是第一个点，即源"

msgid "``control0 = p1 - p0``: Is a vector relative to the first control point"
msgstr "``control0 = p1 - p0``\\ ：是相对于第一个控制点的向量"

msgid ""
"``control1 = p3 - p2``: Is a vector relative to the second control point"
msgstr "``control1 = p3 - p2``\\ ：是相对于第二个控制点的向量"

msgid "``point1 = p3``: Is the second point, the destination"
msgstr "``point1 = p3``\\ ：是第二个点，即终点"

msgid ""
"This way, we have two points and two control points which are relative "
"vectors to the respective points. If you've used graphics or animation "
"software before, this might look familiar:"
msgstr ""
"使用这种方式, 有两个点和两个控制点, 它们是各自点的相对向量. 如果你以前用过图"
"形或动画软件, 这可能看起来很熟悉:"

msgid ""
"This is how graphics software presents Bezier curves to the users, and how "
"they work and look in Godot."
msgstr ""
"这就是图形软件如何向用户呈现贝塞尔曲线, 以及它们在Godot引擎内的工作原理."

msgid "Curve2D, Curve3D, Path and Path2D"
msgstr "Curve2D、Curve3D、Path 以及 Path2D"

msgid ""
"There are two objects that contain curves: :ref:`Curve3D <class_Curve3D>` "
"and :ref:`Curve2D <class_Curve2D>` (for 3D and 2D respectively)."
msgstr ""
"有两个对象包含曲线 :ref:`Curve3D <class_Curve3D>` 和 :ref:`Curve2D "
"<class_Curve2D>`\\ （分别代表 3D 和 2D）。"

msgid ""
"They can contain several points, allowing for longer paths. It is also "
"possible to set them to nodes: :ref:`Path <class_Path>` and :ref:`Path2D "
"<class_Path2D>` (also for 3D and 2D respectively):"
msgstr ""
"它们可以包含几个点，允许更长的路径。也可以将它们设置为节点：\\ :ref:`Path "
"<class_Path>` 和 :ref:`Path2D <class_Path2D>`\\ （在 3D 和 2D 内都适用）："

msgid ""
"Using them, however, may not be completely obvious, so following is a "
"description of the most common use cases for Bezier curves."
msgstr "然而它们的使用方法可能不是很直观，下面是对贝塞尔曲线最常见用例的描述。"

msgid "Evaluating"
msgstr "估值"

msgid ""
"Just evaluating them may be an option, but in most cases it's not very "
"useful. The big drawback with Bezier curves is that if you traverse them at "
"constant speed, from ``t = 0`` to ``t = 1``, the actual interpolation will "
"*not* move at constant speed. The speed is also an interpolation between the "
"distances between points ``p0``, ``p1``, ``p2`` and ``p3`` and there is not "
"a mathematically simple way to traverse the curve at constant speed."
msgstr ""
"一种选择是直接估值，不过在大多数情况下都不是很有用。贝塞尔曲线最大的缺点是如"
"果你以恒定的速度沿着它走，从 ``t = 0`` 到 ``t = 1``\\ ，实际的插值\\ *不会"
"*\\ 以恒定的速度移动。速度也是根据点 ``p0``\\ 、\\ ``p1``\\ 、\\ "
"``p2``\\ 、\\ ``p3`` 之间距离插值出来的，无法使用简单的数学方法以恒定的速度通"
"过曲线。"

msgid "Let's do a simple example with the following pseudocode:"
msgstr "让我们用下面的伪代码举个简单的例子："

msgid ""
"As you can see, the speed (in pixels per second) of the circle varies, even "
"though ``t`` is increased at constant speed. This makes beziers difficult to "
"use for anything practical out of the box."
msgstr ""
"如你所见，即便 ``t`` 在匀速递增，圆点的速度还是在不断变化的（以像素每秒为单"
"位）。这也使贝塞尔难以做到任何实际的开箱即用。"

msgid "Drawing"
msgstr "绘制"

msgid ""
"Drawing beziers (or objects based on the curve) is a very common use case, "
"but it's also not easy. For pretty much any case, Bezier curves need to be "
"converted to some sort of segments. This is normally difficult, however, "
"without creating a very high amount of them."
msgstr ""
"绘制贝塞尔(或基于曲线的对象)是很常见的用例, 但这也不容易. 几乎在任何情况下, "
"贝塞尔曲线需要被转换成某种线段. 这通常很难, 然而, 并没有创建非常高数量的线段."

msgid ""
"The reason is that some sections of a curve (specifically, corners) may "
"require considerable amounts of points, while other sections may not:"
msgstr ""
"原因是曲线的某些部分(具体来说是角落)可能需要相当多的点, 而其他部分不一定:"

msgid ""
"Additionally, if both control points were ``0, 0`` (remember they are "
"relative vectors), the Bezier curve would just be a straight line (so "
"drawing a high amount of points would be wasteful)."
msgstr ""
"另外，如果两个控制点都是 ``0,0``\\ （请记住它们是相对向量），贝塞尔曲线就是一"
"条直线（所以画很多点就是在浪费时间）。"

msgid ""
"Before drawing Bezier curves, *tessellation* is required. This is often done "
"with a recursive or divide and conquer function that splits the curve until "
"the curvature amount becomes less than a certain threshold."
msgstr ""
"在绘制贝塞尔曲线之前, 需要进行 *细分* . 这通常是用递归函数或除法函数来完成"
"的, 它可以分割曲线, 直到曲率变得小于某个阈值."

msgid ""
"The *Curve* classes provide this via the :ref:`Curve2D.tessellate() "
"<class_Curve2D_method_tessellate>` function (which receives optional "
"``stages`` of recursion and angle ``tolerance`` arguments). This way, "
"drawing something based on a curve is easier."
msgstr ""
"*Curve* 类通过 :ref:`Curve2D.tessellate() <class_Curve2D_method_tessellate>` "
"函数来提供该功能(函数接收可选的 ``stages`` 递归和角度 ``tolerance`` 参数). 这"
"样一来, 基于曲线画东西就比较容易了."

msgid "Traversal"
msgstr "遍历"

msgid ""
"The last common use case for the curves is to traverse them. Because of what "
"was mentioned before regarding constant speed, this is also difficult."
msgstr "最后曲线最常见的用例是遍历. 因为之前提到关于匀速的内容, 这也是困难的."

msgid ""
"To make this easier, the curves need to be *baked* into equidistant points. "
"This way, they can be approximated with regular interpolation (which can be "
"improved further with a cubic option). To do this, just use the :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` method together "
"with :ref:`Curve2D."
"get_baked_length()<class_Curve2D_method_get_baked_length>`. The first call "
"to either of them will bake the curve internally."
msgstr ""
"为了操作起来更方便，需要先把曲线 *烘焙* 成若干等距的点。这样就可以用常规的插"
"值操作（还可以使用立方选项进一步优化）来进行近似估值了。要实现这样的效果，只"
"需调用 :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` 和 :ref:`Curve2D."
"get_baked_length()<class_Curve2D_method_get_baked_length>` 方法。首次调用两者"
"之中的任意方法都会触发内部对曲线的烘焙。"

msgid ""
"Traversal at constant speed, then, can be done with the following pseudo-"
"code:"
msgstr "匀速遍历, 然后, 可以用下面的伪代码:"

msgid "And the output will, then, move at constant speed:"
msgstr "并且输出, 然后匀速移动:"

msgid "Translation status"
msgstr "翻译状态"
