# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization"
msgstr "优化"

msgid "Introduction"
msgstr "前言"

msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always trade-offs, which consist of trading speed for usability "
"and flexibility. Some practical examples of this are:"
msgstr ""
"Godot遵循平衡的表现理念. 在效率表现中, 总是有需要权衡交易的东西, 可用性和灵活"
"性. 一些实际的示例是:"

msgid ""
"Rendering large amounts of objects efficiently is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering. This makes rendering less "
"efficient, but at the same time, fewer objects are rendered. Therefore, the "
"overall rendering efficiency is improved."
msgstr ""
"有效地渲染大量的物体是很容易的, 但是当必须渲染一个大的场景时, 效率就会变得很"
"低. 为了解决这个问题, 必须在渲染时加入可见性计算. 这使得渲染的效率降低, 但同"
"时, 被渲染的对象也减少了. 因此, 整体的渲染效率得到了提高."

msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs. At the same time, sorting has a cost."
msgstr ""
"为每个需要渲染的对象配置每个材质的属性也很慢. 为了解决这个问题, 物体被按材质"
"分类以减少成本. 同时, 排序也是有成本的."

msgid ""
"In 3D physics, a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and raycasting. Algorithms that allow faster insertion and "
"removal, as well as raycasting, will not be able to handle as many active "
"objects."
msgstr ""
"在3D物理中, 也有类似的情况发生. 处理大量物理对象的最佳算法(如SAP)在插入/移除"
"对象和射线传输方面都很慢. 允许更快的插入和移除以及射线传输的算法, 将无法处理"
"那么多的活动对象."

msgid ""
"And there are many more examples of this! Game engines strive to be general-"
"purpose in nature. Balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others, or algorithms that "
"are fast but are more difficult to use."
msgstr ""
"而这样的例子还有很多!游戏引擎在本质上努力成为通用的. 平衡的算法总是受到青睐, "
"而不是那些在某些情况下可能很快而在另一些情况下很慢的算法, 或者那些快但更难使"
"用的算法."

msgid ""
"Godot is not an exception to this. While it is designed to have backends "
"swappable for different algorithms, the default backends prioritize balance "
"and flexibility over performance."
msgstr ""
"Godot在这方面也不例外. 虽然它被设计成可以为不同的算法交换后端, 但默认的后端将"
"平衡和灵活性置于性能之上."

msgid ""
"With this clear, the aim of this tutorial section is to explain how to get "
"the maximum performance out of Godot. While the tutorials can be read in any "
"order, it is a good idea to start from :ref:`doc_general_optimization`."
msgstr ""
"明确了这一点后, 本教程部分的目的是解释如何从Godot中获得最大的性能. 虽然这些教"
"程可以按任何顺序阅读, 但最好从 :ref:`doc_general_optimization` 开始."

msgid "Common"
msgstr "常规"

msgid "CPU"
msgstr "CPU"

msgid "GPU"
msgstr "GPU"

msgid "2D"
msgstr "2D"

msgid "3D"
msgstr "3D"

msgid "Multi-threading"
msgstr "多线程"

msgid "Translation status"
msgstr "翻译状态"
