# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Animating thousands of fish with MultiMeshInstance"
msgstr "用 MultiMeshInstance 动画化数以千计条鱼"

msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"本教程探索了游戏 `ABZU <https://www.gdcvault.com/play/1024409/Creating-the-"
"Art-of-ABZ>`_ 中使用的一种技术, 该技术使用顶点动画和静态网格实例, 来渲染和制"
"作成千上万的鱼动画."

msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance <class_MultiMeshInstance>`. "
"Using the following technique you can render thousands of animated objects, "
"even on low end hardware."
msgstr ""
"在 Godot 中，这可以通过自定义 :ref:`Shader <class_Shader>` 和 :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>` 实现。使用下面的技术，即使是在"
"低端硬件上你也可以渲染成千上万的动画对象。"

msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr "我们将从一条鱼的动画开始. 然后, 我们将看到如何将该动画扩展到数千条鱼."

msgid "Animating one Fish"
msgstr "动画化一条鱼"

msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance <class_MeshInstance>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"单击下面的材质 :ref:`Plane Mesh <class_MeshInstance>` 菜单并创建一个新的 :"
"ref:`ShaderMaterial <class_ShaderMaterial>`."

msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr "这是我们用于示例图像的鱼, 您可以使用任何您喜欢的鱼模型."

msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <http://quaternius."
"com>`_ and is shared with a creative commons license. CC0 1.0 Universal (CC0 "
"1.0) Public Domain Dedication https://creativecommons.org/publicdomain/"
"zero/1.0/"
msgstr ""
"本教程中的鱼模型由 `QuaterniusDev<http://quaternius.com>` 制作, 使用如下知识"
"共享许可.CC0 1.0通用(CC0 1.0)公共领域贡献https://creativecommons.org/"
"publicdomain/zero/1.0/"

msgid ""
"Typically, you would use bones and a :ref:`Skeleton <class_Skeleton>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""
"通常情况下，您将使用骨骼和 :ref:`Skeleton <class_Skeleton>` 为对象做动画。然"
"而，骨骼的动画是在 CPU 上做的，所以你必须为每一帧计算成千上万的操作，因此就不"
"可能有成千上万的对象。在顶点着色器中使用顶点动画，你就可以避免使用骨骼，而是"
"完全在 GPU 上，使用几行代码来计算完整的动画。"

msgid "The animation will be made of four key motions:"
msgstr "动画由四个关键帧动作组成:"

msgid "A side to side motion"
msgstr "从一边运动到另一边"

msgid "A pivot motion around the center of the fish"
msgstr "绕着鱼的中心作旋转运动"

msgid "A panning wave motion"
msgstr "平移波动运动"

msgid "A panning twist motion"
msgstr "平移扭转运动"

msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"所有的动画代码都在顶点着色器中，并由 uniform 控制运动量。我们使用 uniform 来"
"控制运动的强度，这样你就可以在编辑器中调整动画，并实时看到结果，而不用重新编"
"译着色器。"

msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""
"所有的运动都将使用余弦波应用于模型空间中的 ``VERTEX`` . 我们希望顶点在模型空"
"间中, 使运动总是相对于鱼的方向. 例如,side-to-side将始终使鱼在其左至右的方向上"
"来回移动, 而不是在世界方向的 ``x`` 轴上."

msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr "为了控制动画的速度，我们将通过使用 ``TIME`` 定义自己的时间变量开始。"

msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"我们将实施的第一项议案是左右运动. 它可以通过 ``TIME`` 的 ``cos`` 抵消 "
"``VERTEX.x`` 来制作. 每次渲染网格时, 所有顶点都会移动到 \"cos(时间)\" 的数量."

msgid "The resulting animation should look something like this:"
msgstr "生成的动画看起来是这样的:"

msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"接下来，我们添加轴心点。因为鱼以 (0, 0) 为中心，我们所要做的只是将 "
"``VERTEX`` 乘以旋转矩阵，使其围绕鱼的中心旋转。"

msgid "We construct a rotation matrix like so:"
msgstr "我们构造一个旋转矩阵, 如下所示:"

msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr "然后我们把它乘以 ``VERTEX.xz``\\ ，应用到 ``x`` 和 ``z`` 轴上。"

msgid "With only the pivot applied you should see something like this:"
msgstr "在只应用轴心的情况下，您会看到这个："

msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"接下来的两个动作需要沿着鱼的脊柱平移. 为此, 我们需要一个新的变量, ``body`` . "
"``body`` 是一个浮点数，在鱼的尾部是 ``0`` ，在头部是 ``1`` ."

msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"下一个运动是沿着鱼的长度向下移动的余弦波. 为了让它沿着鱼的脊柱移动, 我们用脊"
"柱的位置来偏移输入到 ``cos`` 的位置, 也就是我们在上面定义的变量 ``body``\\ 。"

msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"这看起来很像我们上面定义的左右运动, 但在这个例子中, 通过使用 ``body`` 来偏移 "
"``cos``\\ ，沿着脊柱的每个顶点在波浪中都有不同的位置, 使它看起来像是沿着鱼移"
"动的波浪."

msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first construct a rotation matrix."
msgstr ""
"最后一个动作是扭转，也就是沿着脊柱滚动。类似轴心运动，我们首先构造一个旋转矩"
"阵。"

msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fish's spine needs to be centered on "
"the ``z`` axis."
msgstr ""
"我们在 ``xy`` 轴上应用旋转, 使鱼看起来绕着它的脊柱滚动. 要做到这一点, 鱼的脊"
"柱需要以 ``z`` 轴为中心."

msgid "Here is the fish with twist applied:"
msgstr "这是应用扭曲的鱼:"

msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr "如果我们一个接一个地应用这些运动, 就得到一个类似液体凝胶似的运动."

msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"通常鱼主要使用身体的后半部分游泳，所以我们需要将平移运动限制在鱼的后半部分。"
"为此，我们创建一个新变量 ``mask`` （遮罩）。"

msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end using ``smoothstep`` to control the point at which the transition "
"from ``0`` to ``1`` happens."
msgstr ""
"``mask`` 是个浮点数，从鱼头的 ``0`` 过渡到鱼尾的 ``1`` ，我们用 "
"``smoothstep`` 来控制在哪里进行由 ``0`` 到 ``1`` 的过渡。"

msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr "下面是把 ``COLOR`` 设置成 ``mask`` 后这条鱼的样子："

msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr "我们在做波浪运动的地方乘以 ``mask`` 就可以把动作限制在后半部分。"

msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask``, we would shrink the fish."
msgstr ""
"为了将遮罩应用于扭曲, 我们使用 ``mix`` . ``mix`` 允许在完全旋转的顶点和未旋转"
"的顶点之间混合顶点位置. 需要使用 ``mix`` 而不是将 ``mask`` 乘以旋转后的 "
"``VERTEX`` , 因为不是将运动加到 ``VERTEX`` 上, 而是用旋转后的版本替换 "
"``VERTEX`` . 如果把它乘以 ``mask`` , 就会把鱼缩小."

msgid "Putting the four motions together gives us the final animation."
msgstr "将四个动作组合在一起, 就得到了最终的动画效果."

msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"继续发挥 uniform 的作用, 以改变鱼的游泳周期. 你会发现, 你可以用这四个动作创造"
"出各种各样的游泳方式."

msgid "Making a school of fish"
msgstr "制作一群鱼"

msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance node."
msgstr "Godot 可以使用 MultiMeshInstance 节点轻松渲染成千上万的相同对象。"

msgid ""
"A MultiMeshInstance node is created and used the same way you would make a "
"MeshInstance node. For this tutorial, we will name the MultiMeshInstance "
"node ``School``, because it will contain a school of fish."
msgstr ""
"MultiMeshInstance 节点的创建和使用与 MeshInstance 节点相同。在本教程中，我们"
"将把 MultiMeshInstance 节点命名为 ``School``\\ （鱼群），因为里面会有一群鱼。"

msgid ""
"Once you have a MultiMeshInstance add a :ref:`MultiMesh <class_MultiMesh>`, "
"and to that MultiMesh add your :ref:`Mesh <class_Mesh>` with the shader from "
"above."
msgstr ""
"有了 MultiMeshInstance 之后就再添加一个 :ref:`MultiMesh "
"<class_MultiMesh>`\\ ，然后在 MultiMesh 上添加使用上述着色器的 :ref:`Mesh "
"<class_Mesh>`。"

msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"MultiMeshes 使用三个额外的实例属性来绘制 Mesh：变换（旋转、平移、缩放）、颜色"
"和自定义。自定义用于使用 :ref:`Color <class_Color>` 传入 4 个多用途变量。"

msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"``instance_count`` 指定要绘制的网格的实例数量。现在，将 ``instance_count`` 保"
"留为 ``0``\\ ，因为当 ``instance_count`` 大于 ``0`` 时，您不能更改任何其他参"
"数。我们稍后将在 GDScript 中设置 ``instance_count``\\ 。"

msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""
"``transform_format`` 指定使用的变换是 3D 还是 2D。对于本教程，请选择 3D。"

msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating-point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""
"对于 ``color_format`` 和 ``custom_data_format``\\ ，你可以在 ``None``\\ 、\\ "
"``Byte``\\ 、\\ ``Float`` 之间选择。\\ ``None`` 意味着你不会将这些数据（无论"
"是每个实例的 ``COLOR`` 变量还是 ``INSTANCE_CUSTOM``\\ ）传递给着色器。\\ "
"``Byte`` 意味着组成你传入的颜色的每一个数字将被存储为 8 位，而 ``Float`` 意味"
"着每一个数字将被存储为浮点数（32 位）。\\ ``Float`` 速度较慢但更精确，\\ "
"``Byte`` 占用内存较少、速度较快，但你可能会看到一些视觉上的伪像。"

msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr "现在，将 ``instance_count`` 设置为您想要的鱼的数量。"

msgid "Next we need to set the per-instance transforms."
msgstr "接下来, 我们需要设置每个实例的变换."

msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""
"有两种方法可以为多个时间轴设置每个实例的变换。第一个完全在编辑器中，在 :ref:"
"`MultiMeshInstance tutorial <doc_using_multi_mesh_instance>` 中进行了描述。"

msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"第二种方法是, 遍历所有实例, 并在代码中设置它们的变换. 下面, 我们使用GDScript"
"遍历所有实例, 并将它们的变换设置为随机位置."

msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance."
msgstr "运行此脚本, 会在多重网格实例位置周围的框中随机放置鱼."

msgid ""
"If performance is an issue for you, try running the scene with GLES2 or with "
"fewer fish."
msgstr "如果你关注性能问题, 试着使用GLES2运行场景或摆放更少的鱼."

msgid ""
"Notice how all the fish are all in the same position in their swim cycle? It "
"makes them look very robotic. The next step is to give each fish a different "
"position in the swim cycle so the entire school looks more organic."
msgstr ""
"你应该已经注意到所有鱼的游泳动作都是同步的了吧？这样看上去非常机械。下一步我"
"们要做的就是让每一条鱼都处于游泳周期的不同位置，这样整个鱼群看起来就会更自"
"然。"

msgid "Animating a school of fish"
msgstr "动画鱼群"

msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"使用 ``cos`` 函数给鱼做动画的一个好处是，它们只需要一个 ``time`` 参数。为了让"
"每条鱼在游泳周期中处于单独的位置，我们只需要偏移 ``time``\\ 。"

msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""
"为此，我们将每个实例的自定义值 ``INSTANCE_CUSTOM`` 添加到 ``time`` 中。"

msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"接下来，我们需要向 ``INSTANCE_CUSTOM`` 传递一个值。通过在上面的 ``for`` 循环"
"中添加一行来实现这一点。在 ``for`` 循环中，为每个实例分配一组四个随机浮点数来"
"使用。"

msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"现在这些鱼在游泳周期中都有独特的位置。你可以通过使用 ``INSTANCE_CUSTOM`` 乘"
"以 ``TIME`` 让它们游泳更快或更慢，从而让它们更个性化。"

msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr "甚至您还可以像更改每个实例的自定义值一样, 尝试更改每个实例的颜色."

msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster than moving thousands of MeshInstances per frame, it'll still likely "
"be slow."
msgstr ""
"这时你会遇到一个问题, 那就是鱼是有动画的, 但是它们没有移动. 你可以通过每一帧"
"更新每个鱼的实例变换来移动它们. 虽然这样做会比每帧移动数千个MeshInstances要"
"快, 但还是可能会很慢."

msgid ""
"In the next tutorial we will cover how to use :ref:`Particles "
"<class_Particles>` to take advantage of the GPU and move each fish around "
"individually while still receiving the benefits of instancing."
msgstr ""
"下一个教程中，我们将介绍如何使用\\ :ref:`粒子 <class_Particles>`\\ 来利用 "
"GPU，分别移动每条鱼，同时还能获得实例化的好处。"

msgid "Translation status"
msgstr "翻译状态"
