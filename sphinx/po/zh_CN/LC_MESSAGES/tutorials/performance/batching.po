# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using batching"
msgstr "使用批处理优化"

msgid "Introduction"
msgstr "前言"

msgid ""
"Game engines have to send a set of instructions to the GPU to tell the GPU "
"what and where to draw. These instructions are sent using common "
"instructions called :abbr:`APIs (Application Programming Interfaces)`. "
"Examples of graphics APIs are OpenGL, OpenGL ES, and Vulkan."
msgstr ""
"游戏引擎必须向 GPU 发送一组指令，以告诉 GPU 要画什么和在哪里画。这些指令是使"
"用称为 :abbr:`API (Application Programming Interface)` 的通用指令发送的。图"
"形 API 的例子有 OpenGL、OpenGL ES 和 Vulkan。"

msgid ""
"Different APIs incur different costs when drawing objects. OpenGL handles a "
"lot of work for the user in the GPU driver at the cost of more expensive "
"draw calls. As a result, applications can often be sped up by reducing the "
"number of draw calls."
msgstr ""
"不同的API在绘制对象时产生的成本不同.OpenGL在GPU驱动中为用户处理了很多工作, 但"
"代价是要付出更昂贵的绘制调用. 因此, 通常可以通过减少绘制调用的次数来加快应用"
"程序的速度."

msgid "Draw calls"
msgstr "绘制调用"

msgid ""
"In 2D, we need to tell the GPU to render a series of primitives (rectangles, "
"lines, polygons etc). The most obvious technique is to tell the GPU to "
"render one primitive at a time, telling it some information such as the "
"texture used, the material, the position, size, etc. then saying \"Draw!"
"\" (this is called a draw call)."
msgstr ""
"在 2D 中，我们需要告诉 GPU 渲染一系列图元（矩形、线条、多边形等）。最明显的技"
"术是告诉 GPU 一次渲染一个图元，告诉它一些信息，如使用的纹理、材质、位置、大小"
"等，然后说“画吧！”（这就叫做绘制调用）。"

msgid ""
"While this is conceptually simple from the engine side, GPUs operate very "
"slowly when used in this manner. GPUs work much more efficiently if you tell "
"them to draw a number of similar primitives all in one draw call, which we "
"will call a \"batch\"."
msgstr ""
"虽然从引擎方面来看，这在概念上很简单，但以这种方式使用时，GPU 的运行速度非常"
"慢。如果你告诉 GPU 在一次绘制调用中全部绘制一些类似的图元，那么 GPU 的工作效"
"率就会高得多，我们称之为“批处理”（合批）。"

msgid ""
"It turns out that they don't just work a bit faster when used in this "
"manner; they work a *lot* faster."
msgstr ""
"事实证明, 这样使用时, 它们不仅仅是工作速度快一点, 而是工作速度 *快许多* ."

msgid ""
"As Godot is designed to be a general-purpose engine, the primitives coming "
"into the Godot renderer can be in any order, sometimes similar, and "
"sometimes dissimilar. To match Godot's general-purpose nature with the "
"batching preferences of GPUs, Godot features an intermediate layer which can "
"automatically group together primitives wherever possible and send these "
"batches on to the GPU. This can give an increase in rendering performance "
"while requiring few (if any) changes to your Godot project."
msgstr ""
"由于 Godot 被设计为通用引擎，进入 Godot 渲染器的图元可以以任何顺序排列，有时"
"相似，有时不同。为了使 Godot 的通用性与 GPU 的批处理偏好相匹配，Godot 具有一"
"个中间层，它可以在可能的情况下自动将图元分组，并将这些批处理发送到 GPU 上。这"
"可以提高渲染性能，同时只需要对您的 Godot 项目进行少量（如果有的话）更改。"

msgid "How it works"
msgstr "它的运作方式"

msgid ""
"Instructions come into the renderer from your game in the form of a series "
"of items, each of which can contain one or more commands. The items "
"correspond to Nodes in the scene tree, and the commands correspond to "
"primitives such as rectangles or polygons. Some items such as TileMaps and "
"text can contain a large number of commands (tiles and glyphs respectively). "
"Others, such as sprites, may only contain a single command (a rectangle)."
msgstr ""
"指令以一系列项目的形式从游戏中进入渲染器，每个项目可以包含一个或多个命令。这"
"些项目对应场景树中的节点，而命令则对应矩形或多边形等图元。有些项目（如图块地"
"图和文本）可以包含大量命令（如图块和字形）。精灵等其他项目可能只包含一个命令"
"（一个矩形）。"

msgid "The batcher uses two main techniques to group together primitives:"
msgstr "批处量使用两种主要技术将基本单元分组:"

msgid "Consecutive items can be joined together."
msgstr "连续的项目可以连接到一起."

msgid "Consecutive commands within an item can be joined to form a batch."
msgstr "一个项目中的连续命令可以连接成一个批次."

msgid "Breaking batching"
msgstr "中断批处理"

msgid ""
"Batching can only take place if the items or commands are similar enough to "
"be rendered in one draw call. Certain changes (or techniques), by necessity, "
"prevent the formation of a contiguous batch, this is referred to as "
"\"breaking batching\"."
msgstr ""
"只有当项目或命令足够相似, 可以在一次绘制调用中呈现时, 才能进行批处理. 某些变"
"化或技术, 在必要时, 阻止形成一个连续的批次, 被称为 \"打破批次\"."

msgid "Batching will be broken by (amongst other things):"
msgstr "批处理将被下列事项打破(其中包括):"

msgid "Change of texture."
msgstr "纹理的变化."

msgid "Change of material."
msgstr "材质的变化."

msgid "Change of primitive type (say, going from rectangles to lines)."
msgstr "改变基本单元类型（比如从矩形到线条）。"

msgid ""
"For example, if you draw a series of sprites each with a different texture, "
"there is no way they can be batched."
msgstr ""
"例如, 如果你绘制一系列的精灵, 每个精灵都有不同的纹理, 那么就没有办法将它们进"
"行批处理."

msgid "Determining the rendering order"
msgstr "确定渲染顺序"

msgid ""
"The question arises, if only similar items can be drawn together in a batch, "
"why don't we look through all the items in a scene, group together all the "
"similar items, and draw them together?"
msgstr ""
"问题来了, 如果只有相似的物品才能批量绘制在一起, 那我们为什么不把一个场景中的"
"所有物品都浏览一遍, 把所有相似的物品都分组, 然后绘制在一起呢？"

msgid ""
"In 3D, this is often exactly how engines work. However, in Godot's 2D "
"renderer, items are drawn in \"painter's order\", from back to front. This "
"ensures that items at the front are drawn on top of earlier items when they "
"overlap."
msgstr ""
"在3D中, 这往往正是引擎的工作方式. 然而, 在Godot的2D渲染器中, 项目是按照 \"绘"
"制顺序\", 从后到前绘制的. 这确保了当前面的项目重叠时, 它们会被绘制在前面的项"
"目之上."

msgid ""
"This also means that if we try and draw objects on a per-texture basis, then "
"this painter's order may break and objects will be drawn in the wrong order."
msgstr ""
"这也就意味着, 如果我们试图在每个纹理的基础上绘制对象, 那么绘制的顺序可能会被"
"打破, 对象将以错误的顺序绘制."

msgid "In Godot, this back-to-front order is determined by:"
msgstr "在 Godot 中，这种从后到前的顺序由以下因素确定的："

msgid "The order of objects in the scene tree."
msgstr "场景树中对象的顺序。"

msgid "The Z index of objects."
msgstr "对象的 Z 索引。"

msgid "The canvas layer."
msgstr "画布层。"

msgid ":ref:`class_YSort` nodes."
msgstr ":ref:`class_YSort` 节点."

msgid ""
"You can group similar objects together for easier batching. While doing so "
"is not a requirement on your part, think of it as an optional approach that "
"can improve performance in some cases. See the :ref:"
"`doc_batching_diagnostics` section to help you make this decision."
msgstr ""
"您可以将类似的对象分组, 以便于进行批处理. 虽然这样做并不是您的必须, 但可以将"
"其视为一种可选的方法, 在某些情况下以提高性能. 请参阅 :ref:"
"`doc_batching_diagnostics` 一节来帮助做出选择."

msgid "A trick"
msgstr "诀窍"

msgid ""
"And now, a sleight of hand. Even though the idea of painter's order is that "
"objects are rendered from back to front, consider 3 objects ``A``, ``B`` and "
"``C``, that contain 2 different textures: grass and wood."
msgstr ""
"现在, 来点小技巧. 尽管绘制顺序的概念是物体从后到前渲染, 但考虑三个物体 "
"``A`` , ``B`` 和 ``C`` , 它们包含两种不同的纹理: 草和木头."

msgid "In painter's order they are ordered::"
msgstr "按照绘画者的排列顺序如下： ::"

msgid ""
"Because of the texture changes, they can't be batched and will be rendered "
"in 3 draw calls."
msgstr "由于纹理的变化, 它们不能被批量化, 将在3次绘制调用中呈现."

msgid ""
"However, painter's order is only needed on the assumption that they will be "
"drawn *on top* of each other. If we relax that assumption, i.e. if none of "
"these 3 objects are overlapping, there is *no need* to preserve painter's "
"order. The rendered result will be the same. What if we could take advantage "
"of this?"
msgstr ""
"然而, 绘制的顺序只是在假设它们将被绘制在 *之上* 的前提下才需要. 如果我们放宽"
"这个假设, 即如果这3个对象都不重叠, 就 *不需要* 保留绘制顺序. 渲染的结果将是一"
"样的. 如果能利用这一点呢？"

msgid "Item reordering"
msgstr "项目重新排序"

msgid ""
"It turns out that we can reorder items. However, we can only do this if the "
"items satisfy the conditions of an overlap test, to ensure that the end "
"result will be the same as if they were not reordered. The overlap test is "
"very cheap in performance terms, but not absolutely free, so there is a "
"slight cost to looking ahead to decide whether items can be reordered. The "
"number of items to lookahead for reordering can be set in project settings "
"(see below), in order to balance the costs and benefits in your project."
msgstr ""
"事实证明, 我们可以对项目进行重新排序. 但是, 只有在物品满足重叠测试的条件下才"
"能做到这一点, 以确保最终的结果和没有重新排序一样. 重叠测试在性能上非常廉价, "
"但并不是绝对免费的, 所以, 提前查看项目决定是否可以重新排序是有一点成本的. 为"
"了平衡项目中的成本和收益, 可以在项目设置中设置提前查看重排序的项目数量(见下"
"图)."

msgid ""
"Since the texture only changes once, we can render the above in only 2 draw "
"calls."
msgstr "由于纹理只变化一次, 所以我们只需要2次绘制调用就可以呈现上面的内容."

msgid "Lights"
msgstr "灯光"

msgid ""
"Although the batching system's job is normally quite straightforward, it "
"becomes considerably more complex when 2D lights are used. This is because "
"lights are drawn using additional passes, one for each light affecting the "
"primitive. Consider 2 sprites ``A`` and ``B``, with identical texture and "
"material. Without lights, they would be batched together and drawn in one "
"draw call. But with 3 lights, they would be drawn as follows, each line "
"being a draw call:"
msgstr ""
"虽然批处理系统的工作通常很简单, 但当使用 2D 灯光时, 它就变得复杂很多. 这是因"
"为灯光是通过额外的通道绘制, 每个影响基本单元的灯光都有一个通道. 考虑2个精灵 "
"``A`` 和 ``B`` , 具有相同的纹理和材质. 在没有灯光的情况下, 它们将被分批在一"
"起, 并在一次绘制调用中绘制. 但如果有3个灯光, 它们将按如下方式绘制, 每条线都是"
"一个绘制调用:"

msgid ""
"That is a lot of draw calls: 8 for only 2 sprites. Now, consider we are "
"drawing 1,000 sprites. The number of draw calls quickly becomes astronomical "
"and performance suffers. This is partly why lights have the potential to "
"drastically slow down 2D rendering."
msgstr ""
"那是很多绘制调用. 仅仅是2个精灵就需要8次调用, 考虑到要绘制1000个精灵, 绘制调"
"用的次数很快就会变成天文数字, 性能也会受到影响. 这也是为什么灯光有可能大大降"
"低2D渲染速度的部分原因."

msgid ""
"However, if you remember our magician's trick from item reordering, it turns "
"out we can use the same trick to get around painter's order for lights!"
msgstr ""
"不过, 如果你还记得我们的魔术师在物品重新排序时的技巧, 也可以用同样的技巧来绕"
"过绘制对灯光的排序!"

msgid ""
"If ``A`` and ``B`` are not overlapping, we can render them together in a "
"batch, so the drawing process is as follows:"
msgstr "如果 ``A`` 和 ``B`` 不重合, 可以将它们一起批量渲染, 绘制过程如下:"

msgid ""
"That is only 4 draw calls. Not bad, as that is a 2× reduction. However, "
"consider that in a real game, you might be drawing closer to 1,000 sprites."
msgstr ""
"也就是只有4个绘制调用. 还不错, 因为减少了2倍. 然而, 考虑到在真实的游戏中, 可"
"能会绘制接近1000个精灵."

msgid "**Before:** 1000 × 4 = 4,000 draw calls."
msgstr "之前: 1000 × 4 = 4,000 绘制调用."

msgid "**After:** 1 × 4 = 4 draw calls."
msgstr "之后:1 × 4 = 4 绘制调用."

msgid ""
"That is a 1000× decrease in draw calls, and should give a huge increase in "
"performance."
msgstr "这就减少了1000倍的绘制调用, 应该会给性能带来巨大的提升."

msgid "Overlap test"
msgstr "重叠测试"

msgid ""
"However, as with the item reordering, things are not that simple. We must "
"first perform the overlap test to determine whether we can join these "
"primitives. This overlap test has a small cost. Again, you can choose the "
"number of primitives to lookahead in the overlap test to balance the "
"benefits against the cost. With lights, the benefits usually far outweigh "
"the costs."
msgstr ""
"然而, 与项目重新排序一样, 事情并不那么简单. 必须首先执行重叠测试, 以确定是否"
"可以加入这些基本单元. 这种重叠测试的成本很小. 同样, 您可以在重叠测试中选择要"
"提前查看的基本单元数量, 以平衡收益与成本. 对于灯光, 收益通常远远大于成本."

msgid ""
"Also consider that depending on the arrangement of primitives in the "
"viewport, the overlap test will sometimes fail (because the primitives "
"overlap and therefore shouldn't be joined). In practice, the decrease in "
"draw calls may be less dramatic than in a perfect situation with no "
"overlapping at all. However, performance is usually far higher than without "
"this lighting optimization."
msgstr ""
"此外, 根据视图中基本单元的排列, 重叠测试有时会失败(因为基本单元重叠, 因此不应"
"连接). 在实践中, 绘制调用的减少可能不如在完全没有重叠的完美情况下那么显著. 但"
"是, 性能通常远高于没有这种照明优化的情况."

msgid "Light scissoring"
msgstr "光裁剪"

msgid ""
"Batching can make it more difficult to cull out objects that are not "
"affected or partially affected by a light. This can increase the fill rate "
"requirements quite a bit and slow down rendering. *Fill rate* is the rate at "
"which pixels are colored. It is another potential bottleneck unrelated to "
"draw calls."
msgstr ""
"批处理会使剔除不受光线影响或部分影响的物体变得更加困难. 这可能会增加不少填充"
"率要求, 并减慢渲染速度. *填充率* 是指像素被着色的速度. 这是另一个与绘制调用无"
"关的潜在瓶颈."

msgid ""
"In order to counter this problem (and speed up lighting in general), "
"batching introduces light scissoring. This enables the use of the OpenGL "
"command ``glScissor()``, which identifies an area outside of which the GPU "
"won't render any pixels. We can greatly optimize fill rate by identifying "
"the intersection area between a light and a primitive, and limit rendering "
"the light to *that area only*."
msgstr ""
"为了解决这个问题(并在总体上加快光照速度), 批处理引入了光线裁剪. 使用OpenGL命"
"令 ``glScissor()`` , 它可以识别一个区域, 在这个区域之外,GPU不会渲染任何像素. "
"我们可以通过识别光线和基本单元之间的交叉区域, 并将光线渲染限制在 *该区域* , "
"从而大大优化填充率."

msgid ""
"Light scissoring is controlled with the :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` project setting. This value is between 1.0 and 0.0, "
"with 1.0 being off (no scissoring), and 0.0 being scissoring in every "
"circumstance. The reason for the setting is that there may be some small "
"cost to scissoring on some hardware. That said, scissoring should usually "
"result in performance gains when you're using 2D lighting."
msgstr ""
"光线裁剪是通过 :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` 项目设置来控制的. 这个值在1.0和0.0之间,1.0为关闭(不"
"裁剪),0.0为在任何情况下都裁剪. 设置的原因是, 在某些硬件上进行裁剪操作可能会有"
"一些小成本. 也就是说, 当你在使用2D照明时, 裁剪通常应该会带来性能的提升."

msgid ""
"The relationship between the threshold and whether a scissor operation takes "
"place is not always straightforward. Generally, it represents the pixel area "
"that is potentially \"saved\" by a scissor operation (i.e. the fill rate "
"saved). At 1.0, the entire screen's pixels would need to be saved, which "
"rarely (if ever) happens, so it is switched off. In practice, the useful "
"values are close to 0.0, as only a small percentage of pixels need to be "
"saved for the operation to be useful."
msgstr ""
"阈值与裁剪操作是否发生之间的联系并不总是直接的. 一般来说, 它代表了裁剪操作可"
"能 \"保存\" 的像素区域(即保存的填充率). 在1.0时, 整个屏幕的像素都需要被保存, "
"而这种情况很少发生, 所以它被关闭. 在实践中, 有用的值接近于0.0, 因为只有一小部"
"分像素需要被保存, 操作才是有用的."

msgid ""
"The exact relationship is probably not necessary for users to worry about, "
"but is included in the appendix out of interest: :ref:"
"`doc_batching_light_scissoring_threshold_calculation`"
msgstr ""
"具体关系可能不需要用户操心, 但出于兴趣, 将其列入附录: :ref:"
"`doc_batching_light_scissoring_threshold_calculation`"

msgid "Light scissoring example diagram"
msgstr "光裁剪示意图"

msgid ""
"Bottom right is a light, the red area is the pixels saved by the scissoring "
"operation. Only the intersection needs to be rendered."
msgstr "右下角是一盏灯, 红色区域是裁剪操作保存的像素, 只有交叉点需要渲染."

msgid "Vertex baking"
msgstr "顶点烘焙"

msgid "The GPU shader receives instructions on what to draw in 2 main ways:"
msgstr "GPU着色器主要通过2种方式接收到需要画什么的指令:"

msgid "Shader uniforms (e.g. modulate color, item transform)."
msgstr "着色器uniform(例如, 调整颜色, 项目变换)."

msgid "Vertex attributes (vertex color, local transform)."
msgstr "顶点属性(顶点颜色, 局部变换)."

msgid ""
"However, within a single draw call (batch), we cannot change uniforms. This "
"means that naively, we would not be able to batch together items or commands "
"that change ``final_modulate`` or an item's transform. Unfortunately, that "
"happens in an awful lot of cases. For instance, sprites are typically "
"individual nodes with their own item transform, and they may have their own "
"color modulate as well."
msgstr ""
"然而, 在一个单一的绘制调用(批处理)中, 我们不能改变 uniform。这意味着, 我们不"
"能将改变 ``final_modulate`` 或一个项目变换或命令批处理在一起. 不幸的是, 这在"
"很多情况下都会发生. 例如, 精灵通常是单独的节点, 有自己的项目变换, 它们也可能"
"有自己的颜色调制."

msgid ""
"To get around this problem, the batching can \"bake\" some of the uniforms "
"into the vertex attributes."
msgstr "为了解决这个问题，批处理可以将部分 uniform“烘焙”到顶点属性中。"

msgid ""
"The item transform can be combined with the local transform and sent in a "
"vertex attribute."
msgstr "项目变换可以与局部变换相结合, 并以顶点属性发送."

msgid ""
"The final modulate color can be combined with the vertex colors, and sent in "
"a vertex attribute."
msgstr "最后的调制颜色可以与顶点颜色相结合, 并以顶点属性发送."

msgid ""
"In most cases, this works fine, but this shortcut breaks down if a shader "
"expects these values to be available individually rather than combined. This "
"can happen in custom shaders."
msgstr ""
"在大多数情况下, 这都能正常工作, 但如果着色器希望这些值单独可用, 而不是组合在"
"一起, 这个快捷方式就会失效, 这可能发生在自定义着色器中."

msgid "Custom shaders"
msgstr "自定义着色器"

msgid ""
"As a result of the limitation described above, certain operations in custom "
"shaders will prevent vertex baking and therefore decrease the potential for "
"batching. While we are working to decrease these cases, the following "
"caveats currently apply:"
msgstr ""
"由于上述限制, 自定义着色器中的某些操作将阻止顶点烘烤, 因此减少了批量化的可能"
"性. 虽然我们正在努力减少这些情况, 但目前适用以下注意事项:"

msgid ""
"Reading or writing ``COLOR`` or ``MODULATE`` disables vertex color baking."
msgstr "读取或写入 ``COLOR`` or ``MODULATE`` 禁用顶点颜色烘焙."

msgid "Reading ``VERTEX``  disables vertex position baking."
msgstr "读取 ``VERTEX`` 禁用顶点位置烘焙."

msgid "Project Settings"
msgstr "项目设置"

msgid ""
"To fine-tune batching, a number of project settings are available. You can "
"usually leave these at default during development, but it's a good idea to "
"experiment to ensure you are getting maximum performance. Spending a little "
"time tweaking parameters can often give considerable performance gains for "
"very little effort. See the on-hover tooltips in the Project Settings for "
"more information."
msgstr ""
"为了微调批处理, 有许多项目设置可用. 在开发过程中, 您通常可以将这些设置保持为"
"默认状态, 但最好进行试验, 以确保获得最大的性能. 花一点时间调整参数, 往往可以"
"用很少的精力获得可观的性能提升. 更多信息请参见项目设置中悬停时工具提示."

msgid "rendering/batching/options"
msgstr "rendering/batching/options"

msgid ""
":ref:`use_batching <class_ProjectSettings_property_rendering/batching/"
"options/use_batching>` - Turns batching on or off."
msgstr ""
":ref:`use_batching <class_ProjectSettings_property_rendering/batching/"
"options/use_batching>` - 打开或关闭批处理."

msgid ""
":ref:`use_batching_in_editor <class_ProjectSettings_property_rendering/"
"batching/options/use_batching_in_editor>` Turns batching on or off in the "
"Godot editor. This setting doesn't affect the running project in any way."
msgstr ""
":ref:`use_batching_in_editor <class_ProjectSettings_property_rendering/"
"batching/options/use_batching_in_editor>` 在Godot编辑器中开启或关闭批处理. 这"
"个设置不会以任何方式影响正在运行的项目."

msgid ""
":ref:`single_rect_fallback <class_ProjectSettings_property_rendering/"
"batching/options/single_rect_fallback>` - This is a faster way of drawing "
"unbatchable rectangles. However, it may lead to flicker on some hardware so "
"it's not recommended."
msgstr ""
":ref:`single_rect_fallback <class_ProjectSettings_property_rendering/"
"batching/options/single_rect_fallback>` --这是一种更快的绘制不可批处理矩形的"
"方式. 然而, 它可能会导致某些硬件上的闪烁, 所以不推荐使用."

msgid "rendering/batching/parameters"
msgstr "rendering/batching/parameters"

msgid ""
":ref:`max_join_item_commands <class_ProjectSettings_property_rendering/"
"batching/parameters/max_join_item_commands>` - One of the most important "
"ways of achieving batching is to join suitable adjacent items (nodes) "
"together, however they can only be joined if the commands they contain are "
"compatible. The system must therefore do a lookahead through the commands in "
"an item to determine whether it can be joined. This has a small cost per "
"command, and items with a large number of commands are not worth joining, so "
"the best value may be project dependent."
msgstr ""
":ref:`max_join_item_commands <class_ProjectSettings_property_rendering/"
"batching/parameters/max_join_item_commands>` - 实现批处理的最重要方法之一是将"
"合适的相邻项目(节点)连接在一起, 然而只有当它们所包含的命令兼容时, 才能被连"
"接. 因此, 系统必须对一个项中的命令做提前查看, 以确定它是否可以被加入. 这样做"
"每个命令的成本很小, 而命令数量多的项目不值得加入, 所以最佳价值可能取决于项目."

msgid ""
":ref:`colored_vertex_format_threshold "
"<class_ProjectSettings_property_rendering/batching/parameters/"
"colored_vertex_format_threshold>` - Baking colors into vertices results in a "
"larger vertex format. This is not necessarily worth doing unless there are a "
"lot of color changes going on within a joined item. This parameter "
"represents the proportion of commands containing color changes / the total "
"commands, above which it switches to baked colors."
msgstr ""
":ref:`colored_vertex_format_threshold "
"<class_ProjectSettings_property_rendering/batching/parameters/"
"colored_vertex_format_threshold>` - 将颜色烘焙到顶点中会导致顶点格式更大. 除"
"非在加入的项目中有大量的颜色变化, 否则不一定值得. 这个参数表示包含颜色变化的"
"命令和总命令的比例, 超过这个比例就会切换到烘焙颜色."

msgid ""
":ref:`batch_buffer_size <class_ProjectSettings_property_rendering/batching/"
"parameters/batch_buffer_size>` - This determines the maximum size of a "
"batch, it doesn't have a huge effect on performance but can be worth "
"decreasing for mobile if RAM is at a premium."
msgstr ""
":ref:`batch_buffer_size <class_ProjectSettings_property_rendering/batching/"
"parameters/batch_buffer_size>`--这决定了一个批次的最大大小, 它对性能的影响不"
"大, 但如果内存很重要的话, 那么就值得将其降低."

msgid ""
":ref:`item_reordering_lookahead <class_ProjectSettings_property_rendering/"
"batching/parameters/item_reordering_lookahead>` - Item reordering can help "
"especially with interleaved sprites using different textures. The lookahead "
"for the overlap test has a small cost, so the best value may change per "
"project."
msgstr ""
":ref:`item_reordering_lookahead <class_ProjectSettings_property_rendering/"
"batching/parameters/item_reordering_lookahead>` - 项目重新排序可以帮助, 特别"
"是使用不同纹理的交错精灵. 重叠测试的提前查看的成本很小, 所以每个项目的最佳值"
"可能会改变."

msgid "rendering/batching/lights"
msgstr "rendering/batching/lights"

msgid ""
":ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` - See light scissoring."
msgstr ""
":ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>`- 请参考灯光剪裁."

msgid ""
":ref:`max_join_items <class_ProjectSettings_property_rendering/batching/"
"lights/max_join_items>` - Joining items before lighting can significantly "
"increase performance. This requires an overlap test, which has a small cost, "
"so the costs and benefits may be project dependent, and hence the best value "
"to use here."
msgstr ""
":ref:`max_join_items <class_ProjectSettings_property_rendering/batching/"
"lights/max_join_items>` - 在照明前加入项目可以显著提高性能. 这需要进行重叠测"
"试, 成本较小, 因此成本和收益可能取决于项目, 因此这里使用的代价最高."

msgid "rendering/batching/debug"
msgstr "rendering/batching/debug"

msgid ""
":ref:`flash_batching <class_ProjectSettings_property_rendering/batching/"
"debug/flash_batching>` - This is purely a debugging feature to identify "
"regressions between the batching and legacy renderer. When it is switched "
"on, the batching and legacy renderer are used alternately on each frame. "
"This will decrease performance, and should not be used for your final "
"export, only for testing."
msgstr ""
":ref:`flash_batching <class_ProjectSettings_property_rendering/batching/"
"debug/flash_batching>` - 这纯粹是一个调试功能, 用于识别批处理和遗留渲染器之间"
"的回归. 当它被打开时, 批处理和遗留渲染器会在每一帧中交替使用. 这将会降低性"
"能, 不应该用于最终的输出, 而只是用于测试."

msgid ""
":ref:`diagnose_frame <class_ProjectSettings_property_rendering/batching/"
"debug/diagnose_frame>` - This will periodically print a diagnostic batching "
"log to the Godot IDE / console."
msgstr ""
":ref:`diagnose_frame <class_ProjectSettings_property_rendering/batching/"
"debug/diagnose_frame>` - 这将定期打印诊断批处理日志到Godot IDE/控制台."

msgid "rendering/batching/precision"
msgstr "rendering/batching/precision"

msgid ""
":ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` - On some hardware (notably some Android devices) "
"there have been reports of tilemap tiles drawing slightly outside their UV "
"range, leading to edge artifacts such as lines around tiles. If you see this "
"problem, try enabling uv contract. This makes a small contraction in the UV "
"coordinates to compensate for precision errors on devices."
msgstr ""
":ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` - 在某些硬件上(尤其是某些Android设备), 有报告称图块贴"
"图的绘制略微超出其UV范围, 导致边缘伪影, 如图块周围的线条. 如果你看到这个问"
"题, 请尝试启用uv收缩. 这将使UV坐标小幅收缩, 以补偿设备上的精度误差."

msgid ""
":ref:`uv_contract_amount <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract_amount>` - Hopefully, the default amount should cure "
"artifacts on most devices, but this value remains adjustable just in case."
msgstr ""
":ref:`uv_contract_amount <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract_amount>`--希望默认的数量能够解决大多数设备上的伪装问"
"题, 但这个值仍然可以调整, 以防万一."

msgid "Diagnostics"
msgstr "诊断"

msgid ""
"Although you can change parameters and examine the effect on frame rate, "
"this can feel like working blindly, with no idea of what is going on under "
"the hood. To help with this, batching offers a diagnostic mode, which will "
"periodically print out (to the IDE or console) a list of the batches that "
"are being processed. This can help pinpoint situations where batching isn't "
"occurring as intended, and help you fix these situations to get the best "
"possible performance."
msgstr ""
"虽然你可以改变参数并检查对帧率的影响, 但这可能会让人感觉像盲目地工作, 不知道"
"下面发生了什么. 为了帮助解决这个问题, 批处理提供了一个诊断模式, 它将定期打印"
"出(到IDE或控制台)正在处理的批处理列表. 这可以帮助确定批处理没有按照预期发生的"
"情况, 并帮助你修复这些情况以获得最佳性能."

msgid "Reading a diagnostic"
msgstr "阅读诊断"

msgid "This is a typical diagnostic."
msgstr "这是一个典型的诊断方法."

msgid ""
"**joined_item:** A joined item can contain 1 or more references to items "
"(nodes). Generally, joined_items containing many references is preferable to "
"many joined_items containing a single reference. Whether items can be joined "
"will be determined by their contents and compatibility with the previous "
"item."
msgstr ""
"**joined_item:** 一个joined项可以包含1个或多个项(节点)的引用. 一般来说, 包含"
"多个引用的jianed_items比包含单个引用的许多jianed_items要好. 项目是否能被加"
"入, 将由其内容和与前一个项目的兼容性决定."

msgid ""
"**batch R:** A batch containing rectangles. The second number is the number "
"of rects. The second number in square brackets is the Godot texture ID, and "
"the numbers in curly braces is the color. If the batch contains more than "
"one rect, ``MULTI`` is added to the line to make it easy to identify. Seeing "
"``MULTI`` is good as it indicates successful batching."
msgstr ""
"**batch R:** 一个包含矩形的批次. 第二个数字是矩形的数量. 方括号内的第二个数字"
"是Godot纹理ID, 大括号内的数字是颜色. 如果批次中包含多个矩形, 则会在行中添加 "
"``MULTI``, 以便于识别. 看到 ``MULTI`` 是好的, 因为它表示批处理成功."

msgid ""
"**batch D:** A default batch, containing everything else that is not "
"currently batched."
msgstr "**batch D:** 一个默认的批次, 包含其他一切当前没有批次的东西."

msgid "Default batches"
msgstr "默认批次"

msgid ""
"The second number following default batches is the number of commands in the "
"batch, and it is followed by a brief summary of the contents::"
msgstr "默认批次后面的第二个数字是该批次中的命令数，后面是内容的简单摘要： ::"

msgid ""
"You may see \"dummy\" default batches containing no commands; you can ignore "
"those."
msgstr "您可能会看到包含无命令的 \"虚拟\" 默认批次, 您可以忽略这些."

msgid "Frequently asked questions"
msgstr "常见问题"

msgid "I don't get a large performance increase when enabling batching."
msgstr "当启用批量处理时, 性能并没有大幅提升."

msgid ""
"Try the diagnostics, see how much batching is occurring, and whether it can "
"be improved"
msgstr "试着诊断一下, 看看发生了多少批处理的情况, 是否可以改进"

msgid "Try changing batching parameters in the Project Settings."
msgstr "尝试改变项目设置中的批处理参数."

msgid "Consider that batching may not be your bottleneck (see bottlenecks)."
msgstr "考虑到批处理可能不是你的瓶颈(见瓶颈)."

msgid "I get a decrease in performance with batching."
msgstr "使用批处理会降低性能."

msgid ""
"Try the steps described above to increase the number of batching "
"opportunities."
msgstr "尝试上述步骤来增加批处理的机会."

msgid ""
"Try enabling :ref:`single_rect_fallback "
"<class_ProjectSettings_property_rendering/batching/options/"
"single_rect_fallback>`."
msgstr ""
"尝试启用 :ref:`single_rect_fallback "
"<class_ProjectSettings_property_rendering/batching/options/"
"single_rect_fallback>`."

msgid ""
"The single rect fallback method is the default used without batching, and it "
"is approximately twice as fast. However, it can result in flickering on some "
"hardware, so its use is discouraged."
msgstr ""
"单一矩形回退法是在不进行批处理的情况下使用的默认方法, 它的速度大约是原来的两"
"倍. 然而, 它可能会导致某些硬件上的闪烁, 因此不鼓励使用它."

msgid ""
"After trying the above, if your scene is still performing worse, consider "
"turning off batching."
msgstr "在尝试了上面的方法后, 如果你的场景表现仍然较差, 可以考虑关闭批处理."

msgid "I use custom shaders and the items are not batching."
msgstr "我使用了自定义着色器, 但项目没有批量化."

msgid ""
"Custom shaders can be problematic for batching, see the custom shaders "
"section"
msgstr "自定义着色器在批处理时可能会出现问题, 请参阅自定义着色器部分"

msgid "I am seeing line artifacts appear on certain hardware."
msgstr "我看到线程出现在某些计算机硬件上."

msgid ""
"See the :ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` project setting which can be used to solve this "
"problem."
msgstr ""
"参见 :ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` 项目设置, 它可以用来解决这个问题."

msgid "I use a large number of textures, so few items are being batched."
msgstr "我使用了大量的纹理, 所以很少有项目被批量化."

msgid ""
"Consider using texture atlases. As well as allowing batching, these reduce "
"the need for state changes associated with changing textures."
msgstr ""
"考虑使用纹理图集. 除了允许批处理外, 这些图集还减少了与改变纹理相关的状态变化"
"的需求."

msgid "Appendix"
msgstr "附录"

msgid "Batched primitives"
msgstr "批量处理图元"

msgid ""
"Not all primitives can be batched. Batching is not guaranteed either, "
"especially with primitives using an antialiased border. The following "
"primitive types are currently available:"
msgstr ""
"并不是所有图元都支持做批量处理。系统也无法保证一定会进行批量处理，图元使用抗"
"锯齿边缘时尤其无法保证。可以使用以下类型的图元："

msgid "RECT"
msgstr "RECT"

msgid "NINEPATCH (depending on wrapping mode)"
msgstr "NINEPATCH（由 wrapping mode 环绕模式决定）"

msgid "POLY"
msgstr "POLY"

msgid "LINE"
msgstr "LINE"

msgid ""
"With non-batched primitives, you may be able to get better performance by "
"drawing them manually with polys in a ``_draw()`` function. See :ref:"
"`doc_custom_drawing_in_2d` for more information."
msgstr ""
"如果图元未做批量处理，你可能可以通过在 ``_draw()`` 函数中手动绘制多边形来获得"
"性能提升。更多信息见 :ref:`doc_custom_drawing_in_2d` 。"

msgid "Light scissoring threshold calculation"
msgstr "光线裁剪阈值计算"

msgid ""
"The actual proportion of screen pixel area used as the threshold is the :ref:"
"`scissor_area_threshold <class_ProjectSettings_property_rendering/batching/"
"lights/scissor_area_threshold>` value to the power of 4."
msgstr ""
"实际用作阈值的屏幕像素面积比例是 :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` 值的4次方."

msgid "For example, on a screen size of 1920×1080, there are 2,073,600 pixels."
msgstr "例如, 在1920×1080的屏幕尺寸上, 有2,073,600个像素."

msgid "At a threshold of 1,000 pixels, the proportion would be::"
msgstr "在 1000 像素的阈值下，该比例将是： ::"

msgid ""
"So a :ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` of ``0.15`` would be a reasonable "
"value to try."
msgstr ""
"所以 :ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` ``0.15`` 是一个合理的尝试值."

msgid ""
"Going the other way, for instance with a :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` of ``0.5``::"
msgstr ""
"另辟蹊径，比如用 :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` 为 ``0.5``\\ ： ::"

msgid ""
"If the number of pixels saved is greater than this threshold, the scissor is "
"activated."
msgstr "如果保存的像素数大于该阈值, 则剪刀被激活."

msgid "Translation status"
msgstr "翻译状态"
