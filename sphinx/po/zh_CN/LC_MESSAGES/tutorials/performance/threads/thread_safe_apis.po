# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Thread-safe APIs"
msgstr "线程安全的 API"

msgid "Threads"
msgstr "线程"

msgid ""
"Threads are used to balance processing power across CPUs and cores. Godot "
"supports multithreading, but not in the whole engine."
msgstr ""
"线程是用来平衡各CPU和核心的处理能力.Godot支持多线程, 但不是在整个引擎中."

msgid ""
"Below is a list of ways multithreading can be used in different areas of "
"Godot."
msgstr "下面是可以在Godot的不同区域使用多线程的方法列表."

msgid "Global scope"
msgstr "全局作用域"

msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread-safe. "
"Accessing servers from threads is supported (for VisualServer and Physics "
"servers, ensure threaded or thread-safe operation is enabled in the project "
"settings!)."
msgstr ""
":ref:`Global Scope<class_@GlobalScope>` 单例都是线程安全的. 支持从线程访问服"
"务器(对于VisualServer和物理服务器, 确保在项目设置中启用线程或线程安全操作！)."

msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""
"这使它们成为在服务器中创建数十万个实例并从线程控制它们的代码的理想选择. 当"
"然, 还需要更多的代码, 因为这是直接使用的而不是嵌入场景树中使用."

msgid "Scene tree"
msgstr "场景树"

msgid ""
"Interacting with the active scene tree is **NOT** thread-safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""
"与活动场景树的交互是线程 **不** 安全的. 当在线程之间发送数据时, 请确保使用"
"mutexes. 如果你想从一个线程调用函数, 可以使用 *call_deferred* 函数:"

msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""
"但是, 可以在激活的场景树外创建场景块(以树形式排列的节点). 这样, 可以在线程中"
"构建或实例化部分场景, 然后将其添加到主线程中:"

msgid ""
"Still, this is only really useful if you have **one** thread loading data. "
"Attempting to load or create scene chunks from multiple threads may work, "
"but you risk resources (which are only loaded once in Godot) tweaked by the "
"multiple threads, resulting in unexpected behaviors or crashes."
msgstr ""
"不过, 只有当您有 **一个** 线程加载数据时, 这才真正有用. 从多个线程加载或创建"
"场景块可能有效, 但你要冒着资源被多线程调整的风险(在Godot中只加载一次), 从而导"
"致意外行为或崩溃."

msgid ""
"Only use more than one thread to generate scene data if you *really* know "
"what you are doing and you are sure that a single resource is not being used "
"or set in multiple ones. Otherwise, you are safer just using the servers API "
"(which is fully thread-safe) directly and not touching scene or resources."
msgstr ""
"只有当您 \"真正\" 知道自己在做什么, 并且确信一个资源没有被多个资源使用或设置"
"时, 才可以使用多个线程来生成场景数据. 否则, 直接使用服务端的API(它是完全线程"
"安全的)而不接触场景或资源会更安全."

msgid "Rendering"
msgstr "渲染"

msgid ""
"Instancing nodes that render anything in 2D or 3D (such as Sprite) is *not* "
"thread-safe by default. To make rendering thread-safe, set the **Rendering > "
"Threads > Thread Model** project setting to **Multi-Threaded**."
msgstr ""
"默认情况下，实例化能够渲染 2D 或 3D 内容的节点（比如 Sprite）是线程\\ *不*\\ "
"安全的。要让渲染做到线程安全，请将项目设置中的 **Rendering > Threads > "
"Thread Model** 设为 **Multi-Threaded**\\ 。"

msgid ""
"Note that the Multi-Threaded thread model has several known bugs, so it may "
"not be usable in all scenarios."
msgstr ""
"请注意，Multi-Thtreaded 线程模型有若干已知的问题，所以无法胜任所有场景。"

msgid "GDScript arrays, dictionaries"
msgstr "GDScript 数组、字典"

msgid ""
"In GDScript, reading and writing elements from multiple threads is OK, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""
"在 GDScript 中，可以从多个线程读取和写入元素，但是任何改变容器大小的操作（调"
"整大小、添加或删除元素）都需要锁定互斥锁。"

msgid "Resources"
msgstr "资源"

msgid ""
"Modifying a unique resource from multiple threads is not supported. However "
"handling references on multiple threads is supported, hence loading "
"resources on a thread is as well - scenes, textures, meshes, etc - can be "
"loaded and manipulated on a thread and then added to the active scene on the "
"main thread. The limitation here is as described above, one must be careful "
"not to load the same resource from multiple threads at once, therefore it is "
"easiest to use **one** thread for loading and modifying resources, and then "
"the main thread for adding them."
msgstr ""
"不支持从多个线程修改一个唯一的资源. 但是支持处理多个线程上的引用, 因此在一个"
"线程上加载资源也是如此, 场景, 纹理, 网格等都可以在一个线程上加载和操作, 然后"
"添加到主线程的活动场景中. 这里的限制如上所述, 必须注意不要同时从多个线程上加"
"载相同的资源, 因此最简单的方法是用 **一个** 线程来加载和修改资源, 然后用主线"
"程来添加资源."

msgid "Translation status"
msgstr "翻译状态"
