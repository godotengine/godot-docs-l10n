# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using Servers"
msgstr "利用服务器进行优化"

msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""
"像 Godot 这样的引擎，由于其更高层次的构建和功能，提供了更多的易用性。它们中的"
"大多数都是通过\\ :ref:`场景系统 <doc_scene_tree>`\\ 来访问和使用的。使用节点"
"和资源可以简化复杂游戏中的项目组织和资产管理。"

msgid "There are, of course, always drawbacks:"
msgstr "当然, 总是有缺点的:"

msgid "There is an extra layer of complexity"
msgstr "那有一个额外复杂层"

msgid "Performance is lower than using simple APIs directly"
msgstr "性能比直接使用简单API要低"

msgid "It is not possible to use multiple threads to control them"
msgstr "无法使用多个线程来控制它们"

msgid "More memory is needed."
msgstr "需要更多的内存."

msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""
"在很多情况下, 这并不是一个真正的问题(Godot是非常优化的, 大多数操作都是用信号"
"处理的, 所以不需要轮询). 不过, 有时候还是会有这样的情况. 例如, 对于每一帧都需"
"要处理的东西来说, 处理数以万计的实例可能是一个瓶颈."

msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""
"这种情况会让程序员后悔自己使用的是游戏引擎, 希望能回到更加手动, 更加低层的游"
"戏代码实现中去."

msgid "Still, Godot is designed to work around this problem."
msgstr "当然,Godot的设计工作中还是可以解决这个问题."

msgid "Servers"
msgstr "服务器"

msgid ""
"One of the most interesting design decisions for Godot is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""
"Godot 有许多非常有趣的设计决定，其中之一就是整个场景系统都是\\ *可选的*\\ 。"
"虽然目前还不能在编译时去除，但你完全可以绕过它。"

msgid ""
"At the core, Godot uses the concept of Servers. They are very low-level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""
"Godot 在核心中使用了“服务器”的概念。它们是非常底层的 API，用来控制渲染、物"
"理、声音等。场景系统建立在它们之上，直接使用它们。最常见的服务器有："

msgid ""
":ref:`VisualServer <class_VisualServer>`: handles everything related to "
"graphics."
msgstr ":ref:`VisualServer <class_VisualServer>`: 处理与图形相关的一切."

msgid ""
":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D "
"physics."
msgstr ":ref:`PhysicsServer <class_PhysicsServer>`: 处理一切相关的3d物体."

msgid ""
":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related "
"to 2D physics."
msgstr ":ref:`Physics2DServer <class_Physics2DServer>`: 处理一切相关的2D物理."

msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ":ref:`AudioServer <class_AudioServer>`: 处理与音频相关的一切."

msgid ""
"Explore their APIs and you will realize that all the functions provided are "
"low-level implementations of everything Godot allows you to do."
msgstr ""
"你只需研究它们的 API 就会意识到，它们所提供的函数全部都是 Godot 允许你所进行"
"的操作的底层实现。"

msgid "RIDs"
msgstr "RID"

msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""
"使用服务器的关键是理解资源 ID（Resource ID，即 :ref:`RID <class_RID>`\\ ）对"
"象。这些对象是服务器实现的非公开的句柄。它们是手动分配和释放的。几乎服务器中"
"的每个功能都需要 RID 来访问实际的资源。"

msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID. Not all resources contain an RID, though: in such cases, "
"the RID will be empty. The resource can then be passed to server APIs as an "
"RID."
msgstr ""
"大多数 Godot 节点和资源都包含这些来自服务内部的 RID，它们可以通过不同的函数获"
"得。事实上，任何继承 :ref:`Resource <class_Resource>` 的东西都可以直接转换成 "
"RID。不过并不是所有资源都包含 RID：在这种情况下，RID 为空。可以用 RID 的形式"
"将资源传递给服务器 API。"

msgid ""
"Resources are reference-counted (see :ref:`Reference <class_Reference>`), "
"and references to a resource's RID are *not* counted when determining "
"whether the resource is still in use. Make sure to keep a reference to the "
"resource outside the server, or else both it and its RID will be erased."
msgstr ""
"资源进行了引用计数（请参阅 :ref:`Reference <class_Reference>`\\ ），但在确定"
"是否仍在使用某个资源时，对资源 RID 的引用\\ **没有**\\ 进行计数。请在服务器外"
"保留资源的引用，并在清除资源时清除其 RID。"

msgid "For nodes, there are many functions available:"
msgstr "对于节点来说, 有很多函数功能可以使用:"

msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""
"对于 CanvasItem，\\ :ref:`CanvasItem."
"get_canvas_item()<class_CanvasItem_method_get_canvas_item>` 方法将在服务器中"
"返回该画布项目的 RID。"

msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""
"对于CanvasLayer来说, :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` 方法将返回服务器中的canvas RID."

msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""
"对于视口, :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` 方法将返回服务器中的视口RID."

msgid ""
"For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) "
"contains functions to get the *VisualServer Scenario*, and the "
"*PhysicsServer Space*. This allows creating 3D objects directly with the "
"server API and using them."
msgstr ""
"对于3D, :ref:`World <class_World>` 资源(可在 :ref:`Viewport "
"<class_Viewport>` 和 :ref:`Spatial <class_Spatial>` 节点中获得)包含获取 "
"*VisualServer Scenario* 和 *PhysicsServer Space* 的函数. 这样就可以直接用服务"
"API创建3D对象并使用它们."

msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *VisualServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""
"对于2D, :ref:`World2D <class_World2D>` 资源(可在 :ref:`Viewport "
"<class_Viewport>` 和 :ref:`CanvasItem <class_CanvasItem>` 节点中获取)包含获"
"取 *VisualServer Canvas* 和 *Physics2DServer Space* 的函数. 这样就可以直接用"
"服务API创建2D对象并使用它们."

msgid ""
"The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the "
"scenario *instance* and *instance base* via the :ref:`VisualInstance."
"get_instance() <class_VisualInstance_method_get_instance>` and :ref:"
"`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"respectively."
msgstr ""
":ref:`VisualInstance<class_VisualInstance>` 类, 可以分别通过 :ref:"
"`VisualInstance.get_instance() <class_VisualInstance_method_get_instance>` "
"和 :ref:`VisualInstance.get_base() <class_VisualInstance_method_get_base>` 来"
"获取场景 *instance* 和 *instance base* ."

msgid ""
"Try exploring the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr "请尝试探索你所熟悉的节点和资源，找到获得服务器 *RID* 的功能。"

msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""
"不建议从已经有节点关联的对象中控制RID. 相反, 服务函数应始终用于创建和控制新的"
"以及与现有的交互."

msgid "Creating a sprite"
msgstr "创建精灵"

msgid ""
"This is a simple example of how to create a sprite from code and move it "
"using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""
"这是一个简单的例子, 说明如何从代码中创建一个精灵, 并使用低级的 :ref:"
"`CanvasItem <class_CanvasItem>` API移动它."

msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""
"服务器中的 Canvas Item API 允许您向其添加绘制图元。一旦添加，它们就不能被修"
"改。需要清除 Item，并重新添加图元（设置变换时则不然，变换可根据需要多次进"
"行）。"

msgid "Primitives are cleared this way:"
msgstr "图元的清除方式为："

msgid "Instantiating a Mesh into 3D space"
msgstr "将网格实例化到 3D 空间"

msgid ""
"The 3D APIs are different from the 2D ones, so the instantiation API must be "
"used."
msgstr "3D API 与 2D API 不同，所以必须使用实例化 API。"

msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr "创建 2D 刚体并使用它移动精灵"

msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""
"这将使用 :ref:`Physics2DServer <class_Physics2DServer>` API创建一个 :ref:"
"`RigidBody2D <class_RigidBody2D>`, 并在物体移动时移动一个 :ref:`CanvasItem "
"<class_CanvasItem>`."

msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer "
"<class_PhysicsServer>` respectively)."
msgstr ""
"3D版本应该非常相似, 因为2D和3D物理服务器是相同的(分别使用 :ref:`RigidBody "
"<class_RigidBody>` 和 :ref:`PhysicsServer <class_PhysicsServer>` )."

msgid "Getting data from the servers"
msgstr "从服务器获取数据"

msgid ""
"Try to **never** request any information from ``VisualServer``, "
"``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""
"除非你知道自己在做什么，否则尽量\\ **不要**\\ 通过调用函数向 "
"``VisualServer``\\ 、\\ ``PhysicsServer``\\ 、\\ ``Physics2DServer`` 请求任何"
"信息。这些服务器通常会为了性能而异步运行, 调用任何返回值的函数都会使它们停"
"滞, 并迫使它们处理任何待处理的东西, 直到函数被实际调用. 如果你每一帧都调用它"
"们, 这将严重降低性能(而且原因不会很明显)."

msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""
"正因为如此, 这类服务器中的大部分API都被设计成连信息都无法请求回来, 直到这是可"
"以保存的实际数据."

msgid "Translation status"
msgstr "翻译状态"
