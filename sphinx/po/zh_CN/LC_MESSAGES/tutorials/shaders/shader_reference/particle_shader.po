# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Particle shaders"
msgstr "粒子着色器"

msgid ""
"Particle shaders are a special type of vertex shader that runs before the "
"object is drawn. They are used for calculating material properties such as "
"color, position, and rotation. They are drawn with any regular material for "
"CanvasItem or Spatial, depending on whether they are 2D or 3D."
msgstr ""
"粒子着色器是一种特殊类型的顶点着色器, 在物体被绘制之前运行. 它们用于计算材质"
"属性, 如颜色, 位置和旋转. 它们与CanvasItem或Spatial的任何常规材质一起绘制, 这"
"取决于它们是2D还是3D."

msgid ""
"Particle shaders are unique because they are not used to draw the object "
"itself; they are used to calculate particle properties, which are then used "
"by the CanvasItem of Spatial shader. They contain only a vertex processor "
"function that outputs multiple properties (see built-ins below)."
msgstr ""
"粒子着色器是独特的, 因为它们不用于绘制对象本身；被用来计算粒子的性质, 然后由"
"空间着色器的画布组件使用. 它们只包含一个顶点处理器函数, 输出多个属性的内置函"
"数(见下文)."

msgid ""
"Particle shaders use a transform feedback shader, which is a special type of "
"vertex shader that runs on its own. It takes in data in a buffer like a "
"regular vertex shader does, but it also outputs to data buffers instead of "
"outputting to the fragment shader for pixel-processing. Because of this, "
"transform feedback shaders can build on themselves each run, unlike other "
"shaders that discard the data they have calculated once they draw to the "
"frame buffer."
msgstr ""
"粒子着色器使用转换反馈着色器, 这是一种单独运行的特殊类型的顶点着色器. 它像普"
"通顶点着色器那样在缓冲区中接受数据, 但是也输出到数据缓冲区, 而不是输出到片段"
"着色器进行像素处理. 正因为如此, 转换反馈着色器可以在每次运行时自行构建, 与其"
"他着色器不同, 其他着色器一旦绘制到帧缓冲区, 就会丢弃它们计算的数据."

msgid ""
"Particle shaders are only available in the GLES3 backend. If you need "
"particles in GLES2, use :ref:`CPUParticles <class_CPUParticles>`."
msgstr ""
"粒子着色器仅在 GLES3 后端中可用。如果您需要在 GLES2 中使用粒子系统，请使用 :"
"ref:`CPUParticles <class_CPUParticles>`\\ 。"

msgid "Render modes"
msgstr "渲染模式"

msgid "Render mode"
msgstr "渲染模式"

msgid "Description"
msgstr "描述"

msgid "**keep_data**"
msgstr "**keep_data**"

msgid "Do not clear previous data on restart."
msgstr "不要在重启时清除以前的数据."

msgid "**disable_force**"
msgstr "**disable_force**"

msgid "Disable attractor force. (Not currently implemented in 3.1)"
msgstr "禁用吸引力。（目前在 3.1 版本中未实现）"

msgid "**disable_velocity**"
msgstr "**disable_velocity**"

msgid "Ignore **VELOCITY** value."
msgstr "忽略 **VELOCITY** 值."

msgid "Built-ins"
msgstr "内置"

msgid ""
"Values marked as \"in\" are read-only. Values marked as \"out\" are for "
"optional writing and will not necessarily contain sensible values. Values "
"marked as \"inout\" provide a sensible default value, and can optionally be "
"written to. Samplers are not subjects of writing and they are not marked."
msgstr ""
"标记为 \"in\" 的值是只读的. 标记为 \"out\" 的值是可以选择写入的, 不一定包含合"
"理的值. 标记为 \"inout\" 的值提供一个合理的默认值, 并且可以选择写入. 采样器不"
"是写入的对象, 它们没有被标记."

msgid "Global built-ins"
msgstr "全局内置"

msgid "Global built-ins are available everywhere, including custom functions."
msgstr "全局内置的功能随处可见, 包括自定义功能."

msgid "Built-in"
msgstr "内置"

msgid "in float **TIME**"
msgstr "in float **TIME**"

msgid "Global time, in seconds."
msgstr "全球时间, 以秒为单位."

msgid "Vertex built-ins"
msgstr "顶点内置"

msgid ""
"In order to use the ``COLOR`` variable in a SpatialMaterial, set "
"``use_vertex_as_albedo`` to ``true``. In a ShaderMaterial, access it with "
"the ``COLOR`` variable."
msgstr ""
"为了在SpatialMaterial中使用 ``COLOR`` 变量, 将 ``use_vertex_as_albedo`` 设置"
"为 ``true`` . 在ShaderMaterial中, 用 ``COLOR`` 变量访问它."

msgid "inout vec4 **COLOR**"
msgstr "inout vec4 **COLOR**"

msgid ""
"Particle color, can be written to and accessed in mesh's vertex function."
msgstr "粒子的颜色, 可以写入Mesh的顶点函数中, 也可以访问."

msgid "inout vec3 **VELOCITY**"
msgstr "inout vec3 **VELOCITY**"

msgid "Particle velocity, can be modified."
msgstr "粒子速度, 可以修改."

msgid "out float **MASS**"
msgstr "out float **MASS**"

msgid "Particle mass, use for attractors (not implemented in 3.1)."
msgstr "粒子质量, 用于吸引器(在3.1中没有实现)."

msgid "inout bool **ACTIVE**"
msgstr "inout bool **ACTIVE**"

msgid "``true`` when Particle is active, can be set to ``false``."
msgstr "当粒子被激活时为 ``true`` , 可以设置为 ``false`` ."

msgid "in bool **RESTART**"
msgstr "in bool **RESTART**"

msgid "``true`` when particle must restart (lifetime cycled)."
msgstr "``true`` 当粒子必须重新启动时(生命周期循环)."

msgid "inout vec4 **CUSTOM**"
msgstr "inout vec4 **CUSTOM**"

msgid ""
"Custom particle data. Accessible from shader of mesh as **INSTANCE_CUSTOM**."
msgstr "自定义粒子数据。网格的着色器可以使用 **INSTANCE_CUSTOM** 访问。"

msgid "inout mat4 **TRANSFORM**"
msgstr "inout mat4 **TRANSFORM**"

msgid "Particle transform."
msgstr "粒子变换。"

msgid "in float **LIFETIME**"
msgstr "in float **LIFETIME**"

msgid "Particle lifetime."
msgstr "粒子寿命。"

msgid "in float **DELTA**"
msgstr "in float **DELTA**"

msgid "Delta process time."
msgstr "处理时间差。"

msgid "in uint **NUMBER**"
msgstr "in uint **NUMBER**"

msgid "Unique number since emission start."
msgstr "发射开始后的唯一编号。"

msgid "in int **INDEX**"
msgstr "in int **INDEX**"

msgid "Particle index (from total particles)."
msgstr "粒子索引（在所有粒子范围内）。"

msgid "in mat4 **EMISSION_TRANSFORM**"
msgstr "in mat4 **EMISSION_TRANSFORM**"

msgid "Emitter transform (used for non-local systems)."
msgstr "发射器变换（用于非本地坐标系）。"

msgid "in uint **RANDOM_SEED**"
msgstr "in uint **RANDOM_SEED**"

msgid "Random seed used as base for random."
msgstr "随机种子，是随机的基础。"

msgid "Translation status"
msgstr "翻译状态"
