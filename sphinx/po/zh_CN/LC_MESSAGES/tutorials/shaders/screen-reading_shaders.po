# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Screen-reading shaders"
msgstr "屏幕阅读着色器"

msgid "Introduction"
msgstr "前言"

msgid ""
"It is often desired to make a shader that reads from the same screen to "
"which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""
"很多人想要让着色器在写屏幕的同时读取该屏幕的数据。因为内部硬件限制，OpenGL "
"和 DirectX 等 3D API 都很难实现这一功能。GPU 是极其并行的，所以同时进行读写会"
"导致各种缓存和一致性问题。因此，即便是最新的硬件也对此进行无法正确的支持。"

msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy."
msgstr ""
"解决办法是将屏幕或屏幕的一部分复制到一个后台缓冲区，然后在绘图时从那里读取。"
"Godot 提供了一些工具，可以使这一过程变得很容易。"

msgid "SCREEN_TEXTURE built-in texture"
msgstr "SCREEN_TEXTURE 内置纹理"

msgid ""
"Godot :ref:`doc_shading_language` has a special texture, ``SCREEN_TEXTURE`` "
"(and ``DEPTH_TEXTURE`` for depth, in the case of 3D). It takes as argument "
"the UV of the screen and returns a vec3 RGB with the color. A special built-"
"in varying: SCREEN_UV can be used to obtain the UV for the current fragment. "
"As a result, this simple canvas_item fragment shader:"
msgstr ""
"Godot :ref:`doc_shading_language` 有一个特殊的纹理, ``SCREEN_TEXTURE`` (在3D"
"的情况下, ``DEPTH_TEXTURE`` 代表深度). 它以屏幕的UV作为参数, 并返回一个带有颜"
"色的RGB vec3. 一个特殊的内置变量.SCREEN_UV可以用来获取当前片段的UV. 因此, 这"
"是个简单的canvas_item片段着色器:"

msgid "results in an invisible object, because it just shows what lies behind."
msgstr "导致一个不可见的对象, 因为它只是显示了背后的东西."

msgid ""
"The reason why textureLod must be used is because, when Godot copies back a "
"chunk of the screen, it also does an efficient separatable gaussian blur to "
"its mipmaps."
msgstr ""
"之所以必须使用textureLod是因为, 当Godot复制一大块屏幕时, 它还会对其mipmap执行"
"有效的可分离高斯模糊."

msgid ""
"This allows for not only reading from the screen, but reading from it with "
"different amounts of blur at no cost."
msgstr "这不仅允许从屏幕上读取, 而且可以免费读取具有不同模糊量的屏幕."

msgid ""
"Mipmaps are not generated in GLES2 due to poor performance and compatibility "
"with older devices."
msgstr "由于性能较差, 且与旧设备不兼容, 所以在GLES2中不会生成Mipmaps."

msgid "SCREEN_TEXTURE example"
msgstr "SCREEN_TEXTURE 示例"

msgid ""
"``SCREEN_TEXTURE`` can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""
"``SCREEN_TEXTURE`` 可以用来做很多事情. 有一个专门的 *Screen Space Shaders* 的"
"演示, 你可以下载来看看和学习. 其中一个例子是一个简单的着色器, 用来调整亮度, "
"对比度和饱和度:"

msgid "Behind the scenes"
msgstr "在幕后"

msgid ""
"While this seems magical, it's not. In 2D, the ``SCREEN_TEXTURE`` built-in, "
"when first found in a node that is about to be drawn, does a full-screen "
"copy to a back-buffer. Subsequent nodes that use it in shaders will not have "
"the screen copied for them, because this ends up being inefficient. In 3D, "
"the screen is copied after the opaque geometry pass, but before the "
"transparent geometry pass, so transparent objects will not be captured in "
"the ``SCREEN_TEXTURE``."
msgstr ""
"虽然这看起来很神奇，但其实不然。在 2D 中，第一次在即将绘制的节点中发现内置的 "
"``SCREEN_TEXTURE`` 时，它就会将整个屏幕拷贝到后台缓冲之中。后续在着色器中使用"
"它的节点将不会造成屏幕的复制，因为这终将是低效的。在 3D 中，屏幕是在不透明的"
"几何通道之后，而在透明的几何通道之前被复制，所以透明的物体不会被捕捉到 "
"``SCREEN_TEXTURE``\\ 。"

msgid ""
"As a result, in 2D, if shaders that use ``SCREEN_TEXTURE`` overlap, the "
"second one will not use the result of the first one, resulting in unexpected "
"visuals:"
msgstr ""
"因此, 在2D中, 如果使用 ``SCREEN_TEXTURE`` 的着色器重叠, 第二个着色器将不会使"
"用第一个着色器的结果, 从而导致意外的视觉效果:"

msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for ``SCREEN_TEXTURE`` as the first one below, so the first one "
"\"disappears\", or is not visible."
msgstr ""
"在上图中, 第二个球体(右上方)使用的 ``SCREEN_TEXTURE`` 来源与下面第一个球体相"
"同, 所以第一个球体 \"disappears\" , 或者说不可见."

msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""
"在2D中, 这可以通过 :ref:`BackBufferCopy <class_BackBufferCopy>` 节点来纠正, "
"它可以在两个球体之间实例化.BackBufferCopy可以通过指定一个屏幕区域或整个屏幕来"
"工作:"

msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr "通过正确的后台缓冲区复制，这两个球体将正确混合："

msgid ""
"In 3D, there is less flexibility to solve this particular issue because the "
"``SCREEN_TEXTURE`` is only captured once. Be careful when using "
"``SCREEN_TEXTURE`` in 3D as it won't capture transparent objects and may "
"capture some opaque objects that are in front of the object."
msgstr ""
"在3D中, 由于 ``SCREEN_TEXTURE`` 只捕获一次, 所以解决这个特殊问题的灵活性较"
"小. 在3D中使用 ``SCREEN_TEXTURE`` 时要小心, 因为它不会捕获透明的物体, 可能会"
"捕获一些在物体前面的不透明物体."

msgid ""
"You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport "
"<class_Viewport>` with a camera in the same position as your object, and "
"then use the :ref:`Viewport's <class_Viewport>` texture instead of "
"``SCREEN_TEXTURE``."
msgstr ""
"在 3D 中，你可以这样重现后台缓冲逻辑：创建一个 :ref:`Viewport "
"<class_Viewport>` 并在你的对象所在位置放置摄像机，然后使用 :ref:`Viewport "
"<class_Viewport>` 的纹理代替 ``SCREEN_TEXTURE``\\ 。"

msgid "Back-buffer logic"
msgstr "后台缓冲逻辑"

msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr "所以, 为了更清楚, 这里是backbuffer复制逻辑在Godot中的工作原理:"

msgid ""
"If a node uses the ``SCREEN_TEXTURE``, the entire screen is copied to the "
"back buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""
"如果一个节点使用了 ``SCREEN_TEXTURE`` , 在绘制该节点之前, 整个屏幕会被复制到"
"后面的缓冲区. 这只发生在第一次；随后的节点不会触发这个."

msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if ``SCREEN_TEXTURE`` was not used), the behavior described in "
"the point above does not happen. In other words, automatic copying of the "
"entire screen only happens if ``SCREEN_TEXTURE`` is used in a node for the "
"first time and no BackBufferCopy node (not disabled) was found before in "
"tree-order."
msgstr ""
"如果一个BackBufferCopy节点在上面一点的情况之前被处理(即使 ``SCREEN_TEXTURE`` "
"没有被使用), 上面一点描述的行为就不会发生. 换句话说, 只有当 "
"``SCREEN_TEXTURE`` 第一次在节点中使用, 并且在树形顺序中之前没有发现"
"BackBufferCopy节点时(未禁用), 自动复制整个屏幕才会发生."

msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then use ``SCREEN_TEXTURE`` on a "
"different region. Avoid this behavior!"
msgstr ""
"BackBufferCopy可以复制整个屏幕或一个区域. 如果只设置为一个区域(而不是整个屏"
"幕), 而你的着色器使用了不在复制区域内的像素, 那么该读取的结果是未定义的(很可"
"能是以前帧的垃圾). 换句话说, 有可能使用BackBufferCopy复制回屏幕的一个区域, 然"
"后在不同的区域使用 ``SCREEN_TEXTURE`` . 避免这种行为!"

msgid "DEPTH_TEXTURE"
msgstr "DEPTH_TEXTURE"

msgid ""
"For 3D shaders, it's also possible to access the screen depth buffer. For "
"this, the ``DEPTH_TEXTURE`` built-in is used. This texture is not linear; it "
"must be converted via the inverse projection matrix."
msgstr ""
"3D 着色器也可以访问屏幕深度缓冲，使用内置的 ``DEPTH_TEXTURE`` 即可。该纹理不"
"是线性的；必须通过逆投影矩阵进行转换。"

msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr "以下代码检索正在绘制的像素下方的3D位置:"

msgid "Translation status"
msgstr "翻译状态"
