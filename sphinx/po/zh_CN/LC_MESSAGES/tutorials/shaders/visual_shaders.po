# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using VisualShaders"
msgstr "使用 VisualShader"

msgid ""
"Just as VisualScript is an alternative for users that prefer a graphical "
"approach to coding, VisualShaders are the visual alternative for creating "
"shaders."
msgstr ""
"就像 VisualScript 是喜欢用图形化方法进行编码的用户的选择一样，VisualShader 是"
"创建着色器的可视化选择。"

msgid ""
"As shaders are inherently linked to visuals, the graph-based approach with "
"previews of textures, materials, etc. offers a lot of additional convenience "
"compared to purely script-based shaders. On the other hand, VisualShaders do "
"not expose all features of the shader script and using both in parallel "
"might be necessary for specific effects."
msgstr ""
"由于着色器本质上与视觉效果有联系, 与纯粹基于脚本的着色器相比, 基于图的方式, "
"有纹理, 材质等的预览, 提供了很多额外的便利. 另一方面,VisualShaders并没有暴露"
"出着色器脚本的所有功能, 对于特定的效果, 并行使用两者可能是必要的."

msgid ""
"If you are not familiar with shaders, start by reading :ref:"
"`doc_introduction_to_shaders`."
msgstr ""
"如果你对着色器不熟悉，可以从阅读 :ref:`doc_introduction_to_shaders` 开始。"

msgid "Creating a VisualShader"
msgstr "创建 VisualShader"

msgid ""
"VisualShaders can be created in any :ref:`class_ShaderMaterial`. To begin "
"using VisualShaders, create a new ``ShaderMaterial`` in an object of your "
"choice."
msgstr ""
"VisualShader 可以在任何 :ref:`class_ShaderMaterial` 中创建。要开始使用 "
"VisualShader，请在你选择的对象中创建一个新的 ``ShaderMaterial``\\ 。"

msgid ""
"Then assign a :ref:`class_VisualShader` resource to the ``Shader`` property."
msgstr "然后将一个 :ref:`class_VisualShader` 资源分配给 ``Shader`` 属性。"

msgid ""
"Click on the new ``VisualShader`` resource and the Visual Shader Editor will "
"open automatically. The layout of the Visual Shader Editor comprises two "
"parts: the upper toolbar and the graph itself."
msgstr ""
"点击新的 ``VisualShader`` 资源，Visual Shader 编辑器就会自动打开。Visual "
"Shader 编辑器的布局包括两部分：上层工具栏和图表本身。"

msgid "From left to right in the toolbar:"
msgstr "在工具栏中从左到右："

msgid ""
"The ``Add Node`` button displays a popup menu to let you add nodes to the "
"shader graph."
msgstr "``添加节点`` 按钮会显示一个弹出式菜单，让你为着色器图添加节点。"

msgid ""
"The drop-down menu is the shader type: Vertex, Fragment and Light. Like for "
"script shaders, it defines what built-in nodes will be available."
msgstr ""
"下拉菜单是着色器类型. 顶点, 碎片和光线和脚本着色器一样, 它定义了哪些内置节点"
"将是可用的."

msgid ""
"The following buttons and number input control the zooming level, grid "
"snapping and distance between grid lines (in pixels)."
msgstr ""
"下面的按钮和数字输入控制缩放级别, 网格捕捉和网格线之间的距离(单位为像素)."

msgid ""
"The last icon shows the generated shader code corresponding to your graph."
msgstr "最后一个图标显示了与你的图形对应生成的着色器代码."

msgid ""
"Although VisualShaders do not require coding, they share the same logic with "
"script shaders. It is advised to learn the basics of both to have a good "
"understanding of the shading pipeline."
msgstr ""
"虽然 VisualShader 不需要编码，但它们与脚本着色器有着相同的逻辑。建议学习这两"
"者的基础知识，以便对着色管道有一个很好的理解。"

msgid ""
"The visual shader graph is converted to a script shader behind the scene, "
"and you can see this code by pressing the last button in the toolbar. This "
"can be convenient to understand what a given node does and how to reproduce "
"it in scripts."
msgstr ""
"可视化的着色器图形在场景后台转换为脚本着色器, 按下工具栏上的最后一个按钮就可"
"以看到代码. 这可以方便理解特定节点的作用, 以及如何在脚本中呈现."

msgid "Using the Visual Shader Editor"
msgstr "使用 Visual Shader 编辑器"

msgid ""
"By default, every new ``VisualShader`` will have an output node. Every node "
"connection ends at one of the output node's sockets. A node is the basic "
"unit to create your shader. To add a new node, click on the ``Add Node`` "
"button on the upper left corner or right click on any empty location in the "
"graph, and a menu will pop up."
msgstr ""
"默认情况下, 每个新的 ``VisualShader`` 都会有一个输出节点. 每个节点的连接都在"
"输出节点的一个套接处结束. 节点是创建着色器的基本单元. 要添加一个新的节点, 点"
"击左上角的 ``添加节点`` 按钮, 或者在图形中的任何一个空的位置上右击, 就会弹出"
"一个菜单."

msgid "This popup has the following properties:"
msgstr "此弹出窗口具有以下属性:"

msgid ""
"If you right-click on the graph, this menu will be called at the cursor "
"position and the created node, in that case, will also be placed under that "
"position; otherwise, it will be created at the graph's center."
msgstr ""
"如果你在图形上单击右键, 这个菜单将在光标位置被调出, 创建的节点, 在这种情况"
"下, 也将被放在该位置, 否则, 将在图形的中心位置创建."

msgid ""
"It can be resized horizontally and vertically allowing more content to be "
"shown. Size transform and tree content position are saved between the calls, "
"so if you suddenly closed the popup you can easily restore its previous "
"state."
msgstr ""
"它可以在水平和垂直方向上调整大小, 以允许显示更多的内容. 尺寸变换和树的内容位"
"置在调用当中被保存, 所以如果突然关闭了弹出窗口, 可以很容易地恢复它以前的状态."

msgid ""
"The ``Expand All`` and ``Collapse All`` options in the drop-down option menu "
"can be used to easily list the available nodes."
msgstr ""
"下拉选项菜单中的 ``展开全部`` 和 ``折叠全部`` 选项可用于轻松列出可用节点."

msgid "You can also drag and drop nodes from the popup onto the graph."
msgstr "你也可以从弹出式菜单中拖放节点到图形上."

msgid ""
"While the popup has nodes sorted in categories, it can seem overwhelming at "
"first. Try to add some of the nodes, plug them in the output socket and "
"observe what happens."
msgstr ""
"虽然弹出的节点是按类别分类的, 但一开始会不知所以. 试着添加一些节点, 将它们插"
"入输出套接处, 观察会发生什么."

msgid ""
"When connecting any ``scalar`` output to a ``vector`` input, all components "
"of the vector will take the value of the scalar."
msgstr ""
"当把任何 ``scalar`` 输出连接到 ``vector`` 输入时, 向量的所有分量将取标量的值."

msgid ""
"When connecting any ``vector`` output to a ``scalar`` input, the value of "
"the scalar will be the average of the vector's components."
msgstr ""
"当把任何 ``vector`` 输出连接到 ``scalar`` 输入时, 标量的值将是向量分量的平均"
"值."

msgid "Visual Shader nodes"
msgstr "可视化着色器节点"

msgid ""
"Below are some special nodes that are worth knowing about. The list is not "
"exhaustive and might be expanded with more nodes and examples."
msgstr ""
"以下是一些值得了解的特殊节点. 该清单并非详尽无遗, 可能会增加更多的节点和示例."

msgid "Expression node"
msgstr "Expression 节点"

msgid ""
"The ``Expression`` node allows you to write Godot Shading Language (GLSL-"
"like) expressions inside your visual shaders. The node has buttons to add "
"any amount of required input and output ports and can be resized. You can "
"also set up the name and type of each port. The expression you have entered "
"will apply immediately to the material (once the focus leaves the expression "
"text box). Any parsing or compilation errors will be printed to the Output "
"tab. The outputs are initialized to their zero value by default. The node is "
"located under the Special tab and can be used in all shader modes."
msgstr ""
"``Expression`` 节点允许你在视觉着色器中编写 Godot 着色语言(GLSL-like)表达式. "
"该节点具有添加任意数量的所需输入和输出端口的按钮, 并且可以调整其大小. 你还可"
"以设置每个端口的名称和类型. 输入的表达式将立即应用于材质(焦点离开表达式文本框"
"后). 任何解析或编译错误都将打印到 \"输出\" 选项卡. 默认情况下, 输出初始化为零"
"值. 该节点位于 \"特殊\" 选项卡下, 可用于所有着色器模式."

msgid ""
"The possibilities of this node are almost limitless – you can write complex "
"procedures, and use all the power of text-based shaders, such as loops, the "
"``discard`` keyword, extended types, etc. For example:"
msgstr ""
"这个节点的可能性几乎无穷无尽 —— 你可以编写复杂的过程, 并使用基于文本的着色器"
"的全部力量, 例如循环, 关键字 ``discard`` , 扩展类型, 等等. 例如:"

msgid "Fresnel node"
msgstr "Fresnel 结点"

msgid ""
"The ``Fresnel`` node is designed to accept normal and view vectors and "
"produces a scalar which is the saturated dot product between them. "
"Additionally, you can setup the inversion and the power of equation. The "
"``Fresnel`` node is great for adding a rim-like lighting effect to objects."
msgstr ""
"``Fresnel`` 节点用于接受法线向量和视图向量, 并生成一个标量, 即它们之间的饱和"
"点积. 此外, 你可以设置反转和方程的幂. ``Fresnel`` 节点非常适合为对象添加类似"
"边缘的照明效果."

msgid "Boolean node"
msgstr "Boolean 节点"

msgid ""
"The ``Boolean`` node can be converted to ``Scalar`` or ``Vector`` to "
"represent ``0`` or ``1`` and ``(0, 0, 0)`` or ``(1, 1, 1)`` respectively. "
"This property can be used to enable or disable some effect parts with one "
"click."
msgstr ""
"``Boolean`` 节点可以转换为或 ``Scalar`` 或 ``Vector`` , 分别表示 ``0`` 或 "
"``1`` 和 ``(0, 0, 0)`` 或 ``(1, 1, 1)`` . 该属性可用于一键启用或禁用某些效果"
"部件."

msgid "If node"
msgstr "If 节点"

msgid ""
"The ``If`` node allows you to setup a vector which will be returned the "
"result of the comparison between ``a`` and ``b``. There are three vectors "
"which can be returned: ``a == b`` (in that case the tolerance parameter is "
"provided as a comparison threshold – by default it is equal to the minimal "
"value, i.e. ``0.00001``), ``a > b`` and ``a < b``."
msgstr ""
"``If`` 节点允许你设置一个向量, 它将返回 ``a`` 和 ``b`` 之间的比较结果. 有三个"
"向量可以返回: ``a == b`` (在这种情况下, 容差参数是作为比较阈值提供的--默认情"
"况下它等于最小值, 即 ``0.00001`` ), ``a > b`` 和 ``a < b`` ."

msgid "Switch node"
msgstr "Switch 节点"

msgid ""
"The ``Switch`` node returns a vector if the boolean condition is ``true`` or "
"``false``. ``Boolean`` was introduced above. If you convert a vector to a "
"true boolean, all components of the vector should be above zero."
msgstr ""
"如果布尔条件是 ``true`` 或 ``false`` , ``Switch`` 节点返回一个向量. "
"``Boolean`` 在上面介绍过. 如果你把一个向量转换为真布尔值, 那么向量的所有分量"
"都应该高于零."

msgid ""
"The ``Switch`` node is only available on the GLES3 backed. If you are "
"targeting GLES2 devices, you cannot use ``switch`` statements."
msgstr ""
"``Switch`` 节点只有在GLES3支持的情况下才可以使用. 如果你的目标是GLES2设备, 你"
"不能使用 ``Switch`` 语句."

msgid "Translation status"
msgstr "翻译状态"
