# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shader materials"
msgstr "着色器材质"

msgid "Introduction"
msgstr "前言"

msgid ""
"For the most common cases, Godot provides ready to use materials for most "
"types of shaders, such as :ref:`SpatialMaterial <class_SpatialMaterial>`, :"
"ref:`CanvasItemMaterial <class_CanvasItemMaterial>` and :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`. They are flexible "
"implementations that cover most use cases."
msgstr ""
"对于最常见的情况,Godot为大多数类型的着色器提供了随时可用的材质, 例如 :ref:"
"`SpatialMaterial <class_SpatialMaterial>` , :ref:`CanvasItemMaterial "
"<class_CanvasItemMaterial>` 和 :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>` . 它们是涵盖了大多数用例的灵活实现."

msgid ""
"Shader materials allow writing a custom shader directly, for maximum "
"flexibility. Examples of this are:"
msgstr ""
"着色器材质允许直接编写自定义着色器, 以获得最大的灵活性. 这方面的示例是:"

msgid "Create procedural textures."
msgstr "创建程序式纹理。"

msgid "Create complex texture blending effects."
msgstr "创建复杂的纹理混合效果."

msgid "Create animated materials, or materials that change over time."
msgstr "创建动画材质, 或随时间变化的材质."

msgid "Create refractive effects or other advanced effects."
msgstr "创建折射效果或其他高级效果."

msgid "Create special lighting shaders for more exotic materials."
msgstr "为更具异国情调的材质创建特殊照明着色器."

msgid "Animate vertices, like tree leaves or grass."
msgstr "动画顶点, 如树叶或草."

msgid "Create custom particle code."
msgstr "创建自定义粒子代码."

msgid "And much more!"
msgstr "以及更多！"

msgid ""
"Godot provides built in functionality to make frequent operations easier. "
"Additionally, Godot's shader editor will detect errors as you type, so you "
"can see your edited shaders in real-time. It is also possible to edit "
"shaders using a visual, node-based graph editor."
msgstr ""
"Godot提供了内置的功能, 使频繁的操作更容易. 此外,Godot的着色器编辑器会在你输入"
"时检测错误, 所以你可以实时看到编辑的着色器. 也可以使用可视化的, 基于节点的图"
"形编辑器来编辑着色器."

msgid "Creating a ShaderMaterial"
msgstr "创建 ShaderMaterial"

msgid ""
"Create a new ShaderMaterial in some object of your choice. Go to the "
"\"Material\" property and create a ShaderMaterial."
msgstr ""
"在您选择的某个对象中创建一个新的 ShaderMaterial。转到 ``Material`` 属性并创"
"建 ShaderMaterial。"

msgid ""
"Next, click on the shader material to see its properties. From here you can "
"create a shader or visual shader. Regular shaders use code to set their "
"properties while a visual shader uses a node based workflow."
msgstr ""
"接下来, 点击着色器材质, 查看其属性. 从这里你可以创建一个着色器或视觉着色器. "
"常规着色器使用代码来设置它们的属性, 而视觉着色器则使用基于节点的工作流程."

msgid ""
"If you need to you can convert a visual shader to a text shader. However you "
"can't convert a text shader to a visual shader."
msgstr ""
"如果你需要, 你可以将视觉着色器转换为文本着色器. 但是你不能将文本着色器转换为"
"视觉着色器."

msgid "Choose one of them and you can start editing your shader."
msgstr "选择其中一个, 你就可以开始编辑你的着色器."

msgid ""
"If you create a regular shader click on it and the shader editor will open."
msgstr "编辑新创建的着色器, 着色器编辑器将打开."

msgid ""
"If you create a visual shader the visual shader editor will open "
"automatically."
msgstr "编辑新创建的着色器, 着色器编辑器将打开."

msgid ""
"In the visual shader editor you can click a button and see what your visual "
"shader looks like as shader code. This can be useful if you're trying to "
"replicate a text shader as nodes, or it can be used as a preview for "
"converting your visual shader to a text shader."
msgstr ""
"在视觉着色器编辑器中, 你可以点击一个按钮, 看看你的视觉着色器作为着色器代码的"
"样子. 如果你想复制一个文本着色器作为节点, 这可能是有用的, 或者它可以作为将你"
"的视觉着色器转换为文本着色器的预览."

msgid "To learn more about visual shaders, read :ref:`doc_visual_shaders`."
msgstr "要了解更多关于可视化着色器的信息, 请阅读 :ref:`doc_visual_shaders` ."

msgid "Converting to ShaderMaterial"
msgstr "转换为 ShaderMaterial"

msgid ""
"It is possible to convert from SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial to ShaderMaterial. To do so, go to the material properties "
"and select the convert option."
msgstr ""
"可以将 SpatialMaterial、CanvasItemMaterial 和 ParticlesMaterial 转换为 "
"ShaderMaterial。要做到这一点，请进入材质属性并选择转换选项。"

msgid ""
"Using the convert option will turn the SpatialMaterial into a ShaderMaterial "
"with a text shader, not a visual shader."
msgstr ""
"使用convert选项将把SpatialMaterial变成一个带有文本着色器的ShaderMaterial, 而"
"不是视觉着色器."

msgid "Translation status"
msgstr "翻译状态"
