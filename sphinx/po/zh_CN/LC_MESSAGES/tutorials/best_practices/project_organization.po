# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Project organization"
msgstr "项目组织"

msgid "Introduction"
msgstr "前言"

msgid ""
"Since Godot has no restrictions on project structure or filesystem usage, "
"organizing files when learning the engine can seem challenging. This "
"tutorial suggests a workflow which should be a good starting point. We will "
"also cover using version control with Godot."
msgstr ""
"由于Godot对项目结构或文件系统的使用没有限制, 因此学习引擎时组织文件似乎很有挑"
"战性. 本教程提出了一个工作流程, 应该是一个很好的起点. 我们还将介绍在Godot中使"
"用版本控制."

msgid "Organization"
msgstr "组织"

msgid ""
"Godot is scene-based in nature, and uses the filesystem as-is, without "
"metadata or an asset database."
msgstr ""
"Godot本质上是基于场景的, 并按原样使用文件系统, 而没有元数据或资产数据库."

msgid ""
"Unlike other engines, many resources are contained within the scene itself, "
"so the amount of files in the filesystem is considerably lower."
msgstr ""
"与其他引擎不同, 场景本身包含许多资源, 因此文件系统中的文件数量要少得多."

msgid ""
"Considering that, the most common approach is to group assets as close to "
"scenes as possible; when a project grows, it makes it more maintainable."
msgstr ""
"考虑到这一点, 最常见的方法是将资产编组得尽可能接近场景；当项目变大时, 它使其"
"更易于维护."

msgid ""
"As an example, one can usually place into a single folder their basic "
"assets, such as sprite images, 3D model meshes, materials, and music, etc. "
"They can then use a separate folder to store built levels that use them."
msgstr ""
"例如, 通常可以将其基本资产(例如, 精灵图像, 3D模型网格, 材质, 和音乐等)放置在"
"一个文件夹中. 然后, 它们可以使用一个单独的文件夹来存储使用它们的构建关卡."

msgid "Style guide"
msgstr "风格指南"

msgid ""
"For consistency across projects, we recommend following these guidelines:"
msgstr "为了项目之间的一致性，我们建议遵循以下规范："

msgid ""
"Use **snake_case** for folder and file names (with the exception of C# "
"scripts). This sidesteps case sensitivity issues that can crop up after "
"exporting a project on Windows. C# scripts are an exception to this rule, as "
"the convention is to name them after the class name which should be in "
"PascalCase."
msgstr ""
"使用 **snake_case** 风格为文件夹和文件命名(除了c#脚本). 这避免了在 Windows 上"
"导出项目时可能出现的大小写敏感问题.C# 脚本是这个规则的一个例外, 因为按照惯例"
"是用类名来对它们命名, 而类名应该是 PascalCase 风格."

msgid ""
"Use **PascalCase** for node names, as this matches built-in node casing."
msgstr "使用 **PascalCase** 风格对节点进行命名, 这与内置的节点大小写风格一致."

msgid ""
"In general, keep third-party resources in a top-level ``addons/`` folder, "
"even if they aren't editor plugins. This makes it easier to track which "
"files are third-party. There are some exceptions to this rule; for instance, "
"if you use third-party game assets for a character, it makes more sense to "
"include them within the same folder as the character scenes and scripts."
msgstr ""
"通常, 将第三方资源放在顶级的 ``addons/`` 文件夹中, 即使它们不是编辑器插件. 这"
"样更加容易跟踪哪些文件是第三方文件. 当然这个规则也有一些例外: 如果你要使用第"
"三方游戏资源创建角色, 将这些资源和角色场景及脚本放在同一文件夹下会更好."

msgid "Importing"
msgstr "导入"

msgid ""
"Godot versions prior to 3.0 did the import process from files outside the "
"project. While this can be useful in large projects, it resulted in an "
"organization hassle for most developers."
msgstr ""
"3.0版之前的 Godot 版本从项目外的文件执行导入过程. 尽管这在大型项目中很有用, "
"但它给大多数开发人员带来了组织麻烦."

msgid ""
"Because of this, assets are now transparently imported from within the "
"project folder."
msgstr "因此，现在可以从项目文件夹中透明地导入资产。"

msgid "Ignoring specific folders"
msgstr "忽略具体文件夹"

msgid ""
"To prevent Godot from importing files contained in a specific folder, create "
"an empty file called ``.gdignore`` in the folder (the leading ``.`` is "
"required). This can be useful to speed up the initial project importing."
msgstr ""
"为防止 Godot 导入特定文件夹中的文件, 请在文件夹中创建一个名为 ``.gdignore`` "
"的空文件(以 ``.`` 号开头). 这对于加快初始项目导入非常有用."

msgid ""
"To create a file whose name starts with a dot on Windows, you can use a text "
"editor such as Notepad++ or use the following command in a command prompt: "
"``type nul > .gdignore``"
msgstr ""
"要在 Windows 上创建一个以 ``.`` 号开头的文件, 你可以使用文本编辑器比如 "
"Notepad++ 或者在命令提示符(Win+R 键-->输入cmd打开)中输入:``type nul > ."
"gdignore``"

msgid ""
"Once the folder is ignored, resources in that folder can't be loaded anymore "
"using the ``load()`` and ``preload()`` methods. Ignoring a folder will also "
"automatically hide it from the FileSystem dock, which can be useful to "
"reduce clutter."
msgstr ""
"一旦文件夹被忽略，其中资源就不能再使用 ``load()`` 和 ``preload()`` 方法加载。"
"被忽略文件夹会从文件系统栏目中隐藏，从而减少混乱。"

msgid ""
"Note that the ``.gdignore`` file's contents are ignored, which is why the "
"file should be empty. It does not support patterns like ``.gitignore`` files "
"do."
msgstr ""
"请注意 ``.gdignore`` 文件的内容会被忽略，因此该文件应当为空。它不像 ``."
"gitignore`` 文件一样支持模式匹配。"

msgid "Case sensitivity"
msgstr "大小写敏感"

msgid ""
"Windows and recent macOS versions use case-insensitive filesystems by "
"default, whereas Linux distributions use a case-sensitive filesystem by "
"default. This can cause issues after exporting a project, since Godot's PCK "
"virtual filesystem is case-sensitive. To avoid this, it's recommended to "
"stick to ``snake_case`` naming for all files in the project (and lowercase "
"characters in general)."
msgstr ""
"Windows 和最近版本的 macOS 默认使用不区分大小写的文件系统，而 Linux 发行版默"
"认使用区分大小写的文件系统。由于 Godot 的 PCK 虚拟文件系统区分大小写，因此在"
"导出项目后可能会导致问题。为了避免这种情况，建议对项目中的所有文件都使用 "
"``snake_case`` 蛇形命名法（一般使用小写）。"

msgid ""
"You can break this rule when style guides say otherwise (such as the C# "
"style guide). Still, be consistent to avoid mistakes."
msgstr ""
"当风格指南中另有说明时, 可以不遵守此规则(如C#样式指南). 不过, 记得保持一致"
"性, 避免出错."

msgid ""
"On Windows 10, to further avoid mistakes related to case sensitivity, you "
"can also make the project folder case-sensitive. After enabling the Windows "
"Subsystem for Linux feature, run the following command in a PowerShell "
"window::"
msgstr ""
"在 Windows 10 上，为了进一步避免与大小写敏感性相关的错误，您还可以让项目文件"
"夹区分大小写。启用 Windows 的 Linux 子系统特性后，在 PowerShell 窗口中运行以"
"下命令： ::"

msgid ""
"If you haven't enabled the Windows Subsystem for Linux, you can enter the "
"following line in a PowerShell window *running as Administrator* then reboot "
"when asked::"
msgstr ""
"如果你还没有启用 Windows 的 Linux 子系统，可以在 PowerShell 窗口中输入以下代"
"码\\ *以管理员权限运行*\\ 然后重启： ::"

msgid "Translation status"
msgstr "翻译状态"
