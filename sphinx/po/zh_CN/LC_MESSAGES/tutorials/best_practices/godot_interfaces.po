# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot interfaces"
msgstr "Godot 接口"

msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr "我们常常需要依赖其他对象来获取功能的脚本。这个过程分为两部分："

msgid "Acquiring a reference to the object that presumably has the features."
msgstr "获取对可能具有这些功能的对象的引用。"

msgid "Accessing the data or logic from the object."
msgstr "从对象访问数据或逻辑。"

msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr "本教程接下来的部分将介绍各种完成这些操作的方法。"

msgid "Acquiring object references"
msgstr "获取对象引用"

msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""
"对所有 :ref:`Object <class_Object>` 来说，获得引用的最基础的方法，是从另一个"
"已获得引用的对象来获得。"

msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""
"同样的原则也适用于 :ref:`Reference <class_Reference>` 对象。虽然使用者经常以"
"这种方式访问 :ref:`Node <class_Node>` 和 :ref:`Resource <class_Resource>`，但"
"还有另一种方法。"

msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr "除了访问属性和方法，也可以通过加载来获得 Resource。"

msgid "Note the following:"
msgstr "请注意以下几点："

msgid "There are many ways in which a language can load such resources."
msgstr "在一种语言中，有许多加载这些资源的方法。"

msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr "在设计对象如何访问数据时，不要忘记，还可以将资源作为引用传递。"

msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""
"请记住, 加载资源将获取引擎维护的缓存资源实例. 要获取一个新对象, 必须 :ref:`复"
"制 <class_Resource_method_duplicate>` 一个现有引用, 或者使用 ``new()`` 从头实"
"例化一个引用."

msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr "节点也有一个可选的访问点: 场景树."

msgid "Accessing data or logic from an object"
msgstr "从对象访问数据或逻辑"

msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""
"Godot的脚本API是鸭子类型. 这意味着, 如果脚本执行操作, 则Godot不会通过 **类型"
"** 验证其是否支持该操作. 相反, 它检查对象是否 **实现** 了单个方法."

msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""
"例如, :ref:`CanvasItem <class_CanvasItem>` 类有一个 ``visible`` 的属性. 实际"
"上, 脚本API公开的所有属性, 都是绑定到名称的 ``setter`` 和 ``getter`` 对. 如果"
"有人试图访问 :ref:`CanvasItem.visible <class_CanvasItem_property_visible>`, "
"那么Godot会按照以下顺序进行检查:"

msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""
"如果对象附加了脚本, 它将尝试通过脚本设置属性. 通过覆盖属性的 ``setter`` 方"
"法, 这为脚本提供了覆盖基础对象上定义的属性的机会."

msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""
"如果脚本没有该属性, 它在 ``ClassDB`` 中对 ``CanvasItem`` 类及其所有继承的类型"
"执行 ``visible`` 属性的哈希表查找. 如果找到, 它将调用绑定的 ``setter`` 或 "
"``getter``. 有关哈希表的更多信息, 参见 :ref:`数据偏好 "
"<doc_data_preferences>` 文档."

msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr ""
"如果没有找到, 它会进行显式检查, 以查看用户是否要访问 ``script`` 或 ``meta`` "
"属性."

msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""
"如果没有, 它将在 ``CanvasItem`` 及其继承的类型中检查 ``_set``/``_get`` 实现"
"(取决于访问类型). 这些方法可以执行逻辑, 从而给人一种对象具有属性的印象. "
"``_get_property_list`` 方法也是如此."

msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""
"请注意, 即使对于非合法的符号名称, 例如 :ref:`TileSet <class_TileSet>` 的 ``1/"
"tile_name`` 属性, 这种情况也会发生. 这是指ID为1的 ``tile`` 的名称, 即 :ref:"
"`TileSet.tile_get_name(1) <class_TileSet_method_tile_get_name>`."

msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""
"因此, 这个鸭子类型的系统可以在脚本, 对象的类, 或对象继承的任何类, 但只能用于"
"扩展Object的对象中, 定位属性."

msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr "Godot提供了多种选项, 来对这些访问, 执行运行时检查:"

msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""
"鸭子类型属性的访问. 这些将进行属性检查(如上所述). 如果对象不支持该操作, 则执"
"行将停止."

msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""
"一个方法检查. 在 :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>` 的情况下, 我们可以像访问任何其他方法一"
"样, 访问这些方法, ``set_visible`` 和 ``is_visible`` ."

msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""
"将访问权限外包给 :ref:`FuncRef <class_FuncRef>`. 在人们需要最大程度地摆脱依赖"
"的情况下, 这些方法可能会很有用. 在这种情况下, 需要依靠外部上下文来设置此方法."

msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""
"这些策略有助于Godot的灵活设计. 通过它们, 用户可以使用多种工具来满足他们的特定"
"需求."

msgid "Translation status"
msgstr "翻译状态"
