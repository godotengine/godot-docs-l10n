# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "何时以及如何避免为任何事情使用节点"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"虽然节点的创建成本很低，但是它们也有一定的局限性。一个项目可能有成千上万个节"
"点，都各自在做事情。每个节点的行为越复杂，对项目性能增加的压力就越大。"

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot 为创建节点使用的 API 提供了更轻量级的对象。在设计如何构建项目的特性时，"
"请务必将这些作为选项牢记在心。"

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`\\ ：终极轻量级对象，原始的 Object 必须使用手动内"
"存管理。尽管如此，创建自己的自定义数据结构——甚至是节点结构——也并不难，并且"
"比 :ref:`Node <class_Node>` 类更轻量。"

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**示例：**\\ 参见 :ref:`Tree <class_Tree>` 节点。它支持对具有任意行数和列数的"
"内容表，进行高级定制。用来生成可视化的数据实际上是 :ref:`TreeItem "
"<class_TreeItem>` 对象的树。"

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**优势：** 将 API 简化为较小范围的对象，有助于提高其可访问性、改善迭代时间。"
"与其使用整个 Node 库，不如创建一组简略的 Object，节点可以从这些 Object 中生成"
"和管理相应的子节点。"

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"处理它们时要小心. 可以将 ``Object`` 存储到变量中, 但是这些引用可能在没有警告"
"的情况下失效. 例如, 如果对象的创建者决定删除它, 这将在下一次访问时, 触发错误"
"状态."

msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`Reference <class_Reference>`\\ ：只比 Object 稍微复杂一点。它们会记录对"
"自己的引用，只有当对自己没有另外的引用存在时，才会删除加载的内存。在大多数需"
"要在自定义类中获取数据的情况下，很有用。"

msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**示例** 参见 :ref:`File <class_File>` 对象. 它的功能就像普通 ``Object`` 一"
"样, 只是不需要人为删除它."

msgid "**Advantages:** same as the Object."
msgstr "**优势:** 与 ``Object`` 相同."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: 只比 ``Reference`` 稍微复杂一点. 它们天然具"
"有将其对象属性, 序列化和反序列化Godot资源文件的能力(即保存和加载)."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**示例** : 脚本, ``PackedScene`` (用于场景文件), 以及其他类型, 比如 :ref:"
"`AudioEffect <class_AudioEffect>` 类. 每一个都可以保存和加载, 因此它们从 "
"``Resource`` 扩展."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**优势**\\ ：关于 :ref:`Resource <class_Resource>` 与传统数据存储方法相比的优"
"势\\ :ref:`已经说了 <doc_resources>` 很多。然而，在使用 Resource 替代 Node 的"
"情境下，Resource 的主要优点是与检查器的兼容性。虽然几乎和 Object/Reference 一"
"样轻量，它们仍然可以在检查器中显示并导出属性。这使它们在易用性上，可以媲美使"
"用子节点的方式，而且如果有人计划在其场景中包含许多这类 Resource/Node，它们还"
"可以提高性能。"

msgid "Translation status"
msgstr "翻译状态"
