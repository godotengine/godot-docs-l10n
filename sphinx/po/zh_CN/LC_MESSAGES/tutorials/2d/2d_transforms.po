# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Viewport and canvas transforms"
msgstr "Viewport 和画布变换"

msgid "Introduction"
msgstr "前言"

msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"本文简要介绍了从本地绘制节点内容开始到这些内容绘制到屏幕上为止的 2D 变换过"
"程，对引擎非常底层的细节进行了讨论。"

msgid "Canvas transform"
msgstr "画布变换"

msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"正如前面教程 :ref:`doc_canvas_layers` 中提到的那样，每个 CanvasItem 节点（要"
"记得 Node2D 和基于 Control 的节点都使用 CanvasItem 作为它们的公共根）将驻留"
"在 *Canvas Layer* 中。每个 Canvas Layer 都有一个变换（平移、旋转、缩放等），"
"可以作为 :ref:`Transform2D <class_Transform2D>` 进行访问。"

msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"在前面的教程中也有介绍，节点默认是在 0 层上绘制，即内置的画布。如果要把节点放"
"在不同的层中，可以使用 :ref:`CanvasLayer <class_CanvasLayer>` 节点。"

msgid "Global canvas transform"
msgstr "全局画布变换"

msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this transform is not of "
"much use, but is used in the CanvasItem Editor in Godot's editor."
msgstr ""
"Viewport 还具有全局画布变换（也是 :ref:`Transform2D "
"<class_Transform2D>`\\ ）。这是一个影响所有单独的\\ *画布层*\\ 的主变换。通常"
"这种变换用得不多。它被用在了 Godot 的编辑器中的 CanvasItem 编辑器中。"

msgid "Stretch transform"
msgstr "拉伸变换"

msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"最后，Viewport 有\\ *拉伸变换*\\ ，用于调整大小或拉伸屏幕。此变换在内部使用"
"（见 :ref:`doc_multiple_resolutions`\\ ），但也可以在每个 Viewport 上手动设"
"置。"

msgid ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. To convert InputEvent coordinates to "
"local CanvasItem coordinates, the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""
"在 :ref:`MainLoop._input_event() <class_MainLoop_method__input_event>` 回调中"
"接收的输入事件上应用了拉伸变换，但没有应用上面那些变换。为了方便将 "
"InputEvent 坐标转换为本地 CanvasItem 坐标，引擎添加了 :ref:`CanvasItem."
"make_input_local() <class_CanvasItem_method_make_input_local>` 函数。"

msgid "Transform order"
msgstr "变换顺序"

msgid ""
"For a coordinate in CanvasItem local properties to become an actual screen "
"coordinate, the following chain of transforms must be applied:"
msgstr ""
"要使CanvasItem的本地属性中的坐标成为实际屏幕坐标, 必须应用以下一系列变换:"

msgid "Transform functions"
msgstr "变换函数"

msgid "Obtaining each transform can be achieved with the following functions:"
msgstr "通过以下函数可以获取各个转换:"

msgid "Type"
msgstr "类型"

msgid "Transform"
msgstr "变换"

msgid "CanvasItem"
msgstr "CanvasItem(画布项)"

msgid ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"
msgstr ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"

msgid "CanvasLayer"
msgstr "CanvasLayer(画布层)"

msgid ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"
msgstr ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"

msgid "CanvasLayer+GlobalCanvas+Stretch"
msgstr "CanvasLayer(画布层)+GlobalCanvas(全局画布)+Stretch(拉伸)"

msgid ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"
msgstr ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"

msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr "那么最后, 要将CanvasItem的本地坐标转换为屏幕坐标, 只需按以下顺序相乘:"

msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"但请记住, 通常情况最好不要使用屏幕坐标. 推荐的方法是, 仅仅使用画布坐标"
"( ``CanvasItem.get_global_transform()`` ), 以保证自动分辨率调整能正常工作."

msgid "Feeding custom input events"
msgstr "提供自定义输入事件"

msgid ""
"It is often desired to feed custom input events to the scene tree. With the "
"above knowledge, to correctly do this, it must be done the following way:"
msgstr ""
"通常需要将自定义输入事件提供给场景树. 有了上述知识, 要正确地做到这一点, 必须"
"通过以下方式完成:"

msgid "Translation status"
msgstr "翻译状态"
