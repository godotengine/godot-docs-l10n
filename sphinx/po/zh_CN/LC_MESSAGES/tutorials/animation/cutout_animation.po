# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cutout animation"
msgstr "剪纸动画"

msgid "What is it?"
msgstr "它是什么？"

msgid ""
"Traditionally, `cutout animation <https://en.wikipedia.org/wiki/"
"Cutout_animation>`__ is a type of `stop motion animation <https://en."
"wikipedia.org/wiki/Stop_motion>`__ in which pieces of paper (or other thin "
"material) are cut into special shapes and arranged in two-dimensional "
"representations of characters and objects. Characters' bodies are usually "
"made out of several pieces. The pieces are arranged and photographed once "
"for each frame of the film. The animator moves and rotates the parts in "
"small increments between each shot to create the illusion of movement when "
"the images are played back quickly in sequence."
msgstr ""
"传统意义上, `剪影动画 <https://en.wikipedia.org/wiki/Cutout_animation>`__ 是"
"一种 `定格动画 <https://zh.wikipedia.org/zh-cn/"
"%E5%AE%9A%E6%A0%BC%E5%8A%A8%E7%94%BB>`__ . 在剪影动画中, 人们把纸片(或者其他"
"的薄材料)剪成特殊的形状, 来组合成角色和物体的二维形象. 角色的身体通常是由几个"
"部件组成的. 这些部件在动画的每一帧中形成一种组合, 之后对其摄影. 动画制作者在"
"两次摄影之间将这些部分进行很小幅度的移动和旋转, 这样, 当这些摄影的画面以很快"
"的速度连续依次播放时, 就可以造成这些角色和物体在连续运动的假象."

msgid ""
"Simulations of cutout animation can now be created using software as seen in "
"`South Park <https://en.wikipedia.org/wiki/South_Park>`__ and `Jake and the "
"Never Land Pirates <https://en.wikipedia.org/wiki/"
"Jake_and_the_Never_Land_Pirates>`__."
msgstr ""
"现在可以用软件制作剪纸动画的模拟，如\\ `《南方公园》 <https://zh.wikipedia."
"org/zh-cn/%E5%8D%97%E6%96%B9%E5%85%AC%E5%9C%92>`__\\ 和\\ `《杰克与梦幻岛海"
"盗》 <https://zh.wikipedia.org/zh-cn/"
"%E5%82%91%E5%85%8B%E8%88%87%E5%A4%A2%E5%B9%BB%E5%B3%B6%E6%B5%B7%E7%9B%9C>`__\\ 。"

msgid ""
"In video games, this technique has also become popular. Examples of this are "
"`Paper Mario <https://en.wikipedia.org/wiki/Super_Paper_Mario>`__ or `Rayman "
"Origins <https://en.wikipedia.org/wiki/Rayman_Origins>`__ ."
msgstr ""
"在视频游戏中，这种技术也变得流行。例如\\ `《纸片马里奥》 <https://en."
"wikipedia.org/wiki/Super_Paper_Mario>`__\\ 或 `《雷曼 起源》 <https://zh."
"wikipedia.org/zh-cn/"
"%E9%9B%B7%E5%B0%84%E8%B6%85%E4%BA%BA_%E8%B5%B7%E6%BA%90>`__\\ 。"

msgid "Cutout animation in Godot"
msgstr "Godot 中的剪纸动画"

msgid ""
"Godot provides tools for working with cutout rigs, and is ideal for the "
"workflow:"
msgstr "Godot 提供了一些工具，用于剪纸动画的绑定，而且是工作流的理想选择："

msgid ""
"**The animation system is fully integrated with the engine**: This means "
"animations can control much more than just motion of objects. Textures, "
"sprite sizes, pivots, opacity, color modulation, and more, can all be "
"animated and blended."
msgstr ""
"**动画系统与引擎完全集成**\\ ：这意味着动画可以控制的不仅仅是物体的运动。纹"
"理、精灵大小、轴心、不透明度、颜色调制等都可以进行动画和混合。"

msgid ""
"**Combine animation styles**: AnimatedSprite allows traditional cel "
"animation to be used alongside cutout animation. In cel animation different "
"animation frames use entirely different drawings rather than the same pieces "
"positioned differently. In an otherwise cutout-based animation, cel "
"animation can be used selectively for complex parts such as hands, feet, "
"changing facial expressions, etc."
msgstr ""
"**混合动画风格** : 动画精灵允许将传统赛璐璐动画与剪纸动画一起使用. 在赛璐璐动"
"画中, 不同的动画帧使用完全不同的绘图, 而不是相同的片段位置不同. 在其他基于剪"
"纸的动画中, 赛璐璐动画可以选择性地用于复杂的部件, 例如手, 脚, 改变面部表情等."

msgid ""
"**Custom Shaped Elements**: Custom shapes can be created with :ref:"
"`Polygon2D <class_Polygon2D>` allowing UV animation, deformations, etc."
msgstr ""
"**自定义形状元素** : 可以用 :ref:`Polygon2D <class_Polygon2D>` 创建自定义形"
"状, 允许UV动画, 变形等."

msgid ""
"**Particle Systems**: A cutout animation rig can be combined with particle "
"systems. This can be useful for magic effects, jetpacks, etc."
msgstr ""
"**粒子系统** : 剪纸式动画配件可以与粒子系统相结合, 这对魔法效果, 喷气背包等很"
"有用."

msgid ""
"**Custom Colliders**: Set colliders and influence areas in different parts "
"of the skeletons, great for bosses and fighting games."
msgstr ""
"**自定义碰撞器**\\ ：在骨架的不同部位设置碰撞器和影响区域，非常适合 Boss 和格"
"斗游戏。"

msgid ""
"**Animation Tree**: Allows complex combinations and blending between several "
"animations, the same way it works in 3D."
msgstr ""
"**动画树** : 允许在几个动画之间进行复杂的组合和混合, 与3D动画的工作方式相同."

msgid "And much more!"
msgstr "以及更多！"

msgid "Making of GBot"
msgstr "制作 GBot"

msgid ""
"For this tutorial, we will use as demo content the pieces of the `GBot "
"<https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ character, created by "
"Andreas Esau."
msgstr ""
"在本教程中，我们将使用由 Andreas Esau 创建的 `GBot <https://www.youtube.com/"
"watch?v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ 角色作为演示。"

msgid ""
"Get your assets: :download:`gbot_resources.zip <files/gbot_resources.zip>`."
msgstr ""
"获得您的资源: :download:`gbot_resources.zip <files/gbot_resources.zip>`."

msgid "Setting up the rig"
msgstr "设置装配"

msgid "Create an empty Node2D as root of the scene, we will work under it:"
msgstr "创建一个空的Node2D作为场景的根, 我们将在它下面工作:"

msgid ""
"The first node of the model is the hip. Generally, both in 2D and 3D, the "
"hip is the root of the skeleton. This makes it easier to animate:"
msgstr ""
"模型的第一个节点是臀部。一般来说，无论是 2D 还是 3D，臀部都是骨架的根部。这使"
"得它更容易制作动画："

msgid ""
"Next will be the torso. The torso needs to be a child of the hip, so create "
"a child sprite and load the torso texture, later accommodate it properly:"
msgstr ""
"接下来将是躯干, 躯干需要是臀部的子级, 所以要创建一个子级精灵, 并加载躯干纹"
"理, 然后适当地调整它:"

msgid ""
"This looks good. Let's see if our hierarchy works as a skeleton by rotating "
"the torso. We can do this be pressing :kbd:`E` to enter rotate mode, and "
"dragging with the left mouse button. To exit rotate mode hit :kbd:`ESC`."
msgstr ""
"这看起来不错。让我们通过旋转躯干来看看层次结构是否能像骨架一样工作。可以按 :"
"kbd:`E` 进入旋转模式，然后用鼠标左键拖动。要退出旋转模式，请按 :kbd:"
"`ESC`\\ 。"

msgid "The rotation pivot is wrong and needs to be adjusted."
msgstr "旋转轴心错误，需要调整。"

msgid ""
"This small cross in the middle of the :ref:`Sprite <class_Sprite>` is the "
"rotation pivot:"
msgstr ":ref:`Sprite <class_Sprite>` 中间的这个小十字就是旋转轴心："

msgid "Adjusting the pivot"
msgstr "调整轴心"

msgid ""
"The pivot can be adjusted by changing the *offset* property in the Sprite:"
msgstr "可以通过更改 Sprite 中的 *offset* 属性来调整轴心："

msgid ""
"The pivot can also be adjusted *visually*. While hovering over the desired "
"pivot point,  press :kbd:`V` to move the pivot there for the selected "
"Sprite. There is also a tool in the tool bar that has a similar function."
msgstr ""
"轴心也可以进行\\ *可视化*\\ 的调整。将鼠标悬停在所需的轴心点上时，按 :kbd:"
"`V` 移动所选 Sprite 的轴心。工具栏中还有一个工具也有类似的功能。"

msgid ""
"Continue adding body pieces, starting with the right arm. Make sure to put "
"each sprite in its correct place in the hierarchy, so its rotations and "
"translations are relative to its parent:"
msgstr ""
"继续添加身体部件, 从右臂开始. 确保将每个精灵放在其在层次结构中的正确位置, 其"
"旋转和平移都是相对于其父级而言的:"

msgid ""
"With the left arm there's a problem. In 2D, child nodes appear in front of "
"their parents:"
msgstr "左臂有些问题. 在二维中, 子节点出现在父节点的前面:"

msgid ""
"We want the left arm to appear *behind* the hip and the torso. We could move "
"the left arm nodes behind the hip (above the hip node in the scene "
"hierarchy), but then the left arm is no longer in its proper place in the "
"hierarchy. This means it wouldn't be affected by the movement of the torso. "
"We'll fix this problem with ``RemoteTransform2D`` nodes."
msgstr ""
"我们希望左臂出现在臀部和躯干的 *后面* . 我们可以将左臂节点在场景层次结构中移"
"到臀部节点上面, 但这样一来, 左臂在层次结构中的位置就不对了, 这意味着它不会受"
"到躯干移动的影响. 我们用 ``RemoteTransform2D`` 节点来解决这个问题."

msgid ""
"You can also fix depth ordering problems by adjusting the Z property of any "
"node inheriting from Node2D."
msgstr "还可以通过调整从二维节点继承的任何节点的Z属性, 来修复深度排序问题."

msgid "RemoteTransform2D node"
msgstr "RemoteTransform2D 节点"

msgid ""
"The :ref:`RemoteTransform2D <class_RemoteTransform2D>` node transforms nodes "
"somewhere else in the hierarchy. This node applies its own transform "
"(including any transformation it inherits from its parents) to the remote "
"node it targets."
msgstr ""
":ref:`RemoteTransform2D <class_RemoteTransform2D>` 节点对层次结构中其他地方的"
"节点进行变换. 这个节点将自己的变换, 包括它从父节点继承的任何变换, 应用到它所"
"针对的遥控节点."

msgid ""
"This allows us to correct the visibility order of our elements, "
"independently of the locations of those parts in the cutout hierarchy."
msgstr ""
"这使我们能够修正元素的可见性顺序, 这些部分独立于在剪裁层次结构中的位置."

msgid ""
"Create a ``RemoteTransform2D`` node as a child of the torso. Call it "
"``remote_arm_l``. Create another RemoteTransform2D node inside the first and "
"call it ``remote_hand_l``. Use the ``Remote Path`` property of the two new "
"nodes to target the ``arm_l`` and ``hand_l`` sprites respectively:"
msgstr ""
"创建一个 ``RemoteTransform2D`` 节点作为躯干的子节点。命名为 "
"``remote_arm_l``\\ 。在第一个节点中再创建一个 RemoteTransform2D 节点并将其命"
"名为 ``remote_hand_l``\\ 。让这两个新节点的 ``Remote Path`` 属性分别指向 "
"``arm_l`` 和 ``hand_l`` 精灵："

msgid ""
"Moving the ``RemoteTransform2D`` nodes now moves the sprites. So we can "
"create animations by adjusting the ``RemoteTransform2D`` transforms:"
msgstr ""
"移动 ``RemoteTransform2D`` 节点现在可以移动精灵. 所以可以通过调整 "
"``RemoteTransform2D`` 变换来创建动画:"

msgid "Completing the skeleton"
msgstr "完成骨架"

msgid ""
"Complete the skeleton by following the same steps for the rest of the parts. "
"The resulting scene should look similar to this:"
msgstr "按照其余部分的相同步骤完成骨架。生成的场景应该类似于："

msgid ""
"The resulting rig will be easy to animate. By selecting the nodes and "
"rotating them you can animate forward kinematics (FK) efficiently."
msgstr ""
"生成的装备很容易制作动画. 通过选择节点并旋转它们, 您可以有效地为前向运动学"
"(FK)设置动画."

msgid "For simple objects and rigs this is fine, but there are limitations:"
msgstr "对于简单的物体和装配来说已经足够了, 但仍然有限制:"

msgid ""
"Selecting sprites in the main viewport can become difficult in complex rigs. "
"The scene tree ends up being used to select parts instead, which can be "
"slower."
msgstr ""
"在复杂的装配中, 在主视口中选择精灵会变得很困难. 场景树最终被替代, 用来选择部"
"件, 这可能会比较慢."

msgid ""
"Inverse Kinematics (IK) is useful for animating extremities like hands and "
"feet, and can't be used with our rig in its current state."
msgstr ""
"反向动力学（Inverse Kinematics、IK）对于手脚等肢体的运动非常有用，目前我们的"
"绑定还无法使用。"

msgid "To solve these problems we'll use Godot's skeletons."
msgstr "为了解决这些问题，我们将会使用 Godot 的骨架。"

msgid "Skeletons"
msgstr "骨架"

msgid ""
"In Godot there is a helper to create \"bones\" between nodes. The bone-"
"linked nodes are called skeletons."
msgstr ""
"在 Godot 中，有一个在节点之间创建“骨骼”的辅助工具。骨骼连接起的节点称为骨架。"

msgid ""
"As an example, let's turn the right arm into a skeleton. To create a "
"skeleton, a chain of nodes must be selected from top to bottom:"
msgstr ""
"举个例子，让我们把右臂变成一个骨架。要创建一个骨架，必须从上到下选择节点链："

msgid "Then, click on the Skeleton menu and select ``Make Bones``."
msgstr "然后单击“骨架”菜单并选择 ``制作骨骼``\\ 。"

msgid "This will add bones covering the arm, but the result may be surprising."
msgstr "这将增加覆盖在手臂上的骨头, 但结果可能令人惊讶."

msgid ""
"Why does the hand lack a bone? In Godot, a bone connects a node with its "
"parent. And there's currently no child of the hand node. With this knowledge "
"let's try again."
msgstr ""
"为什么这只手缺少一根骨骼？在 Godot 中，使用骨骼把节点和它的父节点连接起来。当"
"前没有手节点的子节点。有了这些知识，让我们再试一次。"

msgid ""
"The first step is creating an endpoint node. Any kind of node will do, but :"
"ref:`Position2D <class_Position2D>` is preferred because it's visible in the "
"editor. The endpoint node will ensure that the last bone has orientation."
msgstr ""
"第一步是创建端点节点. 任何类型的节点都可以, 但是 :ref:`Position2D "
"<class_Position2D>` 是首选, 因为它在编辑器中可见. 端点节点将确保最后一个骨骼"
"具有方向."

msgid ""
"Now select the whole chain, from the endpoint to the arm and create bones:"
msgstr "现在选择整个链, 从端点到手臂并创建骨骼:"

msgid ""
"The result resembles a skeleton a lot more, and now the arm and forearm can "
"be selected and animated."
msgstr "结果更像骨架了，现在可以选择手臂和前臂并设置动画。"

msgid ""
"Create endpoints for all important extremities. Generate bones for all "
"articulable parts of the cutout, with the hip as the ultimate connection "
"between all of them."
msgstr ""
"为所有重要的末端创建端点. 为剪纸的所有可关节部分生成骨骼, 臀部是它们之间的最"
"终连接."

msgid ""
"You may notice that an extra bone is created when connecting the hip and "
"torso. Godot has connected the hip node to the scene root with a bone, and "
"we don't want that. To fix this, select the root and hip node, open the "
"Skeleton menu, click ``clear bones``."
msgstr ""
"你可能会注意到，在连接臀部和躯干时，会多出一根骨骼。Godot 用骨骼将臀部节点连"
"接到了场景根部，我们不希望这样。要解决这个问题，选择根部和臀部节点，打开“骨"
"架”菜单，点击 ``清除骨骼``\\ 。"

msgid "Your final skeleton should look something like this:"
msgstr "您的骨架最后看上去应该是这样的："

msgid ""
"You might have noticed a second set of endpoints in the hands. This will "
"make sense soon."
msgstr "你可能已经注意到了手上的第二组端点. 这很快就会有意义."

msgid ""
"Now that the whole figure is rigged, the next step is setting up the IK "
"chains. IK chains allow for more natural control of extremities."
msgstr ""
"现在整个人物已经装配好了，下一步就是设置 IK 链。IK 链可以更自然的控制四肢。"

msgid "IK chains"
msgstr "IK 链"

msgid ""
"IK stands for inverse kinematics. It's a convenient technique for animating "
"the position of hands, feet and other extremities of rigs like the one we've "
"made. Imagine you want to pose a character's foot in a specific position on "
"the ground. Without IK chains, each motion of the foot would require "
"rotating and positioning several other bones (the shin and the thigh at "
"least). This would be quite complex and lead to imprecise results."
msgstr ""
"IK 是反向动力学（Inverse Kinematics）的缩写，给手部、足部以及其它肢体的动画带"
"来便利。想象一下，您想要将角色的脚放在地面上的特定位置。如果没有 IK 链，脚的"
"每次运动都需要旋转和定位其他几个骨骼（至少得涉及大腿及小腿）。这将非常复杂并"
"导致不精确的结果。"

msgid ""
"IK allows us to move directly the foot while the shin and thigh self-adjust."
msgstr "IK 允许我们直接移动脚，同时小腿和大腿可以自我调整。"

msgid ""
"To create an IK chain, select a chain of bones from endpoint to the base for "
"the chain. For example, to create an IK chain for the right leg, select the "
"following:"
msgstr ""
"要创建 IK 链，请选择从端点到链基的骨骼链。例如，要为右腿创建一条 IK 链，选择"
"以下："

msgid "Then enable this chain for IK. Go to Edit > Make IK Chain."
msgstr "然后为 IK 启用此链。转到“编辑 > 制作 IK 链”。"

msgid "As a result, the base of the chain will turn *Yellow*."
msgstr "结果，链的基部将变为\\ *黄色*\\ 。"

msgid ""
"Once the IK chain is set-up grab any child or grand-child of the base of the "
"chain (e.g. a foot) and move it. You'll see the rest of the chain adjust as "
"you adjust its position."
msgstr ""
"一旦 IK 链设置完毕，抓住任何链基（例如脚部）的任意嵌套子节点并移动。你会看到"
"链的剩余部分跟随你的移动调整位置。"

msgid "Animation tips"
msgstr "动画提示"

msgid ""
"The following section will be a collection of tips for creating animation "
"for your cutout rigs. For more information on how the animation system in "
"Godot works, see :ref:`doc_introduction_animation`."
msgstr ""
"下一节将是创建剪纸动画的技巧集合。关于 Godot 中的动画系统如何工作的更多信息，"
"请参阅 :ref:`doc_introduction_animation`\\ 。"

msgid "Setting keyframes and excluding properties"
msgstr "设置关键帧和排除属性"

msgid ""
"Special contextual elements appear in the top toolbar when the animation "
"editor window is open:"
msgstr "当动画编辑器窗口打开时, 特殊的上下文元素会出现在顶部工具栏中:"

msgid ""
"The key button inserts location, rotation, and scale keyframes for the "
"selected objects or bones at the current playhead position."
msgstr ""
"按键按钮在当前游戏开始位置为选定的对象或骨骼插入位置, 旋转和缩放关键帧."

msgid ""
"The \"loc\", \"rot\", and \"scl\" toggle buttons to the left of the key "
"button modify its function, allowing you to specify which of the three "
"properties keyframes will be created for."
msgstr ""
"通过切换关键帧按钮左边的 \"位置\" , \"旋转\" 和 \"缩放\" 按钮, 可以修改其功"
"能, 允许您指定将为三个属性中的哪一个创建关键帧."

msgid ""
"Here's an illustration of how this can be useful: Imagine you have a node "
"which already has two keyframes animating its scale only. You want to add an "
"overlapping rotation movement to the same node. The rotation movement should "
"begin and end at different times from the scale change that's already set "
"up. You can use the toggle buttons to have only rotation information added "
"when you add a new keyframe. This way, you can avoid adding unwanted scale "
"keyframes which would disrupt the existing scale animation."
msgstr ""
"下面是一个例子, 说明如何使用其的: 假设您有一个节点, 其中已经有两个关键帧只对"
"其缩放进行动画. 您想在同一个节点重叠添加旋转移动. 旋转运动应该在不同的时间开"
"始和结束, 与已经设置的缩放变化不同. 在添加新关键帧时, 可以使用切换按钮, 只添"
"加旋转信息. 这样, 您就可以避免添加不需要的缩放关键帧, 破坏现有的缩放动画."

msgid "Creating a rest pose"
msgstr "创建放松姿势"

msgid ""
"Think of a rest pose as a default pose that your cutout rig should be set to "
"when no other pose is active in your game. Create a rest pose as follows:"
msgstr ""
"将放松姿势视为默认姿势，当游戏中没有其他姿势处于活动状态时，应该将其设置为剪"
"纸绑定。创造一个放松姿势如下："

msgid ""
"1. Make sure the rig parts are positioned in what looks like a \"resting\" "
"arrangement."
msgstr "1. 确保绑定部件处于 \"休息\" 状态."

msgid "Create a new animation, rename it \"rest\"."
msgstr "创建一个新动画, 重命名为 \"rest\"."

msgid "Select all nodes in your rig (box selection should work fine)."
msgstr "选择装配中的所有节点(应该可以框选)."

msgid ""
"4. Make sure the \"loc\", \"rot\", and \"scl\" toggle buttons are all active "
"in the toolbar."
msgstr "4. 确保工具栏中的 \"位置\" , \"旋转\" 和 \"缩放\" 切换按钮都是活动的."

msgid ""
"5. Press the key button. Keys will be inserted for all selected parts "
"storing their current arrangement. This pose can now be recalled when "
"necessary in your game by playing the \"rest\" animation you've created."
msgstr ""
"5. 按下关键帧按钮。关键帧将插入所有选择的部件，以存储它们的当前布局。现在，当"
"你需要的时候，你可以通过播放你创建的“放松”动画来再次调出你的姿势。"

msgid "Modifying rotation only"
msgstr "只修改旋转"

msgid ""
"When animating a cutout rig, often it's only the rotation of the nodes that "
"needs to change. Location and scale are rarely used."
msgstr "当制作剪纸动画绑定时, 通常只需要改变节点的旋转. 很少使用位置和比例."

msgid ""
"So when inserting keys, you might find it convenient to have only the "
"\"rot\" toggle active most of the time:"
msgstr ""
"因此, 在插入键时, 你可能会发现在大多数时间里只有 \"rot\" 切换键处于激活状态, "
"会很方便:"

msgid ""
"This will avoid the creation of unwanted animation tracks for position and "
"scale."
msgstr "这将避免为坐标和缩放创建不必要的动画轨道."

msgid "Keyframing IK chains"
msgstr "关键帧IK链"

msgid ""
"When editing IK chains, it's not necessary to select the whole chain to add "
"keyframes. Selecting the endpoint of the chain and inserting a keyframe will "
"automatically insert keyframes for all other parts of the chain too."
msgstr ""
"编辑IK链时, 不需要选择整个链来添加关键帧. 选择链的端点并插入关键帧将自动为链"
"的所有其他部分插入关键帧."

msgid "Visually move a sprite behind its parent"
msgstr "视觉上移动父级后面的精灵"

msgid ""
"Sometimes it is necessary to have a node change its visual depth relative to "
"its parent node during an animation. Think of a character facing the camera, "
"who pulls something out from behind his back and holds it out in front of "
"him. During this animation the whole arm and the object in his hand would "
"need to change their visual depth relative to the body of the character."
msgstr ""
"有时, 在动画过程中, 需要让节点相对于其父节点更改其可视深度. 想象一个面对镜头"
"的角色, 他从背后拿出一个东西放在面前. 在这个动画过程中, 整个手臂和他手中的物"
"体都需要改变相对于角色身体的视觉深度."

msgid ""
"To help with this there's a keyframable \"Behind Parent\" property on all "
"Node2D-inheriting nodes. When planning your rig, think about the movements "
"it will need to perform and give some thought to how you'll use \"Behind "
"Parent\" and/or RemoteTransform2D nodes. They provide overlapping "
"functionality."
msgstr ""
"为了帮助解决这个问题，在所有 Node2D 的派生节点上都有一个可制作关键帧"
"的“Behind Parent”（在父级之后）属性。规划绑定时，请考虑它需要执行的动作，并考"
"虑如何使用“Behind Parent”和/或 RemoteTransform2D 节点。它们提供重叠的功能。"

msgid "Setting easing curves for multiple keys"
msgstr "为多个关键帧设置缓动曲线"

msgid "To apply the same easing curve to multiple keyframes at once:"
msgstr "要将同一缓动曲线同时应用于多个关键帧:"

msgid "Select the relevant keys."
msgstr "选择相关的关键帧."

msgid ""
"Click on the pencil icon in the bottom right of the animation panel. This "
"will open the transition editor."
msgstr "点击动画面板右下角的铅笔图标. 这将打开过渡编辑器."

msgid "In the transition editor, click on the desired curve to apply it."
msgstr "在过渡编辑器中, 点击所需曲线进行应用."

msgid "2D Skeletal deform"
msgstr "2D 骨架变形"

msgid ""
"Skeletal deform can be used to augment a cutout rig, allowing single pieces "
"to deform organically (e.g. antennae that wobble as an insect character "
"walks)."
msgstr ""
"骨架变形（Skeletal Deform）可以用来增强剪纸绑定，允许单个部件有组织地变形（例"
"如，像昆虫走路时摆动的触角一样）。"

msgid ""
"This process is described in a :ref:`separate tutorial <doc_2d_skeletons>`."
msgstr "这个过程在\\ :ref:`单独的教程 <doc_2d_skeletons>`\\ 中讲述。"

msgid "Translation status"
msgstr "翻译状态"
