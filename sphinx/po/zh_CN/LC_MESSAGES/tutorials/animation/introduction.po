# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to the animation features"
msgstr "动画功能介绍"

msgid ""
"The :ref:`class_AnimationPlayer` node allows you to create anything from "
"simple to complex animations."
msgstr ":ref:`class_AnimationPlayer` 节点允许您创建从简单到复杂的任何动画。"

msgid "In this guide you learn to:"
msgstr "在本指南中，您将学会："

msgid "Work with the Animation Panel"
msgstr "使用动画面板"

msgid "Animate any property of any node"
msgstr "使任何节点的任何属性变成动画"

msgid "Create a simple animation"
msgstr "创建简单的动画"

msgid "Call functions with the powerful Call Function Tracks"
msgstr "使用功能强大的函数调用轨道调用函数"

msgid ""
"In Godot, you can animate anything available in the Inspector, such as Node "
"transforms, sprites, UI elements, particles, visibility and color of "
"materials, and so on. You can also modify values of script variables and "
"call any function."
msgstr ""
"在 Godot 中，你可以对“检查器”中可用的任何内容设置动画，例如 Node 的变换、精"
"灵、UI 元素、粒子、可见性、材质的颜色等等。您还可以修改脚本变量的值、调用任何"
"函数。"

msgid "Create an AnimationPlayer node"
msgstr "创建 AnimationPlayer 节点"

msgid ""
"To use the animation tools we first have to create an :ref:"
"`class_AnimationPlayer` node."
msgstr ""
"要使用动画工具, 我们首先必须创建一个 :ref:`class_AnimationPlayer` 节点."

msgid ""
"The AnimationPlayer node type is the data container for your animations. One "
"AnimationPlayer node can hold multiple animations, that can automatically "
"transition to one another."
msgstr ""
"AnimationPlayer节点类型是动画的数据容器. 一个AnimationPlayer节点可以保存多个"
"动画, 这些动画可以自动相互转换."

msgid "The AnimationPlayer node"
msgstr "AnimationPlayer节点"

msgid ""
"After creating one click on the AnimationPlayer node in the Node tab to open "
"the Animation Panel at the bottom of the viewport."
msgstr "创建后, 单击节点选项卡中的AnimationPlayer节点, 打开视口底部的动画面板."

msgid "The animation panel position"
msgstr "动画面板位置"

msgid "It consists of four parts:"
msgstr "它由四部分组成:"

msgid "The animation panel"
msgstr "动画面板"

msgid "Animation controls (i.e. add, load, save, and delete animations)"
msgstr "动画控件(即添加, 加载, 保存和删除动画)"

msgid "The tracks listing"
msgstr "轨道列表"

msgid "The timeline with keyframes"
msgstr "带有关键帧的时间轴"

msgid ""
"The timeline and track controls, where you can zoom the timeline and edit "
"tracks for example."
msgstr "时间轴和轨道控件, 例如, 您可以在其中缩放时间轴和编辑轨道."

msgid "Computer animation relies on keyframes"
msgstr "计算机动画依赖于关键帧"

msgid "A keyframe defines the value of a property at a certain point in time."
msgstr "关键帧定义属性在某一时间点的值."

msgid ""
"Diamond shapes represent keyframes in the timeline. A line between two "
"keyframes indicates that the value hasn't changed."
msgstr "菱形代表时间轴中的关键帧. 两个关键帧之间的线表示该值未更改."

msgid "Keyframes in Godot"
msgstr "Godot中的关键帧"

msgid ""
"The engine interpolates values between keyframes, resulting in a gradual "
"change in values over time."
msgstr "引擎在关键帧之间插入值, 导致值随时间逐渐变化."

msgid "Two keyframes are all it takes to obtain a smooth motion"
msgstr "只需两个关键帧就可以获得一个平滑运动"

msgid ""
"The timeline lets you insert keyframes and change their timing. It also "
"defines how long the animation is."
msgstr "时间轴可以让你插入关键帧并更改它们的时序. 它还定义动画的时间."

msgid "The timeline in the animation panel"
msgstr "动画面板中的时间轴"

msgid ""
"Each line of the Animation Panel is an animation track. Normal and Transform "
"tracks reference node properties. Their name or id is a path to the node and "
"the affected property."
msgstr ""
"动画面板的每一行都是一个动画轨道. 普通和转换轨道引用节点属性. 它们的名称或id"
"是指向节点和受影响属性的路径."

msgid "Example of Normal animation tracks"
msgstr "普通动画轨道的示例"

msgid ""
"If you animate the wrong property, you can edit a track's path anytime. "
"Double click on it and type the new path. Play the animation using the "
"\"Play from beginning\" button |Play from beginning| (or pressing :kbd:"
"`Shift + D` on keyboard) to see the changes instantly."
msgstr ""
"如果你的动画属性错误, 你可以随时编辑轨道路径. 双击它并输入新的路径. 使用 \"从"
"头开始播放\" 按钮|从头开始播放|(或按键盘上的 :kbd:`Shift + D` )播放动画, 可以"
"立即看到变化."

msgid "Play from beginning"
msgstr "从头开始播放"

msgid "Tutorial: Creating a simple animation"
msgstr "教程：创建简单的动画"

msgid "Scene setup"
msgstr "场景设置"

msgid ""
"For this tutorial, we'll create a Sprite node with an AnimationPlayer as its "
"child. We will animate the sprite to move between two points on the screen."
msgstr ""
"在本教程中，我们将创建一个 AnimationPlayer 节点，并将精灵（Sprite）节点作为其"
"子节点。我们会让这个精灵在屏幕上的两点之间进行移动。"

msgid "Our scene setup"
msgstr "我们的场景设置"

msgid ""
"AnimationPlayer inherits from Node instead of Node2D or Spatial, which means "
"that the child nodes will not inherit the transform from the parent nodes "
"due to a bare Node being present in the hierarchy."
msgstr ""
"AnimationPlayer 继承自 Node 而不是 Node2D 或者 Spatial。因为层级中间出现了普"
"通的 Node 节点，所以它的子节点不会继承父节点的变换。"

msgid ""
"Therefore, it is not recommended to add nodes that have a 2D/3D transform as "
"a child of an AnimationPlayer node."
msgstr ""
"所以，不建议把具有 2D 或者 3D 变换的节点设置成 AnimationPlayer 节点的子节点。"

msgid ""
"The sprite holds an image texture. We animate that sprite to move between "
"two points on the screen. For this tutorial, use the default Godot icon as "
"the sprite's texture. As a starting point, move the sprite to a left "
"position on the screen."
msgstr ""
"精灵拥有图片纹理，我们会让它在屏幕上的两点之间做移动动画。本教程使用默认的 "
"Godot 图标作为该精灵的纹理。将精灵移动到屏幕左侧作为起点。"

msgid ""
"Select the AnimationPlayer node, then click the \"Animation\" button in the "
"animation editor. From the list select \"New\" (|Add Animation|) to add a "
"new animation. And Enter a name for the animation in the dialog box."
msgstr ""
"选中 AnimationPlayer 节点，然后点击动画编辑器中的“动画”按钮。从列表中选择“新"
"建”（ |Add Animation| ）来添加一个新的动画，并在对话框中为该动画输入名称。"

msgid "Add Animation"
msgstr "添加动画"

msgid "Add a new animation"
msgstr "添加新动画"

msgid "Adding a track"
msgstr "添加轨道"

msgid ""
"To add a new track for our sprite, select it and take a look in the toolbar:"
msgstr "要为我们的精灵添加一个新的轨道, 选择它并在工具栏中查看:"

msgid "Convenience buttons"
msgstr "方便按钮"

msgid ""
"These switches and buttons allow you to add keyframes for the selected "
"node's location, rotation, and scale respectively."
msgstr "这些开关和按钮允许您为选择的节点的位置, 旋转和比例分别添加关键帧."

msgid ""
"Deselect rotation, because we are only interested in the location of our "
"sprite for this tutorial and click on the key button."
msgstr "取消选择旋转, 因为我们只对本教程的精灵位置感兴趣, 并单击键按钮."

msgid ""
"As we don't have a track already set up for the transform/location property, "
"Godot asks whether it should set it up for us. Click **Create**."
msgstr ""
"由于我们还没有为变换或位置属性设置轨道,Godot询问是否应该设置, 点击 "
"**Create** ."

msgid ""
"This creates a new track and our first keyframe at the beginning of the "
"timeline:"
msgstr "这会在时间轴的开头创建一个新轨道和第一个关键帧:"

msgid "The sprite track"
msgstr "精灵轨道"

msgid "The second keyframe"
msgstr "第二个关键帧"

msgid ""
"Now we need to set the destination where our sprite should be headed and how "
"much time it takes to get there."
msgstr "现在我们需要设置我们的精灵应该到达的目的地以及到达那里需要多长时间."

msgid ""
"Let's say, we want it to take 2 seconds to go to the other point. By default "
"the animation is set to last only 1 second, so change this in the timeline "
"controls in animation panel's lower panel to 2."
msgstr ""
"让我们说, 我们希望它需要2秒才能到达另一个点. 默认情况下, 动画设置为仅持续1"
"秒, 因此在动画面板下方面板的时间轴控件中将其更改为2."

msgid "Animation length"
msgstr "动画长度"

msgid ""
"Click on the timeline header near the 2-second mark and move the sprite to "
"the target destination on the right side."
msgstr "点击2秒附近的时间线标记, 将精灵移动到右侧的目标目的地."

msgid ""
"Again, click the key button in the toolbar. This creates our second keyframe."
msgstr "再次单击工具栏中的键按钮. 这创建了我们的第二个关键帧."

msgid "Run the animation"
msgstr "运行动画"

msgid "Click on the \"Play from beginning\" (|Play from beginning|) button."
msgstr "点击“从头开始播放”（\\ |Play from beginning|\\ ）按钮。"

msgid "Yay! Our animation runs:"
msgstr "好极了！ 我们的动画运行:"

msgid "The animation"
msgstr "动画"

msgid "Back and forth"
msgstr "来来回回"

msgid ""
"Godot has an additional feature here. Like said before, Godot always "
"calculates the frames between two keyframes. In a loop, the first keyframe "
"is also the last keyframe, if no keyframe is specified at the end."
msgstr ""
"Godot在这里还有一个额外功能. 就像之前说的,Godot总是计算两个关键帧之间的帧数. "
"在一个循环中, 如果最后没有指定关键帧, 第一个关键帧将也是最后一个关键帧."

msgid "Animation loop"
msgstr "动画循环"

msgid ""
"If you set the animation length to 4 seconds now, the animation moves back "
"and forth. You can change this behavior if you change the track's loop mode. "
"This is covered in the next chapter."
msgstr ""
"如果你现在将动画长度设置为4秒, 动画就会来回移动. 如果改变轨道的循环模式, 你可"
"以改变这种行为. 这将在下一章中介绍."

msgid "Track settings"
msgstr "轨道设置"

msgid ""
"Each track has a settings panel at the end, where you can set the update "
"mode, the track interpolation, and the loop mode."
msgstr "每条轨道最后都有一个设置面板，可以设置更新模式, 轨道插值, 循环模式。"

msgid ""
"The update mode of a track tells Godot when to update the property values. "
"This can be:"
msgstr "轨道的更新模式告诉 Godot 何时更新属性值。这可以是："

msgid "**Continuous:** Update the property on each frame."
msgstr "**连续：**\\ 每帧都更新属性。"

msgid "**Discrete:** Only update the property on keyframes."
msgstr "**离散：**\\ 仅在位于关键帧时更新属性。"

msgid ""
"**Trigger:** Only update the property on keyframes or triggers. Triggers are "
"a type of keyframe used by the ``current_animation`` property of a :ref:"
"`class_AnimationPlayer`, and Animation Playback tracks."
msgstr ""
"**触发器：**\\ 仅在位于关键帧或触发器时更新属性。触发器是一种关键帧的类"
"型，\\ :ref:`class_AnimationPlayer` 的 ``current_animation`` 属性和动画播放轨"
"道都会用到。"

msgid ""
"**Capture:** If the first keyframe's time is greater than ``0.0``, the "
"current value of the property will be remembered and will be blended with "
"the first animation key. For example, you could use the Capture mode to move "
"a node that's located anywhere to a specific location."
msgstr ""
"**捕获：**\\ 如果第一个关键帧的时间大于 ``0.0``\\ ，就会记录该属性的当前值，"
"并将其与第一个动画帧混合。例如，利用“捕获”模式，你可以将处于任意位置的节点移"
"动到特定的位置。"

msgid "Track mode"
msgstr "轨道模式"

msgid ""
"In normal animations, you usually use \"Continuous\". The other types are "
"used to script complex animations."
msgstr "在普通动画中，你通常使用“连续”。其他类型可用于编排复杂动画。"

msgid ""
"The interpolation tells Godot how to calculate the frame values between the "
"keyframes. These interpolation modes are supported:"
msgstr "插值告诉 Godot 如何计算关键帧之间的帧值。支持的插值模式有："

msgid "Nearest: Set the nearest keyframe value"
msgstr "临近：设置为最接近的关键帧的值"

msgid ""
"Linear: Set the value based on a linear function calculation between the two "
"keyframes"
msgstr "线性：使用线性函数计算两个关键帧之间的值"

msgid ""
"Cubic: Set the value based on a cubic function calculation between the two "
"keyframes"
msgstr "三次方：使用三次函数计算两个关键帧之间的值"

msgid "Track interpolation"
msgstr "轨道插值"

msgid ""
"Cubic interpolation leads to a more natural movement, where the animation is "
"slower at a keyframe and faster between keyframes. This is usually used for "
"character animation. Linear interpolation creates more of a robotic movement."
msgstr ""
"立方插值导致更自然的运动, 其中动画在关键帧处较慢而在关键帧之间更快. 这通常用"
"于角色动画. 线性插值创造了更多的机器人运动."

msgid ""
"Godot supports two loop modes, which affect the animation if it's set to "
"loop:"
msgstr "Godot支持两种循环模式, 如果将其设置为循环, 则会影响动画:"

msgid "Loop modes"
msgstr "循环模式"

msgid ""
"Clamp loop interpolation: When this is selected, the animation stops after "
"the last keyframe for this track. When the first keyframe is reached again, "
"the animation will reset to its values."
msgstr ""
"钳位循环插值: 选择此选项后, 动画将在此轨道的最后一个关键帧之后停止. 再次到达"
"第一个关键帧时, 动画将重置为其值."

msgid ""
"Wrap loop interpolation: When this is selected, Godot calculates the "
"animation after the last keyframe to reach the values of the first keyframe "
"again."
msgstr ""
"包循环插值: 当选择此项时,Godot会在最后一个关键帧之后计算动画, 以再次达到第一"
"个关键帧的值."

msgid "Keyframes for other properties"
msgstr "其他属性的关键帧"

msgid ""
"Godot doesn't restrict you to only edit transform properties. Every property "
"can be used as a track where you can set keyframes."
msgstr "Godot不限制您只编辑变换属性. 每个属性都可以用作可以设置关键帧的轨道."

msgid ""
"If you select your sprite while the animation panel is visible, you get a "
"small keyframe button for all the sprite's properties. Click on this button "
"and Godot automatically adds a track and keyframe to the current animation."
msgstr ""
"如果你在动画面板可见时选择你的精灵, 会获得一个小的关键帧按钮, 用于显示精灵的"
"所有属性. 点击这个按钮,Godot就会自动为当前动画添加一个轨道和关键帧."

msgid "Edit keyframes"
msgstr "编辑关键帧"

msgid ""
"For advanced use and to edit keyframes in detail, You can click on them to "
"bring up the keyframe editor in the inspector. You can use this to directly "
"edit its values."
msgstr ""
"对于高级使用和详细编辑关键帧，您可以点击它们打开检查器中的关键帧编辑器，可以"
"用它来直接编辑值。"

msgid "Keyframe editor editing a key"
msgstr "关键帧编辑器编辑一个键"

msgid ""
"Additionally, you can also edit the easing value for this keyframe by "
"clicking and dragging the easing setting. This tells Godot, how to change "
"the property values when it reaches this keyframe."
msgstr ""
"此外，还可以通过单击并拖动缓动设置来编辑此关键帧的缓动值。这将告诉 Godot，当"
"它到达此关键帧时如何更改属性值。"

msgid ""
"You usually tweak your animations this way, when the movement doesn't \"look "
"right\"."
msgstr "当这个动作“看起来不正确”时，您通常会以这种方式调整您的动画。"

msgid "Advanced: Call Method tracks"
msgstr "进阶：方法调用轨道"

msgid ""
"Godot's animation engine doesn't stop here. If you're already comfortable "
"with Godot's scripting language :ref:`doc_gdscript` and :doc:`/classes/"
"index` you know that each node type is a class and has a bunch of callable "
"methods."
msgstr ""
"Godot 的动画引擎并不止于此。如果你已经熟悉了 Godot 的脚本语言 :ref:"
"`doc_gdscript` 和 :doc:`/classes/index`\\ ，你就知道每个节点类型都是一个类，"
"并且有一堆可调用的方法。"

msgid ""
"For example, the :ref:`class_AudioStreamPlayer` node type has a method to "
"play an audio stream."
msgstr "例如 :ref:`class_AudioStreamPlayer` 节点类型有一个播放音频流的方法."

msgid ""
"Wouldn't it be great to use a method at a specific keyframe in an animation? "
"This is where \"Call Method Tracks\" come in handy. These tracks reference a "
"node again, this time without a reference to a property. Instead, a keyframe "
"holds the name and arguments of a method, that Godot should call when it "
"reaches this keyframe."
msgstr ""
"在动画中的特定关键帧中使用一个方法不是很好吗？这时,\"调用方法轨道\" 就派上用"
"场. 这些轨道再次引用一个节点, 没有引用属性, 取而代之的是, 一个关键帧保存着一"
"个方法的名称和参数, 当Godot到达这个关键帧时, 它将调用这个方法."

msgid ""
"To demonstrate, we're going to use a call method track to play audio at a "
"specific keyframe. Normally to play audio you should use an audio track, but "
"for the sake of demonstrating methods we're going to do it this way."
msgstr ""
"为了演示, 我们将使用调用方法轨道在特定关键帧处播放音频. 通常, 要播放音频, 你"
"应该使用音轨, 但是为了演示方法, 我们将采用这种方式."

msgid ""
"Add a :ref:`class_AudioStreamPlayer` to the Scene Tree and setup a stream "
"using an audio file you put in your project."
msgstr ""
"在场景树中添加 :ref:`class_AudioStreamPlayer`, 并使用放在项目中的音频文件设置"
"流."

msgid ""
"Click on \"Add track\" (|Add track|) on the animation panel's track controls."
msgstr "点击动画面板轨道控制上的“添加轨道”（\\ |Add track|\\ ）。"

msgid "Add track"
msgstr "添加轨道"

msgid "Select \"Add Call Method Track\" from the list of possible track types."
msgstr "从可能的轨道类型列表中选择 \"添加调用方法轨道\"."

msgid "Add Call Method Track"
msgstr "添加调用方法轨道"

msgid ""
"Select the :ref:`class_AudioStreamPlayer` node in the selection window. "
"Godot adds the track with the reference to the node."
msgstr ""
"在选择窗口中选择 :ref:`class_AudioStreamPlayer` 节点. Godot添加了轨道节点的引"
"用."

msgid "Select AudioStreamPlayer"
msgstr "选择AudioStreamPlayer"

msgid ""
"Right click the timeline where Godot should play the sample and click the "
"\"Insert Key\" option. This will bring up a list of methods that can be "
"called for the AudioStreamPlayer node. Select the first one."
msgstr ""
"右键单击 Godot 播放示例的时间线, 然后单击 \"插入关键帧\" 选项. 这将显示可为 "
"AudioStreamPlayer 节点调用的方法的列表. 选择第一个."

msgid ""
"When Godot reaches the keyframe, Godot calls the :ref:"
"`class_AudioStreamPlayer` node's \"play\" function and the stream plays."
msgstr ""
"当Godot到达关键帧时,Godot调用 :ref:`class_AudioStreamPlayer` 节点的 \"play\" "
"函数, 播放流媒体."

msgid ""
"You can change its position by dragging it on the timeline, you can also "
"click on the keyframe and use the keyframe settings in the inspector."
msgstr ""
"你可以通过在时间轴上拖动它来更改其位置, 也可以单击关键帧并使用检查器中的关键"
"帧设置."

msgid "Using RESET tracks"
msgstr "使用 RESET 轨道"

msgid ""
"You can set up a special *RESET* animation to contain the \"default pose\". "
"This is used to ensure that the default pose is restored when you save the "
"scene and open it again in the editor."
msgstr ""
"你可以设置一个特殊的 *RESET*\\ （重置）动画来包含“默认姿势”。这样就可以保证在"
"保存场景并重新在编辑器中打开时，会恢复默认姿势。"

msgid ""
"For existing tracks, you can add an animation called \"RESET\" (case-"
"sensitive), then add tracks for each property that you want to reset. The "
"only keyframe should be at time 0, and give it the desired default value for "
"each track."
msgstr ""
"对于已存在的轨道，你可以添加一个名为“RESET”（大小写敏感）的动画，然后为每一个"
"你希望重置的属性添加轨道。应该只在时间为 0 处存在一个关键帧，其值为每条轨道所"
"期望的默认值。"

msgid ""
"If AnimationPlayer's **Reset On Save** property is set to ``true``, the "
"scene will be saved with the effects of the reset animation applied (as if "
"it had been seeked to time ``0.0``). This only affects the saved file – the "
"property tracks in the editor stay where they were."
msgstr ""
"如果 AnimationPlayer 的 **Reset On Save**\\ （保存时重置）属性为 "
"``true``\\ ，场景在保存时会应用重置动画的效果（相当于寻道到 ``0.0`` 时间点的"
"效果）。只有保存的文件会受到影响——编辑器中的属性轨道还是会保持原样。"

msgid ""
"If you want to reset the tracks in the editor, select the AnimationPlayer "
"node, open the **Animation** bottom panel then choose **Apply Reset** in the "
"animation editor's **Animation** dropdown menu."
msgstr ""
"如果你想要在编辑器中重置轨道，请选中 AnimationPlayer 节点，打开\\ **动画**\\ "
"底部面板，然后选择动画编辑器\\ **动画**\\ 下拉菜单中的\\ **应用重置**\\ 。"

msgid ""
"When adding tracks on new animations, the editor will ask you to "
"automatically create a RESET track when using the keyframe icon next to a "
"property in the inspector. This does not apply on tracks created with Godot "
"versions prior to 3.4, as the animation reset track feature was added in 3.4."
msgstr ""
"为新建的动画添加轨道时，如果使用的是检查器中属性旁的关键帧图标，编辑器会询问"
"是否自动添加一条 RESET 轨道。这对于使用 3.4 版本之前的 Godot 创建的轨道并不适"
"用，因为动画重置轨道功能是在 3.4 版本中加入的。"

msgid "Translation status"
msgstr "翻译状态"
