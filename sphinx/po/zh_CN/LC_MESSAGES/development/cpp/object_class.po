# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Object class"
msgstr "Object 类"

msgid ""
"This page describes the C++ implementation of objects in Godot. Looking for "
"the Object class reference? :ref:`Have a look here. <class_Object>`"
msgstr ""
"本页介绍了Godot中对象的C++实现. 寻找Object类参考？ :ref:`请看这里. "
"<class_Object>`"

msgid "General definition"
msgstr "一般定义"

msgid ""
":ref:`Object <class_object>` is the base class for almost everything. Most "
"classes in Godot inherit directly or indirectly from it. Objects provide "
"reflection and editable properties, and declaring them is a matter of using "
"a single macro like this."
msgstr ""
":ref:`Object <class_object>` 几乎是所有类的基类.Godot中的大多数类都直接或间接"
"继承自它.Object对象提供反射和可编辑的属性, 声明它们就像使用单个宏一样."

msgid "This makes Objects gain a lot of functionality, like for example"
msgstr "这使得 Object 获得了很多功能，例如"

msgid "References:"
msgstr "参考："

msgid ""
"`core/object.h <https://github.com/godotengine/godot/blob/3.x/core/object."
"h>`__"
msgstr ""
"`core/object.h <https://github.com/godotengine/godot/blob/3.x/core/object."
"h>`__"

msgid "Registering an Object"
msgstr "注册对象"

msgid ""
"ClassDB is a static class that holds the entire list of registered classes "
"that inherit from Object, as well as dynamic bindings to all their methods "
"properties and integer constants."
msgstr ""
"ClassDB 是一个静态类，其中包含从 Object 继承的所有已注册类的完整列表，以及对"
"其所有方法属性和整数常量的动态绑定。"

msgid "Classes are registered by calling:"
msgstr "通过以下调用来注册类："

msgid ""
"Registering it will allow the class to be instanced by scripts, code, or "
"creating them again when deserializing."
msgstr "注册它将允许通过脚本、代码实例化类，或在反序列化时再次创建它们。"

msgid "Registering as virtual is the same but it can't be instanced."
msgstr "注册为虚是相同的，但它不能实例化。"

msgid ""
"Object-derived classes can override the static function ``static void "
"_bind_methods()``. When one class is registered, this static function is "
"called to register all the object methods, properties, constants, etc. It's "
"only called once. If an Object derived class is instanced but has not been "
"registered, it will be registered as virtual automatically."
msgstr ""
"Object 派生类可以重写静态函数 ``static void _bind_methods()``\\ 。当类被注册"
"时，将调用此静态函数来注册所有对象方法、属性、常量等。它只被调用一次。如果 "
"Object 派生类已实例化但尚未注册，则它将自动注册为虚。"

msgid ""
"Inside ``_bind_methods``, there are a couple of things that can be done. "
"Registering functions is one:"
msgstr "在 ``_bind_methods`` 里面, 有几件事可以做. 注册函数是一个:"

msgid "Default values for arguments can be passed in reverse order:"
msgstr "参数的默认值可以按相反的顺序传递:"

msgid ""
"``D_METHOD`` is a macro that converts \"methodname\" to a StringName for "
"more efficiency. Argument names are used for introspection, but when "
"compiling on release, the macro ignores them, so the strings are unused and "
"optimized away."
msgstr ""
"``D_METHOD`` 是一个宏, 它将 ``methodname`` 转换为StringName以提高效率. 参数名"
"称用于自我检查, 但在发布时进行编译时, 宏会忽略它们, 因此未使用字符串从而对其"
"进行了优化."

msgid "Check ``_bind_methods`` of Control or Object for more examples."
msgstr "有关更多示例, 请查看Control或Object的 ``_bind_methods`` ."

msgid ""
"If just adding modules and functionality that is not expected to be "
"documented as thoroughly, the ``D_METHOD()`` macro can safely be ignored and "
"a string passing the name can be passed for brevity."
msgstr ""
"如果只是添加不希望被彻底记录的模块和功能, 可以安全地忽略 ``D_METHOD()`` 宏, "
"并且为了简洁起见, 可以传递传递名称的字符串."

msgid ""
"`core/class_db.h <https://github.com/godotengine/godot/blob/3.x/core/"
"class_db.h>`__"
msgstr ""
"`core/class_db.h <https://github.com/godotengine/godot/blob/3.x/core/"
"class_db.h>`__"

msgid "Constants"
msgstr "常量"

msgid "Classes often have enums such as:"
msgstr "类通常有枚举, 例如:"

msgid ""
"For these to work when binding to methods, the enum must be declared "
"convertible to int, for this a macro is provided:"
msgstr ""
"为了使这些在绑定到方法时起作用, 枚举必须被声明为可转换为int, 为此提供了一个"
"宏:"

msgid "The constants can also be bound inside ``_bind_methods``, by using:"
msgstr "常量也可以绑定在 ``_bind_methods`` 中, 通过使用:"

msgid "Properties (set/get)"
msgstr "属性（设置/获取）"

msgid "Objects export properties, properties are useful for the following:"
msgstr "对象导出属性, 这些属性可用于以下用途:"

msgid "Serializing and deserializing the object."
msgstr "序列化和反序列化对象."

msgid "Creating a list of editable values for the Object derived class."
msgstr "为Object派生类创建可编辑值列表."

msgid ""
"Properties are usually defined by the PropertyInfo() class. Usually "
"constructed as:"
msgstr "属性通常由PropertyInfo()类定义. 通常构造为:"

msgid "For example:"
msgstr "例如:"

msgid ""
"This is an integer property, named \"amount\", hint is a range, range goes "
"from 0 to 49 in steps of 1 (integers). It is only usable for the editor "
"(edit value visually) but won't be serialized."
msgstr ""
"这是一个整数属性，名为“amount”，提示的是一个范围，从 0 到 49，步长为 1（整"
"数）。它仅适用于编辑器（可视化地编辑值），但不会被序列化。"

msgid "Another example:"
msgstr "另一个示例:"

msgid ""
"This is a string property, can take any string but the editor will only "
"allow the defined hint ones. Since no usage flags were specified, the "
"default ones are PROPERTY_USAGE_STORAGE and PROPERTY_USAGE_EDITOR."
msgstr ""
"这是一个字符串属性, 可以接受任何字符串, 但编辑器只允许定义的提示字符串. 由于"
"未指定使用标志, 因此默认值为 ``PROPERTY_USAGE_STORAGE`` 和 "
"``PROPERTY_USAGE_EDITOR``."

msgid ""
"There are plenty of hints and usage flags available in object.h, give them a "
"check."
msgstr "在object.h中有很多提示和用法标记, 请对其进行检查."

msgid ""
"Properties can also work like C# properties and be accessed from script "
"using indexing, but this usage is generally discouraged, as using functions "
"is preferred for legibility. Many properties are also bound with categories, "
"such as \"animation/frame\" which also make indexing impossible unless using "
"operator []."
msgstr ""
"属性也可以像C#属性一样工作, 并且可以使用索引从脚本访问, 但通常不鼓励这种用"
"法, 因为使用函数是易读性的首选. 许多属性也与类别绑定, 例如 ``动画/帧``, 除非"
"使用操作符 ``[]``, 否则也无法建立索引."

msgid ""
"From ``_bind_methods()``, properties can be created and bound as long as set/"
"get functions exist. Example:"
msgstr ""
"从 ``_bind_methods()`` 开始, 只要存在set/get函数, 就可以创建和绑定属性. 例如:"

msgid "This creates the property using the setter and the getter."
msgstr "这将使用setter和getter创建属性."

msgid "Binding properties using ``_set``/``_get``/``_get_property_list``"
msgstr "使用 ``_set``/``_get``/``_get_property_list`` 绑定属性"

msgid ""
"An additional method of creating properties exists when more flexibility is "
"desired (i.e. adding or removing properties on context)."
msgstr ""
"当需要更大的灵活性时(即在上下文中添加或删除属性), 存在另一种创建属性的方法."

msgid ""
"The following functions can be overridden in an Object derived class, they "
"are NOT virtual, DO NOT make them virtual, they are called for every "
"override and the previous ones are not invalidated (multilevel call)."
msgstr ""
"可以在 Object 派生类中重写以下函数，它们不是虚函数，不要将它们设置为虚，它们"
"会在每次重写时调用，而之前的函数不会失效（多级调用）。"

msgid ""
"This is also a little less efficient since ``p_property`` must be compared "
"against the desired names in serial order."
msgstr "由于 ``p_property`` 必须按顺序与所需的名称进行比较, 因此效率也较低."

msgid "Dynamic casting"
msgstr "动态转型"

msgid ""
"Godot provides dynamic casting between Object-derived classes, for example:"
msgstr "Godot在Object派生类之间提供动态转换, 例如:"

msgid ""
"If cast fails, NULL is returned. This system uses RTTI, but it also works "
"fine (although a bit slower) when RTTI is disabled. This is useful on "
"platforms where a small binary size is ideal, such as HTML5 or consoles "
"(with low memory footprint)."
msgstr ""
"如果强制转换失败, 则返回NULL. 这个系统使用RTTI, 但是当RTTI被禁用时它也可以正"
"常工作(虽然有点慢). 这在二进制大小较小的平台上非常有用, 例如HTML5或游戏主机"
"(具有较小的内存占用)."

msgid "Signals"
msgstr "信号"

msgid ""
"Objects can have a set of signals defined (similar to Delegates in other "
"languages). Connecting to them is rather easy:"
msgstr "对象可以定义一组信号(类似于其他语言的代理). 连接它们很容易:"

msgid ""
"The method ``_node_entered_tree`` must be registered to the class using "
"``ClassDB::bind_method`` (explained before)."
msgstr ""
"``_node_entered_tree`` 方法必须使用 ``ClassDB::bind_method`` (前面解释过)注册"
"到类."

msgid ""
"Adding signals to a class is done in ``_bind_methods``, using the "
"``ADD_SIGNAL`` macro, for example:"
msgstr "使用 ``ADD_SIGNAL`` 宏在 ``_bind_methods`` 中添加信号到类中, 例如:"

msgid "Notifications"
msgstr "通知"

msgid ""
"All objects in Godot have a :ref:`_notification "
"<class_Object_method__notification>` method that allows it to respond to "
"engine level callbacks that may relate to it. More information can be found "
"on the :ref:`doc_godot_notifications` page."
msgstr ""
"Godot 中的每个对象都实现了 :ref:`_notification "
"<class_Object_method__notification>` 方法。其目的是允许对象响应可能与之相关的"
"各种引擎级回调。更多信息可以在 :ref:`doc_godot_notifications` 页面查看。"

msgid "References"
msgstr "参考"

msgid ""
":ref:`Reference <class_reference>` inherits from Object and holds a "
"reference count. It is the base for reference counted object types. "
"Declaring them must be done using Ref<> template. For example:"
msgstr ""
":ref:`Reference <class_reference>` 继承自 Object 并保存引用计数。它是引用计数"
"对象类型的基础。声明时必须使用 Ref<> 模板。例如："

msgid ""
"``myref`` is reference counted. It will be freed when no more Ref<> "
"templates point to it."
msgstr "``myref`` 进行了引用计数。当没有其他 Ref<> 模板指向它时，它将被释放。"

msgid ""
"`core/reference.h <https://github.com/godotengine/godot/blob/3.x/core/"
"reference.h>`__"
msgstr ""
"`core/reference.h <https://github.com/godotengine/godot/blob/3.x/core/"
"reference.h>`__"

msgid "Resources:"
msgstr "资源："

msgid ""
":ref:`Resource <class_resource>` inherits from Reference, so all resources "
"are reference counted. Resources can optionally contain a path, which "
"reference a file on disk. This can be set with ``resource.set_path(path)``. "
"This is normally done by the resource loader though. No two different "
"resources can have the same path, attempt to do so will result in an error."
msgstr ""
":ref:`Resource <class_resource>` 继承自 Reference，因此所有资源都进行了引用计"
"数。资源可以选择包含引用磁盘上文件的路径。这可以用 ``resource."
"set_path(path)`` 设置。这通常由资源加载器完成。没有两个不同的资源可以具有相同"
"的路径，尝试这样做会导致错误。"

msgid "Resources without a path are fine too."
msgstr "资源也可以没有路径."

msgid ""
"`core/resource.h <https://github.com/godotengine/godot/blob/3.x/core/"
"resource.h>`__"
msgstr ""
"`core/resource.h <https://github.com/godotengine/godot/blob/3.x/core/"
"resource.h>`__"

msgid "Resource loading"
msgstr "资源加载"

msgid "Resources can be loaded with the ResourceLoader API, like this:"
msgstr "可以使用ResourceLoader API加载资源, 如下所示:"

msgid ""
"If a reference to that resource has been loaded previously and is in memory, "
"the resource loader will return that reference. This means that there can be "
"only one resource loaded from a file referenced on disk at the same time."
msgstr ""
"如果先前已加载对该资源的引用并且该引用在内存中, 则资源加载器将返回该引用. 这"
"意味着只能同时从磁盘上引用的文件加载一个资源."

msgid "resourceinteractiveloader (TODO)"
msgstr "resourceinteractiveloader(TODO)"

msgid ""
"`core/io/resource_loader.h <https://github.com/godotengine/godot/blob/3.x/"
"core/io/resource_loader.h>`__"
msgstr ""
"`core/io/resource_loader.h <https://github.com/godotengine/godot/blob/3.x/"
"core/io/resource_loader.h>`__"

msgid "Resource saving"
msgstr "资源保存"

msgid "Saving a resource can be done with the resource saver API:"
msgstr "可以使用资源保存器API保存资源:"

msgid ""
"Instance will be saved. Sub resources that have a path to a file will be "
"saved as a reference to that resource. Sub resources without a path will be "
"bundled with the saved resource and assigned sub-IDs, like ``res://"
"someresource.res::1``. This also helps to cache them when loaded."
msgstr ""
"实例将被保存。有文件路径的子资源将被保存为对该资源的引用。没有路径的子资源将"
"与保存的资源捆绑在一起，并分配子 ID，如 ``res://someresource.res::1``\\ 。这"
"也有助于在加载时对其进行缓存。"

msgid ""
"`core/io/resource_saver.h <https://github.com/godotengine/godot/blob/3.x/"
"core/io/resource_saver.h>`__"
msgstr ""
"`core/io/resource_saver.h <https://github.com/godotengine/godot/blob/3.x/"
"core/io/resource_saver.h>`__"

msgid "Translation status"
msgstr "翻译状态"
