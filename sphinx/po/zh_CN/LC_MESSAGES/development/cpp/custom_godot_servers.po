# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom Godot servers"
msgstr "自定义 Godot 服务器"

msgid "Introduction"
msgstr "前言"

msgid ""
"Godot implements multi-threading as servers. Servers are daemons which "
"manage data, process it, and push the result. Servers implement the mediator "
"pattern which interprets resource ID and process data for the engine and "
"other modules. In addition, the server claims ownership for its RID "
"allocations."
msgstr ""
"Godot将多线程实现为服务器. 服务器是管理数据, 处理数据和推送结果的守护进程. 服"
"务器实现中介模式, 该模式解释引擎和其他模块的资源ID和处理数据. 此外, 服务器声"
"明其RID分配的所有权."

msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to :ref:`doc_custom_modules_in_c++`."
msgstr ""
"本指南假设读者知道如何创建C++模块和Godot数据类型. 如果没有, 请参考 :ref:"
"`doc_custom_modules_in_c++`."

msgid "References"
msgstr "参考"

msgid ""
"`Why does Godot use servers and RIDs? <https://godotengine.org/article/why-"
"does-godot-use-servers-and-rids>`__"
msgstr ""
"`为什么Godot使用服务与RID ？ <https://godotengine.org/article/why-does-godot-"
"use-servers-and-rids>`__"

msgid "`Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`__"
msgstr "`单例模式 <https://en.wikipedia.org/wiki/Singleton_pattern>`__"

msgid "`Mediator pattern <https://en.wikipedia.org/wiki/Mediator_pattern>`__"
msgstr "`中介模式 <https://en.wikipedia.org/wiki/Mediator_pattern>`__"

msgid "What for?"
msgstr "可以做什么？"

msgid "Adding artificial intelligence."
msgstr "添加人工智能."

msgid "Adding custom asynchronous threads."
msgstr "添加自定义异步线程."

msgid "Adding support for a new input device."
msgstr "添加对新输入设备的支持."

msgid "Adding writing threads."
msgstr "添加写线程."

msgid "Adding a custom VoIP protocol."
msgstr "添加自定义 VoIP 协议。"

msgid "And more..."
msgstr "以及更多……"

msgid "Creating a Godot server"
msgstr "创建 Godot 服务器"

msgid ""
"At minimum, a server must have a static instance, a sleep timer, a thread "
"loop, an initialization state and a cleanup procedure."
msgstr ""
"服务器至少必须拥有静态的实例、睡眠计时器、线程循环、初始化状态、清理过程。"

msgid "Custom managed resource data"
msgstr "自定义托管资源数据"

msgid ""
"Godot servers implement a mediator pattern. All data types inherit "
"``RID_Data``. ``RID_Owner<MyRID_Data>`` owns the object when ``make_rid`` is "
"called. During debug mode only, RID_Owner maintains a list of RIDs. In "
"practice, RIDs are similar to writing object-oriented C code."
msgstr ""
"Godot 服务器实现了中介模式。所有数据类型都继承 ``RID_Data``\\ 。\\ "
"``RID_Owner <MyRID_Data>`` 在调用 ``make_rid`` 时拥有对象。仅在调试模式期间，"
"RID_Owner 维护 RID 列表。实际上，RID 类似于编写面向对象的 C 代码。"

msgid ":ref:`RID<class_rid>`"
msgstr ":ref:`RID <class_RID>`"

msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"

msgid "Registering the class in GDScript"
msgstr "在 GDScript 中注册类"

msgid ""
"Servers are allocated in ``register_types.cpp``. The constructor sets the "
"static instance and ``init()`` creates the managed thread; "
"``unregister_types.cpp`` cleans up the server."
msgstr ""
"服务器在 ``register_types.cpp`` 中分配。构造函数设置静态实例，\\ ``init()`` "
"创建托管线程；\\ ``unregister_types.cpp`` 清理服务器。"

msgid ""
"Since a Godot server class creates an instance and binds it to a static "
"singleton, binding the class might not reference the correct instance. "
"Therefore, a dummy class must be created to reference the proper Godot "
"server."
msgstr ""
"由于Godot服务类创建了一个实例并将其绑定到静态单例, 因此绑定该类可能不会引用正"
"确的实例. 因此, 必须创建一个虚拟类来引用正确的Godot服务."

msgid ""
"In ``register_server_types()``, ``Engine::get_singleton()->add_singleton`` "
"is used to register the dummy class in GDScript."
msgstr ""
"在 ``register_server_types()`` 中，\\ ``Engine :: get_singleton() -> "
"add_singleton`` 用于在 GDScript 中注册虚拟类。"

msgid ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "Bind methods"
msgstr "绑定方法"

msgid ""
"The dummy class binds singleton methods to GDScript. In most cases, the "
"dummy class methods wraps around."
msgstr "虚拟类将单例方法绑定到GDScript. 在大多数情况下, 虚拟类方法封装在内."

msgid "Binding Signals"
msgstr "绑定信号"

msgid ""
"It is possible to emit signals to GDScript by calling the GDScript dummy "
"object."
msgstr "可以通过调用GDScript虚拟对象向GDScript发出信号."

msgid "MessageQueue"
msgstr "MessageQueue"

msgid ""
"In order to send commands into SceneTree, MessageQueue is a thread-safe "
"buffer to queue set and call methods for other threads. To queue a command, "
"obtain the target object RID and use either ``push_call``, ``push_set``, or "
"``push_notification`` to execute the desired behavior. The queue will be "
"flushed whenever either ``SceneTree::idle`` or ``SceneTree::iteration`` is "
"executed."
msgstr ""
"为了将命令发送到SceneTree中,MessageQueue是线程安全的缓冲区, 用于将其他线程的"
"设置和调用方法排队. 要对命令进行排队, 请获取目标对象RID并使用 ``push_call``, "
"``push_set``, 或 ``push_notification`` 执行所需的行为. 每当执行 ``SceneTree::"
"idle`` 或 ``SceneTree::iteration`` 时, 都会刷新队列."

msgid "References:"
msgstr "参考："

msgid ""
"`core/message_queue.cpp <https://github.com/godotengine/godot/blob/3.x/core/"
"message_queue.cpp>`__"
msgstr ""
"`core/message_queue.cpp <https://github.com/godotengine/godot/blob/3.x/core/"
"message_queue.cpp>`__"

msgid "Summing it up"
msgstr "总结"

msgid "Here is the GDScript sample code:"
msgstr "这是GDScript示例代码:"

msgid "Notes"
msgstr "注意"

msgid ""
"The actual `Hilbert Hotel <https://en.wikipedia.org/wiki/"
"Hilbert%27s_paradox_of_the_Grand_Hotel>`__ is impossible."
msgstr ""
"实际的 `希尔伯特旅馆悖论 <https://en.wikipedia.org/wiki/"
"Hilbert%27s_paradox_of_the_Grand_Hotel>`__ 是不可能的."

msgid "Connecting signal example code is pretty hacky."
msgstr "连接信号的示例代码是很旁门左道的."

msgid "Translation status"
msgstr "翻译状态"
