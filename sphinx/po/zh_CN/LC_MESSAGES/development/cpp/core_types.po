# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Core types"
msgstr "核心类型"

msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr "Godot 具有构成其核心的丰富的类和模板集，并且所有内容都基于它们构建。"

msgid ""
"This reference will try to list them in order for their better understanding."
msgstr "这份参考将试着按顺序列出它们，使之更容易被理解。"

msgid "Definitions"
msgstr "定义"

msgid ""
"Godot uses the standard C99 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""
"Godot 使用标准的 C99 数据类型，如 ``uint8_t``\\ 、\\ ``uint32_t``\\ 、\\ "
"``int64_t`` 等，现在每个编译器都支持。为这些东西重新发明轮子没什么意思，只会"
"让代码更难以阅读。"

msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""
"通常，除非使用大型结构或数组，否则不必在意是否使用给定任务的最有效数据类型。"
"除非必要，否则大多数代码都使用 ``int``\\ 。这样做是因为如今每个设备都至少具"
"有 32 位总线，并且可以在一个周期中执行这样的操作。它也使代码更具可读性。"

msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr "对于文件或内存大小，使用 ``size_t``\\ ，保证为 64 位。"

msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""
"对于 Unicode 字符，使用 CharType 而不是 wchar_t，因为许多架构中 wchar_t 的长"
"度是 4 个字节，而我们需要的是 2 个字节。但是默认情况下，这不会被强制，"
"CharType 会直接映射到 wchar_t。"

msgid "References:"
msgstr "参考："

msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/"
"typedefs.h>`__"
msgstr ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/"
"typedefs.h>`__"

msgid "Memory model"
msgstr "内存模型"

msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""
"PC 是一个很棒的架构。计算机通常具有 GB 级的内存、TB 级的存储空间和 GHz 级的 "
"CPU，当应用程序需要更多资源时，操作系统会交换出不活动的资源。其他架构（如移动"
"设备或游戏主机）在这些方面通常有更多的限制。"

msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""
"最常见的内存模型是堆，应用程序会从中请求一块内存区域，底层操作系统会试着从某"
"处找到一块适合这样的内存并返回它。这通常效果最好，并且很灵活，但是随着时间的"
"流逝和滥用，这可能会导致分段。"

msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""
"分段缓慢地产生对于大多数常见分配而言太小的孔洞，从而浪费了内存。关于堆和分段"
"的文献有很多，因此在此不再赘述。现代操作系统使用分页内存，这有助于减轻但不能"
"解决分段问题。"

msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""
"然而，许多研究和测试显示，在给出足够内存的情况下，如果最大分配大小所占堆最大"
"大小的比例低于一个给定的阈值，并且有一定比例的内存本来就是不使用的，那么分段"
"就不会变化，不会随着时间的推移成为问题。换句话说，如果留出 10-20％ 的可用内存"
"空间，并且执行的都是小额内存分配，那么就不会出事。"

msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""
"Godot 确保所有的可动态分配的对象都很小（最多不到几 kb）。但是如果出现很大的分"
"配（像图像、网格几何数据或大数组）会怎样呢？在这种情况下，Godot 可以选择使用"
"动态内存池。内存会被锁定以进行访问操作；如果内存不足，则内存池会根据需要进行"
"重新排列和压缩。根据游戏的需要，程序员可以配置动态内存池的大小。"

msgid "Allocating memory"
msgstr "内存分配"

msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""
"Godot有许多工具可用于跟踪游戏中的内存使用情况, 尤其是在调试期间. 因此, 不应使"
"用常规的C和C++库调用. 相反,Godot提供了一些其它的供你使用."

msgid "For C-style allocation, Godot provides a few macros:"
msgstr "Godot提供了一些宏可以用来处理C风格的内存分配:"

msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr "这些等效于标准C库中通常的malloc, realloc, free."

msgid "For C++-style allocation, special macros are provided:"
msgstr "这些宏可以用来处理C++风格的内存分配:"

msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr "这些等效于new, delete, new[]和delete[]."

msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""
"memnew/memdelete也使用一点C++的小技巧, 在对象创建之后和删除之前, 通知对象."

msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""
"对于动态内存, 提供了PoolVector<>模板.PoolVector是一个标准的Vector类, 与C++标"
"准库中的vector非常相似. 要创建PoolVector缓冲区, 请使用以下命令:"

msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr "可以使用[]运算符访问PoolVector, 并且存在一些帮助:"

msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""
"这些操作允许从PoolVectors快速读/写并保持锁定直到它们超出作用域. 但是,"
"PoolVectors应该用于小型动态内存操作, 因为read()和write()对于大量访问来说太慢"
"了."

msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/"
"memory.h>`__"
msgstr ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/"
"memory.h>`__"

msgid ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/"
"pool_vector.cpp>`__"
msgstr ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/"
"pool_vector.cpp>`__"

msgid "Containers"
msgstr "容器"

msgid "Godot provides also a set of common containers:"
msgstr "Godot 还提供了一系列通用的容器:"

msgid "Vector"
msgstr "向量"

msgid "List"
msgstr "List"

msgid "Set"
msgstr "设置"

msgid "Map"
msgstr "Map"

msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""
"它们很简单, 旨在尽可能小, 因为C++中的模板经常被内联, 并且在调试符号和代码中使"
"二进制大小更加大. 可以使用指针迭代List, Set和Map, 如下所示:"

msgid "The Vector<> class also has a few nice features:"
msgstr "Vector<>类还具有一些不错的功能:"

msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr "它会在写入时进行复制, 因此只要不对其进行修改, 制作拷贝就很容易."

msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr "通过在引用计数器上使用原子操作, 来支持多线程."

msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector."
"h>`__"
msgstr ""
"`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector."
"h>`__"

msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"
msgstr ""
"`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"

msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"
msgstr ""
"`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"

msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"
msgstr ""
"`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"

msgid "String"
msgstr "字符串"

msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""
"Godot 还提供了一个字符串类 String.Godot还提供了String类. 此类具有大量功能, 在"
"所有函数(如大小写操作)和utf8解析/提取中均提供全面的Unicode支持, 以及提供用于"
"转换和可视化的帮助函数."

msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring."
"h>`__"
msgstr ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring."
"h>`__"

msgid "StringName"
msgstr "StringName"

msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""
"StringName（字符串名称）和 String（字符串）类似，但它们是唯一的。从字符串创"
"建 StringName 会为所有相等的字符串产生唯一的内部指针。StringNames 对于将字符"
"串用作标识符非常有用，因为比较它们基本上是在比较指针。"

msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr "创建一个字符串名称(尤其是一个新的) 是慢的, 但比较它们是快的."

msgid ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/"
"string_name.h>`__"
msgstr ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/"
"string_name.h>`__"

msgid "Math types"
msgstr "数学类型"

msgid ""
"There are several linear math types available in the core/math directory."
msgstr "在core/math目录中, 有几种线性代数常用的类型."

msgid "`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"
msgstr ""
"`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"

msgid "NodePath"
msgstr "节点路径"

msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr "这是一种特殊的数据类型, 用于在场景树中存储路径并快速引用它们."

msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/"
"node_path.h>`__"
msgstr ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/"
"node_path.h>`__"

msgid "RID"
msgstr "RID"

msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""
"RID是资源ID. 服务使用这些来引用存储在其中的数据.RID是不透明的, 这意味着它们引"
"用的数据不能直接访问.RID是唯一的, 甚至对于不同类型的引用数据也是如此."

msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"

msgid "Translation status"
msgstr "翻译状态"
