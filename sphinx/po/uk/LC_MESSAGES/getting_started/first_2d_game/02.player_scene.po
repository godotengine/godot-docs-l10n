# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Створення сцени гравця"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"Підготувавши параметри проекта ми можемо почати працювати над персонажем, "
"керованим гравцем."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"Перша сцена визначає об'єкт ``Player`` *(Гравець)*. Однією з переваг "
"створення окремої сцени гравця є те, що ми можемо протестувати її окремо, ще "
"до того, як створили інші частини гри."

msgid "Node structure"
msgstr "Структура вузлів"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"Для початку нам потрібно вибрати кореневої вузол [Root Node] для об'єкта "
"player. У загальному випадку, кореневий вузол сцени повинен відображати "
"бажану функціональність об'єкта - чим об'єкт *є*. Натисніть кнопку \"Other "
"Node\" *(Інший вузол)* і додайте вузол :ref:`Area2D <class_Area2D>` в сцену."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot виведе попереджувальний значок поруч із вузлом у дереві сцени. Ви "
"можете проігнорувати його наразі. Ми розглянемо цей значок пізніше."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"За допомогою ``Area2D`` ми можемо виявляти об'єкти, які перекривають або "
"стикаються з гравцем. Змініть ім'я вузла на ``Player``, двічі клацнувши по "
"ньому. Тепер, коли ми встановили кореневий вузол сцени, ми можемо додавати "
"додаткові вузли, щоб додати більше функціоналу."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"Перш ніж додати будь-яких нащадків до вузла ``Player``, ми хочемо "
"переконатися, що випадково їх не перемістимо, чи не змінимо розмір, "
"натиснувши на них. Виберіть вузол і натисніть на значок праворуч від "
"блокування; в підказці написано: \"Гарантує, що нащадки об'єкта не можуть "
"бути вибрані.\""

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Збережіть сцену. Клацніть Сцена -> Зберегти, або натисніть :kbd:`Ctrl+S` на "
"Windows/Linux, або :kbd:`Cmd + S` на macOS."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "У цьому проєкті ми будемо дотримуватися правил іменування Godot."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Класи (вузли) використовують PascalCase, змінні та функції "
"використовують snake_case, а константи використовують ALL_CAPS (Дивіться :"
"ref:`doc_gdscript_styleguide` )."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: Класи, експортовані змінні та методи використовують PascalCase, "
"приватні поля використовують _camelCase, локальні змінні та параметри "
"використовують camelCase (Дивіться :ref:`doc_c_sharp_styleguide` ). Будьте "
"обережні, вводячи назви методів саме під час підключення сигналів."

msgid "Sprite animation"
msgstr "Анімація спрайта"

msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"Натисніть на вузол ``Player`` і додайте йому в нащадки вузол :ref:"
"`AnimatedSprite <class_AnimatedSprite>` *(Анімація спрайту)*. "
"``AnimatedSprite`` оброблятиме зовнішній вигляд і анімацію для нашого "
"гравця. Зауважте, що поруч із вузлом є символ попередження. "
"``AnimatedSprite`` вимагає ресурсу :ref:`SpriteFrames <class_SpriteFrames>` "
"*(кадри спрайту)*, який являє собою список кадрів, які він може відображати. "
"Щоб створити його, знайдіть властивість ``Frames`` *(Кадри)* у Інспекторі та "
"натисніть \"[порожній]\" -> \"Нові SpriteFrames\". Клацніть ще раз щоб "
"відкрити панель \"SpriteFrames\" *(Кадри спрайту)*:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"Зліва знаходиться список анімацій. Натисніть на \"default\" і перейменуйте "
"на \"walk\". Потім клацніть кнопку \"Нова анімація\" для створення другої "
"анімації під ім'ям \"up\". Знайдіть зображення гравця на панелі \"Файлова "
"система\" - вони знаходяться в папці ``art``, яку ви розпакували раніше. "
"Перетягніть два зображення для кожної анімації ``playerGrey_up[1/2]`` та "
"``playerGrey_walk[1/2]`` в сторону \"Animation Frames\" для кожної "
"відповідно:"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"Зображення гравця трохи завеликі для вікна гри, тому нам потрібно їх "
"зменшити. Клацніть на вузлі ``AnimatedSprite`` та встановіть властивість "
"``Scale`` *(Масштаб)* на ``(0.5, 0.5)``. Ви можете знайти її в Інспекторі "
"під заголовком ``Node2D``."

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"Нарешті створіть ще одного нащадка ``Player``, додайте :ref:"
"`CollisionShape2D <class_CollisionShape2D>` (Форма межі зіткнень). Він "
"визначатиме \"ударну коробку\" гравця, або межі його зони зіткнення. Для "
"цього персонажа найкраще підходить вузол ``CapsuleShape2D`` (Форма капсули "
"2D), тому поруч із пунктом \"Shape\" (\"Форма\") в Інспекторі натисніть "
"\"[порожній]\" \"->\" Нова CapsuleShape2D \". Використовуючи дві ручки "
"розмірів, змініть розмір форми, щоб покрити спрайт:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Коли ви закінчите, ваша сцена ``Player`` повинна виглядати так:"

msgid "Make sure to save the scene again after these changes."
msgstr "Не забудьте зберегти сцену знову після цих змін."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"У наступній частині ми додамо скрипт до вузла гравця для переміщення та "
"анімації. Потім ми налаштуємо виявлення зіткнень, щоб знати, коли гравець "
"зіткнувся з чимось."

msgid "Translation status"
msgstr "Стан перекладу"
