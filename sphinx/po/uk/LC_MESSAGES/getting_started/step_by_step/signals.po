# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "Сигнал"

msgid "Using signals"
msgstr "Використання сигналів"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""
"На цьому уроці ми розглянемо сигнали. Це повідомлення, які видають вузли, "
"коли з ними відбувається щось конкретне, наприклад, натискання кнопки. Інші "
"вузли можуть підключатися до цього сигналу і викликати функцію, коли "
"відбувається подія."

msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""
"Сигнали є механізмом делегування, вбудований у Godot, що дозволяє одному "
"ігровому об’єкту реагувати на зміни іншого, не посилаючись один на одного. "
"Використання сигналів зменшує `зв'язність <https://uk.wikipedia.org/wiki/"
"Зв'язність_(програмування)>`_ і забезпечує гнучкість вашого коду."

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player’s health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""
"Наприклад, на екрані може бути шкала життя, яка відображає здоров’я гравця. "
"Коли гравець отримує пошкодження або використовує лікувальне зілля, ви "
"хочете, щоб шкала відображала зміни. Для цього в Godot ви можете "
"використовувати сигнали."

msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Як згадувалося у вступі, сигнали є версією Godot шаблону спостерігача. "
"Детальніше про шаблон спостерігач можна прочитати тут: https://"
"gameprogrammingpatterns.com/observer.html"

msgid ""
"We will now use a signal to make our Godot icon from the previous lesson (:"
"ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""
"Тепер ми будемо використовувати сигнал, для керування рухом іконки Godot з "
"попереднього уроку (:ref:`doc_scripting_player_input`)."

msgid "Scene setup"
msgstr "Налаштування сцени"

msgid ""
"To add a button to our game, we will create a new \"main\" scene which will "
"include both a button and the ``Sprite.tscn`` scene that we scripted in "
"previous lessons."
msgstr ""
"Щоб додати кнопку до нашої гри ми створимо нову сцену \"main\", яка буде "
"містити і кнопку, і сцену ``Sprite.tscn``, створену в попередніх уроках."

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr "Створіть нову сцену перейшовши до меню Сцена -> Нова Сцена."

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a Node2D as our "
"root."
msgstr ""
"На панелі Сцена клацніть кнопку 2D Сцена. Це додасть вузол Node2D в якості "
"кореня."

msgid ""
"In the FileSystem dock, click and drag the ``Sprite.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""
"На панелі Файлова система клацніть і перетягніть файл ``Sprite.tscn``, який "
"ви зберегли раніше, на Node2D, щоб створити його екземпляр."

msgid ""
"We want to add another node as a sibling of the Sprite. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""
"Ми хочемо додати ще один вузол в якості, так би мовити, рідного брата "
"Спрайта. Для цього клацніть правою кнопкою миші на Node2D і виберіть Додати "
"дочірній вузол."

msgid "Search for the Button node type and add it."
msgstr "Знайдіть тип вузла Button і додайте його."

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""
"Вузол за замовчуванням невеликий. Натисніть і перетягніть нижній правий "
"маркер Кнопки у вікні перегляду, щоб змінити її розмір."

msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""
"Якщо ви не бачите маркерів, переконайтеся, що інструмент вибору активний на "
"панелі інструментів."

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr "Натисніть і перетягніть саму кнопку, щоб наблизити її до спрайту."

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter \"Toggle motion\"."
msgstr ""
"Ви також можете вказати текст на кнопці, відредагувавши її властивість Text "
"в Інспекторі. Введіть \"Toggle motion\"."

msgid "Your scene tree and viewport should look like this."
msgstr "Ваше дерево сцени та область перегляду мають виглядати так."

msgid ""
"Save your newly created scene. You can then run it with :kbd:`F6`. At the "
"moment, the button will be visible, but nothing will happen if you press it."
msgstr ""
"Збережіть вашу новостворену сцену. Ви можете її запустити натиснувши :kbd:"
"`F6`. В даний момент кнопку буде видно, проте якщо ви натиснете її, то "
"нічого не відбудеться."

msgid "Connecting a signal in the editor"
msgstr "Підключення сигналів в редакторі"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite, and "
"we want to call a new function that will toggle its motion on and off. We "
"need to have a script attached to the Sprite node, which we do from the "
"previous lesson."
msgstr ""
"Тут ми хочемо підключити сигнал кнопки \"pressed\" до нашого спрайта, і ми "
"хочемо викликати нову функцію, яка вмикатиме та вимикає її рух. Нам потрібно "
"мати скрипт, приєднаний до вузла Sprite, що ми зробили в попередньому уроці."

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""
"Ви можете підключати сигнали на панелі Вузол. Виберіть вузол Кнопка і в "
"правій частині редактора натисніть вкладку \"Вузол\" поруч із Інспектором."

msgid "The dock displays a list of signals available on the selected node."
msgstr "Панель відображає список сигналів, доступних на вибраному вузлі."

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""
"Двічі клацніть сигнал \"pressed\", щоб відкрити вікно підключення вузла."

msgid ""
"There, you can connect the signal to the Sprite node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_NodeName_signal_name\". Here, it'll be "
"\"_on_Button_pressed\"."
msgstr ""
"Там ви можете підключити сигнал до вузла Sprite. Вузлу потрібен метод "
"приймача, функція, яку Godot буде викликати, коли кнопка випромінює сигнал. "
"Редактор створить її для вас. За умовою ми називаємо ці методи зворотного "
"виклику \"_on_НазваВузла_назва_сигналу\". Тут це буде \"_on_Button_pressed\"."

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""
"При підключенні сигналів через панель редактора Вузол можна використовувати "
"два режими. Простий дозволяє підключатися лише до вузлів, до яких приєднано "
"скрипт, і створює в них нову функцію зворотного виклику."

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""
"Розширений перегляд дозволяє підключатися до будь-якого вузла та будь-якої "
"вбудованої функції, додавати аргументи до зворотного виклику та "
"встановлювати параметри. Ви можете змінити режим у правому нижньому кутку "
"вікна, натиснувши кнопку \"Додатково\"."

msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""
"Натисніть кнопку З'єднати, щоб завершити підключення сигналу та перейти до "
"робочої області Script. Ви повинні побачити новий метод зі значком "
"підключення на лівому полі."

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""
"Якщо натиснути іконку, з’явиться вікно з інформацією про з’єднання. Ця "
"функція доступна лише при підключенні вузлів у редакторі."

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""
"Давайте замінимо рядок із ключовим словом ``pass`` на код, який перемикає "
"рух вузла."

msgid ""
"Our Sprite moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""
"Наш Спрайт рухається завдяки коду в функції ``_process()``. Godot надає "
"метод вмикання та вимикання обробки: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Інший метод класу Node *(Вузла)*, "
"``is_processing()``, повертає ``true``, якщо обробка активна. Ми можемо "
"використовувати ключове слово ``not`` для інвертування значення."

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""
"Ця функція перемикає обробку і, в свою чергу, рух значка вмикається і "
"вимикається при натисканні кнопки."

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""
"Перш ніж спробувати гру нам потрібно спростити нашу функцію ``_process()`` "
"до самостійного переміщення вузла без очікування на введення гравця. "
"Замініть її наступним кодом, який ми бачили два уроки тому:"

msgid "Your complete ``Sprite.gd`` code should look like the following."
msgstr "Ваш повний код ``Sprite.gd`` має виглядати так."

msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr ""
"Запустіть сцену і натисніть кнопку, щоб побачити як спрайт стартує та "
"зупиняється."

msgid "Connecting a signal via code"
msgstr "Підключення сигналів за допомогою коду"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""
"Ви можете підключати сигнали за допомогою коду замість того, щоб "
"використовувати редактор. Це необхідно, коли ви створюєте вузли або "
"вставляєте сцени всередину скрипту."

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""
"Давайте використаємо тут інший вузол. Godot має вузол таймера :ref:`Timer "
"<class_Timer>`, який корисний для реалізації часу зарядки навичок, "
"перезавантаження зброї тощо."

msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Alt + 1` on macOS)."
msgstr ""
"Поверніться до 2D-робочого простору. Ви можете натиснути текст \"2D\" у "
"верхній частині вікна або скористатися клавішами :kbd:`Ctrl + F1` (:kbd:`Alt "
"+ 1` на macOS)."

msgid ""
"In the Scene dock, right-click on the Sprite node and add a new child node. "
"Search for Timer and add the corresponding node. Your scene should now look "
"like this."
msgstr ""
"На панелі Сцена клацніть правою кнопкою мишки на вузлі Sprite і додайте "
"новий дочірній вузол. Знайдіть Timer і додайте відповідний вузол. Тепер ваша "
"сцена повинна виглядати так."

msgid ""
"With the Timer node selected, go to the Inspector and check the "
"**Autostart** property."
msgstr ""
"Вибравши вузол таймера, перейдіть до інспектора та перевірте властивість "
"**Autostart**."

msgid ""
"Click the script icon next to Sprite to jump back to the scripting workspace."
msgstr ""
"Клацніть піктограму скрипта поруч із кнопкою Спрайт, щоб повернутися до "
"робочої області скриптів."

msgid "We need to do two operations to connect the nodes via code:"
msgstr ""
"Нам потрібно зробити дві операції для з'єднання вузлів за допомогою коду:"

msgid "Get a reference to the Timer from the Sprite."
msgstr "Отримайте посилання на Таймер зі Спрайту."

msgid "Call the Timer's ``connect()`` method."
msgstr "Викликати метод Таймера ``connect()``."

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the node you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""
"Щоб підключитися до сигналу за допомогою коду, потрібно викликати метод "
"``connect()`` з вузла, який ви хочете прослухати. У цьому випадку ми хочемо "
"прослухати сигнал Таймера \"timeout\"."

msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_method__ready>` built-in "
"function, which is called automatically by the engine when a node is fully "
"instantiated."
msgstr ""
"Ми хочемо підключити сигнал, одразу після створення екземпляра сцени, і ми "
"можемо зробити це за допомогою вбудованої функції :ref:`Node._ready() "
"<class_Node_method__ready>`, яка автоматично викликається рушієм, щойно "
"вузол буде повністю створений."

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""
"Щоб отримати посилання на вузол відносно поточного, використовуємо метод :"
"ref:`Node.get_node() <class_Node_method_get_node>`. Ми можемо зберігати "
"посилання в змінній."

msgid ""
"The function ``get_node()`` looks at the Sprite's children and gets nodes by "
"their name. For example, if you renamed the Timer node to \"BlinkingTimer\" "
"in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""
"Функція ``get_node()`` переглядає нащадків Спрайта і отримує вузли за їх "
"назвою. Наприклад, якщо ви перейменували вузол таймера з \"Timer\" на "
"\"BlinkingTimer\" *(\"Блимаючий таймер\")* у редакторі, вам доведеться "
"змінити виклик на ``get_node(\"BlinkingTimer\")``."

msgid ""
"We can now connect the Timer to the Sprite in the ``_ready()`` function."
msgstr "Тепер ми можемо підключити Таймер до Спрайта у функції ``_ready()``."

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached (``self``). When the Timer emits "
"\"timeout\", we want to call the function \"_on_Timer_timeout\", that we "
"need to define. Let's add it at the bottom of our script and use it to "
"toggle our sprite's visibility."
msgstr ""
"Рядок можна прочитати так: підключаємо сигнал Таймера \"timeout\" до вузла, "
"до якого приєднаний скрипт (``self``). Коли таймер випромінює \"timeout\", "
"ми хочемо викликати функцію \"_on_Timer_timeout\", яку нам потрібно "
"визначити. Давайте додамо її в нижній частині нашого скрипту і використаємо "
"для перемикання видимості нашого спрайта."

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""
"Властивість ``visible`` контролює видимість нашого вузла. Рядок ``visible = "
"not visible`` перемикає значення. Якщо ``visible`` є ``true``, то стає "
"``false``, і навпаки."

msgid ""
"If you run the scene now, you will see that the sprite blinks on and off, at "
"one second intervals."
msgstr ""
"Якщо ви запустите сцену зараз, ви побачите, що спрайт блимає та вимикається "
"з інтервалом в одну секунду."

msgid "Complete script"
msgstr "Завершений скрипт"

msgid ""
"That's it for our little moving and blinking Godot icon demo! Here is the "
"complete ``Sprite.gd`` file for reference."
msgstr ""
"Ось і все для нашої маленької рухомої і миготливої іконки Godot! Ось повний "
"файл ``Sprite.gd`` для порівняння."

msgid "Custom signals"
msgstr "Власні сигнали"

msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""
"Цей розділ пояснює, як визначити і використовувати власні сигнали, і не має "
"відношення до проекту, створеного на попередніх уроках."

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""
"Ви можете визначити власні сигнали в скрипті. Скажімо, ви хочете показати "
"екран завершення гри, коли здоров'я гравця досягає нуля. Для цього ви можете "
"визначити сигнал під назвою \"died\" *(\"помер\")* або \"health_depleted\" "
"*(\"здоров'я_вичерпане\")*, коли їх здоров'я досягає 0."

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""
"Оскільки сигнали представляють події, які щойно відбулися, ми зазвичай "
"використовуємо дієслово дії в минулому часі в їх назвах."

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""
"Ваші сигнали працюють так само, як і вбудовані: вони з'являються на панелі "
"Вузол, і ви можете підключитися до них, як і до будь-яких інших."

msgid "To emit a signal in your scripts, call ``emit_signal()``."
msgstr ""
"Щоб випромінювати сигнал у скриптах, використовуйте функцію "
"``emit_signal()``."

msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""
"Сигнал може при потребі оголошувати один, або кілька, аргументів. Вкажіть "
"назви аргументів між дужками:"

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Аргументи сигналу відображаються у панелі вузла редактора, і Godot може "
"використовувати їх для створення функцій зворотного виклику для вас. Однак "
"ви все одно можете випромінювати будь-яку кількість аргументів, разом із "
"сигналами. Ви повинні випромінювати правильні значення."

msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit_signal()`` function:"
msgstr ""
"Щоб випромінювати значення разом із сигналом додайте їх як додаткові "
"аргументи до функції ``emit_signal()``:"

msgid "Summary"
msgstr "Підсумок"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""
"Будь-який вузол в Godot випромінює сигнали, коли з ним відбувається щось "
"конкретне, наприклад, натискається кнопка. Інші вузли можуть підключатися до "
"окремих сигналів і реагувати на вибрані події."

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""
"Сигнали мають багато застосувань. З ними ви можете реагувати на вузол, що "
"входить, чи виходить, з ігрового світу, на зіткнення, на персонажа, що "
"входить, чи залишає область, на елемент інтерфейсу, що змінює розмір, і "
"багато іншого."

msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"Наприклад, :ref:`Area2D <class_Area2D>`, у вигляді монети, випромінює сигнал "
"``body_entered`` кожного разу, коли стикається з фізичним тілом гравця, що "
"дозволяє вам знати, що гравець її зібрав."

msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"У наступному розділі, :ref:`doc_your_first_2d_game`, ви створите повну 2D "
"гру і використаєте все, чого дізналися до цих пір, на практиці."

msgid "Translation status"
msgstr "Стан перекладу"
