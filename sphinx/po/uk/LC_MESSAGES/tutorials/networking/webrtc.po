# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "WebRTC"
msgstr "WebRTC"

msgid "HTML5, WebSocket, WebRTC"
msgstr ""

msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""
"Однією з чудових функцій Godot є його здатність експортувати на платформу "
"HTML5/WebAssembly, що дозволяє вашій грі запускатися безпосередньо у "
"браузері, коли користувач відвідує вашу веб-сторінку."

msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""
"Це чудова можливість як для демонстраційних, так і для повноцінних ігор, але "
"раніше вони мали певні обмеження. У сфері мереж донедавна браузери "
"підтримували лише HTTPRequests, коли спочатку в якості стандартів були "
"запропоновані WebSocket, а потім WebRTC."

msgid "WebSocket"
msgstr ""

msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is quite simple, but a very powerful tool to send push "
"notifications to browsers, and has been used to implement chats, turn-based "
"games, etc."
msgstr ""
"Коли протокол WebSocket був стандартизований у грудні 2011 року, він "
"дозволив браузерам створювати стабільні та двонаправлені з’єднання з "
"сервером WebSocket. Цей протокол досить простий, але дуже потужний, "
"інструмент для надсилання push-повідомлень у браузери, і його "
"використовували для реалізації чатів, покрокових ігор тощо."

msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""
"Однак WebSocket-и все ще використовують TCP-з’єднання, яке надійне, але "
"повільне, і тому не підходить для додатків у реальному часі, таких як VoIP "
"та інші динамічні ігри."

msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""
"З цієї причини з 2010 року Google розпочала роботу над новою технологією під "
"назвою WebRTC, яка згодом, у 2017 році, стала можливою рекомендацією від "
"W3C. WebRTC — це набагато складніший набір специфікацій, який покладається "
"на багато інших закулісних технологій (ICE, DTLS, SDP), щоб забезпечити "
"швидке, безпечне спілкування в реальному часі між двома одноранговими "
"вузлами."

msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr ""
"Ідея полягає в тому, щоб знайти найшвидший маршрут між двома одноранговими "
"вузлами та встановити, коли це можливо, прямий зв’язок (тобто спробувати "
"уникнути сервер-ретранслятор)."

msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""
"Однак це має свою ціну, яка полягає в тому, що, перш ніж розпочнеться "
"зв’язок, два однорангові вузли мають обмінятися між собою деякою медіа-"
"інформацією (у формі Протоколу Опису Сеансу - тексти SDP). Зазвичай це має "
"форму так званого Сервера Сигналізації WebRTC."

msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""
"Однорангові вузли підключаються до сервера сигналізації (наприклад, сервера "
"WebSocket) і надсилають свою медіа-інформацію. Потім сервер передає цю "
"інформацію іншим одноранговим вузлам, дозволяючи їм встановити потрібний "
"прямий зв’язок. Після виконання цього кроку однорангові вузли можуть "
"відключитися від сервера сигналізації та зберегти пряме однорангове "
"з’єднання (P2P) відкритим."

msgid "Using WebRTC in Godot"
msgstr "Використання WebRTC в Godot"

msgid ""
"WebRTC is implemented in Godot via two main classes :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API "
"implementation :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`. See "
"section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` for "
"more details."
msgstr ""
"WebRTC реалізовано в Godot через два головні класи :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` та :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, а також реалізацію "
"багатокористувацького API :ref:`WebRTCMultiplayer "
"<class_WebRTCMultiplayer>`. Додаткову інформацію дивіться у розділі про :ref:"
"`багатокористувацьку гру високого рівня <doc_high_level_multiplayer>`."

msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDNative plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://github."
"com/godotengine/webrtc-native/releases>`__."
msgstr ""
"Ці класи доступні автоматично в HTML5, але **вимагають зовнішнього плагіна "
"GDNative на рідних (не HTML5) платформах**. Перегляньте `репозиторій "
"плагінів webrtc-native<https://github.com/godotengine/webrtc-native>`__, для "
"інструкцій та отримайте останню `версію<https://github.com/godotengine/"
"webrtc-native/releases>`__."

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""
"Під час експорту в Android обов’язково ввімкніть дозвіл ``INTERNET`` у "
"попередньо налаштованих експортах Android, перш ніж експортувати проект, або "
"використовувати розгортання одним клацанням мишки. Інакше Android заблокує "
"будь-який мережевий зв’язок."

msgid "Minimal connection example"
msgstr "Мінімальний приклад підключення"

msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""
"Цей приклад покаже вам, як створити з’єднання WebRTC між двома одноранговими "
"вузлами в одній програмі. Це не дуже корисно в реальному житті, але дасть "
"вам хороший огляд того, як налаштовано з’єднання WebRTC."

msgid "This will print:"
msgstr "Буде виведено:"

msgid "Local signaling example"
msgstr "Приклад локальної сигналізації"

msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""
"Цей приклад розширює попередній, розділяючи однорангові вузли у двох різних "
"сценах та використовуючи :ref:`синглтон <doc_singletons_autoload>`, як "
"сервер сигналізації."

msgid "And now for the local signaling server:"
msgstr "А тепер для локального сервера сигналізації:"

msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""
"Цей локальний сервер сигналізації має використовуватися, як :ref:`синглтон "
"<doc_singletons_autoload>` для з’єднання двох однорангових вузлів в одній "
"сцені."

msgid "Then you can use it like this:"
msgstr "Тоді ви можете використовувати його так:"

msgid "This will print something similar to this:"
msgstr "Це надрукує щось подібне до цього:"

msgid "Remote signaling with WebSocket"
msgstr "Віддалена сигналізація за допомогою WebSocket"

msgid ""
"A more advanced demo using WebSocket for signaling peers and :ref:"
"`WebRTCMultiplayer <class_WebRTCMultiplayer>` is available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/webrtc_signaling`."
msgstr ""
"Більш просунута демонстрація з використанням WebSocket для сигналізаційних "
"однорангових вузлів та :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>` "
"доступна в `демонстраційних проектах godot<https://github.com/godotengine/"
"godot-demo-projects>`_ у розділі `networking/webrtc_signaling`."

msgid "Translation status"
msgstr "Стан перекладу"
