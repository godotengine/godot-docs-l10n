# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Input examples"
msgstr "Приклади введення"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"In this tutorial, you'll learn how to use Godot's :ref:`InputEvent "
"<class_InputEvent>` system to capture player input. There are many different "
"types of input your game may use - keyboard, gamepad, mouse, etc. - and many "
"different ways to turn those inputs into actions in your game. This document "
"will show you some of the most common scenarios, which you can use as "
"starting points for your own projects."
msgstr ""
"У цьому уроці ви дізнаєтеся, як використовувати систему вхідних подій Godot :"
"ref:`InputEvent <class_InputEvent>` для захоплення вводу гравця. Є багато "
"різних типів введення, які ваша гра може використовувати - клавіатура, "
"геймпад, миша і т. д. - і багато різних способів перетворити ці введення в "
"дії у вашій грі. Цей документ покаже вам деякі з найбільш поширених "
"сценаріїв, які ви можете використовувати як відправні точки для власних "
"проектів."

msgid ""
"For a detailed overview of how Godot's input event system works, see :ref:"
"`doc_inputevent`."
msgstr ""
"Детально робота системи вхідних подій Godot розглянута в :ref:"
"`doc_inputevent`."

msgid "Events versus polling"
msgstr "Події та опитування"

msgid ""
"Sometimes you want your game to respond to a certain input event - pressing "
"the \"jump\" button, for example. For other situations, you might want "
"something to happen as long as a key is pressed, such as movement. In the "
"first case, you can use the ``_input()`` function, which will be called "
"whenever an input event occurs. In the second case, Godot provides the :ref:"
"`Input <class_Input>` singleton, which you can use to query the state of an "
"input."
msgstr ""
"Іноді ви хочете, щоб ваша гра реагувала на певну вхідну подію - наприклад, "
"натискання кнопки \"стрибка\". В інших ситуаціях ви можете хотіти, щоб щось "
"відбувалося, коли натиснута клавіша, наприклад, рух. У першому випадку можна "
"скористатися функцією ``_input()``, яка буде викликатися при виникненні "
"вхідної події. Для другого випадку Godot надає синглтон :ref:`Input "
"<class_Input>`, який можна використовувати для запиту стану вводу."

msgid "Examples:"
msgstr "Приклади:"

msgid ""
"This gives you the flexibility to mix-and-match the type of input processing "
"you do."
msgstr "Це дає вам гнучкість для змішування та поєднання типів введення."

msgid ""
"For the remainder of this tutorial, we'll focus on capturing individual "
"events in ``_input()``."
msgstr ""
"В решті цього уроку ми зосередимося на захопленні окремих подій у "
"``_input()``."

msgid "Input events"
msgstr "Вхідні події"

msgid ""
"Input events are objects that inherit from :ref:`InputEvent "
"<class_InputEvent>`. Depending on the event type, the object will contain "
"specific properties related to that event. To see what events actually look "
"like, add a Node and attach the following script:"
msgstr ""
"Вхідні події - це об'єкти, які успадковуються від :ref:`InputEvent "
"<class_InputEvent>`. Залежно від типу події об'єкт міститиме певні "
"властивості, пов'язані з цією подією. Щоб побачити, як насправді виглядають "
"події, додайте вузол і прикріпіть такий скрипт:"

msgid ""
"As you press keys, move the mouse, and perform other inputs, you'll see each "
"event scroll by in the output window. Here's an example of the output:"
msgstr ""
"При натисканні клавіші, переміщенні мишку та виконанні іншого введення, ви "
"можете бачити, що кожна подія прокручується у вікні виводу. Ось приклад "
"виводу:"

msgid ""
"As you can see, the results are very different for the different types of "
"input. Key events are even printed as their key symbols. For example, let's "
"consider :ref:`InputEventMouseButton <class_InputEventMouseButton>`. It "
"inherits from the following classes:"
msgstr ""
"Як бачите, результати дуже різні для різних типів введення. Події клавіш "
"навіть друкуються як символи, за які вони відповідають. Для прикладу, "
"розглянемо вхідну події клавіші мишки :ref:`InputEventMouseButton "
"<class_InputEventMouseButton>`. Вона успадковується від наступних класів:"

msgid ""
":ref:`InputEvent <class_InputEvent>` - the base class for all input events"
msgstr ""
":ref:`InputEvent <class_InputEvent>` - базовий клас для всіх вхідних подій"

msgid ""
":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` - adds the "
"ability to check if modifiers are pressed, such as :kbd:`Shift` or :kbd:"
"`Alt`."
msgstr ""
":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` - додає "
"можливість перевірити, чи натиснуті модифікатори, такі як :kbd:`Shift`, або :"
"kbd:`Alt`."

msgid ""
":ref:`InputEventMouse <class_InputEventMouse>` - adds mouse event "
"properties, such as ``position``"
msgstr ""
":ref:`InputEventMouse <class_InputEventMouse>` - додає властивості події "
"мишки, такі як ``position``"

msgid ""
":ref:`InputEventMouseButton <class_InputEventMouseButton>` - contains the "
"index of the button that was pressed, whether it was a double-click, etc."
msgstr ""
":ref:`InputEventMouseButton <class_InputEventMouseButton>` - містить індекс "
"клавіші, яка була натиснута, чи це було подвійне клацання і т. д."

msgid ""
"It's a good idea to keep the class reference open while you're working with "
"events so you can check the event type's available properties and methods."
msgstr ""
"Рекомендовано тримати посилання на клас відкритим під час роботи з подіями, "
"щоб ви могли перевірити доступні властивості та методи типу події."

msgid ""
"You can encounter errors if you try to access a property on an input type "
"that doesn't contain it - calling ``position`` on ``InputEventKey`` for "
"example. To avoid this, make sure to test the event type first:"
msgstr ""
"Ви можете зіткнутися з помилками, при спробі отримати доступ до тої "
"властивості типу введення, якої він не містить , наприклад, викликати "
"``position`` з ``InputEventKey``. Щоб уникнути цього, спочатку перевіряйте "
"тип події:"

msgid "InputMap"
msgstr "InputMap (карта введення)"

msgid ""
"The :ref:`InputMap <class_InputMap>` is the most flexible way to handle a "
"variety of inputs. You use this by creating named input *actions*, to which "
"you can assign any number of input events, such as keypresses or mouse "
"clicks. A new Godot project includes a number of default actions already "
"defined. To see them, and to add your own, open Project -> Project Settings "
"and select the InputMap tab:"
msgstr ""
"Карта введення :ref:`InputMap <class_InputMap>` є найбільш гнучким способом "
"обробки різних вводів. Ви використовуєте її, створюючи іменовані вхідні дії, "
"яким можна призначити будь-яку кількість вхідних подій, таких як натискання "
"клавіш, або клацання мишкою. Новий проект Godot містить ряд уже визначених "
"дій за замовчуванням. Щоб переглянути їх і додати власні, відкрийте вікно "
"**Проект -> Параметри проекту** та перейдіть на вкладку **Карта введення**:"

msgid "Capturing actions"
msgstr "Захоплення дій"

msgid ""
"Once you've defined your actions, you can process them in your scripts using "
"``is_action_pressed()`` and ``is_action_released()`` by passing the name of "
"the action you're looking for:"
msgstr ""
"Визначивши дії, ви можете обробити їх у своїх скриптах, використовуючи "
"``is_action_pressed()`` та ``is_action_released()``, передаючи назву дії, "
"яку ви шукаєте:"

msgid "Keyboard events"
msgstr "Події клавіатури"

msgid ""
"Keyboard events are captured in :ref:`InputEventKey <class_InputEventKey>`. "
"While it's recommended to use input actions instead, there may be cases "
"where you want to specifically look at key events. For this example, let's "
"check for the :kbd:`T`:"
msgstr ""
"Події клавіатури фіксуються в :ref:`InputEventKey <class_InputEventKey>`. "
"Хоча рекомендується використовувати дії введення, можуть бути випадки, коли "
"ви хочете переглянути саме події клавіатури. Для прикладу давайте перевіримо "
"клавішу :kbd:`T`:"

msgid ""
"See :ref:`@GlobalScope_KeyList <enum_@GlobalScope_KeyList>` for a list of "
"scancode constants."
msgstr ""
"Перегляньте :ref:`@GlobalScope_KeyList <enum_@GlobalScope_KeyList>`, щоб "
"ознайомитися зі списком констант сканкоду."

msgid ""
"Due to *keyboard ghosting*, not all key inputs may be registered at a given "
"time if you press too many keys at once. Due to their location on the "
"keyboard, certain keys are more prone to ghosting than others. Some "
"keyboards feature antighosting at a hardware level, but this feature is "
"generally not present on low-end keyboards and laptop keyboards."
msgstr ""
"Через *примару клавіатури* не всі введення клавіш можуть бути зареєстровані "
"одночасно, якщо натиснути занадто багато клавіш разом. Завдяки своєму "
"розташуванню на клавіатурі, деякі клавіші більш схильні до ставати "
"привидами, ніж інші. Деякі клавіатури мають анти-примарний захист на "
"апаратному рівні, але ця функція, як правило, відсутня на клавіатурах "
"низького класу та клавіатурах ноутбуків."

msgid ""
"As a result, it's recommended to use a default keyboard layout that is "
"designed to work well on a keyboard without antighosting. See `this Gamedev "
"Stack Exchange question <https://gamedev.stackexchange.com/a/109002>`__ for "
"more information."
msgstr ""
"В результаті рекомендується використовувати розкладку клавіатури за "
"замовчуванням, яка призначена для гарної роботи клавіатурі, без примар. "
"Дивіться `це питання на Gamedev Stack Exchange <https://gamedev."
"stackexchange.com/a/109002>`__ для отримання додаткової інформації."

msgid "Keyboard modifiers"
msgstr "Модифікатори клавіатури"

msgid ""
"Modifier properties are inherited from :ref:`InputEventWithModifiers "
"<class_InputEventWithModifiers>`. This allows you to check for modifier "
"combinations using boolean properties. Let's imagine you want one thing to "
"happen when the :kbd:`T` is pressed, but something different when it's :kbd:"
"`Shift + T`:"
msgstr ""
"Властивості модифікатора успадковуються від :ref:`InputEventWithModifiers "
"<class_InputEventWithModifiers>`. Вони дозволяють перевірити наявність "
"комбінацій модифікаторів за допомогою логічних властивостей. Давайте уявимо, "
"що ви хочете, щоб одна річ відбулася, коли натиснута :kbd:`T`, але зовсім "
"інша, коли натиснуті :kbd:`Shift + T`:"

msgid "Mouse events"
msgstr "Події мишки"

msgid ""
"Mouse events stem from the :ref:`InputEventMouse <class_InputEventMouse>` "
"class, and are separated into two types: :ref:`InputEventMouseButton "
"<class_InputEventMouseButton>` and :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`. Note that this means that all mouse events "
"will contain a ``position`` property."
msgstr ""
"Події миші випливають з класу :ref:`InputEventMouse <class_InputEventMouse>` "
"і розділені на два типи: :ref:`InputEventMouseButton "
"<class_InputEventMouseButton>` та :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`. Зауважте, що це означає, що всі події мишки "
"міститимуть властивість ``position``."

msgid "Mouse buttons"
msgstr "Кнопки мишки"

msgid ""
"Capturing mouse buttons is very similar to handling key events. :ref:"
"`@GlobalScope_ButtonList <enum_@GlobalScope_ButtonList>` contains a list of "
"``BUTTON_*`` constants for each possible button, which will be reported in "
"the event's ``button_index`` property. Note that the scrollwheel also counts "
"as a button - two buttons, to be precise, with both ``BUTTON_WHEEL_UP`` and "
"``BUTTON_WHEEL_DOWN`` being separate events."
msgstr ""
"Захоплення кнопок мишки дуже схоже на обробку подій клавіш. :ref:"
"`@GlobalScope_ButtonList <enum_@GlobalScope_ButtonList>` містить список "
"констант ``BUTTON_*`` для кожної можливої кнопки, які повідомляються у "
"властивості події ``button_index``. Завбачте, що коліщатко прокрутки також "
"вважається кнопкою - двома кнопками, якщо бути точним, причому "
"``BUTTON_WHEEL_UP`` і ``BUTTON_WHEEL_DOWN`` *(прокрутка вверх-вниз)* є "
"окремими подіями."

msgid "Mouse motion"
msgstr "Рух мишки"

msgid ""
":ref:`InputEventMouseMotion <class_InputEventMouseMotion>` events occur "
"whenever the mouse moves. You can find the move's distance with the "
"``relative`` property."
msgstr ""
"Події :ref:`InputEventMouseMotion <class_InputEventMouseMotion>` "
"відбуваються щоразу, коли мишка рухається. Ви можете знайти відстань "
"переміщення у властивості ``relative``."

msgid ""
"Here's an example using mouse events to drag-and-drop a :ref:`Sprite "
"<class_Sprite>` node:"
msgstr ""
"Ось приклад використання подій мишки для перетягування вузла :ref:`Sprite "
"<class_Sprite>`:"

msgid "Touch events"
msgstr "Сенсорні події"

msgid ""
"If you are using a touchscreen device, you can generate touch events. :ref:"
"`InputEventScreenTouch <class_InputEventScreenTouch>` is equivalent to a "
"mouse click event, and :ref:`InputEventScreenDrag "
"<class_InputEventScreenDrag>` works much the same as mouse motion."
msgstr ""
"Якщо використовується сенсорний пристрій, можна генерувати сенсорні події. :"
"ref:`InputEventScreenTouch <class_InputEventScreenTouch>` еквівалентний "
"події клацання мишки, а :ref:`InputEventScreenDrag "
"<class_InputEventScreenDrag>` працює так само, як і рух мишки."

msgid ""
"To test your touch events on a non-touchscreen device, open Project Settings "
"and go to the \"Input Devices/Pointing\" section. Enable \"Emulate Touch "
"From Mouse\" and your project will interpret mouse clicks and motion as "
"touch events."
msgstr ""
"Щоб перевірити сенсорні події на пристрої без сенсорного екрана, відкрийте "
"вікно **Параметри проекту** та перейдіть до розділу **Пристрої вводу/"
"вказівки**. Увімкніть \"Emulate Touch From Mouse\" *(\"Емулювати дотик від "
"миші\")*, і ваш проект інтерпретуватиме клацання та рух мишки, як сенсорні "
"події."

msgid "Translation status"
msgstr "Стан перекладу"
