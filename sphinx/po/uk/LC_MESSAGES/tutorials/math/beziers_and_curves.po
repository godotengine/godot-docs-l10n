# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Beziers, curves and paths"
msgstr "Безьє, криві і шляхи"

msgid ""
"Bezier curves are a mathematical approximation of natural geometric shapes. "
"We use them to represent a curve with as little information as possible and "
"with a high level of flexibility."
msgstr ""
"Криві Безьє є математичним наближенням природних геометричних фігур. Ми "
"використовуємо їх для представлення кривої з якомога меншою кількістю "
"інформації та з високим рівнем гнучкості."

msgid ""
"Unlike more abstract mathematical concepts, Bezier curves were created for "
"industrial design. They are a popular tool in the graphics software industry."
msgstr ""
"На відміну від більш абстрактних математичних понять, криві Безьє були "
"створені для промислового дизайну. Вони є популярним інструментом в "
"індустрії графічного програмного забезпечення."

msgid ""
"They rely on :ref:`interpolation<doc_interpolation>`, which we saw in the "
"previous article, combining multiple steps to create smooth curves. To "
"better understand how Bezier curves work, let's start from its simplest "
"form: Quadratic Bezier."
msgstr ""
"Вони покладаються на :ref:`інтерполяцію<doc_interpolation>`, яку ми бачили в "
"попередній статті, поєднуючи кілька кроків для створення плавних кривих. Щоб "
"краще зрозуміти, як працюють криві Безьє, почнемо з її найпростішої форми: "
"Квадратична Безьє."

msgid "Quadratic Bezier"
msgstr "Квадратична крива Безьє"

msgid "Take three points, the minimum required for Quadratic Bezier to work:"
msgstr ""
"Візьміть три точки, це мінімум, необхідний для роботи Квадратичної Безьє:"

msgid ""
"To draw a curve between them, we first interpolate gradually over the two "
"vertices of each of the two segments formed by the three points, using "
"values ranging from 0 to 1. This gives us two points that move along the "
"segments as we change the value of ``t`` from 0 to 1."
msgstr ""
"Щоб намалювати криву між ними, ми спочатку поступово інтерполюємо дві "
"вершини кожного з двох відрізків, утворених трьома точками, використовуючи "
"значення в діапазоні від 0 до 1. Це дає нам дві точки, які рухаються вздовж "
"сегментів, коли ми змінюємо значення ``t`` від 0 до 1."

msgid ""
"We then interpolate ``q0`` and ``q1`` to obtain a single point ``r`` that "
"moves along a curve."
msgstr ""
"Потім ми інтерполюємо ``q0`` і ``q1``, щоб отримати одну точку ``r``, яка "
"рухається вздовж кривої."

msgid "This type of curve is called a *Quadratic Bezier* curve."
msgstr "Цей тип кривої називається *Квадратичною кривою Безьє*."

msgid "*(Image credit: Wikipedia)*"
msgstr "*(Зображення запозичене з Вікіпедії)*"

msgid "Cubic Bezier"
msgstr "Кубічна крива Безьє"

msgid ""
"Building upon the previous example, we can get more control by interpolating "
"between four points."
msgstr ""
"Опираючись на попередній приклад, ми можемо отримати більше контролю, за "
"допомогою інтерполяції між чотирма точками."

msgid ""
"We first use a function with four parameters to take four points as an "
"input, ``p0``, ``p1``, ``p2`` and ``p3``:"
msgstr ""
"Спочатку ми використовуємо функцію з чотирма параметрами, щоб взяти чотири "
"точки ``p0``, ``p1``, ``p2`` та ``p3``:"

msgid ""
"We apply a linear interpolation to each couple of points to reduce them to "
"three:"
msgstr ""
"Застосовуємо лінійну інтерполяцію до кожної пари точок, щоб зменшити їх до "
"трьох:"

msgid "We then take our three points and reduce them to two:"
msgstr "Потім беремо наші три точки і зменшуємо їх до двох:"

msgid "And to one:"
msgstr "І до одної:"

msgid "Here is the full function:"
msgstr "Ось повна функція:"

msgid ""
"The result will be a smooth curve interpolating between all four points:"
msgstr "Результатом буде плавна крива інтерполяції між усіма чотирма точками:"

msgid ""
"Cubic Bezier interpolation works the same in 3D, just use ``Vector3`` "
"instead of ``Vector2``."
msgstr ""
"Кубічна інтерполяція Безьє працює так само в 3D, просто використовуйте "
"``Vector3`` замість ``Vector2``."

msgid "Adding control points"
msgstr "Додавання контрольних точок"

msgid ""
"Building upon Cubic Bezier, we can change the way two of the points work to "
"control the shape of our curve freely. Instead of having ``p0``, ``p1``, "
"``p2`` and ``p3``, we will store them as:"
msgstr ""
"Спираючись на Кубічну Безьє, ми можемо змінити спосіб роботи двох точок, щоб "
"вільно контролювати форму нашої кривої. Замість того, щоб мати ``p0``, "
"``p1``, ``p2`` та ``p3``, ми будемо зберігати їх як:"

msgid "``point0 = p0``: Is the first point, the source"
msgstr "``point0 = p0``: Перша точка, джерело"

msgid "``control0 = p1 - p0``: Is a vector relative to the first control point"
msgstr "``control0 = p1 - p0``: Це вектор відносно першої контрольної точки"

msgid ""
"``control1 = p3 - p2``: Is a vector relative to the second control point"
msgstr "``control1 = p3 - p2``: Це вектор відносно другої контрольної точки"

msgid "``point1 = p3``: Is the second point, the destination"
msgstr "``point1 = p3``: Це друга точка, пункт призначення"

msgid ""
"This way, we have two points and two control points which are relative "
"vectors to the respective points. If you've used graphics or animation "
"software before, this might look familiar:"
msgstr ""
"Таким чином, ми маємо дві точки і дві контрольні точки, які є відносними "
"векторами до відповідних точок. Якщо ви раніше використовували графічне, або "
"анімаційне, програмне забезпечення, це може виглядати знайомим:"

msgid ""
"This is how graphics software presents Bezier curves to the users, and how "
"they work and look in Godot."
msgstr ""
"Ось як графічне програмне забезпечення представляє користувачам криві Безьє, "
"і як вони працюють і виглядають в Godot."

msgid "Curve2D, Curve3D, Path and Path2D"
msgstr "Curve2D, Curve3D, Path та Path2D"

msgid ""
"There are two objects that contain curves: :ref:`Curve3D <class_Curve3D>` "
"and :ref:`Curve2D <class_Curve2D>` (for 3D and 2D respectively)."
msgstr ""
"Є два об'єкти, які містять криві: :ref:`Curve3D <class_Curve3D>` та :ref:"
"`Curve2D <class_Curve2D>` (для 3D і 2D відповідно)."

msgid ""
"They can contain several points, allowing for longer paths. It is also "
"possible to set them to nodes: :ref:`Path <class_Path>` and :ref:`Path2D "
"<class_Path2D>` (also for 3D and 2D respectively):"
msgstr ""
"Вони можуть містити кілька точок, що дозволяє прокладати довші шляхи. Також "
"можна встановити їх на вузли шляхів: :ref:`Path <class_Path>` та :ref:"
"`Path2D <class_Path2D>` (також для 3D і 2D відповідно):"

msgid ""
"Using them, however, may not be completely obvious, so following is a "
"description of the most common use cases for Bezier curves."
msgstr ""
"Використання їх, однак, може бути не зовсім очевидним, тому нижче наведено "
"опис найбільш поширених випадків використання кривих Безьє."

msgid "Evaluating"
msgstr "Оцінювання"

msgid ""
"Just evaluating them may be an option, but in most cases it's not very "
"useful. The big drawback with Bezier curves is that if you traverse them at "
"constant speed, from ``t = 0`` to ``t = 1``, the actual interpolation will "
"*not* move at constant speed. The speed is also an interpolation between the "
"distances between points ``p0``, ``p1``, ``p2`` and ``p3`` and there is not "
"a mathematically simple way to traverse the curve at constant speed."
msgstr ""
"Як варіант їх можна просто оцінити, але в більшості випадків це не дуже "
"корисно. Великий недолік кривих Безьє полягає в тому, що якщо ви проходите "
"їх з постійною швидкістю, від ``t = 0`` до ``t = 1``, фактична інтерполяція "
"*не* буде рухатися з постійною швидкістю. Швидкість теж є інтерполяцією між "
"відстанями між точками ``p0``, ``p1``, ``p2`` та ``p3``, і немає математично "
"простого способу пройти криву з постійною швидкістю."

msgid "Let's do a simple example with the following pseudocode:"
msgstr "Наведемо простий приклад з наступним псевдокодом:"

msgid ""
"As you can see, the speed (in pixels per second) of the circle varies, even "
"though ``t`` is increased at constant speed. This makes beziers difficult to "
"use for anything practical out of the box."
msgstr ""
"Як бачите, швидкість (в пікселях в секунду) кола варіюється, хоча ``t`` і "
"збільшується з постійною швидкістю. Це ускладнює використання безьє для "
"якихось практичних нестандартних речей."

msgid "Drawing"
msgstr "Малюнок"

msgid ""
"Drawing beziers (or objects based on the curve) is a very common use case, "
"but it's also not easy. For pretty much any case, Bezier curves need to be "
"converted to some sort of segments. This is normally difficult, however, "
"without creating a very high amount of them."
msgstr ""
"Малювання кривими Безьє (або об'єктів на їх основі) є дуже поширеним "
"випадком використання, але це також непросто. Майже в будь-якому випадку "
"криві Безьє повинні бути перетворені в якісь сегменти. Це, як правило, "
"важко, без створення їх дуже великої кількості."

msgid ""
"The reason is that some sections of a curve (specifically, corners) may "
"require considerable amounts of points, while other sections may not:"
msgstr ""
"Причина в тому, що деякі ділянки кривої (зокрема, кути) можуть зажадати "
"значної кількості точок, в той час як інші ні:"

msgid ""
"Additionally, if both control points were ``0, 0`` (remember they are "
"relative vectors), the Bezier curve would just be a straight line (so "
"drawing a high amount of points would be wasteful)."
msgstr ""
"Крім того, якби обидві контрольні точки були ``0, 0`` (пам'ятайте, що вони є "
"відносними векторами), крива Безьє була б просто прямою лінією (тому "
"малювання великої кількості точок було б марним)."

msgid ""
"Before drawing Bezier curves, *tessellation* is required. This is often done "
"with a recursive or divide and conquer function that splits the curve until "
"the curvature amount becomes less than a certain threshold."
msgstr ""
"Перед малюванням кривих Безьє потрібно виконати *тесселяцію*. Це часто "
"робиться за допомогою рекурсивної, або поділяючої і підпорядковуючої, "
"функції, яка розділяє криву, поки величина кривизни не стане меншою за "
"певний поріг."

msgid ""
"The *Curve* classes provide this via the :ref:`Curve2D.tessellate() "
"<class_Curve2D_method_tessellate>` function (which receives optional "
"``stages`` of recursion and angle ``tolerance`` arguments). This way, "
"drawing something based on a curve is easier."
msgstr ""
"Класи кривих *Curve* забезпечують це за допомогою функції :ref:`Curve2D."
"tessellate() <class_Curve2D_method_tessellate>` (яка отримує необов'язкові "
"аргументи рекурсії ``stages`` та кута ``tolerance``). Таким чином, "
"намалювати щось на основі кривої стає простіше."

msgid "Traversal"
msgstr "Обхід"

msgid ""
"The last common use case for the curves is to traverse them. Because of what "
"was mentioned before regarding constant speed, this is also difficult."
msgstr ""
"Останній поширений випадок використання кривих - це їх обхід. Через, "
"згадувану раніше, постійну швидкість, це також важко."

msgid ""
"To make this easier, the curves need to be *baked* into equidistant points. "
"This way, they can be approximated with regular interpolation (which can be "
"improved further with a cubic option). To do this, just use the :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` method together "
"with :ref:`Curve2D."
"get_baked_length()<class_Curve2D_method_get_baked_length>`. The first call "
"to either of them will bake the curve internally."
msgstr ""
"Для спрощення, криві потрібно *запікати* в рівновіддалених точках. Таким "
"чином, їх можна апроксимувати за допомогою регулярної інтерполяції (яку "
"можна поліпшити далі за допомогою кубічного варіанту). Для цього достатньо "
"скористатися методом :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` разом з :ref:"
"`Curve2D.get_baked_length()<class_Curve2D_method_get_baked_length>`. Перший "
"виклик будь-якої з них буде запікати криву всередині."

msgid ""
"Traversal at constant speed, then, can be done with the following pseudo-"
"code:"
msgstr ""
"Таким чином, обхід із постійною швидкістю можна виконати за допомогою такого "
"псевдокоду:"

msgid "And the output will, then, move at constant speed:"
msgstr "І в результаті отримаємо рух з постійною швидкістю:"

msgid "Translation status"
msgstr "Стан перекладу"
