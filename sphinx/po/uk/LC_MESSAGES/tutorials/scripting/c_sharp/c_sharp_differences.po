# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# API differences to GDScript"
msgstr "Відмінності API C# в GDScript"

msgid "This is a (incomplete) list of API differences between C# and GDScript."
msgstr "Це (неповний) перелік відмінностей API між C# та GDScript."

msgid "General differences"
msgstr "Загальні відмінності"

msgid ""
"As explained in the :ref:`doc_c_sharp`, C# generally uses ``PascalCase`` "
"instead of the ``snake_case`` used in GDScript and C++."
msgstr ""
"Як пояснено у :ref:`doc_c_sharp`, C# зазвичай використовує ``PascalCase`` "
"замість ``snake_case``, який використовує GDScript та C ++."

msgid "Global scope"
msgstr "Глобальна область"

msgid ""
"Global functions and some constants had to be moved to classes, since C# "
"does not allow declaring them in namespaces. Most global constants were "
"moved to their own enums."
msgstr ""
"Глобальні функції та деякі константи довелося перемістити до класів, "
"оскільки C# не дозволяє оголошувати їх у просторах імен. Більшість "
"глобальних констант були переміщені до власних переліків."

msgid "Constants"
msgstr "Константи"

msgid ""
"Global constants were moved to their own enums. For example, ``ERR_*`` "
"constants were moved to the ``Error`` enum."
msgstr ""
"Глобальні константи були переміщені до власних перерахунків. Наприклад, "
"константи ``ERR_*`` були переміщені до переліку ``Error``."

msgid "Special cases:"
msgstr "Особливі випадки:"

msgid "GDScript"
msgstr "Скрипт"

msgid "C#"
msgstr "C#"

msgid "``SPKEY``"
msgstr "``SPKEY``"

msgid "``GD.SpKey``"
msgstr "``GD.SpKey``"

msgid "``TYPE_*``"
msgstr "``TYPE_*``"

msgid "``Variant.Type`` enum"
msgstr "перелік ``Variant.Type``"

msgid "``OP_*``"
msgstr "``OP_*``"

msgid "``Variant.Operator`` enum"
msgstr "перелік ``Variant.Operator``"

msgid "Math functions"
msgstr "Математичні функції"

msgid ""
"Math global functions, like ``abs``, ``acos``, ``asin``, ``atan`` and "
"``atan2``, are located under ``Mathf`` as ``Abs``, ``Acos``, ``Asin``, "
"``Atan`` and ``Atan2``. The ``PI`` constant can be found as ``Mathf.Pi``."
msgstr ""
"Математичні глобальні функції, такі як ``abs``, ``acos``, ``asin``, ``atan`` "
"і ``atan2``, розташовані під ``Mathf`` як ``Abs``, ``Acos``, ``Asin``, "
"``Atan`` і ``Atan2``. Константа ``PI`` може бути знайдена як ``Mathf.Pi``."

msgid "Random functions"
msgstr "Функції випадковості"

msgid ""
"Random global functions, like ``rand_range`` and ``rand_seed``, are located "
"under ``GD``. Example: ``GD.RandRange`` and ``GD.RandSeed``."
msgstr ""
"Глобальні функції випадковості, такі як ``rand_range`` і ``rand_seed``, "
"розташовані під ``GD``. Приклад: ``GD.RandRange`` і ``GD.RandSeed``."

msgid "Other functions"
msgstr "Інші функції"

msgid ""
"Many other global functions like ``print`` and ``var2str`` are located under "
"``GD``. Example: ``GD.Print`` and ``GD.Var2Str``."
msgstr ""
"Багато інших глобальних функцій на кшталт ``print`` і ``var2str`` "
"розташовані під ``GD``. Приклад: ``GD.Print`` і ``GD.Var2Str``."

msgid "Exceptions:"
msgstr "Винятки:"

msgid "``weakref(obj)``"
msgstr "``weakref(obj)``"

msgid "``Object.WeakRef(obj)``"
msgstr "``Object.WeakRef(obj)``"

msgid "``is_instance_valid(obj)``"
msgstr "``is_instance_valid(obj)``"

msgid "``Object.IsInstanceValid(obj)``"
msgstr "``Object.IsInstanceValid(obj)``"

msgid "Tips"
msgstr "Поради"

msgid ""
"Sometimes it can be useful to use the ``using static`` directive. This "
"directive allows to access the members and nested types of a class without "
"specifying the class name."
msgstr ""
"Іноді може бути корисним використання директиви``using static``. Ця "
"директива дозволяє отримати доступ до членів та вкладених типів класу без "
"вказування назви класу."

msgid "Example:"
msgstr "Приклад:"

msgid "Export keyword"
msgstr "Ключове слово Export"

msgid ""
"Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword. "
"This attribute can also be provided with optional :ref:"
"`PropertyHint<enum_@GlobalScope_PropertyHint>` and ``hintString`` "
"parameters. Default values can be set by assigning a value."
msgstr ""
"Використовуйте атрибут ``[Export]`` замість ключового слова GDScript "
"``export``. Цей атрибут також може надаватися з додатковими параметрами :ref:"
"`PropertyHint<enum_@GlobalScope_PropertyHint>` та ``hintString``. Значення "
"за замовчуванням можна встановити, призначивши значення."

msgid "Signal keyword"
msgstr "Ключове слово Signal"

msgid ""
"Use the ``[Signal]`` attribute to declare a signal instead of the GDScript "
"``signal`` keyword. This attribute should be used on a `delegate`, whose "
"name signature will be used to define the signal."
msgstr ""
"Використовуйте атрибут ``[Signal]``, щоб оголосити сигнал замість ключового "
"слова GDScript ``signal``. Цей атрибут слід використовувати для "
"`делегата`(`delegate`), підпис назви якого буде використаний для визначення "
"сигналу."

msgid "See also: :ref:`doc_c_sharp_signals`."
msgstr "Дивіться також: :ref:`doc_c_sharp_signals`."

msgid "`onready` keyword"
msgstr "Ключове слово `onready`"

msgid ""
"GDScript has the ability to defer the initialization of a member variable "
"until the ready function is called with `onready` (cf. :ref:"
"`doc_gdscript_onready_keyword`). For example:"
msgstr ""
"GDScript має можливість відкласти ініціалізацію змінної-члена, доки функція "
"ready не буде викликана з допомогою `onready` (дивіться :ref:"
"`doc_gdscript_onready_keyword`). Наприклад:"

msgid ""
"However C# does not have this ability. To achieve the same effect you need "
"to do this."
msgstr ""
"Однак C# не має цієї можливості. Для досягнення того ж ефекту вам потрібно "
"зробити таке."

msgid "Singletons"
msgstr "Сінглтони"

msgid ""
"Singletons are available as static classes rather than using the singleton "
"pattern. This is to make code less verbose than it would be with an "
"``Instance`` property."
msgstr ""
"Синглтони доступні як статичні класи, а не з допомогою шаблону синглтону. Це "
"робить код менш багатослівним, ніж це було б з властивістю ``Instance``."

msgid ""
"However, in some very rare cases this is not enough. For example, you may "
"want to access a member from the base class ``Godot.Object``, like "
"``Connect``. For such use cases we provide a static property named "
"``Singleton`` that returns the singleton instance. The type of this instance "
"is ``Godot.Object``."
msgstr ""
"Однак у деяких дуже рідкісних випадках цього недостатньо. Наприклад, ви "
"можете отримати доступ до члена з базового класу ``Godot.Object``, наприклад "
"``Connect``. Для таких випадків використання ми надаємо статичну "
"властивість, іменовану, ``Singleton``, яка повертає синглтон екземпляр. Тип "
"цього екземпляра - ``Godot.Object``."

msgid "String"
msgstr "Строка (рядок, текст)"

msgid ""
"Use ``System.String`` (``string``). Most of Godot's String methods are "
"provided by the ``StringExtensions`` class as extension methods."
msgstr ""
"Використовуйте ``System.String`` (``string``). Більшість методів String у "
"Godot надаються класом ``StringExtensions``, як методи розширення."

msgid "There are a few differences, though:"
msgstr "Однак є кілька відмінностей:"

msgid ""
"``erase``: Strings are immutable in C#, so we cannot modify the string "
"passed to the extension method. For this reason, ``Erase`` was added as an "
"extension method of ``StringBuilder`` instead of string. Alternatively, you "
"can use ``string.Remove``."
msgstr ""
"``erase``: Строки є незмінні в C#, тому ми не можемо змінювати строку, "
"передану методу розширення. З цієї причини ``Erase`` було додано як метод "
"розширення ``StringBuilder``замість строки. Як варіант, ви можете "
"використовувати ``string.Remove``."

msgid ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: An additional method is provided, "
"which is an overload of ``IsSubsequenceOf``, allowing you to explicitly "
"specify case sensitivity:"
msgstr ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: Надається додатковий метод, який є "
"перевантаженням ``IsSubsequenceOf``, що дозволяє чітко вказати чутливість "
"регістру:"

msgid ""
"``Match``/``Matchn``/``ExprMatch``: An additional method is provided besides "
"``Match`` and ``Matchn``, which allows you to explicitly specify case "
"sensitivity:"
msgstr ""
"``Match``/``Matchn``/``ExprMatch`` : Додатковий спосіб передбачений на "
"додаток до ``Match`` і ``Matchn``, який дозволяє явно вказати чутливість до "
"регістру:"

msgid "Basis"
msgstr "Основа"

msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Basis()`` initializes all primitive members to their default value. Use "
"``Basis.Identity`` for the equivalent of ``Basis()`` in GDScript and C++."
msgstr ""
"Структури не можуть мати конструкторів без параметрів у C #. Тому ``new "
"Basis()`` ініціалізує всіх примітивних членів до їх значення за "
"замовчуванням. Використовуйте ``Basis.Identity`` для еквівалента ``Basis()`` "
"в GDScript та C ++."

msgid "The following method was converted to a property with a different name:"
msgstr "Наступний метод був перетворений у властивість з іншою назвою:"

msgid "``get_scale()``"
msgstr "``get_scale()``"

msgid "``Scale``"
msgstr "``Scale``"

msgid "Transform2D"
msgstr ""

msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Transform2D()`` initializes all primitive members to their default value. "
"Please use ``Transform2D.Identity`` for the equivalent of ``Transform2D()`` "
"in GDScript and C++."
msgstr ""
"Структури не можуть мати конструкторів без параметрів у C#. Тому ``new "
"Transform2D()`` ініціалізує всіх примітивних членів до їх значення за "
"замовчуванням. Будь ласка, використовуйте ``Transform2D.Identity`` для "
"еквівалента ``Transform2D()`` в GDScript та C ++."

msgid ""
"The following methods were converted to properties with their respective "
"names changed:"
msgstr ""
"Наступні методи були перетворені у властивості зі зміненими відповідними "
"назвами:"

msgid "``get_rotation()``"
msgstr "``get_rotation()``"

msgid "``Rotation``"
msgstr "``Rotation``"

msgid "Plane"
msgstr "Площина"

msgid ""
"The following method was converted to a property with a *slightly* different "
"name:"
msgstr "Наступний метод був перетворений у властивість з *дещо* іншою назвою:"

msgid "``center()``"
msgstr "``center()``"

msgid "``Center``"
msgstr "``Center``"

msgid "Rect2"
msgstr "Rect2"

msgid ""
"The following field was converted to a property with a *slightly* different "
"name:"
msgstr "Наступне поле було перетворене у властивість із *дещо* іншою назвою:"

msgid "``end``"
msgstr "``end``"

msgid "``End``"
msgstr "``End``"

msgid "``get_area()``"
msgstr "``get_area()``"

msgid "``Area``"
msgstr "``Area``"

msgid "Quat"
msgstr ""

msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Quat()`` initializes all primitive members to their default value. Please "
"use ``Quat.Identity`` for the equivalent of ``Quat()`` in GDScript and C++."
msgstr ""
"Структури не можуть мати конструкторів без параметрів у C#. Тому ``new "
"Quat()`` ініціалізує всіх примітивних членів до їх значення за "
"замовчуванням. Будь ласка, використовуйте ``Quat.Identity`` для еквівалента "
"``Quat()`` в GDScript та C++."

msgid ""
"The following methods were converted to a property with a different name:"
msgstr "Наступні методи були перетворені у властивість з іншою назвою:"

msgid "``length()``"
msgstr "``length()``"

msgid "``Length``"
msgstr "``Length``"

msgid "``length_squared()``"
msgstr "``length_squared()``"

msgid "``LengthSquared``"
msgstr "``LengthSquared``"

msgid "Array"
msgstr "Масив"

msgid ""
"*This is temporary. PoolArrays will need their own types to be used the way "
"they are meant to.*"
msgstr ""
"*Це тимчасово. PoolArrays знадобляться власні типи, щоб їх можна було "
"використовувати так, як вони призначені.*"

msgid "``Array``"
msgstr "``Array``"

msgid "``Godot.Collections.Array``"
msgstr "``Godot.Collections.Array``"

msgid "``PoolIntArray``"
msgstr "``PoolIntArray``"

msgid "``int[]``"
msgstr "``int[]``"

msgid "``PoolByteArray``"
msgstr "``PoolByteArray``"

msgid "``byte[]``"
msgstr "``byte[]``"

msgid "``PoolFloatArray``"
msgstr "``PoolFloatArray``"

msgid "``float[]``"
msgstr "``float[]``"

msgid "``PoolStringArray``"
msgstr "``PoolStringArray``"

msgid "``String[]``"
msgstr "``String[]``"

msgid "``PoolColorArray``"
msgstr "``PoolColorArray``"

msgid "``Color[]``"
msgstr "``Color[]``"

msgid "``PoolVector2Array``"
msgstr "``PoolVector2Array``"

msgid "``Vector2[]``"
msgstr "``Vector2[]``"

msgid "``PoolVector3Array``"
msgstr "``PoolVector3Array``"

msgid "``Vector3[]``"
msgstr "``Vector3[]``"

msgid ""
"``Godot.Collections.Array<T>`` is a type-safe wrapper around ``Godot."
"Collections.Array``. Use the ``Godot.Collections.Array<T>(Godot.Collections."
"Array)`` constructor to create one."
msgstr ""
"``Godot.Collections.Array<T>`` є типо-безпечною обгорткою для ``Godot."
"Collections.Array``. Використовуйте конструктор ``Godot.Collections."
"Array<T>(Godot.Collections.Array)``для його створення."

msgid "Dictionary"
msgstr "Словник"

msgid "Use ``Godot.Collections.Dictionary``."
msgstr "Використовуйте ``Godot.Collections.Dictionary``."

msgid ""
"``Godot.Collections.Dictionary<T>`` is a type-safe wrapper around ``Godot."
"Collections.Dictionary``. Use the ``Godot.Collections.Dictionary<T>(Godot."
"Collections.Dictionary)`` constructor to create one."
msgstr ""
"``Godot.Collections.Dictionary<T>`` є типо-безпечною обгорткою для ``Godot."
"Collections.Dictionary``. Використовуйте конструктор ``Godot.Collections."
"Dictionary<T>(Godot.Collections.Dictionary)`` для його створення."

msgid "Variant"
msgstr "Варіант"

msgid "``System.Object`` (``object``) is used instead of ``Variant``."
msgstr "``System.Object`` (``object``) використовується замість ``Variant``."

msgid "Communicating with other scripting languages"
msgstr "Взаємодія з іншими мовами скриптів"

msgid "This is explained extensively in :ref:`doc_cross_language_scripting`."
msgstr "Це широко пояснюється в :ref:`doc_cross_language_scripting`."

msgid "Yield"
msgstr "Результат"

msgid ""
"Something similar to GDScript's ``yield`` with a single parameter can be "
"achieved with C#'s `yield keyword <https://docs.microsoft.com/en-US/dotnet/"
"csharp/language-reference/keywords/yield>`_."
msgstr ""
"Щось подібне до ``yield`` GDScript з одним параметром можна досягти за "
"допомогою ключового слова `yield C# <https://docs.microsoft.com/en-US/dotnet/"
"csharp/language-reference/keywords/yield>`_."

msgid ""
"The equivalent of yield on signal can be achieved with async/await and "
"``Godot.Object.ToSignal``."
msgstr ""
"Еквівалент виходу сигналу може бути досягнутий за допомогою async/await та "
"``Godot.Object.ToSignal``."

msgid "Other differences"
msgstr "Інші відмінності"

msgid ""
"``preload``, as it works in GDScript, is not available in C#. Use ``GD."
"Load`` or ``ResourceLoader.Load`` instead."
msgstr ""
"``preload``, так як він працює в GDScript, недоступний у C#. Використовуйте "
"``GD.Load``, або ``ResourceLoader`.Load`` замість нього."

msgid "Other differences:"
msgstr "Інші відмінності:"

msgid "``Color8``"
msgstr "``Color8``"

msgid "``Color.Color8``"
msgstr "``Color.Color8``"

msgid "``is_inf``"
msgstr "``is_inf``"

msgid "``float.IsInfinity``"
msgstr "``float.IsInfinity``"

msgid "``is_nan``"
msgstr "``is_nan``"

msgid "``float.IsNaN``"
msgstr "``float.IsNaN``"

msgid "``dict2inst``"
msgstr "``dict2inst``"

msgid "TODO"
msgstr "ЩЕ НЕ НАПИСАНО."

msgid "``inst2dict``"
msgstr "``inst2dict``"

msgid "Translation status"
msgstr "Стан перекладу"
