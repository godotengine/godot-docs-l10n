# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GPU optimization"
msgstr "Оптимізація Графічного Процесора"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"The demand for new graphics features and progress almost guarantees that you "
"will encounter graphics bottlenecks. Some of these can be on the CPU side, "
"for instance in calculations inside the Godot engine to prepare objects for "
"rendering. Bottlenecks can also occur on the CPU in the graphics driver, "
"which sorts instructions to pass to the GPU, and in the transfer of these "
"instructions. And finally, bottlenecks also occur on the GPU itself."
msgstr ""
"Попит на нові графічні можливості та прогрес майже гарантує, що ви "
"зіткнетеся з вузькими місцями в графіці. Деякі з них можуть бути на стороні "
"центрального процесора, наприклад, під час обчислень всередині рушія Godot "
"для підготовки об'єктів до рендерингу. Вузькі місця також можуть виникати на "
"центральному процесорі в графічному драйвері, який сортує інструкції для "
"передачі на графічний процесор, і в процесі передачі цих інструкцій. І, "
"нарешті, вузькі місця виникають і на самому графічному процесорі."

msgid ""
"Where bottlenecks occur in rendering is highly hardware-specific. Mobile "
"GPUs in particular may struggle with scenes that run easily on desktop."
msgstr ""
"Вузькі місця в рендерингу залежать від апаратного забезпечення. Зокрема, "
"мобільні графічні процесори можуть не справлятися зі сценами, які легко "
"відтворюються на настільних."

msgid ""
"Understanding and investigating GPU bottlenecks is slightly different to the "
"situation on the CPU. This is because, often, you can only change "
"performance indirectly by changing the instructions you give to the GPU. "
"Also, it may be more difficult to take measurements. In many cases, the only "
"way of measuring performance is by examining changes in the time spent "
"rendering each frame."
msgstr ""
"Розуміння та дослідження вузьких місць графічного процесора дещо "
"відрізняється від ситуації на центральному процесорі. Це пов'язано з тим, що "
"часто ви можете змінити продуктивність лише опосередковано, змінюючи "
"інструкції, які ви даєте графічному процесору. Крім того, може бути "
"складніше провести вимірювання. У багатьох випадках єдиний спосіб виміряти "
"продуктивність - це дослідити зміни у часі, витраченому на малювання кожного "
"кадру."

msgid "Draw calls, state changes, and APIs"
msgstr "Виклики малювання, зміни стану та API"

msgid ""
"The following section is not relevant to end-users, but is useful to provide "
"background information that is relevant in later sections."
msgstr ""
"Наступний розділ не стосується кінцевих користувачів, але корисний для "
"надання довідкової інформації, яка буде використана в наступних розділах."

msgid ""
"Godot sends instructions to the GPU via a graphics API (OpenGL, OpenGL ES or "
"Vulkan). The communication and driver activity involved can be quite costly, "
"especially in OpenGL and OpenGL ES. If we can provide these instructions in "
"a way that is preferred by the driver and GPU, we can greatly increase "
"performance."
msgstr ""
"Godot надсилає інструкції графічному процесору через графічний API (OpenGL, "
"OpenGL ES або Vulkan). Комунікація та діяльність драйвера можуть бути досить "
"дорогими, особливо у випадку OpenGL та OpenGL ES. Якщо ми зможемо надати ці "
"інструкції у спосіб, якому надають перевагу драйвер і графічний процесор, ми "
"зможемо значно підвищити продуктивність."

msgid ""
"Nearly every API command in OpenGL requires a certain amount of validation "
"to make sure the GPU is in the correct state. Even seemingly simple commands "
"can lead to a flurry of behind-the-scenes housekeeping. Therefore, the goal "
"is to reduce these instructions to a bare minimum and group together similar "
"objects as much as possible so they can be rendered together, or with the "
"minimum number of these expensive state changes."
msgstr ""
"Майже кожна команда API в OpenGL вимагає певної перевірки, щоб переконатися, "
"що графічний процесор знаходиться в правильному стані. Навіть, здавалося б, "
"прості команди можуть призвести до шквалу закулісної роботи. Тому мета "
"полягає в тому, щоб звести ці команди до мінімуму і згрупувати схожі об'єкти "
"якомога більше, щоб їх можна було вимальовувати разом або з мінімальною "
"кількістю змін стану."

msgid "2D batching"
msgstr "2D пакетування"

msgid ""
"In 2D, the costs of treating each item individually can be prohibitively "
"high - there can easily be thousands of them on the screen. This is why 2D "
"*batching* is used. Multiple similar items are grouped together and rendered "
"in a batch, via a single draw call, rather than making a separate draw call "
"for each item. In addition, this means state changes, material and texture "
"changes can be kept to a minimum."
msgstr ""
"У 2D, вартість обробки кожного елемента окремо, може бути непомірно високою "
"- на екрані їх можуть бути тисячі. Ось чому в 2D використовується "
"*пакетування*. Кілька схожих об'єктів групуються разом і вимальовуються в "
"пакеті, за допомогою одного виклику малювання, замість того, щоб робити "
"окремий виклик малювання для кожного об'єкта. Крім того, це означає, що "
"зміни стану, матеріалу і текстури можуть бути зведені до мінімуму."

msgid "For more information on 2D batching, see :ref:`doc_batching`."
msgstr ""
"Для отримання додаткової інформації про 2D пакетування дивіться :ref:"
"`doc_batching`."

msgid "3D batching"
msgstr "3D пакетування"

msgid ""
"In 3D, we still aim to minimize draw calls and state changes. However, it "
"can be more difficult to batch together several objects into a single draw "
"call. 3D meshes tend to comprise hundreds or thousands of triangles, and "
"combining large meshes in real-time is prohibitively expensive. The costs of "
"joining them quickly exceeds any benefits as the number of triangles grows "
"per mesh. A much better alternative is to **join meshes ahead of time** "
"(static meshes in relation to each other). This can either be done by "
"artists, or programmatically within Godot."
msgstr ""
"У 3D ми все ще прагнемо мінімізувати виклики малювання та зміни станів. "
"Однак, об'єднати декілька об'єктів в один виклик малювання може бути "
"складніше. Меші 3D, як правило, складається з сотень, або тисяч, "
"трикутників, а об'єднання великих мешів у реальному часі є надзвичайно "
"дорогим. Витрати на їх об'єднання швидко перевищують будь-які вигоди, "
"оскільки кількість трикутників в одному меші різко зростає. Набагато кращою "
"альтернативою є **завчасне поєднання мешів** (статичні меші відносно один "
"одного). Це може бути зроблено або художниками, або програмно в межах Godot."

msgid ""
"There is also a cost to batching together objects in 3D. Several objects "
"rendered as one cannot be individually culled. An entire city that is off-"
"screen will still be rendered if it is joined to a single blade of grass "
"that is on screen. Thus, you should always take objects' location and "
"culling into account when attempting to batch 3D objects together. Despite "
"this, the benefits of joining static objects often outweigh other "
"considerations, especially for large numbers of distant or low-poly objects."
msgstr ""
"Пакетне об'єднання об'єктів у 3D також має певні витрати. Кілька об'єктів, "
"зображених як один, не можуть бути вибраковані окремо. Ціле місто, яке "
"знаходиться за межами екрану, все одно буде зображене, якщо його приєднати "
"до однієї травинки, яка знаходиться на екрані. Таким чином, при спробі "
"об'єднати 3D-об'єкти слід завжди враховувати розташування об'єктів та "
"можливість їхнього відсіювання. Незважаючи на це, переваги об'єднання "
"статичних об'єктів часто переважають інші міркування, особливо для великої "
"кількості віддалених або низькополігональних об'єктів."

msgid ""
"For more information on 3D specific optimizations, see :ref:"
"`doc_optimizing_3d_performance`."
msgstr ""
"Для отримання додаткової інформації про специфічні 3D-оптимізації див. :ref:"
"`doc_optimizing_3d_performance`."

msgid "Reuse Shaders and Materials"
msgstr "Повторне використання шейдерів та матеріалів"

msgid ""
"The Godot renderer is a little different to what is out there. It's designed "
"to minimize GPU state changes as much as possible. :ref:`SpatialMaterial "
"<class_SpatialMaterial>` does a good job at reusing materials that need "
"similar shaders. If custom shaders are used, make sure to reuse them as much "
"as possible. Godot's priorities are:"
msgstr ""
"Рендерер Godot дещо відрізняється від інших. Він призначений для мінімізації "
"змін стану графічного процесора наскільки це можливо. :ref:`SpatialMaterial "
"<class_SpatialMaterial>` добре справляється з повторним використанням "
"матеріалів, які потребують подібних шейдерів. Якщо ви використовуєте власні "
"шейдери, переконайтеся, що використовуєте їх якомога частіше. Пріоритети "
"Godot такі:"

msgid ""
"**Reusing Materials:** The fewer different materials in the scene, the "
"faster the rendering will be. If a scene has a huge amount of objects (in "
"the hundreds or thousands), try reusing the materials. In the worst case, "
"use atlases to decrease the amount of texture changes."
msgstr ""
"**Повторне використання матеріалів:** Чим менше різних матеріалів у сцені, "
"тим швидшим буде рендеринг. Якщо у сцені велика кількість об'єктів (сотні "
"або тисячі), спробуйте використовувати матеріали повторно. У гіршому "
"випадку, використовуйте атласи, щоб зменшити кількість текстурних змін."

msgid ""
"**Reusing Shaders:** If materials can't be reused, at least try to re-use "
"shaders. Note: shaders are automatically reused between SpatialMaterials "
"that share the same configuration (features that are enabled or disabled "
"with a check box) even if they have different parameters."
msgstr ""
"**Повторне використання шейдерів:** Якщо матеріали не можуть бути "
"використані повторно, принаймні спробуйте повторно використати шейдери. "
"Примітка: шейдери автоматично повторно використовуються між просторовими "
"матеріалами (SpatialMaterial), які мають однакову конфігурацію (функції, "
"увімкнені або вимкнені за допомогою галочки), навіть якщо вони мають різні "
"параметри."

msgid ""
"If a scene has, for example, ``20,000`` objects with ``20,000`` different "
"materials each, rendering will be slow. If the same scene has ``20,000`` "
"objects, but only uses ``100`` materials, rendering will be much faster."
msgstr ""
"Якщо у сцені є, наприклад, ``20,000`` об'єктів з різними ``20,000`` "
"матеріалами для кожного з них, рендеринг буде повільним. Якщо у тій самій "
"сцені є ``20,000`` об'єктів, але використовуються лише ``100`` матеріалів, "
"рендеринг буде значно швидшим."

msgid "Pixel cost versus vertex cost"
msgstr "Вартість пікселя в порівнянні з вартістю вершини"

msgid ""
"You may have heard that the lower the number of polygons in a model, the "
"faster it will be rendered. This is *really* relative and depends on many "
"factors."
msgstr ""
"Можливо, ви чули, що чим менша кількість полігонів у моделі, тим швидше вона "
"рендериться. Це *насправді* відносно і залежить від багатьох факторів."

msgid ""
"On a modern PC and console, vertex cost is low. GPUs originally only "
"rendered triangles. This meant that every frame:"
msgstr ""
"На сучасному ПК та консолі вартість вершини є низькою. Спочатку графічні "
"процесори рендерили лише трикутники. Це означало, що кожен кадр:"

msgid "All vertices had to be transformed by the CPU (including clipping)."
msgstr ""
"Всі вершини повинні були бути перетворені процесором (включаючи відсікання)."

msgid "All vertices had to be sent to the GPU memory from the main RAM."
msgstr ""
"Всі вершини потрібно було відправити в пам'ять графічного процесора з "
"основної оперативної пам'яті."

msgid ""
"Nowadays, all this is handled inside the GPU, greatly increasing "
"performance. 3D artists usually have the wrong feeling about polycount "
"performance because 3D DCCs (such as Blender, Max, etc.) need to keep "
"geometry in CPU memory for it to be edited, reducing actual performance. "
"Game engines rely on the GPU more, so they can render many triangles much "
"more efficiently."
msgstr ""
"Сьогодні все це обробляється всередині графічного процесора, що значно "
"підвищує продуктивність. 3D-художники зазвичай мають хибне уявлення про "
"продуктивність багатокутників, оскільки 3D DCC (такі як Blender, Max тощо) "
"повинні зберігати геометрію в пам'яті процесора для її редагування, що "
"знижує реальну продуктивність. Ігрові рушії більше покладаються на графічний "
"процесор, тому вони можуть рендерити багато трикутників набагато ефективніше."

msgid ""
"On mobile devices, the story is different. PC and console GPUs are brute-"
"force monsters that can pull as much electricity as they need from the power "
"grid. Mobile GPUs are limited to a tiny battery, so they need to be a lot "
"more power efficient."
msgstr ""
"На мобільних пристроях все інакше. Графічні процесори для ПК та консолей - "
"це монстри грубої сили, які можуть тягнути з електромережі стільки "
"електроенергії, скільки їм потрібно. Мобільні графічні процесори обмежені "
"крихітним акумулятором, тому вони повинні бути набагато енергоефективнішими."

msgid ""
"To be more efficient, mobile GPUs attempt to avoid *overdraw*. Overdraw "
"occurs when the same pixel on the screen is being rendered more than once. "
"Imagine a town with several buildings. GPUs don't know what is visible and "
"what is hidden until they draw it. For example, a house might be drawn and "
"then another house in front of it (which means rendering happened twice for "
"the same pixel). PC GPUs normally don't care much about this and just throw "
"more pixel processors to the hardware to increase performance (which also "
"increases power consumption)."
msgstr ""
"Щоб бути більш ефективними, мобільні графічні процесори намагаються уникати "
"*перемальовування*. Перемальовування виникає, коли один і той самий піксель "
"на екрані рендериться більше одного разу. Уявіть собі місто з кількома "
"будівлями. Графічні процесори не знають, які є видимі, а які приховані, доки "
"не намалюють їх. Наприклад, може бути намальований будинок, а потім інший "
"будинок перед ним (це означає, що рендеринг відбувся двічі для одного і того "
"ж пікселя). Графічні процесори ПК зазвичай не дуже переймаються цим і просто "
"додають більше піксельних процесорів до апаратного забезпечення, щоб "
"збільшити продуктивність (що також збільшує енергоспоживання)."

msgid ""
"Using more power is not an option on mobile so mobile devices use a "
"technique called *tile-based rendering* which divides the screen into a "
"grid. Each cell keeps the list of triangles drawn to it and sorts them by "
"depth to minimize *overdraw*. This technique improves performance and "
"reduces power consumption, but takes a toll on vertex performance. As a "
"result, fewer vertices and triangles can be processed for drawing."
msgstr ""
"На мобільних пристроях не можна використовувати більше енергії, тому вони "
"використовують техніку, яка називається *плитковий рендеринг*, який ділить "
"екран на сітку. Кожна комірка зберігає список намальованих до неї "
"трикутників і сортує їх за глибиною, щоб мінімізувати *перемальовування*. Ця "
"техніка покращує продуктивність і зменшує енергоспоживання, але негативно "
"впливає на продуктивність вершин. Як наслідок, для малювання обробляється "
"менша кількість вершин і трикутників."

msgid ""
"Additionally, tile-based rendering struggles when there are small objects "
"with a lot of geometry within a small portion of the screen. This forces "
"mobile GPUs to put a lot of strain on a single screen tile, which "
"considerably decreases performance as all the other cells must wait for it "
"to complete before displaying the frame."
msgstr ""
"Крім того, плитковий рендеринг не справляється з малими об'єктами зі "
"складною геометрією в межах невеликої частини екрану. Це змушує мобільні "
"графічні процесори сильно навантажувати одну плитку екрану, що значно знижує "
"продуктивність, оскільки всі інші комірки повинні чекати на її завершення, "
"перш ніж відобразити кадр."

msgid ""
"To summarize, don't worry about vertex count on mobile, but **avoid "
"concentration of vertices in small parts of the screen**. If a character, "
"NPC, vehicle, etc. is far away (which means it looks tiny), use a smaller "
"level of detail (LOD) model. Even on desktop GPUs, it's preferable to avoid "
"having triangles smaller than the size of a pixel on screen."
msgstr ""
"Підсумовуючи, не турбуйтеся про кількість вершин на мобільному, але "
"**уникайте концентрації вершин у малих частинах екрану**. Якщо персонаж, "
"NPC, транспортний засіб тощо знаходиться далеко (тобто виглядає крихітним), "
"використовуйте модель з меншим рівнем деталізації (LOD). Навіть на "
"настільних графічних процесорах бажано уникати трикутників менших за розмір "
"пікселя на екрані."

msgid "Pay attention to the additional vertex processing required when using:"
msgstr ""
"Зверніть увагу на додаткову обробку вершин, необхідну при використанні:"

msgid "Skinning (skeletal animation)"
msgstr "Скінінг (скелетної анімації)"

msgid "Morphs (shape keys)"
msgstr "Морфінг (ключі форми)"

msgid "Vertex-lit objects (common on mobile)"
msgstr "Об'єкти з підсвічуванням вершини (поширені на мобільних)"

msgid "Pixel/fragment shaders and fill rate"
msgstr "Піксельні/фрагментні шейдери та швидкість заповнення"

msgid ""
"In contrast to vertex processing, the costs of fragment (per-pixel) shading "
"have increased dramatically over the years. Screen resolutions have "
"increased (the area of a 4K screen is 8,294,400 pixels, versus 307,200 for "
"an old 640×480 VGA screen, that is 27x the area), but also the complexity of "
"fragment shaders has exploded. Physically-based rendering requires complex "
"calculations for each fragment."
msgstr ""
"На відміну від обробки вершин, витрати на фрагментарне (на піксель) "
"затінення значно зросли з роками. Роздільна здатність екранів зросла (площа "
"4K-екрану становить 8 294 400 пікселів проти 307 200 для старого 640×480 VGA-"
"екрану, тобто в 27 разів більше), але також зросла і складність фрагментних "
"шейдерів. Фізичний рендеринг вимагає складних обчислень для кожного "
"фрагмента."

msgid ""
"You can test whether a project is fill rate-limited quite easily. Turn off V-"
"Sync to prevent capping the frames per second, then compare the frames per "
"second when running with a large window, to running with a very small "
"window. You may also benefit from similarly reducing your shadow map size if "
"using shadows. Usually, you will find the FPS increases quite a bit using a "
"small window, which indicates you are to some extent fill rate-limited. On "
"the other hand, if there is little to no increase in FPS, then your "
"bottleneck lies elsewhere."
msgstr ""
"Перевірити, чи не обмежена частота заповнення проекту, дуже просто. Вимкніть "
"V-Sync, щоб запобігти обмеженню кількості кадрів на секунду, а потім "
"порівняйте кількість кадрів на секунду при роботі з великим вікном і при "
"роботі з дуже маленьким вікном. Якщо ви використовуєте тіні, вам також може "
"бути корисно зменшити розмір карти тіней. Зазвичай, ви побачите, що FPS "
"значно зростає при використанні маленького вікна, що вказує на те, що у вас "
"певною мірою обмежена швидкість заповнення. З іншого боку, якщо збільшення "
"FPS незначне або взагалі відсутнє, це означає, що вузьке місце лежить деінде."

msgid ""
"You can increase performance in a fill rate-limited project by reducing the "
"amount of work the GPU has to do. You can do this by simplifying the shader "
"(perhaps turn off expensive options if you are using a :ref:`SpatialMaterial "
"<class_SpatialMaterial>`), or reducing the number and size of textures used."
msgstr ""
"Ви можете підвищити продуктивність у проекті з обмеженою швидкістю "
"заповнення, зменшивши кількість роботи, яку має виконувати графічний "
"процесор. Це можна зробити, спростивши шейдер (можливо, вимкнувши дорогі "
"опції, якщо ви використовуєте :ref:`SpatialMaterial "
"<class_SpatialMaterial>`), або зменшивши кількість і розмір текстур, що "
"використовуються."

msgid ""
"**When targeting mobile devices, consider using the simplest possible "
"shaders you can reasonably afford to use.**"
msgstr ""
"**Якщо ви орієнтуєтесь на мобільні пристрої, використовуйте найпростіші "
"шейдери, які ви можете собі дозволити.**"

msgid "Reading textures"
msgstr "Читання текстур"

msgid ""
"The other factor in fragment shaders is the cost of reading textures. "
"Reading textures is an expensive operation, especially when reading from "
"several textures in a single fragment shader. Also, consider that filtering "
"may slow it down further (trilinear filtering between mipmaps, and "
"averaging). Reading textures is also expensive in terms of power usage, "
"which is a big issue on mobiles."
msgstr ""
"Іншим фактором у фрагментних шейдерах є вартість зчитування текстур. "
"Зчитування текстур є дорогою операцією, особливо коли зчитується декілька "
"текстур в одному фрагментному шейдері. Також враховуйте, що фільтрація може "
"ще більше сповільнити її (трилінійна фільтрація між міпмапами та "
"усереднення). Зчитування текстур також дорого коштує з точки зору "
"використання енергії, що є великою проблемою на мобільних пристроях."

msgid ""
"**If you use third-party shaders or write your own shaders, try to use "
"algorithms that require as few texture reads as possible.**"
msgstr ""
"**Якщо ви використовуєте сторонні шейдери або пишете власні, намагайтеся "
"використовувати алгоритми, які вимагають якомога менше зчитувань текстури.**"

msgid "Texture compression"
msgstr "Стиснення текстури"

msgid ""
"By default, Godot compresses textures of 3D models when imported using video "
"RAM (VRAM) compression. Video RAM compression isn't as efficient in size as "
"PNG or JPG when stored, but increases performance enormously when drawing "
"large enough textures."
msgstr ""
"За замовчуванням Godot стискає текстури 3D-моделей при імпорті, "
"використовуючи стиснення відеопам'яті (VRAM). Стиснення відеопам'яті не таке "
"ефективне при зберіганні, як PNG або JPG, але значно підвищує продуктивність "
"під час малювання достатньо великих текстур."

msgid ""
"This is because the main goal of texture compression is bandwidth reduction "
"between memory and the GPU."
msgstr ""
"Це пов'язано з тим, що основною метою стиснення текстур є зменшення "
"пропускної здатності між пам'яттю та графічним процесором."

msgid ""
"In 3D, the shapes of objects depend more on the geometry than the texture, "
"so compression is generally not noticeable. In 2D, compression depends more "
"on shapes inside the textures, so the artifacts resulting from 2D "
"compression are more noticeable."
msgstr ""
"У 3D, форма об'єктів більше залежить від геометрії, ніж від текстури, тому "
"стиснення, як правило, непомітне. У 2D стиснення більше залежить від форм "
"всередині текстур, тому артефакти, що виникають в результаті 2D стиснення, "
"більш помітні."

msgid ""
"As a warning, most Android devices do not support texture compression of "
"textures with transparency (only opaque), so keep this in mind."
msgstr ""
"Попередження: більшість пристроїв Android не підтримують стиснення текстур з "
"прозорістю (тільки непрозорі), тому майте це на увазі."

msgid ""
"Even in 3D, \"pixel art\" textures should have VRAM compression disabled as "
"it will negatively affect their appearance, without improving performance "
"significantly due to their low resolution."
msgstr ""
"Навіть у 3D для \"піксельних\" текстур слід вимкнути стиснення VRAM, "
"оскільки воно негативно вплине на їхній зовнішній вигляд, не покращуючи при "
"цьому продуктивність через низьку роздільну здатність."

msgid "Post-processing and shadows"
msgstr "Постобробка та тіні"

msgid ""
"Post-processing effects and shadows can also be expensive in terms of "
"fragment shading activity. Always test the impact of these on different "
"hardware."
msgstr ""
"Ефекти постобробки та тіні також можуть бути дорогими з точки зору "
"активності затінення фрагментів. Завжди перевіряйте їхній вплив на різному "
"обладнанні."

msgid ""
"**Reducing the size of shadowmaps can increase performance**, both in terms "
"of writing and reading the shadowmaps. On top of that, the best way to "
"improve performance of shadows is to turn shadows off for as many lights and "
"objects as possible. Smaller or distant OmniLights/SpotLights can often have "
"their shadows disabled with only a small visual impact."
msgstr ""
"**Зменшення розміру карти тіней може підвищити продуктивність**, як з точки "
"зору запису, так і з точки зору читання карти тіней. Крім того, найкращий "
"спосіб покращити продуктивність тіней - це вимкнути тіні для якомога більшої "
"кількості джерел світла та об'єктів. Для менших або віддалених OmniLights/"
"SpotLights часто можна вимкнути тіні, що матиме лише невеликий візуальний "
"вплив."

msgid "Transparency and blending"
msgstr "Прозорість і змішування"

msgid ""
"Transparent objects present particular problems for rendering efficiency. "
"Opaque objects (especially in 3D) can be essentially rendered in any order "
"and the Z-buffer will ensure that only the front most objects get shaded. "
"Transparent or blended objects are different. In most cases, they cannot "
"rely on the Z-buffer and must be rendered in \"painter's order\" (i.e. from "
"back to front) to look correct."
msgstr ""
"Прозорі об'єкти створюють особливі проблеми для ефективності рендерингу. "
"Непрозорі об'єкти (особливо у 3D) можна візуалізувати у будь-якому порядку, "
"а Z-буфер гарантує, що затінюватимуться лише передні частини об'єктів. З "
"прозорими або змішаними об'єктами все інакше. У більшості випадків вони не "
"можуть покладатися на Z-буфер і мають бути відрендереними у \"порядку "
"художника\" (тобто ззаду наперед), щоб виглядати коректно."

msgid ""
"Transparent objects are also particularly bad for fill rate, because every "
"item has to be drawn even if other transparent objects will be drawn on top "
"later on."
msgstr ""
"Прозорі об'єкти також особливо погано впливають на заповнюваність, оскільки "
"кожен об'єкт повинен бути намальований, навіть якщо згодом зверху будуть "
"намальовані інші прозорі об'єкти."

msgid ""
"Opaque objects don't have to do this. They can usually take advantage of the "
"Z-buffer by writing to the Z-buffer only first, then only performing the "
"fragment shader on the \"winning\" fragment, the object that is at the front "
"at a particular pixel."
msgstr ""
"Непрозорі об'єкти можуть цього не робити. Зазвичай вони можуть скористатися "
"перевагами Z-буфера, записуючи спочатку в Z-буфер, а потім застосовуючи "
"фрагментний шейдер лише до \"переможного\" фрагмента, тобто об'єкта, який "
"знаходиться спереду на певному пікселі."

msgid ""
"Transparency is particularly expensive where multiple transparent objects "
"overlap. It is usually better to use transparent areas as small as possible "
"to minimize these fill rate requirements, especially on mobile, where fill "
"rate is very expensive. Indeed, in many situations, rendering more complex "
"opaque geometry can end up being faster than using transparency to \"cheat\"."
msgstr ""
"Прозорість особливо дорого коштує там, де кілька прозорих об'єктів "
"накладаються один на одного. Зазвичай краще використовувати прозорі області "
"якомога меншого розміру, щоб мінімізувати ці вимоги до заповнення, особливо "
"на мобільних пристроях, де заповнення є дуже дорогим. Дійсно, у багатьох "
"ситуаціях рендеринг складнішої непрозорої геометрії може виявитися швидшим, "
"ніж використання прозорості для \"обману\"."

msgid "Multi-platform advice"
msgstr "Мультиплатформні поради"

msgid ""
"If you are aiming to release on multiple platforms, test *early* and test "
"*often* on all your platforms, especially mobile. Developing a game on "
"desktop but attempting to port it to mobile at the last minute is a recipe "
"for disaster."
msgstr ""
"Якщо ви плануєте випустити гру на декількох платформах, тестуйте "
"*заздалегідь* і тестуйте *часто* на всіх платформах, особливо на мобільних. "
"Розробляючи гру для десктопів, намагатися перенести її на мобільні пристрої "
"в останню хвилину - це рецепт катастрофи."

msgid ""
"In general, you should design your game for the lowest common denominator, "
"then add optional enhancements for more powerful platforms. For example, you "
"may want to use the GLES2 backend for both desktop and mobile platforms "
"where you target both."
msgstr ""
"Загалом, вам слід розробляти гру до найменшого спільного знаменника, а потім "
"додавати опціональні покращення для більш потужних платформ. Наприклад, ви "
"можете використовувати бекенд GLES2 як для десктопних, так і для мобільних "
"платформ, якщо ви орієнтуєтесь на обидві платформи."

msgid "Mobile/tiled renderers"
msgstr "Мобільні/плиткові рендерери"

msgid ""
"As described above, GPUs on mobile devices work in dramatically different "
"ways from GPUs on desktop. Most mobile devices use tile renderers. Tile "
"renderers split up the screen into regular-sized tiles that fit into super "
"fast cache memory, which reduces the number of read/write operations to the "
"main memory."
msgstr ""
"Як описано вище, графічні процесори на мобільних пристроях працюють "
"кардинально інакше, ніж графічні процесори на десктопах. Більшість мобільних "
"пристроїв використовують плитковий рендеринг. Плиткові рендери розбивають "
"екран на плитки звичайного розміру, які поміщаються у надшвидку кеш-пам'ять, "
"що зменшує кількість операцій читання/запису до основної пам'яті."

msgid ""
"There are some downsides though. Tiled rendering can make certain techniques "
"much more complicated and expensive to perform. Tiles that rely on the "
"results of rendering in different tiles or on the results of earlier "
"operations being preserved can be very slow. Be very careful to test the "
"performance of shaders, viewport textures and post processing."
msgstr ""
"Однак є й деякі недоліки. Плитковий рендеринг може зробити певні техніки "
"набагато складнішими та дорожчими у виконанні. Плитки, які покладаються на "
"результати рендерингу в різних плитках або на збережені результати "
"попередніх операцій, можуть працювати дуже повільно. Будьте дуже уважні під "
"час тестування продуктивності шейдерів, текстур області перегляду та "
"постобробки."

msgid "Translation status"
msgstr "Стан перекладу"
