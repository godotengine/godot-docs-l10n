# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization"
msgstr "Оптимізація"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always trade-offs, which consist of trading speed for usability "
"and flexibility. Some practical examples of this are:"
msgstr ""
"Godot дотримується філософії збалансованого виконання. У світі "
"продуктивності завжди є компроміси, які полягають у балансуванні між "
"швидкістю та зручністю і гнучкістю. Деякі практичні приклади цього:"

msgid ""
"Rendering large amounts of objects efficiently is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering. This makes rendering less "
"efficient, but at the same time, fewer objects are rendered. Therefore, the "
"overall rendering efficiency is improved."
msgstr ""
"Ефективний рендеринг великої кількості об’єктів легкий, але коли потрібно "
"вималювати велику сцену, ефективність може зникнути. Щоб вирішити цю "
"проблему, до рендерингу потрібно додати обчислення видимості. Це робить "
"рендеринг менш ефективним, але вимальовується менше об’єктів. Таким чином, "
"покращується загальна ефективність рендерингу."

msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs. At the same time, sorting has a cost."
msgstr ""
"Налаштування властивостей кожного матеріалу для кожного об’єкта, який "
"потрібно відобразити, займає багато часу. Щоб вирішити це, об’єкти "
"сортуються за матеріалами, щоб зменшити час. Але сортування теж вимагає часу."

msgid ""
"In 3D physics, a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and raycasting. Algorithms that allow faster insertion and "
"removal, as well as raycasting, will not be able to handle as many active "
"objects."
msgstr ""
"У тривимірній фізиці відбувається подібна ситуація. Найкращі алгоритми для "
"обробки великої кількості фізичних об’єктів (наприклад, SAP) повільні при "
"вставці/видаленні об’єктів і киданні променів (рейкастинг). Алгоритми, які "
"дозволяють швидше вставляти та видаляти, а також кидати промені, не зможуть "
"обробляти велику кількість активних об’єктів."

msgid ""
"And there are many more examples of this! Game engines strive to be general-"
"purpose in nature. Balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others, or algorithms that "
"are fast but are more difficult to use."
msgstr ""
"І цьому є ще багато прикладів! Ігрові рушії прагнуть мати загальний "
"характер. Збалансовані алгоритми завжди віддають перевагу алгоритмам, які "
"можуть бути швидкими в деяких ситуаціях і повільними в інших, або "
"алгоритмам, які є швидкими, але складнішими у використанні."

msgid ""
"Godot is not an exception to this. While it is designed to have backends "
"swappable for different algorithms, the default backends prioritize balance "
"and flexibility over performance."
msgstr ""
"Godot не є винятком з цього приводу. Незважаючи на те, що він призначений "
"для заміни серверних елементів для різних алгоритмів, бекенд за "
"замовчуванням надає пріоритет балансу та гнучкості над продуктивністю."

msgid ""
"With this clear, the aim of this tutorial section is to explain how to get "
"the maximum performance out of Godot. While the tutorials can be read in any "
"order, it is a good idea to start from :ref:`doc_general_optimization`."
msgstr ""
"З огляду на це, мета цього навчального розділу — пояснити, як отримати "
"максимальну продуктивність Godot. Незважаючи на те, що ці статті можна "
"читати в будь-якому порядку, бажано почати із :ref:"
"`doc_general_optimization`."

msgid "Common"
msgstr "Загальні"

msgid "CPU"
msgstr "CPU"

msgid "GPU"
msgstr "GPU"

msgid "2D"
msgstr "Двовимірна графіка"

msgid "3D"
msgstr "Просторова графіка"

msgid "Multi-threading"
msgstr "Багатопотоковість"

msgid "Translation status"
msgstr "Стан перекладу"
