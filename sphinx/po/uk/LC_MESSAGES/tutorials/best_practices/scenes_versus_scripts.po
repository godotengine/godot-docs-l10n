# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When to use scenes versus scripts"
msgstr "Коли використовувати сцени, а коли скрипти"

msgid ""
"We've already covered how scenes and scripts are different. Scripts define "
"an engine class extension with imperative code, scenes with declarative code."
msgstr ""
"Ми вже висвітлювали, чим відрізняються сцени та скрипти. Скрипти визначають "
"розширення класу движка з імперативним кодом, сцени з декларативним кодом."

msgid ""
"Each system's capabilities are different as a result. Scenes can define how "
"an extended class initializes, but not what its behavior actually is. Scenes "
"are often used in conjunction with a script so that the scene acts as an "
"extension of the scripts declarative code."
msgstr ""
"В результаті можливості кожної системи різні. Сцени можуть визначати, як "
"розширений клас ініціалізується, але не те, якою є його поведінка насправді. "
"Сцени часто використовуються разом із скриптом, так що сцена діє як "
"продовження декларативного коду скрипта."

msgid "Anonymous types"
msgstr "Анонімні типи"

msgid ""
"It *is* possible to completely define a scenes' contents using a script "
"alone. This is, in essence, what the Godot Editor does, only in the C++ "
"constructor of its objects."
msgstr ""
"*Можна* повністю визначити зміст сцен, використовуючи лише один скрипт. Це, "
"по суті, те, що робить редактор Godot, тільки в конструкторі C++ зі своїх "
"об'єктів."

msgid ""
"But, choosing which one to use can be a dilemma. Creating script instances "
"is identical to creating in-engine classes whereas handling scenes requires "
"a change in API:"
msgstr ""
"Але вибір того, який із них використовувати, може бути дилемою. Створення "
"примірників скриптів ідентично створенню внутрішніх класів движка, тоді як "
"обробка сцен вимагає зміни в API:"

msgid ""
"Also, scripts will operate a little slower than scenes due to the speed "
"differences between engine and script code. The larger and more complex the "
"node, the more reason there is to build it as a scene."
msgstr ""
"Крім того, скрипти будуть працювати трохи повільніше, ніж сцени, через "
"різницю в швидкості між движком і кодом скрипта. Чим більший і складніший "
"вузол, тим більше підстав побудувати його як сцену."

msgid "Named types"
msgstr "Названі типи"

msgid ""
"In some cases, a user can register a script as a new type within the editor "
"itself. This displays it as a new type in the node or resource creation "
"dialog with an optional icon. In these cases, the user's ability to use the "
"script is much more streamlined. Rather than having to..."
msgstr ""
"У деяких випадках користувач може зареєструвати скрипт як новий тип у самому "
"редакторі. Це відображає його як новий тип у діалоговому вікні створення "
"вузла, або ресурса з необов’язковою піктограмою. У цих випадках можливість "
"користування скриптом набагато спрощується. Замість того, щоб ..."

msgid "Know the base type of the script they would like to use."
msgstr "Знати базовий тип скрипта, який мав би використовуватися."

msgid "Create an instance of that base type."
msgstr "Створювати екземпляр цього базового типу."

msgid "Add the script to the node."
msgstr "Додавати скрипт до вузла."

msgid "(Drag-n-drop method)"
msgstr "(Метод перетягування)"

msgid "Find the script in the FileSystem dock."
msgstr "Знайти скрипт на вкладці Файлова система."

msgid "Drag and drop the script onto the node in the Scene dock."
msgstr "Перетягнути скрипт на вузол на вкладці Сцена."

msgid "(Property method)"
msgstr "(Метод властивості)"

msgid ""
"Scroll down to the bottom of the Inspector to find the ``script`` property "
"and select it."
msgstr ""
"Прогорнути вниз Інспектора, щоб знайти властивість ``script`` і вибрати її."

msgid "Select \"Load\" from the dropdown."
msgstr "Вибрати \"Завантажити\" зі спливаючого меню."

msgid "Select the script from the file dialog."
msgstr "Вибрати скрипт у діалоговому вікні файла."

msgid ""
"With a registered script, the scripted type instead becomes a creation "
"option like the other nodes and resources in the system. One need not do any "
"of the above work. The creation dialog even has a search bar to look up the "
"type by name."
msgstr ""
"З зареєстрованим скриптом, скриптовий тип стає варіантом створення, як і "
"інші вузли та ресурси в системі. Не потрібно виконувати жодної з "
"вищезазначених робіт. У діалоговому вікні створення навіть є рядок пошуку "
"для пошуку типу за назвою."

msgid "There are two systems for registering types..."
msgstr "Існує дві системи реєстрації типів ..."

msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ":ref:`Користувацькі Типи <doc_making_plugins>`"

msgid "Editor-only. Typenames are not accessible at runtime."
msgstr "Лише для редактора. Назви типів недоступні під час виконання."

msgid "Does not support inherited custom types."
msgstr "Не підтримує успадковані користувацькі типи."

msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr "Інструмент ініціалізації. Створює вузол зі скриптом. Більше нічого."

msgid ""
"Editor has no type-awareness of the script or its relationship to other "
"engine types or scripts."
msgstr ""
"Редактор не знає про тип скрипта або його зв’язок з іншими типами механізмів "
"чи скриптів."

msgid "Allows users to define an icon."
msgstr "Дозволяє користувачам визначати піктограму."

msgid ""
"Works for all scripting languages because it deals with Script resources in "
"abstract."
msgstr ""
"Працює для всіх скриптових мов, оскільки абстрактно стосується скриптових "
"ресурсів."

msgid ""
"Set up using :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."
msgstr ""
"Налаштовується за допомогою :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."

msgid ":ref:`Script Classes <doc_gdscript_basics_class_name>`"
msgstr ":ref:`Класи Скриптів <doc_scripting_continued_class_name>`"

msgid "Editor and runtime accessible."
msgstr "Доступ до редактора та середовища виконання."

msgid "Displays inheritance relationships in full."
msgstr "Показує відносини спадкування в повному обсязі."

msgid ""
"Creates the node with the script, but can also change types or extend the "
"type from the editor."
msgstr ""
"Створює вузол зі скриптом, але також може змінювати типи або розширювати тип "
"із редактора."

msgid ""
"Editor is aware of inheritance relationships between scripts, script "
"classes, and engine C++ classes."
msgstr ""
"Редактору відомі відносини спадкування між скриптами, класами скриптів та C+"
"+ класами движка."

msgid ""
"Engine developers must add support for languages manually (both name "
"exposure and runtime accessibility)."
msgstr ""
"Розробники движка повинні додавати підтримку мов вручну (як для розголошення "
"імені, так і для доступності під час виконання)."

msgid "Godot 3.1+ only."
msgstr "Тільки Godot 3.1+."

msgid ""
"The Editor scans project folders and registers any exposed names for all "
"scripting languages. Each scripting language must implement its own support "
"for exposing this information."
msgstr ""
"Редактор сканує папки проєкту та реєструє будь-які відкриті імена для всіх "
"мов скриптів. Кожна скриптова мова повинна реалізовувати власну підтримку "
"для відкриття цієї інформації."

msgid ""
"Both methodologies add names to the creation dialog, but script classes, in "
"particular, also allow for users to access the typename without loading the "
"script resource. Creating instances and accessing constants or static "
"methods is viable from anywhere."
msgstr ""
"Обидві методології додають імена до діалогового вікна створення, але, "
"зокрема, класи скриптів також дозволяють користувачам отримувати доступ до "
"імені типу без завантаження ресурсу скрипта. Створення примірників та доступ "
"до констант або статичних методів життєздатне з будь-якого місця."

msgid ""
"With features like these, one may wish their type to be a script without a "
"scene due to the ease of use it grants users. Those developing plugins or "
"creating in-house tools for designers to use will find an easier time of "
"things this way."
msgstr ""
"Завдяки таким функціям, можна забажати, щоб тип був скриптом без сцени "
"завдяки простоті використання, яку він надає користувачам. Ті, хто розробляє "
"плагіни або створює власні інструменти для використання дизайнерами, оцінят "
"зручність."

msgid ""
"On the downside, it also means having to use largely imperative programming."
msgstr ""
"З мінусів, це також означає необхідність використання, в основному, "
"імперативного програмування."

msgid "Performance of Script vs PackedScene"
msgstr "Виконання Скрипта та PackedScene"

msgid ""
"One last aspect to consider when choosing scenes and scripts is execution "
"speed."
msgstr ""
"Останній аспект, який слід враховувати при виборі сцен та скриптів, - це "
"швидкість виконання."

msgid ""
"As the size of objects increases, the scripts' necessary size to create and "
"initialize them grows much larger. Creating node hierarchies demonstrates "
"this. Each Node's logic could be several hundred lines of code in length."
msgstr ""
"Зі збільшенням розміру об’єктів необхідний розмір скрипта для їх створення "
"та ініціалізації стає набагато більшим. Створення ієрархій вузлів це "
"демонструє. Логіка кожного вузла може складати кілька сотень рядків коду."

msgid ""
"The code example below creates a new ``Node``, changes its name, assigns a "
"script to it, sets its future parent as its owner so it gets saved to disk "
"along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""
"Наведений нижче приклад коду створює новий ``Node``, змінює його назву, "
"призначає йому скрипт, встановлює майбутнього предка як власника, щоб він "
"зберігався на диску разом з ним, і нарешті додає його в якості нащадка до "
"вузла ``Main``:"

msgid ""
"Script code like this is much slower than engine-side C++ code. Each "
"instruction makes a call to the scripting API which leads to many "
"\"lookups\" on the back-end to find the logic to execute."
msgstr ""
"Код скрипта набагато повільніший, ніж C++ код движка. Кожна інструкція "
"викликає API скриптів, що веде до багатьох прихованих \"пошуків\" логіки "
"виконання."

msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, defines "
"resources that use serialized data to create objects. The engine can process "
"scenes in batches on the back-end and provide much better performance than "
"scripts."
msgstr ""
"Сцени допомагають уникнути цієї проблеми з продуктивністю. :ref:`PackedScene "
"<class_PackedScene>`, базовий тип, від якого сцени успадковуються, визначає "
"ресурси, які використовують серіалізовані дані для створення об’єктів. "
"Механізм може приховано обробляти сцени партіями та забезпечує набагато "
"кращу продуктивність, ніж скрипти."

msgid "Conclusion"
msgstr "Висновки"

msgid "In the end, the best approach is to consider the following:"
msgstr "Зрештою, найкращим підходом є врахування наступного:"

msgid ""
"If one wishes to create a basic tool that is going to be re-used in several "
"different projects and which people of all skill levels will likely use "
"(including those who don't label themselves as \"programmers\"), then "
"chances are that it should probably be a script, likely one with a custom "
"name/icon."
msgstr ""
"Якщо хтось хоче створити базовий інструмент, який буде повторно використаний "
"у кількох різних проєктах і який, ймовірно, будуть використовувати люди всіх "
"рівнів кваліфікації (включаючи тих, хто не називає себе \"програмістами\"), "
"то, швидше за все, це повинен бути скрипт, і, навіть, із власним ім’ям/"
"піктограмою."

msgid ""
"If one wishes to create a concept that is particular to their game, then it "
"should always be a scene. Scenes are easier to track/edit and provide more "
"security than scripts."
msgstr ""
"Якщо хтось хоче створити концепцію, яка є характерною для його гри, то це "
"завжди має бути сцена. Сцени легше відстежувати/редагувати і вони "
"забезпечують більший захист, ніж скрипти."

msgid ""
"If one would like to give a name to a scene, then they can still sort of do "
"this in 3.1 by declaring a script class and giving it a scene as a constant. "
"The script becomes, in effect, a namespace:"
msgstr ""
"Якщо хтось хотів би назвати сцену, тоді він все одно може зробити це в 3.1, "
"оголосивши клас скрипта та надавши йому сцену як константу. Скрипт фактично "
"стає простором імен:"

msgid "Translation status"
msgstr "Стан перекладу"
