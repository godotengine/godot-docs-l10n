# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Applying object-oriented principles in Godot"
msgstr "Застосування об’єктно-орієнтованого підходу у Godot"

msgid ""
"The engine offers two main ways to create reusable objects: scripts and "
"scenes. Neither of these technically define classes under the hood."
msgstr ""
"Движок пропонує два основних способи створення багаторазових об'єктів: "
"скрипти та сцени. Жоден з них технічно не визначає класи."

msgid ""
"Still, many best practices using Godot involve applying object-oriented "
"programming principles to the scripts and scenes that compose your game. "
"That is why it's useful to understand how we can think of them as classes."
msgstr ""
"Тим не менше, багато найкращих практик використання Godot передбачають "
"застосування об’єктно-орієнтованих принципів програмування до скриптів та "
"сцен, що складають вашу гру. Ось чому корисно зрозуміти, як ми можемо "
"сприймати їх як класи."

msgid ""
"This guide briefly explains how scripts and scenes work in the engine's core "
"to help you understand how they work under the hood."
msgstr ""
"Цей керівництво пояснює, як скрипти та сцени працюють в ядрі движка, щоб "
"допомогти вам зрозуміти, як вони працюють зсередини."

msgid "How scripts work in the engine"
msgstr "Як скрипти працюють в движку"

msgid ""
"The engine provides built-in classes like :ref:`Node <class_Node>`. You can "
"extend those to create derived types using a script."
msgstr ""
"Двигун забезпечує вбудовані класи, такі як :ref:`Вузли <class_Node>`. Ви "
"можете розширити їх для створення похідних типів за допомогою скрипта."

msgid ""
"These scripts are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Ці скрипти технічно не є класами. Натомість вони є ресурсами, які "
"повідомляють движку послідовність ініціалізацій для виконання в одному з "
"вбудованих класів движка."

msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Внутрішні класи Godot мають методи, які реєструють дані класу в :ref:"
"`ClassDB <class_ClassDB>`. Ця база даних під час виконання забезпечує доступ "
"до інформації класу. ``ClassDB`` містить інформацію про такі класи, як:"

msgid "Properties."
msgstr "Властивості."

msgid "Methods."
msgstr "Методи."

msgid "Constants."
msgstr "Константи."

msgid "Signals."
msgstr "Сигнали."

msgid ""
"This ``ClassDB`` is what objects check against when performing an operation "
"like accessing a property or calling a method. It checks the database's "
"records and the object's base types' records to see if the object supports "
"the operation."
msgstr ""
"``ClassDB`` це те, що об’єкти перевіряють при виконанні такої операції, як "
"доступ до властивості чи виклик методу. Він перевіряє записи бази даних та "
"записи базових типів об'єкта, щоб перевірити, чи підтримує об'єкт операцію."

msgid ""
"Attaching a :ref:`Script <class_Script>` to your object extends the methods, "
"properties, and signals available from the ``ClassDB``."
msgstr ""
"Приєднання :ref:`скрипта <class_Script>` до вашого об'єкта розширює методи, "
"властивості та сигнали, доступні з ``ClassDB``."

msgid ""
"Even scripts that don't use the ``extends`` keyword implicitly inherit from "
"the engine's base :ref:`Reference <class_Reference>` class. As a result, you "
"can instantiate scripts without the ``extends`` keyword from code. Since "
"they extend ``Reference`` though, you cannot attach them to a :ref:`Node "
"<class_Node>`."
msgstr ""
"Навіть скрипти, які не використовують ключове слово ``extends``, неявно "
"успадковують базовий клас :ref:`Reference <class_Reference>`. Як результат, "
"ви можете створити екземпляр скрипта без ключового слова ``extends`` з коду. "
"Оскільки вони розширюються ``Reference`` , ви не можете приєднати їх до :ref:"
"`вузла<class_Node>`."

msgid "Scenes"
msgstr "Сцени"

msgid ""
"The behavior of scenes has many similarities to classes, so it can make "
"sense to think of a scene as a class. Scenes are reusable, instantiable, and "
"inheritable groups of nodes. Creating a scene is similar to having a script "
"that creates nodes and adds them as children using ``add_child()``."
msgstr ""
"Поведінка сцен має багато схожого з класами, тому є сенс розглядати сцену як "
"клас. Сцени - це багаторазові, інстантовані та спадкові групи вузлів. "
"Створення сцени схоже на наявність скрипта, який створює вузли та додає їх "
"як нащадки з допомогою ``add_child()``."

msgid ""
"We often pair a scene with a scripted root node that makes use of the "
"scene's nodes. As such, the scene is often an extension of the script's "
"declarative code."
msgstr ""
"Ми часто поєднуємо сцену зі скриптовим кореневим вузлом, який використовує "
"вузли сцени. Таким чином, сцена часто є продовженням декларативного коду "
"скрипта."

msgid "The content of a scene helps to define:"
msgstr "Зміст сцени допомагає визначити:"

msgid "What nodes are available to the script"
msgstr "Які вузли доступні для скрипта"

msgid "How they are organized"
msgstr "Як вони організовані"

msgid "How they are initialized"
msgstr "Як вони ініціалізовані"

msgid "What signal connections they have with each other"
msgstr "Які сигнальні зв’язки вони мають між собою"

msgid ""
"Why is any of this important to scene organization? Because instances of "
"scenes *are* objects. As a result, many object-oriented principles that "
"apply to written code also apply to scenes: single responsibility, "
"encapsulation, and others."
msgstr ""
"Чому все це важливо для організації сцени? Оскільки екземпляри сцен - *це* "
"об’єкти. Як результат, багато об’єктно-орієнтованих принципів, що "
"застосовуються до написання коду, стосуються і сцен: одинарної "
"відповідальності, інкапсуляції та інше."

msgid ""
"The scene is *always an extension of the script attached to its root node*, "
"so you can interpret it as part of a class."
msgstr ""
"Сцена *завжди є розширенням скрипта, прикріпленого до кореневого вузла*, "
"тому ви можете інтерпретувати її як частину класа."

msgid ""
"Most of the techniques explained in this best practices series build on this "
"point."
msgstr ""
"Більшість методів, описаних у цій серії найкращих практик, ґрунтуються на "
"цьому."

msgid "Translation status"
msgstr "Стан перекладу"
