# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "Flux de travail pour les Pull Request"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Le \"flux de travail pour les PR\" utilisé par Godot est commun à de "
"nombreux projets utilisant Git, et devrait être familier aux contributeurs "
"vétérans de logiciels libres. L'idée est que seul un petit nombre (s'il y en "
"a) s'engage directement dans la branche *master*. Au lieu de cela, les "
"contributeurs *fork* le projet (c'est-à-dire en créent une copie, qu'ils "
"peuvent modifier comme ils le souhaitent), puis utilisent l'interface GitHub "
"pour demander un *pull* d'une des branches de leur fork vers une branche du "
"dépôt original (souvent appelé *upstream*)."

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"La *Pull Request* (PR) qui en résulte peut alors être examinée par d'autres "
"contributeurs, qui peuvent l'approuver, la rejeter ou, le plus souvent, "
"demander que des modifications soient apportées. Une fois approuvée, la PR "
"peut alors être fusionnée par l'un des développeurs principaux, et son ou "
"ses commit(s) feront partie de la branche cible (généralement la branche "
"*master*)."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"Nous passerons ensemble par un exemple pour montrer le flux de travail "
"typique et les commandes Git associées. Mais tout d'abord, jetons un coup "
"d'oeil rapide à l'organisation du dépôt Git de Godot."

msgid "Git source repository"
msgstr "Dépôt Git source"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"Le `repository sur GitHub <https://github.com/godotengine/godot>`_ est un "
"dépôt de code de `Git <https://git-scm.com>`_ avec un système de suivi des "
"problèmes et PR intégré."

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Si vous participer à la documentation, son dépôt peut être trouvé `ici "
"<https://github.com/godotengine/godot-docs>`_."

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Le système de contrôle de version Git est l'outil utilisé pour garder la "
"trace des modifications successives du code source - pour contribuer "
"efficacement à Godot, l'apprentissage des bases de la ligne de commande Git "
"est *hautement* recommandé. Il existe quelques interfaces graphiques pour "
"Git, mais elles encouragent généralement les utilisateurs à prendre de "
"mauvaises habitudes concernant le flux de travail Git et PR, et nous "
"recommandons donc de ne pas les utiliser. En particulier, nous conseillons "
"de ne pas utiliser l'éditeur en ligne de GitHub pour les contributions de "
"code (bien qu'il soit toléré pour les petites corrections ou modifications "
"de la documentation) car il impose un commit par fichier et par "
"modification, ce qui conduit rapidement à des PR avec un historique Git "
"illisible (surtout après une révision par les pairs)."

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Les premières sections du \"Livre\" de Git sont une bonne introduction à la "
"philosophie de l'outil et aux différentes commandes que vous devez maîtriser "
"dans votre travail quotidien. Vous pouvez les lire en ligne sur le site web "
"de `Git SCM <https://git-scm.com/book/en/v2>`_. Vous pouvez également "
"essayer le `Guide interactif de GitHub'<https://try.github.io/>`__."

msgid "The branches on the Git repository are organized as follows:"
msgstr "Les branches sur le dépôt Git sont organisées de cette manière :"

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"La branche ``master`` est celle ou se déroule le développement de la "
"prochaine version majeure. En tant que branche de développement, elle peut "
"être instable et n'est pas destinée à être utilisée en production. C'est ici "
"que les Pull Requests devraient être faites en priorité."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"Les branches stables sont nommées d'après leur version, par exemple ``3.1`` "
"et ``2.1``. Elles sont utilisées pour le rétro-portage des corrections de "
"bugs et des améliorations depuis la branche ``master`` vers la version "
"stable actuellement maintenue (par exemple 3.1.2 ou 2.1.6). En règle "
"générale, la dernière branche stable est maintenue jusqu'à la prochaine "
"version mineure (par exemple, la branche ``3.0`` a été maintenue jusqu'à la "
"sortie de Godot 3.1). Si vous voulez effectuer des PR sur une branche stable "
"maintenue, veuillez d’abord vérifier si vos modifications sont également "
"pertinentes pour la branche ``master``, et si c'est le cas, faites les PR "
"sur la branche ``master`` en priorité. Les responsables de version peuvent "
"ensuite sélectionner la correction pour une branche stable si cela est "
"pertinent."

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""
"Il peut y avoir occasionnellement des branches de fonctionnalités, "
"généralement destinées à être fusionnées dans la branche ``master`` à un "
"moment donné."

msgid "Forking and cloning"
msgstr "Forker et cloner"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"La première étape consiste à *forker* le dépôt `godotengine/godot <https://"
"github.com/godotengine/godot>`_ sur GitHub. Pour ce faire, vous devez "
"disposer d'un compte GitHub et y être connecté. Dans le coin en haut à "
"droite de la page du dépôt GitHub, vous devriez voir un bouton \"Fork\" "
"comme montré ci-dessous :"

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Cliquez dessus, et après un certain temps, vous devriez être redirigé vers "
"votre propre fork du dépôt Godot, avec votre nom d'utilisateur GitHub comme "
"espace de noms :"

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"Vous pouvez ensuite *cloner* votre fork, c'est-à-dire créer une copie locale "
"du dépôt en ligne (dans Git, on parle d'*origin remote*), Si vous ne l'avez "
"pas déjà fait, téléchargez Git depuis `son site web <https://git-scm.com>`_ "
"si vous utilisez Windows ou macOS, ou installez le à partir de votre "
"gestionnaire de paquets si vous utilisez Linux."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Si vous êtes sous Windows, ouvrez Git Bash pour entrer des commandes. Les "
"utilisateurs de macOS et Linux peuvent utiliser leurs terminaux respectifs."

msgid "To clone your fork from GitHub, use the following command:"
msgstr "Pour cloner votre fork depuis GitHub, utilisez la commande suivante :"

msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"Dans nos exemples, le caractère \"$\" désigne l'invite de la ligne de "
"commande sur les shells UNIX. Il ne fait pas partie de la commande et ne "
"doit pas être tapé."

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Après un certain temps, vous devriez avoir un répertoire ``godot`` dans "
"votre répertoire de travail courant. Déplacez-vous dedans en utilisant la "
"commande ``cd`` :"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""
"Nous allons commencer par mettre en place une référence vers le dépôt "
"original que nous avons forké :"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"Cela va créer une référence nommée ``upstream`` pointant vers le dépôt "
"original ``godotengine/godot``. Cela s’avérera utile quand vous voudrez "
"récupérer les nouveaux commits de sa branche ``master`` pour mettre à jour "
"votre fork. Vous avez une autre référence nommée ``origin``, qui pointe "
"directement vers votre fork (``USERNAME/godot``)."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Vous n'avez besoin d'effectuer les étapes ci-dessus qu'une seule fois, tant "
"que vous gardez ce répertoire ``godot`` local (que vous pouvez déplacer si "
"vous le souhaitez, ses métadonnées importantes sont cachées dans son sous-"
"dossier ``.git``)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Cette mauvaise interprétation de *Technologic* des Daft Punk montre la "
"conception générale qu'ont les débutants du workflow Git : beaucoup de "
"commandes étranges à apprendre par le copier-coller, en espérant qu'elles "
"fonctionneront comme prévu. Cette manière d'apprendre n'est finalement pas "
"si mauvaise, tant que vous êtes curieux et que vous n'hésitez pas à demander "
"de l'aide à votre moteur de recherche quand vous êtes perdu. Nous allons "
"donc vous donner les commandes de base à connaître quand vous travaillez "
"avec Git."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's project manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"Par la suite, nous supposerons que vous souhaitez implémenter une "
"fonctionnalité dans le gestionnaire de projets de Godot, qui est codé dans "
"le fichier ``editor/project_manager.cpp``."

msgid "Branching"
msgstr "Les Branches"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"Par défaut, le ``git clone`` devrait vous avoir placé sur la branche "
"``master`` de votre fork(``origin``). Pour commencer le développement de "
"votre propre fonctionnalité, nous allons créer une branche de "
"fonctionnalité :"

msgid "This command is equivalent:"
msgstr "Cette commande est équivalente :"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr ""
"Si vous voulez retourner sur la branche ``master``, vous devez utiliser :"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Vous pouvez voir la branche sur laquelle vous êtes actuellement avec la "
"commande ``git branch`` :"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"Assurez-vous de toujours revenir à la branche ``master`` avant de créer une "
"nouvelle branche, car votre branche actuelle servira de base à la nouvelle. "
"Vous pouvez aussi spécifier une branche de base personnalisée après le nom "
"de la nouvelle branche :"

msgid "Updating your branch"
msgstr "Mettre à jour votre branche"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Cela n'est pas nécessaire la première fois (juste après avoir forké le dépôt "
"upstream). Cependant, la prochaine fois que vous voudrez travailler sur "
"quelque chose, vous remarquerez que la branche ``master`` de votre fork se "
"trouve plusieurs commits derrière la branche ``master`` du dépôt upstream : "
"des pull requests d'autres contributeurs ont été fusionnées entre-temps."

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Pour vous assurer qu'il n'y aura pas de conflits entre la fonctionnalité que "
"vous développez et la branche ``master`` actuelle du dépôt upstream, vous "
"allez devoir mettre à jour votre branche en faisant un *pulling* de la "
"branche de ce dépôt."

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"L'argument ``--rebase`` garantira que tout changement local que vous avez "
"engagé sera appliqué à nouveau *en haut* de la branche pulled, ce qui est "
"généralement ce que nous voulons dans notre flux de travail PR. De cette "
"façon, lorsque vous ouvrez une pull request, vos propres commits seront la "
"seule différence avec la branche ``master`` en amont."

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"Lors du rebase, des conflits peuvent survenir si votre commit a modifié du "
"code qui a été modifié dans la branche amont entre-temps. Si cela se "
"produit, Git s'arrêtera au commit en conflit et vous demandera de résoudre "
"les conflits. Vous pouvez le faire avec n'importe quel éditeur de texte, "
"puis effectuer les modifications (plus à ce sujet plus tard) et continuer "
"avec `` git rebase --continue``. Répétez l'opération si les validations "
"ultérieures comportent également des conflits, jusqu'à ce que l'opération de "
"rebase soit terminée."

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"Si vous n'êtes pas sûr de ce qui se passe lors d'un rebase et que vous "
"paniquez (pas d'inquiétude, nous le faisons tous les premières fois), vous "
"pouvez annuler la rebase avec ``git rebase --abort``. Vous serez alors de "
"retour à l'état initial de votre branche avant d'appeler ``git pull --"
"rebase``."

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"Si vous omettez l'argument ``--rebase``, vous allez créer à la place un "
"commit de merge(fusion) qui indique à Git ce qu'il faut faire des deux "
"branches distinctes. Si des conflits surviennent, ils seront résolus en une "
"seule fois via ce commit de merge(fusion)."

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"Bien qu'il s'agisse d'un flux de travail valable et du comportement par "
"défaut de ``git pull``, les commits de merge(fusion) au sein des PR sont mal "
"vus dans notre flux de travail PR. Nous ne les utilisons que lorsque nous "
"mergeons(fusionnons) des PR dans la branche en amont."

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"La philosophie est qu'une PR doit représenter l'étape finale des changements "
"apportés à la base de code, et nous ne sommes pas intéressés par les erreurs "
"et les corrections qui auraient été faites dans les étapes intermédiaires "
"avant la fusion. Git nous donne d'excellents outils pour \"réécrire "
"l'histoire\" et faire comme si nous avions bien fait les choses la première "
"fois, et nous sommes heureux de l'utiliser pour garantir que les changements "
"sont faciles à examiner et à comprendre longtemps après leur fusion."

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"Si vous avez déjà créé un commit de merge(fusion) sans utiliser ``rebase``, "
"ou si vous avez fait d'autres changements qui ont entraîné un historique non "
"souhaité, la meilleure option est d'utiliser un *rebase interactive* sur la "
"branche amont. Voir la :ref:`section dédiée <doc_pr_workflow_rebase>` pour "
"les instructions."

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"Si à tout moment vous souhaitez *réinitialiser* une branche locale sur un "
"commit ou une branche donnée, vous pouvez le faire avec ``git reset --hard "
"<commit ID>`` ou ``git reset --hard <remote>/<branch>`` (par exemple ``git "
"reset --hard upstream/master``)."

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"Soyez averti que cela supprimera tous les changements que vous avez pu "
"commit dans cette branche. Si jamais vous perdez des commits par erreur, "
"utilisez la commande ``git reflog`` pour trouver l'ID de commit de l'état "
"précédent que vous souhaitez restaurer, et utilisez-le comme argument de "
"``git reset --hard`` pour revenir à cet état."

msgid "Making changes"
msgstr "Effectuer des modifications"

msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"Vous pouvez ensuite faire vos modifications sur le fichier ``editor/"
"project_manager.cpp`` de notre exemple avec votre environnement de "
"développement habituel (éditeur de texte, IDE, etc.)."

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"Par défaut, ces changements sont *unstaged*. La zone de staging est une "
"couche entre votre répertoire de travail (où vous effectuez vos "
"modifications) et le dépôt Git local (les commits et toutes les métadonnées "
"du dossier ``.git``). Pour apporter des modifications depuis le répertoire "
"de travail vers le dépôt Git, vous devez les *stage* avec la commande ``git "
"add``, puis les valider avec la commande ``git commit``."

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""
"Il existe plusieurs commandes que vous devez connaître pour revoir votre "
"travail actuel, avant de le mettre en zone de staging, pendant qu'il est mis "
"en zone de staging et après qu'il ait été commis."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""
"``git diff`` vous montrera les changements non stagé (absent de la zone de "
"staging) actuels, c'est-à-dire les différences entre votre répertoire de "
"travail et la zone de staging."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""
"``git checkout -- <files>`` annule les modifications non stagé apportées aux "
"fichiers donnés."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr "``git add <files>`` *stage* les changements sur les fichiers listés."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` affichera les changements d'étape actuels, c'est-à-"
"dire les différences entre la zone de staging et le dernier commit."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""
"``git reset HEAD <files>`` *unstage* les changements des fichiers listés."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""
"``git status`` vous indiquera toutes les modifications en cours, qu'elles "
"soient ou non dans la zone de staging."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` commitra les fichiers mis en staging. Il ouvrira un éditeur "
"de texte (vous pouvez définir celui que vous voulez utiliser avec la "
"variable d'environnement ``GIT_EDITOR`` ou le paramètre ``core.editor`` dans "
"votre configuration Git) pour vous permettre d'écrire un journal de commit. "
"Vous pouvez utiliser ``git commit -m \"Cool commit log\"`` pour écrire le "
"journal directement."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"``git commit --amend`` vous permet de modifier le dernier commit avec vos "
"modifications en cours (ajouté avec ``git add``). C'est la meilleure option "
"si vous voulez corriger une erreur dans le dernier commit (bug, faute de "
"frappe, problème de style, etc.)."

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` vous listera les dernier commits de votre branche courante. Si "
"vous avez fait des commits locaux, ils devraient être affichés en haut."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` vous montrera les modifications effectuées par le dernier "
"commit. Vous pouvez également spécifier le hash d'un commit pour voir les "
"modifications de ce commit."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"Cela fait beaucoup à mémoriser ! Ne vous inquiétez pas, consultez juste cet "
"aide-mémoire quand vous avez besoin de faire des modifications, et apprenez "
"par la pratique."

msgid "Here's how the shell history could look like on our example:"
msgstr ""
"Voici à quoi pourrait ressembler l'historique du shell dans notre exemple :"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Avec cela, nous devrions avoir deux nouveaux commits dans notre branche "
"``better-project-manager`` qui n'étaient pas dans notre branche ``master``. "
"Ces modifications restent seulement locales et le fork distant, ainsi que le "
"dépôt upstream ne savent pas qu'ils existent."

msgid "Pushing changes to a remote"
msgstr "Pousser les modifications sur un dépôt distant"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"C'est là qu'intervient le ``git push``. Dans Git, un commit est toujours "
"fait sur le dépôt local (contrairement à Subversion ou un commit modifie "
"directement le dépôt distant). Vous devez *pousser* les nouveaux commits sur "
"une branche distante pour les partager au reste du monde. Sa syntaxe est la "
"suivante :"

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"La partie à propos de la branche distante peut être omise si vous voulez "
"qu'elle ait le même nom que la branche locale, ce qui est le cas dans notre "
"exemple, nous ferons donc :"

msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""
"Git vous demandera votre nom d'utilisateur et votre mot de passe, et les "
"modifications seront envoyées sur votre dépôt distant. Si vous vous rendez "
"sur la page GitHub de votre fork, vous devriez voir une nouvelle branche "
"avec les commits que vous avez ajouté."

msgid "Issuing a pull request"
msgstr "Émission d'une Pull Request"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"Lorsque vous chargez la branche de votre fork sur GitHub, vous devriez voir "
"une ligne disant *\"This branch is 2 commits ahead of godotengine:master.\"* "
"(et potentiellement quelques commit derrière, si votre branche ``master`` "
"était désynchronisée avec la branche upstream ``master``)."

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"Sur cette ligne, il y a un lien \"Pull request\". En cliquant dessus, vous "
"ouvrirez un formulaire qui vous permettra d'émettre une demande d'extraction "
"sur le dépôt amont ``godotengine/godot``. Il devrait vous montrer vos deux "
"commits, et indiquer \"Able to merge\". Si ce n'est pas le cas (par exemple, "
"il a beaucoup plus de commits, ou dit qu'il y a des conflits de fusion), ne "
"créez pas encore le PR, quelque chose s'est mal passé. Allez sur notre "
"`Godot Contributors Chat <https://chat.godotengine.org/>`_ et demandez de "
"l'aide :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"Utilisez un titre explicite pour la PR et mettez les détails nécessaires "
"dans la zone de commentaires. Vous pouvez faire glisser et déposer des "
"captures d'écran, des GIF ou des projets zippés, le cas échéant, pour "
"présenter ce que votre travail met en œuvre. Cliquez sur \"Create a pull "
"request\", et tadaa !"

msgid "Modifying a pull request"
msgstr "Modifier une pull request"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Bien qu'elle soit examinée par les autres contributeurs, vous devrez souvent "
"apporter des modifications à votre Pull Request encore non fusionnée, soit "
"parce que les contributeurs le demandent, soit parce que vous avez vous-même "
"trouvé des bugs lors de tests."

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"La bonne nouvelle, c'est que vous pouvez modifier une pull request "
"simplement en agissant sur la branche depuis laquelle vous avez fait la pull "
"request. Vous pouvez par exemple faire un nouveau commit sur cette branche, "
"le pousser sur votre fork et la Pulll Request sera mise à jour "
"automatiquement :"

#, fuzzy
msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"Cependant, sachez que dans notre flux de travail PR, nous privilégions les "
"commits qui amènent la base de code d'un état fonctionnel à un autre état "
"fonctionnel, sans les commits intermédiaires corrigeant des bogues dans "
"votre code ou des problèmes de style. La plupart du temps, nous préférerons "
"un seul commit dans une PR donné (sauf s'il y a une bonne raison de garder "
"les changements séparés), donc au lieu de créer un nouveau commit, envisagez "
"d'utiliser ``git commit --amend`` pour modifier le commit précédent avec vos "
"correctifs. L'exemple ci-dessus deviendrait alors :"

msgid "The interactive rebase"
msgstr "Le rebase interactif"

msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request of your to *rebase* your branch to *squash* some or all of the "
"commits into one."
msgstr ""
"Si vous n'avez pas suivi les étapes ci-dessus pour *modifier(amend)* les "
"changements dans un commit au lieu de créer des commits de correction, ou si "
"vous avez écrit vos changements sans être au courant de nos conseils "
"d'utilisation de Git et du flux de travail, les réviseurs pourraient vous "
"demander de *rebase* votre branche pour *squash* certains ou tous les "
"commits en un seul."

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"En effet, si certains commit ont été effectués à la suite de revues de code "
"pour corriger des bogues, des fautes de frappe, etc. dans le commit "
"original, ils ne sont pas pertinents pour un futur lecteur de changelog qui "
"voudrait savoir ce qui s'est passé dans la base de code de Godot, ou quand "
"et comment un fichier donné a été modifié pour la dernière fois."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"Pour squash (écraser) ces commits superflus dans le principal, nous devrons "
"*rewrite history*. C'est vrai, nous avons ce pouvoir. Vous pouvez lire que "
"c'est une mauvaise pratique, et c'est vrai en ce qui concerne les branches "
"du répertoire en amont. Mais dans votre fork, vous pouvez faire tout ce que "
"vous voulez, et tout est autorisé pour obtenir des PR soignées :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"Nous utiliserons la *rebase interactive* ``git rebase -i`` pour faire ceci. "
"Cette commande prend un ID de commit ou un nom de branche en argument, et "
"vous permettra de modifier tous les commit entre ce commit/branche et le "
"dernier de votre branche de travail, le dénommé ``HEAD``."

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"Bien que vous puissiez donner n'importe quel ID de commit à ``git rebase -"
"i`` et examiner tout ce qui se trouve entre les deux, le flux de travail le "
"plus courant et le plus pratique consiste à re-baser sur la branche "
"``master`` en amont, ce que vous pouvez faire avec :"

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"Référencer des branches dans Git est un peu délicat en raison de la "
"distinction entre les branches distantes et locales. Ici, ``upstream/"
"master`` (avec un `/`) est une branche locale qui a été extraite de la "
"branche ``master`` distante ``upstream``."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"Les rebase interactifs ne peuvent se faire que sur des branches locales, "
"donc le `/` est important ici. Comme le distant en amont change fréquemment, "
"votre branche locale ``upstream/master`` peut devenir obsolète, vous pouvez "
"donc la mettre à jour avec ``git fetch upstream master``. Contrairement à "
"``git pull --rebase upstream master`` qui mettrait à jour votre branche "
"actuelle, ``fetch`` ne mettra à jour que la référence ``upstream/master`` "
"(qui est distincte de votre branche locale ``master``... oui c'est "
"déroutant, mais vous vous familiariserez avec cela petit à petit)."

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"Cela va ouvrir un éditeur de texte (``vi`` par défaut, voir `Git docs "
"<https://git-scm.com/book/en/v2/Customizing-Git-Git-"
"Configuration#_core_editor>`_ pour configurer votre préféré) avec quelque "
"chose qui peut ressembler à ceci :"

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"L'éditeur vous montrera également des instructions sur la manière dont vous "
"pouvez agir sur ces commits. En particulier, il devrait vous dire que "
"\"pick\" signifie utiliser ce commit (ne rien faire), et que \"squash\" et "
"\"fixup\" peuvent être utilisés pour *fusionner* le commit dans son commit "
"parent. La différence entre \"squash\" et \"fixup\" est que \"fixup\" "
"supprime du journal le commit écrasé. Dans notre exemple, nous ne souhaitons "
"pas conserver dans le journal le commit \"Fix a typo\", donc nous utilisons :"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"La sauvegarde du fichier et le départ de l'éditeur entraînent l'action du "
"rebase. Le second commit sera fusionné avec le premier, et ``git log`` et "
"``git show`` devraient maintenant confirmer que vous n'avez qu'un seul "
"commit avec les changements des deux précédents."

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"Mais ! vous avez réécrit l'histoire, et maintenant vos branches locales et "
"éloignées ont divergé. En effet, le commit 1b4aad7 dans l'exemple ci-dessus "
"aura changé, et aura donc obtenu un nouveau hash de commit. Si vous essayez "
"de pousser vers votre branche distante, cela provoquera une erreur :"

msgid ""
"This is a sane behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"C'est un comportement sain, Git ne vous laissera pas imposer des changements "
"qui auraient pour effet de remplacer le contenu distant. Mais c'est en fait "
"ce que nous voulons faire ici, donc nous devrons le *forcer* :"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"Et tadaa ! Git sera heureux de *remplacer* votre branche distante avec ce "
"que vous aviez localement (assurez-vous donc que c'est bien ce que vous "
"vouliez, en utilisant ``git log``). Cela permettra également de mettre à "
"jour la PR en conséquence."

msgid "Deleting a Git branch"
msgstr "Supprimer une branche Git"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"Une fois que votre pull request a été fusionnée, il vous reste une dernière "
"chose à faire : supprimer la branche Git de votre pull request. Cela ne "
"posera pas de problèmes si vous ne supprimez pas votre branche mais c'est "
"une bonne pratique à adopter. Vous devrez le faire deux fois, une fois pour "
"la branche locale et une autre pour la branche distante sur GitHub."

msgid "To delete our better project manager branch locally, use this command:"
msgstr ""
"Pour supprimer notre branche better-project-manager localement, utilisez "
"cette commande :"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"Par ailleurs, si la branche n'avait pas été encore fusionnée et que nous "
"voulions tout de même la supprimer, vous utiliseriez ``-D`` au lieu de ``-"
"d``."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""
"Ensuite, pour supprimer la branche distante sur GitHub, utilisez cette "
"commande :"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""
"Vous pouvez également supprimer la branche distante depuis PR GitHub elle-"
"même, un bouton devrait apparaître une fois qu'elle a été fusionné ou fermé."

msgid "Translation status"
msgstr "État de la traduction"
