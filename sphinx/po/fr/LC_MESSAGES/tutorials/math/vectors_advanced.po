# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Advanced vector math"
msgstr "Mathématiques avancées des vecteurs"

msgid "Planes"
msgstr "Plans"

msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"Le produit scalaire a une autre propriété intéressante avec les vecteurs "
"unitaires. Imaginez que perpendiculairement à ce vecteur (et à travers "
"l'origine) passe un plan. Les plans divisent tout l'espace en positif (au-"
"dessus du plan) et négatif (sous le plan), et (contrairement à la croyance "
"populaire) vous pouvez aussi utiliser leurs mathématiques en 2D :"

msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"Les vecteurs unitaires sont perpendiculaires à une surface (ils décrivent "
"donc l'orientation de la surface) sont appelés **vecteurs unitaires "
"normaux**. Bien que, d'habitude, ils sont simplement abrégés comme "
"*normales*. Les normales apparaissent dans les plans, la géométrie 3D (pour "
"déterminer où chaque face ou sommet fait face), etc. Une **normale** *est* "
"un **vecteur unitaire**, mais il est appelé *normale* à cause de son "
"utilisation. (Tout comme nous appelons (0,0) l'origine !)."

msgid ""
"It's as simple as it looks. The plane passes by the origin and the surface "
"of it is perpendicular to the unit vector (or *normal*). The side towards "
"the vector points to is the positive half-space, while the other side is the "
"negative half-space. In 3D this is exactly the same, except that the plane "
"is an infinite surface (imagine an infinite, flat sheet of paper that you "
"can orient and is pinned to the origin) instead of a line."
msgstr ""
"C'est aussi simple que ça en a l'air. Le plan passe par l'origine et sa "
"surface est perpendiculaire au vecteur unitaire (ou *normale*). Le côté vers "
"le vecteur pointe vers est le demi-espace positif, tandis que l'autre côté "
"est le demi-espace négatif. En 3D, c'est exactement la même chose, sauf que "
"le plan est une surface infinie (imaginez une feuille de papier plate et "
"infinie que vous pouvez orienter et que vous pouvez fixer à l'origine) au "
"lieu d'une ligne."

msgid "Distance to plane"
msgstr "Distance par rapport au plan"

msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"Maintenant que ce qu'est un plan est clair, revenons au produit scalaire. Le "
"produit scalaire entre un **vecteur unitaire** et n'importe quel **point "
"dans l'espace** (oui, cette fois nous faisons le produit scalaire entre "
"vecteur et position), renvoie la **distance du point au plan** :"

msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr ""
"Mais pas seulement la distance absolue, si le point se trouve dans le demi-"
"espace négatif, la distance sera également négative :"

msgid "This allows us to tell which side of the plane a point is."
msgstr "Cela nous permet de savoir de quel côté du plan est un point."

msgid "Away from the origin"
msgstr "Loin de l'origine"

msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"Je sais ce que vous pensez ! Jusqu'à présent, c'est bien beau, mais les "
"*vrais* plans sont partout dans l'espace, ne passant pas seulement par "
"l'origine. Vous voulez de l'action *plan* réelle et vous la voulez "
"*maintenant*."

msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"Rappelez-vous que les plans non seulement divisent l'espace en deux, mais "
"qu'ils ont aussi une *polarité*. Cela signifie qu'il est possible d'avoir "
"des plans qui se chevauchent parfaitement, mais que leurs demi-espaces "
"négatifs et positifs sont inversés."

msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"Dans cette optique, décrivons un plan complet comme une **normale** *N* et "
"une **distance de l'origine** scalaire *D*. Ainsi, notre plan est représenté "
"par N et D. Par exemple :"

msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"Pour les mathématiques 3D, Godot fournit un type intégré :ref:`Plane "
"<class_Plane>` qui gère cela."

msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""
"Fondamentalement, N et D peuvent représenter n'importe quel plan dans "
"l'espace, que ce soit pour de la 2D ou de la 3D (selon le nombre de "
"dimensions de N) et les mathématiques sont les mêmes pour les deux. C'est le "
"même chose qu'avant, mais D est la distance entre l'origine et le plan, se "
"déplaçant dans la direction N. Par exemple, imaginez que vous voulez "
"atteindre un point dans le plan, vous n'aurez qu'à faire :"

msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""
"Ceci étirera (redimensionnera) le vecteur normale et le fera toucher le "
"plan. Ce calcul peut sembler confus, mais c'est en fait beaucoup plus simple "
"qu'il n'y paraît. Si nous voulons dire, encore une fois, la distance entre "
"le point et le plan, nous faisons la même chose, mais en ajustant la "
"distance :"

msgid "The same thing, using a built-in function:"
msgstr "La même chose, en utilisant une fonction intégrée :"

msgid "This will, again, return either a positive or negative distance."
msgstr "Encore une fois, cela donnera une distance positive ou négative."

msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""
"L'inversion de la polarité du plan peut se faire en rendant négatif N et D. "
"Il en résultera un plan dans la même position, mais avec des demi-espaces "
"négatifs et positifs inversés :"

msgid ""
"Of course, Godot also implements this operator in :ref:`Plane "
"<class_Plane>`, so doing:"
msgstr ""
"Bien sûr, Godot implémente aussi cet opérateur dans :ref:`Plane "
"<class_Plane>`, donc :"

msgid "Will work as expected."
msgstr "Fonctionnera comme prévu."

msgid ""
"So, remember, a plane is just that and its main practical use is calculating "
"the distance to it. So, why is it useful to calculate the distance from a "
"point to a plane? It's extremely useful! Let's see some simple examples.."
msgstr ""
"N'oubliez pas qu'un plan n'est que cela et que sa principale utilisation "
"pratique est de calculer la distance par rapport à lui. Alors, pourquoi est-"
"il utile de calculer la distance d'un point à un plan ? C'est extrêmement "
"utile ! Voyons quelques exemples simples..."

msgid "Constructing a plane in 2D"
msgstr "Construire un plan en 2D"

msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"Il est clair que les plans ne sortent pas de nulle part, ils doivent donc "
"être construits. Il est facile de les construire en 2D, soit à partir d'un "
"vecteur normal (vecteur unitaire) et d'un point, soit à partir de deux "
"points dans l'espace."

msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so just calculate D from the dot product of the normal "
"and the point."
msgstr ""
"Dans le cas d'une normale et d'un point, la plus grande partie du travail "
"est effectuée, car la normale est déjà calculée, alors calculez simplement D "
"à partir du produit scalaire de la normale et du point."

msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"Pour deux points dans l'espace, il y a en fait deux plans qui les "
"traversent, partageant le même espace mais avec la normale pointant vers les "
"directions opposées. Pour calculer la normale à partir des deux points, il "
"faut d'abord obtenir le vecteur de direction, puis le faire pivoter de 90° "
"de chaque côté :"

msgid ""
"The rest is the same as the previous example, either point_a or point_b will "
"work since they are in the same plane:"
msgstr ""
"Le reste est la même chose que dans l'exemple précédent, le point_a ou le "
"point_b fonctionnera puisqu'ils sont dans le même plan :"

msgid ""
"Doing the same in 3D is a little more complex and will be explained further "
"down."
msgstr ""
"Faire la même chose en 3D est un peu plus complexe et sera expliqué plus "
"loin."

msgid "Some examples of planes"
msgstr "Quelques exemples de plan"

msgid ""
"Here is a simple example of what planes are useful for. Imagine you have a "
"`convex <https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"Voici un exemple simple de ce à quoi servent les plans. Imaginez que vous "
"avez un polygone `convexe <https://fr.wikipedia.org/wiki/"
"Polygone_convexe>`__. Par exemple, un rectangle, un trapèze, un triangle ou "
"n'importe quel polygone où aucune face ne se plie vers l'intérieur."

msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"Pour chaque segment du polygone, nous calculons le plan qui passe par ce "
"segment. Une fois que nous avons la liste des plans, nous pouvons faire des "
"choses intéressantes, par exemple vérifier si un point est à l'intérieur du "
"polygone."

msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"Nous passons par tous les plans, si nous pouvons trouver un plan où la "
"distance au point est positive, alors le point est à l'extérieur du "
"polygone. Si on ne peut pas, alors le point est à l'intérieur."

msgid "Code should be something like this:"
msgstr "Le code devrait ressembler à ceci :"

msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"Plutôt cool, hein ? Mais encore mieux ! Avec un peu plus d'effort, une "
"logique similaire nous permettra de savoir quand deux polygones convexes se "
"chevauchent aussi. C'est ce qu'on appelle le théorème de l'axe de séparation "
"(ou SAT) et la plupart des moteurs physiques l'utilisent pour détecter les "
"collisions."

msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"Avec un point, il suffit de vérifier si un plan retourne une distance "
"positive pour savoir si le point est à l'extérieur. Avec un autre polygone, "
"nous devons trouver un plan où *tous* *les* *points* de l'*autre* *polygone* "
"lui renvoient une distance positive. Ce contrôle s'effectue avec les plans "
"de A contre les points de B, puis avec les plans de B contre les points de "
"A :"

msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""
"Comme vous pouvez le constater, les plans sont très utiles, et ce n'est que "
"la partie émergée de l'iceberg. Vous vous demandez peut-être ce qui se passe "
"avec les polygones non convexes. Pour ce faire, il suffit généralement de "
"diviser le polygone concave en polygones convexes plus petits ou d'utiliser "
"une technique telle que le BSP (qui n'est pas très utilisé de nos jours)."

msgid "Collision detection in 3D"
msgstr "Détection des collisions en 3D"

msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"C'est un autre bonus, une récompense pour avoir été patient et avoir suivi "
"ce long tutoriel. Voici un autre morceau de sagesse. Ce n'est peut-être pas "
"quelque chose avec un cas d'utilisation directe (Godot fait déjà assez bien "
"la détection de collision) mais il est utilisé par presque tous les moteurs "
"physiques et bibliothèques de détection de collision :)"

msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"Rappelez-vous que la conversion d'une forme convexe en 2D en un tableau de "
"plans 2D a été utile pour la détection des collisions ? Vous pouviez "
"détecter si un point se trouvait à l'intérieur d'une forme convexe, ou si "
"deux formes convexes 2D se chevauchaient."

msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"Eh bien, cela fonctionne aussi en 3D, si deux formes polyédriques 3D entrent "
"en collision, vous ne pourrez pas trouver de plan de séparation. Si un plan "
"de séparation est trouvé, les formes n'entrent définitivement pas en "
"collision."

msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""
"Rappelons-nous un peu, un plan de séparation signifie que tous les sommets "
"du polygone A sont d'un côté du plan, et tous les sommets du polygone B sont "
"de l'autre côté. Ce plan est toujours l'un des plans de face du polygone A "
"ou du polygone B."

msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"En 3D cependant, il y a un problème avec cette approche, car il est possible "
"que, dans certains cas, un plan de séparation ne puisse être trouvé. Ceci "
"est un exemple d'une telle situation :"

msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"Pour éviter cela, certains plans supplémentaires doivent être testés comme "
"séparateurs, ces plans sont le produit vectoriel entre les bords du polygone "
"A et les bords du polygone B"

msgid "So the final algorithm is something like:"
msgstr "L'algorithme final est quelque chose comme cela :"

msgid "More information"
msgstr "Plus d'information"

msgid ""
"For more information on using vector math in Godot, see the following "
"article:"
msgstr ""
"Pour plus d'informations sur l'utilisation des mathématiques vectorielles "
"dans Godot, voir les articles suivants :"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video series \"Essence of Linear Algebra\": https://www.youtube."
"com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
msgstr ""
"Si vous souhaitez des explications supplémentaires, vous pouvez consulter "
"l'excellente série vidéo de 3Blue1Brown \"Essence of Linear Algebra\" : "
"https://www.youtube.com/watch?"
"v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"

msgid "Translation status"
msgstr "État de la traduction"
