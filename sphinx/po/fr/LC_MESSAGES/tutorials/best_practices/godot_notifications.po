# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Notifications Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Chaque Objet dans Godot implémente une méthode :ref:`_notification "
"<class_Object_method__notification>`. Son but est de permettre à l'Objet de "
"répondre à une variété de rappels au niveau moteur qui peuvent s'y "
"rapporter. Par exemple, si le moteur indique à un :ref:`CanvasItem "
"<class_CanvasItem>` de \"draw\", il appellera "
"``_notification(NOTIFICATION_DRAW)``."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Certaines de ces notifications, comme draw, sont utiles pour remplacer les "
"scripts. A tel point que Godot expose beaucoup d'entre eux avec des "
"fonctions dédiées :"

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""
"Ce que les utilisateurs peuvent ne pas comprendre, c'est que les "
"notifications existent pour les types autres que seulement Node :"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>` : un callback qui se "
"déclenche pendant l'initialisation de l'objet. Non accessible aux scripts."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>` : un callback qui se "
"déclenche avant que le moteur ne supprime un Objet, c'est-à-dire un "
"'destructeur'."

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>` : un callback qui se "
"déclenche lorsque la souris entre dans la fenêtre du système d'exploitation "
"qui affiche le contenu du jeu."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"Et beaucoup de rappels qui *existent* dans les Nœuds n'ont pas de méthodes "
"dédiées, mais sont quand même très utiles."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` : un callback qui déclenche "
"chaque fois qu'un nœud enfant est ajouté à un autre nœud."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>` : un callback qui déclenche "
"chaque fois qu'un nœud enfant est supprimé d'un autre nœud."

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>` : un callback qui se "
"déclenche après qu'un nœud Popup ait complété une méthode ``popup*``. Notez "
"la différence par rapport à son signal ``about_to_show`` qui déclenche "
"*avant* son apparition."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""
"On peut accéder à toutes ces notifications personnalisées à partir de la "
"méthode universelle ``_notification``."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Les méthodes de la documentation étiquetées comme \"virtuelles\" sont "
"également destinées à être substituée par des scripts."

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"Un exemple classique est la méthode :ref:`_init <class_Object_method__init>` "
"dans Object. Bien qu'il n'ait pas d'équivalent ``NOTIFICATION_*``, le moteur "
"appelle toujours la méthode. La plupart des langages (à l'exception du C#) "
"s'en servent comme constructeur."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Alors, dans quelle situation faut-il utiliser chacune de ces notifications "
"ou fonctions virtuelles ?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process vs. _physics_process vs. \\*_input"

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"Utilisez ``_process`` lorsqu'on a besoin d'un temps delta dépendant du temps "
"entre les images. Si le code qui met à jour les données objet doit être mis "
"à jour aussi souvent que possible, c'est le bon endroit. Les vérifications "
"logiques récurrentes et la mise en cache des données s'exécutent souvent "
"ici, mais cela dépend de la fréquence à laquelle on a besoin de les mettre à "
"jour. S'ils n'ont pas besoin d'exécuter à toutes les images, "
"l'implémentation d'une boucle Timer-Yield-timeout est une autre option."

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Utilisez ``_physics_process`` quand vous avez besoin d'un temps delta "
"indépendant du temps entre les images. Si le code a besoin de mises à jour "
"cohérentes au fil du temps, quelle que soit la vitesse ou la lenteur de "
"l'avancement du temps, c'est le bon endroit. Les opérations récurrentes de "
"cinématique et de transformation d'objets doivent être exécutées ici."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"Bien que cela soit possible, pour d'obtenir les meilleures performances, il "
"faut éviter d'effectuer des contrôles d'entrée pendant ces rappels. "
"``_process``` et ``_physics_process`` se déclenchent à chaque occasion (ils "
"ne se \"reposent\" pas par défaut). En revanche, les rappels ``*_input`` ne "
"se déclenchent que sur les trames dans lesquelles le moteur a effectivement "
"détecté l'entrée."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"On peut tout de même vérifier les actions d'entrée dans les rappels "
"d'entrée. Si l'on veut utiliser le temps delta, on peut le récupérer à "
"partir des méthodes de temps delta correspondantes si nécessaire."

msgid "_init vs. initialization vs. export"
msgstr "_init vs. initialization vs. export"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"Si le script initialise son propre sous-arbre de nœuds, sans scène, ce code "
"devrait s'exécuter ici. D'autres propriétés ou initialisation indépendantes "
"de l'arbre de SceneTree doivent également être exécutées ici. Cela se "
"déclenche avant ``_ready`` ou ``_enter_tree``, mais après qu'un script crée "
"et initialise ses propriétés."

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""
"Les scripts ont trois types d'assignations de propriétés qui peuvent se "
"produire pendant l'instanciation :"

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""
"Lors de l'instanciation d'une scène, les valeurs des propriétés seront "
"définies selon la séquence suivante :"

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**Première assignation de valeur :** l’instanciation assignera la valeur "
"d’initialisation ou la valeur d'affectation init. Les affectations Init ont "
"priorité sur les valeurs d’initialisation."

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**Assignation de valeur exportée :** Si l'instanciation se fait à partir "
"d'une scène plutôt que d'un script, Godot assignera la valeur exportée pour "
"remplacer la valeur initiale définie dans le script."

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Par conséquent, l'instanciation d'un script par rapport à une scène "
"affectera à la fois l'initialisation *et* le nombre de fois que le moteur "
"appelle le setter."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"Lors de l'instanciation d'une scène connectée à la première scène exécutée, "
"Godot instancie les nœuds en bas de l'arbre (en faisant des appels "
"``_init``) et construit l'arbre en partant de la racine. Ceci provoque la "
"cascade des appels ``_enter_tree`` vers le bas de l'arbre. Une fois l'arbre "
"terminé, les nœuds feuilles appellent ``_ready``. Un nœud appellera cette "
"méthode une fois que tous les nœuds enfants auront fini d'appeler les leurs. "
"Ceci provoque alors une cascade inverse remontant jusqu'à la racine de "
"l'arbre."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"Lors de l'instanciation d'un script ou d'une scène autonome, les nœuds ne "
"sont pas ajoutés au SceneTree lors de la création, donc aucun callback "
"``_enter_tree`` ne se déclenche. A la place, seul l'appel ``_init`` se "
"produit. Lorsque la scène est ajoutée au SceneTree, les appels "
"``_enter_tree`` et ``_ready`` se produisent."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Si l'on a besoin de déclencher un comportement qui se produit lorsque un "
"nœud devient parent d'un autre, qu'il se produise dans le cadre de la scène "
"principale/active ou non, on peut utiliser la notification :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`. Par exemple, voici un extrait "
"qui connecte la méthode d'un nœud à un signal personnalisé sur le nœud "
"parent sans échouer. Utile sur les nœuds centrés sur les données que l'on "
"peut créer lors de l'exécution."

msgid "Translation status"
msgstr "État de la traduction"
