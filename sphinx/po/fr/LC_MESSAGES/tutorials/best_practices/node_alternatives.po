# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Quand et comment éviter d'utiliser des nœuds pour tout"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Les nœuds sont bon marché à produire, mais ils ont aussi leurs limites. Un "
"projet peut avoir des dizaines de milliers de nœuds qui font tous quelque "
"chose. Cependant, plus leur comportement est complexe, plus la pression "
"qu'ils exercent sur la performance d'un projet est grande."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot fournit des objets plus légers pour créer des APIs qui utilisent des "
"nœuds. N'oubliez pas qu'il s'agit d'options lorsque vous concevez la façon "
"dont vous souhaitez construire les fonctionnalités de votre projet."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>` : L'objet léger ultime, l'Object original doit "
"utiliser la gestion manuelle de la mémoire. Cela dit, il n'est pas trop "
"difficile de créer ses propres structures de données personnalisées, même "
"des structures de nœuds, qui sont aussi plus légères que la classe :ref:"
"`Node <class_Node>`."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Exemple :** Voir le nœud :ref:`Tree <class_Tree>`. Il supporte un haut "
"niveau de personnalisation pour une table des matières avec un nombre "
"arbitraire de lignes et de colonnes. Les données qu'il utilise pour générer "
"sa visualisation sont en fait un arbre d'Objects :ref:`TreeItem "
"<class_TreeItem>`."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Avantages :** La simplification de l'API en objets de plus petite portée "
"permet d'améliorer son accessibilité et de réduire le temps d'itération. "
"Plutôt que de travailler avec l'ensemble de la bibliothèque Node, on crée un "
"ensemble abrégé d'objets à partir duquel un nœud peut générer et gérer les "
"sous-nœuds appropriés."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"Il faut être prudent quand on les manipule. On peut stocker un Object dans "
"une variable, mais ces références peuvent devenir invalides sans "
"avertissement. Par exemple, si le créateur de l'Object décide de le "
"supprimer, cela déclencherait un état d’erreur lorsqu’on y accède ensuite."

msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`Reference <class_Reference>` : Seulement un peu plus complexe que "
"l'Object. Elles suivent les références à elle-mêmes, effaçant seulement la "
"mémoire chargée quand aucune autre référence à elles-mêmes n'existe. Elles "
"sont utiles dans la majorité des cas où l'on a besoin de données dans une "
"classe personnalisée."

msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**Exemple :** Voir l'objet :ref:`File <class_File>`. Il fonctionne comme un "
"Object normal, sauf qu'il n'est pas nécessaire de l'effacer soi-même."

msgid "**Advantages:** same as the Object."
msgstr "**Avantages :** les mêmes que l'objet."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>` : Seulement un peu plus complexe que la "
"Reference. elles ont la capacité innée de sérialiser/désérialiser (c'est-à-"
"dire de sauvegarder et de charger) leurs propriétés objet dans les fichiers "
"ressources Godot."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**Exemple :** Scripts, PackedScene (pour les fichiers de scène), et d'autres "
"types comme chacune des classes :ref:`AudioEffect <class_AudioEffect>`. "
"Chacune d'entre elles peut être sauvegardée et chargée, donc elles "
"s'étendent à partir de Resource."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Avantages :** Beaucoup de choses ont été :ref:`dites <doc_resources>` sur "
"les avantages des :ref:`Resource <class_Resource>` par rapport aux méthodes "
"traditionnelles de stockage de données. Dans le contexte de l'utilisation "
"des ressources sur les nœuds cependant, leur principal avantage réside dans "
"la compatibilité avec l'inspecteur. Bien qu'ils soient presque aussi légers "
"que Object/Reference, ils peuvent toujours afficher et exporter des "
"propriétés dans l'inspecteur. Cela leur permet de remplir un objectif "
"similaire à celui des sous-nœuds sur le plan de l'utilisabilité, mais aussi "
"d'améliorer les performances si l'on prévoit d'avoir beaucoup de ces "
"Resources/Nodes dans ses scènes."

msgid "Translation status"
msgstr "État de la traduction"
