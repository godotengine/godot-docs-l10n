# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using a Viewport as a texture"
msgstr "Utilisation d'un Viewport comme texture"

msgid "Introduction"
msgstr "Introduction"

msgid ""
"This tutorial will introduce you to using the :ref:`Viewport "
"<class_Viewport>` as a texture that can be applied to 3D objects. In order "
"to do so, it will walk you through the process of making a procedural planet "
"like the one below:"
msgstr ""
"Ce tutoriel va vous présenter l'utilisation de :ref:`Viewport "
"<class_Viewport>` comme une texture qui peut être appliquée à des objets 3D. "
"Pour ce faire, il vous guidera à travers le processus de fabrication d'une "
"planète procédurale comme celle ci-dessous :"

msgid ""
"This tutorial does not cover how to code a dynamic atmosphere like the one "
"this planet has."
msgstr ""
"Ce tutoriel ne couvre pas la façon de coder une atmosphère dynamique comme "
"celle de cette planète."

msgid ""
"This tutorial assumes you are familiar with how to set up a basic scene "
"including: a :ref:`Camera <class_Camera>`, a :ref:`light source "
"<class_OmniLight>`, a :ref:`Mesh Instance <class_MeshInstance>` with a :ref:"
"`Primitive Mesh <class_PrimitiveMesh>`, and applying a :ref:`SpatialMaterial "
"<class_SpatialMaterial>` to the mesh. The focus will be on using the :ref:"
"`Viewport <class_Viewport>` to dynamically create textures that can be "
"applied to the mesh."
msgstr ""
"Ce tutoriel suppose que vous êtes familier avec la façon de mettre en place "
"une scène de base comprenant : une :ref:`Camera <class_Camera>`, une :ref:"
"`source de lumière <class_OmniLight>`, une :ref:`Mesh Instance "
"<class_MeshInstance>` avec un :ref:`Primitive Mesh <class_PrimitiveMesh>`, "
"et en appliquant un :ref:`Spatial Material <class_SpatialMaterial>` au "
"maillage. L'accent sera mis sur l'utilisation de :ref:`Viewport "
"<class_Viewport>` pour créer dynamiquement des textures qui peuvent être "
"appliquées au maillage."

msgid "In this tutorial, we'll cover the following topics:"
msgstr "Durant ce tutoriel, nous couvrirons les sujets suivant :"

msgid "How to use a :ref:`Viewport <class_Viewport>` as a render texture"
msgstr ""
"Comment utiliser un :ref:`Viewport <class_Viewport>` comme texture de rendu"

msgid "Mapping a texture to a sphere with equirectangular mapping"
msgstr "Mappage d'une texture sur une sphère avec un mappage équirectangulaire"

msgid "Fragment shader techniques for procedural planets"
msgstr "Techniques fragment shader pour planètes procédurales"

msgid ""
"Setting a Roughness map from a :ref:`Viewport Texture "
"<class_ViewportTexture>`"
msgstr ""
"Paramétrage d'une carte de rugosité à partir d'une :ref:`Viewport Texture "
"<class_ViewportTexture>`"

msgid "Setting up the Viewport"
msgstr "Configuration de la fenêtre d'affichage"

msgid "First, add a :ref:`Viewport <class_Viewport>` to the scene."
msgstr "D'abord, ajoutez un :ref:`Viewport <class_Viewport>` à la scène."

msgid ""
"Next, set the size of the :ref:`Viewport <class_Viewport>` to ``(1024, "
"512)``. The :ref:`Viewport <class_Viewport>` can actually be any size so "
"long as the width is double the height. The width needs to be double the "
"height so that the image will accurately map onto the sphere, as we will be "
"using equirectangular projection, but more on that later."
msgstr ""
"Ensuite, définissez la taille du :ref:`Viewport <class_Viewport>` à ``(1024, "
"512)``. Le :ref:`Viewport <class_Viewport>` peut en fait être de n'importe "
"quelle taille tant que la largeur est le double de la hauteur. La largeur "
"doit être le double de la hauteur pour que l'image soit correctement "
"représentée sur la sphère en utilisant la projection équirectangulaire, mais "
"nous y reviendrons plus tard."

msgid ""
"Next, disable HDR and disable 3D. We don't need HDR because our planet's "
"surface will not be especially bright, so values between ``0`` and ``1`` "
"will be fine. And we will be using a :ref:`ColorRect <class_ColorRect>` to "
"render the surface, so we don't need 3D either."
msgstr ""
"Ensuite, désactivez le HDR et désactivez la 3D. Nous n'avons pas besoin de "
"HDR parce que la surface de notre planète ne sera pas particulièrement "
"brillante, donc des valeurs entre ``0`` et ``1`` seront très bien. Et nous "
"allons utiliser un :ref:`ColorRect <class_ColorRect>` pour rendre la "
"surface, donc nous n'avons pas besoin de 3D non plus."

msgid ""
"Select the Viewport and add a :ref:`ColorRect <class_ColorRect>` as a child."
msgstr ""
"Sélectionnez le Viewport et ajoutez un :ref:`ColorRect <class_ColorRect>` "
"comme enfant."

msgid ""
"Set the anchors \"Right\" and \"Bottom\" to ``1``, then make sure all the "
"margins are set to ``0``. This will ensure that the :ref:`ColorRect "
"<class_ColorRect>` takes up the entire :ref:`Viewport <class_Viewport>`."
msgstr ""
"Réglez les ancres \"Right\" et \"Bottom\" sur ``1``, puis assurez-vous que "
"toutes les marges sont réglées sur ``0``. Ceci assurera que le :ref:"
"`ColorRect <class_ColorRect>` occupe la totalité du :ref:`Viewport "
"<class_Viewport>`."

msgid ""
"Next, we add a :ref:`Shader Material <class_ShaderMaterial>` to the :ref:"
"`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > Material "
"> ``New ShaderMaterial``)."
msgstr ""
"Ensuite, on ajoute un :ref:`Shader Material <class_ShaderMaterial>` au :ref:"
"`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > Material "
"> ``New ShaderMaterial``)."

msgid ""
"Basic familiarity with shading is recommended for this tutorial. However, "
"even if you are new to shaders, all the code will be provided, so you should "
"have no problem following along."
msgstr ""
"Une connaissance de base du shading est recommandée pour ce tutoriel. "
"Cependant, même si vous êtes nouveau dans les shaders, tout le code sera "
"fourni, donc vous ne devriez pas avoir de problème pour suivre."

msgid ""
"ColorRect > CanvasItem > Material > Material > click / Edit > ShaderMaterial "
"> Shader > ``New Shader`` > click / Edit:"
msgstr ""
"ColorRect > CanvasItem > Material > Material > click / Edit > ShaderMaterial "
"> Shader > ``New Shader`` > click / Edit :"

msgid "The above code renders a gradient like the one below."
msgstr "Le code ci-dessus rend un gradient comme celui ci-dessous."

msgid ""
"Now we have the basics of a :ref:`Viewport <class_Viewport>` that we render "
"to and we have a unique image that we can apply to the sphere."
msgstr ""
"Maintenant, nous avons les bases d'un :ref:`Viewport <class_Viewport>` que "
"nous rendons et nous avons une image unique que nous pouvons appliquer à la "
"sphère."

msgid "Applying the texture"
msgstr "Appliquer la texture"

msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``New "
"SpatialMaterial``:"
msgstr ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``New "
"SpatialMaterial`` :"

msgid ""
"Now we go into the :ref:`Mesh Instance <class_MeshInstance>` and add a :ref:"
"`SpatialMaterial <class_SpatialMaterial>` to it. No need for a special :ref:"
"`Shader Material <class_ShaderMaterial>` (although that would be a good idea "
"for more advanced effects, like the atmosphere in the example above)."
msgstr ""
"Maintenant, nous allons dans le :ref:`Mesh Instance <class_MeshInstance>` et "
"nous y ajoutons un :ref:`Spatial Material <class_SpatialMaterial>`. Pas "
"besoin d'un :ref:`Shader Material <class_ShaderMaterial>` spécial (bien que "
"ce serait une bonne idée pour des effets plus avancés, comme l'atmosphère "
"dans l'exemple ci-dessus)."

msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``click`` / "
"``Edit``:"
msgstr ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``click`` / "
"``Edit`` :"

msgid ""
"Open the newly created :ref:`SpatialMaterial <class_SpatialMaterial>` and "
"scroll down to the \"Albedo\" section and click beside the \"Texture\" "
"property to add an Albedo Texture. Here we will apply the texture we made. "
"Choose \"New ViewportTexture\""
msgstr ""
"Ouvrez le nouveau :ref:`Spatial Material <class_SpatialMaterial>` créé et "
"descendez jusqu'à la section \"Albedo\" et cliquez à côté de la propriété "
"\"Texture\" pour ajouter une Albedo Texture. Ici, nous allons appliquer la "
"texture que nous avons faite. Choisissez \"New ViewportTexture\""

msgid ""
"Then, from the menu that pops up, select the Viewport that we rendered to "
"earlier."
msgstr ""
"Ensuite, dans le menu qui apparaît, sélectionnez le Viewport que nous avons "
"rendu précédemment."

msgid ""
"Your sphere should now be colored in with the colors we rendered to the "
"Viewport."
msgstr ""
"Votre sphère devrait maintenant être colorée avec les couleurs que nous "
"avons rendues dans le Viewport."

msgid ""
"Notice the ugly seam that forms where the texture wraps around? This is "
"because we are picking a color based on UV coordinates and UV coordinates do "
"not wrap around the texture. This is a classic problem in 2D map projection. "
"Game developers often have a 2-dimensional map they want to project onto a "
"sphere, but when it wraps around, it has large seams. There is an elegant "
"workaround for this problem that we will illustrate in the next section."
msgstr ""
"Remarquez-vous la jointure laide qui se forme à l'endroit où la texture "
"s'enroule ? C'est parce que nous choisissons une couleur basée sur les "
"coordonnées UV et que les coordonnées UV ne s'enroulent pas autour de la "
"texture. C'est un problème classique dans la projection de cartes 2D. Les "
"développeurs de jeux ont souvent une carte en 2 dimensions qu'ils veulent "
"projeter sur une sphère, mais quand elle s'enroule autour, elle a de larges "
"jointures. Il existe une solution élégante à ce problème, que nous "
"illustrerons dans la prochaine section."

msgid "Making the planet texture"
msgstr "Créer la texture de la planète"

msgid ""
"So now, when we render to our :ref:`Viewport <class_Viewport>`, it appears "
"magically on the sphere. But there is an ugly seam created by our texture "
"coordinates. So how do we get a range of coordinates that wrap around the "
"sphere in a nice way? One solution is to use a function that repeats on the "
"domain of our texture. ``sin`` and ``cos`` are two such functions. Let's "
"apply them to the texture and see what happens."
msgstr ""
"Donc maintenant, quand nous rendons notre :ref:`Viewport <class_Viewport>`, "
"il apparaît magiquement sur la sphère. Mais il y a une vilaine jointure "
"créée par nos coordonnées de texture. Alors comment obtenir une gamme de "
"coordonnées qui s'enroulent autour de la sphère de façon agréable ? Une "
"solution est d'utiliser une fonction qui se répète sur le domaine de notre "
"texture. \"sin\" et \"cos\" sont deux de ces fonctions. Appliquons-les à la "
"texture et voyons ce qui se passe."

msgid ""
"Not too bad. If you look around, you can see that the seam has now "
"disappeared, but in its place, we have pinching at the poles. This pinching "
"is due to the way Godot maps textures to spheres in its :ref:"
"`SpatialMaterial <class_SpatialMaterial>`. It uses a projection technique "
"called equirectangular projection, which translates a spherical map onto a "
"2D plane."
msgstr ""
"Pas trop mal. Si vous regardez autour de vous, vous pouvez voir que la "
"jointure a maintenant disparu, mais à sa place, nous avons des pincements "
"aux pôles. Ce pincement est dû à la façon dont Godot mappe les textures aux "
"sphères dans son :ref:`Spatial Material <class_SpatialMaterial>`. Il utilise "
"une technique de projection appelée projection équi-rectangulaire, qui "
"traduit une carte sphérique sur un plan 2D."

msgid ""
"If you are interested in a little extra information on the technique, we "
"will be converting from spherical coordinates into Cartesian coordinates. "
"Spherical coordinates map the longitude and latitude of the sphere, while "
"Cartesian coordinates are, for all intents and purposes, a vector from the "
"center of the sphere to the point."
msgstr ""
"Si vous êtes intéressé par un peu plus d'informations sur la technique, nous "
"allons convertir des coordonnées sphériques en coordonnées cartésiennes. Les "
"coordonnées sphériques représentent la longitude et la latitude de la "
"sphère, tandis que les coordonnées cartésiennes sont, à toutes fins utiles, "
"un vecteur allant du centre de la sphère au point."

msgid ""
"For each pixel, we will calculate its 3D position on the sphere. From that, "
"we will use 3D noise to determine a color value. By calculating the noise in "
"3D, we solve the problem of the pinching at the poles. To understand why, "
"picture the noise being calculated across the surface of the sphere instead "
"of across the 2D plane. When you calculate across the surface of the sphere, "
"you never hit an edge, and hence you never create a seam or a pinch point on "
"the pole. The following code converts the ``UVs`` into Cartesian coordinates."
msgstr ""
"Pour chaque pixel, nous allons calculer sa position 3D sur la sphère. A "
"partir de là, nous allons utiliser un bruit 3D pour déterminer une valeur de "
"couleur. En calculant le bruit en 3D, nous résolvons le problème du "
"pincement aux pôles. Pour comprendre pourquoi, imaginez le bruit calculé sur "
"la surface de la sphère plutôt que sur le plan 2D. Lorsque vous calculez sur "
"la surface de la sphère, vous ne touchez jamais un bord, et donc vous ne "
"créez jamais de couture ou de point de pincement sur le pôle. Le code "
"suivant convertit les ``UVs`` en coordonnées cartésiennes."

msgid "And if we use ``unit`` as an output ``COLOR`` value, we get:"
msgstr ""
"Et si nous utilisons ``unit`` comme valeur de sortie ``COLOR``, nous "
"obtenons :"

msgid ""
"Now that we can calculate the 3D position of the surface of the sphere, we "
"can use 3D noise to make the planet. We will be using this noise function "
"directly from a `Shadertoy <https://www.shadertoy.com/view/Xsl3Dl>`_:"
msgstr ""
"Maintenant que nous pouvons calculer la position 3D de la surface de la "
"sphère, nous pouvons utiliser le bruit 3D pour faire la planète. Nous "
"utiliserons cette fonction de bruit directement depuis un `Shadertoy "
"<https://www.shadertoy.com/view/Xsl3Dl>`_ :"

msgid ""
"All credit goes to the author, Inigo Quilez. It is published under the "
"``MIT`` licence."
msgstr ""
"Tout les crédits vont à l'auteur, Inigo Quilez, Cela est publié sous une "
"licence ``MIT``."

msgid ""
"Now to use ``noise``, add the following to the    ``fragment`` function:"
msgstr ""
"Maintenant pour utiliser le ``noise``, ajoutez ce qui suit à la fonction "
"``fragment`` :"

msgid "In order to highlight the texture, we set the material to unshaded."
msgstr ""
"Afin de mettre en valeur la texture, nous avons réglé le matériau sur "
"unshaded."

msgid ""
"You can see now that the noise indeed wraps seamlessly around the sphere. "
"Although this looks nothing like the planet you were promised. So let's move "
"onto something more colorful."
msgstr ""
"Vous pouvez voir maintenant que le bruit s'enroule en effet sans jointure "
"autour de la sphère. Bien que cela ne ressemble en rien à la planète qu'on "
"vous a promise. Alors passons à quelque chose de plus coloré."

msgid "Coloring the planet"
msgstr "Colorer la planète"

msgid ""
"Now to make the planet colors. While there are many ways to do this, for "
"now, we will stick with a gradient between water and land."
msgstr ""
"Maintenant pour faire les couleurs de la planète. Bien qu'il y ait de "
"nombreuses façons de le faire, pour l'instant, nous nous en tiendrons à un "
"gradient entre l'eau et la terre."

msgid ""
"To make a gradient in GLSL, we use the ``mix`` function. ``mix`` takes two "
"values to interpolate between and a third argument to choose how much to "
"interpolate between them; in essence, it *mixes* the two values together. In "
"other APIs, this function is often called ``lerp``. However, ``lerp`` is "
"typically reserved for mixing two floats together; ``mix`` can take any "
"values whether it be floats or vector types."
msgstr ""
"Pour faire un gradient dans GLSL, on utilise la fonction ``mix``. ``mix`` "
"prend deux valeurs à interpoler entre elles et un troisième argument pour "
"choisir la quantité à interpoler entre elles ; en substance, il *mixe* les "
"deux valeurs ensemble. Dans d'autres API, cette fonction est souvent appelée "
"``lerp``. Cependant, ``lerp`` est typiquement réservé au mélange de deux "
"flottants ensemble ; ``mix`` peut prendre n'importe quelle valeur, que ce "
"soit des flottants ou des types vecteur."

msgid ""
"The first color is blue for the ocean. The second color is a kind of reddish "
"color (because all alien planets need red terrain). And finally, they are "
"mixed together by ``n * 0.5 + 0.5``. ``n`` smoothly varies between ``-1`` "
"and ``1``. So we map it into the ``0-1`` range that ``mix`` expects. Now you "
"can see that the colors change between blue and red."
msgstr ""
"La première couleur est le bleu pour l'océan. La deuxième couleur est une "
"sorte de couleur rougeâtre (parce que toutes les planètes extraterrestres "
"ont besoin d'un terrain rouge). Et finalement, ils sont mélangés par ``n * "
"0.5 + 0.5``. ``n`` varie en douceur entre ``-1`` et ``1``. Donc nous le "
"mappons dans l'intervalle ``0-1`` que ``mix`` attend. Maintenant vous pouvez "
"voir que les couleurs changent entre le bleu et le rouge."

msgid ""
"That is a little more blurry than we want. Planets typically have a "
"relatively clear separation between land and sea. In order to do that, we "
"will change the last term to ``smoothstep(-0.1, 0.0, n)``. And thus the "
"whole line becomes:"
msgstr ""
"C'est un peu plus flou que ce que nous voulons. Les planètes ont "
"généralement une séparation relativement nette entre la terre et la mer. "
"Pour ce faire, nous allons changer le dernier terme en ``smoothstep(-0.1, "
"0.0, n)``. Et ainsi toute la ligne devient :"

msgid ""
"What ``smoothstep`` does is return ``0`` if the third argument is below the "
"first and ``1`` if the third argument is larger than the second and smoothly "
"blends between ``0`` and ``1`` if the third number is between the first and "
"the second. So in this line, ``smoothstep`` returns ``0`` whenever ``n`` is "
"less than ``-0.1`` and it returns ``1`` whenever ``n`` is above ``0``."
msgstr ""
"Ce que fait ``smoothstep`` est de retourner ``0`` si le troisième argument "
"est en dessous du premier et ``1`` si le troisième argument est plus grand "
"que le second et se mélange doucement entre ``0`` et ``1`` si le troisième "
"nombre est entre le premier et le second. Donc, dans cette ligne, "
"``smoothstep`` renvoie ``0`` lorsque ``n`` est inférieur à ``-0.1`` et ``1`` "
"lorsque ``n`` est supérieur à ``0``."

msgid ""
"One more thing to make this a little more planet-y. The land shouldn't be so "
"blobby; let's make the edges a little rougher. A trick that is often used in "
"shaders to make rough looking terrain with noise is to layer levels of noise "
"over one another at various frequencies. We use one layer to make the "
"overall blobby structure of the continents. Then another layer breaks up the "
"edges a bit, and then another, and so on. What we will do is calculate ``n`` "
"with four lines of shader code instead of just one. ``n`` becomes:"
msgstr ""
"Une dernière chose pour rendre ça un peu plus planétaire. La terre ne "
"devrait pas être aussi tachetée ; rendons les bords un peu plus rugueux. Une "
"astuce souvent utilisée dans les shaders pour rendre un terrain rugueux avec "
"du bruit consiste à superposer des niveaux de bruit à différentes "
"fréquences. Nous utilisons une couche pour faire la structure globale des "
"continents. Ensuite, une autre couche casse un peu les bords, puis une "
"autre, et ainsi de suite. Ce que nous allons faire, c'est calculer ``n`` "
"avec quatre lignes de code de shader au lieu d'une seule. ``n`` devient :"

msgid "And now the planet looks like:"
msgstr "Et maintenant, la planète ressemble à :"

msgid "And with shading turned back on, it looks like:"
msgstr "Et avec le shading réactivé, cela ressemble à :"

msgid "Making an ocean"
msgstr "Créer un océan"

msgid ""
"One final thing to make this look more like a planet. The ocean and the land "
"reflect light differently. So we want the ocean to shine a little more than "
"the land. We can do this by passing a fourth value into the ``alpha`` "
"channel of our output ``COLOR`` and using it as a Roughness map."
msgstr ""
"Une dernière chose pour que ça ressemble plus à une planète. L'océan et la "
"terre reflètent la lumière différemment. Nous voulons donc que l'océan "
"brille un peu plus que la terre. Nous pouvons faire cela en passant une "
"quatrième valeur dans le canal ``alpha`` de notre sortie ``COLOR`` et en "
"l'utilisant comme carte de rugosité."

msgid ""
"This line returns ``0.3`` for water and ``1.0`` for land. This means that "
"the land is going to be quite rough, while the water will be quite smooth."
msgstr ""
"Cette ligne renvoie ``0.3`` pour l'eau et ``1.0`` pour la terre. Cela "
"signifie que le terrain sera assez accidenté, tandis que l'eau sera assez "
"lisse."

msgid ""
"And then, in the material, under the \"Metallic\" section, make sure "
"``Metallic`` is set to ``0`` and ``Specular`` is set to ``1``. The reason "
"for this is the water reflects light really well, but isn't metallic. These "
"values are not physically accurate, but they are good enough for this demo."
msgstr ""
"Et ensuite, dans le matériau, sous la section \"Metallic\", assurez-vous que "
"``Metallic`` est réglé à ``0`` et ``Specular`` est réglé à ``1``. La raison "
"en est que l'eau réfléchit très bien la lumière, mais n'est pas métallique. "
"Ces valeurs ne sont pas physiquement exactes, mais elles sont suffisamment "
"bonnes pour cette démo."

msgid ""
"Next, under the \"Roughness\" section, set ``Roughness`` to ``1`` and set "
"the roughness texture to a :ref:`Viewport Texture <class_ViewportTexture>` "
"pointing to our planet texture :ref:`Viewport <class_Viewport>`. Finally, "
"set the ``Texture Channel`` to ``Alpha``. This instructs the renderer to use "
"the ``alpha`` channel of our output ``COLOR`` as the ``Roughness`` value."
msgstr ""
"Ensuite, dans la section \"Roughness\", mettez ``Roughness`` à ``1`` et "
"assignez la texture de rugosité à un :ref:`Viewport Texture "
"<class_ViewportTexture>` pointant sur la texture de notre planète :ref:"
"`Viewport <class_Viewport>`. Enfin, réglez le ``Texture Channel`` sur "
"``Alpha``. Ceci indique au moteur de rendu d'utiliser le canal ``alpha`` de "
"notre sortie ``COLOR`` comme valeur de ``Roughness``."

msgid ""
"You'll notice that very little changes except that the planet is no longer "
"reflecting the sky. This is happening because, by default, when something is "
"rendered with an alpha value, it gets drawn as a transparent object over the "
"background. And since the default background of the :ref:`Viewport "
"<class_Viewport>` is opaque, the ``alpha`` channel of the :ref:`Viewport "
"Texture <class_ViewportTexture>` is ``1``, resulting in the planet texture "
"being drawn with slightly fainter colors and a ``Roughness`` value of ``1`` "
"everywhere. To correct this, we go into the :ref:`Viewport <class_Viewport>` "
"and enable the \"Transparent Bg\" property. Since we are now rendering one "
"transparent object on top of another, we want to enable "
"``blend_premul_alpha``:"
msgstr ""
"Vous remarquerez que très peu de changements, sauf que la planète ne reflète "
"plus le ciel. Cela se produit parce que, par défaut, quand quelque chose est "
"rendu avec une valeur alpha, il est dessiné comme un objet transparent sur "
"l'arrière-plan. Et comme l'arrière-plan par défaut de :ref:`Viewport "
"<class_Viewport>` est opaque, le canal ``alpha`` du :ref:`Viewport Texture "
"<class_ViewportTexture>` est ``1``, ce qui fait que la texture de la planète "
"est dessinée avec des couleurs légèrement plus faibles et une valeur de "
"``Roughness`` de ``1`` partout. Pour corriger cela, nous allons dans le :ref:"
"`Viewport <class_Viewport>` et activons la propriété \"Transparent Bg\". "
"Puisque nous rendons maintenant un objet transparent par-dessus un autre, "
"nous voulons activer ``blend_premul_alpha`` :"

msgid ""
"This pre-multiplies the colors by the ``alpha`` value and then blends them "
"correctly together. Typically, when blending one transparent color on top of "
"another, even if the background has an ``alpha`` of ``0`` (as it does in "
"this case), you end up with weird color bleed issues. Setting "
"``blend_premul_alpha`` fixes that."
msgstr ""
"Ceci pré-multiplie les couleurs par la valeur ``alpha`` et les mélange "
"ensuite correctement ensemble. Typiquement, en mélangeant une couleur "
"transparente sur une autre, même si le fond a un ``alpha`` de ``0`` (comme "
"c'est le cas ici), vous vous retrouvez avec d'étranges problèmes de "
"saignement de couleur. Le paramètre ``blend_premul_alpha`` corrige cela."

msgid ""
"Now the planet should look like it is reflecting light on the ocean but not "
"the land. If you haven't done so already, add an :ref:`OmniLight "
"<class_OmniLight>` to the scene so you can move it around and see the effect "
"of the reflections on the ocean."
msgstr ""
"Maintenant, la planète devrait avoir l'air de réfléchir la lumière sur "
"l'océan mais pas sur la terre. Si vous ne l'avez pas déjà fait, ajoutez un :"
"ref:`OmniLight <class_OmniLight>` à la scène pour pouvoir la déplacer et "
"voir l'effet des reflets sur l'océan."

msgid ""
"And there you have it. A procedural planet generated using a :ref:`Viewport "
"<class_Viewport>`."
msgstr ""
"Et voilà, vous l'avez. Une planète procédurale générée en utilisant un :ref:"
"`Viewport <class_Viewport>`."

msgid "Translation status"
msgstr "État de la traduction"
