# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom post-processing"
msgstr "Post-traitement personnalisé"

msgid "Introduction"
msgstr "Introduction"

msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. Sometimes you want to write your own custom effect. Here's "
"how you can do so."
msgstr ""
"Godot fournit de nombreux effets de post-traitement prêts à l'emploi, "
"notamment Bloom, DOF et SSAO. Parfois, vous voulez écrire votre propre effet "
"personnalisé. Voici comment vous pouvez le faire."

msgid ""
"Post-processing effects are shaders applied to a frame after Godot rendered "
"it. You first want to render your scene into a :ref:`Viewport "
"<class_Viewport>`, then render the ``Viewport`` inside a :ref:"
"`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""
"Les effets de post-traitement sont des shaders appliqués à une image après "
"que Godot l'ait rendue. Vous voulez d'abord rendre votre scène dans un :ref:"
"`Viewport <class_Viewport>`, puis rendre le ``Viewport`` dans un :ref:"
"`ViewportTexture <class_ViewportTexture>` et le montrer à l'écran."

msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""
"La façon la plus simple de mettre en œuvre un shader de post-traitement "
"personnalisé est d'utiliser la capacité intégrée de Godot à lire la texture "
"de l'écran. Si vous n'êtes pas familier avec cela, vous devriez lire le :ref:"
"`Screen Reading Shaders Tutorial <doc_screen-reading_shaders>` d'abord."

msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""
"Au moment où nous écrivons ces lignes, Godot ne supporte pas le rendu vers "
"plusieurs tampons en même temps. Votre shader de post-traitement n'aura pas "
"accès aux normales ou aux autres passes de rendu. Vous n'avez accès qu'à la "
"trame rendue."

msgid "Single pass post-processing"
msgstr "Monopasse post-traitement"

msgid ""
"You will need a ``Viewport`` to render your scene to, and a scene to render "
"your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer "
"<class_ViewportContainer>` to display your ``Viewport`` on the entire screen "
"or inside another :ref:`Control <class_Control>` node."
msgstr ""
"Vous aurez besoin d'un ``Viewport`` pour rendre votre scène, et d'une scène "
"pour rendre votre ``Viewport`` à l'écran. Vous pouvez utiliser un :ref:"
"`ViewportContainer <class_ViewportContainer>` pour afficher votre "
"``Viewport`` sur l'écran entier ou à l'intérieur d'un autre :ref:`Control "
"<class_Control>` nœud."

msgid ""
"Rendering using a ``Viewport`` gives you control over how the scene render, "
"including the framerate, and you can use the ``ViewportContainer`` to render "
"3D objects in a 2D scene."
msgstr ""
"Le rendu à l'aide d'un ``Viewport`` vous donne le contrôle sur la façon dont "
"la scène est rendue, y compris la fréquence d'images, et vous pouvez "
"utiliser le ``ViewportContainer`` pour rendre des objets 3D dans une scène "
"2D."

msgid ""
"For this demo, we will use a :ref:`Node2D <class_Node2D>` with a "
"``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should "
"look like this:"
msgstr ""
"Pour cette démo, nous allons utiliser un :ref:`Node2D <class_Node2D>` avec "
"un ``ViewportContainer`` et enfin un ``Viewport``. Votre onglet **Scene** "
"devrait ressembler à ça :"

msgid ""
"Inside the ``Viewport``, you can have whatever you want. This will contain "
"your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""
"A l'intérieur du ``Viewport``, vous pouvez avoir tout ce que vous voulez. "
"Ceci contiendra votre scène principale. Pour ce tutoriel, nous utiliserons "
"un champ de boites aléatoires :"

msgid ""
"Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the "
"``ViewportContainer``, and assign a new shader resource to it. You can "
"access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""
"Ajouter un nouveau :ref:`ShaderMaterial <class_ShaderMaterial>` au "
"``ViewportContainer``, et lui assigner une nouvelle ressource de shader. "
"Vous pouvez accéder à votre ``Viewport`` rendu avec la ``TEXTURE`` uniforme "
"intégré."

msgid ""
"You can choose not to use a ``ViewportContainer``, but if you do so, you "
"will need to create your own uniform in the shader and pass the ``Viewport`` "
"texture in manually, like so:"
msgstr ""
"Vous pouvez choisir de ne pas utiliser un ``ViewportContainer``, mais si "
"vous le faites, vous devrez créer votre propre uniforme dans le shader et "
"passer la texture ``Viewport`` manuellement, comme ça :"

msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr ""
"Et vous pouvez passer la texture dans le shader depuis GDScript comme ça :"

msgid ""
"Copy the following code to your shader. The above code is a single pass edge "
"detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_."
msgstr ""
"Copiez le code suivant sur votre shader. Le code ci-dessus est un filtre de "
"détection de bord à passe unique, un `Filtre Sobel <https://en.wikipedia.org/"
"wiki/Sobel_operator>`_."

msgid ""
"The Sobel filter reads pixels in a 9x9 grid around the current pixel and "
"adds them together, using weight. What makes it interesting is that it "
"assigns weights to each pixel; +1 for each of the eight around the center "
"and -8 for the center pixel. The choice of weights is called a \"kernel\". "
"You can use different kernels to create edge detection filters, outlines, "
"and all sorts of effects."
msgstr ""
"Le filtre Sobel lit les pixels dans une grille 9x9 autour du pixel courant "
"et les additionne en utilisant le poids. Ce qui le rend intéressant, c'est "
"qu'il attribue des poids à chaque pixel ; +1 pour chacun des huit autour du "
"centre et -8 pour le pixel central. Le choix des poids est appelé "
"\"kernel\". Vous pouvez utiliser différents kernels pour créer des filtres "
"de détection de bords, de contours et toutes sortes d'effets."

msgid "Multi-pass post-processing"
msgstr "Post-traitement multi-passe"

msgid ""
"Some post-processing effects like blur are resource intensive. If you break "
"them down in multiple passes however, you can make them run a lot faster. In "
"a multipass material, each pass takes the result from the previous pass as "
"an input and processes it."
msgstr ""
"Certains effets de post-traitement comme le flou sont gourmands en "
"ressources. Cependant, si vous les décomposez en plusieurs passes, vous "
"pouvez les faire éxecuter beaucoup plus vite. Dans un materiel en plusieurs "
"passes, chaque passe prend le résultat de la passe précédente comme entrée "
"et le traite."

msgid ""
"To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. "
"In the example above, you rendered the content of one ``Viewport`` object "
"into the root ``Viewport``, through a ``ViewportContainer`` node. You can do "
"the same thing for a multi-pass shader by rendering the content of one "
"``Viewport`` into another and then rendering the last ``Viewport`` into the "
"root ``Viewport``."
msgstr ""
"Pour faire un shader de post-traitement multi-passes, vous empilez des nœuds "
"``Viewport``. Dans l'exemple ci-dessus, vous avez rendu le contenu d'un "
"objet ``Viewport`` dans la racine ``Viewport``, par l'intermédiaire d'un "
"nœud ``ViewportContainer``. Vous pouvez faire la même chose pour un shader "
"multi-passes en rendant le contenu d'un ``Viewport`` dans un autre et "
"ensuite en rendant ce dernier ``Viewport`` dans le ``Viewport`` racine."

msgid "Your scene hierarchy will look something like this:"
msgstr "Votre hiérarchie de scène devrait ressembler à cela :"

msgid ""
"Godot will render the bottom ``Viewport`` node first. So if the order of the "
"passes matters for your shaders, make sure that you assign the shader you "
"want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""
"Godot rendra le nœud ``Viewport`` du bas en premier. Donc si l'ordre des "
"passes est important pour vos shaders, assurez-vous d'assigner le shader que "
"vous voulez appliquer en premier au ``ViewportContainer`` le plus bas dans "
"l'arbre."

msgid ""
"You can also render your Viewports separately without nesting them like "
"this. You just need to use two Viewports and to render them one after the "
"other."
msgstr ""
"Vous pouvez également rendre vos Viewports séparément sans les imbriquer "
"comme ceci. Il suffit d'utiliser deux Viewports et de les rendre l'un après "
"l'autre."

msgid ""
"Apart from the node structure, the steps are the same as with the single-"
"pass post-processing shader."
msgstr ""
"En dehors de la structure des nœuds, les étapes sont les mêmes que pour le "
"shader de post-traitement à un seul passage."

msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the :ref:"
"`ViewportContainers <class_ViewportContainer>`. The order in which you apply "
"the shaders does not matter:"
msgstr ""
"Par exemple, vous pouvez écrire un effet de flou gaussien plein écran en "
"attachant les morceaux de code suivants à chacun des :ref:"
"`ViewportContainers <class_ViewportContainer>`. L'ordre dans lequel vous "
"appliquez les shaders n'a pas d'importance :"

msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr ""
"En utilisant le code ci-dessus, vous devriez vous retrouver avec un effet de "
"flou plein écran comme ci-dessous."

msgid ""
"For more information on how ``Viewport`` nodes work, see the :ref:`Viewports "
"Tutorial <doc_viewports>`."
msgstr ""
"Pour plus d'informations sur le fonctionnement des nœuds ``Viewport``, voir "
"le :ref:`Tutoriel sur les Viewports <doc_viewports>`."

msgid "Translation status"
msgstr "État de la traduction"
