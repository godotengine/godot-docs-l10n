# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your first 2D shader"
msgstr "Votre premier shader 2D"

msgid "Introduction"
msgstr "Introduction"

msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""
"Les shaders sont des programmes spéciaux qui s'exécutent sur le GPU et sont "
"utilisés pour le rendu graphique. Tous les rendus modernes sont effectués "
"avec des shaders. Pour une description plus détaillée de ce que sont les "
"shaders, veuillez consulter :ref:`Que sont les shaders "
"<doc_introduction_to_shaders>`."

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"Ce tutoriel se concentre sur les aspects pratiques de l'écriture de "
"programmes de shaders en vous guidant à travers le processus d'écriture d'un "
"shader et ses fonctions de vertex et de fragment. Ce tutoriel s'adresse aux "
"débutants absolus en matière de shaders."

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"Si vous avez de l'expérience dans l'écriture de shaders et que vous cherchez "
"simplement un aperçu du fonctionnement des shaders dans Godot, consultez :"
"ref:`Shading Reference <toc-shading-reference>`."

msgid "Setup"
msgstr "Configuration"

msgid ""
":ref:`CanvasItem <doc_canvas_item_shader>` shaders are used to draw all 2D"
msgstr ""
":ref:`CanvasItem <doc_canvas_item_shader>` les shaders sont utilisés pour "
"dessiner tous les 2D"

msgid ""
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
"objets dans Godot, tandis que les shaders :ref:`Spatial "
"<doc_spatial_shader>` sont utilisés pour dessiner tous les objets 3D."

msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""
"Pour pouvoir utiliser un shader, il doit être rattaché à un :ref:`Material "
"<class_material>` qui lui doit être associé à un objet. Les matériaux sont "
"de type :ref:`Resource <doc_resources>`. Pour dessiner plusieurs objets avec "
"le même matériau, il doit être associé à chaque objet."

msgid ""
"All objects derived from a :ref:`CanvasItem <class_canvasitem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprites <class_sprite>`, :ref:`TileMaps <class_tilemap>`, :ref:"
"`MeshInstance2Ds <class_meshinstance2d>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""
"Tous les objets dérivés d'un :ref:`CanvasItem <class_canvasitem>` ont une "
"propriété matérielle. Cela inclut tous les éléments :ref:`GUI "
"<class_Control>`, :ref:`Sprites <class_sprite>`, :ref:`TileMaps "
"<class_tilemap>`, :ref:`MeshInstance2Ds <class_meshinstance2d>` etc. Ils ont "
"également la possibilité d'hériter du matériel de leurs parents. Cela peut "
"être utile si vous avez un grand nombre de nœuds pour lesquels vous "
"souhaitez utiliser le même matériau."

msgid ""
"To begin, create a Sprite node. You can use any CanvasItem, but for this "
"tutorial we will use a Sprite."
msgstr ""
"Pour commencer, créez un nœud Sprite. Vous pouvez utiliser n'importe quel "
"CanvasItem, mais pour ce tutoriel, nous utiliserons un Sprite."

msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"Icon.png\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""
"Dans l'inspecteur, cliquez à côté de \"Texture\" où il est indiqué "
"\"[empty]\" et sélectionnez \"Load\", puis \"Icon.png\". Pour les nouveaux "
"projets, c'est l'icône Godot. Vous devriez maintenant voir l'icône dans le "
"viewport."

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"Ensuite, regardez dans l'inspecteur, sous la section CanvasItem, cliquez à "
"côté de \"Material\" et sélectionnez \"New ShaderMaterial\". Cela crée une "
"nouvelle ressource matérielle. Cliquez sur la sphère qui apparaît. "
"Actuellement, Godot ne sait pas si vous écrivez un CanvasItem Shader ou un "
"Spatial Shader et il prédit la sortie de shaders spatiaux. Ce que vous voyez "
"est donc la sortie du Spatial Shader par défaut."

msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the new "
"shader resource and the shader editor will open. You are now ready to begin "
"writing your first shader."
msgstr ""
"Cliquez à côté de \"Shader\" et sélectionnez \"New Shader\". Enfin, cliquez "
"sur la nouvelle ressource de shaders et l'éditeur de shaders s'ouvrira. Vous "
"êtes maintenant prêt à commencer à écrire votre premier shader."

msgid "Your first CanvasItem shader"
msgstr "Votre premier shader de CanvasItem"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr ""
"Dans Godot, tous les shaders commencent par une ligne précisant de quel type "
"de shader il s'agit. Il utilise le format suivant :"

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""
"Comme nous écrivons un shader CanvasItem, nous spécifions ``canvas_item`` à "
"la première ligne. Tout notre code sera sous cette déclaration."

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr ""
"Cette ligne indique au moteur quelles variables et fonctionnalités intégrées "
"doivent vous être fournies."

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"Dans Godot, vous pouvez passer outre trois fonctions pour contrôler le "
"fonctionnement du shader : ``vertex``, ``fragment``, et ``light``. Ce "
"tutoriel vous guidera dans l'écriture d'un shader avec les fonctions vertex "
"et fragment. Les fonctions lumières sont beaucoup plus complexes que les "
"fonctions vertex et fragments et ne seront donc pas traitées ici."

msgid "Your first fragment function"
msgstr "Votre première fonction fragment"

msgid ""
"The fragment function runs for every pixel in a Sprite and determines what "
"color that pixel should be."
msgstr ""
"La fonction fragment s'exécute pour chaque pixel d'un Sprite et détermine la "
"couleur de ce pixel."

msgid ""
"They are restricted to the pixels covered by the Sprite, that means you "
"cannot use one to, for example, create an outline around a Sprite."
msgstr ""
"Ils sont limités aux pixels couverts par le Sprite, ce qui signifie que vous "
"ne pouvez pas en utiliser un pour, par exemple, créer un contour autour d'un "
"Sprite."

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr ""
"La fonction fragment la plus élémentaire ne fait rien d'autre qu'attribuer "
"une seule couleur à chaque pixel."

msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>` "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""
"Nous le faisons en écrivant un ``vec4`` dans la variable intégrée ``COLOR``. "
"``vec4`` est l'abréviation de construire un vecteur avec 4 nombres. Pour "
"plus d'informations sur les vecteurs, voir le tutoriel :ref:`Mathématique "
"vectorielle <doc_vector_math>` ``COLOR`` est à la fois une variable d'entrée "
"de la fonction fragment et la sortie finale de celle-ci."

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr ""
"Félicitations ! Vous avez fini. Vous avez réussi à écrire votre premier "
"shader dans Godot."

msgid "Now let's make things more complex."
msgstr "Maintenant, rendons les choses plus complexes."

msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""
"Il existe de nombreuses entrées pour la fonction fragment que vous pouvez "
"utiliser pour calculer ``COLOR``. ``UV`` est l'un d'entre eux. Les "
"coordonnées UV sont spécifiées dans votre Sprite (sans que vous le "
"sachiez !) et elles indiquent au shader où lire les textures pour chaque "
"partie du maillage."

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"Dans la fonction de fragment, vous ne pouvez lire qu'à partir de ``UV``, "
"mais vous pouvez l'utiliser dans d'autres fonctions ou pour attribuer des "
"valeurs à ``COLOR`` directement."

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "Le ``UV`` varie entre 0-1 de gauche à droite et de haut en bas."

msgid "Using ``TEXTURE`` built-in"
msgstr "Utilisation de ``TEXTURE`` intégrée"

msgid ""
"When you want to adjust a color in a Sprite you cannot just adjust the color "
"from the texture manually like in the code below."
msgstr ""
"Lorsque vous voulez ajuster une couleur dans un Sprite, vous ne pouvez pas "
"simplement ajuster la couleur à partir de la texture manuellement comme dans "
"le code ci-dessous."

msgid ""
"The default fragment function reads from a texture and displays it. When you "
"overwrite the default fragment function, you lose that functionality, so you "
"have to implement it yourself. You read from textures using the ``texture`` "
"function. Certain nodes, like Sprites, have a dedicated texture variable "
"that can be accessed in the shader using ``TEXTURE``. Use it together with "
"``UV`` and ``texture`` to draw the Sprite."
msgstr ""
"La fonction fragment par défaut lit à partir d'une texture et l'affiche. "
"Lorsque vous écrasez la fonction de fragment par défaut, vous perdez cette "
"fonctionnalité, vous devez donc l'implémenter vous-même. Vous lisez à partir "
"de textures en utilisant la fonction ``texture``. Certains nœuds, comme les "
"Sprites, ont une variable de texture dédiée qui peut être accessible dans le "
"shader en utilisant ``TEXTURE``. Utilisez-le avec ``UV`` et ``texture`` pour "
"dessiner le Sprite."

msgid "Uniform input"
msgstr "Entrée uniforme"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""
"Une entrée uniforme est utilisée pour faire passer les données dans un "
"shader qui sera le même dans tout le shader."

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr ""
"Vous pouvez utiliser des variables uniformes en les définissant en haut de "
"votre shader de cette manière :"

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr ""
"Pour plus d'informations sur l'utilisation, voir le document :ref:`Shading "
"Language doc <doc_shading_language>`."

msgid "Add a uniform to change the amount of blue in our Sprite."
msgstr ""
"Ajoutez une variable uniforme pour changer l'intensité du bleu dans notre "
"Sprite."

msgid ""
"Now you can change the amount of blue in the Sprite from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""
"Vous pouvez maintenant modifier la quantité de bleu dans le Sprite à partir "
"de l'éditeur. Retournez voir l'inspecteur sous l'endroit où vous avez créé "
"votre shader. Vous devriez voir une section intitulée \"Shader Param\". "
"Dépliez cette section et vous verrez la variable uniform que vous venez de "
"déclarer. Si vous modifiez la valeur dans l'éditeur, elle écrasera la valeur "
"par défaut que vous avez fournie dans le shader."

msgid "Interacting with shaders from code"
msgstr "Interagir avec les shaders à partir du code"

msgid ""
"You can change uniforms from code using the function ``set_shader_param()`` "
"which is called on the node's material resource. With a Sprite node, the "
"following code can be used to set the ``blue`` uniform."
msgstr ""
"Vous pouvez changer les variables uniformes du code en utilisant la fonction "
"``set_shader_param()`` qui est appelée sur la ressource matérielle du nœud. "
"Avec un nœud Sprite, le code suivant peut être utilisé pour définir la "
"variable uniforme ``blue``."

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"Notez que le nom de la variable uniforme est une chaîne de caractères. La "
"chaîne doit correspondre exactement à la façon dont elle est écrite dans le "
"shader, y compris l'orthographe et la casse."

msgid "Your first vertex function"
msgstr "Votre première fonction vertex"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr ""
"Maintenant que nous avons une fonction fragment, écrivons une fonction "
"vertex."

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr ""
"Utilisez la fonction vertex pour calculer où chaque vertex devrait se "
"trouver à l'écran."

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"La variable la plus importante dans la fonction de sommet est ``VERTEX``. Au "
"départ, il spécifie les coordonnées des sommets dans votre modèle, mais vous "
"y écrivez également pour déterminer où dessiner réellement ces sommets. "
"``VERTEX`` est un ``vec2`` qui est initialement présenté dans l'espace local "
"(c'est-à-dire non relatif à la caméra, viewport ou aux nœuds parents)."

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "Vous pouvez décaler les sommets en ajoutant directement à ``VERTEX``."

msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for simple "
"animation."
msgstr ""
"Combiné avec la variable intégrée ``TIME``, cela peut être utilisé pour une "
"animation simple."

msgid "Conclusion"
msgstr "Conclusion"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""
"Au fond, les shaders font ce que vous avez vu jusqu'à présent, ils calculent "
"``VERTEX`` et ``COLOR``. C'est à vous d'imaginer des stratégies "
"mathématiques plus complexes pour attribuer des valeurs à ces variables."

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
"Pour vous inspirer, jetez un coup d'œil à certains des tutoriels de shaders "
"les plus avancés, et consultez d'autres sites comme `Shadertoy <https://www."
"shadertoy.com/results?query=&sort=popular&from=10&num=4>`_ et `The Book of "
"Shaders <https://thebookofshaders.com>`_."

msgid "Translation status"
msgstr "État de la traduction"
