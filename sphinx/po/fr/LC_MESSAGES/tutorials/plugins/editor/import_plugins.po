# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Import plugins"
msgstr "Importer des plugins"

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""
"Ce tutoriel suppose que vous savez déjà comment créer des plugins "
"génériques. En cas de doute, reportez-vous à la page :ref:"
"`doc_making_plugins`. Cela suppose également que vous connaissiez le système "
"d'importation de Godot."

msgid "Introduction"
msgstr "Introduction"

msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, Ogg Vorbis "
"sounds, and many more."
msgstr ""
"Un plugin d'importation est un type spécial d'outil de l'éditeur qui permet "
"aux ressources personnalisées d'être importées par Godot et d'être traitées "
"comme des ressources de première classe. L'éditeur lui-même est fourni avec "
"de nombreux plugins d'importation pour gérer les ressources communes comme "
"les images PNG, les modèles Collada et glTF, les sons Ogg Vorbis, et bien "
"d'autres."

msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material. In this example it will contain the pure blue color "
"(zero red, zero green, and full blue):"
msgstr ""
"Ce tutoriel vous montrera comment créer un simple plugin d'importation pour "
"charger un fichier texte personnalisé comme ressource matériel. Ce fichier "
"texte contiendra trois valeurs numériques séparées par une virgule, qui "
"représentent les trois canaux d'une couleur, et la couleur résultante sera "
"utilisée comme albédo (couleur principale) du matériel importé. Dans cet "
"exemple, il contiendra la couleur bleue pure (zéro rouge, zéro vert et bleu "
"complet) :"

msgid "Configuration"
msgstr "Configuration"

msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""
"Tout d'abord, nous avons besoin d'un plugin générique qui va prendre en "
"charge l'initialisation et la destruction de notre plugin d'importation. "
"Ajoutons d'abord le fichier ``plugin.cfg`` :"

msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr ""
"Puis, nous avons besoin du fichier ``material_import.gd`` pour ajouter et "
"enlever le plugin d'importation quand nous en aurons besoin :"

msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""
"Quand ce plugin est activé, il va créer une nouvelle instance du plugin "
"d'importation (que nous allons bientôt faire) et l'ajouter à l'éditeur en "
"utilisant la méthode :ref:`add_import_plugin() "
"<class_EditorPlugin_method_add_import_plugin>`. Nous stockons une référence "
"à cette méthode dans un membre de classe ``import_plugin`` pour pouvoir y "
"faire référence plus tard lors de sa suppression. La méthode :ref:"
"`remove_import_plugin() <class_EditorPlugin_method_remove_import_plugin>` "
"est appelée quand le plugin est désactivé pour nettoyer la mémoire et "
"laisser l'éditeur savoir que le plugin d'importation n'est plus disponible."

msgid ""
"Note that the import plugin is a reference type, so it doesn't need to be "
"explicitly released from memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""
"Notez que le plugin d'importation est de type référence, il n'as donc pas "
"besoin d’être explicitement libéré de la mémoire en utilisant la fonction "
"``free()``. Il sera libéré automatiquement par le moteur."

msgid "The EditorImportPlugin class"
msgstr "La classe EditorImportPlugin"

msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible for implementing the methods "
"that are called by Godot when it needs to know how to deal with files."
msgstr ""
"Le personnage principal de ce spectacle est la classe :ref:"
"`EditorImportPlugin class <class_EditorImportPlugin>`. Elle est responsable "
"de l'implémentation des méthodes qui sont appelée par Godot quand il a "
"besoin de savoir comment gérer des fichiers."

msgid "Let's begin to code our plugin, one method at time:"
msgstr "Commençons a coder notre plugin, une méthode a la fois :"

msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name for your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""
"La première méthode est la :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. Il "
"s'agit d'un nom unique pour votre plugin qui est utilisé par Godot pour "
"savoir quelle importation a été utilisée dans un certain fichier. Lorsque "
"les fichiers doivent être réimportés, l'éditeur saura quel plugin appeler."

msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible for returning the name of the type it imports and it "
"will be shown to the user in the Import dock."
msgstr ""
"La méthode :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` est "
"chargée de renvoyer le nom du type importé et il sera affiché à "
"l'utilisateur dans le dock d'importation."

msgid ""
"You should choose this name as a continuation to \"Import as\", e.g. "
"*\"Import as Silly Material\"*. You can name it whatever you want but we "
"recommend a descriptive name for your plugin."
msgstr ""
"Vous devez choisir ce nom comme suite à \"Import as\", par exemple *\"Import "
"as Silly Material \"*. Vous pouvez lui donner le nom que vous voulez, mais "
"nous vous recommandons d'utiliser un nom descriptif pour votre plugin."

msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""
"Le système d'importation de Godot détecte les types de fichiers par leur "
"extension. Dans la méthode :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"vous retournez un tableau de chaînes de caractères pour représenter chaque "
"extension que ce plugin peut comprendre. Si une extension est reconnue par "
"plus d'un plugin, l'utilisateur peut choisir celui qu'il souhaite utiliser "
"lors de l'importation des fichiers."

msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""
"Des extensions fréquentes comme ``.json`` et ``.txt`` peuvent être utilisées "
"par plusieurs plugins. Il peut aussi y avoir des fichiers dans le projet qui "
"ne contiennent que des données pour le jeu et ne doivent pas être importés. "
"Il faut faire attention au moment de l’importation de valider les données, "
"et ne jamais compter sur le fait que le fichier soit bien formaté."

msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to declare what will be "
"used in the import."
msgstr ""
"Les fichiers importés sont enregistrés dans le dossier ``.import`` à la "
"racine du projet. Leur extension doit correspondre au type de ressource que "
"vous importez, mais comme Godot ne peut pas savoir ce que vous utiliserez "
"(car il peut y avoir plusieurs extensions valides pour la même ressource), "
"il faut déclarer ce qui sera utilisé pour l’importation."

msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""
"Puisqu’on importe un Material, nous allons utiliser une extension spéciale "
"pour ce type de ressource. Si vous importez une scène, vous pouvez utiliser "
"``scn``. Les ressources génériques peuvent utiliser l’extension ``res``. "
"Cependant, le moteur n’impose rien."

msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""
"La ressource importée a un type spécifique, pour que l’éditeur puisse savoir "
"à quel emplacement de propriété elle appartient. Cela permet de faire un "
"glisser-déposer depuis le dock Système de fichiers vers une propriété dans "
"l’Inspecteur."

msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr ""
"Dans notre cas c’est un :ref:`class_SpatialMaterial`, qui peut être appliqué "
"à des objets 3D."

msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""
"Si vous avez besoin d’importer différents types depuis la même extension, il "
"faudra créer plusieurs plugins d’importation. Vous pouvez abstraire le code "
"d’importation dans un autre fichier pour éviter la duplication."

msgid "Options and presets"
msgstr "Options et préréglages"

msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""
"Votre plugin peut offrir différentes options pour permettre à l’utilisateur "
"de contrôler la manière dont la ressource sera importée. Si un ensemble "
"d’options est courant, vous pouvez aussi créer des préréglages pour "
"simplifier la vie à l’utilisateur. L’image suivante montre comment les "
"options apparaîtront dans l’éditeur :"

msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""
"Puisqu’il peut y avoir de nombreux préréglages et qu’ils sont identifiés par "
"un nombre, il est de bonne pratique d’utiliser une énumération pour pouvoir "
"s’y référer en utilisant des noms."

msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr ""
"Maintenant que l’énumération est définie, revenons aux méthodes d’un plugin "
"d’importation :"

msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""
"La méthode :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` retourne le nombre de "
"préréglages définis par ce plugin. Il n’y a qu’un seul préréglage pour le "
"moment, mais on peut s’assurer que cette méthode marche encore à l’avenir en "
"retournant la taille de notre énumération ``Presets``."

msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""
"Nous avons ensuite la méthode :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>`, qui nomme les "
"préréglages tels qu’ils seront présentés à l’utilisateur, donc choisissez "
"des noms courts et clairs."

msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""
"On peut utiliser l’instruction ``match`` pour mieux structurer le code. Il "
"sera ainsi facile d’ajouter des nouveaux préréglages à l’avenir. On utilise "
"aussi le pattern joker pour toujours retourner quelque chose. Bien que Godot "
"ne demande pas de préréglages au-delà du nombre que vous avez défini, il "
"vaut toujours mieux être prudent."

msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""
"Si vous n’avez qu’un seul préréglage, vous pouvez simplement retourner "
"directement son nom, mais il faut dans ce cas faire attention quand vous "
"ajouterez d’autres préréglages."

msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""
"Voici la méthode qui définit les options disponibles. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"retourne un tableau de dictionnaires, et chaque dictionnaire contient "
"quelques clés qui sont testées pour personnaliser l’option affichée à "
"l’utilisateur. La table suivante montre les clés possible :"

msgid "Key"
msgstr "Clé"

msgid "Type"
msgstr "Type"

msgid "Description"
msgstr "Description"

msgid "``name``"
msgstr "``name``"

msgid "String"
msgstr "Chaîne de caractères"

msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr ""
"Le nom de l’option. À l’affichage, les tirets bas deviennent des espaces et "
"les premières lettres des mots sont passées en capitales."

msgid "``default_value``"
msgstr "``default_value``"

msgid "Any"
msgstr "N’importe"

msgid "The default value of the option for this preset."
msgstr "La valeur par défaut de l’option pour ce préréglage."

msgid "``property_hint``"
msgstr "``property_hint``"

msgid "Enum value"
msgstr "Valeur d’énumération"

msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""
"Une des valeurs de :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>`, à "
"utiliser pour comme indication."

msgid "``hint_string``"
msgstr "``hint_string``"

msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr ""
"Le texte d’indication de la propriété. Le même qu’on ajouterait à "
"l’instruction ``export`` en GDScript."

msgid "``usage``"
msgstr "``usage``"

msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""
"Une des valeurs de :ref:`PropertyUsageFlags "
"<enum_@GlobalScope_PropertyUsageFlags>` définissant l’usage."

msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr ""
"Les clés ``name`` et ``default_value`` sont **obligatoires**, les autres "
"sont optionnelles."

msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""
"Remarquez que la méthode ``get_import_options`` reçoit le numéro du "
"préréglage pour que vous puissiez configurer les options pour chaque "
"différent préréglage (en particulier la valeur par défaut). Dans cet exemple "
"on utilise l’instruction ``match``, mais s’il y a plein d’options et que les "
"préréglages ne changent que la valeur, il vaut mieux commencer par créer le "
"tableau d’option et le changer ensuite selon le préréglage."

msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""
"La méthode ``get_import_options`` est appelée même si vous ne définissez pas "
"de préréglages (en faisant en sorte que ``get_preset_count`` retourne zéro). "
"Il faut retourner un tableau, même vide, sans quoi il y aura des erreurs."

msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""
"Pour la méthode :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>`, nous retournons "
"simplement ``true`` car toutes nos options (c'est-à-dire celle que nous "
"avons définie) sont visibles en permanence."

msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""
"Si vous devez rendre certaines options visibles uniquement si une autre est "
"définie avec une certaine valeur, vous pouvez ajouter la logique dans cette "
"méthode."

msgid "The ``import`` method"
msgstr "La méthode ``import``"

msgid ""
"The heavy part of the process, responsible for converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""
"La partie la plus lourde du processus, responsable de la conversion des "
"fichiers en ressources, est couverte par la méthode :ref:`import() "
"<class_EditorImportPlugin_method_import>`. Notre exemple de code est un peu "
"long, alors séparons-le en quelques parties :"

msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""
"La première partie de notre méthode d'importation s'ouvre et lit le fichier "
"source. Nous utilisons la classe :ref:`File <class_File>` pour faire cela, "
"en passant le paramètre ``source_file`` qui est fourni par l'éditeur."

msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr ""
"S'il y a une erreur lors de l'ouverture du fichier, nous la retournons pour "
"faire savoir à l'éditeur que l'importation n'a pas réussi."

msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""
"Ce code prend la ligne du fichier qu'il a lu auparavant et la divise en "
"morceaux séparés par une virgule. S'il y a plus ou moins que les trois "
"valeurs, il considère le fichier comme non valide et signale une erreur."

msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""
"Ensuite, il crée une nouvelle variable :ref:`Color <class_Color>` et fixe "
"ses valeurs en fonction du fichier d'entrée. Si l'option ``use_red_anyway`` "
"est activée, alors elle définit la couleur comme un rouge pur à la place."

msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""
"Cette partie crée un nouveau :ref:`SpatialMaterial <class_SpatialMaterial>` "
"qui est la ressource importée. Nous en créons une nouvelle instance, puis "
"définissons sa couleur d'albédo comme la valeur que nous avons obtenue "
"auparavant."

msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""
"C'est la dernière partie et elle est assez importante, car ici nous "
"sauvegardons la ressource créée sur le disque. Le chemin du fichier "
"sauvegardé est généré et renseigné par l'éditeur via le paramètre "
"``save_path``. Notez que ce paramètre est fourni **sans** l'extension, donc "
"nous l'ajoutons en utilisant :ref:`string formatting <doc_gdscript_printf>`. "
"Pour cela, nous appelons la méthode ``get_save_extension`` que nous avons "
"définie précédemment, afin que nous puissions être sûrs qu'ils ne se "
"désynchroniseront pas."

msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""
"Nous renvoyons également le résultat de la méthode :ref:`ResourceSaver."
"save() <class_ResourceSaver_method_save>`, donc s'il y a une erreur dans "
"cette étape, l'éditeur en sera informé."

msgid "Platform variants and generated files"
msgstr "Variantes de plate-forme et fichiers générés"

msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""
"Vous avez peut-être remarqué que notre plugin a ignoré deux arguments de la "
"méthode ``import``. Ce sont des *arguments de retour* (d'où le ``r`` au "
"début de leur nom), ce qui signifie que l'éditeur les lira après avoir "
"appelé votre méthode d'importation. Les deux sont des tableaux que vous "
"pouvez remplir avec des informations."

msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""
"L'argument ``r_platform_variants`` est utilisé si vous avez besoin "
"d'importer la ressource différemment selon la plate-forme cible. Bien qu'il "
"soit appelé variantes de *plate-forme*, il est basé sur la présence de :ref:"
"`feature tags <doc_feature_tags>`, donc la même plateforme peut avoir "
"plusieurs variantes selon la configuration."

msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""
"Pour importer une variante de plate-forme, vous devez l'enregistrer avec la "
"balise de fonctionnalité avant l'extension, puis pousser la balise dans le "
"tableau ``r_platform_variants`` pour que l'éditeur sache que vous l'avez "
"fait."

msgid ""
"For example, let's say we save a different material for a mobile platform. "
"We would need to do something like the following:"
msgstr ""
"Par exemple, disons que nous enregistrons un matériau différent pour une "
"plate-forme mobile. Nous aurions besoin de faire quelque chose comme ceci :"

msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""
"L'argument ``r_gen_files`` est destiné aux fichiers supplémentaires qui sont "
"générés au cours de votre processus d'importation et doivent être conservés. "
"L'éditeur l'examinera pour comprendre les dépendances et s'assurer que le "
"fichier supplémentaire n'est pas supprimé par inadvertance."

msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""
"Il s'agit également d'un tableau et doit être rempli avec les chemins "
"d'accès complets des fichiers que vous enregistrez. À titre d'exemple, "
"créons un autre matériau pour la prochaine passe et enregistrons-le dans un "
"fichier différent :"

msgid "Trying the plugin"
msgstr "Essayer le plugin"

msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""
"Cela a été théorique, mais maintenant que le plugin d'importation est fait, "
"testons-le. Assurez-vous que vous avez créé le fichier d'exemple (avec le "
"contenu décrit dans la section d'introduction) et enregistrez-le sous le nom "
"``test.mtxt``. Ensuite, activez le plugin dans les Paramètres du projet."

msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""
"Si tout se passe bien, le plugin d'importation est ajouté à l'éditeur et le "
"système de fichiers est scanné, faisant apparaître la ressource "
"personnalisée sur le dock du système de fichiers. Si vous la sélectionnez et "
"focalisez le dock d'importation, vous pouvez voir la seule option à "
"sélectionner à cet endroit."

msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""
"Créez un nœud MeshInstance dans la scène et pour sa propriété Mesh, "
"configurez un nouveau SphereMesh. Dépliez la section Matériau dans "
"l'inspecteur, puis faites glisser le fichier du dock FileSystem vers la "
"propriété du matériau. L'objet sera mis à jour dans la fenêtre avec la "
"couleur bleue du matériau importé."

msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""
"Allez dans le dock d'importation, activez l'option \"Use Red Anyway\" et "
"cliquez sur \"Reimport\". Cela mettra à jour le matériel importé et devrait "
"automatiquement mettre à jour la vue montrant la couleur rouge à la place."

msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""
"Et c'est tout ! Votre premier plugin d'importation est terminé ! Faites "
"preuve de créativité et créez des plugins pour vos formats préférés. Cela "
"peut être très utile pour écrire vos données dans un format personnalisé "
"puis les utiliser dans Godot comme s'il s'agissait de ressources natives. "
"Cela montre à quel point le système d'importation est puissant et extensible."

msgid "Translation status"
msgstr "État de la traduction"
