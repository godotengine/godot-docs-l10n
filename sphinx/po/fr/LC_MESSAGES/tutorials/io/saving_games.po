# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Saving games"
msgstr "L'enregistrement des parties"

msgid "Introduction"
msgstr "Introduction"

msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""
"Sauvegarder peut être compliqué. Par exemple, il est probable de vouloir "
"stocker des informations de différents objets réparti dans différents "
"niveaux. Les systèmes avancés de sauvegarde devraient permettre de "
"sauvegarder des informations supplémentaires sur un nombre arbitraire "
"d'objets. Cela permet à la fonction de sauvegarde de s'adapter à l'évolution "
"en complexité du jeu."

msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""
"Si vous cherchez à sauvegarder la configuration utilisateur, vous pouvez "
"utiliser la classe :ref:`class_ConfigFile` dans ce but."

msgid "Identify persistent objects"
msgstr "Identifier des objets persistants"

msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""
"Tout d'abord, nous devons identifier les objets que nous voulons garder "
"entre les sessions de jeu et les informations que nous voulons garder de ces "
"objets. Pour ce tutoriel, nous utiliserons des groupes pour marquer et "
"manipuler les objets à sauvegarder, mais d'autres méthodes sont certainement "
"possibles."

msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. We "
"can do this through either the GUI or script. Let's add the relevant nodes "
"using the GUI:"
msgstr ""
"Nous allons commencer par ajouter les objets que nous souhaitons sauvegarder "
"au groupe \"Persist\". Nous pouvons le faire par le biais de l'interface "
"graphique ou de script. Ajoutons les nœuds pertinents en utilisant "
"l'interface graphique :"

msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""
"Une fois que c'est fait, quand nous avons besoin de sauvegarder le jeu, nous "
"pouvons obtenir tous les objets pour les sauvegarder et ensuite leur dire à "
"tous de sauvegarder avec ce script :"

msgid "Serializing"
msgstr "Sérialisation"

msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper "
"functions for this, such as :ref:`to_json() "
"<class_@GDScript_method_to_json>` and :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, so we will use a dictionary. Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""
"L'étape suivante consiste à sérialiser les données. Cela rend la lecture et "
"le stockage sur disque beaucoup plus faciles. Dans ce cas, nous supposons "
"que chaque membre du groupe Persist est un nœud instancié et a donc un "
"chemin. GDScript a des fonctions d'aide pour cela, comme :ref:`to_json() "
"<class_@GDScript_method_to_json>` et :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, donc nous allons utiliser un "
"dictionnaire. Notre nœud doit contenir une fonction de sauvegarde qui "
"renvoie ces données. La fonction de sauvegarde ressemblera à ceci :"

msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""
"Cela nous donne un dictionnaire avec le style ``{\"nom_variable\":"
"valeur_de_variable }``, qui sera utile lors du chargement."

msgid "Saving and reading data"
msgstr "Sauvegarde et lecture des données"

msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"so we can write to it or read from it. Now that we have a way to call our "
"groups and get their relevant data, let's use :ref:`to_json() "
"<class_@GDScript_method_to_json>` to convert it into an easily stored string "
"and store them in a file. Doing it this way ensures that each line is its "
"own object, so we have an easy way to pull the data out of the file as well."
msgstr ""
"Comme expliqué dans le tutoriel :ref:`doc_filesystem`, nous devons ouvrir un "
"fichier pour pouvoir y écrire ou y lire. Maintenant que nous avons un moyen "
"d'appeler nos groupes et d'obtenir leurs données pertinentes, utilisons :ref:"
"`to_json() <class_@GDScript_method_to_json>` pour les convertir en une "
"chaîne facilement stockable et les stocker dans un fichier. En procédant de "
"cette façon, on s'assure que chaque ligne est son propre objet, de sorte que "
"nous avons un moyen facile de sortir les données du fichier également."

msgid ""
"Game saved! Loading is fairly simple as well. For that, we'll read each "
"line, use parse_json() to read it back to a dict, and then iterate over the "
"dict to read our values. But we'll need to first create the object and we "
"can use the filename and parent values to achieve that. Here is our load "
"function:"
msgstr ""
"Jeu sauvegardé ! Le chargement est également assez simple. Pour cela, nous "
"allons lire chaque ligne, utiliser parse_json() pour la reconvertir dans un "
"dict, et ensuite itérer dans le dict pour lire nos valeurs. Mais nous devons "
"d'abord créer l'objet et nous pouvons utiliser le nom du fichier et les "
"valeurs parentales pour y parvenir. Voici notre fonction de chargement :"

msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""
"Nous pouvons maintenant sauvegarder et charger un nombre arbitraire d'objets "
"disposés presque partout dans l'arbre de scène ! Chaque objet peut stocker "
"des données différentes en fonction de ce qu'il doit sauvegarder."

msgid "Some notes"
msgstr "Quelques notes"

msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""
"Nous avons passé sous silence la mise en place de l'état du jeu pour le "
"chargement. C'est finalement au créateur du projet qu'il revient de décider "
"où va une grande partie de cette logique. C'est souvent compliqué et devra "
"être fortement personnalisé en fonction des besoins du projet."

msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""
"De plus, notre implémentation suppose qu'aucun objet Persist n'est l'enfant "
"d'un autre objet Persist. Sinon, des chemins invalides seraient créés. Pour "
"prendre en compte les objets Persistants imbriqués, envisagez de sauvegarder "
"les objets par étapes. Chargez d'abord les objets parents pour qu'ils soient "
"disponibles pour l'appel :ref:`add_child() <class_node_method_add_child>` "
"quand les objets enfants sont chargés. Vous aurez aussi besoin d'un moyen de "
"lier les enfants aux parents car le :ref:`NodePath <class_nodepath>` sera "
"probablement invalide."

msgid "Translation status"
msgstr "État de la traduction"
