# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "Utilisation du ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""
"Ce tutoriel présente les bases de l'utilisation d'un :ref:`ArrayMesh "
"<class_arraymesh>`."

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""
"Pour ce faire, nous utiliserons la fonction :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, qui prend jusqu'à quatre "
"paramètres. Les deux premiers sont obligatoires, tandis que les deux autres "
"sont facultatifs."

#, fuzzy
msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"Le premier est le ``PrimitiveType``, c'est un concept OpenGL qui indique au "
"GPU comment arranger la primitive en fonction des sommets donnés, qu'il "
"s'agisse de triangles, de lignes, de points, etc. Une liste complète peut "
"être trouvée sur la page de référence de la classe :ref:`Mesh <class_mesh>`."

#, fuzzy
msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Pool**Array`` (e.g. PoolVector3Array, "
"PoolIntArray, etc.) for each type of information that will be used to build "
"the surface."
msgstr ""
"Le second est le Array réel qui stocke les informations sur le maillage. Le "
"array est un array de Godot normal qui est construit avec des crochets vides "
"``[]``. Il stocke un ``Pool**Array`` (par exemple PoolVector3Array, "
"PoolIntArray, etc.) pour chaque type d'information."

msgid ""
"The possible elements of ``arrays`` are listed below, together with the "
"position they must have within ``arrays``. See also :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>`."
msgstr ""
"Les éléments possibles de ``arrays`` sont listés ci-dessous, avec la "
"position qu'ils doivent avoir dans ``arrays``. Voir aussi :ref:`Mesh."
"ArrayType <enum_Mesh_ArrayType>`."

msgid "Index"
msgstr "Index"

msgid "Mesh.ArrayType Enum"
msgstr "Mesh.ArrayType Enum"

#, fuzzy
msgid "Array type"
msgstr "Modèle de tableau"

msgid "0"
msgstr "0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>` or :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>` ou :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"

msgid "1"
msgstr "1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

#, fuzzy
msgid ":ref:`PoolVector3Array <class_PoolVector3Array>`"
msgstr "25 : :ref:`PoolVector3Array<class_poolvector3array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

#, fuzzy
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. First 3 "
"floats determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""
"``ARRAY_TANGENT`` = 2 | PoolRealArray de groupes de 4 flottants. Les 3 "
"premiers flottants déterminent la tangente, et le dernier la direction "
"binormale comme -1 ou 1."

msgid "3"
msgstr "3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

#, fuzzy
msgid ":ref:`PoolColorArray <class_PoolColorArray>`"
msgstr "26 : :ref:`PoolColorArray<class_poolcolorarray>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>` or :ref:`PoolVector3Array "
"<class_PoolVector3Array>`"
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>` ou :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "6"
msgstr "6"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

#, fuzzy
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats or :ref:"
"`PoolIntArray <class_PoolIntArray>` of groups of 4 ints. Each group lists "
"indexes of 4 bones that affects a given vertex."
msgstr ""
"``ARRAY_BONES`` = 6 | Un PoolRealArray de groupes de 4 flottants ou un "
"PoolIntArray de groupes de 4 entiers. Chaque groupe liste les indices des 4 "
"os qui affectent un sommet donné."

msgid "7"
msgstr "7"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

#, fuzzy
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. Each float "
"lists the amount of weight an determined bone on ``ARRAY_BONES`` has on a "
"given vertex."
msgstr ""
"``ARRAY_WEIGHTS`` = 7 | PoolRealArray de groupes de 4 flottants. Chaque "
"flottant liste la quantité de poids qu'un os déterminé dans ``ARRAY_BONES`` "
"a pour un sommet donné."

msgid "8"
msgstr "8"

#, fuzzy
msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX`` = 8 | PoolIntArray"

#, fuzzy
msgid ":ref:`PoolIntArray <class_PoolIntArray>`"
msgstr "21 : :ref:`PoolIntArray<class_poolintarray>`"

#, fuzzy
msgid ""
"The array of vertices (at index 0) is always required. The index array is "
"optional and will only be used if included. We won't use it in this tutorial."
msgstr ""
"L'Array des sommets est toujours requis. Tous les autres sont facultatifs et "
"ne seront utilisés que s'ils sont inclus."

msgid ""
"All the other arrays carry information about the vertices. They are also "
"optional and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""
"Tous les autres tableaux transportent des informations à propos des sommets. "
"Ils sont aussi optionnels et seront uniquement utilisés s'ils sont inclus. "
"Certains de ces tableaux (ex. ``ARRAY_COLOR``) utilisent une entrée par "
"sommet afin de fournir des informations supplémentaires sur les sommets. Ils "
"doivent avoir la même taille que le tableau des sommets. Les autres tableaux "
"(ex. ``ARRAY_TANGENT``) utilisent quatre entrées pour décrire un seul "
"sommet. Ceux-ci doivent être exactement quatre fois plus grand que le "
"tableau de sommets."

#, fuzzy
msgid ""
"For normal usage, the last two parameters in :ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` are typically left empty."
msgstr ""
"Pour ce faire, nous utiliserons la fonction :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, qui prend jusqu'à quatre "
"paramètres. Les deux premiers sont obligatoires, tandis que les deux autres "
"sont facultatifs."

msgid "ArrayMesh"
msgstr "ArrayMesh"

#, fuzzy
msgid ""
"In the editor, create a :ref:`MeshInstance <class_meshinstance>` and add an :"
"ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, adding "
"an ArrayMesh in the editor is not useful, but in this case it allows us to "
"access the ArrayMesh from code without creating one."
msgstr ""
"Ajoutez un :ref:`ArrayMesh <class_arraymesh>` à une MeshInstance. "
"Normalement, l'ajout d'un ArrayMesh dans l'éditeur n'est pas utile, mais "
"dans ce cas il permet d'accéder au ArrayMesh à partir du code sans en créer "
"un."

msgid "Next, add a script to the MeshInstance."
msgstr "Ensuite, ajoutez un script au MeshInstance."

msgid "Under ``_ready()``, create a new Array."
msgstr "Sous ``_ready()``, créez un nouvel Array."

#, fuzzy
msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"Ce sera l'array dans lequel nous conserverons nos informations de surface, "
"il contiendra tous les arrays de données dont la surface a besoin. Godot "
"s'attendra à ce qu'il soit de la taille ``Mesh.ARRAY_MAX``, alors "
"redimensionnez-le en conséquence."

msgid "Next create the arrays for each data type you will use."
msgstr ""
"Créez ensuite les arrays pour chaque type de données que vous utiliserez."

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"Une fois que vous avez rempli vos arrays de données avec votre géométrie, "
"vous pouvez créer un maillage en ajoutant chaque array à ``surface_array``, "
"puis en validant le maillage."

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"Dans cet exemple, nous avons utilisé ``Mesh.PRIMITIVE_TRIANGLES``, mais vous "
"pouvez utiliser n'importe quel type primitif disponible à partir de mesh."

#, fuzzy
msgid "Put together, the full code looks like:"
msgstr "Le code complet ressemble à ceci :"

#, fuzzy
msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"Le code qui va au milieu peut être ce que vous voulez. Ci-dessous, nous "
"présenterons un exemple de code qui pourrait aller au milieu."

msgid "Generating geometry"
msgstr "Génération de la géométrie"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"Voici un exemple de code pour générer une sphère. Bien que le code soit "
"présenté en GDScript, il n'y a rien de spécifique à Godot dans l'approche de "
"sa génération. Cette implémentation n'a rien de particulier à voir avec "
"ArrayMeshes et n'est qu'une approche générique pour générer une sphère. Si "
"vous avez du mal à comprendre ou si vous souhaitez en savoir plus sur la "
"géométrie procédurale en général, vous pouvez utiliser n'importe quel "
"tutoriel que vous trouverez en ligne."

msgid "Saving"
msgstr "Enregistrer"

#, fuzzy
msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"Enfin, Godot fournit une méthode unique pour enregistrer ArrayMeshes en "
"utilisant la classe :ref:`ResourceSaver <class_resourcesaver>`. Ceci est "
"utile lorsque vous souhaitez générer un maillage, puis l'utiliser plus tard "
"sans avoir à générer de nouveau."

msgid "Translation status"
msgstr "État de la traduction"
