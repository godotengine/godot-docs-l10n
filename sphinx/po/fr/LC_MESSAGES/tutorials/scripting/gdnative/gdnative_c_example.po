# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDNative C example"
msgstr "Exemple de GDNative en C"

msgid "Introduction"
msgstr "Introduction"

msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""
"Ce tutoriel vous présentera le strict minimum requis pour créer des modules "
"GDNative. Ceci devrait être votre point de départ dans le monde de GDNative. "
"Comprendre le contenu de ce tutoriel vous aidera à comprendre tout ce qui va "
"suivre."

msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."
msgstr ""
"Avant de commencer, vous pouvez télécharger le code source de l'objet "
"exemple décrit ci-dessous dans le `dépôt GDNative-demos <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."

msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""
"Cet exemple de projet contient également un fichier SConstruct qui rend la "
"compilation un peu plus facile, mais dans ce tutoriel nous allons faire les "
"choses à la main pour comprendre le processus."

msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""
":ref:`GDNative <class_GDNative>` peut être utilisé pour créer plusieurs "
"types d'ajouts à Godot, en utilisant des interfaces telles que :ref:"
"`PluginScript <class_PluginScript>` ou :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative <RevrinterfaceGDNative>`. Dans ce tutoriel, "
"nous allons voir comment créer un module :ref:`NativeScript "
"<class_NativeScript>`. NativeScript vous permet d'écrire la logique en C ou "
"C++ de la même manière que vous écrivez un fichier GDScript. Nous allons "
"créer l'équivalent en C de ce GDScript :"

msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""
"Les prochains tutoriels se concentreront sur les autres types de modules "
"GDNative et expliqueront quand et comment les utiliser."

msgid "Prerequisites"
msgstr "Prérequis"

msgid "Before we start you'll need a few things:"
msgstr "Voici les prérequis nécessaires :"

msgid "A Godot executable for your target version."
msgstr "Un exécutable Godot pour votre version cible."

msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""
"Un compilateur C. Sur Linux, installez ``gcc`` ou ``clang`` depuis votre "
"gestionnaire de paquets. Sur macOS, vous pouvez installer Xcode depuis le "
"Mac App Store. Sur Windows, vous pouvez utiliser Visual Studio 2015 (ou plus "
"récent) ou MinGW-w64."

msgid ""
"A Git clone of the `godot-headers repository <https://github.com/godotengine/"
"godot-headers.git>`_: these are the C headers for Godot's public API exposed "
"to GDNative."
msgstr ""
"Un clone Git du `dépôt godot_headers <https://github.com/godotengine/godot-"
"headers.git>`_ : ce sont les en-têtes C de l'API publique de Godot exposée à "
"GDNative."

msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""
"Pour le dépôt des headers, il est suggéré de créer un dossier dédié pour cet "
"exemple de projet GDNative. Ouvrez un terminal dans ce dossier et exécuter :"

msgid "This will download the required files into that folder."
msgstr ""
"Cette commande va télécharger les fichiers nécessaires dans le dossier."

msgid ""
"If you plan to use Git for your GDNative project, you can also add ``godot-"
"headers`` as a Git submodule."
msgstr ""
"Si vous prévoyez d'utiliser Git pour votre projet GDNative, vous pouvez "
"également ajouter ``godot-headers`` comme sous-module Git."

#, fuzzy
msgid ""
"The ``godot-headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.4``) and ideally actual release (e.g. ``3.4.4-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""
"Le dépôt ``godot_headers`` a plusieurs branches. Puisque Godot évolue, "
"GDNative en fait de même. Bien que nous essayons de préserver le "
"compatibilité entre les versions, vous devez toujours générer votre module "
"GDNative avec les entête qui correspondent à la branche stable de Godot (par "
"exemple ``3.1``) et idéalement la version actuellement en release que vous "
"utilisez (par exemple ``3.1.1-stable``). Les modules GDNative générés avec "
"des versions plus vieilles que les entêtes Godot *peuvent* fonctionner avec "
"les nouvelles version du moteur, l'inverse est faux."

msgid ""
"The ``master`` branch of the ``godot-headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""
"La branche ``master`` du dépôt ``godot_headers`` est en phase avec la "
"branche ``master`` de Godot et de ce fait contient la classe GDNative et les "
"définitions de structure qui fonctionneront avec le dernier code compilé en "
"développement."

#, fuzzy
msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot-headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.4.4-stable`` tag for "
"use with Godot 3.4.4. In your cloned repository, you can do:"
msgstr ""
"Si vous voulez écrire un module GDNative pour une version stable de Godot, "
"regardez les balises Git disponibles (avec ``git tags``) pour celle qui "
"correspond à votre version du moteur. Dans le dépôt ``godot_headers``, ces "
"balises sont préfixées par ``godot-``, vous pouvez donc par exemple extraire "
"la balise ``godot-3.1.1-stable`` pour l'utiliser avec Godot 3.1.1. Dans "
"votre dépôt cloné, vous pouvez faire :"

#, fuzzy
msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.4``), which you would also "
"check out with ``git checkout 3.4``."
msgstr ""
"Si, pour une raison quelconque, un tag de la version stable est manquant, "
"vous pouvez vous rapatrier sur la branche stable correspondante (disons "
"``3.1``) sur laquelle vous pouvez vous rendre avec ``git checkout 3.1``."

msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""
"Si vous compilez Godot depuis les source avec des changements qui impactent "
"GDNative, vous pouvez trouver la classe mise à jour et la définition de "
"structure dans ``<godotsource>/modules/gdnative/include``"

msgid "Our C source"
msgstr "Nos sources en C"

msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""
"Commençons par écrire notre code principal. Nous voulons finir par obtenir "
"une structure de fichier qui ressemble à cela :"

msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot-headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""
"Ouvrez Godot et créez un nouveau projet appelé \"simple\" à côté de votre "
"clone Git ``godot_headers``. Cela créera le dossier ``simple`` et le fichier "
"``project.godot``. Ensuite, créez manuellement un dossier ``src`` à côté du "
"dossier ``simple``, et un sous-dossier ``bin`` dans le dossier ``simple``."

msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""
"Nous allons commencer par examiner le contenu de notre fichier ``simple.c``. "
"Maintenant, pour notre exemple ici, nous faisons un seul fichier source C "
"sans en-tête pour garder les choses simples. Une fois que vous commencez à "
"écrire des projets plus importants, il est conseillé de diviser votre projet "
"en plusieurs fichiers. Cela n'entre cependant pas dans le cadre de ce "
"tutoriel."

msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""
"Nous allons examiner le code source petit à petit, de sorte que toutes les "
"parties ci-dessous devraient être réunies dans un seul gros fichier. Chaque "
"section sera expliquée au fur et à mesure que nous l'ajouterons."

msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""
"Le code ci-dessus comprend l'en-tête de structure API GDNative et l'en-tête "
"standard que nous utiliserons plus bas pour les opérations sur les chaînes "
"de caractères. Il définit ensuite deux pointeurs vers deux structures "
"différentes. GDNative supporte une large collection de fonctions pour "
"rappeler l'exécutable principal de Godot. Pour que votre module puisse avoir "
"accès à ces fonctions, GDNative fournit à votre application une structure "
"contenant des pointeurs vers toutes ces fonctions."

msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""
"Pour garder cette implémentation modulaire et facilement extensible, les "
"fonctions de base sont disponibles directement via la structure API "
"\"core\", mais les fonctions supplémentaires ont leurs propres \"structures "
"GDNative\" qui sont accessibles via des extensions."

msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""
"Dans notre exemple, nous accédons à l'une de ces extensions pour accéder aux "
"fonctions spécifiquement nécessaires à NativeScript."

msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""
"Un NativeScript se comporte comme n'importe quel autre script de Godot. "
"Étant donné que l'API NativeScript est plutôt de bas niveau, elle nécessite "
"que la bibliothèque spécifie beaucoup de choses plus verbalement que "
"d'autres systèmes de script, tels que GDScript. Lorsqu'une instance "
"NativeScript est créée, un constructeur donné par la bibliothèque est "
"appelé. Lorsque cette instance sera détruite, le destructeur donné sera "
"exécuté."

msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""
"Ce sont des déclarations avancées pour les fonctions que nous implémenterons "
"pour notre objet. Un constructeur et un destructeur sont nécessaires. De "
"plus, l'objet aura une seule méthode appelée ``get_data``."

msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""
"Ensuite, le premier des points d'entrée que Godot appellera lorsque notre "
"bibliothèque dynamique sera chargée. Ces méthodes sont toutes préfixées par "
"``godot_`` (vous pouvez le changer plus tard) suivi de leur nom. "
"``gdnative_init`` est une fonction qui initialise notre bibliothèque "
"dynamique. Godot lui donnera un pointeur vers une structure qui contient "
"divers morceaux d'informations que nous pouvons trouver utiles parmi "
"lesquels les pointeurs vers nos structures API."

msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""
"Pour toute structure API supplémentaire, nous devons passer en boucle dans "
"notre tableau d'extensions et vérifier le type d'extension."

msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""
"La prochaine étape est ``gdnative_terminate`` qui est appelée avant que la "
"bibliothèque ne soit libérée. Godot libérera la bibliothèque lorsqu'aucun "
"objet ne l'utilisera plus. Ici, vous pouvez faire tout le nettoyage "
"nécessaire. Pour notre exemple, nous allons simplement nettoyer nos "
"pointeurs d'API."

msgid ""
"Finally, we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""
"Enfin, nous avons la fonction ``nativescript_init`` qui est la plus "
"importante dont nous aurons besoin aujourd'hui. Cette fonction sera appelée "
"par Godot dans le cadre du chargement d'une bibliothèque GDNative et "
"communique en retour au moteur les objets que nous mettons à disposition."

msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""
"Nous indiquons d'abord au moteur quelles classes sont implémentées en "
"appelant ``nativescript_register_class``. Le premier paramètre ici est le "
"pointeur handle qui nous est donné. Le second est le nom de notre classe "
"d'objets. Le troisième est le type d'objet de Godot dont nous 'héritons' ; "
"ce n'est pas un véritable héritage mais c'est assez proche. Enfin, nos "
"quatrième et cinquième paramètres sont des descriptions de notre "
"constructeur et destructeur."

msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot-headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""
"Nous informons ensuite Godot de nos méthodes (enfin notre seule méthode dans "
"ce cas), en appelant ``nativescript_register_method`` pour chaque méthode de "
"notre classe. Dans notre cas, c'est juste ``get_data``. Notre premier "
"paramètre est encore une fois notre pointeur handle. Le second est à nouveau "
"le nom de la classe d'objets que nous enregistrons. Le troisième est le nom "
"de notre fonction tel qu'elle sera connu de GDScript. Le quatrième est notre "
"réglage d'attributs (voir l'énumération ``godot_method_rpc_mode`` dans "
"``godot_headers / nativescript / godot_nativescript.h`` pour les valeurs "
"possibles). Le cinquième et dernier paramètre est une description de la "
"fonction à appeler lorsque la méthode est appelée."

msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""
"La structure de description ``instance_method`` contient le pointeur de "
"fonction vers la fonction elle-même comme premier champ. Les deux autres "
"champs de ces structures servent à spécifier les données utilisateur par "
"méthode. Le second est le champ ``method_data`` qui est transmis à chaque "
"appel de fonction comme argument ``p_method_data``. Ceci est utile pour "
"réutiliser une fonction pour différentes méthodes sur éventuellement "
"plusieurs classes de script différentes. Si la valeur ``method_data`` est un "
"pointeur vers une mémoire qui doit être libérée, le troisième champ "
"``free_func`` peut contenir un pointeur vers une fonction qui libérera cette "
"mémoire. Cette fonction libérer est appelée lorsque le script lui-même (pas "
"l'instance !) est libéré (donc généralement au moment de la libération de la "
"bibliothèque)."

msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""
"Maintenant, il est temps de commencer à travailler sur les fonctions de "
"notre objet. Tout d'abord, nous définissons une structure que nous utilisons "
"pour stocker les données des membres d'une instance de notre classe GDNative."

msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""
"Et puis, nous définissons notre constructeur. Tout ce que nous faisons dans "
"notre constructeur est d'allouer de la mémoire pour notre structure et de la "
"remplir avec des données. Notez que nous utilisons les fonctions de mémoire "
"de Godot pour que la mémoire soit suivie, puis nous renvoyons le pointeur "
"vers notre nouvelle structure. Ce pointeur agira comme notre identifiant "
"d'instance au cas où plusieurs objets seraient instanciés."

msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""
"Ce pointeur sera passé à l'une de nos fonctions liées à notre objet sous la "
"forme d'un paramètre appelé ``p_user_data``, et peut être utilisé à la fois "
"pour identifier notre instance et pour accéder aux données de ses membres."

msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""
"Notre destructeur est appelé lorsque Godot a fini avec notre objet et que "
"nous libérons les données des membres de nos instances."

msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""
"Et enfin, nous implémentons notre fonction ``get_data``. Les données sont "
"toujours envoyées et renvoyées sous forme de variants. Afin de renvoyer nos "
"données, qui sont une string, nous devons d'abord convertir notre string C "
"en un objet string Godot, puis copier cet objet string dans le variant que "
"nous renvoyons."

msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""
"Les Strings sont allouées en tas dans Godot, ils ont donc un destructeur qui "
"libère la mémoire. Les destructeurs sont nommés ``godot_TYPENAME_destroy``. "
"Lorsqu'un variant est créé avec un String, il référence le String. Cela "
"signifie que la chaîne d'origine peut être \"détruite\" pour diminuer le "
"nombre de références. Si cela ne se produit pas, la mémoire du String fuira "
"car le décompte ne sera jamais nul et la mémoire ne sera jamais désallouée. "
"Le variant retournée est automatiquement détruit par Godot."

msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""
"Dans les opérations plus complexes, il peut être difficile de savoir quelle "
"valeur doit être désallouée et quelle valeur ne doit pas l'être. En règle "
"générale : appelez ``godot_TYPENAME_destroy`` quand un destructeur C++ "
"serait appelé à la place. Le destructeur de String serait appelé en C++ "
"après la création du Variant, il est donc nécessaire de faire de même en C."

msgid "The variant we return is destroyed automatically by Godot."
msgstr "Le variant que nous renvoyons est détruit automatiquement par Godot."

msgid "And that is the whole source code of our module."
msgstr "Et c'est tout le code source de notre module."

msgid "Compiling"
msgstr "Compilation"

msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""
"Nous devons maintenant compiler notre code source. Comme mentionné, notre "
"exemple de projet sur GitHub contient une configuration SCons qui fait tout "
"le travail pour vous, mais pour notre tutoriel ici, nous allons appeler "
"directement les compilateurs."

msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""
"En supposant que vous vous en tenez à la structure de dossiers suggérée ci-"
"dessus, il est préférable d'ouvrir une session de terminal dans le dossier "
"``src`` et d'exécuter les commandes à partir de là. Assurez-vous de créer le "
"dossier ``bin`` avant de continuer."

msgid "On Linux:"
msgstr "Sur Linux :"

msgid "On macOS:"
msgstr "Sur macOS :"

msgid "On Windows:"
msgstr "Sur Windows :"

msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""
"Sur la version Windows, vous vous retrouvez également avec une bibliothèque "
"``libsimple.lib``. Il s'agit d'une bibliothèque que vous pouvez compiler "
"dans un projet pour fournir l'accès à DLL. Nous l'obtenons en tant que sous-"
"produit et nous n'en avons pas besoin :) Lors de l'exportation de votre jeu "
"pour publication, ce fichier sera ignoré."

msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr "Création du fichier GDNativeLibrary (``.gdnlib``)"

msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""
"Avec notre module compilé, nous devons maintenant créer une ressource "
"correspondante :ref:`GDNativeLibrary <class_GDNativeLibrary>` avec "
"l'extension ``.gdnlib`` que nous plaçons à côté de nos bibliothèques "
"dynamiques. Ce fichier indique à Godot quelles bibliothèques dynamiques font "
"partie de notre module et doivent être chargées par plate-forme."

msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr ""
"Nous pouvons utiliser Godot pour générer ce fichier, alors ouvrez le projet "
"\"simple\" dans l'éditeur."

msgid "Start by clicking the create resource button in the Inspector:"
msgstr ""
"Commencez par cliquer sur le bouton pour créer une ressource dans "
"l'inspecteur :"

msgid "And select ``GDNativeLibrary``:"
msgstr "Et sélectionnez ``GDNativeLibrary`` :"

msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""
"Vous devriez voir apparaître un éditeur contextuel dans le panneau "
"inférieur. Utilisez le bouton \"Développer le panneau inférieur\" en bas à "
"droite pour le développer à pleine hauteur :"

msgid "General properties"
msgstr "Propriétés générales"

msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr ""
"Dans l'inspecteur, vous avez plusieurs propriétés pour contrôler le "
"chargement de la bibliothèque."

msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""
"Si *Load Once* est activé, notre bibliothèque est chargé une seule fois et "
"chaque script qui utilise notre bibliothèque utilisera les mêmes données. "
"Toute variable que vous définissez globalement sera accessible depuis "
"n'importe quelle instance de votre objet que vous créez. Si *Load Once* est "
"désactivé, une nouvelle copie de la bibliothèque est chargée en mémoire "
"chaque fois qu'un script accède à la bibliothèque."

msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""
"Si *Singleton* est activé, notre bibliothèque est automatiquement chargée et "
"une fonction nommée ``godot_gdnative_singleton`` est appelée. Laissons cela "
"pour un autre tutoriel."

msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""
"Le *Symbol Prefix* est un préfixe pour nos fonctions core, comme par exemple "
"``godot_`` dans ``godot_nativescript_init`` vu plus tôt. Si vous utilisez "
"plusieurs bibliothèques GDNative que vous souhaitez lier statiquement, vous "
"devrez utiliser des préfixes différents. Il s'agit encore une fois d'un "
"sujet à approfondir dans un tutoriel séparé, il n'est nécessaire pour le "
"moment que pour le déploiement sur iOS car cette plateforme n'aime pas les "
"bibliothèques dynamiques."

msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""
"*Reloadable* définit si la bibliothèque doit être rechargée lorsque "
"l'éditeur perd et gagne le focus, typiquement pour récupérer des symboles "
"nouveaux ou modifiés par toute modification externe de la bibliothèque."

msgid "Platform libraries"
msgstr "Bibliothèques de plate-forme"

msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""
"L'éditeur de GDNativeLibrary vous permet de configurer deux choses pour "
"chaque plate-forme et architecture que vous souhaitez supporter."

msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""
"La colonne *Bibliothèque dynamique* (section ``entry`` dans le fichier "
"sauvegardé) nous indique pour chaque combinaison de pate-forme et "
"fonctionnalité, la bibliothèque dynamique devant être chargée. Cela informe "
"également l'exportateur de quels fichier doivent être exportés lors de "
"l'exportation vers une plate-forme spécifique."

msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""
"La colonne *Dépendances* (ou la section ``dependencies``) indique à Godot "
"quels autres fichiers doivent être exportés pour chaque plate-forme pour que "
"notre bibliothèque fonctionne. Supposons que votre module GDNative utilise "
"une autre DLL pour implémenter des fonctionnalités à partir d'une "
"bibliothèque tierce, c'est ici que vous devez lister cette DLL."

msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""
"Pour notre exemple, nous avons uniquement construit des bibliothèques pour "
"Linux, macOS et/ou Windows, afin que vous puissiez les lier dans les champs "
"adaptés en cliquant sur le bouton dossier. Si vous avec construit ces trois "
"bibliothèques, vous devriez avoir quelque chose comme ceci :"

msgid "Saving the resource"
msgstr "Sauvegarder la ressource"

msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""
"Nous pouvons alors sauvegarder notre ressource GDNativeLibrary sous le nom "
"de ``bin/libsimple.gdnlib`` avec le bouton Sauvegarder dans l'inspecteur :"

msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr ""
"Le fichier est enregistré dans un format texte et doit avoir un contenu "
"similaire à celui-ci :"

msgid "Creating the NativeScript (``.gdns``) file"
msgstr "Création du fichier NativeScript (``.gdns``)"

msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"SIMPLE\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""
"Avec notre fichier ``.gdnlib`` nous avons dit à Godot comment charger notre "
"bibliothèque, maintenant nous devons lui parler de notre classe d'objets "
"\"SIMPLE\". Pour ce faire, nous créons un fichier de ressources :ref:"
"`NativeScript <class_NativeScript>` avec l'extension ``.gdns``."

msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""
"Comme pour la ressource GDNativeLibrary, cliquez sur le bouton pour créer "
"une nouvelle ressource dans l'inspecteur et sélectionnez ``NativeScript`` :"

msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"SIMPLE\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""
"L'inspecteur nous montrera quelques propriétés que nous devons remplir. "
"Comme *Class Name* nous entrons \"SIMPLE\" qui est le nom de la classe "
"d'objet que nous avons déclaré dans notre source C en appelant "
"``godot_nativescript_register_class``. Nous devons également sélectionner "
"notre fichier ``.gdnlib`` en cliquant sur *Library* et en sélectionnant "
"*Load* :"

msgid ""
"The *Class Name* must have the same spelling as the one given in "
"``godot_nativescript_init`` when registering the class."
msgstr ""
"Le *Class Name* doit avoir la même orthographe que celle donnée dans "
"``godot_nativescript_init`` lors de l'enregistrement de la classe."

msgid "Finally, click on the save icon and save this as ``bin/simple.gdns``:"
msgstr ""
"Enfin, cliquez sur l'icône de sauvegarde et enregistrez le fichier sous le "
"nom ``bin/simple.gdns`` :"

msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""
"Il est maintenant temps de construire notre scène. Ajoutez un nœud de "
"contrôle à votre scène comme racine et appelez le ``main``. Ensuite, ajoutez "
"un Bouton et un Label comme nœuds enfants. Placez-les à un endroit agréable "
"sur l'écran et donnez un nom à votre bouton."

msgid "Select the control node and attach a script to it:"
msgstr "Sélectionnez le nœud de contrôle et attachez-y un script :"

msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr "Reliez ensuite le signal ``pressed`` du bouton à votre script :"

msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr "N'oubliez pas de sauvegarder votre scène, appelez la ``main.tscn``."

msgid "Now we can implement our ``main.gd`` code:"
msgstr "Nous pouvons maintenant mettre en œuvre notre code ``main.gd`` :"

msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""
"Après tout cela, notre projet devrait fonctionner. La première fois que vous "
"le lancez, Godot vous demande quelle est votre scène principale et vous "
"sélectionnez votre fichier ``main.tscn`` et presto :"

msgid "Translation status"
msgstr "État de la traduction"
