# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "Contrôler des milliers de poissons en utilisant les Particles"

msgid ""
"The problem with :ref:`MeshInstances <class_MeshInstance>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
"Le problème avec les :ref:`MeshInstances <class_MeshInstance>` est qu'il est "
"coûteux de mettre à jour leurs tableaux de transforms. Ils sont idéaux pour "
"placer de nombreux objets statiques partout dans la scène, mais ça reste "
"difficile de déplacer ces objets."

msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`Particles <class_Particles>` node. Particles take advantage of GPU "
"acceleration by computing and setting the per-instance information in a :ref:"
"`Shader <class_Shader>`."
msgstr ""
"Pour faire bouger de manière intéressante chaque instance, nous allons "
"utiliser un nœud de :ref:`Particles <class_Particles>`. Les particules "
"profitent de l'accélération GPU en calculant et en définissant les "
"informations par instance dans un :ref:`Shader <class_Shader>`."

msgid ""
"Particles are not available in GLES2, instead use :ref:`CPUParticles "
"<class_CPUParticles>`, which do the same thing as Particles, but do not "
"benefit from GPU acceleration."
msgstr ""
"Les particules ne sont pas disponibles dans GLES2, utilisez plutôt :ref:"
"`CPUParticles <class_CPUParticles>`, qui font la même chose que les "
"particules, mais ne bénéficient pas de l'accélération GPU."

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"Créez d'abord un nœud Particles. Ensuite, sous \"Draw Passes\" définissez le "
"\"Draw Pass 1\" de la particule sur votre :ref:`Mesh <class_Mesh>`. Puis "
"sous \"Process Material\" créez un nouveau :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."

msgid "Set the ``shader_type`` to ``particles``."
msgstr "Définissez le ``shader_type`` sur ``particles``."

msgid "Then add the following two functions:"
msgstr "Ajoutez ensuite les deux fonctions suivantes :"

msgid ""
"These functions come from the default :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>`. They are used to generate a random number from "
"each particle's ``RANDOM_SEED``."
msgstr ""
"Ces fonctions proviennent du :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>` par défaut. Elles sont utilisées pour générer un "
"nombre aléatoire à partir du ``RANDOM_SEED`` de chaque particule."

msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the Spatial shader of the mesh, and also in the particle shader "
"the next time it is run."
msgstr ""
"Ce qui est unique avec les shaders de particules, c'est que certaines des "
"variables intégrées sont sauvegardées d'une frame à l'autre. ``TRANSFORM``, "
"``COLOR`` et ``CUSTOM`` sont tous accessibles dans le shader spatial du "
"maillage, ainsi que dans le shader de particules lors de sa prochaine "
"exécution."

msgid ""
"Next, setup your ``vertex`` function. Particles shaders only contain a "
"vertex function and no others."
msgstr ""
"Ensuite, configurez votre fonction ``vertex``. Les shaders de particules ne "
"contiennent qu'une fonction vertex et aucune autre."

msgid ""
"First we will distinguish between code that needs to be run only when the "
"particle system starts and code that should always run. We want to give each "
"fish a random position and a random animation offset when the system is "
"first run. To do so, we wrap that code in an ``if`` statement that checks "
"the built-in variable ``RESTART`` which becomes ``true`` for one frame when "
"the particle system is restarted."
msgstr ""
"Nous allons d’abord faire la distinction entre le code devant être exécuté "
"uniquement au démarrage du système de particules et le code devant toujours "
"être exécuté. Nous voulons attribuer à chaque poisson une position aléatoire "
"et un décalage d'animation aléatoire lors de la première exécution du "
"système. Pour ce faire, nous encapsulons donc ce code dans une instruction "
"``if`` vérifiant la variable intégrée ``RESTART`` qui devient ``true`` pour "
"une image(frame) lorsque le système de particules est redémarré."

msgid "From a high level, this looks like:"
msgstr "D'un niveau supérieur, cela ressemble à :"

msgid ""
"Next, we need to generate 4 random numbers: 3 to create a random position "
"and one for the random offset of the swim cycle."
msgstr ""
"Ensuite, nous devons générer 4 nombres aléatoires : 3 pour créer une "
"position aléatoire et un autre pour le décalage aléatoire du cycle de nage."

msgid ""
"First, generate 4 seeds inside the ``RESTART`` block using the ``hash`` "
"function provided above:"
msgstr ""
"Tout d'abord, générez 4 graines à l'intérieur du bloc ``RESTART`` à l'aide "
"de la fonction ``hash`` fournie ci-dessus :"

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""
"Ensuite, utilisez ces graines pour générer des nombres aléatoires à l'aide "
"de ``rand_from_seed`` :"

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"Enfin, affectez ``position`` à ``TRANSFORM[3].xyz``, qui est la partie du "
"transform qui contient l'information de position."

msgid "Remember, all this code so far goes inside the ``RESTART`` block."
msgstr ""
"Rappelez-vous, tout ce code jusqu'à présent va à l'intérieur du bloc "
"``RESTART``."

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""
"Le vertex shader de votre maillage peut rester exactement le même que dans "
"le tutoriel précédent."

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"Vous pouvez maintenant déplacer chaque poisson individuellement à chaque "
"image, soit en ajoutant directement à son ``TRANSFORM``, soit en réécrivant "
"sa ``VELOCITY``."

msgid "Let's transform the fish by setting their ``VELOCITY``."
msgstr "Faisons avancer les poissons en définissant leurs ``VELOCITY``."

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""
"C'est la façon la plus simple de régler ``VELOCITY`` : chaque particule (ou "
"poisson) aura la même vitesse."

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""
"Juste en définissant ``VELOCITY`` vous pouvez faire nager les poissons comme "
"vous voulez. Par exemple, essayez le code ci-dessous."

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr ""
"Cela donnera à chaque poisson une vitesse unique entre ``2`` et ``10``."

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"Si vous avez utilisé ``CUSTOM.y`` dans le dernier tutoriel, vous pouvez "
"également définir la vitesse de l'animation de nage en fonction de la "
"``VELOCITY``. Utilisez simplement ``CUSTOM.y``."

msgid "This code gives you the following behavior:"
msgstr "Ce code vous donne le comportement suivant :"

msgid ""
"Using a ParticlesMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"En utilisant un ParticlesMaterial (matériau de particules), vous pouvez "
"rendre le comportement du poisson aussi simple ou complexe que vous le "
"souhaitez. Dans ce tutoriel, nous ne réglons que Velocity, mais dans vos "
"propres Shaders vous pouvez aussi régler ``COLOR``, la rotation, l'échelle "
"(via ``TRANSFORM``). Pour plus d'informations sur les shaders de particules, "
"reportez-vous à la page :ref:`Particles Shader Reference "
"<doc_particle_shader>`."

msgid "Translation status"
msgstr "État de la traduction"
