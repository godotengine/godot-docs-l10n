# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Running code in the editor"
msgstr ""

msgid "What is ``tool``?"
msgstr ""

msgid ""
"``tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""

msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""

msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw the cannonball's trajectory in the editor, making level design "
"a lot easier."
msgstr ""

msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""

msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""

msgid ""
"``tool`` scripts run inside the editor, and let you access the scene tree of "
"the currently edited scene. This is a powerful feature which also comes with "
"caveats, as the editor does not include protections for potential misuse of "
"``tool`` scripts. Be **extremely** cautious when manipulating the scene "
"tree, especially via :ref:`Node.queue_free<class_Node_method_queue_free>`, "
"as it can cause crashes if you free a node while the editor runs logic "
"involving it."
msgstr ""

msgid "How to use it"
msgstr ""

msgid ""
"To turn a script into a tool, add the keyword ``tool`` at the top of your "
"code."
msgstr ""

msgid ""
"To check if you are currently in the editor, use: ``Engine.editor_hint``."
msgstr ""

msgid "For example, if you want to execute some code only in the editor, use:"
msgstr ""

msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"the same statement:"
msgstr ""

msgid ""
"Pieces of code do not have either of the 2 conditions above will run both in-"
"editor and in-game."
msgstr ""

msgid "Here is how a ``_process()`` function might look for you:"
msgstr ""

msgid ""
"Modifications in editor are permanent. For example, in the following case, "
"when we remove the script, the node will keep its rotation. Be careful to "
"avoid making unwanted modifications."
msgstr ""

msgid "Try it out"
msgstr ""

msgid ""
"Add a ``Sprite`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""

msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr ""

msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr ""

msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr ""

msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr ""

#, fuzzy
msgid "Editing variables"
msgstr "Ilmentymien muokkaus"

msgid ""
"Add and export a variable speed to the script. The function set_speed after "
"\"setget\" is executed with your input to change the variable. Modify  "
"``_process()`` to include the rotation speed."
msgstr ""

msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. AutoLoad nodes cannot be accessed in the editor at "
"all."
msgstr ""

msgid "Instancing scenes"
msgstr "Skenejen instantiointi"

msgid ""
"You can instantiate packed scenes normally and add them to the scene "
"currently opened in the editor. By default, nodes or scenes added with :ref:"
"`Node.add_child(node) <class_Node_method_add_child>` are **not** visible in "
"the Scene tree dock and are **not** persisted to disk. If you wish the node "
"or scene to be visible in the scene tree dock and persisted to disk when "
"saving the scene, you need to set the child node's :ref:`owner "
"<class_Node_property_owner>` property to the currently edited scene root."
msgstr ""

msgid "If you are using ``tool``:"
msgstr ""

msgid "If you are using :ref:`EditorScript<class_EditorScript>`:"
msgstr ""

msgid ""
"Using ``tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``tool`` keyword to "
"the top. Also, make sure to separate code that runs in-editor from code that "
"runs in-game. This way, you can find bugs more easily."
msgstr ""

msgid "Translation status"
msgstr "Käännöksen tila"
