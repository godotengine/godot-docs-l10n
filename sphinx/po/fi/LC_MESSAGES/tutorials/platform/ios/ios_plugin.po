# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating iOS plugins"
msgstr "Polygonien luonti"

msgid ""
"This page explains what iOS plugins can do for you, how to use an existing "
"plugin, and the steps to code a new one."
msgstr ""

msgid ""
"iOS plugins allow you to use third-party libraries and support iOS-specific "
"features like In-App Purchases, GameCenter integration, ARKit support, and "
"more."
msgstr ""

#, fuzzy
msgid "Loading and using an existing plugin"
msgstr "Android-liitännäisten luonti"

msgid ""
"An iOS plugin requires a ``.gdip`` configuration file, a binary file which "
"can be either ``.a`` static library or ``.xcframework`` containing ``.a`` "
"static libraries, and possibly other dependencies. To use it, you need to:"
msgstr ""

msgid ""
"Copy the plugin's files to your Godot project's ``res://ios/plugins`` "
"directory. You can also group files in a sub-directory, like ``res://ios/"
"plugins/my_plugin``."
msgstr ""

msgid ""
"The Godot editor automatically detects and imports ``.gdip`` files inside "
"``res://ios/plugins`` and its subdirectories."
msgstr ""

msgid ""
"You can find and activate detected plugins by going to Project -> Export... -"
"> iOS and in the Options tab, scrolling to the Plugins section."
msgstr ""

msgid ""
"When a plugin is active, you can access it in your using ``Engine."
"get_singleton()``::"
msgstr ""

#, fuzzy
msgid "Creating an iOS plugin"
msgstr "Pääruudun liitännäisen luonti"

msgid ""
"At its core, a Godot iOS plugin is an iOS library (*.a* archive file or *."
"xcframework* containing static libraries) with the following requirements:"
msgstr ""

msgid "The library must have a dependency on the Godot engine headers."
msgstr ""

msgid "The library must come with a ``.gdip`` configuration file."
msgstr ""

msgid ""
"An iOS plugin can have the same functionality as a Godot module but provides "
"more flexibility and doesn't require to rebuild the engine."
msgstr ""

msgid ""
"Here are the steps to get a plugin's development started. We recommend using "
"`Xcode <https://developer.apple.com/develop/>`_ as your development "
"environment."
msgstr ""

#, fuzzy
msgid ""
"The `Godot iOS Plugins <https://github.com/godotengine/godot-ios-plugins>`_ "
"Godot iOS plugins."
msgstr ""
"kopio `godot-cpp säilöstä <https://github.com/godotengine/godot-docs>`_."

msgid ""
"The `Godot iOS plugin template <https://github.com/naithar/"
"godot_ios_plugin>`_ gives you all the boilerplate you need to get your iOS "
"plugin started."
msgstr ""

#, fuzzy
msgid "To build an iOS plugin:"
msgstr "Android-liitännäisten luonti"

msgid "Create an Objective-C static library for your plugin inside Xcode."
msgstr ""

msgid ""
"Add the Godot engine header files as a dependency for your plugin library in "
"``HEADER_SEARCH_PATHS``. You can find the setting inside the ``Build "
"Settings`` tab:"
msgstr ""

#, fuzzy
msgid ""
"Download the Godot engine source from the `Godot GitHub page <https://github."
"com/godotengine/godot>`_."
msgstr ""
"kopio `godot-cpp säilöstä <https://github.com/godotengine/godot-docs>`_."

msgid ""
"Run SCons to generate headers. You can learn the process by reading :ref:"
"`doc_compiling_for_ios`. You don't have to wait for compilation to complete "
"to move forward as headers are generated before the engine starts to compile."
msgstr ""

msgid ""
"You should use the same header files for iOS plugins and for the iOS export "
"template."
msgstr ""

msgid ""
"In the ``Build Settings`` tab, specify the compilation flags for your static "
"library in ``OTHER_CFLAGS``. The most important ones are ``-fcxx-modules``, "
"``-fmodules``, and ``-DDEBUG`` if you need debug support. Other flags should "
"be the same you use to compile Godot. For instance:"
msgstr ""

msgid ""
"Add the required logic for your plugin and build your library to generate a "
"``.a`` file. You will probably need to build both ``debug`` and ``release`` "
"target ``.a`` files. Depending on your needs, pick either or both. If you "
"need both debug and release ``.a`` files, their name should match following "
"pattern: ``[PluginName].[TargetType].a``. You can also build the static "
"library with your SCons configuration."
msgstr ""

msgid ""
"The iOS plugin system also supports ``.xcframework`` files. To generate one, "
"you can use a command such as:"
msgstr ""

msgid ""
"Create a Godot iOS Plugin configuration file to help the system detect and "
"load your plugin:"
msgstr ""

msgid ""
"The configuration file extension must be ``gdip`` (e.g.: ``MyPlugin.gdip``)."
msgstr ""

msgid "The configuration file format is as follow::"
msgstr ""

msgid "The ``config`` section and fields are required and defined as follow:"
msgstr ""

msgid "**name**: name of the plugin"
msgstr ""

msgid ""
"**binary**: this should be the filepath of the plugin library (``a`` or "
"``xcframework``) file."
msgstr ""

msgid ""
"The filepath can be relative (e.g.: ``MyPlugin.a``, ``MyPlugin."
"xcframework``) in which case it's relative to the directory where the "
"``gdip`` file is located."
msgstr ""

msgid ""
"The filepath can be absolute: ``res://some_path/MyPlugin.a`` or ``res://"
"some_path/MyPlugin.xcframework``."
msgstr ""

msgid ""
"In case you need multitarget library usage, the filename should be "
"``MyPlugin.a`` and ``.a`` files should be named as ``MyPlugin.release.a`` "
"and ``MyPlugin.debug.a``."
msgstr ""

msgid ""
"In case you use multitarget ``xcframework`` libraries, their filename in the "
"configuration should be ``MyPlugin.xcframework``. The ``.xcframework`` files "
"should be named as ``MyPlugin.release.xcframework`` and ``MyPlugin.debug."
"xcframework``."
msgstr ""

msgid ""
"The ``dependencies`` and ``plist`` sections are optional and defined as "
"follow:"
msgstr ""

msgid "**dependencies**:"
msgstr ""

msgid ""
"**linked**: contains a list of iOS frameworks that the iOS application "
"should be linked with."
msgstr ""

msgid ""
"**embedded**: contains a list of iOS frameworks or libraries that should be "
"both linked and embedded into the resulting iOS application."
msgstr ""

msgid ""
"**system**: contains a list of iOS system frameworks that are required for "
"plugin."
msgstr ""

msgid ""
"**capabilities**: contains a list of iOS capabilities that is required for "
"plugin. A list of available capabilities can be found at `Apple "
"UIRequiredDeviceCapabilities documentation page <https://developer.apple.com/"
"documentation/bundleresources/information_property_list/"
"uirequireddevicecapabilities>`_."
msgstr ""

msgid ""
"**files**: contains a list of files that should be copied on export. This is "
"useful for data files or images."
msgstr ""

msgid ""
"**linker_flags**: contains a list of linker flags to add to the Xcode "
"project when exporting the plugin."
msgstr ""

msgid ""
"**plist**: should have keys and values that should be present in ``Info."
"plist`` file."
msgstr ""

msgid "Each line should follow pattern: ``KeyName:KeyType=KeyValue``"
msgstr ""

msgid ""
"Supported values for ``KeyType`` are ``string``, ``integer``, ``boolean``, "
"``raw``, ``string_input``"
msgstr ""

msgid ""
"If no type is used (e.g.: ``KeyName=\"KeyValue\"``) ``string`` type will be "
"used."
msgstr ""

msgid ""
"If ``raw`` type is used value for coresponding key will be stored in ``Info."
"plist`` as is."
msgstr ""

msgid ""
"If ``string_input`` type is used you will be able to modify value in Export "
"window."
msgstr ""

msgid "Translation status"
msgstr "Käännöksen tila"
