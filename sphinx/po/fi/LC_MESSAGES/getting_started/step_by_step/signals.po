# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "Signaali"

#, fuzzy
msgid "Using signals"
msgstr "Signaalit"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""

msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player’s health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""

#, fuzzy
msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Voit lukea lisää tarkkailijamallista täällä: http://gameprogrammingpatterns."
"com/observer.html"

msgid ""
"We will now use a signal to make our Godot icon from the previous lesson (:"
"ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""

msgid "Scene setup"
msgstr "Skenen järjestely"

msgid ""
"To add a button to our game, we will create a new \"main\" scene which will "
"include both a button and the ``Sprite.tscn`` scene that we scripted in "
"previous lessons."
msgstr ""

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr ""

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a Node2D as our "
"root."
msgstr ""

msgid ""
"In the FileSystem dock, click and drag the ``Sprite.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""

msgid ""
"We want to add another node as a sibling of the Sprite. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""

msgid "Search for the Button node type and add it."
msgstr ""

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""

msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr ""

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter \"Toggle motion\"."
msgstr ""

#, fuzzy
msgid "Your scene tree and viewport should look like this."
msgstr "Skenepuusi pitäisi näyttää tältä:"

msgid ""
"Save your newly created scene. You can then run it with :kbd:`F6`. At the "
"moment, the button will be visible, but nothing will happen if you press it."
msgstr ""

#, fuzzy
msgid "Connecting a signal in the editor"
msgstr "Signaalien yhdistäminen koodin kautta"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite, and "
"we want to call a new function that will toggle its motion on and off. We "
"need to have a script attached to the Sprite node, which we do from the "
"previous lesson."
msgstr ""

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""

msgid "The dock displays a list of signals available on the selected node."
msgstr ""

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""

msgid ""
"There, you can connect the signal to the Sprite node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_NodeName_signal_name\". Here, it'll be "
"\"_on_Button_pressed\"."
msgstr ""

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""

msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""

msgid ""
"Our Sprite moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""

#, fuzzy
msgid "Your complete ``Sprite.gd`` code should look like the following."
msgstr "Skenepuusi pitäisi näyttää tältä:"

#, fuzzy
msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr "Aja skene ja paina painiketta. Sinun pitäisi saada seuraava tulos:"

#, fuzzy
msgid "Connecting a signal via code"
msgstr "Signaalien yhdistäminen koodin kautta"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""

#, fuzzy
msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Alt + 1` on macOS)."
msgstr ""
"**3D-työtilassa** voit työskennellä meshien, valojen ja kenttäsuunnittelun "
"parissa. Paina F2 mennäksesi siihen."

msgid ""
"In the Scene dock, right-click on the Sprite node and add a new child node. "
"Search for Timer and add the corresponding node. Your scene should now look "
"like this."
msgstr ""

msgid ""
"With the Timer node selected, go to the Inspector and check the "
"**Autostart** property."
msgstr ""

msgid ""
"Click the script icon next to Sprite to jump back to the scripting workspace."
msgstr ""

msgid "We need to do two operations to connect the nodes via code:"
msgstr ""

msgid "Get a reference to the Timer from the Sprite."
msgstr ""

msgid "Call the Timer's ``connect()`` method."
msgstr ""

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the node you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""

msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_method__ready>` built-in "
"function, which is called automatically by the engine when a node is fully "
"instantiated."
msgstr ""

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""

msgid ""
"The function ``get_node()`` looks at the Sprite's children and gets nodes by "
"their name. For example, if you renamed the Timer node to \"BlinkingTimer\" "
"in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""

msgid ""
"We can now connect the Timer to the Sprite in the ``_ready()`` function."
msgstr ""

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached (``self``). When the Timer emits "
"\"timeout\", we want to call the function \"_on_Timer_timeout\", that we "
"need to define. Let's add it at the bottom of our script and use it to "
"toggle our sprite's visibility."
msgstr ""

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""

msgid ""
"If you run the scene now, you will see that the sprite blinks on and off, at "
"one second intervals."
msgstr ""

#, fuzzy
msgid "Complete script"
msgstr "Vihollisen skripti"

msgid ""
"That's it for our little moving and blinking Godot icon demo! Here is the "
"complete ``Sprite.gd`` file for reference."
msgstr ""

msgid "Custom signals"
msgstr "Mukautetut signaalit"

msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""

#, fuzzy
msgid "To emit a signal in your scripts, call ``emit_signal()``."
msgstr "Signaalin lähettämiseksi koodin kautta, käytä ``emit``-funktiota:"

msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""

#, fuzzy
msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit_signal()`` function:"
msgstr "Signaalin lähettämiseksi koodin kautta, käytä ``emit``-funktiota:"

msgid "Summary"
msgstr "Yhteenveto"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""

#, fuzzy
msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"Monista Godotin valmiista solmutyypeistä löytyy signaaleja tapahtumien "
"havaitsemiseen. Esimerkiksi kolikkoa ilmentävä :ref:`Area2D <class_Area2D>`-"
"solmu lähettää ``body_entered`-signaalin kun pelihahmon fysiikkakappale "
"siirtyy sen törmäysmuodon sisään. Tämän avulla saadaan selville milloin "
"pelaaja on kerännyt kolikon."

msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"Seuraavassa osiossa, :ref:`doc_your_your_first_2d_game`, luot täydellisen 2D-"
"pelin ja laitat kaiken tähän mennessä oppimasi käytäntöön."

msgid "Translation status"
msgstr "Käännöksen tila"
