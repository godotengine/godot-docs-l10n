# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Custom VisualScript nodes"
msgstr "Własny skrypt"

msgid ""
"`Godot 4.0 will remove VisualScript from core entirely. <https://godotengine."
"org/article/godot-4-will-discontinue-visual-scripting>`__ As a result, "
"creating new projects using visual scripting in Godot is not recommended. "
"Future Godot 4.x releases may have VisualScript reimplemented as an "
"extension."
msgstr ""
"`Godot 4.0 usunie VisualScript całkowicie <https://godotengine.org/article/"
"godot-4-will-discontinue-visual-scripting>` __Przez co, tworzenie nowego "
"projektu używającego skryptowania wizualnego w Godocie nie jest "
"rekomendowane. Przyszłe wersje Godota 4.x mogą posiadać implementacje "
"VisualScript jako rozszerzenie."

msgid ""
"While Godot 3.x will keep VisualScript supported, we recommend :ref:`trying "
"out GDScript <toc-learn-scripting-gdscript>` instead, especially if you "
"intend to migrate your project to Godot 4."
msgstr ""
"Chociaż Godot 3.x będzie nadal obsługiwał VisualScript, zalecamy zamiast "
"tego :ref:`wypróbowanie GDScript <toc-learn-scripting-gdscript>`, zwłaszcza "
"jeśli zamierzasz przenieść swój projekt do Godota 4."

msgid ""
"Custom nodes are written in GDScript and can then be used in VisualScript. "
"This is useful for offloading complex code to GDScript and reusing it."
msgstr ""

#, fuzzy
msgid "Creating a custom node"
msgstr "Tworzenie motywu"

msgid ""
"Create a new script that extends :ref:`class_VisualScriptCustomNode` and put "
"a ``tool`` keyword at the top. This is needed for the script to run in the "
"editor."
msgstr ""

msgid ""
"There are some functions that can be implemented to set parameters of the "
"custom node. Only add functions that are needed, a "
"``_has_input_sequence_port`` function is not necessary if it should return "
"``false`` for example."
msgstr ""

msgid ""
"The most important part of a custom node is the ``_step`` function. The "
"logic of the node is defined there."
msgstr ""

msgid "The ``inputs`` parameter holds the value of the input ports."
msgstr ""

msgid ""
"The ``outputs`` parameter is an array where the indices represent the output "
"port ids. It can be modified to set the values of the output ports."
msgstr ""

msgid ""
"``start_mode`` can be checked to see if it is the first time ``_step`` is "
"called."
msgstr ""

msgid ""
"``working_mem`` is persistent each ``_step`` call. It can be used to store "
"information."
msgstr ""

msgid ""
"If you want to throw an error, for example if the input types are incorrect, "
"you can return the error message as a string. When everything goes right, "
"return the id of the sequence port which should be called next. If your "
"custom node doesn't have any, just return 0."
msgstr ""

msgid "Example:"
msgstr "Na przykład:"

#, fuzzy
msgid "Using a custom node"
msgstr "Używanie modułu"

msgid ""
"To use the script, add a ``CustomNode``, select it and drag your custom node "
"script into the ``script`` property shown in the inspector."
msgstr ""
"Aby użyć skrypt ,dodaj ``CustomNode``,wybierz i przeciągnij własny węzeł do "
"``script`` ,teraz powinno pojawić się to w inspektorze."

msgid "Result:"
msgstr "Rezultat:"

msgid "Translation status"
msgstr "Status tłumaczenia"
