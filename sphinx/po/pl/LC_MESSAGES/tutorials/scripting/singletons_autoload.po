# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Singletons (AutoLoad)"
msgstr ""

msgid "Introduction"
msgstr "Wprowadzenie"

msgid ""
"Godot's scene system, while powerful and flexible, has a drawback: there is "
"no method for storing information (e.g. a player's score or inventory) that "
"is needed by more than one scene."
msgstr ""

msgid ""
"It's possible to address this with some workarounds, but they come with "
"their own limitations:"
msgstr ""

msgid ""
"You can use a \"master\" scene that loads and unloads other scenes as its "
"children. However, this means you can no longer run those scenes "
"individually and expect them to work correctly."
msgstr ""

msgid ""
"Information can be stored to disk in ``user://`` and then loaded by scenes "
"that require it, but frequently saving and loading data is cumbersome and "
"may be slow."
msgstr ""

msgid ""
"The `Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_ "
"is a useful tool for solving the common use case where you need to store "
"persistent information between scenes. In our case, it's possible to reuse "
"the same scene or class for multiple singletons as long as they have "
"different names."
msgstr ""

msgid "Using this concept, you can create objects that:"
msgstr ""

msgid "Are always loaded, no matter which scene is currently running."
msgstr ""

msgid "Can store global variables such as player information."
msgstr ""

msgid "Can handle switching scenes and between-scene transitions."
msgstr ""

msgid ""
"*Act* like a singleton, since GDScript does not support global variables by "
"design."
msgstr ""

msgid "Autoloading nodes and scripts can give us these characteristics."
msgstr ""

msgid ""
"Godot won't make an AutoLoad a \"true\" singleton as per the singleton "
"design pattern. It may still be instanced more than once by the user if "
"desired."
msgstr ""

msgid ""
"If you're creating an autoload as part of an editor plugin, consider :ref:"
"`registering it automatically in the Project Settings "
"<doc_making_plugins_autoload>` when the plugin is enabled."
msgstr ""

msgid "AutoLoad"
msgstr "Autoładowanie"

msgid ""
"You can create an AutoLoad to load a scene or a script that inherits from :"
"ref:`class_Node`."
msgstr ""

msgid ""
"When autoloading a script, a :ref:`class_Node` will be created and the "
"script will be attached to it. This node will be added to the root viewport "
"before any other scenes are loaded."
msgstr ""

msgid ""
"To autoload a scene or script, select **Project > Project Settings** from "
"the menu and switch to the **AutoLoad** tab."
msgstr ""

msgid ""
"Here you can add any number of scenes or scripts. Each entry in the list "
"requires a name, which is assigned as the node's ``name`` property. The "
"order of the entries as they are added to the global scene tree can be "
"manipulated using the up/down arrow keys. Like regular scenes, the engine "
"will read these nodes in top-to-bottom order."
msgstr ""

msgid ""
"This means that any node can access a singleton named \"PlayerVariables\" "
"with:"
msgstr ""

msgid ""
"If the **Enable** column is checked (which is the default), then the "
"singleton can be accessed directly without requiring ``get_node()``:"
msgstr ""

msgid ""
"Note that autoload objects (scripts and/or scenes) are accessed just like "
"any other node in the scene tree. In fact, if you look at the running scene "
"tree, you'll see the autoloaded nodes appear:"
msgstr ""

msgid ""
"Autoloads must **not** be removed using ``free()`` or ``queue_free()`` at "
"runtime, or the engine will crash."
msgstr ""

msgid "Custom scene switcher"
msgstr "Własny zmieniacz scen"

msgid ""
"This tutorial will demonstrate building a scene switcher using autoloads. "
"For basic scene switching, you can use the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method (see :ref:`doc_scene_tree` for "
"details). However, if you need more complex behavior when changing scenes, "
"this method provides more functionality."
msgstr ""

msgid ""
"To begin, download the template from here: :download:`autoload.zip <files/"
"autoload.zip>` and open it in Godot."
msgstr ""

msgid ""
"The project contains two scenes: ``Scene1.tscn`` and ``Scene2.tscn``. Each "
"scene contains a label displaying the scene name and a button with its "
"``pressed()`` signal connected. When you run the project, it starts in "
"``Scene1.tscn``. However, pressing the button does nothing."
msgstr ""

#, fuzzy
msgid "Global.gd"
msgstr "global.gd"

msgid ""
"Switch to the **Script** tab and create a new script called ``Global.gd``. "
"Make sure it inherits from ``Node``:"
msgstr ""

#, fuzzy
msgid ""
"The next step is to add this script to the autoLoad list. Open **Project > "
"Project Settings** from the menu, switch to the **AutoLoad** tab and select "
"the script by clicking the browse button or typing its path: ``res://Global."
"gd``. Press **Add** to add it to the autoload list:"
msgstr ""
"Skrypt powinien otworzyć się w edytorze skryptów. Następnym krokiem jest "
"dodanie go do listy AutoLoad. Wybierz Projekt > Ustawienia projektu, przejdź "
"do zakładki AutoLoad i dodaj nowy wpis o nazwie \"Globalny\", który wskazuje "
"na ten plik:"

#, fuzzy
msgid ""
"Now whenever we run any scene in the project, this script will always be "
"loaded."
msgstr ""
"Teraz, za każdym razem, gdy uruchomisz dowolną scenę, skrypt jest zawsze "
"wczytywany."

msgid ""
"Returning to the script, it needs to fetch the current scene in the "
"`_ready()` function. Both the current scene (the one with the button) and "
"``Global.gd`` are children of root, but autoloaded nodes are always first. "
"This means that the last child of root is always the loaded scene."
msgstr ""

#, fuzzy
msgid ""
"Now we need a function for changing the scene. This function needs to free "
"the current scene and replace it with the requested one."
msgstr ""
"Dalej znajduje się funkcja zmiany sceny. Funkcja ta zwalnia bieżącą scenę i "
"załaduje tą żądaną."

msgid ""
"Using :ref:`Object.call_deferred() <class_Object_method_call_deferred>`, the "
"second function will only run once all code from the current scene has "
"completed. Thus, the current scene will not be removed while it is still "
"being used (i.e. its code is still running)."
msgstr ""

#, fuzzy
msgid ""
"Finally, we need to fill the empty callback functions in the two scenes:"
msgstr "Na koniec wystarczy wypełnić puste funkcje scene_a.gd i scene_b.gd:"

msgid "and"
msgstr "i"

msgid ""
"Run the project and test that you can switch between scenes by pressing the "
"button."
msgstr ""
"Teraz, jeśli uruchomisz projekt, możesz przełączać się pomiędzy obydwoma "
"scenami, naciskając przycisk."

msgid ""
"When scenes are small, the transition is instantaneous. However, if your "
"scenes are more complex, they may take a noticeable amount of time to "
"appear. To learn how to handle this, see the next tutorial: :ref:"
"`doc_background_loading`."
msgstr ""

msgid ""
"Alternatively, if the loading time is relatively short (less than 3 seconds "
"or so), you can display a \"loading plaque\" by showing some kind of 2D "
"element just before changing the scene. You can then hide it just after the "
"scene is changed. This can be used to indicate to the player that a scene is "
"being loaded."
msgstr ""

msgid "Translation status"
msgstr "Status tłumaczenia"
