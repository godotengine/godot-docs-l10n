# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using SceneTree"
msgstr "DrzewoSceny"

msgid "Introduction"
msgstr "Wprowadzenie"

#, fuzzy
msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are collections of nodes. They become active once they enter the "
"*scene tree*."
msgstr ""
"W poprzednich samouczkach wszystko kręciło się wokół koncepcji węzłów. Sceny "
"są po prostu zbiorem węzłów. Stają się one aktywne po wejściu do *drzewa "
"sceny*(scene tree)."

msgid "MainLoop"
msgstr "Pętla Główna"

msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Godot działa wewnętrznie w następujący sposób. Istnieje klasa :ref:`OS "
"<class_OS>`, która jest jedyną instancją działającą na początku. Następnie "
"wczytywane są wszystkie sterowniki, serwery, języki skryptowe, system scen "
"itp."

msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"Po zakończeniu inicjalizacji, :ref:`OS <class_OS>` musi być dostarczony :ref:"
"`MainLoop <class_MainLoop>` do uruchomienia. Do tej pory wszystko to działa "
"(możesz sprawdzić plik main/main.cpp w kodzie źródłowym, jeśli jesteś "
"zainteresowany tym, jak to działa od podstaw)."

msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""

msgid "SceneTree"
msgstr "DrzewoSceny"

msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Jednym ze sposobów, aby wyjaśnić, jak działa Godot jest przedstawienie jego "
"jako silnik gry wysokopoziomowy o niskim poziomie oprogramowania "
"pośredniczącego."

msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"System scen jest mechanizmem silnika gry, podczas gdy :ref:`OS <class_OS>` i "
"serwery są niskim poziomem API."

#, fuzzy
msgid ""
"The scene system provides its own main loop to OS, :ref:`SceneTree "
"<class_SceneTree>`. This is automatically instanced and set when running a "
"scene, no need to do any extra work."
msgstr ""
"W każdym razie, system scen zapewnia własną pętlę główną dla systemu "
"operacyjnego, :ref:`SceneTree <class_SceneTree>`. Jest on automatycznie "
"instancjowany i ustawiany podczas uruchamiania sceny, bez konieczności "
"wykonywania dodatkowej pracy."

msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"Ważne jest, aby wiedzieć, że ta klasa istnieje, ponieważ ma kilka ważnych "
"zastosowań:"

msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)."
msgstr ""

#, fuzzy
msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"Zawiera informacje o grupach i ma możliwość wywołania węzłów w grupie lub "
"uzyskania ich listy."

msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"Zawiera on pewne funkcje stanu globalnego, takie jak ustawianie trybu pauzy "
"lub zamykanie procesu."

msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""

msgid "Root viewport"
msgstr ""

msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"Korzeń :ref:`Viewport <class_Viewport>` jest zawsze na górze sceny. W węźle "
"można go uzyskać na dwa różne sposoby:"

msgid ""
"This node contains the main viewport. Anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen."
msgstr ""

msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""

msgid "Scene tree"
msgstr ""

msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""

msgid ""
"This means that as explained in previous tutorials, it will get the "
"``_enter_tree()`` and ``_ready()`` callbacks (as well as ``_exit_tree()``)."
msgstr ""

msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D visuals, "
"receive and send notifications, play sounds, etc. When they are removed from "
"the *scene tree*, they lose these abilities."
msgstr ""

msgid "Tree order"
msgstr ""

msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a lower rank in the tree order will get notified before the current "
"node."
msgstr ""

msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "\"Stanie się aktywnym\" poprzez wejście w *Drzewo Sceny*"

msgid "A scene is loaded from disk or created by scripting."
msgstr ""

msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""

msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""

msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""

msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""

msgid "Changing current scene"
msgstr "Zmiana aktualnej sceny"

msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""

msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""

msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in the development of your game, it may be preferable to create proper "
"loading screens with progress bar, animated indicators or thread "
"(background) loading. This must be done manually using autoloads (see next "
"chapter) and :ref:`doc_background_loading`."
msgstr ""

msgid "Translation status"
msgstr "Status tłumaczenia"
