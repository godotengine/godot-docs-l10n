# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr "Kompilacja dla X11 (Linux, \\*BSD)"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""

msgid "Requirements"
msgstr "Wymagania"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""
"Dla kompilacji pod Linuxem i innymi systemami UNIX, poniższe komponenty są "
"wymagane:"

msgid "GCC 7+ or Clang 6+."
msgstr "GCC lub Clang."

msgid "Python 3.5+."
msgstr "Python 3.5+."

msgid ""
"SCons 3.0+ build system. If your distribution uses Python 2 by default, or "
"you are using a version of SCons prior to 3.1.2, you will need to change the "
"version of Python that SCons uses by changing the shebang (the first line) "
"of the SCons script file to ``#! /usr/bin/python3``. Use the command ``which "
"scons`` to find the location of the SCons script file."
msgstr ""

msgid "pkg-config (used to detect the dependencies below)."
msgstr "pkg-config (używany do sprawdzanie poniższych zależności)."

msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries."
msgstr "X11, Xcursor, Xinerama, Xi i XRandR development libraries."

msgid "MesaGL development libraries."
msgstr "Biblioteki deweloperskie MesaGL."

msgid "ALSA development libraries."
msgstr "Biblioteki deweloperskie ALSA."

msgid "PulseAudio development libraries."
msgstr "ALSA development libraries."

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr "*Opcjonalne* - libudev (budowane z ``udev=yes``)."

msgid "*Optional* - yasm (for WebM SIMD optimizations)."
msgstr "*Opcjonalne* - yasm (dla opymalizacji WebM SIMD)."

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

msgid "Distro-specific one-liners"
msgstr ""

#, fuzzy
msgid "**Alpine Linux**"
msgstr "**Arch**"

#, fuzzy
msgid "**Arch Linux**"
msgstr "**Arch**"

msgid "**Debian** / **Ubuntu**"
msgstr "**Debian** / **Ubuntu**"

msgid "**Fedora**"
msgstr "**Fedora**"

msgid "**FreeBSD**"
msgstr "**FreeBSD**"

msgid "**Gentoo**"
msgstr "**Gentoo**"

msgid "**Mageia**"
msgstr "**Mageia**"

msgid "**OpenBSD**"
msgstr "**OpenBSD**"

msgid "**openSUSE**"
msgstr "**openSUSE**"

#, fuzzy
msgid "**NetBSD**"
msgstr "**FreeBSD**"

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""

msgid "**Solus**"
msgstr "**Solus**"

msgid "Compiling"
msgstr "Kompilowanie"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""
"Jeśli chcesz możesz skompilować to używając Clang zamiast GCC, używając "
"następujących komend:"

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""

msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

msgid "Compiling a headless/server build"
msgstr ""

msgid ""
"To compile a *headless* build which provides editor functionality to export "
"projects in an automated manner, use::"
msgstr ""

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""

msgid "Building export templates"
msgstr ""

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""

msgid ""
"To build X11 (Linux, \\*BSD) export templates, run the build system with the "
"following parameters:"
msgstr ""

msgid "(32 bits)"
msgstr "(32 bity)"

msgid "(64 bits)"
msgstr "(64 bity)"

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""

msgid ""
"To create standard export templates, the resulting files must be copied to:"
msgstr ""

msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux X11\" by "
"Godot):"
msgstr ""

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""

msgid "Using Clang and LLD for faster development"
msgstr ""

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""

#, fuzzy
msgid "Using Pyston for faster development"
msgstr "Wprowadzenie do rozwoju silnika"

msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""

msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""

msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""

msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""

msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""

msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""

msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""

msgid "Translation status"
msgstr "Status tłumaczenia"
