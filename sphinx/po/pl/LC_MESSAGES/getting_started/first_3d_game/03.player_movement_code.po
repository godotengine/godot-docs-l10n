# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Moving the player with code"
msgstr "Poruszanie graczem"

msgid ""
"It's time to code! We're going to use the input actions we created in the "
"last part to move the character."
msgstr ""

msgid ""
"Right-click the *Player* node and select *Attach Script* to add a new script "
"to it. In the popup, set the *Template* to *Empty* before pressing the "
"*Create* button."
msgstr ""

msgid "|image0|"
msgstr "|image0|"

#, fuzzy
msgid "image0"
msgstr "|image0|"

msgid ""
"Let's start with the class's properties. We're going to define a movement "
"speed, a fall acceleration representing gravity, and a velocity we'll use to "
"move the character."
msgstr ""

msgid ""
"These are common properties for a moving body. The ``velocity`` is a 3D "
"vector combining a speed with a direction. Here, we define it as a property "
"because we want to update and reuse its value across frames."
msgstr ""

msgid ""
"The values are quite different from 2D code because distances are in meters. "
"While in 2D, a thousand units (pixels) may only correspond to half of your "
"screen's width, in 3D, it's a kilometer."
msgstr ""

msgid ""
"Let's code the movement now. We start by calculating the input direction "
"vector using the global ``Input`` object, in ``_physics_process()``."
msgstr ""

msgid ""
"Here, we're going to make all calculations using the ``_physics_process()`` "
"virtual function. Like ``_process()``, it allows you to update the node "
"every frame, but it's designed specifically for physics-related code like "
"moving a kinematic or rigid body."
msgstr ""

msgid ""
"To learn more about the difference between ``_process()`` and "
"``_physics_process()``, see :ref:`doc_idle_and_physics_processing`."
msgstr ""

msgid ""
"We start by initializing a ``direction`` variable to ``Vector3.ZERO``. Then, "
"we check if the player is pressing one or more of the ``move_*`` inputs and "
"update the vector's ``x`` and ``z`` components accordingly. These correspond "
"to the ground plane's axes."
msgstr ""

msgid ""
"These four conditions give us eight possibilities and eight possible "
"directions."
msgstr ""

msgid ""
"In case the player presses, say, both W and D simultaneously, the vector "
"will have a length of about ``1.4``. But if they press a single key, it will "
"have a length of ``1``. We want the vector's length to be consistent. To do "
"so, we can call its ``normalize()`` method."
msgstr ""

msgid ""
"Here, we only normalize the vector if the direction has a length greater "
"than zero, which means the player is pressing a direction key."
msgstr ""

msgid ""
"In this case, we also get the *Pivot* node and call its ``look_at()`` "
"method. This method takes a position in space to look at in global "
"coordinates and the up direction. In this case, we can use the ``Vector3."
"UP`` constant."
msgstr ""

msgid ""
"A node's local coordinates, like ``translation``, are relative to their "
"parent. Global coordinates are relative to the world's main axes you can see "
"in the viewport instead."
msgstr ""

msgid ""
"In 3D, the property that contains a node's position is ``translation``. By "
"adding the ``direction`` to it, we get a position to look at that's one "
"meter away from the *Player*."
msgstr ""

msgid ""
"Then, we update the velocity. We have to calculate the ground velocity and "
"the fall speed separately. Be sure to go back one tab so the lines are "
"inside the ``_physics_process()`` function but outside the condition we just "
"wrote."
msgstr ""

msgid ""
"For the vertical velocity, we subtract the fall acceleration multiplied by "
"the delta time every frame. Notice the use of the ``-=`` operator, which is "
"a shorthand for ``variable = variable - ...``."
msgstr ""

msgid ""
"This line of code will cause our character to fall in every frame. This may "
"seem strange if it's already on the floor. But we have to do this for the "
"character to collide with the ground every frame."
msgstr ""

msgid ""
"The physics engine can only detect interactions with walls, the floor, or "
"other bodies during a given frame if movement and collisions happen. We will "
"use this property later to code the jump."
msgstr ""

msgid ""
"On the last line, we call ``KinematicBody.move_and_slide()``. It's a "
"powerful method of the ``KinematicBody`` class that allows you to move a "
"character smoothly. If it hits a wall midway through a motion, the engine "
"will try to smooth it out for you."
msgstr ""

msgid ""
"The function takes two parameters: our velocity and the up direction. It "
"moves the character and returns a leftover velocity after applying "
"collisions. When hitting the floor or a wall, the function will reduce or "
"reset the speed in that direction from you. In our case, storing the "
"function's returned value prevents the character from accumulating vertical "
"momentum, which could otherwise get so big the character would move through "
"the ground slab after a while."
msgstr ""

msgid "And that's all the code you need to move the character on the floor."
msgstr ""

msgid "Here is the complete ``Player.gd`` code for reference."
msgstr ""

msgid "Testing our player's movement"
msgstr ""

msgid ""
"We're going to put our player in the *Main* scene to test it. To do so, we "
"need to instantiate the player and then add a camera. Unlike in 2D, in 3D, "
"you won't see anything if your viewport doesn't have a camera pointing at "
"something."
msgstr ""

msgid ""
"Save your *Player* scene and open the *Main* scene. You can click on the "
"*Main* tab at the top of the editor to do so."
msgstr ""

msgid "|image1|"
msgstr "|image1|"

#, fuzzy
msgid "image1"
msgstr "|image1|"

msgid ""
"If you closed the scene before, head to the *FileSystem* dock and double-"
"click ``Main.tscn`` to re-open it."
msgstr ""

msgid ""
"To instantiate the *Player*, right-click on the *Main* node and select "
"*Instance Child Scene*."
msgstr ""

msgid "|image2|"
msgstr "|image2|"

#, fuzzy
msgid "image2"
msgstr "|image2|"

msgid ""
"In the popup, double-click *Player.tscn*. The character should appear in the "
"center of the viewport."
msgstr ""

#, fuzzy
msgid "Adding a camera"
msgstr "Dodanie nowej ścieżki"

msgid ""
"Let's add the camera next. Like we did with our *Player*\\ 's *Pivot*, we're "
"going to create a basic rig. Right-click on the *Main* node again and select "
"*Add Child Node* this time. Create a new *Position3D*, name it "
"*CameraPivot*, and add a *Camera* node as a child of it. Your scene tree "
"should look like this."
msgstr ""

msgid "|image3|"
msgstr "|image3|"

#, fuzzy
msgid "image3"
msgstr "|image3|"

msgid ""
"Notice the *Preview* checkbox that appears in the top-left when you have the "
"*Camera* selected. You can click it to preview the in-game camera projection."
msgstr ""

msgid "|image4|"
msgstr "|image4|"

#, fuzzy
msgid "image4"
msgstr "|image4|"

msgid ""
"We're going to use the *Pivot* to rotate the camera as if it was on a crane. "
"Let's first split the 3D view to be able to freely navigate the scene and "
"see what the camera sees."
msgstr ""

msgid ""
"In the toolbar right above the viewport, click on *View*, then *2 "
"Viewports*. You can also press :kbd:`Ctrl + 2` (:kbd:`Cmd + 2` on macOS)."
msgstr ""

msgid "|image5|"
msgstr "|image5|"

#, fuzzy
msgid "image5"
msgstr "|image5|"

msgid ""
"On the bottom view, select the *Camera* and turn on camera preview by "
"clicking the checkbox."
msgstr ""

msgid "|image6|"
msgstr "|image6|"

#, fuzzy
msgid "image6"
msgstr "|image6|"

msgid ""
"In the top view, move the camera about ``19`` units on the Z axis (the blue "
"one)."
msgstr ""

msgid "|image7|"
msgstr "|image7|"

#, fuzzy
msgid "image7"
msgstr "|image7|"

msgid ""
"Here's where the magic happens. Select the *CameraPivot* and rotate it "
"``-45`` degrees around the X axis (using the red circle). You'll see the "
"camera move as if it was attached to a crane."
msgstr ""

msgid "|image8|"
msgstr "|image8|"

#, fuzzy
msgid "image8"
msgstr "|image8|"

msgid ""
"You can run the scene by pressing :kbd:`F6` and press the arrow keys to move "
"the character."
msgstr ""

msgid "|image9|"
msgstr "|image9|"

#, fuzzy
msgid "image9"
msgstr "|image9|"

msgid ""
"We can see some empty space around the character due to the perspective "
"projection. In this game, we're going to use an orthographic projection "
"instead to better frame the gameplay area and make it easier for the player "
"to read distances."
msgstr ""

msgid ""
"Select the *Camera* again and in the *Inspector*, set the *Projection* to "
"*Orthogonal* and the *Size* to ``19``. The character should now look flatter "
"and the ground should fill the background."
msgstr ""

msgid "|image10|"
msgstr "|image10|"

#, fuzzy
msgid "image10"
msgstr "|image10|"

msgid ""
"With that, we have both player movement and the view in place. Next, we will "
"work on the monsters."
msgstr ""

msgid "Translation status"
msgstr "Status tłumaczenia"
