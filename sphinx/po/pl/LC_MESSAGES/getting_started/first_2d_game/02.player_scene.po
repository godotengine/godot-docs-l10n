# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating the player scene"
msgstr "Tworzenie sceny pocisku"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"Pierwszą sceną, którą stworzymy, będzie ``Player``. Jedną z zalet stworzenia "
"oddzielnej sceny Player jest to, że możemy ją przetestować oddzielnie, nawet "
"zanim utworzymy inne części gry."

msgid "Node structure"
msgstr "Struktura węzłów"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"Na początek musimy wybrać węzeł główny obiektu gracza. Zazwyczaj węzeł "
"główny sceny powinien odzwierciedlać pożądaną funkcjonalność obiektu - to, "
"czym obiekt *jest*. Kliknij przycisk \"Inny węzeł\" i dodaj węzeł :ref:"
"`Area2D <class_Area2D>` na scenę."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot wyświetli ikonę ostrzeżenia obok dodanego w drzewie sceny węzła. "
"Zignorujmy to na tę chwilę. Zajmiemy się tym później."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"Za pomocą ``Area2D`` możemy wykrywać obiekty, które zachodzą na siebie lub "
"wpływają na gracza. Zmieńmy jego nazwę na ``Player`` klikając dwukrotnie na "
"nazwę węzła. Jest to główny węzeł sceny i możemy dodać do niego dodatkowe "
"węzły, aby zwiększyć jego funkcjonalność."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"Przed dodaniem dzieci do węzła ``Player`` chcemy się upewnić, że nie "
"przesunęliśmy ich przypadkowo lub nie zmieniliśmy ich wielkości klikając na "
"nie. Zaznacz węzeł i kliknij ikonę po prawej stronie kłódki; jego podpowiedź "
"brzmi \"Upewnij się, że dzieci nie są wybieralne.\""

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Zapisz scenę. Kliknij Scena -> Zapisz lub naciśnij ``Ctrl+S`` w Windowsie/"
"Linuksie lub ``Command+S`` na systemie Mac."

msgid "For this project, we will be following the Godot naming conventions."
msgstr ""
"Dla tego projektu, będziemy korzystać z konwencji nazewnictwa typowych dla "
"Godota."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: W klasach (węzłach) używać będziemy PascalCase, w zmiennych i "
"funkcjach snake_case, a w stałych ALL_CAPS. Wszystkie nazwy zapisywane będą "
"bez znaków diakrytycznych (Więcej o :ref:`doc_gdscript_styleguide`)."

#, fuzzy
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: W klasach, eksportowanych zmiennych i metodach używać będziemy "
"PascalCase, w polach prywatnych _camelCase, natomiast w zmiennych lokalnych "
"i parametrach korzystać będziemy z camelCase (Więcej o :ref:"
"`doc_c_sharp_styleguide`). Zwróć szczególną uwagę na nazwy metod przy "
"łączeniu sygnałów."

msgid "Sprite animation"
msgstr "Animacja węzła Sprite"

#, fuzzy
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"Kliknij na węzeł ``Player`` i dodaj węzeł :ref:`AnimatedSprite "
"<class_AnimatedSprite>`jako dziecko. ``AnimatedSprite`` będzie obsługiwać "
"wygląd i animacje naszego gracza. Zauważ, że obok węzła znajduje się ikona "
"ostrzeżenia. ``AnimatedSprite`` wymaga zasobu :ref:`SpriteFrames "
"<class_SpriteFrames>`, który jest listą animacji, które może wyświetlić. Aby "
"go utworzyć, odszukaj właściwość ``Frames`` w inspektorze i kliknij "
"\"[pusty]\" -> \"Nowy SpriteFrames\". Następnie kliknij na stworzony przed "
"chwilą \"SpriteFrames\", aby otworzyć panel animacji:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"Po lewej stronie znajduje się lista animacji. Kliknij \"default\" i zmień "
"jego nazwę na \"walk\". Następnie kliknij przycisk \"Nowa animacja\", aby "
"utworzyć drugą animację o nazwie \"up\". Znajdź grafiki gracza w panelu "
"systemu plików - znajdują się one w folderze ``art``, który wypakowaliśmy. "
"Przeciągnij dwie grafiki dla każdej animacji o nazwach "
"``playerGrey_up[1/2]`` i ``playerGrey_walk[1/2]`` do części panelu "
"podpisanej jako \"Klatki animacji\":"

#, fuzzy
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"Grafiki gracza są zbyt duże, aby zmieściły się w oknie gry, więc musimy je "
"pomniejszyć. Kliknij na węzeł ``AnimatedSprite`` i ustaw właściwość "
"``Scale`` na ``(0.5, 0.5)``. W inspektorze możemy ją znaleźć pod nagłówkiem "
"``Node2D``."

#, fuzzy
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"Na koniec dodaj :ref:`ColisionShape2D <class_CollisionShape2D>` jako dziecko "
"``Player``. W ten sposób zostaną wyznaczone granice obszaru kolizji gracza. "
"Węzeł ``CapsuleShape2D`` najlepiej pasuje do tego węzła, więc obok \"Shape\" "
"w inspektorze kliknij \"<null>\" -> \"New CapsuleShape2D\". Zmień rozmiar "
"obszaru w celu okrycia całego sprite'a:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Po zakończeniu, scena ``Player`` powinna wyglądać w ten sposób:"

msgid "Make sure to save the scene again after these changes."
msgstr "Pamiętaj o ponownym zapisaniu sceny po tych zmianach."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""

msgid "Translation status"
msgstr "Status tłumaczenia"
