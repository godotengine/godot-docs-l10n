# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Import plugins"
msgstr "Importar plugins"

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""
"Este tutorial asume que ya sabe cómo crear complementos genéricos. En caso "
"de duda, consulte la página: ref: `doc_making_plugins`. Esto también asume "
"que está familiarizado con el sistema de importación de Godot."

msgid "Introduction"
msgstr "Introducción"

msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, Ogg Vorbis "
"sounds, and many more."
msgstr ""
"Un complemento de importación es un tipo especial de herramienta de edición "
"que permite que Godot importe recursos personalizados y los trate como "
"recursos de primera clase. El editor en sí viene incluido con una gran "
"cantidad de complementos de importación para manejar los recursos comunes "
"como imágenes PNG, modelos Collada y glTF, sonidos Ogg Vorbis y muchos más."

msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material. In this example it will contain the pure blue color "
"(zero red, zero green, and full blue):"
msgstr ""
"Este tutorial le mostrará cómo crear un complemento de importación simple "
"para cargar un archivo de texto personalizado como recurso material. Este "
"archivo de texto contendrá tres valores numéricos separados por comas, que "
"representan los tres canales de un color, y el color resultante se utilizará "
"como albedo (color principal) del material importado. En este ejemplo, "
"contendrá el color azul puro (cero rojo, cero verde y azul completo):"

msgid "Configuration"
msgstr "Configuración"

msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""
"Primero necesitamos un complemento genérico que se encargue de la "
"inicialización y destrucción de nuestro complemento de importación. Primero "
"agreguemos el archivo `` plugin.cfg '':"

msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr ""
"Luego, necesitamos el archivo `` material_import.gd '' para agregar y "
"eliminar el complemento de importación cuando sea necesario:"

msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""
"Cuando este complemento está activado, creará una nueva instancia del "
"complemento de importación (que pronto crearemos) y lo agregará al editor "
"usando el método: ref: `add_import_plugin () "
"<class_EditorPlugin_method_add_import_plugin>`. Almacenamos una referencia a "
"él en un miembro de la clase ``import_plugin`` para que podamos consultarlo "
"más adelante cuando lo eliminemos. El método: ref: `remove_import_plugin () "
"<class_EditorPlugin_method_remove_import_plugin>` se llama cuando el "
"complemento está desactivado para limpiar la memoria y hacerle saber al "
"editor que el complemento de importación ya no está disponible."

msgid ""
"Note that the import plugin is a reference type, so it doesn't need to be "
"explicitly released from memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""
"Tenga en cuenta que el complemento de importación es un tipo de referencia, "
"por lo que no es necesario liberarlo explícitamente de la memoria con la "
"función ``free ()``. Será liberado automáticamente por el motor cuando salga "
"del alcance."

msgid "The EditorImportPlugin class"
msgstr "La clase EditorImportPlugin"

msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible for implementing the methods "
"that are called by Godot when it needs to know how to deal with files."
msgstr ""
"El personaje principal del programa es: ref: `EditorImportPlugin class "
"<class_EditorImportPlugin>`. Es responsable de implementar los métodos que "
"llama Godot cuando necesita saber cómo manejar archivos."

msgid "Let's begin to code our plugin, one method at time:"
msgstr "Comencemos a codificar nuestro complemento, un método a la vez:"

msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name for your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""
"El primer método es: ref: `get_importer_name () "
"<class_EditorImportPlugin_method_get_importer_name>`. Este es un nombre "
"único para su complemento que usa Godot para saber qué importación se usó en "
"un archivo determinado. Cuando sea necesario volver a importar los archivos, "
"el editor sabrá a qué complemento llamar."

msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible for returning the name of the type it imports and it "
"will be shown to the user in the Import dock."
msgstr ""
"El método :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` es "
"responsable de devolver el nombre del tipo que importa y se mostrará al "
"usuario en el panel de Importación."

msgid ""
"You should choose this name as a continuation to \"Import as\", e.g. "
"*\"Import as Silly Material\"*. You can name it whatever you want but we "
"recommend a descriptive name for your plugin."
msgstr ""
"Debe elegir este nombre como continuación de \"Importar como\", p. Ej. * "
"\"Importar como material\" *. Puede nombrarlo como desee, pero le "
"recomendamos un nombre descriptivo para su complemento."

msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""
"El sistema de importación de Godot detecta los tipos de archivos por su "
"extensión. En el método :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"devuelve un array de strings para representar cada extensión que este plugin "
"pueda entender. Si una extensión es reconocida por más de un plugin, el "
"usuario puede seleccionar cuál usar al importar los archivos."

msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""
"Muchos complementos pueden usar extensiones comunes como ``.json`` y ``."
"txt``. Además, podría haber archivos en el proyecto que sean solo datos del "
"juego y no se deben importar. Debe tener cuidado al importar para validar "
"los datos. Nunca espere que el archivo esté bien formado."

msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to declare what will be "
"used in the import."
msgstr ""
"Los archivos importados se guardan en la carpeta ``.import`` en la raíz del "
"proyecto. Su extensión debe coincidir con el tipo de recurso que está "
"importando, pero dado que Godot no puede decir qué usará (porque puede haber "
"varias extensiones válidas para el mismo recurso), debe declarar qué se "
"usará en la importación."

msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""
"Dado que estamos importando un Material, usaremos la extensión especial para "
"tales tipos de recursos. Si está importando una escena, puede usar ``scn``. "
"Los recursos genéricos pueden usar la extensión ``res``. Sin embargo, esto "
"no se aplica de ninguna manera por el motor."

msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""
"El recurso importado tiene un tipo específico, por lo que el editor puede "
"saber a qué ranura de propiedades pertenece. Esto permite arrastrar y soltar "
"desde el panel de Sistema de Archivos a una propiedad en el Inspector."

msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr ""
"En nuestro caso es un: ref: `class_SpatialMaterial`, que se puede aplicar a "
"objetos 3D."

msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""
"Si necesita importar diferentes tipos de la misma extensión, debe crear "
"varios complementos de importación. Puede abstraer el código de importación "
"en otro archivo para evitar la duplicación en este sentido."

msgid "Options and presets"
msgstr "Opciones y presets"

msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""
"Su complemento puede proporcionar diferentes opciones para permitir al "
"usuario controlar cómo se importará el recurso. Si un conjunto de opciones "
"seleccionadas es común, también puede crear diferentes ajustes "
"preestablecidos para que sea más fácil para el usuario. La siguiente imagen "
"muestra cómo aparecerán las opciones en el editor:"

msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""
"Dado que puede haber muchos ajustes preestablecidos y se identifican con un "
"número, es una buena práctica usar una enumeración para poder referirse a "
"ellos usando nombres."

msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr ""
"Ahora que la enumeración está definida, sigamos mirando los métodos de un "
"complemento de importación:"

msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""
"El método :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` devuelve la cantidad de "
"presets que definen estos plugins. Sólo tenemos un preset ahora, pero "
"podemos hacer que este método esté preparado para el futuro devolviendo el "
"tamaño de nuestra enumeración ``Presets``."

msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""
"Aquí tenemos el método: ref: `get_preset_name () "
"<class_EditorImportPlugin_method_get_preset_name>`, que da nombres a los "
"preajustes tal como se le presentarán al usuario, así que asegúrese de usar "
"nombres cortos y claros."

msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""
"Aquí podemos usar la sentencia ``match`` para hacer el código más "
"estructurado. De esta manera es más fácil añadir nuevos presets en el "
"futuro. Usamos el patrón de catch all para devolver algo también. Aunque "
"Godot no pedirá presets más allá del número de presets que definiste, "
"siempre es mejor ser precavido."

msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""
"Si sólo tiene un preset puede simplemente devolver su nombre directamente, "
"pero si lo hace debe tener cuidado al añadir más presets."

msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""
"Este es el método que define las opciones disponibles. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"devuelve un array de diccionarios, y cada diccionario contiene unas cuantas "
"claves que se comprueban para personalizar la opción tal y como se muestra "
"al usuario. La siguiente tabla muestra las posibles claves:"

msgid "Key"
msgstr "Clave"

msgid "Type"
msgstr "Tipo"

msgid "Description"
msgstr "Descripción"

msgid "``name``"
msgstr "nombre"

msgid "String"
msgstr "Cadena"

msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr ""
"El nombre de la opción. Cuando se muestran, los guiones bajos se convierten "
"en espacios y las primeras letras se escriben en mayúscula."

msgid "``default_value``"
msgstr "``valor por defecto``"

msgid "Any"
msgstr "Algún"

msgid "The default value of the option for this preset."
msgstr "El valor por defecto de la opción para este preset."

msgid "``property_hint``"
msgstr "``sugerencia_propiedad``"

msgid "Enum value"
msgstr "Valor de enumeración"

msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""
"Uno de los valores: ref: `PropertyHint <enum_ @ GlobalScope_PropertyHint>` "
"para usar como sugerencia."

msgid "``hint_string``"
msgstr "``hint_string``"

msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr ""
"El texto de sugerencia de la propiedad. Lo mismo que agregaría en la "
"declaración ``exportar`` en GDScript."

msgid "``usage``"
msgstr "``uso``"

msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""
"Uno de los valores: ref: `PropertyUsageFlags "
"<enum_@GlobalScope_PropertyUsageFlags>` para definir el uso."

msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr ""
"Las claves ``nombre`` y ``valor_predeterminado`` son **obligatorias**, el "
"resto son opcionales."

msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""
"Tenga en cuenta que el método ``get_import_options`` recibe el número de "
"preset, por lo que puedes configurar las opciones para cada preset diferente "
"(especialmente el valor por defecto). En este ejemplo usamos la sentencia "
"``match`` pero si tienes muchas opciones y los presets sólo cambian el "
"valor, es posible que primero quieras crear un array de opciones y luego "
"cambiarlo basado en el preset."

msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""
"El método ``get_import_options`` se llama incluso si no se definen los "
"presets (haciendo que ``get_preset_count`` devuelva cero). Tienes que "
"devolver un array aunque esté vacío, de lo contrario puedes obtener errores."

msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""
"Para el método: ref: `get_option_visibility () "
"<class_EditorImportPlugin_method_get_option_visibility>`, simplemente "
"devolvemos ``true`` porque todas nuestras opciones (es decir, la única que "
"definimos) son visibles todo el tiempo."

msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""
"Si necesita hacer visible cierta opción solo si se establece otra con un "
"valor determinado, puede agregar la lógica en este método."

msgid "The ``import`` method"
msgstr "El método de ``importación``"

msgid ""
"The heavy part of the process, responsible for converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""
"La parte pesada del proceso, responsable de convertir los archivos en "
"recursos, está cubierta por el método: ref: `import () "
"<class_EditorImportPlugin_method_import>`. Nuestro código de muestra es un "
"poco largo, así que vamos a dividirlo en algunas partes:"

msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""
"La primera parte de nuestro método de importación se abre y lee el archivo "
"fuente. Usamos la clase: ref: `File <class_File>` para hacer eso, pasando el "
"parámetro `` source_file '' que es provisto por el editor."

msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr ""
"Si hay un error al abrir el archivo, lo devolvemos para que el editor sepa "
"que la importación no se realizó correctamente."

msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""
"Este código toma la línea del archivo que leyó antes y la divide en partes "
"separadas por una coma. Si hay más o menos de los tres valores, considera "
"que el archivo no es válido y reporta un error."

msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""
"Luego crea una nueva variable: ref: `Color <class_Color>` y establece sus "
"valores de acuerdo con el archivo de entrada. Si la opción `` use_red_anyway "
"'' está habilitada, entonces establece el color como rojo puro."

msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""
"Esta parte crea un nuevo: ref: `SpatialMaterial <class_SpatialMaterial>` que "
"es el recurso importado. Creamos una nueva instancia de él y luego "
"establecemos su color de albedo como el valor que obtuvimos antes."

msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""
"Esta es la última parte y bastante importante, porque aquí guardamos el "
"recurso creado en el disco. La ruta del archivo guardado es generada e "
"informada por el editor a través del parámetro `` save_path ''. Tenga en "
"cuenta que esto viene ** sin ** la extensión, así que lo agregamos usando: "
"ref: `string formatting <doc_gdscript_printf>`. Para esto, llamamos al "
"método `` get_save_extension '' que definimos anteriormente, así podemos "
"estar seguros de que no se desincronizarán."

msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""
"También devolvemos el resultado del método :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>`, así que si hay un error en este paso, el "
"editor lo sabrá."

msgid "Platform variants and generated files"
msgstr "Variantes de plataforma y archivos generados"

msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""
"Habrás notado que nuestro plugin ignoró dos argumentos del método "
"``import``. Esos son * argumentos de retorno* (de ahí la ``r`` al principio "
"de su nombre), lo que significa que el editor los leerá después de llamar a "
"su método de importación. Ambos son arrays que puedes rellenar con "
"información."

msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""
"El argumento ``r_platform_variants`` se usa si necesita importar el recurso "
"de manera diferente según la plataforma de destino. Si bien se llama "
"variantes de * plataforma *, se basa en la presencia de: ref: `etiquetas de "
"características <doc_feature_tags>`, por lo que incluso la misma plataforma "
"puede tener múltiples variantes según la configuración."

msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""
"Para importar una variante de plataforma, necesitas guardarla con la "
"etiqueta de la característica antes de la extensión, y luego empujar la "
"etiqueta a un array ``r_platform_variants`` para que el editor pueda saber "
"que lo hiciste."

msgid ""
"For example, let's say we save a different material for a mobile platform. "
"We would need to do something like the following:"
msgstr ""
"Por ejemplo, digamos que guardamos un material diferente para una plataforma "
"móvil. Necesitaríamos hacer algo como lo siguiente:"

msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""
"El argumento ``r_gen_files`` está destinado a archivos adicionales que se "
"generan durante su proceso de importación y deben conservarse. El editor lo "
"examinará para comprender las dependencias y asegurarse de que el archivo "
"adicional no se elimine inadvertidamente."

msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""
"Esto también es un array y debería estar lleno de rutas completas de los "
"archivos que guardas. Por ejemplo, creamos otro material para la siguiente "
"pasada y lo guardamos en un archivo diferente:"

msgid "Trying the plugin"
msgstr "Probar el complemento"

msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""
"Esto ha sido teórico, pero ahora que el complemento de importación está "
"listo, probémoslo. Asegúrese de haber creado el archivo de muestra (con el "
"contenido descrito en la sección de introducción) y guárdelo como `` test."
"mtxt ''. Luego active el complemento en la Configuración del proyecto."

msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""
"Si todo va bien, se agrega el plugin de importación al editor y se escanea "
"el sistema de archivos, haciendo que el recurso personalizado aparezca en el "
"panel de Sistema de Archivos. Si lo seleccionas y entras en el panel de "
"Importación, podrás ver la única opción para seleccionar allí."

msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""
"Crea un nodo MeshInstance en la escena y para su propiedad Mesh configura un "
"nuevo SphereMesh. Despliega la sección Material en el Inspector y luego "
"arrastra el archivo desde el panel de Sistema de Archivos hasta la propiedad "
"material. El objeto se actualizará en la ventana de visualización con el "
"color azul del material importado."

msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""
"Ve al panel Importar, activa la opción \"Usar rojo de todos modos\" y haz "
"clic en \"Reimportar\". Esto actualizará el material importado y debería "
"actualizar automáticamente la vista mostrando el color rojo en su lugar."

msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""
"¡Y eso es todo! ¡Tu primer plugin de importación está hecho! Ahora sé "
"creativo y haz plugins para tus propios formatos queridos. Esto puede ser "
"bastante útil para escribir los datos en un formato personalizado y luego "
"usarlos en Godot como si fueran recursos nativos. Esto muestra cómo el "
"sistema de importación es potente y extensible."

msgid "Translation status"
msgstr "Estado de traducción"
