# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Spatial gizmo plugins"
msgstr "Plugins de gizmos Spatial"

msgid "Introduction"
msgstr "Introducción"

msgid ""
"Spatial gizmo plugins are used by the editor and custom plugins to define "
"the gizmos attached to any kind of Spatial node."
msgstr ""
"Los complementos de gizmos espaciales son utilizados por el editor y los "
"complementos personalizados para definir los gizmos adjuntos a cualquier "
"tipo de nodo espacial."

msgid ""
"This tutorial will show you the two main approaches to defining your own "
"custom gizmos. The first option works well for simple gizmos and creates "
"less clutter in your plugin structure, while the second one will let you "
"store some per-gizmo data."
msgstr ""
"Este tutorial le mostrará los dos enfoques principales para definir sus "
"propios gizmos personalizados. La primera opción funciona bien para gizmos "
"simples y crea menos desorden en la estructura de su complemento, mientras "
"que la segunda le permitirá almacenar algunos datos por gizmo."

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""
"Este tutorial asume que ya sabe cómo crear complementos genéricos. En caso "
"de duda, consulte la página: ref: `doc_making_plugins`."

msgid "The EditorSpatialGizmoPlugin"
msgstr "El EditorSpatialGizmoPlugin"

msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""
"Independientemente del enfoque que elijamos, necesitaremos crear un nuevo: "
"ref: `EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>`. Esto nos "
"permitirá establecer un nombre para el nuevo tipo de gizmo y definir otros "
"comportamientos, como si el gizmo se puede ocultar o no."

msgid "This would be a basic setup:"
msgstr "Esta sería una configuración básica:"

msgid ""
"For simple gizmos, just inheriting :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""
"Para gizmos simples, simplemente heredar: ref: `EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` es suficiente. Si desea almacenar algunos "
"datos por gizmo o está transfiriendo un gizmo Godot 3.0 a 3.1+, debe optar "
"por el segundo enfoque."

msgid "Simple approach"
msgstr "Enfoque simple"

msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`has_gizmo()<class_EditorSpatialGizmoPlugin_method_has_gizmo>` method so "
"that it returns ``true`` when the spatial parameter is of our target type."
msgstr ""
"El primer paso es, en nuestro complemento de gizmo personalizado, anular el "
"método: ref: `has_gizmo () "
"<class_EditorSpatialGizmoPlugin_method_has_gizmo>` para que devuelva "
"``verdadero`` cuando el parámetro espacial es de nuestro tipo de destino."

msgid ""
"Then we can override methods like :ref:"
"`redraw()<class_EditorSpatialGizmoPlugin_method_redraw>` or all the handle "
"related ones."
msgstr ""
"Entonces podemos anular métodos como: ref: `redraw () "
"<class_EditorSpatialGizmoPlugin_method_redraw>` o todos los relacionados con "
"el identificador."

msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `redraw` method using :ref:"
"`get_material()<class_EditorSpatialGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""
"Note que creamos un material en el método `_init`, y lo recuperamos en el "
"método` redraw` usando: ref: `get_material () "
"<class_EditorSpatialGizmoPlugin_method_get_material>`. Este método recupera "
"una de las variantes del material dependiendo del estado del gizmo "
"(seleccionado y / o editable)."

msgid "So the final plugin would look somewhat like this:"
msgstr "La escena final del plugin debería verse similar a esta:"

msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>` to get properly "
"working handles."
msgstr ""
"Tenga en cuenta que acabamos de agregar algunos identificadores en el método "
"de redibujo, pero aún necesitamos implementar el resto de devoluciones de "
"llamada relacionadas con identificadores en: ref: `EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` para que los identificadores funcionen "
"correctamente."

msgid "Alternative approach"
msgstr "Enfoque alternativo"

msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`, maybe because we want to "
"have some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""
"En algunos casos, queremos proporcionar nuestra propia implementación de: "
"ref: `EditorSpatialGizmo <class_EditorSpatialGizmo>`, tal vez porque "
"queremos tener algún estado almacenado en cada gizmo o porque estamos "
"portando un complemento de gizmo antiguo y no queremos ir a través del "
"proceso de reescritura."

msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`create_gizmo()<class_EditorSpatialGizmoPlugin_method_create_gizmo>`, so it "
"returns our custom gizmo implementation for the Spatial nodes we want to "
"target."
msgstr ""
"En estos casos, todo lo que tenemos que hacer es, en nuestro nuevo "
"complemento de gizmo, anular: ref: `create_gizmo () "
"<class_EditorSpatialGizmoPlugin_method_create_gizmo>`, por lo que devuelve "
"nuestra implementación de gizmo personalizada para los nodos espaciales que "
"queremos apuntar."

msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorSpatialGizmo<class_EditorSpatialGizmo>`, like so:"
msgstr ""
"De esta manera, toda la lógica del gizmo y los métodos de dibujo se pueden "
"implementar en una nueva clase que se extiende: ref: `EditorSpatialGizmo "
"<class_EditorSpatialGizmo>`, así:"

msgid ""
"Note that we just added some handles in the redraw method, but we still need "
"to implement the rest of handle-related callbacks in :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>` to get properly working "
"handles."
msgstr ""
"Tenga en cuenta que acabamos de agregar algunos identificadores en el método "
"de redibujo, pero aún necesitamos implementar el resto de devoluciones de "
"llamada relacionadas con identificadores en: ref: `EditorSpatialGizmo "
"<class_EditorSpatialGizmo>` para que los identificadores funcionen "
"correctamente."

msgid "Translation status"
msgstr "Estado de traducción"
