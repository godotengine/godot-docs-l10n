# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using multiple threads"
msgstr "Usando múltiples hilos"

msgid "Threads"
msgstr "Hilos"

msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""
"Los hilos permiten la ejecución simultánea de código, lo que permite "
"descargar trabajo del hilo principal."

msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""
"Godot admite hilos y proporciona muchas funciones útiles para utilizarlos."

msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""
"Si estás utilizando otros lenguajes como C# o C++, puede ser más fácil "
"utilizar las clases de hilos que admiten esos lenguajes."

msgid ""
"Before using a built-in class in a thread, read :ref:`doc_thread_safe_apis` "
"first to check whether it can be safely used in a thread."
msgstr ""
"Antes de utilizar una clase incorporada en un hilo, lee :ref:"
"`doc_thread_safe_apis` primero para comprobar si se puede utilizar de forma "
"segura en un hilo."

msgid "Creating a Thread"
msgstr "Creando un hilo"

msgid "Creating a thread is very simple, just use the following code:"
msgstr "Crear un hilo es muy simple, sólo usa el siguiente código:"

msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""
"Tu función se ejecutará en un hilo separado hasta que regrese. Incluso si la "
"función ya ha regresado, el hilo debe recogerla, por lo que debes llamar a :"
"ref:`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, lo cual "
"esperará hasta que el hilo haya terminado (si aún no ha terminado) y luego "
"lo desechará correctamente."

msgid "Mutexes"
msgstr "Mutexes*"

msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`doc_thread_safe_apis` documentation to understand which engine APIs support "
"multiple thread access."
msgstr ""
"Acceder a objetos o datos desde múltiples hilos no siempre es compatible (si "
"lo haces, puede provocar comportamientos inesperados o fallos). Lee la "
"documentación de :ref:`doc_thread_safe_apis` para comprender qué APIs del "
"motor admiten el acceso desde múltiples hilos de forma segura."

msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""
"Cuando proceses tus propios datos o llames a tus propias funciones, como "
"regla general, trata de evitar acceder directamente a los mismos datos desde "
"diferentes hilos. Puedes encontrar problemas de sincronización, ya que los "
"datos no siempre se actualizan entre los núcleos de la CPU cuando se "
"modifican. Siempre utiliza un :ref:`Mutex<class_Mutex>` al acceder a un "
"fragmento de datos desde diferentes hilos."

msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""
"Al llamar a :ref:`Mutex.lock()<class_Mutex_method_lock>`, un hilo garantiza "
"que todos los demás hilos se bloquearán (colocados en estado suspendido) si "
"intentan *bloquear* el mismo mutex. Cuando se desbloquea el mutex llamando "
"a :ref:`Mutex.unlock()<class_Mutex_method_unlock>`, los otros hilos podrán "
"continuar con el bloqueo (pero solo uno a la vez)."

msgid "Here is an example of using a Mutex:"
msgstr "Aquí hay un ejemplo del uso de un Mutex:"

msgid "Semaphores"
msgstr "Semáforos"

msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""
"A veces quieres que tu hilo trabaje \"bajo demanda\". En otras palabras, le "
"indicas cuándo debe trabajar y lo suspendes cuando no está haciendo nada. "
"Para esto, se utilizan los :ref:`Semáforos<class_Semaphore>`. La función :"
"ref:`Semaphore.wait()<class_Semaphore_method_wait>` se utiliza en el hilo "
"para suspenderlo hasta que llegue algún dato."

msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""
"El hilo principal, en cambio, utiliza :ref:`Semaphore."
"post()<class_Semaphore_method_post>` para indicar que los datos están listos "
"para ser procesados:"

msgid "Translation status"
msgstr "Estado de traducción"
