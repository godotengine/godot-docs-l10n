# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "Controlando miles de peces con Partículas"

msgid ""
"The problem with :ref:`MeshInstances <class_MeshInstance>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
"El problema con :ref:`MeshInstances <class_MeshInstance>` es que resulta "
"complicado actualizar su array de transformación. Es genial para colocar "
"muchos objetos estáticos alrededor de la escena. Pero sigue siendo difícil "
"mover los objetos alrededor de la escena."

msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`Particles <class_Particles>` node. Particles take advantage of GPU "
"acceleration by computing and setting the per-instance information in a :ref:"
"`Shader <class_Shader>`."
msgstr ""
"Para hacer que cada instancia se mueva de forma interesante, usaremos un "
"nodo :ref:`Particles <class_Particles>`. Las partículas aprovechan la "
"aceleración de la GPU calculando y configurando la información por instancia "
"en un :ref:`Shader <class_Shader>`."

msgid ""
"Particles are not available in GLES2, instead use :ref:`CPUParticles "
"<class_CPUParticles>`, which do the same thing as Particles, but do not "
"benefit from GPU acceleration."
msgstr ""
"Las partículas no están disponibles en GLES2, en su lugar usa :ref:"
"`CPUParticles <class_CPUParticles>`, que hacen lo mismo que las partículas, "
"pero no se benefician de la aceleración de la GPU."

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"Primero crea un nodo de Partículas. Luego, bajo \"Draw Passes\" establece el "
"\"Draw Pass 1\" de la Partícula a tu :ref:`Mesh <class_Mesh>`. Luego en "
"\"Process Material\" crea un nuevo :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."

msgid "Set the ``shader_type`` to ``particles``."
msgstr "Ponga el ``shader_type`` a ``particles``."

msgid "Then add the following two functions:"
msgstr "A continuación, añade dos funciones:"

msgid ""
"These functions come from the default :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>`. They are used to generate a random number from "
"each particle's ``RANDOM_SEED``."
msgstr ""
"Estas funciones vienen por defecto :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>`. Se usan para generar un número aleatorio para "
"``RANDOM_SEED`` de partícula."

msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the Spatial shader of the mesh, and also in the particle shader "
"the next time it is run."
msgstr ""
"Una cosa única de los shaders de partículas es que algunas variables "
"incorporadas se guardan a través de los fotogramas. ``TRANSFORM``, "
"``COLOR``, y ``CUSTOM`` pueden ser accedidas en al Spatial shader de la "
"malla, y también en el shader de partículas la próxima vez que se ejecuta."

msgid ""
"Next, setup your ``vertex`` function. Particles shaders only contain a "
"vertex function and no others."
msgstr ""
"A continuación, configura tu función ``vertex``. Los shaders de partículas "
"sólo contienen una función de vértice y ninguna otra."

msgid ""
"First we will distinguish between code that needs to be run only when the "
"particle system starts and code that should always run. We want to give each "
"fish a random position and a random animation offset when the system is "
"first run. To do so, we wrap that code in an ``if`` statement that checks "
"the built-in variable ``RESTART`` which becomes ``true`` for one frame when "
"the particle system is restarted."
msgstr ""
"Primero distinguiremos entre el código que necesita ser ejecutado sólo "
"cuando el sistema de partículas se inicia y el código que siempre debe "
"ejecutarse. Queremos darle a cada pez una posición aleatoria y un "
"desplazamiento de animación aleatorio cuando el sistema se ejecuta por "
"primera vez. Para ello, envolvemos ese código en una declaración ``if`` que "
"comprueba la variable incorporada ``RESTART`` que se convierte en ``true`` "
"para un fotograma cuando el sistema de partículas es reiniciado."

msgid "From a high level, this looks like:"
msgstr "Desde un alto nivel, esto parece:"

msgid ""
"Next, we need to generate 4 random numbers: 3 to create a random position "
"and one for the random offset of the swim cycle."
msgstr ""
"A continuación, necesitamos generar 4 números al azar: 3 para crear una "
"posición aleatoria y uno para el desplazamiento aleatorio del ciclo de "
"natación."

msgid ""
"First, generate 4 seeds inside the ``RESTART`` block using the ``hash`` "
"function provided above:"
msgstr ""
"Primero, genera 4 semillas dentro del bloque ``RESTART`` usando la función "
"``hash`` proporcionada arriba:"

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""
"Luego, usa esas semillas para generar números aleatorios usando "
"``rand_from_seed``:"

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"Finalmente, asigna la ``position`` a `TRANSFORM[3].xyz``, que es la parte de "
"la transformación que contiene la información de la posición."

msgid "Remember, all this code so far goes inside the ``RESTART`` block."
msgstr ""
"Recuerda, todo este código hasta ahora va dentro del bloque ``RESTART``."

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""
"El shader de vértices para su malla puede permanecer exactamente igual que "
"en el tutorial anterior."

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"Ahora puedes mover cada pez individualmente en cada fotograma, ya sea "
"agregando a la ``TRANSFORM`` directamente o escribiendo ``VELOCITY``."

msgid "Let's transform the fish by setting their ``VELOCITY``."
msgstr "Transformemos a los peces estableciendo su ``VELOCITY``."

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""
"Esta es la forma más básica de establecer la ``VELOCITY``, cada partícula (o "
"pez) tendrá la misma velocidad."

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""
"Con sólo con poner ``VELOCITY`` puedes hacer que los peces naden como tú "
"quieras. Por ejemplo, intenta el código inferior."

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr "Esto le dará a cada pez una velocidad única entre ``2`` y ``10``."

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"Si usaste ``CUSTOM.y`` en el último tutorial, también puedes ajustar la "
"velocidad de la animación de natación basada en la ``VELOCITY``. Sólo usa "
"``CUSTOM.y``."

msgid "This code gives you the following behavior:"
msgstr "Este código proporciona el siguiente comportamiento:"

msgid ""
"Using a ParticlesMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"Usando un ParticlesMaterial puedes hacer que el comportamiento de los peces "
"sea tan simple o complejo como quieras. En este tutorial sólo establecemos "
"la Velocidad, pero en tus propios shaders también puedes establecer el "
"``COLOR``, la rotación, la escala (a través de ``TRANSFORM``). Por favor, "
"consulta la :ref:`Particles Shader Reference <doc_particle_shader>` para más "
"información sobre los shaders de partículas."

msgid "Translation status"
msgstr "Estado de traducción"
