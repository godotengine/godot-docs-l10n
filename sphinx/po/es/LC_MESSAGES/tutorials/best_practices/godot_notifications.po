# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Notificaciones en Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Cada Object en Godot implementa un método :ref:`_notification "
"<class_Object_method__notification>`. Su propósito es permitir que Object "
"responda a una variedad de callbacks a nivel de motor que puedan estar "
"relacionados. Por ejemplo, si el motor le debe decir a un :ref:`CanvasItem "
"<class_CanvasItem>` que tiene que \"dibujar\", este llamará a "
"``_notification(NOTIFICATION_DRAW)``."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Algunas de estas notificaciones, como draw, son útiles para anular en "
"scripts. Incluso Godot expone muchos de estos con funciones dedicadas:"

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""
"Lo que los usuarios pueden *no* entender es que las notificaciones existen "
"para otros tipos distintos a Node únicamente:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: un callback que se "
"disparará durante la inicialización, no es accesible a scripts."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: un callback que se dispara "
"antes de que el motor borre un Object, como el caso de un 'destructor'."

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: un callback que se "
"dispara cuando el ratón entra en la ventana que muestra el contenido del "
"juego en el sistema operativo."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"Y muchos de los callbacks que existen en Nodes no tienen ningún método "
"dedicado, pero son igualmente útiles."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: un callback que se dispara en "
"el momento en que se agrega un hijo a un nodo."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: un callback que se dispara "
"cuando se remueve un hijo de un nodo."

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: un callback que se dispara "
"después de que un nodo Popup completa cualquier método ``popup*``. Este es "
"diferente de la señal ``about_to_show`` que se emite *antes* de su aparición."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""
"Se puede acceder a todas estas notificaciones personalizadas desde el método "
"universal ``_notification``."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Los métodos en la documentación etiquetados como \"virtuales\" también están "
"destinados a ser sobrescritos por scripts."

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"Un ejemplo clásico es el método :ref:`_init <class_Object_method__init>` en "
"Object. Este no posee un equivalente ``NOTIFICATION_*``, pero el motor "
"llamará igual al método. La mayoría de los lenguajes (excepto C#) dependen "
"de este como constructor."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Entonces, en qué situaciones se deben usar cada una de esas notificaciones o "
"funciones virtuales?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process vs. _physics_process vs. \\*_input"

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"Utiliza ``_process`` cuando necesitas un delta tiempo dependiente del "
"framerate entre cada frame. Si el código que actualiza los datos de un "
"objeto necesita actualizarlo todas las veces que sea posible, este es el "
"lugar ideal. Lógica recurrente que revisa y cachea datos a menudo se suele "
"ejecutar aquí, pero depende de la velocidad en que se necesitan actualizar "
"cosas, si no se necesita ejecutar en cada frame, se puede implementar un "
"bucle Timer-yield-timeout como otra opción."

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Utiliza ``_physics_process`` cuando necesites un tiempo delta independiente "
"de la velocidad de cuadros entre fotogramas. Si el código necesita "
"actualizaciones constantes a lo largo del tiempo, independientemente de lo "
"rápido o lento que avance el tiempo, este es el lugar indicado. Las "
"operaciones cinemáticas recurrentes y de transformación de objetos deben "
"ejecutarse aquí."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"Mientras sea posible, para obtener el mejor desempeño, se debe evitar "
"realizar chequeos de entrada durante callbacks. ``_process`` y "
"``_physics_process`` se dispararán en cada oportunidad (no \"duermen\" por "
"defecto). En contraste, el callback ``*_input`` disparará sólamente en los "
"frames que el motor ha detectado realmente una entrada."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"Se pueden revisar igualmente acciones de entrada dentro de los callback "
"input. Si se quiere usar el delta tiempo, se puede tomar de los métodos "
"relacionados al delta tiempo."

msgid "_init vs. initialization vs. export"
msgstr "_init versus inicialización versus export"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"Si los scripts inicializan su propia sub estructura de árbol de nodos, sin "
"una escena, el código se ejecutará aquí. Otras propiedades del "
"inicializaciones independientes del árbol de escenas deberán realizarse aquí "
"también. Esto sucede antes de ``_ready`` o ``_enter_tree``, pero después de "
"que el script crea e inicializa sus propiedades."

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""
"Los scripts tienen tres tipos de asignación de propiedades que pueden "
"suceder durante la instanciación:"

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""
"Cuando se instancia una escena, los valores de las propiedades se asignarán "
"de acuerdo a la siguiente secuencia:"

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**Valor de asignación inicial:** la instanciación asignará el valor de "
"inicialización o el valor inicial asignado. Las asignaciones iniciales "
"tienen prioridad por sobre los valores de inicialización."

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**Valores de asignación exportados:** Si se instancia desde una escena en "
"lugar de por script, Godot asignará el valor exportado para reemplazar el "
"valor inicial definido en el script."

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Como resultado, instanciar un script versus una escena afectará tanto a la "
"inicialización como el número de veces que el motor llamará al setter."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"Cuando se instancia una escena conectada a la primer escena ejecutada, Godot "
"instanciará nodos en el árbol (haciendo llamadas a ``_init``) y construirá "
"el árbol hacia abajo desde la raíz. Esto causa llamadas ``_enter_tree`` en "
"cascada hacia abajo. Una vez que el árbol esté completo, los nodos hoja "
"llaman a ``_ready``. Un nodo llamará a este método una vez que todos los "
"nodos hijos han finalizado su ejecución. Esto causa una cascada en reversa, "
"hacia arriba hasta la raíz del árbol."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"Cuando se instancia un script o una escena independiente, los nodos no son "
"agregados al Árbol de Escenas en su creación, por lo que no se activan los "
"callbacks ``_enter_tree``. En cambio, sólo se produce la llamada ``_init``. "
"Cuando la escena se agrega al Árbol de Escenas, ocurren las llamadas "
"``_enter_tree`` y luego ``_ready``."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Si se necesita disparar un comportamiento que suceda cuando los nodos son "
"asignados como hijos a otros, sin importar si ocurre como parte de una "
"escena principal o activa, se puede utilizar la notificación :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`. Por ejemplo, aquí hay un "
"fragmento de código que conecta un método de una señal personalizada al nodo "
"padre sin fallar. Esto es útil en nodos centrados en datos que se pueden "
"querer crear en tiempo de ejecución."

msgid "Translation status"
msgstr "Estado de traducción"
