# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Cuándo y cómo evitar el uso de nodos para todo"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Los nodos son económicos de producir, pero incluso estos tienen sus límites. "
"Un proyecto puede tener decenas de miles de nodos haciendo cosas. Sin "
"embargo, cuanto más complejo es su comportamiento, mayor es la tensión que "
"cada uno añade al rendimiento de un proyecto."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot proporciona objetos más ligeros para crear APIs que los nodos "
"utilizan. Recuerda tenerlos en cuenta como opciones a la hora de diseñar "
"cómo deseas construir las características de tu proyecto."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`: El objeto más liviano existente, Object debe "
"administrar la memoria manualmente. Dicho esto, no es difícil crear una "
"estructura de datos propia, o estructura tipo nodos, que también serán más "
"livianas que la clase :ref:`Node <class_Node>`."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Example:** Ver el nodo :ref:`Tree <class_Tree>`. Este soporta un gran "
"nivel de personalización para una tabla de contenidos con un número "
"arbitrario de filas y columnas. Los datos que este usa para generar la "
"visualización es un árbol de objetos :ref:`TreeItem <class_TreeItem>`."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Ventajas:** Simplificando la API propia para objetos de poco alcance, "
"ayuda a mejorar la accesibilidad y el tiempo de iteración. En lugar de "
"trabajar con la librería de Node completa, se crea un conjunto reducido de "
"Objects desde donde un nodo puede generar y administrar los sub-nodos "
"apropiados."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"Hay que tener cuidado al manipularlos. Se puede almacenar un objeto en una "
"variable, pero estas referencias pueden perder su valor sin previo aviso. "
"Por ejemplo, si el creador del objeto decide eliminarlo de improviso, esto "
"provocaría un estado de error al acceder a él."

msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`Reference <class_Reference>`: Sólo un poco más complicado que Object. "
"Registran las referencias a sí mismos, borrándose de la memoria cuando no "
"existen más referencias. Son útiles para la mayoría de los casos en que se "
"necesitan datos en una clase personalizada."

msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**Ejemplo:** Ver el objeto :ref:`File <class_File>`. Este funciona como un "
"Objeto regular, excepto que uno no necesita borrarlo."

msgid "**Advantages:** same as the Object."
msgstr "**Ventajas:** las mismas que Object."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: Algo más complejo que Reference. Tiene la "
"habilidad innata de serializar/deserializar (grabar y cargar) sus "
"propiedades desde/hacia un archivo de recursos de Godot."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**Ejemplo:** Scripts, PackedScene (para archivos de escena) y otros tipos "
"como las clases :ref:`AudioEffect <class_AudioEffect>`. Cada uno de esos "
"puede ser guardado y cargado, por eso extienden de Resource."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Advantages:** Mucho ya :ref:`se ha mencionado anteriormente "
"<doc_resources>` sobre las ventajas de :ref:`Resource <class_Resource>` "
"sobre métodos tradicionales de almacenamiento de datos. En el contexto del "
"uso de Resources sobre Nodos, mantienen la ventaja de su compatibilidad con "
"el Inspector. Mientras son casi tan livianos como Object/Reference, pueden "
"mostrar y exportar propiedades en el Inspector. Esto les permite cumplir el "
"propósito de usabilidad de sub-nodos así como mejorar el desempeño si se "
"planea tener muchos Resource/Node en las escenas."

msgid "Translation status"
msgstr "Estado de traducción"
