# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Tipado estático en GDScript"

msgid "In this guide, you will learn:"
msgstr "En esta guía aprenderás:"

msgid "**How to use types in GDScript**"
msgstr "**Cómo usar tipos en GDScript**"

msgid "That **static types can help you avoid bugs**"
msgstr "Que **los tipos estáticos pueden ayudarte a evitar errores**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"El lugar y la forma en que use esta nueva funcionalidad de idioma depende "
"totalmente de usted: ¡puede usarla solo en algunos archivos GDScript "
"confidenciales, usarla en todas partes o escribir código como siempre lo "
"hizo!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Los tipos estáticos se pueden usar en variables, constantes, funciones, "
"parámetros y tipos de retorno."

msgid "Typed GDScript is available since Godot 3.1."
msgstr "GDScript de tipado estático está disponible desde Godot 3.1."

msgid "A brief look at static typing"
msgstr "Un breve vistazo a los tipos estáticos"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"Con GDScript tipado, Godot puede detectar aún más errores mientras escribes "
"código. Te da a ti y a tu equipo más información mientras trabajan, ya que "
"los tipos de los argumentos aparecen cuando llamas a un método."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Imagina que estás programando un sistema de inventario. Codificas un nodo "
"``Item``, luego un nodo ``Inventory``. Para agregar artículos al inventario, "
"las personas que trabajan con su código siempre deben pasar un ``Item`` al "
"método `` Inventory.add``. Con los tipos, puedes hacer cumplir esto:"

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Otra ventaja significativa de GDScript de tipado estático es el nuevo ** "
"sistema de advertencia **. A partir de la versión 3.1, Godot le advierte "
"sobre su código a medida que lo escribe: el motor identifica las secciones "
"de su código que pueden provocar problemas en el tiempo de ejecución, pero "
"le permite decidir si desea dejar el código como está. Más sobre esto en un "
"momento."

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Los tipos estáticos también le dan mejores opciones de completado del "
"código. A continuación, puedes ver la diferencia entre las opciones de "
"completado de tipo dinámico y estático para una clase llamada "
"``PlayerController``."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Probablemente hayas almacenado un nodo en una variable y escrito un punto "
"esperando sugerencias de autocompletado sin obtener nada:"

msgid "code completion options for dynamic"
msgstr "Opciones de autocompletado para dinámico"

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Esto se debe al código dinámico. Godot no puede saber qué tipo de nodo o "
"valor está pasando a la función. Sin embargo, si escribe el tipo "
"explícitamente, obtendrás todos los métodos y variables públicos del nodo:"

msgid "code completion options for typed"
msgstr "Opciones de autocompletado para tipado"

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"En el futuro, GDScript de tipado estático también aumentará el rendimiento "
"del código: ¡la compilación Just-In-Time y otras mejoras del compilador ya "
"están en la hoja de ruta!"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"En general, la programación de tipado estático le brinda una experiencia más "
"estructurada. Ayuda a prevenir errores y mejora el aspecto de "
"autodocumentación de sus scripts. Esto es especialmente útil cuando trabajas "
"en equipo o en un proyecto a largo plazo: los estudios han demostrado que "
"los desarrolladores dedican la mayor parte de su tiempo a leer el código de "
"otras personas o los scripts que escribieron en el pasado y olvidaron. "
"Cuanto más claro y más estructurado sea el código, más rápido será de "
"entender, más rápido podrá avanzar."

msgid "How to use static typing"
msgstr "Cómo utilizar tipos estáticos"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Para definir el tipo de una variable o una constante, escriba dos puntos "
"después del nombre de la variable, seguido de su tipo. P.ej. ``var health: "
"int``. Esto obliga al tipo de variable a permanecer siempre igual:"

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot intentará inferir tipos si escribe dos puntos, pero puedes omitirlo:"

msgid "Currently you can use three types of… types:"
msgstr "Actualmente puedes usar tres tipos de ... tipos:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Integrados <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Clases principales y nodos (``Object``, ``Node``, ``Area2D``, ``Camera2D``, "
"etc.)"

msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"Tus propias clases personalizadas. Echa un vistazo a la nueva "
"característica :ref:`class_name<doc_gdscript_basics_class_name>` para "
"registrar tipos en el editor."

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"No necesitas escribir sugerencias de tipo para constantes, ya que Godot lo "
"establece automáticamente a partir del valor asignado. Pero aún puede "
"hacerlo para aclarar la intención de su código."

msgid "Custom variable types"
msgstr "Tipos personalizados"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Puedes utilizar cualquier clase, incluidas sus clases personalizadas, como "
"tipos. Hay dos formas de usarlos en scripts. El primer método es precargar "
"el script que desea utilizar como un tipo en una constante:"

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"El segundo método es usando la palabra clave ``class_name`` cuando lo creas. "
"Para el ejemplo anterior, tu Rifle.gd se vería así:"

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Si usas ``class_name``, Godot registrará el tipo Rifle globalmente en el "
"editor y lo podrás usar en cualquier parte, sin tener que precargarlo en una "
"constante:"

msgid "Variable casting"
msgstr "Conversión de variables (casting)"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"Casting es un concepto clave en lenguajes tipados, es la conversión de un "
"valor de un tipo a otro."

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Imagina un Enemy en tu juego, que extiende de ``Area2D``. Y quieres que "
"colisione con el Player, un ``KinematicBody2D`` con un script asociado "
"llamado ``PlayerController``. Usarás la señal ``on_body_entered`` para "
"detectar la colisión. Con el código tipado, el cuerpo detectado será de un "
"tipo genérico ``PhysicsBody2D`` y no tu ``PlayerController``, en el callback "
"de ``_on_body_entered``."

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Puedes comprobar si ``PhysicsBody2D`` es tu Jugador con la palabra clave de "
"conversión ``as`` y usando ``:`` para forzar a la variable a usar este tipo. "
"Esto hace que la variable se asuma como del tipo ``PlayerController``:"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Como estamos lidiando con tipos personalizados, si el ``body`` no extiende "
"``PlayerControler, la variable ``Player`` será null. Podemos usar esto para "
"saber si body es Player o no. También tendremos mejor autocompletado en la "
"variable Player gracias a la conversión."

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Si intentas convertir a un tipo integrado y falla, Godot disparará un error."

msgid "Safe lines"
msgstr "Líneas seguras"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Puedes usar casting para asegurarte de tener líneas de código seguras. Las "
"líneas seguras son una nueva herramienta de Godot 3.1 que indican cuando "
"líneas ambiguas de código son de tipado seguro (type-safe). Puedes mezclar "
"codigo dinámico y tipado y a veces Godot no tendrá información suficiente "
"para indicar si la instrucción resultará o no en un error en tiempo de "
"ejecución."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Esto sucede cuando obtienes un nodo hijo. Tomemos un temporizador (timer) "
"como ejemplo: con código dinámico obtendrás el nodo con ``$Timer``. GDScript "
"soporta lo comunmente llamado `duck-typing https://es.wikipedia.org/wiki/"
"Duck_typing`, así que mientras que tu temporizador es de tipo ``Timer``, "
"también es un ``Node`` y un ``Object``, las dos clases de las cual extiende. "
"Con GDScript dinámico no deberá importarte de qué tipo es el nodo mientras "
"tenga los métodos que necesites llamar."

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Puedes usar casting para decirle a Godot el tipo que esperas cuando obtienes "
"un nodo: ``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot "
"se asegurará de que el tipo es correcto y en ese caso, la línea se marcará "
"de verde a la izquierda del editor de script."

msgid "Unsafe vs Safe Line"
msgstr "Linea Segura vs Insegura"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Línea no segura (línea 7) vs Línea segura (líneas 6 y 8)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Puedes apagar el chequeo de líneas seguras (safe lines) o cambiar el color "
"en los ajustes del editor."

msgid "Define the return type of a function with the arrow ->"
msgstr "Define el tipo de retorno de una función con la flecha ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Para definir el tipo de retorno de una función, escribe un guion y un "
"símbolo mayor que ``->`` después de su declaración, seguido del tipo de "
"retorno:"

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"El tipo ``void`` significa que la función no retorna nada. Puedes usar "
"cualquier tipo como con las variables:"

msgid "You can also use your own nodes as return types:"
msgstr "También puedes usar tus propios nodos como tipos de retorno:"

msgid "Typed or dynamic: stick to one style"
msgstr "Tipado estático o dinámico: apégate a un estilo"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"GDScript de tipado estático y GDScript de tipado dinámico pueden coexistir "
"en el mismo proyecto. Pero se recomienda seguir uno de los dos estilos para "
"mantener la coherencia en el código base y para tus compañeros. Es más fácil "
"para todos trabajar juntos si sigue las mismas pautas, y más rápido para "
"leer y comprender el código de otras personas."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"El código tipado lleva más tiempo para escribir, pero tiene el beneficio que "
"se mencionó anteriormente. Aquí hay un ejemplo del mismo script vacío en un "
"estilo dinámico:"

msgid "And with static typing:"
msgstr "Y con tipado estático:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Como puedes ver, se pueden usar tipos con métodos virtuales del motor. Los "
"callbacks de señales, como cualquier otro método, también pueden usar tipos. "
"Aquí hay una señal ``body_entered`` con tipado dinámico:"

msgid "And the same callback, with type hints:"
msgstr "Y el mismo callback con tipos especificados:"

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Eres libre de reemplazar, por ejemplo, el ``CollisionObject2D``, con tu "
"propio tipo, para establecer parámetros automáticamente:"

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"La variable ``bullet`` puede contener cualquier ``CollisionObject2D`` pero "
"nos aseguraremos de que sea nuestro ``Bullet``, un nodo que creamos para "
"nuestro proyecto. Si es cualquier otra cosa, como un ``Area2D`` o cualquier "
"otro que no extienda de ``Bullet``, la variable ``bullet`` será ``null``."

msgid "Warning system"
msgstr "Sistema de advertencias"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""
"La documentación sobre el sistema de advertencias de GDScript se ha movido "
"a :ref:`doc_gdscript_warning_system`."

msgid "Cases where you can't specify types"
msgstr "Casos en los que no puedes especificar tipos"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Para concluir con esta introducción, cubriremos algunos de los casos donde "
"no se puede usar tipado. Todos los ejemplos siguientes **generarán errores**."

msgid "You can't use Enums as types:"
msgstr "No puedes usar Enums como tipos:"

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""
"No puedes especificar tipos de miembros individuales de un array. Esto te "
"dará un error:"

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"No puedes forzar la asignación de tipos en un bucle ``for``, ya que cada "
"elemento de ``for`` se ejecuta con un tipo ya definido para el bucle. Así "
"que **no puedes** escribir:"

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "Dos scripts no pueden depender uno del otro de manera cíclica:"

msgid "Summary"
msgstr "Sumario"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"GDScript tipado es una herremienta poderosa. Disponible desde la versión 3.1 "
"de Godot, ayuda a escribir código más estructurado, evitar errores comunes y "
"crear sistemas más escalables. En el futuro, tipos estáticos permitirán "
"mejorar el rendimiento gracias a optimizaciones del compilador."

msgid "Translation status"
msgstr "Estado de traducción"
