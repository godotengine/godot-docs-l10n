# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDNative C example"
msgstr "Ejemplo de GDNative C"

msgid "Introduction"
msgstr "Introducción"

msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""
"Este tutorial introducira lo mínimo necesario para crear modulos de "
"GDNative. Este debería ser tu inicio en el mundo del GDNative. Entender "
"estos contenidos de este tutorial te ayudara a entender todo lo que vendrá "
"luego de esto."

msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."
msgstr ""
"Antes de comenzar, puedes descargar el código fuente del ejemplo del objeto "
"que describiremos a continuación en el repositorio `GDNative-demos <https://"
"github.com/godotengine/gdnative-demos/tree/master/c/simple>`_."

msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""
"Este proyecto de ejemplo también contiene un archivo SConstruct que facilita "
"un poco la compilación, pero en este tutorial haremos las cosas a mano para "
"entender el proceso."

msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""
":ref:`GDNative <class_GDNative>` puede ser usado para crear bastantes tipos "
"de adiciones a Godot, usar interfaces tales como :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. En este tutorial vamos a ver como crear un "
"módulo :ref:`NativeScript <class_NativeScript>`. NativeScript te permite "
"escribir lógica en C o C++ de manera similar a como escribirias un archivo "
"GDScript. Estaresmos creando el equivalente en C de este GDScript:"

msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""
"Los próximos tutoriales se centrarán en los otros tipos de modulos GDNative "
"y explicarán cuándo y cómo usar cada uno."

msgid "Prerequisites"
msgstr "Pre-requisitos"

msgid "Before we start you'll need a few things:"
msgstr "Antes de comenzar, necesitará algunas cosas:"

msgid "A Godot executable for your target version."
msgstr "Un ejecutable de Godot para tu versión objetivo."

msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""
"Un compilador de C. En Linux, instale ``gcc`` o ``clang`` mediante su gestor "
"de paquetes. En macOS, puede instalar Xcode desde la App Store de Mac. En "
"Windows, puede usar Visual Studio 2015 o superior, o MinGW-w64."

msgid ""
"A Git clone of the `godot-headers repository <https://github.com/godotengine/"
"godot-headers.git>`_: these are the C headers for Godot's public API exposed "
"to GDNative."
msgstr ""
"Un clon de Git del repositorio `godot-headers <https://github.com/"
"godotengine/godot-headers.git>`_: estos son los encabezados de C para la API "
"pública de Godot expuesta a GDNative."

msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""
"Para esto le sugerimos que cree una carpeta para este proyecto de ejemplo de "
"GDNative, después abra una terminal en esa carpeta y ejecutelo:"

msgid "This will download the required files into that folder."
msgstr ""
"Esto requiere que descarges los arhivos requeridos dentro de la carpeta."

msgid ""
"If you plan to use Git for your GDNative project, you can also add ``godot-"
"headers`` as a Git submodule."
msgstr ""
"Si planeas usar Git para tu proyecto en GDNative, puedes añadir "
"``godot_headers`` como un submódulo de Git."

msgid ""
"The ``godot-headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.4``) and ideally actual release (e.g. ``3.4.4-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""
"El depósito ``Godot Headers`` tiene ramas distintas. Conforme Godot "
"evoluciona, también lo hace GDNative. Mientras que intentamos conservar la "
"compatibilidad entre cada versión, deberías de compilar tu módulo de "
"GDNative de acuerdo a las cabeceras correspondientes a la rama estable de "
"Godot (p. ej. ``3.1``), e idealmente la versión de lanzamiento (p. ej. "
"``3.1.1-stable``) que usas. Los módulos de GDNative compilados de acuerdo a "
"versiones antiguas de cabeceras de Godot *podrían* funcionar con versiones "
"nuevas del motor, pero no vice-versa."

msgid ""
"The ``master`` branch of the ``godot-headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""
"La rama ``master`` del repositorio ``godot-headers`` se mantiene en línea "
"con la rama ``master`` de Godot y, por lo tanto, contiene las definiciones "
"de clases y estructuras de GDNative que funcionarán con las últimas "
"compilaciones de desarrollo."

msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot-headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.4.4-stable`` tag for "
"use with Godot 3.4.4. In your cloned repository, you can do:"
msgstr ""
"Si deseas escribir un módulo GDNative para una versión estable de Godot, "
"debes mirar las etiquetas Git disponibles (con ``git tags``) para encontrar "
"aquella que coincida con la versión de tu motor. En el repositorio ``godot-"
"headers``, estas etiquetas están precedidas por ``godot-``, por lo que "
"puedes hacer un checkout en la etiqueta ``godot-3.4.4-stable``, por ejemplo, "
"para usar con Godot 3.4.4. En tu repositorio clonado, puedes hacer lo "
"siguiente:"

msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.4``), which you would also "
"check out with ``git checkout 3.4``."
msgstr ""
"Si por alguna razón falta una etiqueta que coincida con tu versión estable, "
"puedes utilizar la rama estable correspondiente (por ejemplo, ``3.4``) como "
"alternativa, la cual también puedes seleccionar con ``git checkout 3.4``."

msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""
"Si está construyendo Godot desde una fuente con tus propios cambios que "
"afectan GDNative, puede encontrar las clases actualizadas y la definición de "
"la estructura en ``<godotsource>/modules/gdnative/include``"

msgid "Our C source"
msgstr "Nuestra fuente C"

msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""
"Comencemos por escribir nuestro código principal. Eventualmente, queremos "
"terminar con una estructura de archivos que se vea similar a esto:"

msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot-headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""
"Abre Godot y crea un nuevo proyecto llamado \"simple\" junto a tu clon de "
"Git de ``godot-headers``. Esto creará la carpeta \"simple\" y el archivo "
"\"project.godot\". Luego, manualmente crea una carpeta \"src\" junto a la "
"carpeta \"simple\" y una subcarpeta \"bin\" dentro de la carpeta \"simple\"."

msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""
"Comenzaremos echando un vistazo a lo que nuestro archivo ``simple.c`` "
"contiene. Por el momento, vamos a crear una fuente singular en C sin una "
"cabecera para simplificar las cosas. Cuando comiences a escribir proyectos "
"más grandes, es recomendable dividir tu proyecto en varios documentos; sin "
"embargo, eso va más allá de la meta de este tutorial."

msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""
"Veremos el código fuente poco a poco así que todas las partes debajo "
"deberían estar juntas dentro de un gran archivo. Cada sección será explicada "
"a medida que sea añadida."

msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""
"El código superior incluye una cabecera en referencia a la estructura de la "
"API de GDNative y una cabecera estándar, las cuales usaremos más adelante "
"para operaciones de texto. Después define dos punteros a otras dos "
"estructuras. GDNative incluye una gran repertorio de funciones para enviar "
"llamados de vuelta al ejecutable principal de Godot. Con el fin de que tu "
"módulo tenga acceso a tales funciones, GDNative provee a tu aplicación con "
"una estructura que contiene punteros a todas estas funciones."

msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""
"Para mantener esta implementación modular y fácilmante extendible, las "
"funciones núcleo están disponibles a través del \"núcleo\" de la estructura "
"de la API, pero funciones adicionales tienen su propia \"estructura de "
"GDNative\" que son accesibles entre extensiones."

msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""
"En nuestro ejemplo, accederemos a una de estas extensiones para ganar acceso "
"a las funciones especificamente necesitadas para NativeScript."

msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""
"Un archivo NativeScript se comporta como un script cualquiera en Godot. "
"Debido a que la API de NativeScript es de un nivel bastante bajo, esta "
"requiere que la biblioteca especifique varios elementos con mayor detalle "
"que otros sistemas de scripting, como lo es GDScript. Cuando una instancia "
"de NativeScript es creada, un constructor de la biblioteca es llamado. "
"Cuando la misma instancia es eliminada, el destructor correspondiente es "
"ejectuado."

msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""
"Estas son declaraciones frontales para las funciones que implementaremos "
"para nuestro objeto. Necesitamos un constructor y un destructor. "
"Adicionalmente, el objeto tendrá un método llamado ``get_data``."

msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""
"Lo siguiente es el primero de muchos puntos de entrada que Godot llamará "
"cuando nuestra libería dinámica es cargada. Estos métodos están prefijados "
"con ``godot_``(puedes cambiar esto luego) seguido de su nombre. "
"``gdnative_init`` es una función que inicia nuestra libería dinámica. Godot "
"dará un \"pointer\" a una estructura que contenga varios bits de información "
"que quizás encontremos útiles entre los cuales el \"pointer\" a nuestras "
"estructuras de API."

msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""
"Para cualquier estructura adicional de la API necesitamos hacer un bucle a "
"través de nuestro array de extensiones y comprobar el tipo de extensión."

msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""
"A continuación está ``gdnative_terminate`` la cual es llamada antes de que "
"la biblioteca sea descargada. Godot descargará la biblioteca cuando no sea "
"usada por ningún objeto. Aquí puedes ejecutar cualquier aseo que sea "
"necesario, por ahora, vamos a limpiar nuestros punteros a la API."

msgid ""
"Finally, we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""
"Finalmente, tenemos ``nativescript_init`` que es la función más importante "
"que necesitaremos hoy. Esta función será llamada por Godot en el proceso de "
"cargar una biblioteca de GDNative y comunica de vuelta al motor los objetos "
"que hacemos disponibles."

msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""
"Primero le indicamos al motor cuáles archivos son implementados al llamar "
"``nativescript_register_class``. El primer parámetro es el puntero de "
"referencia que se nos entrega. El segundo es el nombre de la clase de "
"nuestro objeto. El tercero es el tipo de Objeto del cual «heredamos»; no es "
"herencia real, sino una aproximación suficiente. Finalmente, nuestros "
"parámetros cuatro y cinco son descripciones de nuestro constructor y "
"destructor."

msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot-headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""
"Luego le informamos a Godot acerca de nuestros métodos (en este caso, solo "
"tenemos un método) llamando ``nativescript_register_method`` para cada "
"método de nuestra clase. En nuestro caso, eso es simplemente ``get_data``. "
"Nuestro primer parámetro es, nuevamente, nuestro puntero de manejo. El "
"segundo es nuevamente el nombre de la clase de objeto que estamos "
"registrando. El tercero es el nombre de nuestra función tal como será "
"conocida por GDScript. El cuarto es nuestra configuración de atributos "
"(consulta la enumeración ``godot_method_rpc_mode`` en ``godot-headers/"
"nativescript/godot_nativescript.h`` para ver los posibles valores). El "
"quinto y último parámetro es una descripción de qué función llamar cuando se "
"llame al método."

msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""
"La estructura descriptiva ``instance_method`` contiene el puntero de la "
"función como su primer campo. Los otros dos campos en estas estructuras son "
"para especificar datos de usuario por método; el segundo es el campo "
"``method_data`` el cual es pasado en todas las llamadas a funciones bajo el "
"argumento ``p_method_data``. La utilidad de esto es que puedes reusar una "
"función para métodos diferentes en varias clases-script. Si el valor "
"``method_data`` es un puntero a memoria que necesita ser liberada, el tercer "
"campo ``free_func`` puede contener un puntero a una función que liberará esa "
"memoria. Esa función de liberación es llamada cuando el script mismo (¡no la "
"instancia!) Es descargado (comúnmente al momento de descargar bibliotecas)."

msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""
"Ahora, comencemos a trabajar en las funciones de nuestro objeto. Primero, "
"definiremos una estructura que usaremos para almacenar la información de "
"miembro de una instancia de nuestra clase GDNative."

msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""
"Después, definiremos nuestro constructor. Todo lo que hacemos en nuestro "
"constructor es asignar memoria para nuestra estructura y llenarla con "
"información. Pon atención a que usamos las funciones de memoria de Godot con "
"el fin de que la memoria sea rastreada, y regresamos el puntero a nuestra "
"nueva estructura. Este puntero funcionará como nuestro identificador de "
"instancia en caso de que varios objetos sean inicializados."

msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""
"Este puntero será pasado a cualquiera de nuestras funciones relacionadas a "
"nuestro objeto en forma de un parámetro llamado ``p_user_data``, y puede ser "
"utilizado para identificar nuestra instancia y acceder su información "
"interna."

msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""
"Nuestro destructor es llamado cuando Godot ha terminado de usar nuestro "
"objeto y liberamos la información interna de nuestra instancia."

msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""
"Finalmente, implementaremos nuestra función ``get_data``. La información "
"siempre es enviada y regresada como variantes, así que para regresar nuestra "
"información (que es una cadena de caracteres), primero tenemos que convertir "
"nuestra cadena de C a un objeto de texto de Godot, para después copiar ese "
"objeto a la variante que regresaremos."

msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""
"Las cadenas de texto en Godot son distribuidas en la pila de memoria, por lo "
"tanto, tienen un destructor que libera esa memoria. Los destructores son "
"llamados ``godot_NOMBREDELTIPO_destroy``. Cuando una variante se crea con "
"una cadena de texto, hace referencia a la misma; lo que significa que la "
"cadena original puede ser «destruida» para reducir la cuenta de referencias. "
"Si eso no sucede, la memoria de cadenas de texto va a fugarse, ya que la "
"cuenta de referencias jamás será cero y la memoria jamás será liberada. La "
"variante regresada es destruida automáticamente por Godot."

msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""
"En operaciones más complicadas puede ser confuso mantener rastro de qué "
"valor necesita ser liberado y cual no. Como regla general: llama "
"``godot_NOMBREDELTIPO_destroy`` cuando sea necesario en lugar del destructor "
"de C++. El destructor de cadenas de texto sería llamado en C++ después de "
"que la variante fue creada, así que lo mismo es necesario en C."

msgid "The variant we return is destroyed automatically by Godot."
msgstr "La variante que regresamos es destruida automáticamente por Godot."

msgid "And that is the whole source code of our module."
msgstr "Y este es el código fuente entero de nuestro módulo."

msgid "Compiling"
msgstr "Compilando"

msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""
"Ahora necesitamos compilar nuestro código fuente. Como mencionamos, nuestro "
"proyecto de ejemplo en GitHub contiene una configuración de SCons que se "
"encarga del trabajo duro por ti, pero en nuestro tutorial llamaremos los "
"compiladores directamente."

msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""
"Asumiendo que te estás apegando a la estructura de carpetas sugerida "
"previamente, lo mejor es abrir una sesión de tu terminal en la carpeta "
"``src`` y ejecutar los comandos desde allí. Asegúrate de crear la carpeta "
"``bin`` antes de continuar."

msgid "On Linux:"
msgstr "En Linux:"

msgid "On macOS:"
msgstr "En macOS:"

msgid "On Windows:"
msgstr "En Windows:"

msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""
"En la compilación de Windows también tendrás una biblioteca ``libsimple."
"lib``. Esta es una biblioteca que se puede compilar en un proyecto para "
"proporcionar acceso a la DLL. La obtenemos como subproducto y no lo "
"necesitamos :) Al exportar el juego para lanzamiento, este archivo será "
"ignorado."

msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr "Creando el archivo GDNativeLibrary(``.gdnlib``)"

msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""
"Con nuestro módulo compilado, ahora tenemos que crear un recurso :ref:"
"`GDNativeLibrary<class_GDNativeLibrary>` con la extensión ``.gdnlib``, la "
"cual colocaremos junto con las bibliotecas dinámicas. Este archivo le dice a "
"Godot cuáles bibliotecas dinámicas son parte de nuestro módulo y necesitan "
"ser cargadas por plataforma."

msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr ""
"Podemos usar Godot para generar este archivo, así que abre el proyecto "
"«simple» en el editor."

msgid "Start by clicking the create resource button in the Inspector:"
msgstr "Inicia presionando el botón de crear recurso en el inspector:"

msgid "And select ``GDNativeLibrary``:"
msgstr "Y selecciona ``GDNativeLibrary``:"

msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""
"Deberías de ver un editor contextual aparecer en el panel inferior. Usa el "
"botón de «Expandir Panel Inferior» en la parte inferior derecha para "
"expandirlo a su altitud completa:"

msgid "General properties"
msgstr "Propiedades generales"

msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr ""
"En el inspector, tienes varias propiedades para controlar la carga de la "
"Biblioteca."

msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""
"Si *Load Once* está habilitada, nuestra biblioteca se cargará sólo una vez y "
"cada script individual que use nuestra biblioteca usará la misma "
"información. Cada variable que definas globalmente será accesible por cada "
"instancia del objeto que crees. Si *Load Once* está deshabilitada, una nueva "
"copia de la biblioteca será cargada a la memoria cada vez que un script "
"acceda a la biblioteca."

msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""
"Si *Singleton* está habilitado, nuestra librería se carga automáticamente y "
"se llama a una función llamada ``godot_gdnative_singleton``. Dejaremos eso "
"para otro tutorial."

msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""
"El prefijo *Symbol Prefix* trabaja con nuestras funciones principales, tales "
"como ``godot_`` en ``godot_nativescript_init`` que vimos previamente. SI "
"usas varias bibliotecas GDNative que quieres conectar estáticamente, tendrás "
"que usar prefijos distintos. De nuevo, este es un tema para enfocarse en un "
"tutorial distinto, sólo es necesario en este momento para el despliegue en "
"iOS, ya que a esta plataforma no le gustan las bibliotecas dinámicas."

msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""
"*Reloadable* define si la biblioteca debería de ser recargada cuando el "
"editor pierde y recupera el enfoque, principalmente para encontrar símbolos "
"nuevos o modificados por cualquier cambio hecho a la biblioteca de manera "
"externa."

msgid "Platform libraries"
msgstr "Librerías de la plataforma"

msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""
"El plugin GDNativeLibrary del editor te permite configurar dos elementos por "
"cada plataforma y arquitectura que planees apoyar."

msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""
"La columna *Dinamyc Library* (sección **entry** en el archivo guardado) nos "
"dice para cada combinación de plataforma y característica qué librería "
"dinámica debe ser cargada. Esto también informa al exportador los ficheros "
"que deben exportarse al exportar a una plataforma específica."

msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""
"La columna *Dependencies* (o la sección ``dependencies``) le dice a Godot "
"cuáles otros archivos tienen que ser exportados por plataforma con el fin de "
"que nuestra librería funcione. Imagina que tu módulo GDNative usa otro DLL "
"para implementar funcionalidad de una librería tercera o externa, aquí es "
"dónde alistas tales DLLs."

msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""
"Para nuestro ejemplo, sólo construimos bibliotecas para Linux, macOS y/o "
"Windows, así que puedes enlazar los campos relevantes haciendo clic en el "
"botón de carpeta. Si construiste las tres bibliotecas, deberías tener algo "
"como:"

msgid "Saving the resource"
msgstr "Guardando el recurso"

msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""
"Podemos guardar nuestro recurso GDNativeLibrary como ``bin/libsimple."
"gdnlib`` con el botón Guardar en el Inspector:"

msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr ""
"El archivo es guardado en un formato texto y debería tener contenido similar "
"a este:"

msgid "Creating the NativeScript (``.gdns``) file"
msgstr "Creando el archivo NativeScript (``.gdns``)"

msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"SIMPLE\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""
"Con nuestro archivo ``.gdnlib``, le hemos indicado a Godot cómo cargar "
"nuestra biblioteca. Ahora necesitamos informarle acerca de nuestra clase de "
"objeto \"SIMPLE\". Lo hacemos creando un archivo de recurso :ref:"
"`NativeScript <class_NativeScript>` con la extensión ``.gdns``."

msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""
"De la misma manera que hicimos con nuestro recurso GDNativeLibrary, haz clic "
"en el botón para crear un nuevo recurso en el inspector y selecciona "
"``NativeScript``:"

msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"SIMPLE\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""
"El inspector mostrará algunas propiedades que debemos completar. En el campo "
"*Nombre de Clase*, ingresamos \"SIMPLE\", que es el nombre de la clase de "
"objeto que declaramos en nuestro código fuente en C al llamar a "
"``godot_nativescript_register_class``. También necesitamos seleccionar "
"nuestro archivo ``.gdnlib`` haciendo clic en *Biblioteca* y seleccionando "
"*Cargar*:"

msgid ""
"The *Class Name* must have the same spelling as the one given in "
"``godot_nativescript_init`` when registering the class."
msgstr ""
"El campo *Class Name* tiene que estar escrito de la misma manera que fue "
"asignado en ``godot_nativescript_init`` al registrar la clase."

msgid "Finally, click on the save icon and save this as ``bin/simple.gdns``:"
msgstr ""
"Finalmente, haz clic en el icono de guardado y guarda el archivo bajo el "
"nombre ``bin/simple.gdns``:"

msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""
"Es momento de crear nuestra escena. Agrega un nodo de Control a tu escena "
"como raíz y llámalo ``main``. Después, agrégale los nodos hijos *Button* y "
"*Label* (Botón y Etiqueta, respectivamente). Posiciónalos en algún lugar "
"agradable de la pantalla y dale un nombre a tu Botón."

msgid "Select the control node and attach a script to it:"
msgstr "Selecciona el nodo de Control y adjúntale un script:"

msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr "Ahora, conecta la señal ``pressed`` del botón a tu script:"

msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr "No olvides guardar tu escena, llámala ``main.tscn``."

msgid "Now we can implement our ``main.gd`` code:"
msgstr "Ahora podemos implementar nuestro código de ``main.gd``:"

msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""
"Después de todo esto, nuestro proyecto debería funcionar. La primera vez que "
"lo ejecutes Godot te preguntará cuál es tu escena principal, selecciona "
"``main.tscn`` y ya está listo:"

msgid "Translation status"
msgstr "Estado de traducción"
