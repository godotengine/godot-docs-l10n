# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for macOS"
msgstr "Compilando para macOS"

msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""
"Esta página describe cómo compilar el editor y las plantillas de exportación "
"de macOS desde el código fuente. Si estás buscando exportar tu proyecto a "
"macOS, lee :ref:`doc_exporting_for_macos`."

msgid "Requirements"
msgstr "Requerimientos"

msgid "For compiling under macOS, the following is required:"
msgstr "Para compilar en macOS, se requiere lo siguiente:"

msgid "`Python 3.5+ <https://www.python.org>`_."
msgstr "`Python 3.5+ <https://www.python.org>`_."

msgid "`SCons 3.0+ <https://www.scons.org>`_ build system."
msgstr "`SCons 3.0+ <https://www.scons.org>`_ sistema de compilación."

msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (o las "
"herramientas de línea de comandos más ligeras para Xcode)."

msgid ""
"*Optional* - `yasm <https://yasm.tortall.net/>`_ (for WebM SIMD "
"optimizations)."
msgstr ""
"*Opcional* - `yasm <https://yasm.tortall.net/>`_ (para optimizaciones SIMD "
"de WebM)."

msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons and yasm using the following command::"
msgstr ""
"Si tienes `Homebrew <https://brew.sh/>`_ instalado, puedes instalar SCons y "
"yasm fácilmente utilizando el siguiente comando:"

msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr ""
"La instalación de Homebrew también descargará automáticamente las Command "
"Line Tools para Xcode si aún no las tienes."

msgid ""
"Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, "
"you can easily install SCons and yasm using the following command::"
msgstr ""
"De manera similar, si tienes `MacPorts <https://www.macports.org/>`_ "
"instalado, puedes instalar SCons y yasm fácilmente utilizando el siguiente "
"comando::"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""
"Para obtener el código fuente de Godot para compilarlo, consulta la sección :"
"ref:`doc_getting_source`."

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Para obtener una visión general del uso de SCons para Godot, consulta la "
"sección :ref:`doc_introduction_to_the_buildsystem`."

msgid "Compiling"
msgstr "Compilando"

msgid "Start a terminal, go to the root directory of the engine source code."
msgstr ""
"Para comenzar, abre una terminal y ve al directorio raíz del código fuente "
"del motor (game engine)."

msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr ""
"Para compilar para Macs con procesadores Intel (x86-64), utiliza el "
"siguiente comando::"

msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr ""
"Para compilar para Macs con procesadores Apple Silicon (ARM64), utiliza el "
"siguiente comando::"

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands and then use ``lipo`` to bundle them together::"
msgstr ""
"Para admitir ambas arquitecturas en un único archivo binario \"Universal "
"2\", ejecuta los dos comandos anteriores y luego utiliza ``lipo`` para "
"combinarlos juntos::"

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""
"Si todo va bien, el archivo binario ejecutable resultante se ubicará en el "
"subdirectorio ``bin/``. Este archivo ejecutable contiene todo el motor y se "
"ejecuta sin ninguna dependencia. Al ejecutarlo, se abrirá el administrador "
"de proyectos."

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"Si deseas utilizar configuraciones de editor separadas para tus propias "
"compilaciones de Godot y las versiones oficiales, puedes habilitar :ref:"
"`doc_data_paths_self_contained_mode` creando un archivo llamado ``._sc_`` o "
"``_sc_`` en la carpeta ``bin/``."

msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/osx_tools.app``. Typically, for an "
"optimized editor binary built with ``target=release_debug``::"
msgstr ""
"Para crear un paquete ``.app`` como en las compilaciones oficiales, "
"necesitas utilizar la plantilla ubicada en ``misc/dist/osx_tools.app``. Por "
"lo general, para construir un binario del editor optimizado con "
"``target=release_debug``::"

msgid "Compiling a headless/server build"
msgstr "Compilación de una versión sin interfaz / para servidor"

msgid ""
"To compile a *headless* build which provides editor functionality to export "
"projects in an automated manner, use::"
msgstr ""
"Para compilar una versión *headless* que proporciona funcionalidad de editor "
"para exportar proyectos de manera automatizada, usa::"

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"Para compilar una versión *servidor* con depuración que se puede utilizar "
"con :ref:`herramientas de depuración remota <doc_command_line_tutorial>`, "
"utiliza:"

msgid ""
"To compile a release *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""
"Para compilar una versión de servidor *release* que esté optimizada para "
"ejecutar servidores de juego dedicados, utiliza el siguiente comando::"

msgid "Building export templates"
msgstr "Construyendo plantillas de exportación"

msgid ""
"To build macOS export templates, you have to compile with ``tools=no`` (no "
"editor) and respectively for ``target=release`` (release template) and "
"``target=release_debug``."
msgstr ""
"Para compilar las plantillas de exportación para macOS, debes compilar con "
"``tools=no`` (sin editor) y, respectivamente, usar ``target=release`` "
"(plantilla de lanzamiento) o ``target=release_debug`` (plantilla de "
"lanzamiento con depuración) dependiendo de tus necesidades."

msgid ""
"Official templates are universal binaries which support both Intel x86_64 "
"and ARM64 architectures. You can also create export templates that support "
"only one of those two architectures by leaving out the ``lipo`` step below."
msgstr ""
"Las plantillas oficiales son binarios universales que admiten las "
"arquitecturas tanto de Intel x86_64 como ARM64. También puedes crear "
"plantillas de exportación que admitan solo una de esas dos arquitecturas "
"omitiendo el paso de ``lipo`` que se menciona a continuación."

msgid "For Intel x86_64::"
msgstr "Para Intel x86_64::"

msgid "For ARM64 (Apple M1)::"
msgstr "Para ARM64 (Apple M1)::"

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands blocks and then use ``lipo`` to bundle them together::"
msgstr ""
"Para admitir ambas arquitecturas en un único archivo binario \"Universal "
"2\", ejecuta los dos bloques de comandos anteriores y luego utiliza ``lipo`` "
"para combinarlos juntos::"

msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/osx_template.app``. The release and "
"debug builds should be placed in ``osx_template.app/Contents/MacOS`` with "
"the names ``godot_osx_release.64`` and ``godot_osx_debug.64`` respectively. "
"You can do so with the following commands (assuming a universal build, "
"otherwise replace the ``.universal`` extension with the one of your arch-"
"specific binaries)::"
msgstr ""
"Para crear un paquete ``.app`` como en las compilaciones oficiales, debes "
"utilizar la plantilla ubicada en ``misc/dist/osx_template.app``. Las "
"compilaciones de lanzamiento (release) y depuración (debug) deben colocarse "
"en ``osx_template.app/Contents/MacOS`` con los nombres "
"``godot_osx_release.64`` y ``godot_osx_debug.64``, respectivamente. Puedes "
"hacerlo con los siguientes comandos (asumiendo una compilación universal, de "
"lo contrario, reemplaza la extensión ``.universal`` con la de tus binarios "
"específicos de arquitectura)::"

msgid ""
"You can then zip the ``osx_template.app`` folder to reproduce the ``osx."
"zip`` template from the official Godot distribution::"
msgstr ""
"Luego puedes comprimir la carpeta ``osx_template.app`` para reproducir la "
"plantilla ``osx.zip`` de la distribución oficial de Godot::"

msgid "Cross-compiling for macOS from Linux"
msgstr "Compilando para macOS desde Linux"

msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""
"Es posible compilar para macOS en un entorno Linux (y tal vez también en "
"Windows utilizando el Subsistema de Windows para Linux). Para ello, deberás "
"instalar `OSXCross <https://github.com/tpoechtrager/osxcross>`__ para poder "
"utilizar macOS como destino. Primero, sigue las instrucciones para "
"instalarlo:"

msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""
"Clona el repositorio `OSXCross <https://github.com/tpoechtrager/osxcross>`__ "
"en algún lugar de tu máquina (o descarga un archivo ZIP y extráelo en algún "
"lugar), por ejemplo:"

msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""
"Sigue las instrucciones para empaquetar el SDK en el siguiente enlace: "
"https://github.com/tpoechtrager/osxcross#packaging-the-sdk"

msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""
"Para instalar OSXCross, sigue las instrucciones en el siguiente enlace: "
"https://github.com/tpoechtrager/osxcross#installation"

msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""
"Después de eso, necesitarás definir ``OSXCROSS_ROOT`` como la ruta de la "
"instalación de OSXCross (el mismo lugar donde clonaste el repositorio o "
"extrajiste el archivo ZIP), por ejemplo:"

msgid "Now you can compile with SCons like you normally would::"
msgstr "Ahora puedes compilar con SCons como lo harías normalmente::"

msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""
"Si tienes una versión de SDK de OSXCross diferente de la esperada por el "
"sistema de construcción de SCons, puedes especificar una personalizada "
"mediante el argumento ``osxcross_sdk``::"

msgid "Translation status"
msgstr "Estado de traducción"
