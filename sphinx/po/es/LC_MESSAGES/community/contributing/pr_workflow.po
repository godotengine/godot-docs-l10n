# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "Flujo de trabajo para los Pull request"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"El llamado \"flujo de trabajo de PR\" utilizado por Godot es común en muchos "
"proyectos que utilizan Git y debería resultar familiar para los veteranos "
"contribuyentes de software libre. La idea es que solo un pequeño número (si "
"acaso alguno) de contribuyentes hagan cambios directamente en la rama "
"*master*. En su lugar, los contribuyentes hacen un *fork* del proyecto (es "
"decir, crean una copia del mismo que pueden modificar a su gusto) y luego "
"utilizan la interfaz de GitHub para solicitar un *pull* desde una rama de su "
"fork a una rama del repositorio original (generalmente llamado *upstream*)."

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"El *pull request* (PR) resultante puede ser revisado por otros "
"contribuyentes, quienes pueden aprobarlo, rechazarlo o, lo más común, "
"solicitar modificaciones. Una vez aprobado, el PR puede ser fusionado por "
"uno de los desarrolladores principales, y sus commits se convertirán en "
"parte de la rama de destino (generalmente la rama *master*)."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"Juntos recorreremos un ejemplo para mostrar el flujo de trabajo típico y los "
"comandos de Git asociados. Pero primero, echemos un vistazo rápido a la "
"organización del repositorio Git de Godot."

msgid "Git source repository"
msgstr "Repositorio fuente de Git"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"El `repositorio en GitHub <https://github.com/godotengine/godot>`_ es un "
"repositorio de código `Git <https://git-scm.com>`_ junto con un sistema "
"integrado de seguimiento de problemas y solicitudes de extracción (PR)."

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Si está contribuyendo a la documentación, puedes encontrar su repositorio "
"`aquí <https://github.com/godotengine/godot-docs>`_."

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"El sistema de control de versiones Git es la herramienta utilizada para "
"realizar un seguimiento de las ediciones sucesivas del código fuente. Para "
"contribuir eficientemente a Godot, se recomienda *altamente* aprender los "
"conceptos básicos de la línea de comandos de Git. Existen algunas interfaces "
"gráficas para Git, pero suelen fomentar malos hábitos en cuanto al flujo de "
"trabajo de Git y PR, por lo que recomendamos no utilizarlas. En particular, "
"aconsejamos no usar el editor en línea de GitHub para contribuciones de "
"código (aunque se tolera para correcciones pequeñas o cambios en la "
"documentación), ya que impone un commit por archivo y por modificación, lo "
"que rápidamente genera PRs con un historial de Git poco legible "
"(especialmente después de la revisión de pares)."

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Las primeras secciones del \"Libro\" de Git son una buena introducción a la "
"filosofía de la herramienta y a los diversos comandos que necesitas dominar "
"en tu flujo de trabajo diario. Puedes leerlos en línea en el sitio web de "
"`Git SCM <https://git-scm.com/book/en/v2>`_. También puedes probar la `guía "
"interactiva de GitHub <https://try.github.io/>`__."

msgid "The branches on the Git repository are organized as follows:"
msgstr ""
"Las ramas en el repositorio Git están organizadas de la siguiente manera:"

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"La rama ``master`` es donde se lleva a cabo el desarrollo de la próxima "
"versión principal. Como una rama de desarrollo, puede ser inestable y no "
"está destinada para su uso en producción. Aquí es donde se deben realizar "
"las PR (Pull Requests) en prioridad."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"Las ramas estables se nombran según su versión, por ejemplo, ``3.1`` y "
"``2.1``. Se utilizan para portar correcciones de errores y mejoras desde la "
"rama ``master`` a la versión estable actualmente mantenida (por ejemplo, "
"3.1.2 o 2.1.6). Como regla general, la última rama estable se mantiene hasta "
"la próxima versión menor (por ejemplo, la rama ``3.0`` se mantuvo hasta el "
"lanzamiento de Godot 3.1). Si deseas realizar PRs contra una rama estable "
"mantenida, verifica primero si tus cambios también son relevantes para la "
"rama ``master``, y si es así, haz la PR para la rama ``master`` en "
"prioridad. Los administradores de lanzamiento pueden luego seleccionar el "
"fix para una rama estable si es relevante."

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""
"De manera ocasional, puede haber ramas de características (feature "
"branches), generalmente destinadas a fusionarse con la rama ``master`` en "
"algún momento."

msgid "Forking and cloning"
msgstr "Forking y clonación"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"El primer paso es *preparar* el repositorio `godotengine/godot <https://"
"github.com/godotengine/godot>`_ en GitHub. Para hacerlo, necesitarás tener "
"una cuenta de GitHub y estar conectado. En la esquina superior derecha de la "
"página GitHub del repositorio, debería ver el botón \"Fork\" como se muestra "
"a continuación:"

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Haz clic en él y después de un momento deberías ser redirigido a tu propia "
"copia (fork) del repositorio de Godot, con tu nombre de usuario de GitHub "
"como espacio de nombres:"

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"A continuación, puedes *clonar* tu copia (fork), es decir, crear una copia "
"local del repositorio en línea (en la terminología de Git, el *origin "
"remote*). Si aún no lo has hecho, descarga Git desde `su sitio web <https://"
"git-scm.com>`_ si estás usando Windows o macOS, o instálalo a través de tu "
"gestor de paquetes si estás usando Linux."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Si estás en Windows, abre Git Bash para ingresar los comandos. Los usuarios "
"de macOS y Linux pueden utilizar sus respectivas terminales."

msgid "To clone your fork from GitHub, use the following command:"
msgstr "Para clonar tu fork desde GitHub, usa el siguiente comando:"

msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"En nuestros ejemplos, el carácter \"$\" denota el símbolo del prompt de la "
"línea de comandos en las terminales UNIX típicas. No forma parte del comando "
"y no debe ser escrito."

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Después de un momento, deberías tener un directorio llamado ``godot`` en tu "
"directorio de trabajo actual. Muévete a ese directorio utilizando el comando "
"``cd``:"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""
"Comenzaremos configurando una referencia al repositorio original del que "
"hicimos el fork:"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"Esto creará una referencia llamada ``upstream`` que apunta al repositorio "
"original ``godotengine/godot``. Esto será útil cuando desees obtener nuevos "
"commits de su rama ``master`` para actualizar tu fork. Ya tienes otra "
"referencia remota llamada ``origin``, que apunta a tu fork (``USERNAME/"
"godot``)."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Solo necesitas realizar los pasos anteriores una vez, siempre que mantengas "
"la carpeta local ``godot`` (puedes moverla si deseas, los metadatos "
"relevantes están ocultos en su subcarpeta ``.git``)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"*Ramifícala, tráela, codifica, agrega al área de preparación, haz commit, "
"súbelo, rebasea... tecnológico.*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Esta divertida versión de *Technologic* de Daft Punk muestra la concepción "
"general que tienen los principiantes en Git sobre su flujo de trabajo: "
"muchas comandos extraños que aprender copiando y pegando, esperando que "
"funcionen como se espera. Y en realidad, no es una mala manera de aprender, "
"siempre y cuando tengas curiosidad y no dudes en cuestionar a tu motor de "
"búsqueda cuando te sientas perdido. Por lo tanto, te daremos los comandos "
"básicos que debes conocer al trabajar con Git."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's project manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"En lo que sigue, asumiremos como ejemplo que deseas implementar una "
"característica en el administrador de proyectos de Godot, que se encuentra "
"codificado en el archivo ``editor/project_manager.cpp``."

msgid "Branching"
msgstr "Ramificación"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"Por defecto, el comando ``git clone`` debería haberte colocado en la rama "
"``master`` de tu fork (``origin``). Para empezar el desarrollo de tu nueva "
"característica, crearemos una rama de funcionalidad:"

msgid "This command is equivalent:"
msgstr "Este comando es equivalente:"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "Si deseas volver a la rama ``master``, utilizarías:"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Puedes ver en qué rama te encuentras actualmente con el comando ``git "
"branch``:"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"Asegúrate de siempre regresar a la rama ``master`` antes de crear una nueva "
"rama, ya que tu rama actual se usará como base para la nueva. "
"Alternativamente, puedes especificar una rama base personalizada después del "
"nombre de la nueva rama:"

msgid "Updating your branch"
msgstr "Actualizando su rama"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Esto no sería necesario la primera vez (justo después de haber bifurcado el "
"repositorio upstream). Sin embargo, la próxima vez que desees trabajar en "
"algo, notarás que la rama ``master`` de tu fork está varios commits atrás de "
"la rama ``master`` del repositorio upstream: se habrán fusionado solicitudes "
"de extracción de otros colaboradores en el ínterin."

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Para asegurarte de que no haya conflictos entre la función que estás "
"desarrollando y la rama ``master`` actual del repositorio upstream, deberás "
"actualizar tu rama haciendo *pull* de la rama upstream."

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"El argumento ``--rebase`` se asegurará de que cualquier cambio local que "
"hayas confirmado se reaplique *encima* de la rama que has extraído, lo cual "
"generalmente es lo que queremos en nuestro flujo de solicitudes de "
"extracción (PR). De esta manera, cuando abras una solicitud de extracción, "
"tus propios commits serán la única diferencia con la rama ``master`` "
"upstream."

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"Durante el rebase, pueden surgir conflictos si tus commits modificaron "
"código que ha sido cambiado en la rama upstream mientras tanto. Si eso "
"sucede, Git se detendrá en el commit conflictivo y te pedirá que resuelvas "
"los conflictos. Puedes hacerlo con cualquier editor de texto, luego agregas "
"los cambios al área de preparación (más sobre eso más adelante) y continúas "
"con ``git rebase --continue``. Repite la operación si hay más commits con "
"conflictos, hasta que se complete la operación de rebase."

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"Si no estás seguro de lo que está sucediendo durante un rebase y entras en "
"pánico (no te preocupes, todos lo hacemos las primeras veces), puedes "
"abortar el rebase con ``git rebase --abort``. Luego volverás al estado "
"original de tu rama antes de llamar a ``git pull --rebase``."

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"Si omites el argumento ``--rebase``, en su lugar, crearás un commit de "
"fusión que le indica a Git cómo combinar las dos ramas distintas. Si se "
"presentan conflictos, se resolverían todos de una vez a través de este "
"commit de fusión."

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"Si bien este es un flujo de trabajo válido y el comportamiento "
"predeterminado de ``git pull``, los commits de fusión dentro de las "
"solicitudes de extracción (PR) no son bien vistos en nuestro flujo de "
"trabajo de PR. Solo los usamos al fusionar las PR en la rama principal del "
"repositorio original (upstream)."

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"La filosofía es que una PR debe representar la etapa final de los cambios "
"realizados en el código y no nos interesa los errores y correcciones que se "
"hayan hecho en etapas intermedias antes de la fusión. Git nos proporciona "
"excelentes herramientas para \"reescribir el historial\" y hacer que parezca "
"que hemos hecho las cosas correctamente desde el principio, y estamos "
"encantados de usarlo para asegurarnos de que los cambios sean fáciles de "
"revisar y comprender mucho tiempo después de que se hayan fusionado."

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"Si ya has creado un commit de fusión sin usar ``rebase``, o has realizado "
"otros cambios que han dado lugar a un historial no deseado, la mejor opción "
"es utilizar un *rebase interactivo* en la rama del repositorio principal "
"(upstream). Consulta la :ref:`sección dedicada <doc_pr_workflow_rebase>` "
"para obtener instrucciones detalladas."

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"Si en algún momento deseas *restablecer* una rama local a un commit o rama "
"específica, puedes hacerlo con ``git reset --hard <ID del commit>`` o ``git "
"reset --hard <remoto>/<rama>`` (por ejemplo, ``git reset --hard upstream/"
"master``)."

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"Ten en cuenta que esto eliminará cualquier cambio que hayas realizado en "
"esta rama y que hayas confirmado. Si alguna vez pierdes confirmaciones por "
"error, utiliza el comando ``git reflog`` para encontrar el ID del commit del "
"estado anterior que te gustaría restaurar, y úsalo como argumento de ``git "
"reset --hard`` para regresar a ese estado."

msgid "Making changes"
msgstr "Realizando cambios"

msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"Luego realizarías tus cambios en el archivo ``editor/project_manager.cpp`` "
"de nuestro ejemplo con tu entorno de desarrollo habitual (editor de texto, "
"IDE, etc.)."

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"Por defecto, esos cambios están *sin preparar* (unstaged). El área de "
"preparación es una capa intermedia entre tu directorio de trabajo (donde "
"realizas tus modificaciones) y el repositorio local de Git (los commits y "
"toda la información en la carpeta ``.git``). Para llevar los cambios del "
"directorio de trabajo al repositorio de Git, debes *prepararlos* (stage) con "
"el comando ``git add``, y luego confirmarlos con el comando ``git commit``."

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""
"Hay varios comandos que debes conocer para revisar tu trabajo actual, antes "
"de prepararlo, mientras está preparado y después de haberlo confirmado."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""
"``git diff`` te mostrará los cambios actuales sin preparar, es decir, las "
"diferencias entre tu directorio de trabajo y el área de preparación "
"(staging)."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""
"``git checkout -- <archivos>`` deshará los cambios no preparados en los "
"archivos especificados."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""
"``git add <archivos>`` *preparará* los cambios en los archivos listados."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` mostrará los cambios actuales preparados, es decir, "
"las diferencias entre el área de preparación y el último commit."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""
"``git reset HEAD <files>`` deshará los cambios preparados (staged) en los "
"archivos especificados, devolviéndolos a la versión *no preparada* "
"(unstaged)."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""
"``git status`` te mostrará cuáles son las modificaciones actualmente "
"preparadas (staged) y no preparadas (unstaged)."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` realizará la confirmación de los archivos preparados "
"(staged). Abrirá un editor de texto (puedes definir el que prefieras "
"mediante la variable de entorno ``GIT_EDITOR`` o la configuración ``core."
"editor`` en Git) para que escribas un mensaje de confirmación. También "
"puedes usar ``git commit -m \"Mensaje de confirmación genial\"`` para "
"escribir directamente el mensaje de confirmación sin abrir el editor."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"``git commit --amend`` te permite modificar el último commit con los cambios "
"actualmente preparados (añadidos con ``git add``). Esta es la mejor opción "
"si deseas corregir un error en el último commit (error, falta de ortografía, "
"problema de estilo, etc.)."

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` te mostrará los últimos commits de tu rama actual. Si has "
"realizado commits locales, deberían mostrarse en la parte superior."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` te mostrará los cambios del último commit. También puedes "
"especificar el hash de un commit para ver los cambios de ese commit en "
"particular."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"¡Eso es mucho que memorizar! No te preocupes, simplemente consulta esta hoja "
"de referencia cuando necesites hacer cambios y aprende haciéndolo."

msgid "Here's how the shell history could look like on our example:"
msgstr ""
"Aquí te muestro cómo podría verse el historial del shell en nuestro ejemplo:"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Con esto, deberíamos tener dos nuevos commits en nuestra rama ``better-"
"project-manager`` que no están en la rama ``master``. Sin embargo, estos "
"cambios son solo locales por ahora, el repositorio remoto no tiene "
"conocimiento de ellos, ni tampoco el repositorio \"upstream\"."

msgid "Pushing changes to a remote"
msgstr "Empujando los cambios a remoto"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"Ahí es donde entra en juego ``git push``. En Git, un commit siempre se "
"realiza en el repositorio local (a diferencia de Subversion donde un commit "
"modificará directamente el repositorio remoto). Necesitas *hacer push* de "
"los nuevos commits a una rama remota para compartirlos con el resto del "
"mundo. La sintaxis para hacer esto es:"

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"La parte sobre la rama remota se puede omitir si quieres que tenga el mismo "
"nombre que la rama local, que es nuestro caso en este ejemplo, así que "
"haremos lo siguiente:"

msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""
"Git te pedirá tu nombre de usuario y contraseña, y los cambios serán "
"enviados a tu repositorio remoto. Si revisas la página de tu fork en GitHub, "
"deberías ver una nueva rama con tus commits añadidos."

msgid "Issuing a pull request"
msgstr "Emitiendo una solicitud de extracción"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"Cuando cargas la rama de tu fork en GitHub, deberías ver una línea que dice "
"*\"Esta rama está 2 commits adelante de godotengine:master\"* (y "
"potencialmente algunos commits atrás, si tu rama ``master`` estaba fuera de "
"sincronización con la rama ``master`` del repositorio original)."

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"En esa línea, hay un enlace que dice \"Pull request\" (Solicitud de "
"extracción). Al hacer clic en él, se abrirá un formulario que te permitirá "
"crear una solicitud de extracción en el repositorio original ``godotengine/"
"godot``. Deberías ver tus dos commits y un mensaje que dice \"Able to "
"merge\" (Listo para fusionar). Si no ves esto (por ejemplo, si hay muchos "
"más commits o si dice que hay conflictos de fusión), no crees la solicitud "
"de extracción todavía, algo salió mal. Ve a nuestro `Godot Contributors Chat "
"<https://chat.godotengine.org/>`_ y solicita ayuda :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"Utiliza un título explícito para la solicitud de extracción (PR) y agrega "
"los detalles necesarios en el área de comentarios. Puedes arrastrar y soltar "
"capturas de pantalla, GIF o proyectos comprimidos si son relevantes, para "
"mostrar lo que implementaste. Luego, haz clic en \"Create a pull "
"request\" (Crear una solicitud de extracción), ¡y listo!"

msgid "Modifying a pull request"
msgstr "Modificando un pull request"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Mientras es revisada por otros colaboradores, es probable que necesites "
"realizar cambios en tu solicitud de extracción aún no fusionada, ya sea "
"porque otros colaboradores lo han solicitado o porque encontraste problemas "
"mientras la probabas tú mismo."

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"La buena noticia es que puedes modificar una solicitud de extracción "
"simplemente actuando en la rama desde la cual creaste la solicitud. Por "
"ejemplo, puedes realizar un nuevo commit en esa rama, hacer push a tu fork y "
"la solicitud de extracción se actualizará automáticamente:"

msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"Sin embargo, ten en cuenta que en nuestro flujo de trabajo de solicitudes de "
"extracción, preferimos commits que lleven el código de un estado funcional a "
"otro estado funcional, sin tener commits intermedios que solucionen errores "
"en tu propio código o problemas de estilo. La mayoría de las veces, "
"preferiremos un solo commit en una determinada solicitud de extracción (a "
"menos que haya una buena razón para mantener los cambios separados). En "
"lugar de crear un nuevo commit, considera usar ``git commit --amend`` para "
"modificar el commit anterior con tus correcciones. El ejemplo anterior se "
"vería así:"

msgid "The interactive rebase"
msgstr "El rebase interactivo"

msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request of your to *rebase* your branch to *squash* some or all of the "
"commits into one."
msgstr ""
"Si no seguiste los pasos anteriores para *enmendar* los cambios en un commit "
"en lugar de crear commits de corrección, o si hiciste tus cambios sin tener "
"en cuenta nuestro flujo de trabajo y consejos de uso de Git, los revisores "
"podrían solicitarte que *rebasees* tu rama para *aplastar* algunos o todos "
"los commits en uno solo."

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"En efecto, si se han realizado algunos commits después de las revisiones "
"para corregir errores, errores tipográficos, etc. en el commit original, no "
"son relevantes para un futuro lector del registro de cambios que querría "
"saber qué sucedió en el código de Godot, o cuándo y cómo se modificó un "
"archivo en particular."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"Para combinar esos commits innecesarios en el principal, tendremos que "
"*reescribir la historia*. Sí, tenemos ese poder. Puedes leer que es una mala "
"práctica, y es cierto cuando se trata de ramas del repositorio principal. "
"Pero en tu fork, puedes hacer lo que quieras, ¡y todo está permitido para "
"obtener PRs ordenados! :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"Usaremos el *rebase interactivo* ``git rebase -i`` para hacer esto. Este "
"comando toma como argumento un ID de commit o el nombre de una rama, y te "
"permitirá modificar todos los commits entre ese commit/rama y el último en "
"tu rama de trabajo, conocido como ``HEAD``."

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"Si bien puedes dar cualquier ID de commit a ``git rebase -i`` y revisar todo "
"lo que hay en el medio, el flujo de trabajo más común y conveniente implica "
"hacer el rebase en la rama upstream ``master``, lo cual puedes hacer con:"

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"Referenciar ramas en Git es un poco complicado debido a la distinción entre "
"ramas remotas y locales. Aquí, ``upstream/master`` (con una barra `/`) es "
"una rama local que ha sido extraída de la rama ``master`` del repositorio "
"remoto llamado ``upstream``."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"Las rebases interactivas solo se pueden realizar en ramas locales, por lo "
"que la barra diagonal `/` es importante aquí. Como el repositorio remoto "
"llamado \"upstream\" cambia con frecuencia, tu rama local ``upstream/"
"master`` puede quedar desactualizada, así que puedes actualizarla con el "
"comando ``git fetch upstream master``. A diferencia de ``git pull --rebase "
"upstream master``, que actualizaría la rama que tienes actualmente en uso, "
"``fetch`` solo actualizará la referencia ``upstream/master`` (que es "
"distinta de tu rama local ``master``... sí, puede ser confuso, pero te "
"familiarizarás con esto poco a poco)."

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"Esto abrirá un editor de texto (por defecto, ``vi``; consulta la "
"`documentación de Git <https://git-scm.com/book/en/v2/Customizing-Git-Git-"
"Configuration#_core_editor>`_ para configurar tu editor favorito) con algo "
"que puede parecerse a esto:"

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"El editor también mostrará instrucciones sobre cómo actuar en esos commits. "
"En particular, te dirá que \"pick\" significa usar ese commit (no hacer "
"nada), y que \"squash\" y \"fixup\" se pueden utilizar para *fundir* el "
"commit con su commit padre. La diferencia entre \"squash\" y \"fixup\" es "
"que \"fixup\" descartará el registro del commit fundido. En nuestro ejemplo, "
"no estamos interesados en mantener el registro del commit \"Fix a typo\", "
"así que usamos:"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"Al guardar y salir del editor, se realizará el reorganización interactiva "
"(rebase). El segundo commit se fusionará con el primero, y ``git log`` y "
"``git show`` deberían confirmar que ahora tienes solo un commit con los "
"cambios de ambos commits anteriores."

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"¡Pero cuidado! Has reescrito la historia y ahora tus ramas locales y remotas "
"han divergido. De hecho, el commit 1b4aad7 en el ejemplo anterior habrá "
"cambiado y, por lo tanto, obtendrá un nuevo hash de commit. Si intentas "
"hacer push a tu rama remota, surgirá un error:"

msgid ""
"This is a sane behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"Este es un comportamiento sensato, Git no te permitirá hacer push de cambios "
"que sobrescribirían el contenido remoto. Pero en realidad, eso es lo que "
"queremos hacer aquí, así que tendremos que *forzarlo*:"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"¡Y tadaa! Git reemplazará sin problemas tu rama remota con lo que tenías "
"localmente (así que asegúrate de que eso es lo que querías, usando ``git "
"log``). Esto también actualizará la solicitud de extracción (PR) en "
"consecuencia."

msgid "Deleting a Git branch"
msgstr "Borrando una ramificación de Git"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"Después de que tu pull request se haya fusionado, hay una última cosa que "
"debes hacer: eliminar la rama de Git de la solicitud de extracción. No habrá "
"problemas si no eliminas tu rama, pero es una buena práctica hacerlo. "
"Deberás hacer esto dos veces, una vez para la rama local y otra para la rama "
"remota en GitHub."

msgid "To delete our better project manager branch locally, use this command:"
msgstr ""
"Para eliminar nuestra rama \"better-project-manager\" localmente, usa este "
"comando:"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"Alternativamente, si la rama aún no se ha fusionado y queremos eliminarla de "
"todos modos, en lugar de usar ``-d``, usaríamos ``-D``."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""
"A continuación, para eliminar la rama remota en GitHub, usa este comando:"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""
"También puedes eliminar la rama remota desde la propia página de solicitud "
"de extracción (PR) en GitHub; un botón debería aparecer una vez que haya "
"sido fusionada o cerrada."

msgid "Translation status"
msgstr "Estado de traducción"
