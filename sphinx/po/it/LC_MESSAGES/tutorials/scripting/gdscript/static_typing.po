# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Tipizzazione statica in GDScript"

msgid "In this guide, you will learn:"
msgstr "In questa guida imparerai:"

msgid "**How to use types in GDScript**"
msgstr "**Come utilizzare i tipi in GDScript**"

msgid "That **static types can help you avoid bugs**"
msgstr "Che **la tipizzazione statica può aiutarti a evitare bug**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"Dove e come usi questa nuova funzione del linguaggio è completamente a tua "
"scelta: puoi usarla solo in qualche importante file GDScript, dappertutto o "
"puoi scrivere codice come hai sempre fatto!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"La tipizzazione statica può essere usata su variabili, costanti, funzioni, "
"parametri e tipi ritornati."

msgid "Typed GDScript is available since Godot 3.1."
msgstr "GDScript tipizzato è disponibile a partire da Godot 3.1."

msgid "A brief look at static typing"
msgstr "Un breve sguardo alla tipizzazione statica"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"Con la tipizzazione di GDScript, Godot può rilevare ancora più errori mentre "
"scrivi codice! Fornisce a te e ai tuoi compagni di squadra maggiori "
"informazioni mentre lavorate poiché i tipi degli argomenti appaiono quando "
"chiamate un metodo."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Immagina di programmare un sistema di inventario. Progetti un nodo ``Item``, "
"poi un nodo ``Inventory``. Per aggiungere elementi all'inventario, le "
"persone che lavorano con il tuo codice devono sempre passare un oggetto di "
"tipo ``Item``al metodo ``Inventory.add``. Con la tipizzazione puoi imporre "
"questa regola così:"

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Un altro vantaggio significativo della tipizzazione di GDScript è il nuovo "
"**warning system**. Dalla versione 3.1, Godot emette warning mentre scrivi "
"il tuo codice: l'engine identifica sezioni del tuo codice che potrebbero "
"causare problemi in fase di esecuzione ma lascia a te decidere se mantenere "
"il codice così com'è. Dettagli più avanti."

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"La tipizzazione statica inoltre fornisce migliori opzioni di completamento "
"automatico. Di seguito puoi vedere la differenza tra le opzioni di "
"completamento tra la tipizzazione dinamica e quella statica per la classe "
"``PlayerController``."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Probabilmente hai già assegnato un nodo ad una variabile in precedenza e "
"digitato un punto per poi scoprire di non avere suggerimenti di "
"autocompletamento:"

#, fuzzy
msgid "code completion options for dynamic"
msgstr "opzioni di completamento del codice per la tipizzazione dinamica"

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Questo è per via della tipizzazione dinamica. Godot non può sapere quale "
"nodo o tipo stai passando alla funzione. Al contrario se dichiari il tipo "
"esplicitamente, otterrai tutti i metodi pubblici e le variabili del nodo:"

#, fuzzy
msgid "code completion options for typed"
msgstr "opzioni di completamento del codice tipizzato"

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"In futuro la tipizzazione di GDScript aumenterà le prestazioni del codice: "
"la compilazione Just-In-Time e altre ottimizzazioni del compilatore sono già "
"nella roadmap!"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""

msgid "How to use static typing"
msgstr "Come usare la tipizzazione statica"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr "Godot proverà ad dedurre il tipo se scrivi due punti e ometti il tipo:"

msgid "Currently you can use three types of… types:"
msgstr "Al momento puoi usare tre tipologie di... tipi:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""

msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""

msgid "Custom variable types"
msgstr ""

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""

msgid "Variable casting"
msgstr ""

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""

#, fuzzy
msgid "Safe lines"
msgstr "Linee sicure"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""

msgid "Define the return type of a function with the arrow ->"
msgstr "Definire il tipo restituito di una funzione con la freccia ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""

msgid "You can also use your own nodes as return types:"
msgstr ""

msgid "Typed or dynamic: stick to one style"
msgstr "Tipizzazione statica o dinamica: attieniti ad un unico stile"

#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"GDScript tipizzato staticamente e GDScript tipizzato dinamicamente possono "
"coesistere nello stesso progetto. Tuttavia raccomando di attenersi ad un "
"unico stile per la consistenza della codebase, e per i tuoi colleghi. È più "
"semplice lavorare insieme se si seguono le stesse linee guida, e leggere e "
"capire il codice degli altri diventa più veloce."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""

msgid "And with static typing:"
msgstr "E con la tipizzazione statica:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""

msgid "And the same callback, with type hints:"
msgstr ""

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""

#, fuzzy
msgid "Warning system"
msgstr "Sistema di allarme"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""

msgid "Cases where you can't specify types"
msgstr ""

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""

msgid "You can't use Enums as types:"
msgstr ""

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr ""

msgid "Summary"
msgstr "Sommario"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""

msgid "Translation status"
msgstr "Stato della traduzione"
