# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: Un'introduzione ai linguaggi dinamici"

msgid "About"
msgstr "Informazioni su Godot"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""

#, fuzzy
msgid "Dynamic nature"
msgstr "Natura dinamica"

#, fuzzy
msgid "Pros & cons of dynamic typing"
msgstr "Pro & contro della tipizzazione dinamica"

#, fuzzy
msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr ""
"GDScript è un linguaggio dinamicamente tipizzato. Come tale, i suoi "
"principali vantaggi sono che:"

#, fuzzy
msgid "The language is simple and easy to learn."
msgstr "Il linguaggio è semplice e facile da imparare."

#, fuzzy
msgid "Most code can be written and changed quickly and without hassle."
msgstr ""
"La maggior parte del codice può essere scritto e cambiato rapidamente e "
"senza problemi."

#, fuzzy
msgid "Less code written means less errors & mistakes to fix."
msgstr "Meno codice scritto significa meno errori ed errori da correggere."

#, fuzzy
msgid "Easier to read the code (less clutter)."
msgstr "Più facile leggere il codice (meno disordine)."

#, fuzzy
msgid "No compilation is required to test."
msgstr "Non è richiesta alcuna compilazione per il test."

#, fuzzy
msgid "Runtime is tiny."
msgstr "Il tempo di esecuzione è minuscolo."

msgid "Duck-typing and polymorphism by nature."
msgstr ""

#, fuzzy
msgid "While the main disadvantages are:"
msgstr "Mentre i principali svantaggi sono:"

#, fuzzy
msgid "Less performance than statically typed languages."
msgstr "Meno prestazioni rispetto ai linguaggi tipizzati staticamente."

#, fuzzy
msgid "More difficult to refactor (symbols can't be traced)"
msgstr ""
"Più difficile da rifattorizzare (i simboli non possono essere tracciati)"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""

msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""

msgid "Variables & assignment"
msgstr "Variabili e assegnazione"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""

msgid "Static:"
msgstr "Statico:"

msgid "Dynamic:"
msgstr "Dinamico:"

#, fuzzy
msgid "As function arguments:"
msgstr "Come argomenti della funzione:"

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""

msgid "Pointers & referencing:"
msgstr ""

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""

msgid "C++:"
msgstr "C++:"

msgid "Java:"
msgstr "Java:"

msgid "GDScript:"
msgstr "GDScript:"

msgid ""
"In GDScript, only base types (int, float, String and PoolArray types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""

msgid ""
"A value is **passed by value** when it is copied every time it's specified "
"as a function parameter. One consequence of this is that the function cannot "
"modify the parameter in a way that is visible from outside the function::"
msgstr ""

msgid ""
"A value is **passed by reference** when it is *not* copied every time it's "
"specified as a function parameter. This allows modifying a function "
"parameter within a function body (and having the modified value accessible "
"outside the function). The downside is that the data passed as a function "
"parameter is no longer guaranteed to be immutable, which can cause difficult-"
"to-track bugs if not done carefully::"
msgstr ""

msgid ""
"Compared to passing by value, passing by reference can perform better when "
"using large objects since copying large objects in memory can be slow."
msgstr ""

msgid ""
"Additionally, in Godot, base types such as String are **immutable**. This "
"means that modifying them will *always* return a copy of the original value, "
"rather than modifying the value in-place."
msgstr ""

#, fuzzy
msgid "Arrays"
msgstr "Arrays"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""

msgid "And in GDScript:"
msgstr "E in GDScript:"

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""

msgid "Or unordered sets:"
msgstr ""

msgid "Dictionaries"
msgstr "Dizionari"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""

msgid "Example of Dictionary:"
msgstr ""

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""

msgid "For & while"
msgstr "For e while"

msgid "Iterating in some statically typed languages can be quite complex:"
msgstr ""

msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr ""

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""

msgid "Iterating with indices is also possible:"
msgstr ""

msgid "The range() function can take 3 arguments:"
msgstr ""

msgid "Some statically typed programming language examples:"
msgstr ""

#, fuzzy
msgid "Translate to:"
msgstr "Traduci in:"

msgid "And backwards looping is done through a negative counter:"
msgstr ""

msgid "Becomes:"
msgstr "Diventa:"

msgid "While"
msgstr "Mentre"

msgid "while() loops are the same everywhere:"
msgstr ""

#, fuzzy
msgid "Custom iterators"
msgstr "Iteratori personalizzati"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""

msgid "And it can be used like any other iterator:"
msgstr ""

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""

#, fuzzy
msgid "Duck typing"
msgstr "Tipizzazione ad anatra (duck typing)"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""

#, fuzzy
msgid "In this case, it translates to:"
msgstr "In questo caso, si traduce in:"

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""

msgid "Yes, we should call it Hulk typing instead."
msgstr ""

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""

msgid "Translation status"
msgstr "Stato della traduzione"
