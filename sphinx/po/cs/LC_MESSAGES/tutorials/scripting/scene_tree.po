# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using SceneTree"
msgstr "Použití SceneTree"

msgid "Introduction"
msgstr "Úvod"

msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are collections of nodes. They become active once they enter the "
"*scene tree*."
msgstr ""
"V předchozích výukových kurzech se vše točilo kolem konceptu uzlů. Scény "
"jsou kolekce uzlů. Ty se stávají aktivními, jakmile vstoupí do *stromu scén "
"(scene tree)*."

msgid "MainLoop"
msgstr "MainLoop"

msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Godot funguje interně následujícím způsobem. Existuje třída :ref:`OS "
"<class_OS>`, pouze její instance běží uplně od začátku. Poté se načtou "
"všechny ovladače, servery, skriptovací jazyky, systém scén atd."

msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"Po dokončení inicializace potřebuje :ref:`OS <class_OS>` dodat ke spuštění :"
"ref:`MainLoop <class_MainLoop>` . Až do této chvíle vše funguje uvnitř "
"enginu (můžete se podívat do souboru main/main.cpp ve zdrojovém kódu, pokud "
"vás někdy bude zajímat, jak to vlastně běhá)."

msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""
"Uživatelský program nebo hra se spustí pomocí MainLoop. Tato třída má "
"několik metod pro inicializaci, nečinnost (funkce synchronizované se "
"snímky), pravidelně se opakující (funkce synchronizované s fyzikou) a vstup. "
"Opět se jedná o záležitost enginu a při tvorbě her v Godotu má psaní vlastní "
"MainLoop málokdy smysl."

msgid "SceneTree"
msgstr "Strom scény"

msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Fungování Godot lze vysvětlit i tak, že se jedná o vysokoúrovňový herní "
"engine nad nízkoúrovňovým middlewarem."

msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"Systém scén je herní engine, zatímco :ref:`OS <class_OS>` a servery "
"představují nízkoúrovňové API."

msgid ""
"The scene system provides its own main loop to OS, :ref:`SceneTree "
"<class_SceneTree>`. This is automatically instanced and set when running a "
"scene, no need to do any extra work."
msgstr ""
"Systém scén poskytuje OS vlastní hlavní smyčku, :ref:`SceneTree "
"<class_SceneTree>`. Ta se automaticky vytváří a nastavuje při spuštění "
"scény, není třeba dělat nic dalšího."

msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"Je důležité vědět, že tato třída existuje, protože má několik důležitých "
"použití:"

msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)."
msgstr ""
"Obsahuje kořenový :ref:`Viewport(výřez) <class_Viewport>`, do kterého je "
"scéna přidána jako potomek při svém prvním otevření, aby se stala součástí "
"*Stromu scén (Scene Tree)* (o tom více příště)."

msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"Obsahuje informace o skupinách a umožňuje zavolat všechny uzly ve skupině "
"nebo získat jejich seznam."

msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"Obsahuje některé funkce pro změnu globálního stavu, jako je nastavení režimu "
"pozastavení nebo ukončení procesu."

msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""
"Pokud je uzel(Node) součástí Scene Tree, lze singleton :ref:`SceneTree "
"<class_SceneTree>` získat voláním :ref:`Node.get_tree() "
"<class_Node_method_get_tree>`."

msgid "Root viewport"
msgstr "Kořenový výřez (viewport)"

msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"Kořenový :ref:`Viewport <class_Viewport>` je vždy na vrcholu scény. Z "
"aktuálního uzlu jej lze získat dvěma různými způsoby:"

msgid ""
"This node contains the main viewport. Anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen."
msgstr ""
"Tento uzel obsahuje hlavní průzor (výřez). Vše, co je potomkem :ref:"
"`Viewport <class_Viewport>`, se ve výchozím nastavení uvnitř něho "
"vykresluje, takže dává smysl, že vrcholem všech uzlů je vždy uzel tohoto "
"typu, jinak by nebylo nic vidět."

msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""
"Ačkoli ve scéně lze vytvářet další výřezy (pro efekty rozdělené obrazovky "
"apod.), tento výřez je jediný, který nevytváří nikdy uživatel . Vzniká "
"automaticky uvnitř stromu SceneTree."

msgid "Scene tree"
msgstr "Strom scény"

msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""
"Pokud je uzel přímo nebo nepřímo připojen ke kořenovému výřezu, stává se "
"součástí *stromu scény*."

msgid ""
"This means that as explained in previous tutorials, it will get the "
"``_enter_tree()`` and ``_ready()`` callbacks (as well as ``_exit_tree()``)."
msgstr ""
"To znamená, že jak bylo vysvětleno v předchozích tutoriálech, získá funkce "
"``_enter_tree()`` a ``_ready()`` (a také ``_exit_tree()``)."

msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D visuals, "
"receive and send notifications, play sounds, etc. When they are removed from "
"the *scene tree*, they lose these abilities."
msgstr ""
"Když uzly vstoupí do *SceneTree*, stanou se aktivními. Získají přístup ke "
"všemu, co potřebují ke správné funkci, získávají vstupy, zobrazují 2D a 3D "
"vizualizace, přijímají a odesílají oznámení, přehrávají zvuky atd. Když jsou "
"ze *stromu scény* odstraněny, tyto schopnosti ztrácejí."

msgid "Tree order"
msgstr "Pořadí ve stromu"

msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a lower rank in the tree order will get notified before the current "
"node."
msgstr ""
"Většina operací s uzly v systému Godot, jako je kreslení 2D, zpracování nebo "
"získávání oznámení, se provádí podle pořadí ve stromu To znamená, že rodiče "
"a sourozenci , které jsou ve stromu nad aktuláním uzlem (tj. mají ve stromu "
"nižší pořadové číslo ) dostanou oznámení před aktuálním uzlem."

msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "\"Aktivování\" vstupem do *SceneTree*"

msgid "A scene is loaded from disk or created by scripting."
msgstr "Scéna je načtena z disku nebo vytvořena pomocí skriptů."

msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""
"Kořenový uzel této scény (je jen jeden, pamatujete?) je přidán buď jako "
"potomek \"kořenového\" výřezu (ze SceneTree), nebo k jakémukoli jeho "
"potomkovi či vnukovi."

msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""
"Každý uzel nově přidané scény obdrží oznámení \"enter_tree\" (funkci "
"``_enter_tree()`` v jazyce GDScript) v pořadí shora dolů."

msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""
"Pro usnadnění je k dispozici dodatečné oznámení \"ready\" (funkce "
"``_ready()`` v jazyce GDScript), když se uzel a všechny jeho děti nacházejí "
"uvnitř aktivní scény."

msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""
"Když je scéna (nebo její část) odstraněna, obdrží oznámení \"exit "
"scene\" (funkce ``_exit_tree()`` v jazyce GDScript) v pořadí zdola nahoru"

msgid "Changing current scene"
msgstr "Změna aktuální scény"

msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""
"Po načtení scény je často žádoucí tuto scénu vyměnit za jinou. Jednoduchý "
"způsob, jak to provést, je použít funkci :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>`:"

msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""
"Místo cest k souborům lze také použít hotové zdroje :ref:`PackedScene "
"<class_PackedScene>` pomocí ekvivalentní funkce :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"

msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in the development of your game, it may be preferable to create proper "
"loading screens with progress bar, animated indicators or thread "
"(background) loading. This must be done manually using autoloads (see next "
"chapter) and :ref:`doc_background_loading`."
msgstr ""
"Jedná se o rychlé a užitečné způsoby přepínání scén, které však mají tu "
"nevýhodu, že hra zamrzne, dokud se nová scéna nenačte a nespustí. V určitém "
"okamžiku vývoje hry může být vhodnější vytvořit řádné načítací obrazovky s "
"ukazatelem průběhu, animovanými indikátory nebo načítáním v pararelním "
"vláknu (na pozadí). To je třeba provést ručně pomocí automatického načítání "
"(viz další kapitola) a :ref:`doc_background_loading`."

msgid "Translation status"
msgstr "Stav překladu"
