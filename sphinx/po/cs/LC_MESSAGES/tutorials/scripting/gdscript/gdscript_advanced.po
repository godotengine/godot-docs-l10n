# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: Úvod do dynamických jazyků"

msgid "About"
msgstr "O aplikaci"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"Tento návod má sloužit jako stručný návod, jak efektivněji používat "
"GDScript. Zaměřuje se na běžné případy specifické pro tento jazyk, ale "
"obsahuje také mnoho informací o dynamicky typovaných jazycích."

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"Má být užitečné zejména pro programátory s malými nebo žádnými předchozími "
"zkušenostmi s dynamicky typovanými jazyky."

msgid "Dynamic nature"
msgstr "Dynamická povaha"

msgid "Pros & cons of dynamic typing"
msgstr "Výhody a nevýhody dynamického typování"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript je dynamicky typovaný jazyk. Jeho hlavními výhodami jsou:"

msgid "The language is simple and easy to learn."
msgstr "Jazyk je jednoduchý a snadno se učí."

msgid "Most code can be written and changed quickly and without hassle."
msgstr "Většinu kódu lze zapsat a změnit rychle a bez potíží."

msgid "Less code written means less errors & mistakes to fix."
msgstr "Méně napsaného kódu znamená méně chyb a omylů k opravě."

msgid "Easier to read the code (less clutter)."
msgstr "Snadnější čtení kódu (méně nepořádku)."

msgid "No compilation is required to test."
msgstr "Pro testování není nutná žádná kompilace."

msgid "Runtime is tiny."
msgstr "Runtime je malinký."

msgid "Duck-typing and polymorphism by nature."
msgstr "Duck typing a polymorfismus jako přirozená vlastnost návrhu."

msgid "While the main disadvantages are:"
msgstr "Hlavními nevýhodami jsou:"

msgid "Less performance than statically typed languages."
msgstr "Menší výkon než staticky typované jazyky."

msgid "More difficult to refactor (symbols can't be traced)"
msgstr "Obtížnější refaktorizace (symboly nelze dohledat)"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"Některé chyby, které by ve staticky typovaných jazycích byly typicky "
"odhaleny při kompilaci, se objeví až za běhu programu(protože parsování "
"výrazů je přísnější)."

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""
"Menší flexibilita při automatickém dokončování kódu (některé typy proměnných "
"jsou známy až za běhu)."

msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"To v praxi znamená, že Godot + GDScript jsou kombinací určenou k rychlému a "
"efektivnímu vytváření her. Pro hry, které jsou velmi náročné na výpočetní "
"výkon a nemohou využívat vestavěné nástroje enginu (jako jsou vektorové "
"typy, fyzikální engine, matematická knihovna atd.), je zde také možnost "
"použit jazyk C++. Díky tomu můžete většinu hry stále vytvářet v jazyce "
"GDScript a v oblastech, které potřebují zvýšit výkon, přidat malé kousky "
"jazyka C++."

msgid "Variables & assignment"
msgstr "Proměnné a přiřazení"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"Všechny proměnné v dynamicky typovaném jazyce jsou \"variantní\". To "
"znamená, že jejich typ není pevně stanoven a mění se pouze přiřazením. "
"Příklad:"

msgid "Static:"
msgstr "Statické:"

msgid "Dynamic:"
msgstr "Dynamické:"

msgid "As function arguments:"
msgstr "Jako argumenty funkce:"

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"Funkce jsou také dynamické povahy, což znamená, že je lze volat s různými "
"argumenty, například:"

msgid "Pointers & referencing:"
msgstr "Ukazatele a odkazování:"

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"Ve statických jazycích, jako jsou C nebo C++ (a do jisté míry i Java a C#), "
"se rozlišuje mezi proměnnou a ukazatelem/odkazem na proměnnou. Druhá "
"jmenovaná umožňuje modifikovat objekt jinými funkcemi předáním odkazu na "
"původní objekt."

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"V jazycích C# nebo Java je vše, co není vestavěný typ (int, float, někdy "
"String), vždy ukazatel nebo reference. Reference se také automaticky "
"uvolňují, což znamená, že jsou vymazány, když se již nepoužívají. Dynamicky "
"typované jazyky mají tendenci používat tento paměťový model také. Některé "
"příklady:"

msgid "C++:"
msgstr "C++:"

msgid "Java:"
msgstr "Java:"

msgid "GDScript:"
msgstr "GDScript:"

msgid ""
"In GDScript, only base types (int, float, String and PoolArray types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"V jazyce GDScript se funkcím předávají hodnotou pouze základní typy (int, "
"float, string a typy PoolArray) (hodnota se kopíruje). Vše ostatní "
"(instance, pole, slovníky atd.) se předává odkazem. Třídy, které dědí :ref:"
"`class_Reference` (výchozí, pokud není nic zadáno), budou automaticky "
"uvolněny, pokud se nepoužívají, ale je povolena i ruční správa paměti, pokud "
"dědí ručně z :ref:`class_Object`."

msgid ""
"A value is **passed by value** when it is copied every time it's specified "
"as a function parameter. One consequence of this is that the function cannot "
"modify the parameter in a way that is visible from outside the function::"
msgstr ""

msgid ""
"A value is **passed by reference** when it is *not* copied every time it's "
"specified as a function parameter. This allows modifying a function "
"parameter within a function body (and having the modified value accessible "
"outside the function). The downside is that the data passed as a function "
"parameter is no longer guaranteed to be immutable, which can cause difficult-"
"to-track bugs if not done carefully::"
msgstr ""

msgid ""
"Compared to passing by value, passing by reference can perform better when "
"using large objects since copying large objects in memory can be slow."
msgstr ""

msgid ""
"Additionally, in Godot, base types such as String are **immutable**. This "
"means that modifying them will *always* return a copy of the original value, "
"rather than modifying the value in-place."
msgstr ""

msgid "Arrays"
msgstr "Pole"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"Pole v dynamicky typovaných jazycích mohou obsahovat mnoho různých smíšených "
"datových typů a jsou vždy dynamická (mohou kdykoli měnit velikost). "
"Srovnejte například pole ve staticky typovaných jazycích:"

msgid "And in GDScript:"
msgstr "A v jazyce GDScript:"

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""
"V dynamicky typovaných jazycích mohou pole sloužit i jako jiné datové typy, "
"například seznamy:"

msgid "Or unordered sets:"
msgstr "Nebo neuspořádané množiny:"

msgid "Dictionaries"
msgstr "Slovníky"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"Slovníky jsou v dynamicky typovaných jazycích mocným nástrojem. Většina "
"programátorů, kteří přišli ze staticky typovaných jazyků (jako je C++ nebo "
"C#), jejich existenci ignoruje a zbytečně si tím komplikuje život. Tento "
"datový typ se v takových jazycích zpravidla nevyskytuje (nebo jen v omezené "
"podobě)."

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"Slovníky mohou mapovat libovolnou hodnotu na libovolnou jinou hodnotu, "
"přičemž se vůbec nehledí na datový typ použitý jako klíč nebo hodnota. "
"Navzdory všeobecnému přesvědčení jsou efektivní, protože je lze "
"implementovat pomocí hashovacích tabulek. Ve skutečnosti jsou tak efektivní, "
"že některé jazyky jdou tak daleko, že implementují pole jako slovníky."

msgid "Example of Dictionary:"
msgstr "Příklad slovníku:"

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"Slovníky jsou také dynamické, klíče lze kdykoli přidat nebo odebrat bez "
"větších nároků na výkon:"

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"Ve většině případů lze dvourozměrná pole často snáze implementovat pomocí "
"slovníků. Zde je jednoduchý příklad hry s bitevní lodí:"

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"Slovníky lze použít také jako datové značky nebo rychlé struktury. Ačkoli se "
"slovníky v jazyce GDScript podobají pythonovským slovníkům, podporují také "
"syntaxi a indexování ve stylu jazyka Lua, což je užitečné pro zápis "
"počátečních stavů a rychlých struktur:"

msgid "For & while"
msgstr "For & while"

msgid "Iterating in some statically typed languages can be quite complex:"
msgstr ""
"Iterace v některých staticky typovaných jazycích může být poměrně složitá:"

msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "V dynamicky typovaných jazycích je to obvykle značně zjednodušeno:"

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"Kontejnerové datové typy (pole a slovníky) jsou iterovatelné. Slovníky "
"umožňují procházení podle klíčů:"

msgid "Iterating with indices is also possible:"
msgstr "Iterace pomocí indexů je také možná:"

msgid "The range() function can take 3 arguments:"
msgstr "Funkce range() je schopna pobrat až 3 argumenty:"

msgid "Some statically typed programming language examples:"
msgstr "Některé příklady staticky typovaných programovacích jazyků:"

msgid "Translate to:"
msgstr "Lze přeložit do:"

msgid "And backwards looping is done through a negative counter:"
msgstr "Zpětná smyčka se provádí pomocí záporného čítače:"

msgid "Becomes:"
msgstr "Se stane:"

msgid "While"
msgstr "While"

msgid "while() loops are the same everywhere:"
msgstr "Smyčky while() jsou všude stejné:"

msgid "Custom iterators"
msgstr "Vlastní iterátory"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"Pokud výchozí iterátory nevyhovují vašim potřebám, můžete si vytvořit "
"vlastní iterátory tak, že ve svém skriptu přetížíte funkce ``_iter_init``, "
"``_iter_next`` a ``_iter_get`` třídy Variant. Následuje příklad implementace "
"dopředného iterátoru:"

msgid "And it can be used like any other iterator:"
msgstr "A lze jej použít jako jakýkoli jiný iterátor:"

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"Ujistěte se, že jste resetovali stav iterátoru v ``_iter_init``, jinak "
"vnořené smyčky for, které používají vlastní iterátory, nebudou fungovat "
"podle vašeho očekávání."

msgid "Duck typing"
msgstr "Kachní typování (Duck typing)"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"Jedním z nejobtížnějších konceptů, které je třeba pochopit při přechodu ze "
"staticky typovaného jazyka na dynamický, je kachní typování. Díky kachnímu "
"typování je celkový návrh kódu mnohem jednodušší a přímočařejší, ale na "
"první pohled není zřetelné, jak to celé funguje."

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"Jako příklad si představte situaci, kdy do tunelu padá velký kámen a rozbíjí "
"vše, co mu stojí v cestě. Kód pro kámen by ve staticky typovaném jazyce "
"vypadal takto:"

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"Tímto způsobem by vše, co lze rozbít kamenem, muselo zdědit Smashable. Pokud "
"by postava, nepřítel, kus nábytku čí malý kámen byly rozbitné, musely by "
"dědit od třídy Smashable, což by případně vyžadovalo vícenásobnou dědičnost. "
"Pokud by vícenásobná dědičnost nebyla žádoucí, pak by musely dědit společnou "
"třídu, jako je Entity. Přesto by nebylo příliš elegantní přidávat virtuální "
"metodu ``smash()`` do Entity pouze pro případ, že jen některé Entity budou "
"rozbitné."

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"V dynamicky typovaných jazycích to není problém. Duck typing zajišťuje, že "
"stačí definovat funkci ``smash()`` pouze tam, kde je to nutné, a to je vše. "
"Není třeba uvažovat o dědičnosti, bázových třídách atd."

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"A to je vše. Pokud má objekt, který narazil do velkého kamene, metodu "
"smash(), bude zavolána. Není třeba dědičnosti ani polymorfismu. Dynamicky "
"typované jazyky se starají pouze o to, aby instance měla požadovanou metodu "
"nebo člen, nikoli o to, co dědí, nebo o typ třídy. Definice kachního "
"typování by to měla objasnit:"

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*\"Když vidím ptáka, který chodí jako kachna, plave jako kachna a kváká jako "
"kachna, říkám mu kachna. \"*"

msgid "In this case, it translates to:"
msgstr "V tomto případě to znamená:"

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr "*\"Pokud lze předmět rozbít, je jedno, co to je, prostě ho rozbij. \"*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "Ano, měli bychom to nazývat Hulk typing."

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"Je možné, že zasažený objekt nemá funkci smash(). Některé dynamicky typované "
"jazyky prostě ignorují volání metody, pokud neexistuje (například Objective "
"C), ale GDScript je přísnější, takže je žádoucí kontrolovat, zda funkce "
"existuje:"

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"Pak stačí definovat tuto metodu a vše, čeho se kámen dotkne, může být "
"rozbito."

msgid "Translation status"
msgstr "Stav překladu"
