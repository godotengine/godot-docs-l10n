# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript basics"
msgstr "Základy jazyka GDScript"

msgid "Introduction"
msgstr "Úvod"

msgid ""
"*GDScript* is a high-level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""
"*GDScript* je vysokoúrovňový dynamicky typovaný programovací jazyk, který se "
"používá k vytváření obsahu. Jeho syntaxe je podobná jazyku `Python <https://"
"en.wikipedia.org/wiki/Python_%28programming_language%29>`_ (bloky jsou "
"založeny na odsazení,mnoho klíčových slov je převzato). Cílem jazyka je "
"optimalizace a úzká integrace s Godot Engine, což umožňuje velkou "
"flexibilitu při vytváření obsahu a integraci."

msgid "History"
msgstr "Historie"

msgid ""
"Documentation about GDScript's history has been moved to the :ref:"
"`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""
"Dokumentace o historii GDScript byla přesunuta do :ref:`Často kladené otázky "
"<doc_faq_what_is_gdscript>`."

msgid "Example of GDScript"
msgstr "Příklad GDScriptu"

msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""
"Někteří lidé se lépe naučí syntaxi, když ji před sebou vidí. Tady je malá "
"ochutnávka GDSkriptu."

msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"Pokud máte předchozí zkušenosti se staticky typovanými jazyky, jako C, C++ "
"nebo C#, ale nikdy předtím jste dynamicky typovaný jazyk nepoužívali, "
"doporučujeme vám přečíst si tento návod: :ref:"
"`doc_gdscript_more_efficiently`."

msgid "Language"
msgstr "Jazyk"

msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"V následujícím textu je uveden přehled GDScript. Podrobnosti, například jaké "
"metody jsou dostupné pro pole čí jiné objekty, je třeba vyhledat pomocí "
"přiložených odkazů na dokumentaci tříd."

msgid "Identifiers"
msgstr "Identifikátory"

msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"Jako identifikátor lze použít jakýkoli řetězec, který se omezuje na znaky "
"abecedy (``a`` až ``z`` a ``A`` až ``Z``), číslice (``0`` až ``9``) a ``_``. "
"Identifikátory navíc nesmí začínat číslicí. U identifikátorů se rozlišují "
"malá a velká písmena (``foo`` se liší od ``FOO``)."

msgid "Keywords"
msgstr "Klíčová slova"

msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"Následuje seznam klíčových slov podporovaných tímto jazykem. Protože klíčová "
"slova jsou rezervovaná slova (tokeny), nelze je používat jako "
"identifikátory. Rezervované jsou také operátory (jako ``in``, ``not``, "
"``and`` nebo ``or``) a názvy vestavěných typů uvedené v následujících "
"kapitolách."

msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"Klíčová slova jsou definována v `GDScript tokenizeru <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_, "
"pokud se chcete podívat pod pokličku."

msgid "Keyword"
msgstr "Klíčové slovo"

msgid "Description"
msgstr "Popis"

msgid "if"
msgstr "if"

msgid "See `if/else/elif`_."
msgstr "Viz `if/else/elif`_."

msgid "elif"
msgstr "elif"

msgid "else"
msgstr "else"

msgid "for"
msgstr "for"

msgid "See for_."
msgstr "Viz for_."

msgid "while"
msgstr "while"

msgid "See while_."
msgstr "Viz while_."

msgid "match"
msgstr "match"

msgid "See match_."
msgstr "Viz match_."

msgid "break"
msgstr "break"

msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "Ukončí provádění aktuální smyčky ``for`` nebo ``while``."

msgid "continue"
msgstr "continue"

msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "Okamžitě přeskočí na další iteraci cyklu ``for`` nebo ``while``."

msgid "pass"
msgstr "pass"

msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"Používá se tam, kde je příkaz syntakticky vyžadován, ale provedení kódu je "
"nežádoucí, např. v prázdných funkcích."

msgid "return"
msgstr "return"

msgid "Returns a value from a function."
msgstr "Vrací hodnotu z funkce."

msgid "class"
msgstr "class"

msgid "Defines an inner class."
msgstr "Definuje vnitřní třídu."

msgid "class_name"
msgstr "class_name"

msgid "Defines a class name and optional icon for your script."
msgstr "Definuje název třídy a volitelnou ikonu pro váš skript."

msgid "extends"
msgstr "extends"

msgid "Defines what class to extend with the current class."
msgstr "Definuje, jakou třídu chcete rozšířit o aktuální třídu."

msgid "is"
msgstr "is"

msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"Testuje, zda proměnná rozšiřuje danou třídu nebo zda je daného vestavěného "
"typu."

msgid "as"
msgstr "as"

msgid "Cast the value to a given type if possible."
msgstr "Pokud je to možné, přetypujte hodnotu na daný typ."

msgid "self"
msgstr "self"

msgid "Refers to current class instance."
msgstr "Odkazuje na aktuální instanci třídy."

msgid "tool"
msgstr "tool"

msgid "Executes the script in the editor."
msgstr "Spustí skript v editoru."

msgid "signal"
msgstr "signal"

msgid "Defines a signal."
msgstr "Definuje signál."

msgid "func"
msgstr "func"

msgid "Defines a function."
msgstr "Definuje funkci."

msgid "static"
msgstr "static"

msgid "Defines a static function. Static member variables are not allowed."
msgstr "Definuje statickou funkci. Statické členské proměnné nejsou povoleny."

msgid "const"
msgstr "const"

msgid "Defines a constant."
msgstr "Definuje konstantu."

msgid "enum"
msgstr "enum"

msgid "Defines an enum."
msgstr "Definuje enum."

msgid "var"
msgstr "var"

msgid "Defines a variable."
msgstr "Definuje proměnnou."

msgid "onready"
msgstr "onready"

msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""
"Inicializuje proměnnou, jakmile se uzel, ke kterému je skript připojen, a "
"jeho potomci stanou součástí stromu scény."

msgid "export"
msgstr "export"

msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr ""
"Uloží proměnnou spolu se zdrojem, ke kterému je připojena, a zviditelní ji "
"pro úpravy v editoru."

msgid "setget"
msgstr "setget"

msgid "Defines setter and getter functions for a variable."
msgstr "Definuje funkce setter a getter pro proměnnou."

msgid "breakpoint"
msgstr "breakpoint"

msgid "Editor helper for debugger breakpoints."
msgstr "Pomocník editoru pro body přerušení debuggeru."

msgid "preload"
msgstr "preload"

msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr "Předběžně načte třídu nebo proměnnou. Viz `Classes as resources`_."

msgid "yield"
msgstr "yield"

msgid "Coroutine support. See `Coroutines with yield`_."
msgstr "Podpora korutin. Viz `Coroutines with yield`_."

msgid "assert"
msgstr "assert"

msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"Uplatní podmínku, při selhání zaznamená chybu. Ignorováno v sestaveních bez "
"ladění. Viz klíčové slovo `Assert`_."

msgid "remote"
msgstr "remote"

msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""
"Síťová anotace RPC. Viz :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."

msgid "master"
msgstr "master"

msgid "puppet"
msgstr "puppet"

msgid "remotesync"
msgstr "remotesync"

msgid "mastersync"
msgstr "mastersync"

msgid "puppetsync"
msgstr "puppetsync"

msgid "PI"
msgstr "PI"

msgid "PI constant."
msgstr "Konstanta PI."

msgid "TAU"
msgstr "TAU"

msgid "TAU constant."
msgstr "Konstanta TAU."

msgid "INF"
msgstr "INF"

msgid "Infinity constant. Used for comparisons."
msgstr "Konstanta nekonečna. Používá se pro porovnávání."

msgid "NAN"
msgstr "NAN"

msgid "NAN (not a number) constant. Used for comparisons."
msgstr "NAN (not a number) konstanta. Používá se pro porovnávání."

msgid "Operators"
msgstr "Operátory"

msgid "The following is the list of supported operators and their precedence."
msgstr "Následuje seznam podporovaných operátorů a jejich priority."

msgid "**Operator**"
msgstr "**Operátor**"

msgid "**Description**"
msgstr "**Popis**"

msgid "``x[index]``"
msgstr "``x[index]``"

msgid "Subscription (highest priority)"
msgstr "Subskript (nejvyšší priorita)"

msgid "``x.attribute``"
msgstr "``x.attribute``"

msgid "Attribute reference"
msgstr "Odkaz na atribut"

msgid "``foo()``"
msgstr "``foo()``"

msgid "Function call"
msgstr "Volání funkce"

msgid "``is``"
msgstr "``is``"

msgid "Instance type checker"
msgstr "Kontrola typu instance"

msgid "``~``"
msgstr "``~``"

msgid "Bitwise NOT"
msgstr "Bitové NOT"

msgid "``-x``"
msgstr "``-x``"

msgid "Negative / Unary negation"
msgstr "Negativní / unární negace"

msgid "``*`` ``/`` ``%``"
msgstr "``*`` ``/`` ``%``"

msgid "Multiplication / Division / Remainder"
msgstr "Násobení / dělení / zbytek"

msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats), and is additionally used for "
"Format Strings"
msgstr ""
"Tyto operátory se chovají stejně jako v jazyce C++. Celočíselné dělení je "
"useknuto, místo aby vracelo zlomkové číslo, a operátor % je k dispozici "
"pouze pro inty (\"fmod\" pro floaty) a navíc se používá pro formátování "
"řetězců"

msgid "``+``"
msgstr "``+``"

msgid "Addition / Concatenation of arrays"
msgstr "Sčítání / spojování polí"

msgid "``-``"
msgstr "``-``"

msgid "Subtraction"
msgstr "Odčítání"

msgid "``<<`` ``>>``"
msgstr "``<<`` ``>>``"

msgid "Bit shifting"
msgstr "Posouvání bitů"

msgid "``&``"
msgstr "``&``"

msgid "Bitwise AND"
msgstr "Bitově AND"

msgid "``^``"
msgstr "``^``"

msgid "Bitwise XOR"
msgstr "Bitový XOR"

msgid "``|``"
msgstr "``|``"

msgid "Bitwise OR"
msgstr "Bitové OR"

msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"

msgid "Comparisons"
msgstr "Porovnání"

msgid "``in``"
msgstr "``in``"

msgid ""
"When used with the ``if`` keyword it checks if a value is within a string, "
"list, range, dictionary, or node. When used with the ``for`` keyword it is "
"used to iterate though the contents of a string, list, range, dictionary or "
"node."
msgstr ""

msgid "``!`` ``not``"
msgstr "``!`` ``not``"

msgid "Boolean NOT"
msgstr "Logický NOT"

msgid "``and`` ``&&``"
msgstr "``and`` ``&&``"

msgid "Boolean AND"
msgstr "Logické AND"

msgid "``or`` ``||``"
msgstr "``or`` ``||``"

msgid "Boolean OR"
msgstr "Logické OR"

msgid "``if x else``"
msgstr "``if x else``"

msgid "Ternary if/else"
msgstr "Ternární if/else"

msgid "``as``"
msgstr "``as``"

msgid "Type casting"
msgstr "Přetypování"

msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=`` ``<<=`` ``>>=``"
msgstr "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=`` ``<<=`` ``>>=``"

msgid "Assignment (lowest priority)"
msgstr "Přiřazení (nejnižší priorita)"

msgid "Literals"
msgstr "Literály"

msgid "**Literal**"
msgstr "**Literál**"

msgid "**Type**"
msgstr "**Typ**"

msgid "``45``"
msgstr "``45``"

msgid "Base 10 integer"
msgstr "Celé číslo základu 10"

msgid "``0x8f51``"
msgstr "``0x8f51``"

msgid "Base 16 (hexadecimal) integer"
msgstr "Celé číslo o základu 16 (hexadecimální)"

msgid "``0b101010``"
msgstr "``0b101010``"

msgid "Base 2 (binary) integer"
msgstr "Celé číslo základu 2 (binární)"

msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

msgid "Floating-point number (real)"
msgstr "Číslo s plovoucí desetinnou čárkou (reálné)"

msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr "``\"Hello\"``, ``\"Hi\"``"

msgid "Strings"
msgstr "Řetězce"

msgid "``\"\"\"Hello\"\"\"``"
msgstr "``\"\"\"Hello\"\"\"``"

msgid "Multiline string"
msgstr "Víceřádkový řetězec"

msgid "``@\"Node/Label\"``"
msgstr "``@\"Node/Label\"``"

msgid ":ref:`class_NodePath` or StringName"
msgstr ":ref:`class_NodePath` nebo jméno Stringu"

msgid "``$NodePath``"
msgstr "``$NodePath``"

msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "Zkratka pro ``get_node(\"NodePath\")``"

msgid ""
"Integers and floats can have their numbers separated with ``_`` to make them "
"more readable. The following ways to write numbers are all valid::"
msgstr ""
"Celá a pohyblivá čísla mohou být oddělena znakem ``_``, aby byla lépe "
"čitelná. Všechny následující způsoby zápisu čísel jsou platné::"

msgid "Comments"
msgstr "Komentáře"

msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr ""
"Cokoli od ''#'' do konce řádku je ignorováno a je považováno za komentář."

msgid "Built-in types"
msgstr "Vestavěné typy"

msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Pooled arrays such as "
"``PoolByteArray`` are still passed as values.)"
msgstr ""
"Vestavěné typy jsou alokovány na zásobníku. Jsou to hodnotové typy (value "
"types). To znamená, že při každém přiřazení nebo při předání jako argumentu "
"funkci se vytvoří jejich kopie. Jedinou výjimkou jsou ``Array`` a "
"``Dictionary``, které se předávají jako reference, takže jsou sdílené. Jedna "
"se o tzv. referenční typy, anglicky reference types.(Sdružená pole, jako je "
"``PoolByteArray``, se stále předávají jako hodnoty.)"

msgid "Basic built-in types"
msgstr "Základní vestavěné typy"

msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "Proměnné mouhou v jazyce GDScript nabývat několika vestavěných typů."

msgid "null"
msgstr "null"

msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null`` je prázdný datový typ, který neobsahuje žádné informace a nelze mu "
"přiřadit žádnou jinou hodnotu."

msgid ":ref:`bool <class_bool>`"
msgstr ":ref:`bool <class_bool>`"

msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr "Zkratka pro \"boolean\", může obsahovat pouze ``true`` nebo ``false``."

msgid ":ref:`int <class_int>`"
msgstr ":ref:`int <class_int>`"

msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""
"Zkratka pro \"integer\" (celé číslo), uchovává celá čísla (kladná i "
"záporná). Ukládá se jako 64bitová hodnota, což v jazyce C++ odpovídá "
"\"int64_t\"."

msgid ":ref:`float <class_float>`"
msgstr ":ref:`float <class_float>`"

msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, "
"data structures such as Vector2, Vector3, and PoolRealArray store 32-bit "
"single-precision \"float\" values."
msgstr ""
"Uchovává reálná čísla včetně desetinných míst pomocí hodnot s pohyblivou "
"řádovou čárkou. Ukládá se jako 64bitová hodnota, ekvivalentní \"double\" v C+"
"+. Poznámka: V současné době datové struktury jako Vector2, Vector3 a "
"PoolRealArray ukládají 32bitové hodnoty \"float\" se single přesností."

msgid ":ref:`String <class_String>`"
msgstr ":ref:`String <class_String>`"

msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain the following escape sequences:"
msgstr ""
"Posloupnost znaků ve formátu `Unicode <https://en.wikipedia.org/wiki/"
"Unicode>`_. Řetězce mohou obsahovat následující escape sekvence:"

msgid "**Escape sequence**"
msgstr "Escape sekvence"

msgid "**Expands to**"
msgstr "**Rozšiřuje se na**"

msgid "``\\n``"
msgstr "``\\n``"

msgid "Newline (line feed)"
msgstr "Nový řádek (line feed)"

msgid "``\\t``"
msgstr "``\\t``"

msgid "Horizontal tab character"
msgstr "Vodorovný znak tabulátoru"

msgid "``\\r``"
msgstr "``\\r``"

msgid "Carriage return"
msgstr "návrat vozíku"

msgid "``\\a``"
msgstr "``\\a``"

msgid "Alert (beep/bell)"
msgstr "Výstraha (pípnutí / zvonek)"

msgid "``\\b``"
msgstr "``\\b``"

msgid "Backspace"
msgstr "Backspace"

msgid "``\\f``"
msgstr "``\\f``"

msgid "Formfeed page break"
msgstr "Přerušení stránky Formfeed"

msgid "``\\v``"
msgstr "``\\v``"

msgid "Vertical tab character"
msgstr "Svislý znak tabulátoru"

msgid "``\\\"``"
msgstr "``\\\"``"

msgid "Double quote"
msgstr "Dvojitá uvozovka"

msgid "``\\'``"
msgstr "``\\'``"

msgid "Single quote"
msgstr "Jednoduchá uvozovka"

msgid "``\\\\``"
msgstr "``\\\\``"

msgid "Backslash"
msgstr "Zpětné lomítko"

msgid "``\\uXXXX``"
msgstr "``\\uXXXX``"

msgid "Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr ""
"codepoint Unicode ``XXXX`` (hexadecimální, nerozlišuje velká a malá písmena)"

msgid "GDScript also supports :ref:`doc_gdscript_printf`."
msgstr "GDScript také podporuje :ref:`doc_gdscript_printf`."

msgid "Vector built-in types"
msgstr "Vektorové vestavěné typy"

msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"2D vektorový typ obsahující pole ``x`` a ``y``. Lze k němu přistupovat také "
"jako k poli."

msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ":ref:`Rect2 <class_Rect2>`"

msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"Typ 2D Obdélník obsahující dvě pole vektorů: ``position (pozic)`` a ``size "
"(velikost)``. Obsahuje také pole ``end``, což je ``position + size``."

msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"3D vektorový typ obsahující pole ``x``, ``y`` a ``z``. Lze k němu "
"přistupovat také jako k poli."

msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

msgid "3×2 matrix used for 2D transforms."
msgstr "matice (matrix) 3×2 používaná pro 2D transformace."

msgid ":ref:`Plane <class_Plane>`"
msgstr ":ref:`Plane <class_Plane>`"

msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"Typ 3D roviny v normalizovaném tvaru, který obsahuje ``normál`` vektorové "
"pole normály k rovině a skalární vzdálenost ``d``."

msgid ":ref:`Quat <class_Quat>`"
msgstr ":ref:`Quat <class_Quat>`"

msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"Kvaternion je datový typ používaný k reprezentaci 3D rotace. Je užitečný pro "
"interpolaci rotací."

msgid ":ref:`AABB <class_AABB>`"
msgstr ":ref:`AABB <class_AABB>`"

msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"Osově zarovnaný ohraničující box (nebo 3D box) obsahuje 2 pole vektorů: "
"``position`` a ``size``. Obsahuje také pole ``end``, což je ``position + "
"size``."

msgid ":ref:`Basis <class_Basis>`"
msgstr ":ref:`Basis <class_Basis>`"

msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"matice 3x3 používaná pro 3D rotaci a měřítko. Obsahuje 3 vektorová pole "
"(``x``, ``y`` a ``z``) a lze k ní přistupovat také jako k poli 3D vektorů."

msgid ":ref:`Transform <class_Transform>`"
msgstr ":ref:`Transform <class_Transform>`"

msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3D transformace obsahuje pole Basis ``basis`` a pole Vector3 ``origin``."

msgid "Engine built-in types"
msgstr "Vestavěné typy enginu"

msgid ":ref:`Color <class_Color>`"
msgstr ":ref:`Color <class_Color>`"

msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"Datový typ Color (barva) obsahuje pole ``r``, ``g``, ``b`` a ``a``. Lze k "
"nim také přistupovat jako ``h``, ``s`` a ``v`` pro odstín/sytost/hodnotu."

msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""
"Zkompilovaná cesta k uzlu, která se používá hlavně v systému scény. Lze ji "
"snadno vytvořit/přiřadit z/do typu String (řetězec)."

msgid ":ref:`RID <class_RID>`"
msgstr ":ref:`RID <class_RID>`"

msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"ID zdroje (RID). Servery používají generické identifikátory RID k odkazování "
"na neprůhledná data."

msgid ":ref:`Object <class_Object>`"
msgstr ":ref:`Object <class_Object>`"

msgid "Base class for anything that is not a built-in type."
msgstr "Základní třída pro cokoli, co není vestavěným typem."

msgid "Container built-in types"
msgstr "Kontejnerové vestavěné typy"

msgid ":ref:`Array <class_Array>`"
msgstr ":ref:`Array (Pole) <class_Array>`"

msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""
"Obecná posloupnost objektů libovolného typu, včetně jiných polí nebo "
"slovníků (viz níže). Velikost pole se může dynamicky měnit. Pole jsou "
"indexována od indexu ``0``. Záporné indexy se počítají od konce."

msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""
"Pole jazyka GDScript jsou kvůli rychlosti alokována v paměti lineárně. Velká "
"pole (více než desítky tisíc prvků) však mohou způsobit fragmentaci paměti, "
"což může mít vliv na velikost dostupné paměti a rychlost její alokace. Pokud "
"vám to vadí, jsou k dispozici speciální typy polí. Ty akceptují pouze jeden "
"datový typ. Vyhnou se fragmentaci paměti, spotřebují paměti méně , ale jsou "
"atomická a mají tendenci pracovat pomaleji než obecná pole. Doporučuje se je "
"proto používat pouze pro velké objemy dat:"

msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""
":ref:`PoolByteArray <class_PoolByteArray>` : pole bajtů (celá čísla od 0 do "
"255)."

msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: pole celých čísel."

msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ":ref:`PoolRealArray <class_PoolRealArray>`: pole floatů."

msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ":ref:`PoolStringArray <class_PoolStringArray>`: Pole řetězců."

msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: <class_Vector2>``: pole "
"objektů :ref:`Vector2 <class_Vector2>`."

msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: <class_Vector3>``: pole "
"objektů :ref:`Vector3 <class_Vector3>`."

msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""
":ref:`PoolColorArray <class_PoolColorArray>`: Pole objektů :ref:`Color "
"<class_Color>`."

msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ":ref:`Dictionary (Slovník) <class_Dictionary>`"

msgid "Associative container which contains values referenced by unique keys."
msgstr ""
"Asociativní kontejner, který obsahuje hodnoty odkazované pomocí jedinečných "
"klíčů."

msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). However, keys written in this form can't start with a digit (like "
"any GDScript identifier)."
msgstr ""
"Podporována je také syntaxe tabulek ve stylu jazyka Lua. Lua-style používá "
"``=`` místo ``:`` a nepoužívá uvozovky pro označení řetězcových klíčů (což "
"je o něco méně náročné na zápis). Klíče zapsané v tomto tvaru však nemohou "
"začínat číslicí (jako jakýkoli identifikátor GDScript)."

msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"Chcete-li přidat klíč do existujícího slovníku, přistupujte k němu jako "
"kdyby již existoval a přiřaďte do něho hodnotu ::"

msgid ""
"The bracket syntax can be used to access properties of any :ref:"
"`class_Object`, not just Dictionaries. Keep in mind it will cause a script "
"error when attempting to index a non-existing property. To avoid this, use "
"the :ref:`Object.get() <class_Object_method_get>` and :ref:`Object.set() "
"<class_Object_method_set>` methods instead."
msgstr ""
"Syntaxi závorek lze použít pro přístup k vlastnostem libovolného :ref:"
"`class_Object`, nejen ke slovníkům. Mějte na paměti, že použití neexistující "
"vlastnosti jako indexu způsobí chybu skriptu. Chcete-li se tomu vyhnout, "
"použijte místo toho metody :ref:`Object.get() <class_Object_method_get>` a :"
"ref:`Object.set() <class_Object_method_set>`, které v takovém případě vrátí "
"null."

msgid "Data"
msgstr "Data"

msgid "Variables"
msgstr "Proměnné"

msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"Proměnné mohou existovat jako členské proměnné třídy nebo jako lokální "
"proměnné funkcí. Vytvářejí se pomocí klíčového slova ``var`` a při "
"inicializaci jim může být volitelně přiřazena hodnota."

msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"Proměnné mohou mít volitelně specifikaci typu. Pokud je typ specifikován, "
"bude proměnná nucena mít vždy stejný typ a pokus o přiřazení nekompatibilní "
"hodnoty vyvolá chybu."

msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"Typy se v deklaraci proměnné uvádějí pomocí symbolu ``:`` (dvojtečka) za "
"názvem proměnné, za kterým následuje typ."

msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""
"Pokud je proměnná inicializována v rámci deklarace, lze typ odvodit, takže "
"je možné název typu vynechat::"

msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"Odvození typu je možné pouze v případě, že přiřazovaná hodnota má definovaný "
"typ, jinak dojde k chybě."

msgid "Valid types are:"
msgstr "Platné typy jsou:"

msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "Vestavěné typy (Array, Vektor2, int, String, atd.)."

msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr "Třídy Engine (Node, Resource, Reference atd.)."

msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"Názvy konstant, pokud obsahují zdroj skriptu (``MyScript``, pokud jste "
"deklarovali ``const MyScript = preload(\"res://my_script.gd\")``)."

msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""
"Ostatní třídy ve stejném skriptu, s respektováním rozsahu platnosti "
"(``InnerClass.NestedClass``, pokud jste deklarovali ``class NestedClass`` "
"uvnitř ``class InnerClass`` ve shodném rozsahu platnosti)."

msgid "Script classes declared with the ``class_name`` keyword."
msgstr "Třídy skriptů deklarované pomocí klíčového slova ``class_name``."

msgid "Casting"
msgstr "Přetypování"

msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"Hodnoty přiřazené typovaným proměnným musí mít kompatibilní typ. Pokud je "
"potřeba vynutit, aby hodnota byla určitého typu, zejména pro typy objektů, "
"můžete použít operátor přetypování ``as``."

msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"Přetypování mezi objektovými typy vrací stejný objekt, pokud je hodnota "
"stejného typu jako je typ na který se přetypovává nebo je jeho potomkem."

msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr ""
"Pokud hodnota není potomkem (podtypem), výsledkem operace přetypování je "
"hodnota ``null``."

msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"V případě vestavěných typů budou tyto typy, pokud to bude možné, násilně "
"převedeny, jinak engine vyvolá chybu."

msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""
"Přetypování je také užitečné pro lepší typovou bezpečnost proměnných při "
"interakci se stromem scény:"

msgid "Constants"
msgstr "Konstanty"

msgid ""
"Constants are values you cannot change when the game is running. Their value "
"must be known at compile-time. Using the ``const`` keyword allows you to "
"give a constant value a name. Trying to assign a value to a constant after "
"it's declared will give you an error."
msgstr ""
"Konstanty jsou hodnoty, které nelze za běhu hry měnit. Jejich hodnota musí "
"být známa při kompilaci. Použití klíčového slova ``const`` umožňuje dát "
"konstantní hodnotě jméno. Při pokusu přiřadit hodnotu konstantě po její "
"deklaraci dojde k chybě."

msgid "We recommend using constants whenever a value is not meant to change."
msgstr "Doporučujeme používat konstanty vždy, když se hodnota nemá měnit."

msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""
"Ačkoli typ konstanty je převedený z přiřazené hodnoty, je i možné daný typ "
"specifikovat::"

msgid "Assigning a value of an incompatible type will raise an error."
msgstr "Při priřazení hodnoty nekompatibilního typu bude výsledkem error."

msgid ""
"Since arrays and dictionaries are passed by reference, constants are "
"\"flat\". This means that if you declare a constant array or dictionary, it "
"can still be modified afterwards. They can't be reassigned with another "
"value though."
msgstr ""
"Protože pole a slovníky jsou předávány odkazem (referencí), kostanty jsou "
"tzv \"mělké\". To znamená, že i když deklarujete pole nebo slovník jako "
"konstantu , jejjí hodnoty můžou být následně měněny. Refrence na takový "
"konstantní slovník či pole však změněna už být nemůže a to ani přiřazením."

msgid "Enums"
msgstr "Enums (Výčty)"

msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"Enumy jsou v podstatě zkratkou pro konstanty a jsou docela užitečné, pokud "
"chcete nějaké konstantě přiřadit po sobě jdoucí celá čísla."

msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant "
"dictionary of that name."
msgstr ""
"Pokud výčtu dáte jméno, vloží všechny klíče do konstantního slovníku tohoto "
"jména."

msgid ""
"In Godot 3.1 and later, keys in a named enum are not registered as global "
"constants. They should be accessed prefixed by the enum's name (``Name."
"KEY``); see an example below."
msgstr ""
"V Godotu 3.1 a novějších verzích nejsou klíče pojmenovaného výčtu "
"registrovány jako globální konstanty. Mělo by se k nim přistupovat s "
"předponou názvu enumu (``Name.KEY``); viz příklad níže."

msgid "Functions"
msgstr "Funkce"

msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""
"Funkce vždy patří do `třídy <Classes_>`_. Priorita rozsahu platnosti pro "
"vyhledávání proměnných je: lokální → člen třídy → globální. Proměnná "
"``self`` je vždy k dispozici a je poskytována jako možnost přístupu k členům "
"třídy, ale není vždy vyžadována (a na rozdíl od Pythonu *není* posílána jako "
"první argument funkce)."

msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"Funkce se může ``vrátit hodnotu`` v libovolném okamžiku. Výchozí návratová "
"hodnota je ``null``."

msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""
"Funkce mohou mít také specifikaci typu pro argumenty a pro návratovou "
"hodnotu. Typy pro argumenty lze přidat podobně jako u proměnných::"

msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr "Pokud má argument funkce výchozí hodnotu, je možné typ odvodit::"

msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""
"Návratový typ funkce lze zadat za seznamem argumentů pomocí symbolu šipky "
"(``->```)::"

msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"Funkce s návratovým typem **musí** vracet správnou hodnotu. Nastavení typu "
"``void`` znamená, že funkce nic nevrací. Void funkce mohou vracet dříve "
"pomocí klíčového slova ``return``, ale nemohou vracet žádnou hodnotu."

msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"Ne-void funkce musí **vždy** vracet hodnotu, takže pokud váš kód obsahuje "
"příkazy větvení (například konstrukce ``if``/``else``), všechny možné cesty "
"musí mít návratovou hodnotu. Např. pokud máte ``return`` uvnitř bloku "
"``if``, ale ne za ním, editor zobrazí chybovou hlášku, protože pokud se blok "
"neprovede, funkce nebude mít platnou hodnotu, kterou by mohla vrátit."

msgid "Referencing functions"
msgstr "Odkazování na funkce"

msgid ""
"Contrary to Python, functions are *not* first-class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""
"Na rozdíl od jazyka Python **nejsou** funkce v jazyce GDScript objekty první "
"třídy. To znamená, že je nelze ukládat do proměnných, předávat jako argument "
"jiné funkci nebo je vracet z jiných funkcí. Stojí za tím výkonnostní důvody."

msgid ""
"To reference a function by name at run-time, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the "
"``call`` or ``funcref`` helpers::"
msgstr ""
"Pro odkaz na funkci podle jména za běhu programu (např. pro její uložení do "
"proměnné nebo předání jiné funkci jako argument) je třeba použít pomocné "
"příkazy ``call`` nebo ``funcref``::"

msgid "Static functions"
msgstr "Statické funkce"

msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions::"
msgstr ""
"Funkce může být deklarována jako statická. Pokud je funkce statická, nemá "
"přístup k členským proměnným instance ani k ``self``. To je užitečné hlavně "
"pro vytváření knihoven pomocných funkcí::"

msgid "Statements and control flow"
msgstr "Příkazy pro řízení běhu programu"

msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"Příkazy jsou standardní a může to být přiřazení, volání funkce, struktury "
"toku řízení atd. (viz níže). ``;`` jako oddělovač příkazů je zcela nepovinný."

msgid "if/else/elif"
msgstr "if/else/elif"

msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"Jednoduché podmínky se vytvářejí pomocí syntaxe ``if``/``else``/`elif``. "
"Závorky kolem podmínek jsou povoleny, ale nejsou povinné. Vzhledem k povaze "
"odsazení na základě tabulátoru lze pro zachování úrovně odsazení použít "
"místo ``else``/``if`` ``elif``."

msgid "Short statements can be written on the same line as the condition::"
msgstr "Krátké příkazy lze psát na stejném řádku jako podmínku::"

msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"Někdy můžete chtít přiřadit jinou počáteční hodnotu na základě logického "
"výrazu. V takovém případě se hodí tzv. ternární if výrazy::"

msgid ""
"Ternary-if expressions can be nested to handle more than 2 cases. When "
"nesting ternary-if expressions, it is recommended to wrap the complete "
"expression over multiple lines to preserve readability::"
msgstr ""

msgid ""
"You may also wish to check if a value is contained within something. You can "
"use an ``if`` statement combined with the ``in`` operator to accomplish "
"this::"
msgstr ""

#, fuzzy
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue`` (i.e. skipping to the next "
"iteration of the loop without executing any further code in the current "
"iteration):"
msgstr ""
"Jednoduché cykly se vytvářejí pomocí syntaxe ``while``. Cykly lze přerušit "
"pomocí ``break`` nebo v nich pokračovat pomocí ``continue``:"

msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *key* is stored in the "
"loop variable."
msgstr ""
"Pro cykly s pevným počtem opakování, například průchod polem nebo tabulkou, "
"se používá smyčka ``for``. Při průchodu polem je aktuální prvek pole uložen "
"v proměnné cyklu. Při průchodu slovníkem je v proměnné cyklu uložen aktuální "
"*klíč*."

msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"Příkaz ``match`` slouží k větvení provádění programu. Je to ekvivalent "
"příkazu ``switch``, který se vyskytuje v mnoha jiných jazycích, ale nabízí "
"některé další vlastnosti."

msgid "Basic syntax::"
msgstr "Základní syntaxe::"

msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr "**Kurz pro lidi, kteří znají příkazy switch**:"

msgid "Replace ``switch`` with ``match``."
msgstr "Nahraďte ``switch`` příkazem ``match``."

msgid "Remove ``case``."
msgstr "Odstraňte ``case``."

msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""
"Odstraňte všechny ``break``. Pokud nechcete ``break`` ve výchozím nastavení, "
"můžete použít ``continue`` pro přerušení."

msgid "Change ``default`` to a single underscore."
msgstr "Změňte ``default`` na jedno podtržítko."

msgid "**Control flow**:"
msgstr "**Pořadí vyhodnocování**:"

msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the first "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. You can use ``continue`` to stop execution in "
"the current block and check for an additional match in the patterns below it."
msgstr ""
"Vzory jsou vyhodnocovány shora dolů. Pokud vzor vyhovuje, provede se jemu "
"odpovídající blok. Poté se pokračuje ve vykonávání pod příkazem ``match``. "
"Pomocí příkazu ``continue`` můžete zastavit provádění v aktuálním bloku a "
"kontrolovat další shodu ve vzorech pod aktuálním blokem."

msgid "There are 6 pattern types:"
msgstr "Typově existuje 6 vzorů:"

msgid "Constant pattern"
msgstr "Konstantní vzor"

msgid "Constant primitives, like numbers and strings::"
msgstr "Prosté konstanty, jako jsou čísla a řetězce::"

msgid "Variable pattern"
msgstr "Variabilní vzor"

msgid "Matches the contents of a variable/enum::"
msgstr "Porovnává obsah proměnné/výčtového typu (enum)::"

msgid "Wildcard pattern"
msgstr "Vzor zástupného znaku"

msgid "This pattern matches everything. It's written as a single underscore."
msgstr "Tento vzor vyhovuje všemu. Zapisuje se jedním podtržítkem."

msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""
"Lze jej použít jako ekvivalent ``default`` v příkaze ``switch`` z jiných "
"jazyků::"

msgid "Binding pattern"
msgstr "Spojovací vzor"

msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""
"Spojovací vzor zavádí novou proměnnou. Podobně jako vzor zástupného znaku "
"vyhovuje všemu a navíc odpovídající hodnotu pojmenovává. Je to obzvláště "
"důležité pro vzory pole a slovníku::"

msgid "Array pattern"
msgstr "Vzor pole"

msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"Porovnává pole. Každý jednotlivý prvek pole je sám o sobě vzorem takže je "
"možné vzory vnořovat."

msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"Nejprve se testuje délka pole, která musí být stejná jako velikost vzoru, "
"jinak vzor nevyhovuje."

msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""
"**Pole s otevřeným koncem**: Pole může být delší než vzor, když jako "
"poslední dílčí vzor použijeme ``...``."

msgid "Every subpattern has to be comma-separated."
msgstr "Každý dílčí vzor musí být oddělen čárkou."

msgid "Dictionary pattern"
msgstr "Vzor slovníku"

msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr "Funguje stejně jako vzor pole. Každý klíč musí být konstantní vzor."

msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"Nejprve se testuje velikost slovníku, která musí být stejná jako velikost "
"vzoru, jinak vzor testování nevyhovuje."

msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""
"**Slovník s otevřeným koncem**: Slovník může být větší než vzor, když jako "
"poslední dílčí vzor použijeme ``...``."

msgid "Every subpattern has to be comma separated."
msgstr "Každý dílčí vzor musí být oddělen čárkou."

msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "Pokud hodnotu nezadáte, kontroluje se pouze existence klíče."

msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr "Vzor hodnoty je od vzoru klíče oddělen znakem ``:``."

msgid "Multiple patterns"
msgstr "Násobné vzory"

msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""
"Můžete zadat i více vzorů oddělených čárkou. Tyto vzory nesmějí obsahovat "
"žádné spojovací vzory."

msgid "Classes"
msgstr "Třídy"

msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""
"Ve výchozím nastavení jsou všechny soubory skriptů nepojmenovanými třídami. "
"V takovém případě se na ně můžete odkazovat pouze pomocí cesty k souboru, a "
"to buď pomocí relativní, nebo absolutní cesty. Pokud například pojmenujete "
"soubor skriptu ``character.gd``::"

msgid "Registering named classes"
msgstr "Registrace pojmenovaných tříd"

msgid ""
"You can give your class a name to register it as a new type in Godot's "
"editor. For that, you use the ``class_name`` keyword. You can optionally add "
"a comma followed by a path to an image, to use it as an icon. Your class "
"will then appear with its new icon in the editor::"
msgstr ""
"Místo toho můžete třídu pojmenovat a zaregistrovat ji jako nový typ v "
"editoru Godot. K tomu slouží klíčové slovo ``class_name``. Můžete přidat "
"volitelnou čárkou oddělenou cestou k obrázku, abyste ho mohli použít jako "
"ikonu. Vaše třída se pak v editoru objeví s touto novou ikonou::"

msgid ""
"If the script is located in the ``res://addons/`` directory, ``class_name`` "
"will only cause the node to show up in the **Create New Node** dialog if the "
"script is part of an *enabled* editor plugin. See :ref:`doc_making_plugins` "
"for more information."
msgstr ""
"Pokud je skript umístěn v adresáři ``res://addons/``, ``class_name`` "
"způsobí, že se uzel zobrazí v dialogovém okně **Vytvořit nový uzel** pouze v "
"případě, že je skript součástí *povoleného* zásuvného modulu editoru. Více "
"informací naleznete v :ref:`doc_making_plugins`."

msgid "Here's a class file example:"
msgstr "Zde je příklad souboru třídy:"

msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""
"Syntaxe třídy Godot je kompaktní: může obsahovat pouze členské proměnné nebo "
"funkce. Můžete používat statické funkce, ale ne statické členské proměnné. "
"Stejně tak engine inicializuje proměnné při každém vytvoření instance, a to "
"včetně polí a slovníků. To je v duchu bezpečnosti vláken, protože skripty "
"mohou být inicializovány v samostatných vláknech, aniž by o tom uživatel "
"věděl."

msgid "Inheritance"
msgstr "Dědičnost"

msgid "A class (stored as a file) can inherit from:"
msgstr "Třída (uložená jako soubor) může dědit z:"

msgid "A global class."
msgstr "Globální třídy."

msgid "Another class file."
msgstr "Dalšího souboru třídy."

msgid "An inner class inside another class file."
msgstr "Vnitřní třídy uvnitř jiného souboru třídy."

msgid "Multiple inheritance is not allowed."
msgstr "Vícenásobné dědění není povoleno."

msgid "Inheritance uses the ``extends`` keyword::"
msgstr "Dědičnost používá klíčové slovo ``extends``::"

msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""
"Chcete-li zjistit, zda daná instance dědí z dané třídy, můžete použít "
"klíčové slovo ``is``::"

msgid ""
"To call a function in a *parent class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name::"
msgstr ""
"Chcete-li zavolat funkci v *rodičovské třídě* (tj. ve třídě, kterou "
"``extend``-ed (rozšířila) aktuální třída), přidejte k názvu funkce ``.``::"

msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their parent classes. If you still want to "
"call them, you can prefix them with ``.`` (like the ``super`` keyword in "
"other languages)::"
msgstr ""
"To je užitečné zejména proto, že funkce v rozšiřujících třídách nahrazují "
"funkce se stejným názvem ve svých rodičovských třídách. Pokud je přesto "
"chcete volat, můžete jim dát předponu ``.`` (podobně jako klíčové slovo "
"``super`` v jiných jazycích)::"

msgid ""
"Default functions like  ``_init``, and most notifications such as "
"``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. "
"are called in all parent classes automatically. There is no need to call "
"them explicitly when overloading them."
msgstr ""
"Výchozí funkce jako ``_init`` a většina oznámení, jako ``_enter_tree``, "
"``_exit_tree``, ``_process``, ``_physics_process`` atd., jsou volány ve "
"všech rodičovských třídách automaticky. Při jejich přetěžování je není třeba "
"explicitně volat."

msgid "Class constructor"
msgstr "Konstruktor třídy"

msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So, there is usually no need to call "
"``._init()`` explicitly."
msgstr ""
"Konstruktor třídy volaný při tvorbě jejich instancí se jmenuje ``_init``. "
"Jak již bylo zmíněno, konstruktory rodičovských tříd se v třídách potomků "
"volají automaticky. Obvykle tedy není třeba volat ``._init()`` explicitně."

msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this::"
msgstr ""
"Na rozdíl od volání běžné funkce, jako ve výše uvedeném příkladě s ``."
"some_func``, se případné argumenty rodičovskému konstruktoru předávají "
"takto::"

msgid "This is better explained through examples. Consider this scenario::"
msgstr "To se lépe vysvětluje na příkladech. Vezměme si tento scénář:"

msgid "There are a few things to keep in mind here:"
msgstr "Je třeba mít na paměti několik věcí:"

msgid ""
"If the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``."
msgstr ""
"Pokud zděděná (rodičovská) třída (``State.gd``) definuje konstruktor "
"``_init``, který přijímá argumenty (v tomto případě ``e``), pak dědící třída "
"tj. potomek (``Idle.gd``) *musí* definovat také ``_init`` a předat příslušné "
"parametry rodičovskému konstruktoru ``_init`` třídy ``State.gd``."

msgid ""
"``Idle.gd`` can have a different number of arguments than the parent class "
"``State.gd``."
msgstr ""
"``Idle.gd`` může mít jiný počet argumentů než rodičovská třída ``State.gd``."

msgid ""
"In the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``."
msgstr ""
"Ve výše uvedeném příkladu je ``e`` předané konstruktoru ``State.gd`` stejné "
"``e`` předané konstruktoru ``Idle.gd``."

msgid ""
"If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` parent class, even if it does nothing. "
"This brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables, e.g.::"
msgstr ""
"Pokud nemá konstruktor ``_init`` třídy ``Idle.gd`` žádné argumenty, musí "
"stále předávat určitou hodnotu nadřazené třídě ``State.gd``, a to i když by "
"nedělal nic jiného. Tím se dostáváme k faktu, že základnímu konstruktoru lze "
"předávat i literály, nejen proměnné. např.::"

msgid "Inner classes"
msgstr "Vnitřní třídy"

msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"Soubor třídy může obsahovat vnitřní třídy. Vnitřní třídy se definují pomocí "
"klíčového slova ``class``. Jejich instance se vytváříí pomocí ``Jménotřídy."
"new()``."

msgid "Classes as resources"
msgstr "Třídy jako zdroje"

msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"Třídy uložené jako soubory se považují za :ref:`zdroje<class_GDScript>`. "
"Přistupovat k nim lze po jejich načtení z disku. K tomu slouží funkce "
"``load`` nebo ``preload`` (viz níže). Vytvoření instance třídy načteného "
"zdroje se provádí voláním funkce ``new`` na objektu této třídy::"

msgid "Exports"
msgstr "Exporty"

msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr "Dokumentace o exportech byla přesunuta do :ref:`doc_gdscript_exports`."

msgid "Setters/getters"
msgstr "Setters/getters"

msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""
"Často je užitečné vědět, že se členská proměnná třídy z nějakého důvodu "
"změní. Může být také žádoucí nějakým způsobem zapouzdřit (rozuměj omezit) "
"přístup k ní."

msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""
"K tomu účelu GDScript nabízí syntaxi *setter/getter* pomocí klíčového slova "
"``setget``. Používá se přímo za definicí proměnné:"

msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example::"
msgstr ""
"Kdykoli je hodnota ``proměnné`` změněna *externím* zdrojem (tj. ne lokálním "
"použitím ve třídě), zavolá se funkce *setter* (``setterfunc`` výše). To se "
"stane *předtím*, než se změní hodnota. Funkce *setter* musí rozhodnout, co s "
"novou hodnotou udělá. A naopak, když se přistupuje k ``proměnné``, musí "
"funkce *getter* (``getterfunc`` výše) ``vrátit`` požadovanou hodnotu. Níže "
"je uveden příklad::"

msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr "Lze vynechat kteroukoli z funkcí *setter* nebo *getter* ::"

msgid ""
"Setters and getters are useful when :ref:`exporting variables "
"<doc_gdscript_exports>` to the editor in tool scripts or plugins, for "
"validating input."
msgstr ""
"Settery a gettery jsou užitečné při :ref:`exportování proměnných "
"<doc_gdscript_exports>` do editoru ve skriptech nástrojů nebo zásuvných "
"modulů pro ověřování vstupů."

msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""
"Jak již bylo řečeno, *lokální* přístup *nespustí* setter a getter. Zde je "
"příklad:"

msgid "Tool mode"
msgstr "Tool mode"

msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file::"
msgstr ""
"Ve výchozím nastavení se skripty v editoru nespouštějí a lze měnit pouze "
"exportované vlastnosti. V některých případech je všaj žádoucí, aby se uvnitř "
"editoru spustily (pokud neiniciují herní kód nebo se tomu ručně vyhýbají). "
"Pro tyto účely existuje klíčové slovo ``tool``, které musí být umístěno na "
"začátek souboru::"

msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr "Více informací naleznete v :ref:`doc_running_code_in_the_editor`."

msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""
"Buďte opatrní při uvolňování uzlů pomocí ``queue_free()`` nebo ``free()`` ve "
"skriptech nástrojů (zejména u vlastníka skriptu). Protože skripty nástrojů "
"spouštějí svůj kód v editoru, může jejich nesprávné použití vést k pádu "
"editoru."

msgid "Memory management"
msgstr "Správa paměti"

msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call ``instance.free()``. To avoid "
"reference cycles that can't be freed, a :ref:`class_WeakRef` function is "
"provided for creating weak references. Here is an example:"
msgstr ""
"Pokud třída dědí z :ref:`class_Reference`, budou instance uvolněny, jakmile "
"se již nebudou používat. Neexistuje žádný garbage collector, pouze počítání "
"referencí. Ve výchozím nastavení všechny třídy, které nedefinují dědičnost, "
"dědí z **Reference**. Pokud to není žádoucí, pak musí třída dědit :ref:"
"`class_Object` ručně a musí volat ``instance.free()``. Aby se předešlo "
"referenčním cyklům, které nelze uvolnit, je k dispozici funkce :ref:"
"`class_WeakRef` pro vytváření tzv. weak referencí (neuvažují se př itestu "
"uvolnění instance). Zde je příklad:"

msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"Pokud se nepoužívají reference, lze ke kontrole, zda byl objekt uvolněn, "
"použít příkaz ``is_instance_valid(instance)``."

msgid "Signals"
msgstr "Signály"

msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""
"Signály představují nástroj pro vyslání zprávy objektem tak, aby na ní mohly "
"ostatní objekty reagovat. Chcete-li pro třídu vytvořit vlastní signály, "
"použijte klíčové slovo ``signal``."

msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""
"Signály představují mechanismus zpětného volání tzv. `Callback <https://en."
"wikipedia.org/wiki/Callback_(computer_programming)>`_. Plní také roli "
"Pozorovatelů (Observers), což je běžný návrhový vzor. Další informace "
"naleznete v tutoriálu `Observer <https://gameprogrammingpatterns.com/"
"observer.html>`_ v elektronické knize Návrhové vzory ve hrách ."

msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""
"Tyto signály můžete spojit s metodami stejným způsobem, jakým připojujete "
"vestavěné signály uzlů jako :ref:`class_Button` nebo :ref:`class_RigidBody`."

msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""
"V příkladu níže připojíme signál ``health_depleted`` uzlu ``Character`` k "
"uzlu ``Game``. Když uzel ``Character`` vyšle signál, zavolá se funkce "
"``_on_Character_health_depleted`` herního uzlu::"

msgid "You can emit as many arguments as you want along with a signal."
msgstr "Spolu se signálem můžete vyslat libovolný počet argumentů."

msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""
"Zde je příklad, kdy je to užitečné. Řekněme, že chceme mít na obrazovce "
"ukazatel života, který bude reagovat na změny zdraví pomocí animace, ale "
"zároveň v našem stromu scén chceme udržet uzly uživatelského rozhraní a "
"hráče oddělené."

msgid ""
"In our ``Character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, "
"and from a ``Game`` node higher up our scene tree, we connect it to the "
"``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` "
"method::"
msgstr ""
"V našem skriptu ``Character.gd`` definujeme signál ``health_changed`` a "
"vyšleme jej pomocí :ref:`Object.emit_signal() "
"<class_Object_method_emit_signal>` a z uzlu ``Game``, který je v našem "
"stromu scén výše, jej připojíme k ``Lifebar`` pomocí metody :ref:`Object."
"connect() <class_Object_method_connect>`::"

msgid ""
"To use signals, your class has to extend the ``Object`` class or any type "
"extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""
"Chcete-li používat signály, musí vaše třída dědit třídu ``Object`` nebo "
"jakýkoli typ, který ji podědil, například ``Node``, ``KinematicBody``, "
"``Control``..."

msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""
"V uzlu ``Game`` získáme uzly ``Character`` a ``Lifebar``, pak připojíme "
"``Character``, který signál vysílá, k přijemci, v tomto případě k uzlu "
"``Lifebar``."

msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""
"To umožňuje uzlu \"Lifebar\" reagovat na změny stavu zdraví, aniž by byl "
"součástí uzlu \"Character\"."

msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr "Volitelné názvy argumentů můžete psát do závorek za definici signálu::"

msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""
"Argumenty signálu se zobrazují v doku Uzel editoru a Godot je pro vás může "
"použít k vytvoření funkcí zpětného volání. Při vlastním vysílání signálů "
"však stále můžete vyslat signál s libovolným počtem argumentů. Je tedy na "
"vás, abyste vyslali v dané situaci korektní hodnoty."

msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""
"GDScript může navázat pole hodnot na spojení mezi signálem a metodou. Když "
"je signál vyslán, metoda zpětného volání obdrží navázané hodnoty. Tyto "
"svázané argumenty jsou pro každé spojení jedinečné a hodnoty zůstávají "
"stejné."

msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""
"Toto pole hodnot můžete použít k přidání dalších konstantních informací ke "
"spojení, pokud vám samotný vysílaný signál neposkytuje ke všem potřebným "
"údajům přístup ."

msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""
"V návaznosti na výše uvedený příklad řekněme, že chceme zobrazit protokol "
"poškození, které utrpěla každá postava na obrazovce, například ``Hráč1 "
"utrpěl 22 poškození.``. Signál ``health_changed`` nám neposkytuje jméno "
"poškozené postavy. Když tedy signál připojíme k herní konzoly ``BattleLog``, "
"můžeme v argumentu připojeného pole přidat jméno postavy::"

msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr ""
"Náš uzel ``BattleLog`` tak obdrží v připojeném poli jako dodatečný argument "
"jméno poškozeného prvku::"

msgid "Coroutines with yield"
msgstr "Koroutiny s yield"

msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the return "
"value. Calling ``resume()`` on this resulting object will continue execution "
"and return whatever the function returns. Once resumed, the state object "
"becomes invalid. Here is an example::"
msgstr ""
"GDScript nabízí podporu `korutin <https://en.wikipedia.org/wiki/Coroutine>`_ "
"prostřednictvím vestavěné funkce :ref:`yield<class_@GDScript_method_yield>`. "
"Zavoláním ``yield()`` dojde k okamžitému návratu z aktuální funkce, přičemž "
"návratovou hodnotou bude aktuální zmrazený stav téže funkce. Volání "
"``resume()`` na tomto výsledném objektu pak pokračuje v provádění zmrazené "
"funkce a vrátí její výsledek. Po obnovení se stavový objekt stane neplatným. "
"Zde je příklad::"

msgid "Will print::"
msgstr "Vytiskne::"

msgid ""
"It is also possible to pass values between ``yield()`` and ``resume()``, for "
"example::"
msgstr ""
"Je také možné předavat hodnoty mezi ``yield()`` a ``resume()``,, například::"

msgid ""
"Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr "Nezapomeňte uložit nový stav funkce, pokud používáte více ``yield``::"

msgid "Coroutines & signals"
msgstr "Koroutiny a signály"

msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples::"
msgstr ""
"Skutečná síla ``yield`` je v jeho použití společně se signály. ``yield`` je "
"schopno přijmout dva argumenty, objekt a signál. Po přijetí signálu se znovu "
"zahájí provádění. Zde je několik příkladů::"

msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example::"
msgstr ""
"Samotné koroutiny používají signál ``completed``, když přejdou do neplatného "
"stavu, například::"

msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr ""
"``my_func`` bude pokračovat ve vykonávání až po stisknutí obou tlačítek."

msgid "You can also get the signal's argument once it's emitted by an object:"
msgstr "Můžete také získat argument signálu, po jeho vyslání objektem:"

msgid ""
"If there is more than one argument, ``yield`` returns an array containing "
"the arguments::"
msgstr ""
"Pokud je argumentů více, ``yield`` vrátí pole obsahující všechny argumenty::"

msgid ""
"If you're unsure whether a function may yield or not, or whether it may "
"yield multiple times, you can yield to the ``completed`` signal "
"conditionally:"
msgstr ""
"Pokud si nejste jisti, zda funkce může nebo nemůže vyvolat yield, či zda "
"použije yield vícekrát, můžete aplikovat yield se signálem ``completed`` "
"podmíněně:"

msgid ""
"This ensures that the function returns whatever it was supposed to return "
"regardless of whether coroutines were used internally. Note that using "
"``while`` would be redundant here as the ``completed`` signal is only "
"emitted when the function didn't yield anymore."
msgstr ""
"Tím je zajištěno, že funkce vrátí výsledek, který se od ní očekává, bez "
"ohledu na to, zda byly interně použity koroutiny. Všimněte si, že použití "
"``while`` by zde bylo zbytečné, protože signál ``completed`` je emitován "
"pouze tehdy, když funkce vyčerpala možnosti použití yield."

msgid "`onready` keyword"
msgstr "klíčové slovo `onready`"

msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""
"Při použití uzlů je běžné chtít uchovávat odkazy na části scény v proměnné. "
"Jelikož u scén je zaručeno, že budou konfigurovány pouze při vstupu do "
"aktivního stromu scén, dílčí uzly lze získat pouze při volání funkce ``Node."
"ready ()``."

msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""
"To může být poněkud těžkopádné, zejména když se hromadí uzly a externí "
"odkazy. GDScript má proto klíčové slovo ``onready``, které odkládá "
"inicializaci členské proměnné až do volání ``_ready()``. Lze jím nahradit "
"výše uvedený kód jediným řádkem::"

msgid "Assert keyword"
msgstr "Klíčové slovo Assert"

msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""
"Klíčové slovo ``assert`` lze použít ke kontrole podmínek při ladění . Při "
"ostatních sestaveních jsou tato tvrzení ignorována. To znamená, že výraz "
"předaný jako argument nebude v projektu exportovaném v režimu release "
"vyhodnocován. Z tohoto důvodu nesmí aserce **obsahovat** výrazy, které mají "
"side effects. Jinak by se chování skriptu lišilo v závislosti na tom, zda je "
"či není projekt sestavován pro ladění ."

msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""
"Při spuštění projektu z editoru se projekt pozastaví, pokud dojde k chybě "
"příkazu ``assert``."

msgid "Translation status"
msgstr "Stav překladu"
