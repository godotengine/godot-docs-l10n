# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Statické typování v jazyce GDScript"

msgid "In this guide, you will learn:"
msgstr "V této příručce se dozvíte:"

msgid "**How to use types in GDScript**"
msgstr "**Jak používat typy v jazyce GDScript**"

msgid "That **static types can help you avoid bugs**"
msgstr "Že **statické typy vám mohou pomoci vyhnout se chybám**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"Je jen na vás, kde a jak tuto novou jazykovou funkci využijete: můžete ji "
"používat pouze v některých citlivých souborech GDScript, používat ji všude "
"nebo psát kód jako dosud!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Statické typy lze použít pro proměnné, konstanty, funkce, parametry a "
"návratové typy."

msgid "Typed GDScript is available since Godot 3.1."
msgstr "Typový GDScript je k dispozici od Godot 3.1."

msgid "A brief look at static typing"
msgstr "Stručný pohled na statické typování"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"S typovaným GDScriptem dokáže Godot při psaní kódu odhalit ještě více chyb! "
"Vám i vašim kolegům poskytuje více informací při práci, protože při volání "
"metody se zobrazují typy argumentů."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Představte si, že programujete inventář. Vytvoříte uzel ``Item`` a pak "
"``Inventory``. Chcete-li do inventáře přidat položky, měli by lidé, kteří s "
"vaším kódem pracují, metodě ``Inventory.add`` vždy předat uzel ``Item``. "
"Pomocí typů to můžete vynutit:"

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Další významnou výhodou typovaného jazyka GDScript je nový systém "
"**varování**. Od verze 3.1 vám Godot poskytuje varování ohledně vašeho kódu "
"již v průběhu jeho psaní: engine identifikuje části vašeho kódu, které mohou "
"za běhu vést k problémům, ale nechá vás rozhodnout, zda chcete kód ponechat "
"tak, jak je. Více o tom za chvíli."

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Statické typy také poskytují lepší možnosti pro automatické doplňování kódu. "
"Níže můžete vidět rozdíl mezi dynamickými a statickými možnostmi doplňování "
"pro třídu s názvem ``PlayerController``."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Pravděpodobně se vám už někdy stalo, že jste uložili uzel do proměnné a "
"napsali tečku, abyste zůstali bez návrhů automatického dokončování:"

msgid "code completion options for dynamic"
msgstr ""

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"To je způsobeno dynamickým kódem. Godot nemůže vědět, jaký typ uzlu nebo "
"hodnoty předáváte funkci. Pokud však typ zapíšete explicitně, získáte z uzlu "
"všechny veřejné metody a proměnné:"

msgid "code completion options for typed"
msgstr ""

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"V budoucnu typovaný GDScript také zvýší výkonnost kódu: Just-In-Time "
"kompilace a další vylepšení kompilátoru jsou již na plánu!"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"Celkově lze říci, že typované programování poskytuje strukturovanější "
"zážitek. Pomáhá předcházet chybám a zlepšuje aspekt sebedokumentace vašich "
"skriptů. To je obzvláště užitečné, když pracujete v týmu nebo na dlouhodobém "
"projektu: studie ukázaly, že vývojáři tráví většinu času čtením kódu jiných "
"lidí nebo skriptů, které napsali v minulosti a zapomněli na ně. Čím je kód "
"přehlednější a strukturovanější, tím rychleji mu porozumíte a tím rychleji "
"se můžete posunout dál."

msgid "How to use static typing"
msgstr "Jak používat statické typování"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Chcete-li definovat typ proměnné nebo konstanty, napište za název proměnné "
"dvojtečku a poté její typ. Např. ``var health: int``. Tím si vynutíte, aby "
"typ proměnné zůstal vždy stejný:"

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot se pokusí odvodit typy, pokud napíšete dvojtečku, ale typ vynecháte:"

msgid "Currently you can use three types of… types:"
msgstr "V současné době můžete používat tři typy... typů:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Základní třídy a uzly (``Object``, ``Node``, ``Area2D``, ``Camera2D`` atd.)"

msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"Vlastní, přizpůsobené třídy. Podívejte se na novou vlastnost :ref:"
"`class_name <doc_gdscript_basics_class_name>` pro registraci typů v editoru."

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"Pro konstanty nemusíte uvádět typ, Godot je nastaví automaticky z přiřazené "
"hodnoty. Přesto tak můžete učinit, aby byl záměr vašeho kódu jasnější."

msgid "Custom variable types"
msgstr "Vlastní typy proměnných"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Jako typy můžete použít libovolnou třídu, včetně vlastních tříd. Ve "
"skriptech je lze využítt dvěma způsoby. První způsob spočívá v tom, že "
"skript, který chcete použít jako typ, předem načtete do konstanty:"

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"Druhým způsobem je použití klíčového slova ``class_name`` při vytváření "
"vlastní třídy. Pro výše uvedený příklad by váš soubor Rifle.gd vypadal takto:"

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Pokud použijete ``class_name``, Godot zaregistruje typ Rifle v editoru "
"globálně a můžete jej využít kdekoli, aniž byste ho museli přednačítat do "
"konstanty:"

msgid "Variable casting"
msgstr "Přetypování proměnných"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"V typovaných jazycích je klíčovým konceptem přetypování. Je to převod "
"hodnoty jednoho typu na typ druhý."

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Představte si ve své hře nepřítele, který ``dědí Area2D``. Chcete, aby se "
"střetl s hráčem, což je ``KinematicBody2D`` rozšířený skriptem "
"``PlayerController``. K detekci kolize použijete signál ``on_body_entered``. "
"S typovaným kódem bude těleso, které detekujete, generické "
"``PhysicsBody2D``, a ne váš ``PlayerController`` ve zpětném volání "
"``_on_body_entered``."

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Pomocí klíčového slova ``as`` pro přetypování a opětovného použití dvojtečky "
"``:`` můžete zkontrolovat, zda je proměnná ``PhysicsBody2D`` skutečně vaším "
"hráčem. A také tím donutíte proměnnou, aby se přidržela typu "
"``PlayerController``:"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Protože se jedná o vlastní typ, pokud ``body`` nerozšiřuje "
"``PlayerController``, bude proměnná ``player`` nastavena na ``null``. Toho "
"můžeme využít k ověření, zda je tělo hráčem, nebo ne. Díky tomuto "
"přetypování také získáme plnohodnotné automatické doplňování proměnné hráč."

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Pokud se pokusíte použít ``as`` na vestavěný typ a nepodaří se to, Godot "
"ukončí provádění chybovou hláškou."

msgid "Safe lines"
msgstr "Bezpečné řádky"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Přetypování pomocí ``as`` můžete také použít k zajištění bezpečnosti řádků . "
"Bezpečné řádky jsou novým nástrojem v Godotu 3.1, který vám řekne, kdy jsou "
"nejednoznačné řádky kódu typově bezpečné. Vzhledem k tomu, že můžete "
"kombinovat typovaný a dynamický kód, nemá Godot občas dostatek informací, "
"aby věděl, zda instrukce za běhu vyvolá chybu, nebo ne."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"K tomu dojde, když získáte podřízený uzel. Vezměme si například časovač: "
"pomocí dynamického kódu můžete získat uzel pomocí ``$Timer``. GDScript "
"podporuje `duck-typing <https://stackoverflow.com/a/4205163/8125343>`__, "
"takže i když je váš časovač typu ``Timer``, je zároveň ``Node`` a "
"``Object``, tj. dvěma třídami, které rozšiřuje. V dynamickém jazyce GDScript "
"vás také nezajímá typ uzlu, pokud má metody, které potřebujete volat."

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Pomocí ``as`` můžete Godotovi sdělit, jaký typ očekáváte, již při získávání "
"uzlu: ``($Timer as Timer)``, ``($Player as KinematicBody2D)``, atd. Godot se "
"ujistí, že typ funguje, a pokud ano, číslo řádku se v levé části editoru "
"skriptu změní na zelené."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Nebezpečný kód (řádek 7) vs Bezpečný kód (řádek 6 a 8)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"V nastavení editoru můžete bezpečné čáry vypnout nebo změnit jejich barvu."

msgid "Define the return type of a function with the arrow ->"
msgstr "Definujte návratový typ funkce pomocí šipky ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Chcete-li definovat návratový typ funkce, napište za její deklaraci pomlčku "
"a pravoúhlou závorku ``->`` a za ní návratový typ:"

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"Typ ``void`` znamená, že funkce nic nevrací. Stejně jako u proměnných můžete "
"použít libovolný typ:"

msgid "You can also use your own nodes as return types:"
msgstr "Jako návratové typy můžete použít i vlastní uzly:"

msgid "Typed or dynamic: stick to one style"
msgstr "Typizované nebo dynamické: držte se jednoho stylu"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"V jednom projektu mohou vedle sebe existovat typované a dynamické jazyky "
"GDScript. Doporučujeme však držet se jednoho z těchto stylů, abyste "
"zajistili konzistenci své kódové základny a příčetnost svých kolegů. Pro "
"všechny je snazší spolupracovat, pokud dodržujete stejné zásady, rychleji se "
"pak čte a chápe cizí kód."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"Zadaný kód vyžaduje trochu více psaní, ale získáte výhody, které jsme "
"probrali výše. Zde je příklad stejného prázdného skriptu v dynamickém stylu:"

msgid "And with static typing:"
msgstr "A se statickým typováním:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Jak vidíte, typy můžete také používat s virtuálními metodami enginu. Zpětná "
"volání signálů, stejně tak jako libovolná jiná metoda, mohou používat typy "
"též. Zde je signál ``body_entered`` v dynamickém stylu:"

msgid "And the same callback, with type hints:"
msgstr "A stejné zpětné volání s typy:"

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Můžete nahradit např. typ ``CollisionObject2D`` svým vlastním typem, aby se "
"parametrům automaticky přiřazoval typ:"

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"Proměnná ``bullet`` by zde mohla obsahovat libovolný ``CollisionObject2D``, "
"ale my se ujistíme, že je to náš ``Bullet``, uzel, který jsme vytvořili pro "
"náš projekt. Pokud je to cokoli jiného, například ``Area2D`` nebo jakýkoli "
"uzel, který nerozšiřuje (nedědí) ``Bullet``, proměnná ``bullet`` bude "
"``null``."

msgid "Warning system"
msgstr "Systém varování"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""
"Dokumentace k systému varování GDScriptu byla přesunuta na :ref:"
"`doc_gdscript_warning_system`."

msgid "Cases where you can't specify types"
msgstr "Případy, kdy nelze zadat typy"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Na závěr tohoto úvodu se věnujme několika případům, kdy nelze použít typy. "
"Všechny níže uvedené příklady **vyvolají chyby**."

msgid "You can't use Enums as types:"
msgstr "Enumy nelze používat jako typy:"

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr "Typ jednotlivých prvků pole nelze určit. Vyvolá to chybu:"

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"Přiřazení typů v cyklu ``for`` nelze vynutit, protože každý prvek, nad "
"kterým cyklus ``for`` iteruje, má již jiný typ. Nemůžete tedy **napsat**:"

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "Dva skripty na sobě nemohou cyklicky záviset:"

msgid "Summary"
msgstr "Shrnutí"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"Typovaný GDScript je výkonný nástroj. Je k dispozici od verze 3.1 Godotu a "
"pomáhá psát strukturovanější kód, vyhnout se běžným chybám a vytvářet "
"škálovatelné systémy. V budoucnu vám statické typy přinesou také příjemné "
"zvýšení výkonu díky chystaným optimalizacím překladače."

msgid "Translation status"
msgstr "Stav překladu"
