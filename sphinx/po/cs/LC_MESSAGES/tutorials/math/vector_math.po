# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Vector math"
msgstr "Vektorová matematika"

msgid "Introduction"
msgstr "Úvod"

msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"Tento tutoriál je krátký a praktický úvod do lineární algebry s uplatněním "
"ve vývoji her. Lineární algebra se zabývá vektory a jejich využitím. Vektory "
"mají mnoho uplatnění ve vývoji ve 2D i 3D a Godot je značně používá."

msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"Tento tutoriál **není** oficiální učebnice lineární algebry. My se pouze "
"podíváme na uplatnění pro vývoj her. Pro širší pohled na matematiku "
"navštivte https://www.khanacademy.org/math/linear-algebra"

msgid "Coordinate systems (2D)"
msgstr "Soustavy souřadnic (2D)"

msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"Ve 2D prostoru jsou souřadnice definovány pomocí vodorovné osy (``x``) "
"svislé osy (``y``) . Konkrétní pozice ve 2D prostoru je zapsána jako dvojice "
"hodnot , např. ``(4, 3)``."

msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"Pokud začínáte s počítačovou grafikou, může se zdát zvláštní, že kladná část "
"osy ``y`` směřuje **dolů** místo nahoru, jak jste se učili na hodině "
"matematiky. Ve většině aplikací počítačové grafiky je to však běžné."

msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"Libovolná pozice ve 2D rovině může být takto vyjádřena dvojicí čísel. "
"Nicméně o pozici ``(4, 3)`` můžeme uvažovat jako o **odklonu (offset)** od "
"bodu ``(0, 0)`` neboli **počátku (origin)**. Nakreslíme šipku směřující od "
"počátku k našemu bodu:"

msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` and a length (or magnitude) ``m``. In this case, the arrow "
"is a **position vector** - it denotes a position in space, relative to the "
"origin."
msgstr ""
"Tohle je **vektor**. Vektor vyjadřuje mnoho užitečných informací. Kromě "
"toho, že nám sděluje polohu bodu ``(4, 3)``, můžeme o něm uvažovat jako o "
"úhlu ``θ`` a délce (nebo velikosti) ``m``. Šipka je v tomto případě "
"**polohový vektor** - označuje polohu v prostoru vzhledem k počátku."

msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"Velmi důležitým bodem ke zvážení ohledně vektorů, je že představují pouze "
"**relativní** směr a velikost. Neexistuje žádný koncept pozice vektoru. "
"Následující dva vektory jsou totožné:"

msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"Oba vektory představují bod 4 jednotky vpravo a 3 jednotky pod nějakým "
"počátečním bodem. Nezáleží na tom, kde v rovině vektor nakreslíte, vždy "
"představuje relativní směr a velikost."

msgid "Vector operations"
msgstr "Operace s vektory"

msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"K odkazování na vektor můžete použít kteroukoli metodu (souřadnice x a y "
"nebo úhel a velikost), ale programátoři obvykle používají pohodlnější "
"souřadnicový zápis. Např. v Godot se počátek nachází v levém horním rohu "
"obrazovky, takže pro umístění 2D uzlu pojmenovaného ``Node2D`` 400 pixelů "
"vpravo a 300 pixelů dolů, použijeme následující kód:"

msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types."
msgstr ""
"Godot podporuje oba :ref:`Vector2 <class_Vector2>` a :ref:`Vector3 "
"<class_Vector3>` pro použití ve 2D, respektive 3D. Pro oba typy platí stejná "
"matematická pravidla popsaná v tomto článku."

msgid "Member access"
msgstr "Přistupování k částem vektoru"

msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr "K jednotlivým složkám vektoru lze přistupovat přímo podle jména."

msgid "Adding vectors"
msgstr "Sčítání vektorů"

msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr ""
"Při sčítání nebo odečítání dvou vektorů se sčítají odpovídající složky:"

msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""
"To můžeme znázornit také graficky přičtením druhého vektoru na konec prvního:"

msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr "Všimněte si, že součet ``a + b`` dává stejný výsledek jako ``b + a``."

msgid "Scalar multiplication"
msgstr "Násobení skalárem"

msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**."
msgstr ""
"Vektory představují směr i velikost. Hodnota představující pouze velikost se "
"nazývá **skalár**."

msgid "A vector can be multiplied by a **scalar**:"
msgstr "Vektor může být násoben **skalárem**:"

msgid ""
"Multiplying a vector by a scalar does not change its direction, only its "
"magnitude. This is how you **scale** a vector."
msgstr ""
"Násobení vektoru skalárem nezmění jeho směr, pouze velikost. Takto "
"**škálujete** vektor."

msgid "Practical applications"
msgstr "Praktické aplikace"

msgid "Let's look at two common uses for vector addition and subtraction."
msgstr "Podívejme se na dvě běžná použití sčítání a odčítání vektorů."

msgid "Movement"
msgstr "Pohyb"

msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1,3)`` and a "
"velocity vector of ``(2,1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"Vektor může představovat **libovolné** množství velikosti a směru. Typické "
"příklady jsou: pozice, rychlost, zrychlení a síla. Na tomto obrázku má "
"kosmická loď v kroku 1 vektor pozice ``(1,3)`` a vektor rychlosti ``(2,1)``. "
"Vektor rychlosti vyjadřuje jak daleko se loď posune každý krok. Pozici pro "
"krok 2 najdeme přičtením rychlosti k aktuální pozici."

msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding velocity to the previous position."
msgstr ""
"Rychlost měří **změnu** pozice za jednotku času. Novou pozici nalezneme "
"přičtením rychlosti k předchozí pozici."

msgid "Pointing toward a target"
msgstr "Směřování k cíli"

msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"V tomto scénáři máte tank, který chce namířit svou věž na robota. Odečtením "
"pozice tanku od pozice robota dostaneme vektor směřující od tanku k robotovi."

msgid "To find a vector pointing from ``A`` to ``B`` use ``B - A``."
msgstr "K nalezení vektoru směřujícího od ``A`` do ``B`` použijeme ``B - A``."

msgid "Unit vectors"
msgstr "Jednotkové vektory"

msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"Vektor o **velikosti** ``1`` se nazývá **jednotkový vektor**. Někdy se také "
"označují jako **směrové vektory** nebo **normály** Jednotkové vektory jsou "
"užitečné, když potřebujete ponechat směr."

msgid "Normalization"
msgstr "Normalizace"

msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude. Because this is such a common operation, ``Vector2`` and "
"``Vector3`` provide a method for normalizing:"
msgstr ""
"**Normalizování** vektoru znamená snížení jeho délky na ``1`` při zachování "
"jeho směru. Toho dosáhneme vydělením každé složky velikostí vektoru. Protože "
"je to běžná operace, ``Vector2`` a ``Vector3`` poskytují metodu pro "
"normalizování:"

msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so will result in an "
"error."
msgstr ""
"Protože normalizování zahrnuje dělení délkou vektoru, nemůžete normalizovat "
"vektor o délce ``0``. Takový pokus způsobí chybu."

msgid "Reflection"
msgstr "Odraz"

msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"Běžným použitím jednotkových vektorů je indikace **normál**. Normálové "
"vektory jsou jednotkové vektory kolmé k povrchu, určující jeho směr. Běžně "
"se používají pro osvětlení, kolize a další operace zahrnující povrchy."

msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""
"Představme si například, že máme pohybující se míč, který chceme odrazit od "
"zdi nebo jiného předmětu:"

msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, the :ref:`Vector2 <class_Vector2>` class has a ``bounce()`` method to "
"handle this. Here is a GDScript example of the diagram above using a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`:"
msgstr ""
"Normála roviny má hodnotu ``(0, -1)``, protože se jedná o vodorovnou rovinu. "
"Když míč narazí, jeho zbývající pohyb (množství zbylé po dopadu na rovinu) "
"se odrazí pomocí normály. V Godot, třída :ref:`Vector2 <class_Vector2>` k "
"tomu má metodu ``bounce()``. Zde je GDScript příklad výše uvedeného diagramu "
"pomocí :ref:`KinematicBody2D <class_KinematicBody2D>`:"

msgid "Dot product"
msgstr "Skalární součin"

msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"**Skalární součin** je jeden z nejdůležitějších pojmů vektorové matematiky, "
"ale často je nepochopen. Skalární součin je operace dvou vektorů, která "
"vrací **skalár**. Oproti vektoru, který obsahuje velikost a směr, je hodnota "
"skaláru pouze velikost."

msgid "The formula for dot product takes two common forms:"
msgstr "Vzorec pro skalární součin má dvě běžné formy:"

msgid "and"
msgstr "a"

msgid ""
"However, in most cases it is easiest to use the built-in method. Note that "
"the order of the two vectors does not matter:"
msgstr ""
"Ve většině případů je však nejjednodušší použít vestavěnou metodu. Všimněte "
"si, že na pořadí těchto dvou vektorů nezáleží:"

msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cosθ``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"Skalární součin je nejvíc užitečný, při použití s jednotkovými vektory, "
"takže první vzorec je redukován pouze na ``cosθ``. To znamená, že skalární "
"součin něco vypovídá o úhlu mezi dvěma vektory:"

msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr ""
"Při použití jednotkových vektorů bude výsledek vždy mezi ``-1`` (180°) a "
"``1`` (0°)."

msgid "Facing"
msgstr "Směřování"

msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"Tuto skutečnost můžeme využít ke zjištění, zda objekt směřuje k jinému "
"objektu. Na schématu níže se hráč ``P`` snaží vyhnout zombiím ``A`` a ``B``. "
"Mohou vidět hráče při předpokladu, že zorné pole zombií je **180°**?"

msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombies' facing directions and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it, however, Godot has a helper method "
"to do this called ``direction_to``. If the angle between this vector and the "
"facing vector is less than 90°, then the zombie can see the player."
msgstr ""
"Zelené šipky ``fA`` a ``fB`` jsou **jednotkové vektory** představující směr "
"zraku zombie a modré půlkruhy představují zorné pole zraku. Pro zombii ``A`` "
"nalezneme směrový vektor ``AP`` , ukazující na hráče pomocí ``P - A`` a "
"normalizujeme ho, Godot má k tomu ovšem pomocnou metodu nazvanou "
"``direction_to``. Pokud je úhel mezi tímto vektorem a vektorem směru zraku "
"menší než 90°, potom zombie může vidět hráče."

msgid "In code it would look like this:"
msgstr "V kódu by to vypadalo takto:"

msgid "Cross product"
msgstr "Vektorový součin"

msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"Stejně jako skalární součin, tak i **vektorový součin** je operací dvou "
"vektorů. Výsledkem vektorového součiny je však vektor se směrem kolmým na "
"oba vektory. Jeho velikost závisí na jejich vzájemném úhlu. Pokud jsou dva "
"vektory rovnoběžné, výsledkem jejich vektorového součinu bude nulový vektor."

msgid "The cross product is calculated like this:"
msgstr "Vektorový součin se vypočítá nějak takto:"

msgid "With Godot, you can use the built-in method:"
msgstr "V Godot můžeme použít vestavěnou metodu:"

msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"U vektorového součinu záleží na pořadí. ``a.cross(b)`` nedává stejný "
"výsledek jako ``b.cross(a)``. Výsledné vektory mají **opačné** směry."

msgid "Calculating normals"
msgstr "Výpočet normál"

msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB x AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"Jedním z běžných užití vektorového součinu je nalezení normály roviny plochy "
"nebo roviny ve 3D prostoru. Pokud máme trojúhelník ``ABC``, můžeme rozdílem "
"vektorů najít dvě strany ``AB`` and ``AC``. Pomocí vektorového součinu ``AB "
"x AC`` dostaneme vektor kolmý k oběma: normálu povrchu."

msgid "Here is a function to calculate a triangle's normal:"
msgstr "Zde je funkce pro výpočet normály trojúhelníku:"

msgid "Pointing to a target"
msgstr "Ukazování k cíli"

msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"Ve výše uvedené části o skalárním součinu jsme viděli, jak nalezneme úhel "
"mezi dvěma vektory. Ve 3D však tato informace nestačí. Potřebujeme také "
"vědět, kolem které osy se otáčet. Můžeme to zjistit výpočtem vektorového "
"součinu aktuálního směru a cílového směru. Výsledným kolmým vektorem je osa "
"rotace."

msgid "More information"
msgstr "Více informací"

msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""
"Další informace o použití vektorové matematiky v Godot naleznete v "
"následujících článcích:"

msgid ":ref:`doc_vectors_advanced`"
msgstr ""

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ""

msgid "Translation status"
msgstr "Stav překladu"
