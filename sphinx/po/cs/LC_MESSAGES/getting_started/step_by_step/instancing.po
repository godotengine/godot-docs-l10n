# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "Vytváření instancí"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""

msgid "In practice"
msgstr "Osvědčené postupy"

#, fuzzy
msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: :download:"
"`instancing.zip <files/instancing.zip>`."
msgstr ""
"Chcete-li se dozvědět, jak v Godotu funguje vytváření instancí, začněte "
"stažením ukázkového projektu ball, který jsme pro vás připravili: :download:"
"`instancing.zip <files / instancing.zip>`."

msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""
"Rozbalte tento projekt kdekoli chcete. Pak otevřete Godot a přidejte tento "
"projekt do projektového manažera pomocí tlačítka \"Importovat\"."

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""

msgid "Double-click the ``project.godot`` file to open it."
msgstr ""

msgid "Finally, click the Import & Edit button."
msgstr ""

msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""

msgid "Double-click the ball scene to instance it."
msgstr ""

msgid "The ball appears in the top-left corner of the viewport."
msgstr "Koule se zobrazí v levém horním rohu okna zobrazení."

msgid "Click on it and drag it towards the center of the view."
msgstr ""

msgid "Play the game by pressing F5. You should see it fall."
msgstr ""

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""

msgid "You can repeat this process until you have several in the scene."
msgstr "Tento postup můžete opakovat, dokud jich na scéně nebude několik."

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""

msgid "Editing scenes and instances"
msgstr "Úpravy scén a instancí"

msgid "There is more to instances. With this feature, you can:"
msgstr ""

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""

msgid ""
"Change the default properties of every Ball by opening the ``Ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""

msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""

msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""

msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr ""

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"Všimněte si, že vedle upravené vlastnosti se zobrazí šedé tlačítko "
"„obnovit“. Je-li toto tlačítko k dispozici, znamená to, že jste v instanci "
"scény upravili vlastnost originální scény tj tak, aby přepsala svoji hodnotu "
"v uložených vlastnostech upravené scény. I když je tato vlastnost "
"modifikována ve scéně původni, zde v instanci zůstane hodnota upravená . "
"Stisknutím tlačítka pro obnovení vrátíte vlastnost na hodnotu v uložené "
"scéně."

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""

msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""

msgid "Scene instances as a design language"
msgstr ""

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""

msgid "For example, you could break down a shooter game like so:"
msgstr "Například takhle by se dala představit jednoduchá střílečka:"

msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"S takovým diagramem můžete přijít pro téměř jakoukoli hru. Zakreslete si ty "
"části hry, které jsou viditelné z perspektivy hráče, a poté přidejte šipky "
"znázorňující vlastnictví jednoho objektu druhým."

msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"Jakmile budete mít schéma, doporučeným postupem pro tvorbu hry je vytvoření "
"scény pro každý prvek uvedený v diagramu. Pro vlastnické vztahy použijete "
"vytváření instancí buď kódem ve skriptu nebo přímo v editoru. Takto vznikne "
"strom scén."

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"Hodně času stráveného při programováním her (nebo softwaru obecně) je o "
"navrhování architektury a přizpůsobení herních komponent této architektuře. "
"Navrh založený na scénách nahrazuje tento přístup a dělá vývoj mnohem "
"rychlejším a přímočarějším, což vám umožňuje soustředit se na samotnou herní "
"logiku. Protože většina herních komponent je mapována přímo na scénu, "
"použití designu založeného na instancích scén znamená, že žádné další "
"rozšiřování architektury kódem není většinou potřeba."

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"Podívejme se na další příklad hry typu otevřený-svět se spoustou zdrojů a "
"vnořených prvků:"

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"Později bychom mohli vytvořit scény, které představují Stráže (a další NPC) "
"a také je přidat do Citadely. V důsledku toho by byli nepřímo přidáni do "
"celého herního světa."

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"S Godotem je snadné takto postupně budovat vaši hru, protože vše, co musíte "
"udělat, je vytvořit další scény a následně jejich instance. Kromě toho je "
"uživatelské rozhraní editoru navrženo tak, aby bylo uživatelsky přívětivé "
"pro programátory i neprogramátory. Typický proces týmového vývoje může "
"vyžadovat 2D nebo 3D umělce, návrháře úrovní, herní návrháře a animátory, "
"všechny pracující s jedním editorem."

msgid "Summary"
msgstr "Shrnutí"

msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr ""

msgid "The ability to divide your game into reusable components."
msgstr "Možnost rozdělit hru na opakovaně použitelné komponenty."

msgid "A tool to structure and encapsulate complex systems."
msgstr ""

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""

msgid "Translation status"
msgstr "Stav překladu"
