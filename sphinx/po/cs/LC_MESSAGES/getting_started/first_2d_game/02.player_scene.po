# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Vytvoření scény hráče"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"První scéna, kterou vytvoříme, definuje objekt ``Player``. Jednou z výhod "
"vytvoření samostatné hráčské scény je to, že ji můžeme testovat samostatně, "
"dokonce ještě předtím, než vytvoříme další části hry."

msgid "Node structure"
msgstr "Struktura uzlu"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"Nejprve musíme vybrat kořenový uzel pro objekt hráče. Obecně by kořen scény "
"měl odrážet požadovanou funkčnost objektu - to čím objekt *je*. Klikněte na "
"tlačítko \"Jiný uzel\" a do scény přidejte uzel :ref:`Area2D <class_Area2D>`."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot zobrazí varovnou ikonu vedle uzlu ve stromu scény. Prozatím to můžete "
"ignorovat. Vyřešíme to později."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"Pomocí ``Area2D`` můžeme detekovat objekty, které se překrývají nebo naráží "
"do hráče. Změňte název uzlu na ``Player`` poklepáním na něj. Nyní, když jsme "
"nastavili kořen scény hráče, můžeme do něho přidat další podřízené uzly, "
"abychom mu rozšířili funkčnost a poskytli více vlastností."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"Než přidáme děti do uzlu ''Player'', chceme si být jisti, že je omylem "
"nepřesuneme nebo nezměníme jejich velikost. Vyberte uzel a klepněte na ikonu "
"vpravo od zámku; jeho popis říká: \"Zajišťuje, že podřízené objektu nelze "
"vybrat.\""

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Uložte scénu. Klikněte na Scéna -> Uložit nebo stiskněte :kbd:`Ctrl + S` v "
"systému Windows / Linux nebo :kbd:`Cmd + S` v systému MacOS."

msgid "For this project, we will be following the Godot naming conventions."
msgstr ""
"V tomto projektu budeme dodržovat Godot pravidla pro názvy identifikátorů."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Třídy (uzly) používají PascalCase, proměnné a funkce používají "
"snake_case a konstanty používají ALL_CAPS (viz :ref:"
"`doc_gdscript_styleguide`)."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C #**: Třídy, exportované proměnné a metody používají PascalCase, soukromá "
"pole používají _camelCase, lokální proměnné a parametry používají camelCase "
"(viz :ref:`doc_c_sharp_styleguide`). Při připojování signálů buďte opatrní, "
"abyste přesně zadali názvy metod."

msgid "Sprite animation"
msgstr "Animace spritu"

msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"Klikněte na uzel ``Player`` a jako podřízený uzel přidejte :ref:"
"`AnimatedSprite <class_AnimatedSprite>`. ``AnimatedSprite`` bude "
"zabezpečovat vzhled a animace našeho hráče. Všimněte si, že vedle uzlu je "
"varovný symbol. ``AnimatedSprite`` vyžaduje zdroj :ref:`SpriteFrames "
"<class_SpriteFrames>`, což je seznam animací, které je schopen zobrazit. "
"Chcete-li jej vytvořit, najděte v inspektoru vlastnost ``Frames`` a klikněte "
"na \"[empty]\" -> \"New SpriteFrames\". Opětovným kliknutím otevřete panel "
"„SpriteFrames“:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"Vlevo je seznam animací. Klikněte na „výchozí“ a přejmenujte jej na "
"\"walk\". Poté klikněte na tlačítko „Nová animace“ a vytvořte druhou animaci "
"s názvem \"up\". Vyhledejte obrázky přehrávače na kartě \"Souborový systém\" "
"- jsou ve složce ``art`` kterou jste dříve rozbalili. Přetáhněte dva obrázky "
"pro každou animaci, pojmenované ``playerGrey_up [1/2]`` a ``playerGrey_walk "
"[1/2]``, na stranu \"Animation Frames\" na panelu pro příslušnou animaci:"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"Obrázky hráče jsou pro okno hry příliš velké, takže je musíme zmenšit. "
"Klikněte na uzel ``AnimatedSprite`` a nastavte vlastnost ``Scale`` na "
"``(0.5, 0.5)``. Najdete ji v Inspektoru pod hlavičkou ``Node2D``."

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"Nakonec přidejte :ref:`CollisionShape2D <class_CollisionShape2D>` jako "
"potomka ``Player``. Tím se určí hráčův \"hitbox\" neboli hranice jeho "
"kolizní oblasti. Pro tuto postavu je uzel ``CapsuleShape2D`` nejvhodnější, "
"takže v Inspektoru vedle \"Shape\" klikněte na „[empty]“ -> „New "
"CapsuleShape2D“. Pomocí dvou úchytů velikosti změňte tvar tak, aby pokryl "
"celý sprite:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Až skončíte, měla by vaše ``Player`` scéna vypadat takto:"

msgid "Make sure to save the scene again after these changes."
msgstr "Po těchto změnách nezapomeňte scénu znovu uložit."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""

msgid "Translation status"
msgstr "Stav překladu"
