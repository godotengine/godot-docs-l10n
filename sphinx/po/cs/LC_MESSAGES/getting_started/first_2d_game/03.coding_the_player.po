# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Coding the player"
msgstr "Programování pohybu hráčem"

msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr ""

msgid ""
"To do so, we need to add some functionality that we can't get from a built-"
"in node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"Nyní musíme přidat některé funkce, které nám připravený uzel neposkytuje, "
"proto je naprogramujeme pomocí skriptu. Klikněte na uzel ``Player`` a dále "
"na tlačítko \"Připojit skript\":"

msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"V okně nastavení skriptu můžete ponechat výchozí nastavení. Stačí kliknout "
"na „Vytvořit“:"

msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"Pokud vytváříte skript v C# nebo v jiném jazyku, vyberte požadovaný jazyk z "
"rozbalovací nabídky `jazyk` před tím, než kliknete vytvořit."

msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""

msgid "Start by declaring the member variables this object will need:"
msgstr ""
"Začněte deklarováním členských proměnných, které bude tento objekt "
"potřebovat:"

msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"Pomocí klíčového slova „export“ pro první proměnnou „speed“ nám umožní "
"nastavit její hodnotu v Inspektoru. To může být šikovné pro hodnoty, které "
"chcete upravovat stejně jako vlastnosti věstavěných uzlu. Klikněte na uzel "
"``Player`` a uvidíte vlastnost, která se nyní bude objevovat v inspektoru v "
"sekci \"Proměnné skriptu\". Pamatujte, že pokud zde změníte hodnotu, "
"přepíšete tak hodnotu zapsanou ve skriptu."

msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"Pokud používáte C#, musíte (znovu) sestavit projekt, kdykoli chcete vidět "
"nově exportované proměnné nebo signály. Toto sestavení lze spustit ručně "
"kliknutím na slovo „Mono“ v dolní části okna editoru, čímž se odhalí panel "
"Mono, a poté kliknutím na tlačítko „Build Project“."

msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"Funkce ``_ready ()`` se volá, když uzel vstoupuje do stromu scény, a to je "
"dobrý čas k nalezení velikosti okna hry:"

msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"Nyní můžeme pomocí funkce ``_process ()`` definovat, co bude hráč dělat. "
"``_process ()`` se volá v každém framu(snímku) takže tuto funkci použijeme k "
"aktualizaci takových prvků naší hry, které se často změní. Pro hráče musíme "
"udělat následující:"

msgid "Check for input."
msgstr "Zkontrolovat vstup."

msgid "Move in the given direction."
msgstr "Pohnout se v požadovaném směru."

msgid "Play the appropriate animation."
msgstr "Přehrát příslušnou animaci."

msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this game, "
"we will map the arrow keys to the four directions."
msgstr ""
"Nejprve musíme zkontrolovat vstup - tiskne hráč klávesu? Pro tuto hru máme k "
"dispozici 4 vstupy pro směr. Vstupní akce jsou definovány v Nastavení "
"projektu v části „Mapa vstupů“. Zde můžete definovat vlastní události a "
"přiřadit jim různé klávesy, události myši nebo jiné vstupy. Pro toto demo "
"použijeme výchozí události, které jsou přiřazeny kurzorovým klávesám "
"klávesnice."

msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""

msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"then click the \"Key\" option in the drop-down menu. A dialog asks you to "
"type in the desired key. Press the right arrow on your keyboard and click "
"\"Ok\"."
msgstr ""

msgid "Repeat these steps to add three more mappings:"
msgstr ""

msgid "``move_left`` mapped to the left arrow key."
msgstr ""

msgid "``move_up`` mapped to the up arrow key."
msgstr ""

msgid "And ``move_down`` mapped to the down arrow key."
msgstr ""

msgid "Your input map tab should look like this:"
msgstr "Karta vstupní mapy by měla vypadat takto:"

msgid "Click the \"Close\" button to close the project settings."
msgstr ""

msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""

msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"Zda je klávesa stisknuta můžete zjistit pomocí funkce ``Input."
"is_action_pressed()``, která vrací ``true``, pokud je stisknuta, nebo "
"``false``, pokud není."

msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"Začneme nastavením ``velocity`` na ``(0, 0)`` - ve výchozím nastavení by se "
"hráč neměl pohybovat. Pak zkontrolujeme každý vstup a přidáme / odečteme z "
"``velocity``, abychom získali celkový směr. Například pokud podržíte "
"``right`` a ``down`` současně, bude výsledný vektor ``velocity`` ``(1, 1)``. "
"V tomto případě, protože přidáváme vodorovný a svislý pohyb, by se hráč "
"pohyboval *rychleji* diagonálně, než kdyby se pohyboval vodorovně."

msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"Můžeme tomu zabránit, pokud *normalizujeme* vektor rychlosti, což znamená, "
"že nastavíme jeho *velikost* na ``1``, a vynásobíme jej velikostí požadované "
"rychlostí. To znamená, už žádné rychlé diagonální pohyby."

msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"Pokud jste nikdy předtím nepoužívali vektorovou matematiku, nebo potřebujete "
"málé opáčko, používání vektorů v Godotu najdete na :ref:`doc_vector_math`. "
"Je dobré vektory znát, ale po zbytek tohoto tutoriálu to nebude nutné."

msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"Také ověříme zda se hráč pohybuje, takže na můžeme volat metody ``play ()`` "
"nebo ``stop ()`` uzlu AnimatedSprite."

msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, "
"``$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` je zkratka pro ``get_node()``. Takže ve výše uvedeném kódu je "
"``$AnimatedSprite.play()`` stejný jako ``get_node(\"AnimatedSprite\")."
"Play()``."

msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"V GDScript, ``$`` vrací relativní cestu uzlu vzhledem k uzlu aktuálnímu, "
"anebo ``null``, pokud uzel nebyl nalezen. Protože AnimatedSprite je potomkem "
"aktuálního uzlu, můžeme použít ``$AnimatedSprite``."

msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"Nyní, když máme směr pohybu, můžeme aktualizovat pozici hráče. Můžeme také "
"použít ``clamp()``, abychom zabránili opuštění obrazovky. *Clamp* hodnotu "
"znamená omezit ji na určitý rozsah. Na konec funkce ``_process`` přidejte "
"následující (ujistěte se, že není odsazeno jako pokračování větve `else`):"

msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"Parametr ``delta`` ve funkci ``_process()`` označuje délku *snímku* - dobu, "
"kterou předchozí snímek potřeboval k dokončení. Použitím této hodnoty "
"zajistíte, že pohyb zůstane konzistentní, i když se změní snímková frekvence."

msgid ""
"Click \"Play Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm you "
"can move the player around the screen in all directions."
msgstr ""
"Klikněte na \"Přehrát scénu\" (:kbd:`F6`, :kbd:`Cmd + R` v systému MacOS) a "
"ujistěte se, že můžete hráčem posunovat po obrazovce ve všech směrech."

msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "Pokud se zobrazí následující chyba v panelu \"Debugger\""

msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Pokus o volání funkce 'play' v základní 'null instance' na null instance``"

msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"to pravděpodobně znamená, že jste špatně zadali název uzlu AnimatedSprite. "
"Názvy uzlů rozlišují velká a malá písmena a ``$NodeName`` musí odpovídat "
"jménu, které vidíte ve stromu scény."

msgid "Choosing animations"
msgstr "Výběr animací"

msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"Nyní, když se hráč může pohybovat, musíme změnit podle směru jeho pohybu "
"animaci, kterou AnimatedSprite přehrává. Máme animaci „chůze“, která ukazuje "
"pohyb hráče doprava, Tato animace by se měla vodorovně převrátit pomocí "
"vlastnosti ``flip_h`` pro pohyb doleva. Máme také animaci \"nahoru\", která "
"by měla být svisle převrácená s ``flip_v`` pro pohyb dolů. Umístíme tento "
"kód na konec funkce ``_process()``:"

msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"Booleovská přiřazení ve výše uvedeném kódu jsou běžnými zkratkami při "
"programování. Protože provádíme porovnání (booleovsky) a pak *přiřazujeme* "
"booleovskou hodnotu, můžeme oba kroky provést současně. Porovnejte tento kód "
"s jednořádkovým přiřazením výše:"

msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""
"Zahrajte si scénu znovu a zkontrolujte, zda jsou animace ve všech směrech "
"odpovídající."

msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"Častou chybou je nesprávné zadání názvů animací. Názvy animací v panelu "
"SpriteFrames se musí shodovat s tím, co zadáte v kódu. Pokud jste animaci "
"pojmenovali ``\"Walk\"``, musíte v kódu také použít velké písmeno \"W\"."

msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"Pokud jste si jisti, že pohyb funguje správně, přidejte tento řádek do "
"``_ready () ``, takže hráč bude při spuštění hry skrytý:"

msgid "Preparing for collisions"
msgstr "Příprava na kolize"

msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"Chceme, aby ``Player`` detekoval, když je zasažen nepřítelem, ale zatím jsme "
"žádného nepřítele nevytvořili! To je v pořádku, protože zde použijeme Gotovi "
"*signály*."

msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "Po ``extends Area2D`` přidejte na začátek skriptu následující kód:"

msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"Toto definuje vlastní signál zvaný \"hit\", který bude hráč vysílat při "
"srážce s nepřítelem. K detekci kolize použijeme ``Area2D``. Vyberte uzel "
"``Player`` a klikněte na záložku \"Uzel\" vedle záložky Inspektor, aby se "
"zobrazil seznam signálů, které může hráč vyslat:"

msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"Všimněte si, že je k dispozici i náš vlastní signál \"hit\"! Protože naši "
"nepřátelé budou uzly ``RigidBody2D``, chceme signál ``body_entered(body:"
"Node)``. Tento signál bude vydán, když se body dotkne hráče. Klikněte na "
"„Připojit ...“ a objeví se okno „Připojit signál“. Nemusíme měnit žádné z "
"těchto nastavení, takže znovu klikněte na Připojit. Godot automaticky "
"vytvoří funkci ve skriptu vašeho hráče."

msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"Všimněte si zelené ikony označující, že signál je připojen k této funkci. "
"Přidejte následující kód do funkce:"

msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"Pokaždé, když hráče zasáhne nepřítel, bude vyslán signál. Musíme pak vypnout "
"kolizi hráče, abychom nespustili signál „hit“ více než jednou."

msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"Zakázání kolizního tvaru uzlu může způsobit chybu, pokud k tomu dojde "
"uprostřed zpracovávání kolize enginem. Pomocí ``set_deferred()`` řekneme "
"Godotovi, aby počkal, s vypnutím kolizního tvaru, dokud to nebude bezpečné."

msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"Posledním kusem je přidání funkce, kterou můžeme nazvat resetem hráče při "
"spuštění nové hry."

msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr ""

msgid "Translation status"
msgstr "Stav překladu"
