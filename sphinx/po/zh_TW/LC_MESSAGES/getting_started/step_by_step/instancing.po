# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating instances"
msgstr "編輯實體"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""

#, fuzzy
msgid "In practice"
msgstr "最佳實踐"

#, fuzzy
msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: :download:"
"`instancing.zip <files/instancing.zip>`."
msgstr ""
"讓我們先下載一個範例專案來瞭解實體化是怎麼運作的： :download:`instancing.zip "
"<files/instancing.zip>` 。"

#, fuzzy
msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""
"解壓縮到任意處，然後打開 Godot 並在專案管理員裡點擊 [匯入] 按鈕來新增該專案："

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""

msgid "Double-click the ``project.godot`` file to open it."
msgstr ""

msgid "Finally, click the Import & Edit button."
msgstr ""

msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""

msgid "Double-click the ball scene to instance it."
msgstr ""

#, fuzzy
msgid "The ball appears in the top-left corner of the viewport."
msgstr "Logo 會顯示在螢幕的最上方。"

#, fuzzy
msgid "Click on it and drag it towards the center of the view."
msgstr "點擊「新增合集」然後拖移並選擇整個圖塊表。"

msgid "Play the game by pressing F5. You should see it fall."
msgstr ""

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""

#, fuzzy
msgid "You can repeat this process until you have several in the scene."
msgstr "灰色的節點無法重新命名。代表這些節點有母場景"

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""

#, fuzzy
msgid "Editing scenes and instances"
msgstr "編輯實體"

msgid "There is more to instances. With this feature, you can:"
msgstr ""

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""

msgid ""
"Change the default properties of every Ball by opening the ``Ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""

msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""

msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""

msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr ""

#, fuzzy
msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"可以注意到在已經調整的屬性旁邊會出現一個灰色的 [還原] 按鈕。如果出現了這個按"
"鈕就代表修改了實體化的場景，而且這個節點的數值覆蓋了原始場景的值。就算再次修"
"改原本的場景，這裡自定的數值還是會保留。點擊 [還原] 按鈕就能把屬性還原成原始"
"場景的值。"

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""

msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""

msgid "Scene instances as a design language"
msgstr ""

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""

#, fuzzy
msgid "For example, you could break down a shooter game like so:"
msgstr "例如，可以這樣想像簡單的射擊遊戲："

#, fuzzy
msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"幾乎任何一種遊戲都可以用這種方式畫成圖片。先寫下遊戲裡可以被看到的部分，然後"
"在每個部分用箭頭來表示這些元素的從屬關係。"

#, fuzzy
msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"畫出這樣的圖之後，我們建議你為圖上的各個元素都建立一個場景來使用，再通過實體"
"化來做出從屬關係 (可以用程式碼或是直接在編輯器裡實體化)。"

#, fuzzy
msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"開發遊戲 (或是一般軟體) 時，我們總會花費許多時間來設計架構，然後再花時間把遊"
"戲的元素都套用到這個架構上。以場景為基礎來設計就取代了這個過程，讓開發變得更"
"快速而且更直觀，也讓你能直接專注於實現遊戲本身的邏輯。由於大多數的遊戲元件都"
"可以直接對應到場景上，使用使用以場景實體化為基礎的設計也就能在架構上花費較少"
"的程式碼。"

#, fuzzy
msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"再來看看另一個某方面來說更複雜的例子。這個例子是開放世界類型的遊戲，有很多素"
"材以及巢狀的元素："

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""

#, fuzzy
msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"接下來我們可以建立一些代表守衛 (以及其他 NPC) 的場景，然後也把這些場景都加進"
"城堡裡。這樣一來，這些 NPC 就間接地進到了整個遊戲世界裡了。"

#, fuzzy
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"在 Godot 裡，很容易就可以通過這種方式來迭代出遊戲，需要做的就只是建立場景、實"
"體化場景然後建立更多場景再實體化更多場景。而且，不管是對於程式設計師或非程式"
"設計師來說，Godot 的編輯器 UI 很友善。一般標準的團隊開發流程還會有 2D 與 3D "
"設計師、關卡設計師、遊戲設計師以及動畫家的參與，大家都會使用 Godot 編輯器界面"
"來進行作業。"

msgid "Summary"
msgstr "總結"

msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr ""

#, fuzzy
msgid "The ability to divide your game into reusable components."
msgstr "將計量槽與計數器變成可重複使用的 UI 元件"

msgid "A tool to structure and encapsulate complex systems."
msgstr ""

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
