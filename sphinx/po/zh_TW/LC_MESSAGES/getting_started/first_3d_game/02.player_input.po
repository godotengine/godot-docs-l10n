# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Player scene and input actions"
msgstr "Player 場景與輸入事件"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""

msgid ""
"Create a new scene by going to the Scene menu in the top-left and clicking "
"*New Scene*. Create a *KinematicBody* node as the root and name it *Player*."
msgstr ""

msgid "|image0|"
msgstr "\\ |image0|"

#, fuzzy
msgid "image0"
msgstr "\\ |image0|"

msgid ""
"Kinematic bodies are complementary to the area and rigid bodies used in the "
"2D game tutorial. Like rigid bodies, they can move and collide with the "
"environment, but instead of being controlled by the physics engine, you "
"dictate their movement. You will see how we use the node's unique features "
"when we code the jump and squash mechanics."
msgstr ""

msgid ""
"To learn more about the different physics node types, see the :ref:"
"`doc_physics_introduction`."
msgstr ""

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""

msgid ""
"Add a *Spatial* node as a child of *Player* and name it *Pivot*. Then, in "
"the FileSystem dock, expand the ``art/`` folder by double-clicking it and "
"drag and drop ``player.glb`` onto the *Pivot* node."
msgstr ""

msgid "|image1|"
msgstr "\\ |image1|"

#, fuzzy
msgid "image1"
msgstr "\\ |image1|"

msgid ""
"This should instantiate the model as a child of *Pivot*. You can rename it "
"to *Character*."
msgstr ""

msgid "|image2|"
msgstr "\\ |image2|"

#, fuzzy
msgid "image2"
msgstr "\\ |image2|"

msgid ""
"The ``.glb`` files contain 3D scene data based on the open-source GLTF 2.0 "
"specification. They're a modern and powerful alternative to a proprietary "
"format like FBX, which Godot also supports. To produce these files, we "
"designed the model in `Blender 3D <https://www.blender.org/>`__ and exported "
"it to GLTF."
msgstr ""

msgid ""
"As with all kinds of physics nodes, we need a collision shape for our "
"character to collide with the environment. Select the *Player* node again "
"and add a *CollisionShape*. In the *Inspector*, assign a *SphereShape* to "
"the *Shape* property. The sphere's wireframe appears below the character."
msgstr ""

msgid "|image3|"
msgstr "\\ |image3|"

#, fuzzy
msgid "image3"
msgstr "\\ |image3|"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Shrink it a bit by "
"dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""

msgid ""
"Then, move the shape up so its bottom roughly aligns with the grid's plane."
msgstr ""

msgid "|image4|"
msgstr "\\ |image4|"

#, fuzzy
msgid "image4"
msgstr "\\ |image4|"

msgid ""
"You can toggle the model's visibility by clicking the eye icon next to the "
"*Character* or the *Pivot* nodes."
msgstr ""

msgid "|image5|"
msgstr "\\ |image5|"

#, fuzzy
msgid "image5"
msgstr "\\ |image5|"

#, fuzzy
msgid "Save the scene as ``Player.tscn``."
msgstr "最後，保存場景為 ``sayhello.tscn`` 之類的名稱。"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr ""

#, fuzzy
msgid "Creating input actions"
msgstr "建立圖示"

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""

msgid ""
"This system is the Input Map. To access its editor, head to the *Project* "
"menu and select *Project Settings…*."
msgstr ""

msgid "|image6|"
msgstr ""

#, fuzzy
msgid "image6"
msgstr "\\ |image1|"

msgid ""
"At the top, there are multiple tabs. Click on *Input Map*. This window "
"allows you to add new actions at the top; they are your labels. In the "
"bottom part, you can bind keys to these actions."
msgstr ""

msgid "|image7|"
msgstr ""

#, fuzzy
msgid "image7"
msgstr "\\ |image1|"

msgid ""
"Godot projects come with some predefined actions designed for user interface "
"design, which we could use here. But we're defining our own to support "
"gamepads."
msgstr ""

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""

msgid "To add an action, write its name in the bar at the top and press Enter."
msgstr ""

msgid "|image8|"
msgstr ""

#, fuzzy
msgid "image8"
msgstr "\\ |image1|"

msgid ""
"Create the five actions. Your window should have them all listed at the "
"bottom."
msgstr ""

msgid "|image9|"
msgstr ""

#, fuzzy
msgid "image9"
msgstr "\\ |image1|"

msgid ""
"To bind a key or button to an action, click the \"+\" button to its right. "
"Do this for ``move_left`` and in the drop-down menu, click *Key*."
msgstr ""

msgid "|image10|"
msgstr ""

#, fuzzy
msgid "image10"
msgstr "\\ |image1|"

msgid ""
"This option allows you to add a keyboard input. A popup appears and waits "
"for you to press a key. Press the left arrow key and click *OK*."
msgstr ""

msgid "|image11|"
msgstr ""

#, fuzzy
msgid "image11"
msgstr "\\ |image1|"

#, fuzzy
msgid "Do the same for the A key."
msgstr "根節點的縮放 (Scale)。"

msgid "|image12|"
msgstr ""

#, fuzzy
msgid "image12"
msgstr "\\ |image1|"

msgid ""
"Let's now add support for a gamepad's left joystick. Click the \"+\" button "
"again but this time, select *Joy Axis*."
msgstr ""

msgid "|image13|"
msgstr ""

#, fuzzy
msgid "image13"
msgstr "\\ |image1|"

msgid ""
"The popup gives you two drop-down menus. On the left, you can select a "
"gamepad by index. *Device 0* corresponds to the first plugged gamepad, "
"*Device 1* corresponds to the second, and so on. You can select the joystick "
"and direction you want to bind to the input action on the right. Leave the "
"default values and press the *Add* button."
msgstr ""

msgid "|image14|"
msgstr ""

#, fuzzy
msgid "image14"
msgstr "\\ |image1|"

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's right axis to ``move_right``. After binding all "
"keys, your interface should look like this."
msgstr ""

#, fuzzy
msgid "|image15|"
msgstr "\\ |image1|"

#, fuzzy
msgid "image15"
msgstr "\\ |image1|"

msgid ""
"We have the ``jump`` action left to set up. Bind the Space key and the "
"gamepad's A button. To bind a gamepad's button, select the *Joy Button* "
"option in the menu."
msgstr ""

#, fuzzy
msgid "|image16|"
msgstr "\\ |image1|"

#, fuzzy
msgid "image16"
msgstr "\\ |image1|"

msgid "Leave the default values and click the *Add* button."
msgstr ""

#, fuzzy
msgid "|image17|"
msgstr "\\ |image1|"

#, fuzzy
msgid "image17"
msgstr "\\ |image1|"

#, fuzzy
msgid "Your jump input action should look like this."
msgstr "現在場景看起來會這樣："

#, fuzzy
msgid "|image18|"
msgstr "\\ |image1|"

#, fuzzy
msgid "image18"
msgstr "\\ |image1|"

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""

msgid "In the next part, we'll code and test the player's movement."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
