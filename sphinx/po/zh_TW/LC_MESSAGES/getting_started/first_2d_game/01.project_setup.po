# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Setting up the project"
msgstr ""

msgid "In this short first part, we'll set up and organize the project."
msgstr ""

#, fuzzy
msgid "Launch Godot and create a new project."
msgstr "建立新專案"

msgid "GDScript"
msgstr "GDScript"

#, fuzzy
msgid ""
"Download :download:`dodge_assets.zip <files/dodge_assets.zip>`. The archive "
"contains the images and sounds you'll be using to make the game. Extract the "
"archive and move the ``art/`` and ``fonts/`` directories to your project's "
"directory."
msgstr ""
"開啟 Godot 並建立一個新專案。接著，下載 :download:`dodge_assets.zip <files/"
"dodge_assets.zip>` 。這個檔案包含了接下來製作遊戲時會使用到的圖片與聲音檔。把"
"這些檔案解壓縮至專案資料夾中。"

msgid "C#"
msgstr "\\ C#"

msgid ""
"Ensure that you have the required dependencies to use C# in Godot. You need "
"the .NET Core 3.1 SDK, and an editor such as VS Code. See :ref:"
"`doc_c_sharp_setup`."
msgstr ""

#, fuzzy
msgid "GDNative C++"
msgstr "\\ GDNative / C++"

msgid ""
"Download :download:`dodge_assets_with_gdnative.zip <files/"
"dodge_assets_with_gdnative.zip>`. The archive contains the images and sounds "
"you'll be using to make the game. It also contains a starter GDNative "
"project including a ``SConstruct`` file, a ``dodge_the_creeps.gdnlib`` file, "
"a ``player.gdns`` file, and an ``entry.cpp`` file."
msgstr ""

msgid ""
"Ensure that you have the required dependencies to use GDNative C++. You need "
"a C++ compiler such as GCC or Clang or MSVC that supports C++14. On Windows "
"you can download Visual Studio 2019 and select the C++ workload. You also "
"need SCons to use the build system (the SConstruct file). Then you need to "
"`download the Godot C++ bindings <https://github.com/godotengine/godot-"
"cpp>`_ and place them in your project."
msgstr ""

#, fuzzy
msgid "Your project folder should look like this."
msgstr "現在場景看起來會這樣："

#, fuzzy
msgid ""
"This game is designed for portrait mode, so we need to adjust the size of "
"the game window. Click on *Project -> Project Settings* to open the project "
"settings window and in the left column, open the *Display -> Window* tab. "
"There, set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"這個遊戲的畫面設計成了垂直顯示，我們需要調整遊戲視窗的大小。點擊 [專案] -> "
"[專案設定] -> [Display] (顯示) -> [Window] (視窗)，接著把 [Width] (寬度) 設"
"為 ``480`` ，[Height] (高度) 設為 ``720`` 。"

#, fuzzy
msgid ""
"Also, scroll down to the bottom of the section and, under the \"Stretch\" "
"options, set ``Mode`` to \"2d\" and ``Aspect`` to \"keep\". This ensures "
"that the game scales consistently on different sized screens."
msgstr ""
"另外，在同一個地方，將 [Stretch] (拉伸) 選項中的 ``Mode`` (模式) 設為「2d」，"
"將 [Aspect] (比例) 設為「keep」(保持)。這樣就能確保遊戲在不同大小的螢幕上會保"
"持相同的比例。"

msgid "Organizing the project"
msgstr "組織專案"

msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene."
msgstr ""

#, fuzzy
msgid ""
"In a larger project, it might be useful to create folders to hold the "
"various scenes and their scripts, but for this relatively small game, you "
"can save your scenes and scripts in the project's root folder, identified by "
"``res://``. You can see your project folders in the FileSystem dock in the "
"lower left corner:"
msgstr ""
"在這個專案中，我們會使用三個獨立的場景： ``Player`` (玩家)、 ``Mob`` (怪物) "
"與 ``HUD`` ，我們會把這三個場景組合進遊戲的 ``Main`` (主要) 場景。在大型專案"
"中，或許開一些資料夾來儲存不同的場景與其對應的腳本會比較好，但對於相對小型的"
"遊戲，可以把場景跟腳本都保存在專案的根目錄下，也就是 ``res://`` 。可以在左下"
"角的檔案系統 Dock 中看到專案資料夾："

msgid ""
"With the project in place, we're ready to design the player scene in the "
"next lesson."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
