# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "The main game scene"
msgstr "測試場景"

msgid ""
"Now it's time to bring everything we did together into a playable game scene."
msgstr ""

#, fuzzy
msgid ""
"Create a new scene and add a :ref:`Node <class_Node>` named ``Main``. (The "
"reason we are using Node instead of Node2D is because this node will be a "
"container for handling game logic. It does not require 2D functionality "
"itself.)"
msgstr ""
"現在該把所有東西都組合在一起了。先建立一個新的場景，並新增一個名稱為 "
"``Main`` 的 :ref:`Node <class_Node>` 。請確認一下建立的是 Node，**而不是** "
"Node2D。點擊 [實體化] 按鈕並選擇稍早保存的 ``Player.tscn`` 。"

msgid ""
"Click the **Instance** button (represented by a chain link icon) and select "
"your saved ``Player.tscn``."
msgstr ""

msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"現在，將下列節點新增為 ``Main`` 的子節點，並他們的名稱如下（數值單位為秒）："

msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` （名稱為 ``MobTimer`` ）——用以控制怪物產生的頻率"

msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` （名稱為 ``ScoreTimer`` ）——用以每秒增加成績"

msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` （名稱為 ``StartTimer`` ）——用以在開始前延遲"

msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` （名為 ``StartPosition`` ）——用以判斷玩"
"家的起始位置"

msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "將每個 ``Timer`` 節點的 ``Wait Time`` （等待時間）屬性按照如下設定："

msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"另外，將 ``StartTimer`` 的 ``One Shot`` 屬性設為「開啟」，並將 "
"``StartPosition`` 節點的 ``Position`` 設為 ``(240, 450)`` 。"

msgid "Spawning mobs"
msgstr "產生怪物"

msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"Main 節點會產生新的怪物，而我們希望這些怪物出現在畫面邊緣上不同的位置。新增一"
"個 :ref:`Path2D <class_Path2D>` 節點作為 ``Main`` 的子節點，設定名稱為 "
"``MobPath`` 。之後當選擇 ``Path2D`` 的時候，編輯器上方會出現一些新的按鈕："

msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""
"選擇中間的按鈕 (「新增控制點」)，然後點擊顯示的轉角處來新增控制點並繪製路徑。"
"若要將控制點吸附到網格上，請開啟「使用網格吸附」與「使用吸附」選項，這兩個選"
"項在「鎖定」按鈕的左邊，顯示的圖示是一個磁鐵跟幾條相交的線。"

msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"請確定以 **順時針** 方向繪製路徑，不然的話怪物會 **向外** 產生而不是 **向內"
"** 產生！"

msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"在圖片內放置了點 ``4`` 以後，點擊「關閉曲線」按鈕，就可以完成繪製曲線。"

msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"現在路徑已經定義好了，接著我們新增一個 :ref:`PathFollow2D "
"<class_PathFollow2D>` 節點作為 ``MobPath`` 的子節點，並將其命名為 "
"``MobSpawnLocation`` 。這個節點會在移動的時候自動旋轉並跟著路徑移動，所以我們"
"可以用 MobPath 來在路徑上隨機選擇位置與方向。"

msgid "Your scene should look like this:"
msgstr "現在場景看起來會這樣："

msgid "Main script"
msgstr "Main（主要）腳本"

msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"為 ``Main`` 新增一個腳本。在腳本的頂部，我們會用 ``export (PackedScene)`` 來"
"選擇要實體化的 ``Mob`` 場景。"

msgid ""
"We also add a call to ``randomize()`` here so that the random number "
"generator generates different random numbers each time the game is run:"
msgstr ""

#, fuzzy
msgid ""
"Click the ``Main`` node and you will see the ``Mob Scene`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""
"點擊 ``Main`` 節點，接著可以在屬性面板中的「Script Variables」（腳本變數）中"
"看到 ``Mob`` 屬性。"

msgid "You can assign this property's value in two ways:"
msgstr "要為這個屬性賦值有兩個方法："

#, fuzzy
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" dock and drop it in the **Mob "
"Scene** property."
msgstr "從「檔案系統」面板中拖移 ``Mob.tscn`` 到 ``Mob`` 屬性來。"

msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr "點擊「[空]」旁邊的下拉箭頭，並選擇「載入」。接著選擇 ``Mob.tscn`` 。"

msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""
"接著，從場景 Dock 中選擇 ``Player`` 節點，然後前往側欄的節點 Dock 中。節選選"
"擇節點 Dock 中的 [訊號] 分頁。"

msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"接著應該可以看到所有 ``Player`` 節點的訊號。點兩下列表中的 ``hit`` 訊號 (或是"
"右鍵點擊然後選擇 [連接...])。這樣便可以打開訊號連接對話框。這裡我們要把新函式"
"命名為 ``game_over`` ，這個函式會負責處理遊戲結束時要做的事。在 [連接訊號] 視"
"窗中的 [Receiver 方法] 內輸入「game_over」，並點擊 [連接]。將下列程式碼加到新"
"建立的函式當中，接著新增一個 ``new_game`` 函式，負責在遊戲開始時搞定一切："

msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"現在，將各個 Timer 節點（ ``StartTimer`` 、 ``ScoreTimer`` 、與 "
"``MobTimer`` ）的 ``timeout()`` 訊號連接到 Main 腳本中。 ``StartTimer`` 會啟"
"動另外兩個 Timer。 ``ScoreTimer`` 會以 1 為單位增加分數。"

#, fuzzy
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position. When "
"we spawn a mob, we'll pick a random value between ``150.0`` and ``250.0`` "
"for how fast each mob will move (it would be boring if they were all moving "
"at the same speed)."
msgstr ""
"接著我們在 ``_on_MobTimer_timeout()`` 中建立怪物的實體，並沿著 ``Path2D`` 來"
"隨機選擇一個起始位置，然後讓怪物開始移動。在跟隨路徑時 ``PathFollow2D`` 節點"
"會自動旋轉，所以我們在使用這個節點來選擇怪物的位置的同時也會一起選擇方向。"

msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""
"需要注意的是，新建立的節點必須要使用 ``add_child()`` 來將節點新增到場景中。"

#, fuzzy
msgid ""
"Why ``PI``? In functions requiring angles, Godot uses *radians*, not "
"degrees. Pi represents a half turn in radians, about ``3.1415`` (there is "
"also ``TAU`` which is equal to ``2 * PI``). If you're more comfortable "
"working with degrees, you'll need to use the ``deg2rad()`` and ``rad2deg()`` "
"functions to convert between the two."
msgstr ""
"為什麼要使用 ``PI`` （圓周率）呢？在需要角度的函式中，GDScript 會使用 **弧度"
"** 而不是角度。如果你比較喜歡用角度的話，則需要使用 ``deg2rad()`` （角度轉弧"
"度）與 ``rad2deg()`` （弧度轉角度）兩個函式來轉換弧度與角度。"

msgid "Testing the scene"
msgstr "測試場景"

#, fuzzy
msgid ""
"Let's test the scene to make sure everything is working. Add this "
"``new_game`` call to ``_ready()``:"
msgstr ""
"來測試一下場景，看看是不是所有東西都正常了。將下面這段程式碼新增至 "
"``_ready()`` 中："

msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""
"同時，將 ``Main`` 設為「主要場景」——也就是遊戲啟動後會自動執行的場景。點擊"
"「執行」按鈕，當提示框出現後選擇 ``Main.tscn`` 。"

msgid ""
"If you had already set another scene as the \"Main Scene\", you can right "
"click ``Main.tscn`` in the FileSystem dock and select \"Set As Main Scene\"."
msgstr ""

msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""
"現在應該可以到處移動玩家了，並會看到怪物產生出來。玩家在被怪物撞到後會消失。"

msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""
"確定好了所有東西都正常後，將呼叫 ``new_game()`` 的程式碼從 ``_ready()`` 裡刪"
"除。"

msgid ""
"What's our game lacking? Some user interface. In the next lesson, we'll add "
"a title screen and display the player's score."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
