# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Universal Windows Platform"
msgstr "為通用 Windows 平台進行編譯"

msgid ""
"This page describes how to compile UWP export template binaries from source. "
"If you're looking to export your project to UWP instead, read :ref:"
"`doc_exporting_for_uwp`."
msgstr ""

msgid "Requirements"
msgstr "系統需求"

msgid "SCons 3.0+ (see :ref:`doc_compiling_for_windows` for more details)."
msgstr "SCons 3.0+ (詳情請參考 :ref:`doc_compiling_for_windows`)。"

msgid ""
"Visual Studio 2017 or later. See :ref:`doc_compiling_for_windows` about the "
"caveats of installing it and the various prompts."
msgstr ""
"Visual Studio 2017 或更新版本。有關安裝須知以及其他提示，請參考 :ref:"
"`doc_compiling_for_windows`。"

msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr "Windows 10 SDK (可在 Visual Studio 安裝中選擇)。"

msgid ""
"`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` "
"(default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""
"`ANGLE 原始碼 <https://github.com/Microsoft/angle>`__ 。請使用 ``ms_master`` "
"(預設) 分支。請將其放置於路徑中不含空格的位置以避免發生問題。"

msgid ""
"The ANGLE repo by Microsoft has been discontinued and the ``ms_master`` "
"branch has been cleared out."
msgstr "Microsoft 提供的 ANGLE 已停止維護，而 ``ms_master`` 分支已被刪除。"

msgid ""
"As a temporary workaround however, it is still possible to download an older "
"state of the source code via commit `c61d048 <https://github.com/microsoft/"
"angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__."
msgstr ""
"但有一個臨時解決方案，即通過 Commit `c61d048 <https://github.com/microsoft/"
"angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__ 來下載舊版本的原始"
"碼。"

msgid ""
"This page will eventually be updated in the future to reflect the new build "
"instructions."
msgstr "本頁之後將會更新以提供新的建置說明。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有關配合 Godot 使用 SCons 的一般說明，請參考 :ref:"
"`doc_introduction_to_the_buildsystem` 。"

msgid "Compiling"
msgstr "編譯"

msgid ""
"You need to open a proper Visual Studio prompt for the target architecture "
"you want to build. Check :ref:`doc_compiling_for_windows` to see how these "
"prompts work."
msgstr ""
"需要開啟用於建置目標架構的 Visual Studio 提示字元。將參考 :ref:"
"`doc_compiling_for_windows` 以瞭解提示字元如何使用。"

msgid ""
"There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) "
"and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with "
"``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""
"UWP 有三種目標架構：x86 (32 位元), x64 (64 位元) 與 ARM (32 位元)。ARM 結構可"
"以使用 ``x86_arm`` 或 ``amd64_arm`` 作為 ``vcvarsall.bat`` 的引數來設定環境變"
"數。"

msgid ""
"Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE "
"source code. The build process will also build ANGLE to produce the required "
"DLLs for the selected architecture."
msgstr ""
"將 ``ANGLE_SRC_PATH`` 設為所下載的 ANGLE 原始碼的資料夾。建置過程同時也會建"
"置 ANGLE 來產生選擇架構所需的 DLL。"

msgid ""
"Once you're set, run the SCons command similarly to the other platforms::"
msgstr "完成設定之後，即可以與其他平台類似的方式執行 SCons 指令："

msgid "Creating UWP export templates"
msgstr "建立 UWP 匯出樣板"

msgid ""
"To export using the editor you need to properly build package the templates. "
"You need all three architectures with ``debug`` and ``release`` templates to "
"be able to export."
msgstr ""
"要在編輯器中匯出，需要正確地建置套件與樣板。必須要有 ``debug`` 與 "
"``release`` 的所有三種架構才能匯出。"

msgid ""
"Open the command prompt for one architecture and run SCons twice (once for "
"each target)::"
msgstr "開其中一個架構的啟命令提示字元並執行 SCons 兩次 (每個目標各一次)："

msgid "Repeat for the other architectures."
msgstr "對其他架構重複相同的過程。"

msgid ""
"In the end your ``bin`` folder will have the ``.exe`` binaries with a name "
"like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/"
"arch)."
msgstr ""
"最後，``bin`` 資料夾中會有幾個 ``.exe`` 二進位檔，名稱類似 ``godot.uwp.opt."
"debug.32.x86.exe`` (依據建置目標與架構而有所不同)。"

msgid ""
"Copy one of these to ``misc/dist/uwp_template`` inside the Godot source "
"folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, "
"under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, "
"``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, "
"putting them along with the executable."
msgstr ""
"將其中一個檔案複製到 Godot 原始碼中的 ``misc/dist/uwp_template`` ，然後將該二"
"進位檔案重新命名為 ``godot.uwp.exe`` 。然後從 ANGLE 的原始碼中，找到 "
"``winrt/10/src/Release_%arch%`` (其中 ``%arch%`` 可能是 ``Win32``, ``x64`` "
"或 ``ARM``) 下的 ``libEGL.dll`` 與 ``libGLESv2.dll`` ，與剛才的執行檔放在一"
"起。"

msgid ""
"Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting "
"Zip according to the target/architecture of the template::"
msgstr ""
"將 ``uwp_template`` 中的檔案新增至 ZIP 檔中。依據樣板的建置目標與架構將產生"
"的 ZIP 檔重新命名："

msgid ""
"Move those templates to the ``[versionstring]\\templates`` folder in Godot "
"settings path, where `versionstring` is the version of Godot you have "
"compiled the export templates for - e.g. `3.0.alpha` for the alpha version "
"of Godot 3. If you don't want to replace the templates, you can set the "
"\"Custom Package\" property in the export window."
msgstr ""
"將這幾個樣板移至 Godot 設定路徑的 ``[版本]\\templates`` 資料夾中，其中， **版"
"本** 是編譯匯出樣板要用的 Godot 版本，如， ``3.0.alpha`` 代表 Alpha 版的 "
"Godot 3。若不想取代樣板，則可以在匯出視窗中設定「自定套件」屬性。"

msgid "Running UWP apps with Visual Studio"
msgstr "通過 Visual Studio 執行 UWP 應用程式"

msgid ""
"If you want to debug the UWP port or simply run your apps without packaging "
"and signing, you can deploy and launch them using Visual Studio. It might be "
"the easiest way if you are testing on a device such as a Windows Phone or an "
"Xbox One."
msgstr ""
"若想對 UWP 版本進行除錯或想在尚未打包與簽名的狀況下執行應用程式，可以通過 "
"Visual Studio 來部署與執行。如果你使用 Windows Phone 或 Xbox One 等裝置來測試"
"的話，該方法可能是最簡單的。"

msgid ""
"Within the ANGLE source folder, open ``templates`` and double-click the "
"``install.bat`` script file. This will install the Visual Studio project "
"templates for ANGLE apps."
msgstr ""
"在 ANGLE 原始碼資料夾中，開啟 ``templates`` 然後點兩下 ``install.bat`` 批次"
"檔。該批次檔會安裝用於 ANGLE 應用程式的 Visual Studio 專案樣板。"

msgid ""
"If you have not built Godot yet, open the ``winrt/10/src/angle.sln`` "
"solution from the ANGLE source and build it to Release/Win32 target. You may "
"also need to build it for ARM if you plan to run on a device. You can also "
"use MSBuild if you're comfortable with the command line."
msgstr ""
"若尚未建置 Godot，請開啟 ANGLE 原始碼中的 ``winrt/10/src/angle.sln`` 解決方"
"案，然後建置 Release/Win32 建置目標。如果有要在裝置上執行的話，則也需要同時建"
"置 ARM 版本。如果熟悉命令行的話，也可以使用 MSBuild。"

msgid ""
"Create a new Windows App project using the \"App for OpenGL ES (Windows "
"Universal)\" project template, which can be found under the ``Visual C++/"
"Windows/Universal`` category."
msgstr ""
"通過「App for OpenGL ES (Windows Universal)」專案樣板來建立一個新的 Windows "
"App，該樣板在 ``Visual C++/Windows/Universal`` 分類下。"

msgid ""
"This is a base project with the ANGLE dependencies already set up. However, "
"by default it picks the debug version of the DLLs which usually have poor "
"performance. So in the \"Binaries\" filter, click in each of the DLLs there "
"and in the \"Properties\" window and change the relative path from "
"``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""
"該基礎專案已經設定好了 ANGLE 相依性。但，預設情況下該樣板會使用除錯版的 DLL，"
"這些 DLL 的效能通常比較差。因此，請到「Binaries」篩選器，點擊其中的各個 DLL，"
"然後在「Properties」視窗中將相對路徑從 ``Debug_Win32`` 更改為 "
"``Release_Win32`` (或是用於裝置時改為 ``Release_ARM``)。"

msgid ""
"In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to "
"the Godot executable for UWP you have. In the \"Properties\" window, set "
"\"Content\" to ``True`` so it's included in the project."
msgstr ""
"在同樣的「Binaries」篩選器中，選擇「Add > Existing Item」，然後將其指向用於 "
"UWP 的 Godot 執行檔。在「Properties」視窗中，將「Content」設為 ``True`` 來讓"
"其包含在專案中。"

msgid ""
"Right-click the ``Package.appxmanifest`` file and select \"Open With... > "
"XML (Text) Editor\". In the ``Package/Applications/Application`` element, "
"replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to "
"``godot.uwp.exe`` (or whatever your Godot executable is called). Also change "
"the ``EntryPoint`` attribute to ``GodotUWP.App``. This will ensure that the "
"Godot executable is correctly called when the app starts."
msgstr ""
"右鍵點擊 ``Package.appxmanifest`` 檔案，然後選擇「Open With... > XML (Text) "
"Editor」。在 ``Package/Applications/Application`` 元素中，將 ``Executable`` "
"屬性的 ``$targetnametoken$.exe`` 更改為 ``godot.uwp.exe`` (即 Godot 執行檔的"
"名稱)。另外，也請將 ``EntryPoint`` 屬性更改為 ``GodotUWP.App`` 。這樣一來即可"
"確保在應用程式開始時會正確呼叫 Godot 執行檔。"

msgid ""
"Create a folder (*not* a filter) called ``game`` in your Visual Studio "
"project folder and there you can put either a ``data.pck`` file or your "
"Godot project files. After that, make sure to include it all with the \"Add "
"> Existing Item\" command and set their \"Content\" property to ``True`` so "
"they're copied to the app."
msgstr ""
"在 Visual Studio 專案資料夾中，建立一個名為 ``game`` 的新資料夾 (**不是** 篩"
"選器)。在該資料夾中，可以放置 ``data.pck`` 檔或 Godot 專案檔。之後，請確保在"
"「Add > Existing Item」指令中包含這個資料夾，並將「Content」屬性設為 "
"``True`` ，以確保將這個資料夾複製至應用程式中。"

msgid ""
"To ease the workflow, you can open the \"Solution Properties\" and in the "
"\"Configuration\" section untick the \"Build\" option for the app. You still "
"have to build it at least once to generate some needed files, you can do so "
"by right-clicking the project (*not* the solution) in the \"Solution "
"Explorer\" and selecting \"Build\"."
msgstr ""
"為了簡化工作流程，可以開啟「Solution Properties」然後取消選取"
"「Configuration」中的「Build」選項。然後還是必須要建置一次應用程式來產生一些"
"必須的檔案。可以在「Solution Explorer」中右鍵點擊專案 (**不是** 解決方案) 然"
"後選擇「Build」來建置。"

msgid ""
"Now you can just run the project and your app should open. You can also use "
"the \"Start Without Debugging\" option from the \"Debug\" menu (or press :"
"kbd:`Ctrl + F5`) to make it launch faster."
msgstr ""
"之後即可直接執行專案，然後應該會開啟應用程式。也可以將「Debug」選單中選擇"
"「Start Without Debugging」(或點擊 :kbd:`Ctrl + F5`) 來更快開啟。"

msgid "Translation status"
msgstr "翻譯狀態"
