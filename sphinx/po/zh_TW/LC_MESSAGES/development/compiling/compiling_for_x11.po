# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr "為 X11 進行編譯 (Linux, \\*BSD)"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""

msgid "Requirements"
msgstr "系統需求"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr "若要在 Linux 或其他各種 Unix 下進行編譯，必須滿足下列條件："

msgid "GCC 7+ or Clang 6+."
msgstr "GCC 7+ 或 Clang 6+。"

msgid "Python 3.5+."
msgstr "Python 3.5+。"

msgid ""
"SCons 3.0+ build system. If your distribution uses Python 2 by default, or "
"you are using a version of SCons prior to 3.1.2, you will need to change the "
"version of Python that SCons uses by changing the shebang (the first line) "
"of the SCons script file to ``#! /usr/bin/python3``. Use the command ``which "
"scons`` to find the location of the SCons script file."
msgstr ""
"SCons 3.0+ 建置系統。若使用預設為 Python 2 的發行版，或使用 3.1.2 版以前的 "
"SCons，則必須更改 SCons 腳本檔的 Shebang (第一行) 為 ``#!/usr/bin/python3`` "
"來更改 SCons 使用的 Python 版本。可使用 ``which scons`` 指令來找到 SCons 腳本"
"的位置。"

msgid "pkg-config (used to detect the dependencies below)."
msgstr "pkg-config (用於偵測下方的相依性套件)。"

msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries."
msgstr "X11, Xcursor, Xinerama, Xi 與 XRandR 開發函式庫。"

msgid "MesaGL development libraries."
msgstr "MesaGL 開發函式庫。"

msgid "ALSA development libraries."
msgstr "ALSA 開發函式庫。"

msgid "PulseAudio development libraries."
msgstr "PulseAudio 開發函式庫。"

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr "**可選** - libudev (使用 ``udev=yes`` 進行建置)。"

msgid "*Optional* - yasm (for WebM SIMD optimizations)."
msgstr "**可選** - yasm (用於最佳化 WebM SIMD)。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有關配合 Godot 使用 SCons 的一般說明，請參考 :ref:"
"`doc_introduction_to_the_buildsystem` 。"

msgid "Distro-specific one-liners"
msgstr "用於各個發行版的單行安裝程式"

msgid "**Alpine Linux**"
msgstr "\\ **Alpine Linux**"

msgid "**Arch Linux**"
msgstr "\\ **Arch Linux**"

msgid "**Debian** / **Ubuntu**"
msgstr "\\ **Debian** / **Ubuntu**"

msgid "**Fedora**"
msgstr "\\ **Fedora**"

msgid "**FreeBSD**"
msgstr "\\ **FreeBSD**"

msgid "**Gentoo**"
msgstr "\\ **Gentoo**"

msgid "**Mageia**"
msgstr "\\ **Mageia**"

msgid "**OpenBSD**"
msgstr "\\ **OpenBSD**"

msgid "**openSUSE**"
msgstr "\\ **openSUSE**"

msgid "**NetBSD**"
msgstr "\\ **NetBSD**"

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr "若要支援音訊，則可選擇性地安裝 ``pulseaudio`` 。"

msgid "**Solus**"
msgstr "\\ **Solus**"

msgid "Compiling"
msgstr "編譯"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr "開啟終端機，移至 Godot 原始碼的根目錄然後輸入："

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""
"若沒有出現什麼問題的話，最終產生的二進位可執行檔會被放在「bin」子資料夾中。該"
"執行檔包含了整個 Godot 遊戲引擎，且可不依賴任何相依性套件執行。執行該檔案會開"
"啟專案管理員。"

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr "若想使用 Clang 而不是 GCC 來編譯的話，請使用這個指令："

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr "在 OpenBSD 上似乎需要使用 Clang，否則無法正確建置字體。"

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""
"若是要為正式環境編譯 Godot，則可以通過加上 ``target=release_debug`` SCons 選"
"項來讓最終產生的可執行檔更小且更快速。"

#, fuzzy
msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""
"若使用 GCC 來編譯 Godot，則可以通過往 SCons 新增 ``use_lto=yes`` 選項來讓二進"
"位可執行檔更小更快。由於連結時期最佳化是很消耗記憶體的過程，所以在編譯時會需"
"要至少有 3GB 的可用記憶體。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"若想在客製化建置上使用與 Godot 官方釋出版本不同的編輯器設定，可以通過在 "
"``bin/`` 資料夾中建立檔名為 ``._sc_`` 或 ``_sc_`` 的檔案來開啟 :ref:"
"`doc_data_paths_self_contained_mode` 。"

msgid "Compiling a headless/server build"
msgstr "編譯無周邊版本與伺服器版本"

msgid ""
"To compile a *headless* build which provides editor functionality to export "
"projects in an automated manner, use::"
msgstr "若要編譯用於以編輯器功能來自動化匯出專案的 **無周邊** 版本，請使用："

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr "若要編譯可執行專屬遊戲伺服器的 **伺服器** 版本，請使用："

msgid "Building export templates"
msgstr "建置匯出樣板"

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""
"Linux 二進位執行檔通常無法在比用來建置該執行檔還要舊的發行版上執行。若想提供"
"能在多數發行版上執行的二進位執行檔，請使用較舊的發行版來建置，如 Ubuntu "
"16.04。可以使用虛擬機或容器來設定一個適合的建置環境。"

msgid ""
"To build X11 (Linux, \\*BSD) export templates, run the build system with the "
"following parameters:"
msgstr "若要建置 X11 (Linux, \\*BSD) 匯出樣板，請使用下列參數來執行建置系統："

msgid "(32 bits)"
msgstr "(32 位元)"

msgid "(64 bits)"
msgstr "(64 位元)"

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""
"請注意，可能無法為與目前宿主機環境不同的位元 (64/32) 進行交叉編譯時，有可能會"
"需要 Chroot 環境。"

msgid ""
"To create standard export templates, the resulting files must be copied to:"
msgstr "要建立標準的匯出樣板，則必須將產生的檔案複製至："

msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux X11\" by "
"Godot):"
msgstr "並將這些檔案如下命名 (在 Godot 中，\\*BSD 被視為「Linux X11」)："

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""
"但，若你正在撰寫客製化模組或自定 C++ 程式碼，則可能會需要在此將該二進位執行檔"
"設定為自定匯出樣板："

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""
"這種情況下甚至不需要複製檔案，只需要將這些檔案參照到 Godot 原始碼目錄的 "
"``bin/`` 資料夾下即可。這樣下次建置時，就會自動參照到自定樣板。"

msgid "Using Clang and LLD for faster development"
msgstr "使用 Clang 與 LLD 來更快速地開發"

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""
"也可以使用 Clang 與 LLD 來建置 Godot。使用 Clang 與 LLD 比起預設的 GCC + GNU "
"ld 有兩個好處："

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""
"LLD 與 GNU ld 或 gold 比起來，連結速度明顯快很多。這樣就可以迭代地更快。"

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr "Clang 比起 GCC，提供的錯誤訊息通常更有用。"

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""
"要使用 Clang 與 LLD，請先使用發行版的套件管理員來安裝 Clang 與 ``lld`` 套件，"
"然後使用下列 SCons 指令："

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""
"雖然我們依然建議正式版本使用 GCC 來建置，因為 GCC 可以配合連結時期最佳化來編"
"譯，產生的二進位執行檔也更小更快。"

#, fuzzy
msgid "Using Pyston for faster development"
msgstr "使用 Clang 與 LLD 來更快速地開發"

msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""

msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""

msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""

msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""

msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""

msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""

msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
