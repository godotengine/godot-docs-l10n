# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom Godot servers"
msgstr "自定 Godot 伺服器"

msgid "Introduction"
msgstr "簡介"

msgid ""
"Godot implements multi-threading as servers. Servers are daemons which "
"manage data, process it, and push the result. Servers implement the mediator "
"pattern which interprets resource ID and process data for the engine and "
"other modules. In addition, the server claims ownership for its RID "
"allocations."
msgstr ""
"Godot 以伺服器來實作多執行緒。伺服器是管理資料、處理資料與推送回處理結果的精"
"靈 (Daemon)。伺服器為引擎與其他模組實作了可解析資源 ID 與處理資料的中介者模"
"式。此外，伺服器也負責聲明其 RID 分配的擁有權。"

msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to :ref:`doc_custom_modules_in_c++`."
msgstr ""
"本指南假設讀者已瞭解如何製作 C++ 模組與 Godot 資料型別。否則，請先參閱 :ref:"
"`doc_custom_modules_in_c++` 。"

msgid "References"
msgstr "參照"

msgid ""
"`Why does Godot use servers and RIDs? <https://godotengine.org/article/why-"
"does-godot-use-servers-and-rids>`__"
msgstr ""
"`為什麼 Godot 要使用伺服器與 RID？ (英語) <https://godotengine.org/article/"
"why-does-godot-use-servers-and-rids>`__"

msgid "`Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`__"
msgstr ""
"`單例模式 <https://zh.wikipedia.org/zh-tw/"
"%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F>`__"

msgid "`Mediator pattern <https://en.wikipedia.org/wiki/Mediator_pattern>`__"
msgstr ""
"`中介者模式 <https://zh.wikipedia.org/zh-tw/"
"%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F>`__"

msgid "What for?"
msgstr "可以做什麼？"

msgid "Adding artificial intelligence."
msgstr "新增人工智慧。"

msgid "Adding custom asynchronous threads."
msgstr "新增自定非同步執行緒。"

msgid "Adding support for a new input device."
msgstr "新增新輸入裝置的支援。"

msgid "Adding writing threads."
msgstr "新增寫入執行緒。"

msgid "Adding a custom VoIP protocol."
msgstr "新增自定 VoIP 協定。"

msgid "And more..."
msgstr "其他…"

msgid "Creating a Godot server"
msgstr "建立 Godot 伺服器"

msgid ""
"At minimum, a server must have a static instance, a sleep timer, a thread "
"loop, an initialization state and a cleanup procedure."
msgstr ""
"伺服器最少需要由一個靜態實體、睡眠計時器、執行緒循環、初始狀態與清理過程。"

msgid "Custom managed resource data"
msgstr "自定受管理的資源資料"

msgid ""
"Godot servers implement a mediator pattern. All data types inherit "
"``RID_Data``. ``RID_Owner<MyRID_Data>`` owns the object when ``make_rid`` is "
"called. During debug mode only, RID_Owner maintains a list of RIDs. In "
"practice, RIDs are similar to writing object-oriented C code."
msgstr ""
"Godot 的伺服器實作了中介者模式。所有自 ``RID_Data``."
"``RID_Owner<MyRID_Data>`` 繼承來的資料型別在被呼叫 ``make_rid`` 時都擁有該物"
"件。而在除錯模式時，RID_Owner 會維護一組由 RID 組成的列表。實務上來說，RID 與"
"撰寫物件導向的 C 語言程式類似。"

msgid ":ref:`RID<class_rid>`"
msgstr "\\ :ref:`RID<class_rid>`"

#, fuzzy
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""
"\\ `core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid."
"h>`__"

msgid "Registering the class in GDScript"
msgstr "在 GDScript 中註冊該類別"

msgid ""
"Servers are allocated in ``register_types.cpp``. The constructor sets the "
"static instance and ``init()`` creates the managed thread; "
"``unregister_types.cpp`` cleans up the server."
msgstr ""
"伺服器被分配在 ``register_types.cpp`` 中。建構函式會設定靜態實體，而 "
"``init()`` 則會建立受管理的執行緒。 ``unregister_types.cpp`` 會清理伺服器。"

msgid ""
"Since a Godot server class creates an instance and binds it to a static "
"singleton, binding the class might not reference the correct instance. "
"Therefore, a dummy class must be created to reference the proper Godot "
"server."
msgstr ""
"由於 Godot 的伺服器會建立實體並將這個實體繫結到靜態單例上，繫結該類別可能不會"
"被參照到正確的實體上。因此，必須要先建立一個虛擬的 (Dummy) 類別來參照到正確"
"的 Godot 伺服器上。"

msgid ""
"In ``register_server_types()``, ``Engine::get_singleton()->add_singleton`` "
"is used to register the dummy class in GDScript."
msgstr ""
"在 ``register_server_types()`` 中，使用 ``Engine::get_singleton()-"
">add_singleton`` 來在 GDScript 註冊該虛擬類別。"

msgid ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"
msgstr ""
"\\ `servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "Bind methods"
msgstr "繫結方法"

msgid ""
"The dummy class binds singleton methods to GDScript. In most cases, the "
"dummy class methods wraps around."
msgstr ""
"該虛擬類別會將單例方法繫結到 GDScript 上。在大多數情況下，該單例類別方法會被"
"封裝在內。"

msgid "Binding Signals"
msgstr "繫結訊號"

msgid ""
"It is possible to emit signals to GDScript by calling the GDScript dummy "
"object."
msgstr "可以通過呼叫 GDScript 虛擬物件來將訊號發送到 GDScript。"

msgid "MessageQueue"
msgstr "\\ MessageQueue"

msgid ""
"In order to send commands into SceneTree, MessageQueue is a thread-safe "
"buffer to queue set and call methods for other threads. To queue a command, "
"obtain the target object RID and use either ``push_call``, ``push_set``, or "
"``push_notification`` to execute the desired behavior. The queue will be "
"flushed whenever either ``SceneTree::idle`` or ``SceneTree::iteration`` is "
"executed."
msgstr ""
"若要傳送指令給 SceneTree，則 MessageQueue 時能設定與呼叫函式並佇列到其他執行"
"緒中的一個執行緒安全的緩衝區。要將指令放進佇列，請先取得目標物件的 RID，然後"
"使用 ``push_call``, ``push_set`` 或 ``push_notification`` 其中一個方法來執行"
"所需的行為。佇列會在 ``SceneTree::idle`` 或 ``SceneTree::iteration`` 被執行時"
"被清空。"

msgid "References:"
msgstr "參考資料："

#, fuzzy
msgid ""
"`core/message_queue.cpp <https://github.com/godotengine/godot/blob/3.x/core/"
"message_queue.cpp>`__"
msgstr ""
"\\ `core/message_queue.cpp <https://github.com/godotengine/godot/blob/master/"
"core/message_queue.cpp>`__"

msgid "Summing it up"
msgstr "總結"

msgid "Here is the GDScript sample code:"
msgstr "下列為 GDScript 範例程式碼："

msgid "Notes"
msgstr "請注意"

msgid ""
"The actual `Hilbert Hotel <https://en.wikipedia.org/wiki/"
"Hilbert%27s_paradox_of_the_Grand_Hotel>`__ is impossible."
msgstr ""
"實際上的 `希伯特旅館 (Hilbert Hotel) <https://zh.wikipedia.org/zh-tw/"
"%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E6%97%85%E9%A6%86%E6%82%96%E8%AE%BA>` 是"
"不可能達成的。"

msgid "Connecting signal example code is pretty hacky."
msgstr "連結訊號的範例程式碼非常邪門。"

msgid "Translation status"
msgstr "翻譯狀態"
