# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "Bisect 迴歸"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"Bisect 是一種在軟體中找出迴歸 (Regression) 的方法。當在 `GitHub 上的 Godot 儲"
"存庫 <https://github.com/godotengine/godot>`__ 上回報 Bug 後，可能會有貢獻者"
"要求你 **Bisect** 該問題。通過 Bisect 便能讓貢獻者進一步瞭解是哪個 Commit 造"
"成該問題的，進而更快修正 Bug。大家會很感謝你的努力 :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr "本指南解釋如何通過 Bisect 來找出迴歸。"

msgid "What is bisecting?"
msgstr "什麼是 Bisect？"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Godot 開發人員使用 `Git <https://git-scm.com/>`__ 版本控制系統。在 Git 的脈絡"
"下，Bisect 是一個手動進行 `二分搜尋 <https://zh.wikipedia.org/zh-tw/"
"%E4%BA%8C%E5%88%86%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95>`__ 來判斷迴"
"歸是何時產生的一個過程。雖然通常 Bisect 是用來找出 Bug 的，但也可以用來找出如"
"效能迴歸等其他未預期的改動。"

msgid "Using official builds to speed up bisecting"
msgstr "使用官方建置來加快 Bisect"

msgid ""
"Before using Git's ``bisect`` command, we strongly recommend trying to "
"reproduce the bug with an older (or newer) official release. This greatly "
"reduces the range of commits that potentially need to be built from source "
"and tested. You can find binaries of official releases, as well as alphas, "
"betas, and release candidates `here <https://downloads.tuxfamily.org/"
"godotengine/>`__."
msgstr ""
"在使用 Git 的 ``bisect`` 指令前，我們強烈建議試著通過較舊版本 (或較新) 的官方"
"釋出版本來嘗試重現 Bug。這樣一來可以大幅降低可能需要用來從原始碼建置並進行測"
"試的 Commit 範圍。可以在 `此處 <https://downloads.tuxfamily.org/godotengine/"
">`__ 找到官方釋出版本、Alpha 版、RC 版的二進位檔。"

msgid ""
"For example, if you've reported a bug against Godot 3.2, you should first "
"try to reproduce the bug in Godot 3.1 (not a patch release, see below for "
"the reason). If the bug doesn't occur there, try to reproduce it in Godot "
"3.2 *beta 1* (which is roughly in the middle of all test builds available). "
"If you can't reproduce the bug with Godot 3.2 beta 1, then try newer betas "
"and RC builds. If you do manage to reproduce the bug with Godot 3.2 beta 1, "
"then try older alpha builds."
msgstr ""
"舉例來說，如果我們要回報 Godot 3.2 的 Bug，則應該先試著在 Godot 3.1 中復現該 "
"Bug (不適用修正版本，原因見後方)。若該 Bug 沒有在 Godot 3.1 中出現，則請試著"
"在 Godot 3.2 **Beta 1** 中 (也就是大約在所有測試版建置的中間) 嘗試復現。若沒"
"辦法在 Godot 3.2 Beta 1 中復現，則請試試較新版本的 Beta 與 RC 建置。如果能成"
"功在 Godot 3.2 Beta 1 中復現 Bug，則請接著試試較舊版本的 Alpha 建置。"

msgid ""
"For bisecting regressions, don't use patch releases such as Godot 3.1.2. "
"Instead, use the minor version's first release like Godot 3.1. This is "
"because patch releases are built from a separate *stable branch*. This kind "
"of branch doesn't follow the rest of Godot's development, which is done in "
"the ``master`` branch."
msgstr ""
"進行 Bisect 迴歸時，請不要使用如 Godot 3.1.2 這樣的修正釋出，請先使用主版本的"
"釋出，如 Godot 3.1.這是因為，修正版本是在獨立的 **穩定版分支** 上建置的。這種"
"分支並不會跟隨其他 Godot 在 ``master`` 分支中所進行的開發。"

msgid "The Git bisect command"
msgstr "Git 的 Bisect 指令"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"如果在上述測試過程中找到了沒有出現該 Bug 的建置，則可以開始 Bisect 迴歸。Git "
"版本控制系統提供了一個內建指令來進行 Bisect 迴歸： ``git bisect`` 。有了這個"
"指令便可將此一過程半自動化，只需要建置引擎並嘗試重現該 Bug 即可。"

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"在 Bisect 迴歸前，需要先建置用於從原始碼編譯 Godot 的建置環境。要設定建置環"
"境，請參考與建置目標平台對應的 :ref:`編譯 <toc-devel-compiling>` 頁面。(從原"
"始碼編譯 Godot 並不需要 C++ 程式設計知識。)"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"請主義，在較慢的硬體上編譯 Godot 可能會花費一些時間 (在較慢的雙核 CPU 上，每"
"個建置可能會花費高達一個小時)。這表示，整個過程可能會耗費數個小時。如果你使用"
"較慢的硬體，則你可以停在這裡，並在 GitHub Issue 上回報你在「Bisect 前」的結果"
"來讓其他貢獻者能從此處繼續進行 Bisect。"

msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""
"要開始 Bisect，首先必須先判斷「壞的」與「好的」建置的 Commit 雜湊 (識別項)。"
"「壞的」代表會出現 Bug 的建置，而「好的」則代表不會出現該 Bug 的版本。如果使"
"用預釋出的建置來當作「好的」或「壞的」建置，則請瀏覽 `下載鏡像 <https://"
"downloads.tuxfamily.org/godotengine/>`__ 頁面，前往包含你下載的預釋出版本的資"
"料夾內，然後找到 ``README.txt`` 檔案。該檔案內有寫上 Commit 雜湊。"

msgid ""
"If you're using a stable release as the \"good\" or \"bad\" build, use one "
"of the following commit hashes depending on the version:"
msgstr ""
"如果你使用穩定版來作為「好的」或「壞的」建置，則請依據版本來使用下列其一 "
"Commit 雜湊："

msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash."
msgstr ""
"如果要參照 master 分支的最新狀態，則可以使用 ``master`` 來代替 Commit 雜湊。"

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`使用 Git 來取得 Godot 的原始碼 <doc_getting_source>` 。完成後，在終端機"
"視窗內使用 ``cd`` 來移動至 Godot 儲存庫資料夾內，然後輸入下列指令："

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr "編譯 Godot。此處假設你已經設定好了建置環境："

msgid ""
"Since building Godot takes a while, you want to dedicate as many CPU threads "
"as possible to the task. This is what the ``-j`` parameter does. Here, the "
"command assigns 4 CPU threads to compiling Godot."
msgstr ""
"由於建置 Godot 會需要一段時間，所以你可能會想儘量使用多個 CPU 執行緒來進行建"
"置。``-j`` 參數就是用來指定執行緒數量的。在此例中，該指令指定使用 4 個 CPU 執"
"行緒來編譯 Godot。"

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr "執行 ``bin/`` 資料夾內的二進位檔，然後嘗試復現 Bug。"

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr "若該建置中 **依然** 會遇到 Bug，則請執行下列指令："

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr "如果該建置 **沒有** 出現 Bug，請執行下列指令："

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"輸入上述其中一個指令後，Git 會切換到不同的 Commit 上。接著應再次建置 Godot、"
"嘗試復現 Bug、然後依據結果輸入 ``git bisect good`` 或 ``git bisect bad`` 。這"
"個過程會需要重複多次。Commit 的範圍越大、就需要越多步驟。通常需要 5 到 10 個"
"步驟才足夠找出大多數的迴歸；Git 會提示還剩下幾個步驟 (最糟情況下的剩餘步驟)。"

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"完成了足夠的步驟後，Git 會顯示該迴歸出現的 Commit 雜湊。請將該 Commit 雜湊寫"
"在所 Bisect 的 GitHub Issue 留言上。這樣有助於解決該問題。再次感謝你參與貢獻 "
"Godot :)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-scm."
"com/docs/git-bisect>`__."
msgstr ""
"有關 ``git bisect`` 的完整說明文件可以參考 `此處 <https://git-scm.com/docs/"
"git-bisect>`__ 。"

msgid "Translation status"
msgstr "翻譯狀態"
