# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Exporting for dedicated servers"
msgstr "為專用伺服器匯出"

msgid ""
"If you want to run a dedicated server for your project on a machine that "
"doesn't have a GPU or display server available, you'll need to use a server "
"build of Godot."
msgstr ""
"若想以獨立伺服器的模式在沒有 GPU 或顯示伺服器的機器上執行專案，則必須要使用伺"
"服器建置版本的 Godot。"

msgid "Platform support"
msgstr "支援平台"

msgid ""
"**Linux:** `Download an official Linux server binary <https://godotengine."
"org/download/server>`__. To compile a server binary from source, follow "
"instructions in :ref:`doc_compiling_for_x11`."
msgstr ""
"**Linux：** `下載官方 Linux 伺服器二進位檔 <https://godotengine.org/download/"
"server>`__ 。若要從原始碼編輯二進位檔，請參考 :ref:`doc_compiling_for_x11` 中"
"的說明。"

msgid ""
"**macOS:** :ref:`Compile a server binary from source for macOS "
"<doc_compiling_for_osx>`."
msgstr ""
"**macOS：** :ref:`為 macOS 平台從原始碼編譯伺服器二進位檔 "
"<doc_compiling_for_osx>` 。"

msgid ""
"**Windows:** There is no dedicated server build for Windows yet. As an "
"alternative, you can use the ``--no-window`` command-line argument to "
"prevent Godot from spawning a window. Note that even with the ``--no-"
"window`` command-line argument, you'll need to have OpenGL support available "
"on the Windows machine."
msgstr ""
"**Windows：** 目前還沒有用於 Windows 的專用伺服器建置。可以使用 ``--no-"
"window`` 命令行引數來防止 Godot 產生視窗。請注意，即使使用 ``--no-window`` 命"
"令行引數，在 Windows 上還是必須要有支援 OpenGL。"

msgid ""
"If your project uses C#, you'll have to use a Mono-enabled server binary."
msgstr "若專案使用 C#，則必須使用有啟用 Mono 的伺服器二進位檔。"

msgid "\"Headless\" versus \"server\" binaries"
msgstr "「無周邊」vs「伺服器」二進位檔"

msgid ""
"The `server download page <https://godotengine.org/download/server>`__ "
"offers two kinds of binaries with several differences."
msgstr ""
"`伺服器下載頁面 <https://godotengine.org/download/server>`__ 提供了兩種二進位"
"檔，這兩種二進位檔有一些不同的地方。"

msgid ""
"**Server:** Use this one for running dedicated servers. It does not contain "
"editor functionality, and is therefore smaller and more optimized."
msgstr ""
"**Server (伺服器)：** 用於在專用伺服器上執行。不包含編輯器的功能，因此比較"
"小，也更最佳化。"

msgid ""
"**Headless:** This binary contains editor functionality and is intended to "
"be used for exporting projects. This binary *can* be used to run dedicated "
"servers, but it's not recommended as it's larger and less optimized."
msgstr ""
"**Headless (無週邊)：** 包含編輯器功能的二進位檔，目的是用來匯出專案。該二進"
"位檔 **可以** 用來執行專用伺服器，但因為檔案比較大，也比較沒最佳化，所以不建"
"議這樣用。"

msgid "Exporting a PCK file"
msgstr "匯出 PCK 檔"

msgid "There are two ways to export a project for a server:"
msgstr "有兩種方法可以為伺服器匯出專案："

msgid ""
"Create a Linux/X11 export preset, define a custom Release export template "
"that points to the server binary then export the project as usual."
msgstr ""
"建立 Linux/X11 匯出預設設定，並定義指向伺服器二進位檔的自定 Release 匯出樣"
"板，然後照往常一樣匯出專案即可。"

msgid "Export a PCK file only, preferably from a Linux/X11 export preset."
msgstr "只匯出 PCK 檔，建議從 Linux/X11 匯出預設設定中匯出。"

msgid ""
"Both methods should result in identical output. The text below describes the "
"PCK file approach."
msgstr "這兩種方法產生的結果都相同。下方說明了 PCK 檔的這個方法。"

msgid ""
"Once you've downloaded a server binary, you should export a PCK file "
"containing your project data. After creating the export preset, click "
"**Export PCK/ZIP** at the bottom of the Export dialog then choose a "
"destination path. The **Export With Debug** checkbox in the file dialog has "
"no bearing on the final PCK file, so you can leave it as-is."
msgstr ""
"下載好伺服器二進位檔後，需要匯出包含專案資料的 PCK 檔。建立好匯出預設後，點"
"擊 [匯出] 對話框下方的 **[匯出 PCK/ZIP]** 並選擇目標路徑。對話框中的 "
"**Export With Debug** 勾選框不會影響最終的 PCK 檔，可以不動這個選項。"

msgid "See :ref:`doc_exporting_projects` for more information."
msgstr "更多資訊請參考 :ref:`doc_exporting_projects` 。"

msgid ""
"If you're exporting the project from a headless editor, call the headless "
"editor with the `--export-pack` option while in the project folder to export "
"only a PCK file."
msgstr ""
"若從無周邊 (Headless) 編輯器中匯出專案，請在專案資料夾中使用 ``--export-"
"pack`` 選項來呼叫無周邊編輯器以匯出 PCK 檔。"

msgid ""
"The PCK file will include resources not normally needed by the server, such "
"as textures and sounds. This means the PCK file will be larger than it could "
"possibly be. Support for stripping unneeded resources from a PCK for server "
"usage is planned in a future Godot release."
msgstr ""
"PCK 檔案會包含一些在伺服器上通常不需要的資源，如紋理與聲音檔。這表示，PCK 檔"
"可能比實際可能的大小還要大。從 PCK 檔中將伺服器不需要使用的資源移除的功能已計"
"劃於未來的 Godot 版本中提供。"

msgid ""
"On the bright side, this allows the same PCK file to be used both by a "
"client and dedicated server build. This can be useful if you want to ship a "
"single archive that can be used both as a client and dedicated server."
msgstr ""
"往好處想，這樣依賴就可以在用戶端與專屬伺服器建置中使用同一個 PCK 檔。這樣也適"
"用於在用戶端與專用伺服器上使用同一個壓縮檔的情況。"

msgid "Preparing the server distribution"
msgstr "準備伺服器發佈"

msgid ""
"After downloading or compiling a server binary, you should now place it in "
"the same folder as the PCK file you've exported. The server binary should "
"have the same name as the PCK (excluding the extension). This lets Godot "
"detect and use the PCK file automatically. If you want to start a server "
"with a PCK that has a different name, you can specify the path to the PCK "
"file using the ``--main-pack`` command-line argument::"
msgstr ""
"下載或編譯伺服器二進位後，應將其放置於與匯出的 PCK 檔相同的資料夾中。伺服器二"
"進位檔的檔名應與 PCK 檔相同 (除了副檔名)。這樣一來 Godot 才能自動偵測要使用"
"的 PCK。若想用以不同名稱的 PCK 檔來啟動伺服器，則可以使用 ``--main-pack`` 命"
"令行引數來指定 PCK 檔的路徑："

msgid "Starting the dedicated server"
msgstr "開啟專用伺服器"

msgid ""
"If both your client and server are part of the same Godot project, you will "
"have to add a way to start the server directly using a command-line "
"argument. This can be done by adding the following code snippet in your main "
"scene (or a singleton)'s ``_ready()`` method::"
msgstr ""
"若用戶端與伺服器端都屬於相同的 Godot 專案，則必須要加上能直接以命令行引數來開"
"啟伺服器的方法。可以通過在主要場景 (或單例) 的 ``_ready()`` 方法中加上下列程"
"式碼片段來實現："

msgid ""
"Alternatively, you can make the dedicated server always start up if a "
"headless or server binary is detected::"
msgstr "另外，也可以在偵測到無周邊或伺服器二進位檔時開啟專用伺服器："

msgid ""
"If your client and server are separate Godot projects, your server should "
"most likely be configured in a way where running the main scene starts a "
"server automatically."
msgstr ""
"如果用戶端與伺服器端是分開的兩個 Godot 專案，則伺服器通常應該都設定好會在主要"
"場景開啟時自動執行伺服器。"

msgid "Next steps"
msgstr "下一步"

msgid ""
"On Linux, to make your dedicated server restart after a crash or system "
"reboot, you can `create a systemd service <https://medium.com/@benmorel/"
"creating-a-linux-service-with-systemd-611b5c8b91d6>`__. This also lets you "
"view server logs in a more convenient fashion, with automatic log rotation "
"provided by systemd."
msgstr ""
"在 Linux 中，請確保專用伺服器會在當機或系統重開機的時候重新啟動，可以 `建立 "
"systemd 服務 (英文) <https://medium.com/@benmorel/creating-a-linux-service-"
"with-systemd-611b5c8b91d6>`__ 。這樣也可以更方便地檢視伺服器日誌，並且 "
"systemd 會提供自動日誌切割 (log rotatioin)。"

msgid ""
"If you have experience with containers, you could also look into wrapping "
"your dedicated server in a `Docker <https://www.docker.com/>`__ container. "
"This way, it can be used more easily in an automatic scaling setup (which is "
"outside the scope of this tutorial)."
msgstr ""
"若有 Container 的使用經驗，也可以試試將專屬伺服器包裝在 `Docker <https://www."
"docker.com/>`__ Container 中。這樣一來要設定自動縮放就更簡單了 (但這不在本教"
"學的討論範圍內)。"

msgid "Translation status"
msgstr "翻譯狀態"
