# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Canvas layers"
msgstr "Canvas 圖層"

msgid "Viewport and Canvas items"
msgstr "Viewport 與 Canvas 項目"

#, fuzzy
msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""
"一般的 2D 節點，如 :ref:`Node2D <class_Node2D>` 或 :ref:`Control "
"<class_Control>` ，都是從 :ref:`CanvasItem <class_CanvasItem>` 繼承來的。"
"CanvasItem 是所有 2D 節點的基礎型別。CanvasItem 可以用樹狀形式進行排列。其中"
"的各個項目都會繼承其母節點的變換。也就是說，當母節點移動的時候，子節點也會跟"
"著移動。"

#, fuzzy
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that display them."
msgstr ""
"CanvasItem 節點與從 CanvasItem 繼承來的節點，都是 :ref:`Viewport "
"<class_Viewport>` 直接或間接的子節點，同時也會通過 Viewport 來顯示。"

#, fuzzy
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a custom :ref:"
"`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy it "
"contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"Viewport 有 :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>` 屬性，這個屬性能用來將自定 :ref:"
"`Transform2D <class_Transform2D>` 變換套用到其層級上包含的 CanvasItem。有些"
"如 :ref:`Camera2D <class_Camera2D>` 的節點就是通過更改這個變換來運作的。"

#, fuzzy
msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""
"如滾動等效果可以通過操作 Canvas 的變換屬性來實現以達到最佳效果。這種做法比移"
"動根 Canvas 項目 (也就是整個場景) 來得有效率。"

#, fuzzy
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"雖然在通常情況下，我們並不希望遊戲或 App 的 **所有東西** 都收到 Canvas 變換的"
"影響。例子如下："

msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr "**視察背景 (Parallax Background)**: 比畫面中其他部分動得慢的背景。"

#, fuzzy
msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""
"**UI**: 想像一下覆蓋在遊戲世界畫面上的 UI (使用者介面) 與 HUD (抬頭顯示器)。"
"我們會希望生命計數器、分數與其他項目在遊戲世界更改的時候保持在畫面上相同的位"
"置。"

msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**轉場**: 在轉場 (淡入淡出、混合等) 使用的視覺效果上，我們會希望這些效果保留"
"在畫面上固定的位置。"

msgid "How can these problems be solved in a single scene tree?"
msgstr "要如何在單一場景樹中解決這些問題？"

msgid "CanvasLayers"
msgstr "\\ CanvasLayer"

msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"這個問題的答案就是 :ref:`CanvasLayer <class_CanvasLayer>` 。CanvasLayer 是一"
"個可以為其所有子節點與次級子節點加上額外的 2D 算繪圖層的節點。Viewport 子節點"
"預設會在第「0」層上進行繪製，而 CanvasLayer 則會在其他數字的圖層上繪製。較大"
"數字的圖層會被繪製在較小數字的圖層之上。CanvasLayer 自己也有獨立的變換，並不"
"收到其他圖層的變換影響。這樣一來，便可以讓 UI 繪製在畫面上固定的地方，觀看遊"
"戲世界的更改便不受影響。"

msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"CanvasLayer 的其中一個例子就是建立視差背景。可以通過將背景放在 CanvasLayer"
"「-1」上來實現。分數、生命計數器與暫停按鈕的畫面可以建立在第「1」層上。"

msgid "Here's a diagram of how it looks:"
msgstr "下圖顯示了圖層的樣子："

msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayer 與樹狀順序彼此獨立，其順序只會依據圖層數字來決定，因此可以依據需"
"求來進行實體化。"

msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""
"若要控制節點的繪製順序，也不一定要使用 CanvasLayer。要確保節點被繪製另一個節"
"點的「前方」還是「後方」的標準方法是在場景面板中調整節點的順序。也許不太直"
"覺，但在場景面板最上面的節點會在 Viewport 中會被繪製在下方節點的 **後面** 。"
"2D 節點也有能控制繪製順序的屬性 (請參考 :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)。"

msgid "Translation status"
msgstr "翻譯狀態"
