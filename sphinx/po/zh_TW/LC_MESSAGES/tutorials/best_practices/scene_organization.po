# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene organization"
msgstr "場景組織"

msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"本文章討論與如何有效率地組織場景內容有關的主題。應該使用哪個節點？要將這些節"
"點放到哪裡？各個節點要如何互動？"

msgid "How to build relationships effectively"
msgstr "如何有效地建立關係"

msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr "當 Godot 使用者開始製作自己的場景時，通常會遇到下列問題："

msgid ""
"They create their first scene and fill it with content only to eventually "
"end up saving branches of their scene into separate scenes as the nagging "
"feeling that they should split things up starts to accumulate. However, they "
"then notice that the hard references they were able to rely on before are no "
"longer possible. Re-using the scene in multiple places creates issues "
"because the node paths do not find their targets and signal connections "
"established in the editor break."
msgstr ""
"建立好第一個場景並往場景中加上內容，最後會開始覺得場景逐漸變得複雜，應該要把"
"東西都切割成小塊，所以就將場景中的各個分支都保存為獨立的場景。但是，接著就會"
"發現之前在腳本裡直接引用其他節點的方法不能用了。在多個地方重複使用場景也會出"
"問題，因為沒辦法用節點路徑找到目標，然後在編輯器中建的訊號連接也會斷開。"

msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"要解決這些問題，就必須要讓子場景的實體化與子場景所在環境的詳細資訊無關。使用"
"者必須要能確定子場景建立時不會因為使用子場景的方式不同而壞掉。"

msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability."
msgstr ""
"OOP 中要考慮的最重要的一點就是要維持一個專注且單一目的的類別，並與程式碼中其"
"他部分 `鬆散耦合 <https://zh.wikipedia.org/zh-tw/"
"%E6%9D%BE%E8%80%A6%E5%90%88>`_ 。這樣可以讓物件的大小維持得比較小 (為了可維護"
"性) 並提高類別的可用性。"

msgid ""
"These OOP best practices have *several* implications for best practices in "
"scene structure and script usage."
msgstr "這些 OOP 最佳實踐在場景結構與腳本使用上實際是 **數種** 最佳實踐。"

msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**在設計場景時，應該儘可能地讓場景沒有其他相依性。** 也就是說，建立的場景應該"
"要將所有所需的東西都包含在場景內部。"

msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"若場景必須要與外部的東西互動，則有經驗的工程師推薦使用 `依賴注入 <https://zh."
"wikipedia.org/zh-tw/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5>`_ 。這個技術是使用"
"高等 API 來提動低等 API 的相依性。為什麼要這麼做？因為仰賴外部環境的類別可能"
"會不小心觸發 Bug 或未預期的行為。"

msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr "為此，必須將資料公開並讓這些類別通過母級上下文來初始化："

msgid ""
"Connect to a signal. Extremely safe, but should be used only to \"respond\" "
"to behavior, not start it. Note that signal names are usually past-tense "
"verbs like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"連接訊號。非常安全，但訊號應該只用來「回覆」一個行為，而不是執行行為。請注"
"意，訊號名稱通常使用過去式動詞，如「entered」、「skill_activated」或"
"「item_collected」。"

msgid "Call a method. Used to start behavior."
msgstr "呼叫方法。用於開始一個行為。"

msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""
"初始化 :ref:`FuncRef <class_FuncRef>` 屬性。比使用方法來得安全，因為不需在意"
"方法的所有權。用來開始行為。"

msgid "Initialize a Node or other Object reference."
msgstr "初始化 Node 或其他 Object 參照。"

msgid "Initialize a NodePath."
msgstr "初始化 NodePath。"

msgid ""
"These options hide the points of access from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""
"通過上面幾個步驟，便能將來自子節點的存取點隱藏起來。這樣便可以確保子節點對環"
"境來說是 **鬆散耦合** 的。開發人員便可以在其他的地方重複使用子節點，而無需修"
"改子節點的 API。"

msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"雖然上述的例子中只表示了母子關係，但同樣的原則也可以用在所有物件關係上。有同"
"級節點的節點應該只需要注意層級結構，因為祖先節點會居中協調這些節點間的通訊與"
"參照。"

msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"同樣的原則也可套用在與其他物件有相依性關係的非節點 (Node) 物件。無論那個節點"
"實際上擁有這些節點，都應該負責管理這些節點間的關係。"

msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"建議應儘量將資料保存在內部 (場景內部)，雖然將相依性放在外部脈絡上一樣代表這個"
"節點需要依賴環境中的某些東西，就算依賴的這個外部脈絡是鬆散耦合的也一樣。專案"
"的設計理念應該避免這種狀況發生。若不避免的話，則程式碼的繼承關係也會強迫開發"
"人員使用說明文件來追蹤物件在微觀尺度上的關係。這也可以稱為是開發地獄。撰寫需"
"要依賴外部文件才能安全使用的程式碼很容易就會發生錯誤。"

msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""
"要避免建立與維護這種文件，則必須要將相依性節點 (上面稱的「節點」) 轉換為實"
"作 :ref:`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>` 的工具腳本。從這個函式中回傳"
"非空字串就能讓場景 Dock 產生一個警告圖示，並將該字串顯示為工具提示。這個圖示"
"也是如 :ref:`Area2D <class_Area2D>` 節點沒有定義子級 :ref:"
"`CollisionShape2D<class_CollisionShape2D>` 節點顯示的警告圖示。編輯器接著就通"
"過腳本程式碼來讓場景自己說明自己。不需要通過文件來複製內容。"

msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"像這樣的 GUI 可以更好的通知專案使用者有關節點的重要訊息。節點有外部相依性嗎？"
"相依性有滿足嗎？其他的程式設計師，尤其是設計師與作家，會需要更清楚的指示來瞭"
"解如何正確設定這些節點。"

msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling) is "
"the next best thing. Inevitably, changes may need to be made to a class and "
"if these changes cause it to interact with other scenes in unforeseen ways, "
"then things will start to break down. The whole point of all this "
"indirection is to avoid ending up in a situation where changing one class "
"results in adversely effecting other classes."
msgstr ""
"那麼，為什麼還要搞得這麼複雜呢？這個嘛，因為場景在獨自運作的時候效果最好。若"
"沒辦法獨自運作的話，則匿名地與其他場景運作則是次要最好的 (通過最小限度的硬參"
"照，即鬆散耦合)。當然，當這些改動會導致類別與其他場景以無法預期的方式互動時就"
"不可避免地會需要對類別做出修改，那麼接下來事情便開始崩潰。用這些拐彎抹角的方"
"式的重點就是要避免造成這種狀況，也就是一個類別負面地影響了其他類別。"

msgid ""
"Scripts and scenes, as extensions of engine classes, should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"節點與場景，作為引擎類別的延伸，應該要能套用 **所有** OOP 原則。這些原則的例"
"子包含..."

msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr ""
"`SOLID <https://zh.wikipedia.org/zh-tw/"
"SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)>`_"

msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr ""
"`DRY <https://zh.wikipedia.org/zh-tw/"
"%E4%B8%80%E6%AC%A1%E4%B8%94%E4%BB%85%E4%B8%80%E6%AC%A1>`_"

msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr "`KISS <https://zh.wikipedia.org/zh-tw/KISS%E5%8E%9F%E5%88%99>`_"

msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr ""
"`YAGNI (英文) <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"

msgid "Choosing a node tree structure"
msgstr "選擇一種節點樹架構"

#, fuzzy
msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in countless ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"好的，所以開發人員開始開發遊戲，然後因為巨大的問題而止步不前。開發人員可能知"
"道自己想做什麼，以及想要什麼系統，但要把這些東西都放在 **哪裡** 呢？呃... 人"
"要怎麼做遊戲取決於自己。我們有無數種建置節點樹的方法，但，如果你不確定的話，"
"這篇有用的教學提供了一個結構良好又簡單的架構來起手。"

msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view of "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"遊戲應該都要以某種「進入點」。進入點就是開發人員可以瞭若指掌地追蹤各種東西從"
"哪裡來的地方，這樣便能追蹤邏輯跑去哪裡。這裡也是提供能俯瞰程式中所有其他資料"
"與邏輯的地方。在傳統的應用程式中，進入點會是「main」函式。而在本例中，則是 "
"Main 節點。"

msgid "Node \"Main\" (main.gd)"
msgstr "Node「Main」(main.gd)"

msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr "``main.gd`` 節點是遊戲的主要控制器。"

msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"接著我們會需要遊戲中真正的「世界」(2D 或 3D 世界)。可以是 Main 的子節點。另"
"外，我們還需要遊戲的主 GUI 來管理專案所需的各種選單與小工具。"

msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr "Node2D/Spatial「World」(game_world.gd)"

msgid "Control \"GUI\" (gui.gd)"
msgstr "Control「GUI」(gui.gd)"

msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"當改變關卡時，我們就可以把「World」節點的子節點換掉。通過 :ref:`手動更改場景 "
"<doc_change_scenes_manually>` 就能提供能完整控制遊戲世界過場的方法。"

msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr "下一步就是要想想專案需要的遊戲系統是怎麼樣的。如果需要這樣一個系統..."

msgid "tracks all of its data internally"
msgstr "能在內部追蹤所有的資料"

msgid "should be globally accessible"
msgstr "可以在所有地方存取"

msgid "should exist in isolation"
msgstr "獨立存在"

msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"... 則應該要建立一個 :ref:`Autoload「單例」節點 <doc_singletons_autoload>` 。"

msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""
"對於比較小的遊戲，有另一種控制比較少東西的替代方案為用一個只呼叫 :ref:"
"`SceneTree.change_scene() <class_SceneTree_method_change_scene>` 的「Game」單"
"例來切換主要場景的內容。這種結構或多或少將「World」場景作為主要遊戲節點保留。"

msgid ""
"Any GUI would need to also be a singleton; be a transitory part of the "
"\"World\"; or be manually added as a direct child of the root. Otherwise, "
"the GUI nodes would also delete themselves during scene transitions."
msgstr ""
"所有的 GUI 也都需要是單例。要嘛是會臨時放在「World」中的一部分，要嘛就是手動"
"新增為根節點的子節點。否則，GUI 節點就必須在場景轉場時將自己刪除。"

#, fuzzy
msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`Autoloads versus regular nodes "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"如果專案中的系統會修改其他系統資料，則必須要將這些系統定義為自己的腳本或場"
"景，而不是使用 Autoload。更多有關這麼做的原因，請參考 :ref:`《Autoload vs. 內"
"部節點》 <doc_autoloads_versus_internal_nodes>` 文件。"

msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"遊戲中的每個子系統也都應該在 SceneTree 中有自己的段落。開發人員應該使只在節點"
"是對其母節點有效果時才使用子母關係。在移除母節點時就代表應該合理地移除子節點"
"嗎？如果不應該的話，則應該在層級關係中使用同級節點或其他的關係。"

msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"在某些情況下，我們會需要這些分離的節點來 **同時** 讓這些節點互相關聯。可以為"
"此目的使用 :ref:`RemoteTransform <class_RemoteTransform>` / :ref:"
"`RemoteTransform2D <class_RemoteTransform2D>` 節點。這兩個類別能讓目標節點通"
"過指定條件來從 Remote\\* 節點中繼承選定的變換節點。要指派 ``目標`` :ref:"
"`NodePath <class_NodePath>` ，請使用下列其中一種方法："

msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr "可信的第三方，可能是母節點，來居中分配。"

msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr "用群組，來輕鬆地取得到目標節點的參照 (假設只會有一個目標)。"

msgid ""
"When should one do this? Well, this is subjective. The dilemma arises when "
"one must micro-manage when a node must move around the SceneTree to preserve "
"itself. For example..."
msgstr ""
"那麼什麼時候該這麼做呢？嗯... 這就很主觀了。當節點必須在 SceneTree 場景中到處"
"移動來保留自己時，出現必須要管理的細小部分就會遇到兩難。如..."

msgid "Add a \"player\" node to a \"room\"."
msgstr "將「玩家」節點加到「房間」中。"

msgid "Need to change rooms, so one must delete the current room."
msgstr "要換房間，所以必須要刪除目前的房間。"

msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr "在房間刪除之前，必須先保留與／或移動玩家。"

msgid "Is memory a concern?"
msgstr "需要注意記憶體嗎？"

msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"若不用的話，可以直接建立兩個房間，然後移動玩家，然後刪除舊房間。沒問題。"

msgid "If so, one will need to..."
msgstr "如果要注意記憶體使用的話，則..."

msgid "Move the player somewhere else in the tree."
msgstr "將玩家移動到樹狀結構中其他地方。"

msgid "Delete the room."
msgstr "刪除房間。"

msgid "Instantiate and add the new room."
msgstr "實體化並建立新的房間。"

msgid "Re-add the player."
msgstr "重新加回玩家。"

msgid ""
"The issue is that the player here is a \"special case\"; one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"問題是，玩家在這裡是個「特例」，這個特例是開發人員必須要 **知道** 在專案中要"
"這樣處理玩家。因此，要在團隊中可靠地分享這個情報的方法就只有 **寫在文件** 裡"
"了。一直在文件裡寫細節是很危險的。這麼做會造成可維護性降低，並減少程式碼的可"
"讀性，然後讓專案所需的知識不必要地成長。"

msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This results in:"
msgstr ""
"在有更大型素材的更複雜的遊戲中，最好就一直將玩家放在 SceneTree 中一個完全不同"
"的地方。這樣一來："

msgid "More consistency."
msgstr "一致性更高。"

msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr "沒有必須要寫成文件並在其他地方維護的「特例」。"

msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr "不會因為沒有注意到細節而有發生錯誤的機會。"

msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"相較而來，若有需要一個 **不繼承** 轉換過的母節點的子節點，則有下列方法："

msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"**宣告型** 解法：在這兩個節點間放一個 :ref:`Node <class_Node>` 。由於節點沒有"
"變換，所以 Node 不會將這個資訊傳送給子節點。"

msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""
"**指令式** 解法：在 :ref:`CanvasItem "
"<class_CanvasItem_method_set_as_toplevel>` 或 :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` 上使用 ``set_as_toplover`` Setter。這"
"樣一來便可讓節點忽略其繼承的變換。"

msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"在製作網路遊戲時，請注意哪些節點與遊戲系統是關係到所有玩家的，以及哪些節點與"
"遊戲系統只與權威伺服器有關。例如，使用者不需要有每個玩家的"
"「PlayerController」邏輯副本，而只需要自己的。因此，將這些東西從「World」中分"
"開來在獨立的分支中有助於簡化管理遊戲連線以及之類的東西。"

#, fuzzy
msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Are the nodes dependent on their parent's "
"existence? If not, then they can thrive all by themselves somewhere else. If "
"they are dependent, then it stands to reason that they should be children of "
"that parent (and likely part of that parent's scene if they aren't already)."
msgstr ""
"場景組織的關鍵就是要以關聯的方式來考量 SceneTree 而不是用空間性來考量。節點是"
"否會仰賴母節點的存在？若不仰賴，則節點可以就完全可以在別的地方活得好好的。若"
"有依賴母節點，則這種依賴關係就是子節點要是母節點的子節點的原因 (而且，顯然必"
"須是母節點的場景中的一部分，如果還不是母節點的場景中的一部分的話)。"

msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"這代表節點自己就是元件嗎？絕對不是。Godot 的節點樹構成了一種聚合關係，而不是"
"組合關係。但，由於我們還是有能到處移動節點的靈活性，所以預設情況下這種移動是"
"不必要的。"

msgid "Translation status"
msgstr "翻譯狀態"
