# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Applying object-oriented principles in Godot"
msgstr "在 Godot 中套用物件導向原則"

msgid ""
"The engine offers two main ways to create reusable objects: scripts and "
"scenes. Neither of these technically define classes under the hood."
msgstr ""
"Godot 提供了兩種方法來建立可重複使用的物件：腳本與場景。這兩種方法技術上來說"
"都算是在定義類別。"

msgid ""
"Still, many best practices using Godot involve applying object-oriented "
"programming principles to the scripts and scenes that compose your game. "
"That is why it's useful to understand how we can think of them as classes."
msgstr ""
"儘管如此，許多使用 Godot 的最佳實踐都包含了將物件導向程式設計原則套用到構成遊"
"戲的腳本與場景上。因此，瞭解如何將場景與腳本看作物件是很實用的。"

msgid ""
"This guide briefly explains how scripts and scenes work in the engine's core "
"to help you understand how they work under the hood."
msgstr ""
"本指南大致解釋了腳本與場景在引擎核心中是如何運作的，來協助你瞭解 Godot 實際是"
"怎麼運作的。"

msgid "How scripts work in the engine"
msgstr "在引擎中腳本是如何運作的"

msgid ""
"The engine provides built-in classes like :ref:`Node <class_Node>`. You can "
"extend those to create derived types using a script."
msgstr ""
"Godot 中提供了一些內建類別，如 :ref:`Node<class_Node>` 。可以通過繼承這些類別"
"來通過腳本建立延伸型別。"

msgid ""
"These scripts are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"這些腳本在理論上來說不是類別，而是用來告訴引擎要在內建類別上進行一系列初始化"
"操作的資源。"

msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Godot 的內部類別有一些向 :ref:`ClassDB <class_ClassDB>` 註冊類別資料的方法。"
"通過 ClassDB 這個資料庫便能在執行時存取類別資訊。``ClassDB`` 包含了如下類別資"
"訊："

msgid "Properties."
msgstr "屬性。"

msgid "Methods."
msgstr "方法。"

msgid "Constants."
msgstr "常數。"

msgid "Signals."
msgstr "訊號。"

msgid ""
"This ``ClassDB`` is what objects check against when performing an operation "
"like accessing a property or calling a method. It checks the database's "
"records and the object's base types' records to see if the object supports "
"the operation."
msgstr ""
"``ClassDB`` 即為物件在執行如存取屬性或呼叫方法等特定操作時用來檢查的地方。"
"``ClassDB`` 會檢查資料庫記錄與物件的基礎型別，來確認該物件是否支援要執行的操"
"作。"

msgid ""
"Attaching a :ref:`Script <class_Script>` to your object extends the methods, "
"properties, and signals available from the ``ClassDB``."
msgstr ""
"將 :ref:`Script <class_Script>` 附加到物件上，就會使物件繼承 ``ClassDB`` 中可"
"用的方法、屬性與訊號。"

msgid ""
"Even scripts that don't use the ``extends`` keyword implicitly inherit from "
"the engine's base :ref:`Reference <class_Reference>` class. As a result, you "
"can instantiate scripts without the ``extends`` keyword from code. Since "
"they extend ``Reference`` though, you cannot attach them to a :ref:`Node "
"<class_Node>`."
msgstr ""
"即使是不使用 ``extends`` 關鍵字的腳本，也會隱含性地自動繼承引擎的基礎 :ref:"
"`Reference <class_Reference>` 類別。這樣一來，即使沒有在程式碼中使用 "
"``extends`` 關鍵字也能初始化腳本。由於這些腳本是繼承自 ``Reference`` ，所以無"
"法附加到 :ref:`Node <class_Node>` 上。"

msgid "Scenes"
msgstr "場景"

msgid ""
"The behavior of scenes has many similarities to classes, so it can make "
"sense to think of a scene as a class. Scenes are reusable, instantiable, and "
"inheritable groups of nodes. Creating a scene is similar to having a script "
"that creates nodes and adds them as children using ``add_child()``."
msgstr ""
"由於場景與類別在行為上有許多相同的地方，因此也可以將場景看作是類別。場景可重"
"複使用、可初始化，而且還是一組可繼承的節點。建立場景就有點類似一個會建立節點"
"並通過 ``add_child()`` 將這些節點新增為子節點的腳本。"

msgid ""
"We often pair a scene with a scripted root node that makes use of the "
"scene's nodes. As such, the scene is often an extension of the script's "
"declarative code."
msgstr ""
"我們通常會將場景與有腳本的根節點一起使用。因此，場景通常算是腳本中宣告型程式"
"碼的延伸。"

msgid "The content of a scene helps to define:"
msgstr "場景的內容可以協助定義："

msgid "What nodes are available to the script"
msgstr "腳本中可以使用哪些節點"

msgid "How they are organized"
msgstr "節點如何組織"

msgid "How they are initialized"
msgstr "節點如何初始化"

msgid "What signal connections they have with each other"
msgstr "節點之間有用什麼訊號連接"

msgid ""
"Why is any of this important to scene organization? Because instances of "
"scenes *are* objects. As a result, many object-oriented principles that "
"apply to written code also apply to scenes: single responsibility, "
"encapsulation, and others."
msgstr ""
"為什麼這些東西對場景組織來說有這麼重要？因為場景 **是** 物件。因此，許多在寫"
"程式碼時能套用的物件導向原則也都能套用至場景上：單一職責、封裝等。"

msgid ""
"The scene is *always an extension of the script attached to its root node*, "
"so you can interpret it as part of a class."
msgstr ""
"場景 **永遠是附加到場景根節點的腳本的延伸** ，因此可以將場景視為類別的一部"
"分。"

msgid ""
"Most of the techniques explained in this best practices series build on this "
"point."
msgstr "本最佳實踐系列中的許多技術解釋都以此為基礎。"

msgid "Translation status"
msgstr "翻譯狀態"
