# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Godot 通知"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Godot 中每個物件都實作了一個 :ref:`_notification "
"<class_Object_method__notification>` 。這個方法的目的是要讓 Object 物件能回應"
"各種來自引擎層級，與該物件有關的回呼。舉例來說，若引擎告要叫 :ref:"
"`CanvasItem <class_CanvasItem>` 進行「繪製 (draw)」，則引擎就會呼叫 "
"``_notification(NOTIFICATION_DRAW)`` 。"

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"這些通知中，如 draw 之類的通知，很適合在腳本中覆寫。這些適合覆寫的通知多到 "
"Godot 特地將這些通知暴露成專屬函式："

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "\\ ``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "\\ ``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "\\ ``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "\\ ``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "\\ ``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "\\ ``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr "使用者可能 **沒注意到** ，除了 Node 之外其他型別的節點也有通知："

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>` ：會在物件初始化時觸發的"
"回呼。腳本無法存取。"

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>` ：會在引擎刪除 Object 時觸發"
"的回呼，即「解構函式」。"

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>` ：會在滑鼠進入作業系統"
"中顯示遊戲內容的視窗時觸發的回呼。"

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"而且，Node 節點中許多 **真實存在** 的回呼都沒有專屬的方法，但這些回呼還是很實"
"用。"

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` ：會在每次將子節點加入另一個節點"
"時觸發的回呼。"

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>` ：會在每次子節點從另一個節點中"
"移除時觸發的回呼。"

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>` ：會在 Popup 節點完成任何 "
"``popup*`` 方法後觸發的回呼。請注意這個回呼與 Popup 的 ``about_to_show`` 訊號"
"不同，該訊號時在 Popup 出現 **之前** 觸發的。"

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr "我們可以通過通用的 ``_notification`` 方法來存取這些自定通知。"

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr "在說明文件中標記為「虛擬」的方法都是為了讓腳本覆寫而存在的。"

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"典型的例子就是 Object 物件中的 :ref:`_init <class_Object_method__init>` 方"
"法。雖然沒有等效的 ``NOTIFICATION_*`` 通知，但引擎還是會呼叫這個方法。大多數"
"語言 (除了 C#) 都依賴這個方法來當作建置函式。"

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr "那麼，各種通知與虛擬函數都應該分別在什麼狀況下使用呢？"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "\\ _process vs. _physics_process vs. \\*_input"

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"當我們需要處理各幀之間與 FPS 有關的 delta 時，就用 ``_process`` 。若更新物件"
"資料的程式碼需要儘可能頻繁更新，就適合在 ``_process`` 中處理。我們也通常會把"
"重複性的邏輯檢查以及資料快取放在這裡執行，但還是得取決於是否有需要頻繁地計"
"算。若不需要每一幀都執行的化，則可以實作一個 Timer-Yield-Timeout 循環來代替。"

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"當需要的操作跟每幀之間的 delta 時間無關時，就可以用 ``_physics_process`` 。如"
"果程式碼需要不管時間快還是慢，都隨著時間持續更新的話，就適合用 "
"``_physics_process``。重複的動力學與物件變換操作應該在這個函式內執行。"

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"雖然可以在這些回呼中檢查輸入，但為了獲得最佳效能，應該避免這麼做。 "
"``_process`` 與 ``_physics_process`` 一有機會機會觸發 (預設情況下這些回呼都不"
"「休息」)。相反地， ``*_input`` 回呼則只會在引擎實際偵測到輸入的幀上才會呼"
"叫。"

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"我們也可以在輸入回呼裡做一樣的輸入操作檢查。如果需要使用 delta 時間的話，則可"
"以從相關的 delta 時間方法中取得。"

msgid "_init vs. initialization vs. export"
msgstr "_init vs. 初始化 vs. 匯出"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"如果腳本會初始化自己的節點子樹而不依賴場景的話，那麼程式碼應該在 _init 中執"
"行。其他屬性或是與 SceneTreee 無關的初始化行為也都應該在這裡執行。這個回呼會"
"在 ``_ready`` 與 ``_enter_tree`` 之前、腳本建立與初始化其屬性後觸發。"

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr "在初始化期間，腳本可以有三種類型的屬性賦值："

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr "在初始化場景時，屬性值會依據下列順序來設定："

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**初始值賦值：** 實體化會賦予初始化值或是 Init 賦值的值。Init 賦值的優先度高"
"於初始化值。"

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**匯出值賦值：** 若是從場景中實體化而非腳本，則 Godot 會將匯出的值賦值來取代"
"腳本中定義的初始值。"

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"結果，實體化腳本對比場景來說，會 **一起** 影響初始化值 **以及** 引擎呼叫 "
"Setter 的次數。"

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "\\ _ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"當實體化一個連接到首次執行場景的場景時，Godot 會在場景樹中向下實體化 (呼叫 "
"``_init`` ) 並一直從根節點往深層建置。因為這樣，所以 ``_enter_tree`` 就是在場"
"景樹中由頂層往深層級呼叫的。建置完整棵樹後，葉上的節點就會呼叫 ``_ready`` 。"
"節點會在所有自節點都呼叫完 ``_ready`` 後才呼叫自己的 ``_ready`` ，因此在呼叫"
"的時候就是反過來從樹最深層往回呼叫到根節點。"

#, fuzzy
msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"當實體化腳本或獨立的場景時，節點並不會在建立時被加到 SceneTree 上，所以不會觸"
"發 ``_enter_tree`` 回呼，而只會有 ``_init`` 以及之後的 ``_ready`` 呼叫。"

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"如果有需要觸發作為另一個節點的母節點來發生的行為，而不管是否是作為母節點／有"
"效場景的一部分發生，可以使用 :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` 通知。舉例來說，下列是一段能確保"
"能在不失敗的情況下將節點的方法連接至母節點中自定訊號的程式碼片段。適合用於在"
"執行階段建立且以資料為中心的節點上。"

msgid "Translation status"
msgstr "翻譯狀態"
