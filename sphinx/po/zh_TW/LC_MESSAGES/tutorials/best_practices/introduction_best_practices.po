# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction"
msgstr "簡介"

msgid ""
"This series is a collection of best practices to help you work efficiently "
"with Godot."
msgstr "本系列是一些可以協助你更有效率地使用 Godot 的最佳實踐。"

msgid ""
"Godot allows for a great amount of flexibility in how you structure a "
"project's codebase and break it down into scenes. Each approach has its pros "
"and cons, and they can be hard to weigh until you've worked with the engine "
"for long enough."
msgstr ""
"Godot 中對於要如何組織程式架構以及將程式分解為小場景中有賦予了極大的彈性。每"
"種方法都各有其利弊，因此在長期使用 Godot 前，很難衡量要使用哪種組織方法。"

msgid ""
"There are always many ways to structure your code and solve specific "
"programming problems. It would be impossible to cover them all here."
msgstr ""
"這種能解決特定程式設計問題的組織程式碼方法有很多。因此沒辦法全部都在這裡介"
"紹。"

msgid ""
"That is why each article starts from a real-world problem. We will break "
"down each problem in fundamental questions, suggest solutions, analyze the "
"pros and cons of each option, and highlight the best course of action for "
"the problem at hand."
msgstr ""
"這也是為什麼這裡的教學都是從現實世界中的例子開始介紹的。我們會將各種問題分解"
"為基本的問題，並提出建議解決方案，然後分析各個選項的利弊，並強調出該問題的最"
"佳解法。"

msgid ""
"You should start by reading :ref:`doc_what_are_godot_classes`. It explains "
"how Godot's nodes and scenes relate to classes and objects in other Object-"
"Oriented programming languages. It will help you make sense of the rest of "
"the series."
msgstr ""
"建議先閱讀 :ref:`doc_what_are_godot_classes` 。該文章解釋了 Godot 中的節點與"
"場景與其他物件導向程式語言中的類別與物件有何關係。閱讀該文章有助於瞭解本系列"
"剩下的部分。"

msgid ""
"The best practices in Godot rely on Object-Oriented design principles. We "
"use tools like the `single responsibility <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>`_ principle and `encapsulation <https://en."
"wikipedia.org/wiki/Encapsulation_(computer_programming)>`_."
msgstr ""
"Godot 中的最佳實踐仰賴於物件導向設計原則。我們使用如 `單一職責 <https://zh."
"wikipedia.org/zh-tw/"
"%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99>`_ 原則與 `封裝 "
"<https://zh.wikipedia.org/wiki/"
"%E5%B0%81%E8%A3%9D_(%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)>`_ "
"之類的工具。"

msgid "Translation status"
msgstr "翻譯狀態"
