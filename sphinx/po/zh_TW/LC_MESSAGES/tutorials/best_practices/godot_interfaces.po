# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot interfaces"
msgstr "Godot 介面"

msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr ""
"我們常常會需要為了一些功能而讓腳本仰賴其他物件。這個過程可以分為兩個部分："

msgid "Acquiring a reference to the object that presumably has the features."
msgstr "取得可能有該功能的物件之參照。"

msgid "Accessing the data or logic from the object."
msgstr "從該物件存取資料或邏輯。"

msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr "本篇教學接下來的部分將介紹各種達成此目的的方法。"

msgid "Acquiring object references"
msgstr "取得物件參照"

msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""
"對於所有 :ref:`Object <class_Object` ，取得現有物件參照最基礎的方法，就是從另"
"一個已經取得的實體來取得。"

msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""
"相同的原則也可以用在 :ref:`Reference <class_Reference>` 物件上。雖然使用者通"
"常會用這種方式來存取 :ref:`Node <class_Node>` 與 :ref:`Resource "
"<class_Resource>` ，但也有另一種方法。"

msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr "除了存取屬性或方法，也可以通過 load 存取來取得 Resource。"

msgid "Note the following:"
msgstr "請注意下列事項："

msgid "There are many ways in which a language can load such resources."
msgstr "在一種語言當中，有許多載入這種 Resource 的方法。"

msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr "在設計物件如何存取資料時，請不要忘記，我們也可用參照來傳遞資源。"

msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""
"請記得，載入資源會載入由引擎快取的資源實體。若要取得新物件，則必須要 :ref:`複"
"製 <class_Resource_method_duplicate>` 現有參照，或用 ``new()`` 來重新實體化資"
"源。"

msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr "Node 也有另一個替代的存取點：SceneTree 場景樹。"

msgid "Accessing data or logic from an object"
msgstr "從物件中存取資料或邏輯"

msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""
"Godot 的腳本 API 是鴨子型別的。這代表，當腳本執行某樣操作時，Godot 不會用 **"
"型別** 來驗證該物件是否支援該操作，而是檢查該物件是否有 **實作** 個別方法。"

msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""
"舉例來說， :ref:`CanvasItem <class_CanvasItem>` 類別有一個 ``visible`` 屬性。"
"所有暴露在腳本 API 中的屬性，事實上都是繫結在名稱上的 Setter 與 Getter 配對。"
"當我們嘗試存取 :ref:`CanvasItem.visible <class_CanvasItem_property_visible>` "
"時，Godot 會照順序進行下列檢查："

msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""
"若物件有附加腳本，則會嘗試在腳本中設定屬性。這樣就能讓腳本覆寫該屬性的 "
"Setter 方法，讓腳本有覆寫基礎物件中定義的屬性的機會。"

msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""
"若腳本沒有該屬性，則會在 ClassDB 中通過 HashMap 查詢來找到 CanvasItem 類別與"
"其繼承的所有型別中的「visible」屬性。若有找到，則會繫結 Setter 與 Getter。更"
"多有關 HashMaps 的資訊，請參考 :ref:`資料偏好 <doc_data_preferences>` 文件。"

msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr "若找不到，則會明確地檢查使用者要存取的是不是「script」或「meta」屬性。"

msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""
"若不是的話，則會檢查 CanvasItem 與其繼承的型別中是否有實作 ``_set`` 與 "
"``_get`` (依據存取類型的不同)。這兩個方法可以執行一組邏輯，讓該物件看起來有這"
"個屬性。同樣地，有 ``_get_property_list`` 方法也是這樣。"

msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""
"請注意，在非法符號名稱時也會發生這個檢查，像是在 :ref:`TileSet "
"<class_TileSet>` 的「1/tile_name」屬性。這個屬性代表名稱為 ID 1 的圖塊，即 :"
"ref:`TileSet.tile_get_name(1) <class_TileSet_method_tile_get_name>` 。"

msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""
"最後，這個鴨子型別系統可以在腳本、物件類別或任何物件繼承的類別中找到屬性，但"
"只適用於繼承了 Object 的物件中。"

msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr "Godot 提供了各種能在執行階段執行這些檢查的方法："

msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""
"鴨子型別屬性存取。這種方法會進行屬性檢查 (如上所示)。若物件不支援該操作，則會"
"終止執行。"

msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""
"方法檢查。在 :ref:`CanvasItem.visible <class_CanvasItem_property_visible>` 的"
"情況下，我們可以像其他方法一樣存取 ``set_visible`` 與 ``is_visible`` 方法。"

msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""
"將存取外包給 :ref:`FuncRef <class_FuncRef>` 。這些方法適用於我們需要最大限度"
"地跳脫相依性。這時，便需要仰賴外部脈絡來設定方法。"

msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""
"多虧這些策略，Godot 才有靈活的設計。有了這些策略，使用者便有了豐富的工具來滿"
"足特殊需求。"

msgid "Translation status"
msgstr "翻譯狀態"
