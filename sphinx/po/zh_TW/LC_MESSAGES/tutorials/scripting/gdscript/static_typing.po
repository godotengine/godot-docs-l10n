# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "GDScript 中的靜態型別"

msgid "In this guide, you will learn:"
msgstr "在本指南中，我們將學到："

msgid "**How to use types in GDScript**"
msgstr "**如何在 GDScript 中使用型別**"

msgid "That **static types can help you avoid bugs**"
msgstr "**使用靜態型別可避免 Bug**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"要在哪裡使用靜態型別以及如何使用靜態型別全依個人：可以只在特定的 GDScript 檔"
"案中使用、或是到處都使用靜態型別、也可以像平常一樣寫程式碼就好了！"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr "靜態型別可以在變數、常數、函式、參數、與回傳型別上使用。"

msgid "Typed GDScript is available since Godot 3.1."
msgstr "有型別的 GDScript 自 Godot 3.1 版後提供。"

msgid "A brief look at static typing"
msgstr "靜態型別簡介"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"在 GDScript 中使用型別，就能在寫程式碼時讓 Godot 偵測到更多錯誤！型別也能讓你"
"與團隊成員獲得更多資訊，因為在呼叫方法時會顯示出引數的型別。"

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"來想像一下開發物品列系統。先撰寫 ``Item`` 節點的程式，然後寫 ``Inventory`` 。"
"要將物品新增到物品列上時，則需要將 ``Item`` 傳遞給 ``Inventory.add`` 方法。我"
"們可以通過指定型別來強制 Inventory.add 只能接受 Item 型別："

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"另一個在 GDScript 使用型別的優勢為新的 **警告系統** 。自 3.1 版起，當 Godot "
"發現程式碼中出現了可能會在執行時發生問題的程式碼時會即時顯示警告，但是使用者"
"依然可以決定要保留程式碼或是進行修改。稍後將詳細說明。"

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"靜態型別也能讓程式碼補全更加完善。我們將在下方比較動態與靜態型別的補全選項，"
"以 ``PlayerController`` 類別為例。"

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr "如果之前有將節點保存在變數過，輸入句點時不會顯示自動補全建議："

msgid "code completion options for dynamic"
msgstr ""

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"這是因為 body 的定義是動態的，Godot 無法知道傳入函式的節點或數值的型別。若明"
"確聲明型別，則自動補全提示會顯示節點中所有 Public 的方法與變數："

msgid "code completion options for typed"
msgstr ""

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"將來，有型別的 GDScript 也能增加程式碼的效能：我們已經在計劃藍圖上加上 JIT 編"
"譯與其他編譯器改進了！"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"整體上來說，加上型別能帶來更結構化的體驗，有助於避免錯誤以及讓腳本能自行說明"
"功能。對於在團隊中合作或長期專案來說特別實用：研究指出，開發者花費較多的時間"
"閱讀其他人或自己以前寫過但已經忘記的程式碼。程式碼越清楚、結構越明白，就越容"
"易能理解，並能讓開發者更快開始工作。"

msgid "How to use static typing"
msgstr "如何使用靜態型別"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"要定義變數或常數的型別，只需在變數名稱後方加上逗號，再寫上型別。如 ``var "
"heal: int`` 。這樣即可讓變數的型別保持相同："

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr "若只寫冒號而省略型別，則 Godot 會自動推斷型別："

msgid "Currently you can use three types of… types:"
msgstr "目前可以使用三種類型的型別："

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`內建型別 <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr "核心類型與節點 (``Object``, ``Node``, ``Area2D``, ``Camera2D`` …等)"

#, fuzzy
msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"自定類型。請參考新的 :ref:`class_name <doc_scripting_continued_class_name>` "
"功能來瞭解如何將型別註冊到編輯器內。"

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"常數不需要寫型別，因為 Godot 會自動依據指派的值來推斷型別。但一樣可以寫上型別"
"來讓程式碼更清楚。"

msgid "Custom variable types"
msgstr "自定變數型別"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"可以使用任何類別來作為型別，也包含自定類別。在腳本中使用類別作為型別有兩種方"
"法，第一種方法是將要作為型別的腳本預先載入到常數中："

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"而第二種方法則是在建立類別時使用 ``class_name`` 關鍵字。如在上方的範例中，"
"Rifle.gd 會變成這樣："

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"若使用 ``class_name`` ，則 Godot 會將 Rifle 型別全域註冊到編輯器中，之後便可"
"在任何地方使用而無需預載進常數："

msgid "Variable casting"
msgstr "變數型別轉換"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"型別轉換是型別語言的重要概念。型別轉換即為將數值從一種型別轉換至另一種型別。"

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"試想一下遊戲中有 Enemy 物件 ``extends Area2D`` ，要與 Player (附加了 "
"``PlayerController`` 腳本的 ``KinematicBody2D``) 碰撞，則可以使用 "
"``on_body_entered`` 訊號來檢測碰撞。若使用有型別的程式碼，則 "
"``_on_body_entered`` 回呼內偵測的是 ``PhysicsBody2D`` 而非 "
"``PlayerController``。"

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"我們可以使用 ``as`` 型別轉換關鍵字來檢查 ``PhisicsBody2D`` 是否為 Player，並"
"使用冒號 ``:`` 來強制變數使用這個型別。這樣一來便可強制變數保持為 "
"``PlayerController`` 型別："

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"由於我們在處理的是自定型別，若 ``body`` 不是繼承 ``PlayerController`` ，則 "
"``player`` 變數會被設為 ``null`` 。可以藉由檢查 null 來確認 body 是否為玩家。"
"另外，由於我們轉換了型別在輸入時也會有 Player 上完整的自動補全功能。"

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr "若試著轉換型別為內建型別而失敗的話，Godot 會拋出錯誤。"

msgid "Safe lines"
msgstr "安全行"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"我們可以使用型別轉換來確保某行程式碼為安全行。安全行是 Godot 3.1 版新增的新工"
"具，能用來告訴使用者某行可能有歧義的程式碼是否為型別安全。由於我們能在程式碼"
"中混合有型別與動態的程式碼，有時候 Godot 無法確保某個程式碼是否會在執行時產生"
"錯誤。"

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Godot 無法推定型別的狀況通常發生在取得子節點時。以 Timer 為例，我們使用動態程"
"式碼來取得節點並保存在 ``$Timer`` 中。GDScript 支援 `鴨子型別 <https://"
"stackoverflow.com/a/4205163/8125343>`__ ，所以即使 Timer 是 ``Timer`` 型別，"
"Timer 同時也會是其繼承的 ``Node`` 與 ``Object`` 兩個類別。使用動態 GDScript "
"時，只要節點上有我們需要的方法，就不需要去在意節點是什麼型別。"

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"我們可以使用型別轉換來告訴 Godot 在取得節點的時候預期取得什麼型別，如 "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)`` …等。Godot 會確保該型"
"別是否有效，而有效的話則會將腳本編輯器左邊的行號變成綠色。"

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "非安全行 (第 7 行) vs 安全行 (第 6 行與第 8 行)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr "可以在編輯器設定中關閉安全行或更改安全行的色彩。"

msgid "Define the return type of a function with the arrow ->"
msgstr "使用箭頭 -> 來定義函式的回傳值型別"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"要定義函式的回傳值型別，可以在函式定義後加上一個減號與右角括號 ``->`` ，再寫"
"上回傳型別："

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr "型別 ``void`` 表示函式不回傳任何東西。與變數一樣，可以使用任何型別："

msgid "You can also use your own nodes as return types:"
msgstr "也可以使用自定節點來作為回傳型別："

msgid "Typed or dynamic: stick to one style"
msgstr "靜態或動態：只選擇一種風格"

#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"有型別的 GDScript 與動態 GDScript 可以在同一個專案中共存，但我們建議固定一種"
"風格來在程式碼中保持一貫性，團隊成員也應固定來保持一貫。若大家都遵守同一個方"
"針的話，也更容易一起工作並更快地閱讀理解他人的程式碼。"

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"使用型別程式碼可能會需要寫更多程式碼，但同時也能享受剛才提到的優點。下列為使"
"用動態風格的空白腳本範例："

msgid "And with static typing:"
msgstr "加上靜態型別定義："

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"像上面這樣，在虛擬方法中也可以使用型別。訊號回呼與其他方法一樣也可以使用型"
"別。下列為動態風格的 ``body_entered`` 訊號範例："

msgid "And the same callback, with type hints:"
msgstr "而相同的回呼，加上型別定義："

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"``CollisionObject2D`` 可以自由替換為任何自定型別，並自動轉換參數的型別："

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"此例中的 ``bullet`` 變數可以是任何的 ``CollisionObject2D`` ，但這裡我們確保 "
"bullet 是專案中的 ``Bullet`` 節點。若 bullet 是其他如 ``Area2D`` 之類沒有繼"
"承 ``Bullet`` 的節點，則 ``bullet`` 變數會是 ``null`` 。"

msgid "Warning system"
msgstr "警告系統"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""
"有關 GDScript 警告系統的文件已移至 :ref:`doc_gdscript_warning_system` 。"

msgid "Cases where you can't specify types"
msgstr "無法指定型別的情況"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"在結束這篇教學前，我們再來說說無法使用型別定義的一些情況。接下來所有的例子都"
"會 **觸發錯誤** 。"

msgid "You can't use Enums as types:"
msgstr "列舉類型不能作為型別定義："

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr "無法為陣列中個別成員指定型別。下列例子會產生錯誤："

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"無法強制在 ``for`` 迴圈上指定型別，因為 ``for`` 關鍵字迴圈上的每個元素都有不"
"同的型別。也就是說， **不能** 這樣寫："

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "兩個腳本不能互相依賴，會導致循環："

msgid "Summary"
msgstr "總結"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"型別定義的 GDScript 是強力的工具。自 Godot 3.1 版起提供，型別定義能讓使用者撰"
"寫更有結構的程式碼、避免場景錯誤以及能建立延展性更高的系統。在未來，靜態型別"
"也能得益於編譯器的最佳化而有更好的效能。"

msgid "Translation status"
msgstr "翻譯狀態"
