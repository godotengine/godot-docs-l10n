# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript style guide"
msgstr "GDScript 風格指南"

msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"本風格指南列出了撰寫優雅 GDScript 的公約。本指南的目標是要鼓勵寫出乾淨、可閱"
"讀的程式碼，並促進在專案、討論與教學中使用一貫的樣式。希望此一教學也能促進開"
"發自動格式化工具。"

msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"由於 GDScript 類似 Python，本指南啟發自 Python 的 `PEP 8 <https://www.python."
"org/dev/peps/pep-0008/>`__ 程式碼風格指引。"

msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"風格指南並不是一種強制規範。有時候可能會無法符合下列的某些準則，這是則需要自"
"行判斷最佳方法，或是詢問其他開發者的意見。"

msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"一般來說，在專案中或是在團隊成員間保持程式碼風格的一致性比嚴格遵守本指南還要"
"重要。"

msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godot 的內建腳本編輯器預設也使用了許多本公約的規範。可以使用編輯器的協助。"

msgid "Here is a complete class example based on these guidelines:"
msgstr "下列為遵守本方針的完整類別範例："

msgid "Formatting"
msgstr "格式"

msgid "Encoding and special characters"
msgstr "編碼與特殊字元"

msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr "使用 **LF** 換行字元來換行，而不是 CRLF 或 CR。 **(編輯器預設值)**"

msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr "每個檔案都以 LF 換行字元來結束。 **(編輯器預設值)**"

msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"使用不帶 `BOM <https://zh.wikipedia.org/wiki/"
"%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F>` 的 "
"**UTF-8** 。 **(編輯器預設值)**"

msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr "使用 **Tab** 字元來縮排而不是空白字元。 **(編輯器預設值)**"

msgid "Indentation"
msgstr "縮 排"

msgid "Each indent level should be one greater than the block containing it."
msgstr "縮排等級在每個區塊都應增加。"

msgid "**Good**:"
msgstr "**正確例** :"

msgid "**Bad**:"
msgstr "**錯誤例** :"

msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr "使用兩個縮排等級來區分連續行與一般的程式碼區塊。"

msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr "但本規則的例外為陣列、字典與列舉型別。使用單一縮排等級來區分連續行："

msgid "Trailing comma"
msgstr "結尾逗號"

msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""
"在陣列、字典與列舉型別的最後一行末尾加上逗號。這樣一來在重構時就比較容易，且"
"在版本控制系統中比較差異時也更簡單，因為新增新元素時不需要修改上一行。"

msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr "單行列表中不需要加上結尾逗號，所以下列例子中未加上逗號。"

msgid "Blank lines"
msgstr "空行"

msgid "Surround functions and class definitions with two blank lines:"
msgstr "在函式與類別定義周圍加上兩個空行："

msgid "Use one blank line inside functions to separate logical sections."
msgstr "在函式中則使用單一空行來區分不同的邏輯區塊。"

msgid ""
"We use a single line between classes and function definitions in the class "
"reference and in short code snippets in this documentation."
msgstr ""

msgid "Line length"
msgstr "每行字數限制"

msgid "Keep individual lines of code under 100 characters."
msgstr "將每行程式碼控制在 100 個字元內。"

msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"若可以的話，儘量將每行控制在 80 個字元內。這樣一來在小螢幕或是在外部文字編輯"
"器中左右並排開啟兩個腳本時比較容易閱讀。舉例來說，需要對照兩個版本的時候。"

msgid "One statement per line"
msgstr "一行一個陳述式"

msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"千萬不要將多個陳述式放在單行內。C 語言程式設計師們，請別這麼做，也不要把條件"
"陳述式寫在單行內。"

msgid "The only exception to that rule is the ternary operator:"
msgstr "唯一的例外是三元運算子："

msgid "Format multiline statements for readability"
msgstr ""

msgid ""
"When you have particularly long ``if`` statements or nested ternary "
"expressions, wrapping them over multiple lines improves readability. Since "
"continuation lines are still part of the same expression, 2 indent levels "
"should be used instead of one."
msgstr ""

msgid ""
"GDScript allows wrapping statements using multiple lines using parentheses "
"or backslashes. Parentheses are favored in this style guide since they make "
"for easier refactoring. With backslashes, you have to ensure that the last "
"line never contains a backslash at the end. With parentheses, you don't have "
"to worry about the last line having a backslash at the end."
msgstr ""

msgid ""
"When wrapping a conditional expression over multiple lines, the ``and``/"
"``or`` keywords should be placed at the beginning of the line continuation, "
"not at the end of the previous line."
msgstr ""

msgid "Avoid unnecessary parentheses"
msgstr "避免不必要的括號"

#, fuzzy
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations or wrapping over multiple lines, they only "
"reduce readability."
msgstr ""
"避免在運算式與條件陳述式中加上不必要的括號。除非是為了運算子的順序，否則加上"
"括號只會降低可讀性。"

msgid "Boolean operators"
msgstr "布林運算子"

msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "為了可存取性，應優先使用英語的布林運算子："

msgid "Use ``and`` instead of ``&&``."
msgstr "使用 ``and`` 而不是 ``&&`` 。"

msgid "Use ``or`` instead of ``||``."
msgstr "使用 ``or`` 而不是 ``||`` 。"

msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"也可以在布林運算子周圍加上括號來避免歧義。這樣一來比較長的運算式就比較好讀。"

msgid "Comment spacing"
msgstr "註釋中的空白"

msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"一般的註釋應該以空白開始，但註解掉的程式碼則不用。這樣一來比較能區分文字註解"
"與停用掉的程式碼。"

msgid ""
"In the script editor, to toggle the selected code commented, press :kbd:"
"`Ctrl + K`. This feature adds a single # sign at the start of the selected "
"lines."
msgstr ""
"在腳本編輯器中，可以按 :kbd:`Ctrl + K` 來將選擇的程式碼註解或取消註解。這個功"
"能會在所選行前加上一個 # 符號。"

msgid "Whitespace"
msgstr "空白"

msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"在運算元周圍與逗號後加上一個空白。另外，也請避免在字典參照與函式呼叫中加上多"
"餘的空白。"

msgid "Don't use spaces to align expressions vertically:"
msgstr "不要使用空白來垂直對齊運算式："

msgid "Quotes"
msgstr "引號"

msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"儘量使用雙引號，除非使用單引號能在字串中跳脫比較少的字元。請參考下方範例："

msgid "Numbers"
msgstr "數字"

msgid ""
"Don't omit the leading or trailing zero in floating-point numbers. "
"Otherwise, this makes them less readable and harder to distinguish from "
"integers at a glance."
msgstr ""
"不要忽略浮點數中的前置或後置 0。以免降低數字的可讀性，並難以一眼區分與整數的"
"不同。"

msgid "**Good**::"
msgstr "\\ **Good**::"

msgid "**Bad**::"
msgstr "\\ **Bad**::"

msgid ""
"Use lowercase for letters in hexadecimal numbers, as their lower height "
"makes the number easier to read."
msgstr "16 進位數字使用小寫字母，因為當字母比數字矮的時候比較好閱讀數字。"

msgid ""
"Take advantage of GDScript's underscores in literals to make large numbers "
"more readable."
msgstr "在字面值中通過 GDScript 的底線功能來讓大數更好閱讀。"

msgid "Naming conventions"
msgstr "命名公約"

msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"下列命名公約遵守 Godot Engine 風格。若不遵守這些規則會讓程式碼與內建的命名規"
"範衝突，進而讓程式碼不一致。"

msgid "File names"
msgstr "檔案名稱"

msgid ""
"Use snake_case for file names. For named classes, convert the PascalCase "
"class name to snake_case::"
msgstr ""
"檔案名稱使用 snake_case 。有名稱的類別則將 PascalCase 的類別名稱轉為 "
"snake_case："

msgid ""
"This is consistent with how C++ files are named in Godot's source code. This "
"also avoids case sensitivity issues that can crop up when exporting a "
"project from Windows to other platforms."
msgstr ""
"這種命名方式與 Godot 原始碼中的 C++ 檔案保持一致，另外也能從 Windows 匯出到其"
"他平台時發生區分大小寫的問題。"

msgid "Classes and nodes"
msgstr "類別與節點"

msgid "Use PascalCase for class and node names:"
msgstr "類別與節點名稱使用 PascalCase："

msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr "當將類別載入只常數與變數時也使用 PascalCase："

msgid "Functions and variables"
msgstr "函式與變數"

msgid "Use snake\\_case to name functions and variables:"
msgstr "函式名稱與變數使用 snake\\_case："

msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"在需要由使用者複寫的虛擬方法、Private 函式、Private 變數前加上一個底線 "
"(\\_)："

msgid "Signals"
msgstr "訊號"

msgid "Use the past tense to name signals:"
msgstr "訊號使用過去式來命名："

msgid "Constants and enums"
msgstr "常數與列舉型別"

msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr "常數使用 CONSTANT\\_CASE，每個字母都大寫，使用底線 (\\_) 來區分單詞："

msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"列舉型別的 **名稱** 使用 PascalCase，列舉的成員則使用 CONSTANT\\_CASE，因為這"
"些成員為常數："

msgid "Code order"
msgstr "程式碼順序"

msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"第一個段落為程式碼順序，有關格式，請參考 :ref:`formatting` 。有關命名公約，請"
"參考 :ref:`naming_coventions` 。"

msgid "We suggest to organize GDScript code this way:"
msgstr "建議按照這種方法來組織 GDScript 程式碼："

msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"我們最佳化了順序，來讓程式碼從上到下閱讀時比較容易，也幫助首次閱讀程式碼的開"
"發者能瞭解程式如何運作的，並避免因變數宣告順序導致的錯誤。"

msgid "This code order follows four rules of thumb:"
msgstr "這個程式碼順序遵守了四個經驗法則："

msgid "Properties and signals come first, followed by methods."
msgstr "先寫屬性與訊號，然後寫方法。"

msgid "Public comes before private."
msgstr "先寫 Public 再寫 Private。"

msgid "Virtual callbacks come before the class's interface."
msgstr "先寫虛擬回呼函式，再寫類別介面。"

msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"先寫物件的結構與初始化函式 ``_init`` 與 ``_ready`` ，再寫會在執行環境修改物件"
"的函式。"

msgid "Class declaration"
msgstr "類別宣告"

msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr "若程式碼是要在編輯器中執行的，請在腳本的第一行加上 ``tool`` 關鍵字。"

msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""
"接著若有必要，加上 ``class_name`` 。可以使用這個功能來將 GDScript 檔案轉為專"
"案中的全域型別。更多資訊請參考 :ref:`doc_gdscript` 。"

msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr "接著，若類別繼承內建型別，加上 ``extends`` 關鍵字。"

msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""
"接下來則是可選擇性地加上 DocString 註解。DocString 註解可以用來向團隊成員解釋"
"這個類別的是什麼角色以及其他開發者該如何使用這個類別…等。"

msgid "Signals and properties"
msgstr "訊號與屬性"

msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr "接著是訊號宣告，再來是屬性，也就是說成員變數要寫在 DocString 之後。"

msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr "列舉型別應該寫在訊號之後，因為可以使用列舉性來匯出其他屬性的提示。"

msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr "接著按照順序是常數、匯出變數、Public、Private 以及 Onready 變數。"

msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""
"GDScript 編譯器會在 ``_ready`` 回呼之前計算 onready 變數的值。可以使用 "
"onready 來快取節點相依性，也就是用來取得類別中需要用到的子節點。也就是上方範"
"例中做的。"

msgid "Member variables"
msgstr "成員變數"

msgid ""
"Don't declare member variables if they are only used locally in a method, as "
"it makes the code more difficult to follow. Instead, declare them as local "
"variables in the method's body."
msgstr ""
"若變數只會在方法中使用，就不要定義成成員變數。因為定義成成員變數會讓程式碼難"
"以追蹤變數在哪裡使用。請在方法中定義區域變數。"

msgid "Local variables"
msgstr "區域變數"

msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""
"儘量在首次使用變數前定義區域變數。這樣一來在讀程式碼的時候就比較容易理解，而"
"不需要為了找變數在哪裡定義的而往前翻太多。"

msgid "Methods and static functions"
msgstr "方法與靜態函式"

msgid "After the class's properties come the methods."
msgstr "方法寫在類別的屬性後。"

msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""
"先寫 ``_init()`` 回呼函式，因為 Godot 會在記憶體中建立物件時呼叫 _init()。接"
"著是 ``_ready()`` 回呼函式，Godot 會在節點被新增至場景樹時呼叫 _ready()。"

msgid ""
"These functions should come first because they show how the object is "
"initialized."
msgstr "應該先寫這幾個函式，因為這個順序是物件初始化的順序。"

msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""
"其他內建的虛擬回呼函式，如 ``_unhandled_input()`` 與 ``_physics_process`` 則"
"應該接在後面。這幾個函式控制了物件的主循環以及與遊戲引擎的互動方法。"

msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr "剩下的則依序為類別介面、Public 與 Private 方法。"

msgid "Static typing"
msgstr "靜態型別"

msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"自 Godot 3.1 版以後，GDScript 支援 :ref:`可選的靜態型別定義 "
"<doc_gdscript_static_typing>` 。"

msgid "Declared types"
msgstr "宣告型別"

msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr "若要宣告變數的型別，請使用 ``<變數>: <型別>`` ："

msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr "若要宣告函數的回傳型別，請使用 ``-> <型別>`` ："

msgid "Inferred types"
msgstr "推斷型別"

msgid "In most cases you can let the compiler infer the type, using ``:=``:"
msgstr "大多數情況下，我們都直接使用 ``:=`` 來讓編輯器推斷型別："

msgid ""
"However, in a few cases when context is missing, the compiler falls back to "
"the function's return type. For example, ``get_node()`` cannot infer a type "
"unless the scene or file of the node is loaded in memory. In this case, you "
"should set the type explicitly."
msgstr ""
"然而，有時候會因為上下文不足而讓編譯器無法得知函數的回傳型別。舉例來說，除非"
"已經將場景或節點檔案載入至記憶體，否則 ``get_node()`` 無法進行型別推斷。這時"
"候，就需要明確設定型別。"

msgid ""
"Alternatively, you can use the ``as`` keyword to cast the return type, and "
"that type will be used to infer the type of the var."
msgstr ""

msgid ""
"This option is also considered more :ref:`type-"
"safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
