# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Resources"
msgstr "資源"

msgid "Nodes and resources"
msgstr "節點與資源"

msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""
"直到這個教學以前，我們都專注到 Godot 中的 :ref:`Node <class_Node>` 類別，因為"
"節點是編寫行為以及大多數引擎功能所需要的東西。但還有另一種一樣重要的資料型"
"別： :ref:`Resource <class_Resource>` 。"

msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"*節點* 提供功能：繪製 Sprite、3D 模型、模擬物理、排列使用者界面…等。 **資源"
"** 則是一個 **資料容器** 。資源本身並不會做任何事，反而是節點會使用放入了資料"
"的資源。"

msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ``."
"tscn`` or an ``.scn`` file), an image, a script... Here are some "
"``Resource`` examples: :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`."
msgstr ""
"任何 Godot 從硬碟中保存或讀取的都是資源。無論是場景（ ``.tscn`` 或 ``.scn`` "
"檔）、圖片、腳本…等。這裡有一些 ``Resource`` 的例子： :ref:`Texture "
"<class_Texture>` 、 :ref:`Script <class_Script>` 、 :ref:`Mesh "
"<class_Mesh>` 、 :ref:`Animation <class_Animation>` 、 :ref:`AudioStream "
"<class_AudioStream>` 、 :ref:`Font <class_Font>` 、 :ref:`Translation "
"<class_Translation>` 。"

msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"當引擎從硬碟載入資源時 **只會載入一次** 。若記憶體內已經有該資源的拷貝，則再"
"嘗試載入同樣的資源每次都會回傳相同的拷貝。因為資源至包含資料，所以不需要進行"
"複製。"

msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"所有的物件，無論是節點或屬性，都能匯出屬性。屬性有許多種類，如 String、"
"Integer、Vector2…等，這些所有的型別都可以轉換為資源。這表示節點與資源都還可以"
"包含資源作為屬性："

msgid "External vs built-in"
msgstr "外部 vs 內建"

msgid "There are two ways to save resources. They can be:"
msgstr "要保存資源有兩種方法："

msgid "**External** to a scene, saved on the disk as individual files."
msgstr "**外部** ，放在場景外部，保存在硬碟上作為獨立的檔案。"

msgid ""
"**Built-in**, saved inside the ``.tscn`` or the ``.scn`` file they're "
"attached to."
msgstr "**內建** ，將資源保存在所附加的 ``.tscn`` 或是 ``.scn`` 檔內。"

msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"更具體來講，假設在 :ref:`Sprite <class_Sprite>` 節點中有一個 :ref:`Texture "
"<class_Texture>` ："

msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr "點擊資源預覽可以讓我們檢視並編輯資源的屬性。"

msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"Path 屬性告訴我們資源來自哪裡。在這個例子中是來自檔名為 ``robi.png`` 的 PNG "
"圖片。當資源像這樣來自檔案時，即為外部資源。若將 Path 清空或 Path 為空，則變"
"成內建資源。"

msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path ``\"res://robi.png\"`` "
"and save, Godot will save the image inside the ``.tscn`` scene file."
msgstr ""
"內建與外部資源的切換會在保存場景時發生。在上方的例子中，若將 path ``\"res://"
"robi.png\"`` 清空並保存，則 Godot 會將圖片保存在 ``.tscn`` 場景檔案裡。"

msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"就算保存內建資源，當實體化場景多次，引擎也還是只會載入一次該資源的副本。"

msgid "Loading resources from code"
msgstr "在程式碼中載入資源"

msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"要從程式碼中載入資源有兩種方法。第一種方法是使用 ``load()`` 函式，可以在任何"
"時候使用："

msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""
"另外也可以 ``preload`` （預載）資源。與 ``load`` 不同的是，這個函式會從硬碟中"
"讀取檔案並在編譯時期載入。因此，這種方法無法使用保存在變數內的路徑而必須使用"
"常數字串。"

msgid "Loading scenes"
msgstr "載入場景"

msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""
"場景也是資源，但有一點需要注意。保存在硬碟上的場景是 :ref:`PackedScene "
"<class_PackedScene>` 型別的資源。這種場景是被打包在資源內的。"

msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_method_instance>` method."
msgstr ""
"要取得場景的實體，則必須使用 :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 方法。"

msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"這個方法會在場景結構中建立節點並對節點進行組態設定，最後回傳場景的根節點。接"
"著便能將其新增為其他節點的子節點。"

msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` function is fast, you can create new "
"enemies, bullets, effects, etc. without having to load them again from disk "
"each time. Remember that, as always, images, meshes, etc. are all shared "
"between the scene instances."
msgstr ""
"這種做法有幾種優點。由於 :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 很快，所以可以建立新的敵人、子彈、效果…"
"等而不需每次都從硬碟上載入。要記得，跟之前提到的一樣，圖片、網格…等都是場景間"
"共通的。"

msgid "Freeing resources"
msgstr "釋放資源"

msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""
"當不需要再使用一個 ``Resource`` 時，資源會自動釋放自己。由於在大多數情況下，"
"資源都包含在節點中，所以當釋放節點後引擎就會自動釋放所有沒有任何節點用到的資"
"源。"

msgid "Creating your own resources"
msgstr "建立自己的資源"

msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (\\*.tres, \\*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""
"就像 Godot 中的任何物件一樣，使用者也可以自己編寫資源。資源腳本繼承了能夠在物"
"件屬性、序列化文字、與二進位資料 (\\*.tres、\\*.res) 間自由轉換的能力。資源也"
"從 Reference 型別上繼承了引用計數的記憶體管理。"

msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""
"這比起其他替代類型的資料結構如 JSON、CSV、或是自定 TXT 檔多了許多直接的優點。"
"使用者只能將這些資源匯入為 :ref:`Dictionary <class_Dictionary>` (JSON) 或是匯"
"入為 :ref:`File <class_File>` 來解析。Resource 與這些型別不同的是它繼承了 :"
"ref:`Object <class_Object>` 、 :ref:`Reference <class_Reference>` 、與 :ref:"
"`Resource <class_Resource>` 的功能："

msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr "可以定義常數，所以不需要仰賴其他資料欄位或是物件。"

msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""
"可以定義方法，包含為屬性設定 setter 與 getter 方法。這樣以來即可抽象化與封裝"
"基礎資料。若 Resource 腳本的結構需要修改時便不需要跟著改動遊戲。"

msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr "可以定義訊號，故 Resource 可以在其所管理的資料發生更改時觸發反應。"

msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr "可以定義屬性，這樣一來使用者便能 100% 確認資料存在。"

msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""
"Resource 的自動序列化與復原序列化 (Serialization/Deserialization) 是 Godot "
"Engine 的內建功能。使用者毋須自己實作資源檔案資料的匯入／匯出。"

msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr "資源也可以遞歸序列化子資源，這表示使用者可以設計更複雜的資料結構。"

msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""
"使用者能將資源保存為對版本控制友善的文字檔 (\\*.tres) 。在匯出遊戲後，Godot "
"會將資源檔案序列化為二進位檔 (\\*.res) 來提高速度與壓縮率。"

msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""
"Godot Engine 的屬性面板可開箱即用地對資源檔案算繪與編輯。因此，使用者通常不需"
"要自己實作視覺化或編輯資料的自定邏輯。可以從在檔案系統 Dock 中對資源檔案點兩"
"下，或是在屬性面板中點擊資料夾圖示並在對話框中打開檔案來進行。"

msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr "資源也可以擴充除了基本 Resource 型別以外的 **其他** 資源型別。"

msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr "在 Godot 中可以很輕鬆地在屬性面板中建立自定資源。"

msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""
"在屬性面板中建立一個純資源。只要腳本是繼承自該類型，也可以建立衍生自資源的型"
"別。"

msgid "Set the ``script`` property in the Inspector to be your script."
msgstr "在屬性面板中將 ``script`` 屬性設為你的腳本。"

msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""
"接著屬性面板中便會顯示資源腳本的自定屬性。若有人編輯了屬性值並保存資源，則屬"
"性面板也會序列化自定屬性。要從屬性面板中保存資源，點擊屬性面板的工具選單（右"
"上角），並選擇「保存」或「另存新檔」。"

#, fuzzy
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_gdscript_basics_class_name>`, then it streamlines the process. Defining "
"a name for your script alone will add it to the Inspector's creation dialog. "
"This will auto-add your script to the Resource object you create."
msgstr ""
"若腳本所使用的語言支援 :ref:`腳本類別 "
"<doc_scripting_continued_class_name>` ，則這個過程還可以再簡化。只需要定義腳"
"本的名稱，就會將類別新增到屬性面板的建立對話框中，如此一來會自動將腳本新增至"
"建立的資源物件中。"

msgid "Let's see some examples."
msgstr "來看看一些例子。"

msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""
"資源腳本與 Unity 的 ScriptableObject 類似。屬性面板提供了對自定資源的內建資"
"源。但若有需要，使用者也可以自己設計基於 Control 的工具腳本，並與 :ref:"
"`EditorPlugin <class_EditorPlugin>` 結合使用來為資源的資料建立自定的視覺界面"
"與編輯器。"

msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""
"Unreal Engine 4 的 DataTable 與 CurveTable 也很容易能通過資源腳本來重現。"
"DataTable 就是映射到自定結構的字串，與 Dictionary 映射字串到一個第二層自定資"
"源腳本的做法類似。"

msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr "除了直接在行內寫上字典值，也可以…"

msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr "從試算表中匯入整張表的值並產生索引鍵/值組，或…"

msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""
"在編輯器中設計視覺界面並製作一個簡單的插件來在開啟這類資源型別的時候顯示在屬"
"性面板中。"

msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""
"CurveTable 是同樣的東西，不同的地方是 CurveTable 是映射到一組以浮點數為值的陣"
"列或 :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` 資源物件。"

msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""
"請注意，資源檔案 (\\*.tres/\\*.res) 會檔案中保存資源所使用的腳本路徑。載入"
"後，資源會抓取並以擴充其型別的方式載入腳本。這表示將無法指派子類別，如腳本的"
"內部類別（如在 GDScript 內使用 ``class`` 關鍵字）。Godot 不會正確地序列化腳本"
"內子類別的自定屬性。"

msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
"下方的例子裡，Godot 會載入 ``Node`` 腳本，並確認其是否繼承了 ``Resource`` ，"
"然後判斷在 Resource 物件上載入腳本失敗，因其型別並不相容。"

msgid "Translation status"
msgstr "翻譯狀態"
