# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# features"
msgstr "C# 功能"

msgid ""
"This page provides an overview of the commonly used features of both C# and "
"Godot and how they are used together."
msgstr "本頁簡介了 C# 與 Godot 常見的功能，以及該如何互相配合。"

msgid "Type conversion and casting"
msgstr "型別轉換"

msgid ""
"C# is a statically typed language. Therefore, you can't do the following:"
msgstr "C# 是靜態型別語言。所以，無法這麼做："

msgid ""
"The method ``GetNode()`` returns a ``Node`` instance. You must explicitly "
"convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""
"``GetNode()`` 方法會回傳 ``Node`` 實體。必須要明確將回傳值轉換為所需要的型"
"別，在此例中為 ``Sprite`` 。"

msgid "For this, you have various options in C#."
msgstr "為此，在 C# 中有各種選項。"

msgid "**Casting and Type Checking**"
msgstr "**型別轉換與型別檢查**"

msgid ""
"Throws ``InvalidCastException`` if the returned node cannot be cast to "
"Sprite. You would use it instead of the ``as`` operator if you are pretty "
"sure it won't fail."
msgstr ""
"使用這種方式時，若回傳的結果無法轉換為 Sprite 的話會拋出 "
"``InvalidCastException`` 。若非常確定不會失敗的話，可以使用這種方式來代替 "
"``as`` 運算子。"

msgid "**Using the AS operator**"
msgstr "**使用 AS 運算子**"

msgid ""
"The ``as`` operator returns ``null`` if the node cannot be cast to Sprite, "
"and for that reason, it cannot be used with value types."
msgstr ""
"``as`` 算子會在節點無法轉換為 Sprite 時回傳 ``null`` ，因此，無法與實值型別一"
"起使用。"

msgid "**Using the generic methods**"
msgstr "**使用泛型方法**"

msgid ""
"Generic methods are also provided to make this type conversion transparent."
msgstr "也可以使用泛型方法來透明轉換型別。"

msgid ""
"``GetNode<T>()`` casts the node before returning it. It will throw an "
"``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""
"``GetNode<T>()`` 可以在執行前就轉換節點型別。當節點無法轉換為需要的型別是，會"
"拋出 ``InvalidCastException`` 。"

msgid ""
"``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if "
"the node cannot be cast to the desired type."
msgstr ""
"``GetNodeOrNull<T>()`` 會使用 ``as`` 運算子，且會在節點無法轉換為需要的型別時"
"回傳 ``null`` 。"

msgid "**Type checking using the IS operator**"
msgstr "**使用 IS 運算子來進行型別檢查**"

msgid ""
"To check if the node can be cast to Sprite, you can use the ``is`` operator. "
"The ``is`` operator returns false if the node cannot be cast to Sprite, "
"otherwise it returns true."
msgstr ""
"若要檢查節點是否可被轉換為 Sprite，可以使用 ``is`` 運算子。``is`` 運算子會在"
"無法將節點轉換為 Sprite 時回傳 false，否則將回傳 true。"

msgid ""
"For more advanced type checking, you can look into `Pattern Matching "
"<https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""
"有關更多型別檢查，請參考 `模式比對 <https://docs.microsoft.com/zh-tw/dotnet/"
"csharp/pattern-matching>`_ 。"

msgid "C# signals"
msgstr "C# 訊號"

msgid ""
"For a complete C# example, see the **Handling a signal** section in the step "
"by step :ref:`doc_scripting` tutorial."
msgstr ""
"完整的 C# 例子請參考按部就班 :ref:`doc_scripting` 教學中的 **處理訊號** 一"
"節。"

msgid ""
"Declaring a signal in C# is done with the ``[Signal]`` attribute on a "
"delegate."
msgstr "在 C# 中，可在 Delegate 上加上 ``[Signal]`` 屬性來宣告訊號。"

msgid ""
"These signals can then be connected either in the editor or from code with "
"``Connect``. If you want to connect a signal in the editor, you need to "
"(re)build the project assemblies to see the new signal. This build can be "
"manually triggered by clicking the “Build” button at the top right corner of "
"the editor window."
msgstr ""
"接著這些訊號便可以在編輯器中或使用 ``Connect` 來在程式碼中進行連接。若像在編"
"輯器中連接訊號，則需要建置 (或重新建置) 專案組件才能看到新的訊號。可以通過點"
"擊編輯器視窗右上角的 [建置] 按鈕來手動觸發建置。"

msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr "使用 ``EmitSignal`` 方法來送出訊號。"

msgid ""
"Notice that you can always reference a signal name with the ``nameof`` "
"keyword (applied on the delegate itself)."
msgstr ""
"請注意，可以使用 ``nameof`` 關鍵字來參照訊號名稱 (套用於 delegate 自身)。"

#, fuzzy
msgid ""
"It is possible to bind values when establishing a connection by passing a "
"Godot array."
msgstr "也可以在連接時通過傳遞物件陣列來繫結數值。"

msgid ""
"Signals support parameters and bound values of all the `built-in types "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/"
"built-in-types-table>`_ and Classes derived from :ref:`Godot.Object "
"<class_Object>`. Consequently, any ``Node`` or ``Reference`` will be "
"compatible automatically, but custom data objects will need to extend from "
"`Godot.Object` or one of its subclasses."
msgstr ""
"訊號支援參數與繫結所有 `內建型別s <https://docs.microsoft.com/zh-tw/dotnet/"
"csharp/language-reference/keywords/built-in-types-table>`_ 與繼承 :ref:"
"`Godot.Object <class_Object>` 的值。因此，任何 ``Node`` 或 ``Reference`` 都自"
"動相容，但自定資料物件則需要繼承 ``Godot.Object`` 或其任一子類別。"

msgid ""
"Finally, signals can be created by calling ``AddUserSignal``, but be aware "
"that it should be executed before any use of said signals (with ``Connect`` "
"or ``EmitSignal``)."
msgstr ""
"最後，可以通過 ``AddUserSignal`` 來建立訊號。但請注意 AddUserSignal 應該在 "
"(通過 ``Connect`` 或 ``EmitSignal``) 使用前執行。"

msgid "Preprocessor defines"
msgstr "定義前置處理器"

msgid ""
"Godot has a set of defines that allow you to change your C# code depending "
"on the environment you are compiling to."
msgstr "Godot 中有一系列的定義，可以用來依據編譯環境來更改 C# 程式碼。"

msgid ""
"If you created your project before Godot 3.2, you have to modify or "
"regenerate your `csproj` file to use this feature (compare "
"``<DefineConstants>`` with a new 3.2+ project)."
msgstr ""
"若是在 Godot 3.2 版前建立的專案，則需要更改或重新產生 **csproj** 來使用本功"
"能 (請對照 3.2+ 版專案中的 ``<DefineConstants>`` )。"

msgid "Examples"
msgstr "範例"

msgid "For example, you can change code based on the platform:"
msgstr "例如，可以依據平台來更改程式碼："

msgid ""
"Or you can detect which engine your code is in, useful for making cross-"
"engine libraries:"
msgstr "或者也可以依據程式碼所在引擎來偵測，對於跨引擎函式庫來說很實用："

msgid "Full list of defines"
msgstr "完整的定義列表"

msgid "``GODOT`` is always defined for Godot projects."
msgstr "在 Godot 中，永遠都有定義 ``GODOT`` 。"

msgid ""
"One of ``GODOT_64`` or ``GODOT_32`` is defined depending on if the "
"architecture is 64-bit or 32-bit."
msgstr ""
"依據目前架構是 64 位元還是 32 位元，會有定義 ``GODOT_64`` 或 ``GODOT_32`` 。"

#, fuzzy
msgid ""
"One of ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, ``GODOT_ANDROID``, "
"``GODOT_IOS``, ``GODOT_HTML5``, or ``GODOT_SERVER`` depending on the OS. "
"These names may change in the future. These are created from the "
"``get_name()`` method of the :ref:`OS <class_OS>` singleton, but not every "
"possible OS the method returns is an OS that Godot with Mono runs on."
msgstr ""
"依據作業系統，會定義 ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, "
"``GODOT_ANDROID``, ``GODOT_IOS``, ``GODOT_HTML5`` 或 ``GODOT_SERVER`` 中其中"
"一個。這些名稱未來可能會更改。這幾個名稱是從 :ref:``OS <class_OS>`` 單例中的 "
"``get_name()`` 定義來的，但並非所有該方法回傳的作業系統都是 Godot 與 Mono 能"
"執行的平台。"

msgid ""
"When **exporting**, the following may also be defined depending on the "
"export features:"
msgstr "**匯出** 時，根據匯出的功能也有下列定義："

msgid ""
"One of ``GODOT_PC``, ``GODOT_MOBILE``, or ``GODOT_WEB`` depending on the "
"platform type."
msgstr ""
"依據平台類型，會定義 ``GODOT_PC``, ``GODOT_MOBILE`` 或 ``GODOT_WEB`` 其中一"
"個。"

msgid ""
"One of ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` on Android only "
"depending on the architecture."
msgstr ""
"在 Android 上會依據架構定義 ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` 其中"
"一個。"

msgid ""
"One of ``GODOT_ARM64`` or ``GODOT_ARMV7`` on iOS only depending on the "
"architecture."
msgstr "在 iOS 上會依據架構定義 ``GODOT_ARM64`` or ``GODOT_ARMV7`` 其中一個。"

msgid ""
"Any of ``GODOT_S3TC``, ``GODOT_ETC``, and ``GODOT_ETC2`` depending on the "
"texture compression type."
msgstr ""
"依據紋理貼圖壓縮類型，會定義 ``GODOT_S3TC``, ``GODOT_ETC`` 或 "
"``GODOT_ETC2``。"

msgid ""
"Any custom features added in the export menu will be capitalized and "
"prefixed: ``foo`` -> ``GODOT_FOO``."
msgstr ""
"所有從匯出選單中新增的自定功能都會被轉成大寫並加上前置詞： ``foo`` -> "
"``GODOT_FOO`` 。"

msgid ""
"To see an example project, see the OS testing demo: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/os_test"
msgstr ""
"若欲檢視範例專案，請參考作業系統示範專案： https://github.com/godotengine/"
"godot-demo-projects/tree/master/misc/os_test"

msgid "Translation status"
msgstr "翻譯狀態"
