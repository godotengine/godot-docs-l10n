# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Getting started with Visual Scripting"
msgstr "視覺腳本入門"

msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""
"就像 Godot 中的其他功能一樣，比起複製或整合那些與目前工作流程不合的第三方解決"
"方案，我們更優先考量良好的體驗。因此我們便寫了自家版的視覺腳本，相信這個功能"
"與 Godot 更合用。"

msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr "在 Godot 中，在編輯器分頁中使用視覺腳本就與一般腳本沒什麼兩樣"

msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""
"事實上，視覺腳本在 Godot 中整合得這麼好，真的很難想像這功能是 3.0 版才新增"
"的。這是因為在編輯的時候，剩下的 Godot 面板扮演了類似調色盤的角色，可以拖放各"
"種資訊到腳本畫布上："

msgid "Creating a script"
msgstr "建立腳本"

msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""
"建立腳本的方法就與其他腳本語言一樣：在場景中選擇任意節點並點擊場景樹 Dock 右"
"上角的 [新增腳本] 按鈕："

msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""
"開啟後，請從下拉選單中選擇「VisualScript」腳本類型。腳本的副檔名必須是「.vs」"
"(代表視覺腳本 VisualScript！)。"

msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr "最後，會打開腳本編輯器，接著便可以開始編輯視覺腳本："

msgid "Adding a function"
msgstr "新增函式"

msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""
"與其他視覺腳本實作不同，Godot 中的視覺腳本大部分都基於函式。會基於函式是因為"
"視覺腳本使用了與其他腳本引擎相同的介面來與引擎溝通。Godot 中，腳本介面為通用"
"的，所有的實作都是依照介面來實作的。"

msgid "A function is an individual canvas with nodes connected."
msgstr "函式是與節點連接的獨立畫布。"

msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr "單一腳本可以包含任何函式，每個函式都有自己的畫布，並可以進一步組織。"

msgid "There are three main ways to add functions in a script:"
msgstr "要新增函式到腳本中有三種主要方法："

msgid "Overriding a virtual function"
msgstr "複寫虛擬函式"

msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""
"在 Godot 中絕大多數的節點與其他型別的物件都包含了虛擬函式。這些函式會在某些事"
"件發生時被呼叫 (也就是指執行程式碼)，並且可以在參照文件中找到這些函式。虛擬函"
"式會在按下成員面板上 [複寫] 圖示時列出來："

msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""
"在下列範例中，某個函式會在節點載入並加入執行中場景時被執行。為此，會複寫 "
"_ready() 虛擬函式："

msgid "Finally, a canvas appears for this function, showing the override:"
msgstr "最後，該函式的畫布會顯示出來，顯示我們覆寫的函式："

msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr "當函式有回傳值，則會顯示回傳節點，並提供回傳值："

msgid "Connecting a signal to a function"
msgstr "連接訊號至方法"

msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""
"在場景樹中的節點會在某些事情發生時送出訊號。Godot 在各種地方都使用訊號。典型"
"的例子為按下按鈕會送出「pressed」訊號。"

msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""
"要連接訊號，必須先選擇節點，並打開節點分頁。這裡可以看到各個訊號。看到訊號"
"後，點擊「pressed」訊號："

msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""
"之後會打開連接對話框。在此對話框中，必須選擇訊號要連接的節點，以及要接收訊號"
"的函式："

msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr "好了之後，在腳本中就會建立新的函式，而訊號也會自動連接到函式上："

msgid "Creating a function manually"
msgstr "手動建立函式"

msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""
"最後一種建立函式的方法便是手動建立。一般來說，除非特別需要，否則不常用到這種"
"方法。自定函式是用來給其他腳本 (或同一個腳本) 手動呼叫用的。自定函式的主要用"
"途是用來將一些大函式且分成各個易於管理的小區塊，並在視覺程式碼中重複使用這些"
"片段。"

msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr "要手動建立函式，點擊大大的 [加號] 按鈕，即可以預設名稱建立函式："

msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr "接著會建立新函式，只要點兩下就可以更改函式名稱："

msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""
"如果要修改函式可以接收的「參數」(即為呼叫此函式是傳入的值)，只需要點擊 "
"Function 節點並看到屬性面板："

msgid "More on that will be explained later in this document."
msgstr "詳情會在本文件的稍後說明。"

msgid "Translation status"
msgstr "翻譯狀態"
