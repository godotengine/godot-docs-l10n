# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Singletons (AutoLoad)"
msgstr "單例（Autoload）"

msgid "Introduction"
msgstr "簡介"

msgid ""
"Godot's scene system, while powerful and flexible, has a drawback: there is "
"no method for storing information (e.g. a player's score or inventory) that "
"is needed by more than one scene."
msgstr ""
"Godot 的場景系統雖然很強大又很彈性，但有個缺點：無法儲存多個場景間需要共享的"
"資訊（如，玩家的分數或物品列）。"

msgid ""
"It's possible to address this with some workarounds, but they come with "
"their own limitations:"
msgstr "雖然有一些臨時解決方法可以處理這個問題，但這些方法都有各自的局限性："

msgid ""
"You can use a \"master\" scene that loads and unloads other scenes as its "
"children. However, this means you can no longer run those scenes "
"individually and expect them to work correctly."
msgstr ""
"使用一個「master」場景作為主場景，並將所有其他場景都載入為子場景。但用這種方"
"法表示將無法單獨正常執行這些場景。"

msgid ""
"Information can be stored to disk in ``user://`` and then loaded by scenes "
"that require it, but frequently saving and loading data is cumbersome and "
"may be slow."
msgstr ""
"使用 ``res://`` 將資訊保存在硬碟上，並在需要的場景中載入。但頻繁保存與讀取資"
"料很麻煩，而且可能會拖慢速度。"

msgid ""
"The `Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_ "
"is a useful tool for solving the common use case where you need to store "
"persistent information between scenes. In our case, it's possible to reuse "
"the same scene or class for multiple singletons as long as they have "
"different names."
msgstr ""
"`單例模式 <https://zh.wikipedia.org/zh-tw/"
"%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F>`_ 對於需要在不同場景間保存持續性資料這"
"類常見問題來說是很實用的工具。在我們這個例子中就可以拿來在多個單例中重複使用"
"相同的場景或類別，只要名稱不要衝突就好。"

msgid "Using this concept, you can create objects that:"
msgstr "利用這個概念，我們可以做出像這樣的物件："

msgid "Are always loaded, no matter which scene is currently running."
msgstr "隨時都保持載入狀態，不論現在執行的是哪個場景。"

msgid "Can store global variables such as player information."
msgstr "可以保存全域變數，如玩家的資訊。"

msgid "Can handle switching scenes and between-scene transitions."
msgstr "可以處理場景的切換以及場景間的轉場效果。"

msgid ""
"*Act* like a singleton, since GDScript does not support global variables by "
"design."
msgstr "**行為** 類似單例模式，只是 GDScript 在設計上不支援全域變數。"

msgid "Autoloading nodes and scripts can give us these characteristics."
msgstr "通過讓節點與腳本自動載入便能實現這些特徵。"

msgid ""
"Godot won't make an AutoLoad a \"true\" singleton as per the singleton "
"design pattern. It may still be instanced more than once by the user if "
"desired."
msgstr ""
"Godot 不會依照單例設計模式將 AutoLoad 變成「真正」的單例。如果使用者需要的"
"話，依然可以實體化多次 AutoLoad。"

msgid ""
"If you're creating an autoload as part of an editor plugin, consider :ref:"
"`registering it automatically in the Project Settings "
"<doc_making_plugins_autoload>` when the plugin is enabled."
msgstr ""

msgid "AutoLoad"
msgstr "Autoload"

msgid ""
"You can create an AutoLoad to load a scene or a script that inherits from :"
"ref:`class_Node`."
msgstr "可以通過建立 AutoLoad 來載入從 :ref:`class_Node` 繼承來的場景或腳本。"

msgid ""
"When autoloading a script, a :ref:`class_Node` will be created and the "
"script will be attached to it. This node will be added to the root viewport "
"before any other scenes are loaded."
msgstr ""
"當 Autoload 腳本時，會新增一個 :ref:`class_Node` 並將該腳本附加到 Node 上。這"
"個節點會在其他場景載入前被新增到根檢視區上。"

msgid ""
"To autoload a scene or script, select **Project > Project Settings** from "
"the menu and switch to the **AutoLoad** tab."
msgstr ""
"要自動載入場景或腳本，請從選單中選擇 **[專案] -> [專案設定]** 然後切換到 "
"**[AutoLoad]** 分頁。"

#, fuzzy
msgid ""
"Here you can add any number of scenes or scripts. Each entry in the list "
"requires a name, which is assigned as the node's ``name`` property. The "
"order of the entries as they are added to the global scene tree can be "
"manipulated using the up/down arrow keys. Like regular scenes, the engine "
"will read these nodes in top-to-bottom order."
msgstr ""
"這裡可以新增任意數量的場景或腳本。列表中的每一個項目都必須填寫名稱，這個名稱"
"會被指派為節點的 ``name`` 屬性。列表上的順序就是載入進全域場景樹的順序，可以"
"使用上下方向了來更改。"

msgid ""
"This means that any node can access a singleton named \"PlayerVariables\" "
"with:"
msgstr ""
"這表示，所有的節點都可以通過下列方式來存取名為「PlayerVariables」的單例："

msgid ""
"If the **Enable** column is checked (which is the default), then the "
"singleton can be accessed directly without requiring ``get_node()``:"
msgstr ""
"若有勾選「Enable」(啟用) 欄位 (預設就有勾選)，則就可以直接這樣存取單例而不需"
"使用 ``get_node()``："

msgid ""
"Note that autoload objects (scripts and/or scenes) are accessed just like "
"any other node in the scene tree. In fact, if you look at the running scene "
"tree, you'll see the autoloaded nodes appear:"
msgstr ""
"請注意，存取 Autoload 的物件（腳本或場景）就像是存取場景樹中其他節點一樣。事"
"實上，若仔細看執行中的場景樹，則會看到 Autoload 的節點出現在上面："

msgid ""
"Autoloads must **not** be removed using ``free()`` or ``queue_free()`` at "
"runtime, or the engine will crash."
msgstr ""

msgid "Custom scene switcher"
msgstr "自製場景切換器"

msgid ""
"This tutorial will demonstrate building a scene switcher using autoloads. "
"For basic scene switching, you can use the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method (see :ref:`doc_scene_tree` for "
"details). However, if you need more complex behavior when changing scenes, "
"this method provides more functionality."
msgstr ""
"這篇教學展示了如何使用 Autoload 來製作場景切換器。如果只需要做基本的場景切"
"換，可以使用 :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` 方法 (詳細請參考 :ref:"
"`doc_scene_tree` )。但若在切換場景時需要更複雜的行為，則這個方法就有更多功"
"能。"

msgid ""
"To begin, download the template from here: :download:`autoload.zip <files/"
"autoload.zip>` and open it in Godot."
msgstr ""
"要開始本教學，請先下載這個樣板： :download:`autoload.zip <files/autoload."
"zip>` 然後在 Godot 中打開。"

msgid ""
"The project contains two scenes: ``Scene1.tscn`` and ``Scene2.tscn``. Each "
"scene contains a label displaying the scene name and a button with its "
"``pressed()`` signal connected. When you run the project, it starts in "
"``Scene1.tscn``. However, pressing the button does nothing."
msgstr ""
"這個專案包含了兩個場景： ``Scene1.tscn`` 與 ``Scene2.tscn`` 。兩個場景都包含"
"了一個展示場景名稱的 Label ，自己一個連結了 ``pressed()`` 訊號的按鈕。執行專"
"案時會從 ``Scene1.tscn`` 開始執行。但，現在按按鈕還不會發生任何事。"

msgid "Global.gd"
msgstr "\\ Global.gd"

msgid ""
"Switch to the **Script** tab and create a new script called ``Global.gd``. "
"Make sure it inherits from ``Node``:"
msgstr ""
"切換到 **[腳本]** 分頁並建立名為 ``Global.gd`` 的腳本。請確認該腳本有繼承 "
"``Node`` ："

msgid ""
"The next step is to add this script to the autoLoad list. Open **Project > "
"Project Settings** from the menu, switch to the **AutoLoad** tab and select "
"the script by clicking the browse button or typing its path: ``res://Global."
"gd``. Press **Add** to add it to the autoload list:"
msgstr ""
"下一個步驟就是將這個腳本新增至 Autoload 列表中。從選單中打開 **[專案] > [專案"
"設定]** ，然後切換到 **[AutoLoad]** 分頁，並點擊瀏覽按鈕來選擇腳本，也可以直"
"接輸入路徑： ``res://Global.gd`` 。點擊 **[新增]** 來加入至 Autoload 列表："

msgid ""
"Now whenever we run any scene in the project, this script will always be "
"loaded."
msgstr "現在，無論正在執行專案中的哪個場景，這個腳本都會被載入。"

msgid ""
"Returning to the script, it needs to fetch the current scene in the "
"`_ready()` function. Both the current scene (the one with the button) and "
"``Global.gd`` are children of root, but autoloaded nodes are always first. "
"This means that the last child of root is always the loaded scene."
msgstr ""
"回到腳本中，我們現在需要讓腳本在 `_ready()` 中取得目前的場景。目前的場景 (只"
"有一個按鈕的那個) 以及 ``Global.gd`` 都是在根上的子節點，但 Autoload 的節點總"
"是優先載入的。這表示根上的最後一個子節點永遠為目前載入的場景。"

msgid ""
"Now we need a function for changing the scene. This function needs to free "
"the current scene and replace it with the requested one."
msgstr ""
"現在，我們需要一個用來更改場景的函式。這點是需要釋放目前的場景並載入需要的場"
"景。"

msgid ""
"Using :ref:`Object.call_deferred() <class_Object_method_call_deferred>`, the "
"second function will only run once all code from the current scene has "
"completed. Thus, the current scene will not be removed while it is still "
"being used (i.e. its code is still running)."
msgstr ""
"這裡我們用了 :ref:`Object.call_deferred() "
"<class_Object_method_call_deferred>` ，這會讓第一個函式只會在目前場景的所有程"
"式都執行完後執行一次。因此，目前的場景還在使用時就不會被移除（也就是指程式還"
"在執行）。"

msgid ""
"Finally, we need to fill the empty callback functions in the two scenes:"
msgstr "最後，我們要在兩個場景中填好原本的空回呼函式："

msgid "and"
msgstr "與"

msgid ""
"Run the project and test that you can switch between scenes by pressing the "
"button."
msgstr "執行專案並測試看看按按鈕來切換場景。"

msgid ""
"When scenes are small, the transition is instantaneous. However, if your "
"scenes are more complex, they may take a noticeable amount of time to "
"appear. To learn how to handle this, see the next tutorial: :ref:"
"`doc_background_loading`."
msgstr ""
"請注意：當場景很小時，場景過場會馬上發生。但若場景很複雜，就可能會出現有體感"
"的等待時間。要瞭解如何處理這個問題，請參考下一個教學： :ref:"
"`doc_background_loading` 。"

msgid ""
"Alternatively, if the loading time is relatively short (less than 3 seconds "
"or so), you can display a \"loading plaque\" by showing some kind of 2D "
"element just before changing the scene. You can then hide it just after the "
"scene is changed. This can be used to indicate to the player that a scene is "
"being loaded."
msgstr ""
"另外，若載入時間沒有很長的話 (如小於 3 秒等)，也可以在場景更改前顯示一些 2D "
"元素來製造出「載入磚 (Loading Plaque)」的效果。場景更改完後就可以將這些元素隱"
"藏起來。這種做法可以用來讓玩家知道場景正在載入。"

msgid "Translation status"
msgstr "翻譯狀態"
