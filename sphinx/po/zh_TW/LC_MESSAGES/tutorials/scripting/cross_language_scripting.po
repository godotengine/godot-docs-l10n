# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cross-language scripting"
msgstr "跨語言腳本撰寫"

msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes written in "
"different languages."
msgstr ""
"在 Godot 中可以依照需求來混合使用不同的腳本語言。這表示，單一專案內可以同時"
"以 C# 與 GDScript 來定義節點。本頁將介紹如何讓兩個以不同語言撰寫的節點該如何"
"互動。"

msgid ""
"The following two scripts will be used as references throughout this page."
msgstr "下列兩個腳本會在本頁中都會用來作為參考。"

msgid "Instantiating nodes"
msgstr "實體化節點"

msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr "若不使用場景樹中的節點，則可以直接從程式碼中實體化節點。"

msgid "Instantiating C# nodes from GDScript"
msgstr "在 GDScript 中實體化 C# 節點"

msgid ""
"Using C# from GDScript doesn't need much work. Once loaded (see :ref:"
"`doc_gdscript_classes_as_resources`), the script can be instantiated with :"
"ref:`new() <class_CSharpScript_method_new>`."
msgstr ""
"從 GDScript 中使用 C# 並不需花費額外功夫。載入後 (請參見 :ref:"
"`doc_gdscript_classes_as_resources`) 便可以使用 :ref:`new() "
"<class_CSharpScript_method_new>` 來實體化腳本。"

msgid ""
"When creating ``.cs`` scripts, you should always keep in mind that the class "
"Godot will use is the one named like the ``.cs`` file itself. If that class "
"does not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""
"建立 ``.cs`` 腳本後，請記得 Godot 類別與 ``.cs`` 檔案本身的名字。若與檔名相同"
"的類別不存在與檔案中，則會看到這個錯誤：``Invalid call. Nonexistent function "
"`new` in base`` 。"

msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr "舉例來說，MyCoolNode.cs 應該包含名為 MyCoolNode 的類別。"

msgid ""
"You also need to check your ``.cs`` file is referenced in the project's ``."
"csproj`` file. Otherwise, the same error will occur."
msgstr ""
"你也需要檢查 ``.cs`` 檔案是否在專案中的 ``.csproj`` 檔案中參照。否則也會出現"
"相同的錯誤。"

msgid "Instantiating GDScript nodes from C#"
msgstr "在 C# 中實體化 GDScript 節點"

msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""
"在 C# 這邊，所有東西的運作方式都一樣。載入後，GDScript 便可以使用 :ref:"
"`GDScript.New() <class_GDScript_method_new>` 來實體化。"

msgid ""
"Here we are using an :ref:`class_Object`, but you can use type conversion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""
"這裡我們用的是 :ref:`class_Object` ，但可以使用任何如 :ref:"
"`doc_c_sharp_features_type_conversion_and_casting` 內說明的型別轉換方式。"

msgid "Accessing fields"
msgstr "存取欄位"

msgid "Accessing C# fields from GDScript"
msgstr "在 GDScript 中存取 C# 欄位"

msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr "要從 GDScript 存取 C# 欄位很簡單，沒什麼好擔心的。"

msgid ""
"Note that it doesn't matter if the field is defined as a property or an "
"attribute. However, trying to set a value on a property that does not define "
"a setter will result in a crash."
msgstr ""
"請注意，不管欄位是定義為 Property 還是 Attribute，只要沒定義 Setter，賦值時就"
"會導致當機。"

msgid "Accessing GDScript fields from C#"
msgstr "在 C# 中存取 GDScript 欄位"

msgid ""
"As C# is statically typed, accessing GDScript from C# is a bit more "
"convoluted, you will have to use :ref:`Object.Get() "
"<class_Object_method_get>` and :ref:`Object.Set() "
"<class_Object_method_set>`. The first argument is the name of the field you "
"want to access."
msgstr ""
"由於 C# 是靜態型別，從 C# 中存取 GDScript 就稍微有點複雜，我們需要使用 :ref:"
"`Object.Get() <class_Object_method_get>` 與 :ref:`Object.Set() "
"<class_Object_method_set>` 。第一個參數即為欲存取欄位的名稱。"

msgid ""
"Keep in mind that when setting a field value you should only use types the "
"GDScript side knows about. Essentially, you want to work with built-in types "
"as described in :ref:`doc_gdscript` or classes extending :ref:`class_Object`."
msgstr ""
"請記得當設定欄位值時，使用的型別應該是 GDScript 那段能認得的型別。特別是在使"
"用如 :ref:`doc_gdscript`` 中說明的內建型別或擴充了 :ref:`class_Object` 的類別"
"時。"

msgid "Calling methods"
msgstr "呼叫方法"

msgid "Calling C# methods from GDScript"
msgstr "在 GDScript 中呼叫 C# 方法"

msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast the arguments to match function "
"signatures. If that's impossible, you'll see the following error: ``Invalid "
"call. Nonexistent function `FunctionName```."
msgstr ""
"同樣地，從 GDScript 中呼叫 C# 方法應該很簡單。封送處理程序會儘可能地將引數的"
"型別轉換為符合函式簽章的型別。若無法自動轉換，則會看到這個錯誤： ``Invalid "
"call. Nonexistent function `FunctionName``` 。"

msgid "Calling GDScript methods from C#"
msgstr "在 C# 中呼叫 GDScript 方法"

msgid ""
"To call GDScript methods from C# you'll need to use :ref:`Object.Call() "
"<class_Object_method_call>`. The first argument is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""
"從 C# 中呼叫 GDScript 方法則需要使用 :ref:`Object.Call() "
"<class_Object_method_call>` 。第一個引數為欲呼叫的函式名稱，接下來的引數則會"
"被傳入該方法中。"

msgid ""
"As you can see, if the first argument of the called method is an array, "
"you'll need to cast it as ``object``. Otherwise, each element of your array "
"will be treated as a single argument and the function signature won't match."
msgstr ""
"如上所示，若呼叫方法的第一個引數為陣列，則需要將其轉換型別為 ``object`` 。否"
"則，該陣列的每個元素都會被當作各個單一引數，進而不符合函式簽章。"

msgid "Inheritance"
msgstr "繼承"

msgid ""
"A GDScript file may not inherit from a C# script. Likewise, a C# script may "
"not inherit from a GDScript file. Due to how complex this would be to "
"implement, this limitation is unlikely to be lifted in the future. See `this "
"GitHub issue <https://github.com/godotengine/godot/issues/38352>`__ for more "
"information."
msgstr ""
"GDScript 檔案不能繼承 C# 腳本。同樣地，C# 腳本也不能繼承 GDScript 檔案。由於"
"要實作這個功能會很複雜，此一限制應該也會延續到未來的版本中。 請參考 `這個 "
"GitHub Issue (英文) <https://github.com/godotengine/godot/issues/38352>`__ 來"
"瞭解詳情。"

msgid "Translation status"
msgstr "翻譯狀態"
