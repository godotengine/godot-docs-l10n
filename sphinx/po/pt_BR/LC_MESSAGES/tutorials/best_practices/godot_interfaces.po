# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot interfaces"
msgstr "Interfaces em Godot"

msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr ""
"Muitas vezes são necessários scripts que dependem de outros objetos para "
"funcionalidades. Este processo tem 2 partes:"

msgid "Acquiring a reference to the object that presumably has the features."
msgstr ""
"Adquirir uma referência ao objeto que presumivelmente possui as "
"funcionalidades."

msgid "Accessing the data or logic from the object."
msgstr "Acessar os dados ou a lógica do objeto."

msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr "O resto deste tutorial descreve as várias formas de fazer tudo isto."

msgid "Acquiring object references"
msgstr "Adquirindo referências de objetos"

msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""
"Para todos os :ref:`Object <class_Object>`\\s, a forma mais básica de "
"referenciá-los é obtendo uma referência para um objeto existente de outra "
"instância adquirida."

msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""
"O mesmo princípio se aplica a objetos :ref:`Reference <class_Reference>`. "
"enquanto usuários geralmente acessam :ref:`Node <class_Node>` e :ref:"
"`Resource <class_Resource>` desta forma, medidas alternativas estão "
"disponíveis."

msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr ""
"Em vez de acesso a propriedade ou método, pode-se obter Recursos por acesso "
"de carregamento."

msgid "Note the following:"
msgstr "Observe o seguinte:"

msgid "There are many ways in which a language can load such resources."
msgstr "Existem muitas maneiras de uma linguagem carregar tais recursos."

msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr ""
"Ao projetar como os objetos acessarão os dados, não se esqueça de que também "
"se pode passar recursos como referências."

msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""
"Tenha em mente que carregar um recurso bisca a instância do recurso em cache "
"mantida pelo motor. Para obter um novo objeto, deve-se :ref:`duplicar "
"<class_Resource_method_duplicate>` uma referência existente ou instanciar "
"uma do zero com ``new()``."

msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr "Nós também têm um ponto de acesso alternativo: a SceneTree."

msgid "Accessing data or logic from an object"
msgstr "Acessando dados ou lógica a partir de um objeto"

msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""
"A API de scripting do Godot é duck-typed. Isto significa que se um script "
"executa uma operação, o Godot não valida que ele suporta a operação por "
"**type***. Em vez disso, ele verifica se o objeto **implementa** o método "
"individual."

msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""
"Por exemplo, a classe :ref:`CanvasItem <class_CanvasItem>` tem uma "
"propriedade ``visible``. Todas as propriedades expostas à API de scripting "
"são na verdade um par de setter e getter vinculado a um nome. Se alguém "
"tentasse acessar :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, então o Godot faria as seguintes "
"verificações, na ordem:"

msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""
"Se o objeto tiver um script anexado, ele tentará definir a propriedade "
"através do script. Isto deixa aberta a oportunidade para os scripts "
"sobreporem uma propriedade definida em um objeto base sobrepondo o método "
"setter para a propriedade."

msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""
"Se o script não tiver a propriedade, ele realiza uma pesquisa HashMap na "
"ClassDB pela propriedade \"visible\" na classe CanvasItem e todos os seus "
"tipos herdados. Se encontrada, ela chamará o setter ou getter vinculado. "
"Para mais informações sobre HashMaps, veja a documentação :ref:`preferências "
"de dados <doc_data_preferences>`."

msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr ""
"Se não for encontrado, ele faz uma verificação explícita para ver se o "
"usuário deseja acessar as propriedades \"script\" ou \"meta\"."

msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""
"Caso contrário, ele verifica se há uma implementação ``_set``/ ``_get`` "
"(dependendo do tipo de acesso) no CanvasItem e seus tipos herdados. Estes "
"métodos podem executar uma lógica que dá a impressão de que o objeto possui "
"uma propriedade. Este também é o caso com o método ``_get_property_list``."

msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""
"Observe que isto acontece mesmo para nomes de símbolos não legais, como no "
"caso da propriedade \"1/tile_name\" de :ref:`TileSet <class_TileSet>`. Isto "
"refere-se ao nome do tile com ID 1, ou seja, :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_method_tile_get_name>`."

msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""
"Como resultado, este sistema duck-typed pode localizar uma propriedade no "
"script, na classe do objeto ou em qualquer classe que o objeto herda, mas "
"apenas para coisas que estendem de Object."

msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr ""
"O Godot fornece uma variedade de opções para realizar verificações durante a "
"execução nestes acessos:"

msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""
"Um acesso de propriedade duck-typed. Estes irão verificar a propriedade "
"(como descrito acima). Se a operação não for suportada pelo objeto, a "
"execução será interrompida."

msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""
"Uma verificação de método. No caso de :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, pode-se acessar os métodos, "
"``set_visible`` e ``is_visible`` como qualquer outro método."

msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""
"Terceirizar o acesso a uma :ref:`FuncRef <class_FuncRef>`. Isto pode ser "
"útil nos casos em que é necessário o nível máximo de liberdade de "
"dependências. Neste caso, conta-se com um contexto externo para configurar o "
"método."

msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""
"Estas estratégias contribuem para o design flexível do Godot. Entre elas, os "
"usuários têm uma grande variedade de ferramentas para atender às suas "
"necessidades específicas."

msgid "Translation status"
msgstr "Progresso da Tradução"
