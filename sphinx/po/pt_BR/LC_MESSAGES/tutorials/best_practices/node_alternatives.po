# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Quando e como evitar o uso de nós para tudo"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Nós são baratos de produzir, mas até eles têm os seus limites. Um projeto "
"pode ter dezenas de milhares de nós fazendo coisas. Quanto mais complexo for "
"o seu comportamento, maior será a tensão que cada um adiciona ao desempenho "
"de um projeto."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"O Godot fornece objetos mais leves para a criação de APIs que os nós usam. "
"Lembre-se de ter isso em mente como opções ao projetar como deseja construir "
"os recursos do seu projeto."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`: O supremo objeto leve, o Objeto original deve "
"usar gerenciamento manual de memória. Dito isso, não é muito difícil criar "
"suas próprias estruturas de dados personalizadas, mesmo estruturas de nós, "
"que também são mais leves que a classe :ref:`Node <class_Node>`."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Exemplo:** Veja o nó :ref:`Tree <árvore_classe>`. Ele suporta um alto "
"nível de personalização para uma tabela de conteúdo com um número arbitrário "
"de linhas e colunas. Os dados que ele utiliza para gerar sua visualização "
"são na verdade uma árvore de Objetos :ref:`TreeItem <class_TreeItem>`."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Vantagens:** A simplificação da API para objetos com escopo menor ajuda a "
"melhorar sua acessibilidade e melhorar o tempo de iteração. Ao invés de "
"trabalhar com toda a biblioteca de Nós, cria-se um conjunto abreviado de "
"Objetos a partir dos quais um nó pode gerar e gerenciar os sub-nós "
"apropriados."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"Deve-se ter cuidado ao manuseá-los. É possível armazenar um Objeto em uma "
"variável, mas essas referências podem se tornar inválidas sem aviso prévio. "
"Por exemplo, se o criador do objeto decidir excluí-lo do nada, isso "
"acionaria um estado de erro no próximo acesso."

msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`Reference <class_Reference>`: Apenas um pouco mais complexo que "
"Object. Eles rastreiam referências a eles mesmos, apagando apenas a memória "
"carregada quando não há mais referências a eles mesmos. Elas são úteis na "
"maioria dos casos em que se precisa de dados em uma classe personalizada."

msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**Exemplo:** Veja o objeto :ref:`File <class_File>`. Ele funciona como um "
"Objeto normal, exceto que não é necessário excluí-lo."

msgid "**Advantages:** same as the Object."
msgstr "**Vantagens:** o mesmo que o Objeto."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: Apenas um pouco mais complexo que "
"Reference. Eles têm a capacidade inata de serializar/deserializar (ou seja, "
"salvar e carregar) suas propriedades de/para arquivos de recursos do Godot."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**Exemplo:** Scripts, PackedScene (para arquivos de cena), e outros tipos "
"como cada uma das classes :ref:`AudioEffect <class_AudioEffect>`. Cada uma "
"delas pode ser salva e carregada, portanto elas se estendem de Resource."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Vantagens:** Muito :ref:`já foi dito <doc_resources>` sobre as vantagens "
"de :ref:`Resource <class_Resource>` em relação aos métodos tradicionais de "
"armazenamento de dados. No contexto da utilização de Recursos sobre Nós, "
"porém, sua principal vantagem está na compatibilidade com o Inspetor. Embora "
"quase tão leves quanto Objeto/Referência, eles ainda podem exibir e exportar "
"propriedades no Inspetor. Isso permite que eles cumpram um propósito muito "
"parecido com os sub-nós na frente de usabilidade, mas também melhora o "
"desempenho se alguém planeja ter muitos desses Recursos/Nós em suas cenas."

msgid "Translation status"
msgstr "Progresso da Tradução"
