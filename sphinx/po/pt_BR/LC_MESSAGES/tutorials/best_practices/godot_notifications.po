# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Notificações em Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Cada objeto no Godot implementa um método :ref:`_notification "
"<class_Object_method__notification>`. Sua finalidade é permitir que o Objeto "
"responda a uma variedade de chamadas de retorno em nível de motor que possam "
"estar relacionadas a ele. Por exemplo, se o motor diz a um :ref:`CanvasItem "
"<class_CanvasItem>` para \"desenhar\", ele irá chamar "
"``_notification(NOTIFICATION_DRAW)``."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Algumas destas notificações, como desenhar, são úteis para sobrepor em "
"scripts. Tanto que o Godot expões muitas delas com funções dedicadas:"

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""
"O que os usuários podem *não* perceber é que existem notificações para "
"outros tipos além do Node sozinho:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: uma chamada de retorno "
"que aciona durante a inicialização do objeto. Não acessível a scripts."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: uma chamada de retorno que "
"aciona antes do motor deletar um Objeto, ou seja, um 'destruidor'."

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: uma chamada de "
"retorno que aciona quando o mouse entra na janela no sistema operacional que "
"exibe o conteúdo do jogo."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"E muitas das chamadas de retorno que *existem* em Nós não têm métodos "
"dedicados mas ainda são bastante úteis."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: uma chamada de retorno que "
"aciona sempre que se adiciona um nó filho a outro nó."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: uma chamada de retorno que "
"aciona sempre que se remove um nó filho de outro nó."

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: uma chamada de retorno que "
"aciona após um nó Popup completar qualquer método ``Popup*``. Observe a "
"diferença do seu sinal ``about_to_show`` que aciona *antes* de sua aparência."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""
"Pode-se acessar todas essas notificações personalizadas a partir do método "
"universal ``_notification``."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Os métodos na documentação rotulados como \"virtual\" também são destinados "
"a serem substituídos por scripts."

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"Um exemplo clássico é o método :ref:`_init <class_Object_method__init>` em "
"Object. Embora ele não tenha uma ``NOTIFICAÇÃO_*`` equivalente, o motor "
"ainda chama o método. A maioria das linguagens (exceto C#) dependem dele "
"como um construtor."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Então, em que situação se deve usar cada uma destas notificações ou funções "
"virtuais?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process vs. _physics_process vs. \\*_input"

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"Use ``_process``` quando precisar de um deltatime dependente de framerate "
"entre frames. Se o código que atualiza os dados do objeto precisa ser "
"atualizado o mais frequentemente possível, este é o lugar certo. As "
"verificações lógicas recorrentes e o armazenamento em cache de dados "
"costumam ser executados aqui, mas se resume à frequência na qual se precisa "
"das avaliações para atualizar. Se eles não precisarem executar cada frame, "
"então implementar um loop Timer-yield-timeout é outra opção."

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Use ``_physics_process`` quando precisar de um deltatime entre frames "
"independente de framerate. Se o código precisa de atualizações consistentes "
"ao longo do tempo, independentemente de quão rápido ou lento o tempo avança, "
"este é o lugar certo. As operações recorrentes de cinemática e transformação "
"de objetos devem ser executadas aqui."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"Embora seja possível, para obter o melhor desempenho, deve-se evitar fazer "
"verificações de entrada durante estas chamadas de retorno. ``_process`` e "
"``_physics_process`` acionarão em todas as oportunidades (eles não "
"\"descançam\" por padrão). Em contraste, as chamadas de retorno ``*_input`` "
"acionarão apenas nos quadros nos quais o motor realmente detectou a entrada."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"É possível verificar se há ações de entrada dentro das chamadas de retorno "
"de entrada da mesma forma. Se alguém quiser usar o tempo delta, pode-se "
"buscá-lo a partir dos métodos deltatime relacionados conforme necessário."

msgid "_init vs. initialization vs. export"
msgstr "_init vs. initialization vs. export"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"Se o script inicializa sua própria sub-árvore de nó, sem uma cena, esse "
"código deve ser executado aqui. Outras propriedades ou inicializações "
"independentes da SceneTree-independent também devem ser executadas aqui. "
"Isto aciona antes de ``_ready`` ou ``_enter_tree``, mas depois que um script "
"cria e inicializa suas propriedades."

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""
"Scripts têm três tipos de atribuições de propriedade que podem ocorrer "
"durante a instanciação:"

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""
"Ao instanciar uma cena, os valores das propriedades serão configurados de "
"acordo com a seguinte sequência:"

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**Atribuição de valor inicial:** a instanciação atribuirá o valor de "
"inicialização ou o valor de atribuição inicial. As atribuições de "
"inicialização têm prioridade sobre os valores de inicialização."

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**Atribuição de valor exportado:** Se criar uma instância de uma cena em vez "
"de um script, o Godot atribuirá o valor exportado para substituir o valor "
"inicial definido no script."

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Como resultado, instanciar um script versus uma cena afetará tanto a "
"inicialização *como* o número de vezes que o mecanismo chama o setter."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"Ao instanciar uma cena conectada à primeira cena executada, o Godot irá "
"instanciar nós abaixo da árvore (fazendo chamadas ``_init``) e construir a "
"árvore descendo a partir da raiz. Isto faz com que as chamadas "
"``_enter_tree`` desçam em cascata pela árvore. Quando a árvore estiver "
"completa, os nós da folha chamam ``_ready``. Um nó chamará este método assim "
"que todos os nós filhos tenham terminado de chamar o seu. Isto então causa "
"uma cascata inversa que volta à raiz da árvore."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"Ao instanciar um script ou uma cena isolada, nós não são adicionados à "
"SceneTree após a criação, então nenhuma chamada de retorno ``_enter_tree`` "
"aciona. Em vez disso, apenas as chamadas ``_init`` e depois ``_ready`` "
"ocorrem."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Se for necessário disparar o comportamento que ocorre como nós pais de "
"outro, independentemente de ocorrer como parte da cena principal/ativa ou "
"não, pode-se usar a notificação :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`. Por exemplo, aqui está um "
"trecho que conecta o método de um nó a um sinal personalizado no nó pai sem "
"falhar. Útil em nós centrados em dados que podem ser criados durante a "
"execução."

msgid "Translation status"
msgstr "Progresso da Tradução"
