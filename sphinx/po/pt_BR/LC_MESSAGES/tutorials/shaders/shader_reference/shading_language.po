# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shading language"
msgstr "Linguagem de shading"

msgid "Introduction"
msgstr "Introdução"

msgid ""
"Godot uses a shading language similar to GLSL ES 3.0. Most datatypes and "
"functions are supported, and the few remaining ones will likely be added "
"over time."
msgstr ""
"Godot usa uma linguagem de shading semelhante à GLSL ES 3.0. A maioria dos "
"tipos de dados e funções são suportados e os poucos restantes provavelmente "
"serão adicionados com o tempo."

msgid ""
"If you are already familiar with GLSL, the :ref:`Godot Shader Migration "
"Guide<doc_converting_glsl_to_godot_shaders>` is a resource that will help "
"you transition from regular GLSL to Godot's shading language."
msgstr ""
"Se você já está familiarizado com GLSL, o :ref:`Godot Shader Migration "
"Guide<doc_converting_glsl_to_godot_shaders>` é um recurso que o ajudará na "
"transição de GLSL regular para a linguagem de shaders do Godot."

msgid "Data types"
msgstr "Tipos de dados"

msgid "Most GLSL ES 3.0 datatypes are supported:"
msgstr "A maioria dos tipos de dados de GLSL ES 3.0 são suportados:"

msgid "Type"
msgstr "Tipo"

msgid "Description"
msgstr "Descrição"

msgid "**void**"
msgstr "**void**"

msgid "Void datatype, useful only for functions that return nothing."
msgstr ""

msgid "**bool**"
msgstr "**bool**"

msgid "Boolean datatype, can only contain ``true`` or ``false``."
msgstr "Tipo de dados booleano, só podem conter ``true`` ou ``false``."

msgid "**bvec2**"
msgstr "**bvec2**"

msgid "Two-component vector of booleans."
msgstr ""

msgid "**bvec3**"
msgstr "**bvec3**"

msgid "Three-component vector of booleans."
msgstr ""

msgid "**bvec4**"
msgstr "**bvec4**"

msgid "Four-component vector of booleans."
msgstr ""

msgid "**int**"
msgstr "**int**"

msgid "Signed scalar integer."
msgstr ""

msgid "**ivec2**"
msgstr "**ivec2**"

msgid "Two-component vector of signed integers."
msgstr ""

msgid "**ivec3**"
msgstr "**ivec3**"

msgid "Three-component vector of signed integers."
msgstr ""

msgid "**ivec4**"
msgstr "**ivec4**"

msgid "Four-component vector of signed integers."
msgstr ""

msgid "**uint**"
msgstr "**uint**"

msgid "Unsigned scalar integer; can't contain negative numbers."
msgstr ""

msgid "**uvec2**"
msgstr "**uvec2**"

msgid "Two-component vector of unsigned integers."
msgstr ""

msgid "**uvec3**"
msgstr "**uvec3**"

msgid "Three-component vector of unsigned integers."
msgstr ""

msgid "**uvec4**"
msgstr "**uvec4**"

msgid "Four-component vector of unsigned integers."
msgstr ""

msgid "**float**"
msgstr "**float**"

msgid "Floating-point scalar."
msgstr "Número de ponto flutuante (real)."

msgid "**vec2**"
msgstr "**vec2**"

msgid "Two-component vector of floating-point values."
msgstr ""

msgid "**vec3**"
msgstr "**vec3**"

msgid "Three-component vector of floating-point values."
msgstr ""

msgid "**vec4**"
msgstr "**vec4**"

msgid "Four-component vector of floating-point values."
msgstr ""

msgid "**mat2**"
msgstr "**mat2**"

msgid "2x2 matrix, in column major order."
msgstr ""

msgid "**mat3**"
msgstr "**mat3**"

msgid "3x3 matrix, in column major order."
msgstr ""

msgid "**mat4**"
msgstr "**mat4**"

msgid "4x4 matrix, in column major order."
msgstr ""

msgid "**sampler2D**"
msgstr "**sampler2D**"

msgid "Sampler type for binding 2D textures, which are read as float."
msgstr ""

msgid "**isampler2D**"
msgstr "**isampler2D**"

msgid "Sampler type for binding 2D textures, which are read as signed integer."
msgstr ""

msgid "**usampler2D**"
msgstr "**usampler2D**"

msgid ""
"Sampler type for binding 2D textures, which are read as unsigned integer."
msgstr ""

msgid "**sampler2DArray**"
msgstr "**sampler2DArray**"

msgid "Sampler type for binding 2D texture arrays, which are read as float."
msgstr ""

msgid "**isampler2DArray**"
msgstr "**isampler2DArray**"

msgid ""
"Sampler type for binding 2D texture arrays, which are read as signed integer."
msgstr ""

msgid "**usampler2DArray**"
msgstr "**usampler2DArray**"

msgid ""
"Sampler type for binding 2D texture arrays, which are read as unsigned "
"integer."
msgstr ""

msgid "**sampler3D**"
msgstr "**sampler3D**"

msgid "Sampler type for binding 3D textures, which are read as float."
msgstr ""

msgid "**isampler3D**"
msgstr "**isampler3D**"

msgid "Sampler type for binding 3D textures, which are read as signed integer."
msgstr ""

msgid "**usampler3D**"
msgstr "**usampler3D**"

msgid ""
"Sampler type for binding 3D textures, which are read as unsigned integer."
msgstr ""

msgid "**samplerCube**"
msgstr "**samplerCube**"

msgid "Sampler type for binding Cubemaps, which are read as floats."
msgstr ""

msgid "Casting"
msgstr "Conversão"

msgid ""
"Just like GLSL ES 3.0, implicit casting between scalars and vectors of the "
"same size but different type is not allowed. Casting of types of different "
"size is also not allowed. Conversion must be done explicitly via "
"constructors."
msgstr ""

msgid "Example:"
msgstr "Exemplo:"

msgid ""
"Default integer constants are signed, so casting is always needed to convert "
"to unsigned:"
msgstr ""

msgid "Members"
msgstr "Membros"

msgid ""
"Individual scalar members of vector types are accessed via the \"x\", \"y\", "
"\"z\" and \"w\" members. Alternatively, using \"r\", \"g\", \"b\" and \"a\" "
"also works and is equivalent. Use whatever fits best for your needs."
msgstr ""

msgid ""
"For matrices, use the ``m[column][row]`` indexing syntax to access each "
"scalar, or ``m[idx]`` to access a vector by row index. For example, for "
"accessing the y position of an object in a mat4 you use ``m[3][1]``."
msgstr ""

msgid "Constructing"
msgstr "Construindo"

msgid "Construction of vector types must always pass:"
msgstr ""

msgid ""
"Construction of matrix types requires vectors of the same dimension as the "
"matrix. You can also build a diagonal matrix using ``matx(float)`` syntax. "
"Accordingly, ``mat4(1.0)`` is an identity matrix."
msgstr ""

msgid ""
"Matrices can also be built from a matrix of another dimension. There are two "
"rules : If a larger matrix is constructed from a smaller matrix, the "
"additional rows and columns are set to the values they would have in an "
"identity matrix. If a smaller matrix is constructed from a larger matrix, "
"the top, left submatrix of the larger matrix is used."
msgstr ""

msgid "Swizzling"
msgstr "Swizzling"

msgid ""
"It is possible to obtain any combination of components in any order, as long "
"as the result is another vector type (or scalar). This is easier shown than "
"explained:"
msgstr ""

msgid "Precision"
msgstr "Precisão"

msgid ""
"It is possible to add precision modifiers to datatypes; use them for "
"uniforms, variables, arguments and varyings:"
msgstr ""

msgid ""
"Using lower precision for some operations can speed up the math involved (at "
"the cost of less precision). This is rarely needed in the vertex processor "
"function (where full precision is needed most of the time), but is often "
"useful in the fragment processor."
msgstr ""

msgid ""
"Some architectures (mainly mobile) can benefit significantly from this, but "
"there are downsides such as the additional overhead of conversion between "
"precisions. Refer to the documentation of the target architecture for "
"further information. In many cases, mobile drivers cause inconsistent or "
"unexpected behavior and it is best to avoid specifying precision unless "
"necessary."
msgstr ""

msgid "Arrays"
msgstr "Arrays"

msgid ""
"Arrays are containers for multiple variables of a similar type. Note: As of "
"Godot 3.2, only local and varying arrays have been implemented."
msgstr ""

msgid "Local arrays"
msgstr "Arrays locais"

msgid ""
"Local arrays are declared in functions. They can use all of the allowed "
"datatypes, except samplers. The array declaration follows a C-style syntax: "
"``[const] + [precision] + typename + identifier + [array size]``."
msgstr ""

msgid "They can be initialized at the beginning like:"
msgstr ""

msgid ""
"You can declare multiple arrays (even with different sizes) in one "
"expression:"
msgstr ""

msgid "To access an array element, use the indexing syntax:"
msgstr ""

msgid ""
"Arrays also have a built-in function ``.length()`` (not to be confused with "
"the built-in ``length()`` function). It doesn't accept any parameters and "
"will return the array's size."
msgstr ""

msgid ""
"If you use an index below 0 or greater than array size - the shader will "
"crash and break rendering. To prevent this, use ``length()``, ``if``, or "
"``clamp()`` functions to ensure the index is between 0 and the array's "
"length. Always carefully test and check your code. If you pass a constant "
"expression or a simple number, the editor will check its bounds to prevent "
"this crash."
msgstr ""

msgid "Constants"
msgstr "Constantes"

msgid ""
"Use the ``const`` keyword before the variable declaration to make that "
"variable immutable, which means that it cannot be modified. All basic types, "
"except samplers can be declared as constants. Accessing and using a constant "
"value is slightly faster than using a uniform. Constants must be initialized "
"at their declaration."
msgstr ""

msgid ""
"Constants cannot be modified and additionally cannot have hints, but "
"multiple of them (if they have the same type) can be declared in a single "
"expression e.g"
msgstr ""

msgid "Similar to variables, arrays can also be declared with ``const``."
msgstr ""

msgid ""
"Constants can be declared both globally (outside of any function) or locally "
"(inside a function). Global constants are useful when you want to have "
"access to a value throughout your shader that does not need to be modified. "
"Like uniforms, global constants are shared between all shader stages, but "
"they are not accessible outside of the shader."
msgstr ""

msgid "Operators"
msgstr "Operadores"

msgid ""
"Godot shading language supports the same set of operators as GLSL ES 3.0. "
"Below is the list of them in precedence order:"
msgstr ""

msgid "Precedence"
msgstr "Precedência"

msgid "Class"
msgstr "Classe"

msgid "Operator"
msgstr "Operador"

msgid "1 (highest)"
msgstr "1 (mais alto)"

msgid "parenthetical grouping"
msgstr "agrupamento entre parênteses"

msgid "**()**"
msgstr "**()**"

msgid "2"
msgstr "2"

#, fuzzy
msgid "unary"
msgstr "unário"

msgid "**+, -, !, ~**"
msgstr ""

msgid "3"
msgstr "3"

msgid "multiplicative"
msgstr "multiplicativo"

msgid "**/, \\*, %**"
msgstr ""

msgid "4"
msgstr "4"

msgid "additive"
msgstr "aditivo"

msgid "**+, -**"
msgstr "**+, -**"

msgid "5"
msgstr "5"

msgid "bit-wise shift"
msgstr ""

msgid "**<<, >>**"
msgstr "**<<, >>**"

msgid "6"
msgstr "6"

msgid "relational"
msgstr "relacional"

msgid "**<, >, <=, >=**"
msgstr ""

msgid "7"
msgstr "7"

msgid "equality"
msgstr "igualdade"

msgid "**==, !=**"
msgstr "**==, !=**"

msgid "8"
msgstr "8"

msgid "bit-wise AND"
msgstr "Operador bit a bit AND"

msgid "**&**"
msgstr "**&**"

msgid "9"
msgstr "9"

msgid "bit-wise exclusive OR"
msgstr ""

msgid "**^**"
msgstr "**^**"

msgid "10"
msgstr "10"

msgid "bit-wise inclusive OR"
msgstr ""

msgid "**|**"
msgstr "**|**"

msgid "11"
msgstr "11"

msgid "logical AND"
msgstr "AND lógico"

msgid "**&&**"
msgstr "**&&**"

msgid "12 (lowest)"
msgstr "12 (mais baixo)"

msgid "logical inclusive OR"
msgstr ""

msgid "**||**"
msgstr "**||**"

msgid "Flow control"
msgstr "Controle de fluxo"

msgid "Godot Shading language supports the most common types of flow control:"
msgstr ""

msgid ""
"Keep in mind that, in modern GPUs, an infinite loop can exist and can freeze "
"your application (including editor). Godot can't protect you from this, so "
"be careful not to make this mistake!"
msgstr ""

msgid ""
"When exporting a GLES2 project to HTML5, WebGL 1.0 will be used. WebGL 1.0 "
"doesn't support dynamic loops, so shaders using those won't work there."
msgstr ""
"Ao exportar um projeto GLES2 para HTML5, o WebGL 1.0 será usado. O WebGL 1.0 "
"não oferece suporte a loops dinâmicos, portanto, os shaders que os usam não "
"funcionam lá."

msgid "Discarding"
msgstr "Descartando"

msgid ""
"Fragment and light functions can use the **discard** keyword. If used, the "
"fragment is discarded and nothing is written."
msgstr ""

msgid "Functions"
msgstr "Funções"

msgid ""
"It is possible to define functions in a Godot shader. They use the following "
"syntax:"
msgstr ""

msgid ""
"You can only use functions that have been defined above (higher in the "
"editor) the function from which you are calling them."
msgstr ""

msgid "Function arguments can have special qualifiers:"
msgstr ""

msgid "**in**: Means the argument is only for reading (default)."
msgstr ""

msgid "**out**: Means the argument is only for writing."
msgstr ""

msgid "**inout**: Means the argument is fully passed via reference."
msgstr ""

msgid "Example below:"
msgstr "Exemplo abaixo:"

msgid "Varyings"
msgstr "Variações"

msgid ""
"To send data from the vertex to the fragment (or light) processor function, "
"*varyings* are used. They are set for every primitive vertex in the *vertex "
"processor*, and the value is interpolated for every pixel in the *fragment "
"processor*."
msgstr ""

msgid "Varying can also be an array:"
msgstr ""

msgid ""
"It's also possible to send data from *fragment* to *light* processors using "
"*varying* keyword. To do so you can assign it in the *fragment* and later "
"use it in the *light* function."
msgstr ""

msgid ""
"Note that varying may not be assigned in custom functions or a *light "
"processor* function like:"
msgstr ""

msgid ""
"This limitation was introduced to prevent incorrect usage before "
"initialization."
msgstr ""

msgid "Interpolation qualifiers"
msgstr ""

msgid ""
"Certain values are interpolated during the shading pipeline. You can modify "
"how these interpolations are done by using *interpolation qualifiers*."
msgstr ""

msgid "There are two possible interpolation qualifiers:"
msgstr ""

msgid "Qualifier"
msgstr "Qualificador"

msgid "**flat**"
msgstr "**flat**"

msgid "The value is not interpolated."
msgstr ""

#, fuzzy
msgid "**smooth**"
msgstr "**smooth**"

msgid ""
"The value is interpolated in a perspective-correct fashion. This is the "
"default."
msgstr ""

msgid "Uniforms"
msgstr "Uniforms"

msgid ""
"Passing values to shaders is possible. These are global to the whole shader "
"and are called *uniforms*. When a shader is later assigned to a material, "
"the uniforms will appear as editable parameters in it. Uniforms can't be "
"written from within the shader."
msgstr ""

msgid ""
"You can set uniforms in the editor in the material. Or you can set them "
"through GDScript:"
msgstr ""

msgid ""
"The first argument to ``set_shader_param`` is the name of the uniform in the "
"shader. It must match *exactly* to the name of the uniform in the shader or "
"else it will not be recognized."
msgstr ""

msgid ""
"Any GLSL type except for *void* can be a uniform. Additionally, Godot "
"provides optional shader hints to make the compiler understand for what the "
"uniform is used, and how the editor should allow users to modify it."
msgstr ""

msgid ""
"It's important to understand that textures that are supplied as color "
"require hints for proper sRGB->linear conversion (i.e. ``hint_albedo``), as "
"Godot's 3D engine renders in linear color space."
msgstr ""

msgid "Full list of hints below:"
msgstr ""

msgid "Hint"
msgstr "Dica"

msgid "hint_color"
msgstr "hint_color"

msgid "Used as color."
msgstr ""

msgid "**int, float**"
msgstr "**int, float**"

msgid "hint_range(min, max[, step])"
msgstr ""

msgid "Restricted to values in a range (with min/max/step)."
msgstr ""

msgid "hint_albedo"
msgstr "hint_albedo"

msgid "Used as albedo color, default white."
msgstr ""

msgid "hint_black_albedo"
msgstr "hint_black_albedo"

msgid "Used as albedo color, default black."
msgstr ""

msgid "hint_normal"
msgstr "hint_normal"

msgid "Used as normalmap."
msgstr ""

msgid "hint_white"
msgstr "hint_white"

msgid "As value, default to white."
msgstr ""

msgid "hint_black"
msgstr "hint_black"

msgid "As value, default to black"
msgstr ""

msgid "hint_aniso"
msgstr "hint_aniso"

msgid "As flowmap, default to right."
msgstr ""

msgid ""
"GDScript uses different variable types than GLSL does, so when passing "
"variables from GDScript to shaders, Godot converts the type automatically. "
"Below is a table of the corresponding types:"
msgstr ""

msgid "GDScript type"
msgstr "Tipo GDScript"

msgid "GLSL type"
msgstr "Tipo GLSL"

msgid "**Vector2**"
msgstr "**Vector2**"

msgid "**Vector3**"
msgstr "**Vector3**"

msgid "**Color**"
msgstr "**Color**"

msgid "**Transform**"
msgstr "**Transform**"

msgid "**Transform2D**"
msgstr "**Transform2D**"

msgid ""
"Be careful when setting shader uniforms from GDScript, no error will be "
"thrown if the type does not match. Your shader will just exhibit undefined "
"behavior."
msgstr ""

msgid "Uniforms can also be assigned default values:"
msgstr ""

msgid "Built-in variables"
msgstr "Variáveis embutidas"

msgid ""
"A large number of built-in variables are available, like ``UV``, ``COLOR`` "
"and ``VERTEX``. What variables are available depends on the type of shader "
"(``spatial``, ``canvas_item`` or ``particle``) and the function used "
"(``vertex``, ``fragment`` or ``light``). For a list of the build-in "
"variables that are available, please see the corresponding pages:"
msgstr ""

msgid ":ref:`Spatial shaders <doc_spatial_shader>`"
msgstr ":ref:`Spatial shaders <doc_spatial_shader>`"

msgid ":ref:`Canvas item shaders <doc_canvas_item_shader>`"
msgstr ":ref:`Canvas item shaders <doc_canvas_item_shader>`"

msgid ":ref:`Particle shaders <doc_particle_shader>`"
msgstr ":ref:`Shading de particulas <doc_particle_shader>`"

msgid "Built-in functions"
msgstr "Funções embutidas"

msgid ""
"A large number of built-in functions are supported, conforming to GLSL ES "
"3.0. When vec_type (float), vec_int_type, vec_uint_type, vec_bool_type "
"nomenclature is used, it can be scalar or vector."
msgstr ""

msgid ""
"For a list of the functions that are not available in the GLES2 backend, "
"please see the :ref:`Differences between GLES2 and GLES3 doc "
"<doc_gles2_gles3_differences>`."
msgstr ""

msgid "Function"
msgstr "Função"

msgid "vec_type **radians** (vec_type degrees)"
msgstr ""

msgid "Convert degrees to radians"
msgstr ""

msgid "vec_type **degrees** (vec_type radians)"
msgstr ""

msgid "Convert radians to degrees"
msgstr ""

msgid "vec_type **sin** (vec_type x)"
msgstr ""

msgid "Sine"
msgstr "Seno"

msgid "vec_type **cos** (vec_type x)"
msgstr "vec_type **cos** (vec_type x)"

msgid "Cosine"
msgstr "Cosseno"

msgid "vec_type **tan** (vec_type x)"
msgstr "vec_type **tan** (vec_type x)"

msgid "Tangent"
msgstr "Tangente"

msgid "vec_type **asin** (vec_type x)"
msgstr "vec_type **asin** (vec_type x)"

msgid "Arcsine"
msgstr "Arco seno"

msgid "vec_type **acos** (vec_type x)"
msgstr "vec_type **acos** (vec_type x)"

msgid "Arccosine"
msgstr "Arco cosseno"

msgid "vec_type **atan** (vec_type y_over_x)"
msgstr "vec_type **atan** (vec_type y_over_x)"

msgid "Arctangent"
msgstr "Arco tangente"

msgid "vec_type **atan** (vec_type y, vec_type x)"
msgstr "vec_type **atan** (vec_type y, vec_type x)"

msgid "Arctangent to convert vector to angle"
msgstr "Arco tangente para converter vetor em ângulo"

msgid "vec_type **sinh** (vec_type x)"
msgstr "vec_type **sinh** (vec_type x)"

msgid "Hyperbolic sine"
msgstr "Seno hiperbólico"

msgid "vec_type **cosh** (vec_type x)"
msgstr "vec_type **cosh** (vec_type x)"

msgid "Hyperbolic cosine"
msgstr "Cosseno hiperbólico"

msgid "vec_type **tanh** (vec_type x)"
msgstr "vec_type **tanh** (vec_type x)"

msgid "Hyperbolic tangent"
msgstr "Tangente hiperbólica"

msgid "vec_type **asinh** (vec_type x)"
msgstr "vec_type **asinh** (vec_type x)"

msgid "Inverse hyperbolic sine"
msgstr "Seno hiperbólico inverso"

msgid "vec_type **acosh** (vec_type x)"
msgstr "vec_type **acosh** (vec_type x)"

msgid "Inverse hyperbolic cosine"
msgstr "Cosseno hiperbólico inverso"

msgid "vec_type **atanh** (vec_type x)"
msgstr "vec_type **atanh** (vec_type x)"

msgid "Inverse hyperbolic tangent"
msgstr "Tangente hiperbólica inversa"

msgid "vec_type **pow** (vec_type x, vec_type y)"
msgstr "vec_type **pow** (vec_type x, vec_type y)"

msgid "Power (undefined if ``x`` < 0 or if ``x`` = 0 and ``y`` <= 0)"
msgstr "Potência (indefinida se ``x`` < 0 ou se ``x`` = 0 e ``y`` <= 0)"

msgid "vec_type **exp** (vec_type x)"
msgstr "vec_type **exp** (vec_type x)"

msgid "Base-e exponential"
msgstr "Base-e exponencial"

msgid "vec_type **exp2** (vec_type x)"
msgstr "vec_type **exp2** (vec_type x)"

msgid "Base-2 exponential"
msgstr "Base-2 exponencial"

msgid "vec_type **log** (vec_type x)"
msgstr "vec_type **log** (vec_type x)"

msgid "Natural logarithm"
msgstr "Logaritmo natural"

msgid "vec_type **log2** (vec_type x)"
msgstr "vec_type **log2** (vec_type x)"

msgid "Base-2 logarithm"
msgstr "Logaritmo de base 2"

msgid "vec_type **sqrt** (vec_type x)"
msgstr "vec_type **sqrt** (vec_type x)"

msgid "Square root"
msgstr "Raiz quadrada"

msgid "vec_type **inversesqrt** (vec_type x)"
msgstr "vec_type **inversesqrt** (vec_type x)"

msgid "Inverse square root"
msgstr "Raiz quadrada inversa"

msgid "vec_type **abs** (vec_type x)"
msgstr "vec_type **abs** (vec_type x)"

msgid "Absolute"
msgstr "Absoluto"

msgid "ivec_type **abs** (ivec_type x)"
msgstr "ivec_type **abs** (ivec_type x)"

msgid "vec_type **sign** (vec_type x)"
msgstr "vec_type **sign** (vec_type x)"

msgid "Sign"
msgstr "Sinal"

msgid "ivec_type **sign** (ivec_type x)"
msgstr "ivec_type **sign** (ivec_type x)"

msgid "vec_type **floor** (vec_type x)"
msgstr "vec_type **floor** (vec_type x)"

msgid "Floor"
msgstr "Chão"

msgid "vec_type **round** (vec_type x)"
msgstr "vec_type **round** (vec_type x)"

msgid "Round"
msgstr "Arredondar"

msgid "vec_type **roundEven** (vec_type x)"
msgstr "vec_type **roundEven** (vec_type x)"

msgid "Round to the nearest even number"
msgstr "Arredondar para o número par mais próximo"

msgid "vec_type **trunc** (vec_type x)"
msgstr "vec_type **trunc** (vec_type x)"

msgid "Truncation"
msgstr "Truncamento"

msgid "vec_type **ceil** (vec_type x)"
msgstr "vec_type **ceil** (vec_type x)"

msgid "Ceil"
msgstr ""

msgid "vec_type **fract** (vec_type x)"
msgstr "vec_type **fract** (vec_type x)"

msgid "Fractional"
msgstr "Parte fracionária"

msgid "vec_type **mod** (vec_type x, vec_type y)"
msgstr "vec_type **mod** (vec_type x, vec_type y)"

msgid "Remainder"
msgstr "Restante"

msgid "vec_type **mod** (vec_type x , float y)"
msgstr "vec_type **mod** (vec_type x , float y)"

msgid "vec_type **modf** (vec_type x, out vec_type i)"
msgstr "vec_type **modf** (vec_type x, out vec_type i)"

msgid "Fractional of ``x``, with ``i`` as integer part"
msgstr "Parte fracionária de ``x``, com ``i`` como parte inteira"

msgid "vec_type  **min** (vec_type a, vec_type b)"
msgstr "vec_type  **min** (vec_type a, vec_type b)"

msgid "Minimum"
msgstr "Mínimo"

msgid "vec_type  **max** (vec_type a, vec_type b)"
msgstr "vec_type  **max** (vec_type a, vec_type b)"

msgid "Maximum"
msgstr "Máximo"

msgid "vec_type **clamp** (vec_type x, vec_type min, vec_type max)"
msgstr "vec_type **clamp** (vec_type x, vec_type min, vec_type max)"

msgid "Clamp to ``min..max``"
msgstr "Restringe a ``min..max``"

msgid "float **mix** (float a, float b, float c)"
msgstr "float **mix** (float a, float b, float c)"

msgid "Linear interpolate"
msgstr "Interpolação linear"

msgid "vec_type **mix** (vec_type a, vec_type b, float c)"
msgstr "vec_type **mix** (vec_type a, vec_type b, float c)"

msgid "Linear interpolate (scalar coefficient)"
msgstr "Interpolação linear (coeficiente escalar)"

msgid "vec_type **mix** (vec_type a, vec_type b, vec_type c)"
msgstr "vec_type **mix** (vec_type a, vec_type b, vec_type c)"

msgid "Linear interpolate (vector coefficient)"
msgstr "Interpolação linear (coeficiente vetorial)"

msgid "vec_type **mix** (vec_type a, vec_type b, bvec_type c)"
msgstr "vec_type **mix** (vec_type a, vec_type b, bvec_type c)"

msgid "Linear interpolate (boolean-vector selection)"
msgstr "Interpolação linear (seleção de vetor booleano)"

msgid "vec_type **step** (vec_type a, vec_type b)"
msgstr "vec_type **step** (vec_type a, vec_type b)"

msgid "``b[i] < a[i] ? 0.0 : 1.0``"
msgstr "``b[i] < a[i] ? 0.0 : 1.0``"

msgid "vec_type **step** (float a, vec_type b)"
msgstr "vec_type **step** (float a, vec_type b)"

msgid "``b[i] < a ? 0.0 : 1.0``"
msgstr "``b[i] < a ? 0.0 : 1.0``"

msgid "vec_type **smoothstep** (vec_type a, vec_type b, vec_type c)"
msgstr "vec_type **smoothstep** (vec_type a, vec_type b, vec_type c)"

msgid "Hermite interpolate"
msgstr "interpolação de Hermite"

msgid "vec_type **smoothstep** (float a, float b, vec_type c)"
msgstr "vec_type **smoothstep** (float a, float b, vec_type c)"

msgid "bvec_type **isnan** (vec_type x)"
msgstr "bvec_type **isnan** (vec_type x)"

msgid "Returns ``true`` if scalar or vector component is ``NaN``"
msgstr "Retorna ``true`` se o componente escalar ou vetorial for ``NaN``"

msgid "bvec_type **isinf** (vec_type x)"
msgstr "bvec_type **isinf** (vec_type x)"

msgid "Returns ``true`` if scalar or vector component is ``INF``"
msgstr ""

msgid "ivec_type **floatBitsToInt** (vec_type x)"
msgstr ""

msgid "Float->Int bit copying, no conversion"
msgstr ""

msgid "uvec_type **floatBitsToUint** (vec_type x)"
msgstr ""

msgid "Float->UInt bit copying, no conversion"
msgstr ""

msgid "vec_type **intBitsToFloat** (ivec_type x)"
msgstr ""

msgid "Int->Float bit copying, no conversion"
msgstr ""

msgid "vec_type **uintBitsToFloat** (uvec_type x)"
msgstr ""

msgid "UInt->Float bit copying, no conversion"
msgstr ""

msgid "float **length** (vec_type x)"
msgstr ""

msgid "Vector length"
msgstr "Tamanho do vetor"

msgid "float **distance** (vec_type a, vec_type b)"
msgstr ""

msgid "Distance between vectors i.e ``length(a - b)``"
msgstr ""

msgid "float **dot** (vec_type a, vec_type b)"
msgstr ""

msgid "Dot product"
msgstr ""

msgid "vec3 **cross** (vec3 a, vec3 b)"
msgstr ""

msgid "Cross product"
msgstr ""

msgid "vec_type **normalize** (vec_type x)"
msgstr ""

msgid "Normalize to unit length"
msgstr ""

msgid "vec3 **reflect** (vec3 I, vec3 N)"
msgstr ""

msgid "Reflect"
msgstr "Refletir"

msgid "vec3 **refract** (vec3 I, vec3 N, float eta)"
msgstr ""

msgid "Refract"
msgstr "Refratar"

msgid "vec_type **faceforward** (vec_type N, vec_type I, vec_type Nref)"
msgstr ""

msgid "If ``dot(Nref, I)`` < 0, return N, otherwise –N"
msgstr ""

msgid "mat_type **matrixCompMult** (mat_type x, mat_type y)"
msgstr ""

msgid "Matrix component multiplication"
msgstr ""

msgid "mat_type **outerProduct** (vec_type column, vec_type row)"
msgstr ""

msgid "Matrix outer product"
msgstr ""

msgid "mat_type **transpose** (mat_type m)"
msgstr ""

msgid "Transpose matrix"
msgstr "Transpor matriz"

msgid "float **determinant** (mat_type m)"
msgstr ""

msgid "Matrix determinant"
msgstr "Matriz determinante"

msgid "mat_type **inverse** (mat_type m)"
msgstr ""

msgid "Inverse matrix"
msgstr "Matriz inversa"

msgid "bvec_type **lessThan** (vec_type x, vec_type y)"
msgstr ""

msgid "Bool vector comparison on < int/uint/float vectors"
msgstr ""

msgid "bvec_type **greaterThan** (vec_type x, vec_type y)"
msgstr ""

msgid "Bool vector comparison on > int/uint/float vectors"
msgstr ""

msgid "bvec_type **lessThanEqual** (vec_type x, vec_type y)"
msgstr ""

msgid "Bool vector comparison on <= int/uint/float vectors"
msgstr ""

msgid "bvec_type **greaterThanEqual** (vec_type x, vec_type y)"
msgstr ""

msgid "Bool vector comparison on >= int/uint/float vectors"
msgstr ""

msgid "bvec_type **equal** (vec_type x, vec_type y)"
msgstr ""

msgid "Bool vector comparison on == int/uint/float vectors"
msgstr ""

msgid "bvec_type **notEqual** (vec_type x, vec_type y)"
msgstr ""

msgid "Bool vector comparison on != int/uint/float vectors"
msgstr ""

msgid "bool **any** (bvec_type x)"
msgstr ""

msgid "Any component is ``true``"
msgstr ""

msgid "bool **all** (bvec_type x)"
msgstr ""

msgid "All components are ``true``"
msgstr ""

msgid "bvec_type **not** (bvec_type x)"
msgstr ""

msgid "Invert boolean vector"
msgstr "Inverter vetor booleano"

msgid "ivec2 **textureSize** (sampler2D_type s, int lod)"
msgstr ""

msgid "Get the size of a 2D texture"
msgstr ""

msgid "ivec3 **textureSize** (sampler2DArray_type s, int lod)"
msgstr ""

msgid "Get the size of a 2D texture array"
msgstr ""

msgid "ivec3 **textureSize** (sampler3D s, int lod)"
msgstr ""

msgid "Get the size of a 3D texture"
msgstr ""

msgid "ivec2 **textureSize** (samplerCube s, int lod)"
msgstr ""

msgid "Get the size of a cubemap texture"
msgstr ""

msgid "vec4_type **texture** (sampler2D_type s, vec2 uv [, float bias])"
msgstr ""

msgid "Perform a 2D texture read"
msgstr ""

msgid "vec4_type  **texture** (sampler2DArray_type s, vec3 uv [, float bias])"
msgstr ""

msgid "Perform a 2D texture array read"
msgstr ""

msgid "vec4_type  **texture** (sampler3D_type s, vec3 uv [, float bias])"
msgstr ""

msgid "Perform a 3D texture read"
msgstr ""

msgid "vec4 **texture** (samplerCube s, vec3 uv [, float bias])"
msgstr ""

msgid "Perform a cubemap texture read"
msgstr ""

msgid "vec4_type **textureProj** (sampler2D_type s, vec3 uv [, float bias])"
msgstr ""

msgid "Perform a 2D texture read with projection"
msgstr ""

msgid "vec4_type **textureProj** (sampler2D_type s, vec4 uv [, float bias])"
msgstr ""

msgid "vec4_type  **textureProj** (sampler3D_type s, vec4 uv [, float bias])"
msgstr ""

msgid "Perform a 3D texture read with projection"
msgstr ""

msgid "vec4_type **textureLod** (sampler2D_type s, vec2 uv, float lod)"
msgstr ""

msgid "Perform a 2D texture read at custom mipmap"
msgstr ""

msgid "vec4_type **textureLod** (sampler2DArray_type s, vec3 uv, float lod)"
msgstr ""

msgid "Perform a 2D texture array read at custom mipmap"
msgstr ""

msgid "vec4_type **textureLod** (sampler3D_type s, vec3 uv, float lod)"
msgstr ""

msgid "Perform a 3D texture read at custom mipmap"
msgstr ""

msgid "vec4 **textureLod** (samplerCube s, vec3 uv, float lod)"
msgstr ""

msgid "vec4_type **textureProjLod** (sampler2D_type s, vec3 uv, float lod)"
msgstr ""

msgid "Perform a 2D texture read with projection/LOD"
msgstr ""

msgid "vec4_type **textureProjLod** (sampler2D_type s, vec4 uv, float lod)"
msgstr ""

msgid "vec4_type **textureProjLod** (sampler3D_type s, vec4 uv, float lod)"
msgstr ""

msgid "Perform a 3D texture read with projection/LOD"
msgstr ""

msgid "vec4_type **texelFetch** (sampler2D_type s, ivec2 uv, int lod)"
msgstr ""

msgid "Fetch a single texel using integer coordinates"
msgstr ""

msgid "vec4_type **texelFetch** (sampler2DArray_type s, ivec3 uv, int lod)"
msgstr ""

msgid "vec4_type **texelFetch** (sampler3D_type s, ivec3 uv, int lod)"
msgstr ""

msgid "vec_type **dFdx** (vec_type p)"
msgstr ""

msgid "Derivative in ``x`` using local differencing"
msgstr ""

msgid "vec_type **dFdy** (vec_type p)"
msgstr ""

msgid "Derivative in ``y`` using local differencing"
msgstr ""

msgid "vec_type **fwidth** (vec_type p)"
msgstr ""

msgid "Sum of absolute derivative in ``x`` and ``y``"
msgstr ""

msgid "Translation status"
msgstr "Progresso da Tradução"
