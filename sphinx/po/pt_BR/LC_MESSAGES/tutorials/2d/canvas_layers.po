# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Canvas layers"
msgstr "Camadas de canvas"

msgid "Viewport and Canvas items"
msgstr "Janela de Exibição e itens de Canvas"

msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""
"Nós 2D normais, como :ref:`Node2D <class_Node2D>` ou :ref:`Control "
"<class_Control>` ambos herdam de :ref:`CanvasItem <class_CanvasItem>`, que é "
"a base para todos os nós 2D. CanvasItems podem ser organizados em árvores. "
"Cada item herdará a transformação de seu pai. Isso significa que quando o "
"pai é movido, os filhos também se movem."

msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that display them."
msgstr ""
"Os nós CanvasItem, e nós herdados deles, são filhos diretos ou indiretos de "
"uma :ref:`Viewport <class_Viewport>`, e serão exibidos através dela."

msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a custom :ref:"
"`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy it "
"contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"Uma Viewport tem a propriedade :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, que permite aplicar uma "
"transformação personalizada :ref:`Transform2D <class_Transform2D>` à "
"hierarquia CanvasItem que a contém. Nós como :ref:`Camera2D "
"<class_Camera2D>` funcionam alterando essa transformação."

msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""
"Para obter efeitos como rolagem, manipular a propriedade de transformação da "
"tela é mais eficiente do que mover o item de lona raiz e toda a cena com ela."

msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"Normalmente, porém, não queremos que *tudo* no jogo ou aplicativo estejam "
"sujeitos à transformação de canvas. Exemplos disso são:"

msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Planos de fundo Paralax**: planos de fundo que se movem mais lentamente do "
"que o resto do estágio."

msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""
"**UI**: Pense em uma Interface de Usuário (UI) ou uma head-up display (HUD) "
"sobreposta à nossa visão do mundo do jogo. Queremos um contador de vida, uma "
"exibição de pontuação e outros elementos para manter suas posições na tela "
"mesmo quando nossa visão do mundo do jogo está mudando."

msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Transições**: Podemos desejar que os efeitos visuais usados para as "
"transições (fades, misturas) permaneçam em um local fixo na tela."

msgid "How can these problems be solved in a single scene tree?"
msgstr "Como esses problemas podem ser resolvidos em uma única árvore de cena?"

msgid "CanvasLayers"
msgstr "CanvasLayers"

msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"A resposta é :ref:`CanvasLayer <class_CanvasLayer>`, que é um nó que "
"adiciona uma camada de renderização 2D separada para todos os seus filhos e "
"netos. Filhos da janela de visualização desenharão por padrão na camada "
"\"0\", enquanto um CanvasLayer desenhará em qualquer camada numérica. "
"Camadas com um número maior serão desenhadas acima daquelas com um número "
"menor. CanvasLayers também têm sua própria transformação e não dependem da "
"transformação de outras camadas. Isso permite que a UI seja fixada no espaço "
"da tela enquanto nossa visão do mundo do jogo muda."

msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Um exemplo disso é a criação de um fundo de paralax. Isso pode ser feito com "
"um CanvasLayer na camada \"-1\". A tela com os pontos, contador de vida e "
"botão de pausa também pode ser criada na camada \"1\"."

msgid "Here's a diagram of how it looks:"
msgstr "Aqui está um diagrama de como ele se parece:"

msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayers são independentes da ordem da árvore e dependem apenas do "
"número da camada, portanto, podem ser instanciados quando necessário."

msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""
"CanvasLayers não são necessários para controlar a ordem de desenho dos nós. "
"A maneira padrão de garantir que um nó seja desenhado corretamente 'na "
"frente' ou 'atrás' dos outros é manipular a ordem dos nós no painel da cena. "
"Talvez contraintuitivamente, os nós superiores no painel de cena são "
"desenhados *atrás* dos inferiores na janela de exibição. Os nós 2d também "
"possuem uma propriedade para controlar sua ordem de desenho (veja :ref:"
"`Node2D.z_index <class_Node2D_property_z_index>`)."

msgid "Translation status"
msgstr "Progresso da Tradução"
