# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making main screen plugins"
msgstr "Criando plugins de tela principal"

msgid "What this tutorial covers"
msgstr "O que este tutorial aborda"

msgid ""
"As seen in the :ref:`doc_making_plugins` page, making a basic plugin that "
"extends the editor is fairly easy. Main screen plugins allow you to create "
"new UIs in the central part of the editor, which appear next to the \"2D\", "
"\"3D\", \"Script\", and \"AssetLib\" buttons. Such editor plugins are "
"referred as \"Main screen plugins\"."
msgstr ""

msgid ""
"This tutorial leads you through the creation of a basic main screen plugin. "
"For the sake of simplicity, our main screen plugin will contain a single "
"button that prints text to the console."
msgstr ""

msgid "Initializing the plugin"
msgstr "Inicializando o plugin"

msgid ""
"First create a new plugin from the Plugins menu. For this tutorial, we'll "
"put it in a folder called ``main_screen``, but you can use any name you'd "
"like."
msgstr ""

msgid ""
"The plugin script will come with ``_enter_tree()`` and ``_exit_tree()`` "
"methods, but for a main screen plugin we need to add a few extra methods. "
"Add five extra methods such that the script looks like this:"
msgstr ""

msgid ""
"The important part in this script is the ``has_main_screen()`` function, "
"which is overloaded so it returns ``true``. This function is automatically "
"called by the editor on plugin activation, to tell it that this plugin adds "
"a new center view to the editor. For now, we'll leave this script as-is and "
"we'll come back to it later."
msgstr ""

msgid "Main screen scene"
msgstr "Cena da tela principal"

msgid ""
"Create a new scene with a root node derived from ``Control`` (for this "
"example plugin, we'll make the root node a ``CenterContainer``). Select this "
"root node, and in the viewport, click the ``Layout`` menu and select ``Full "
"Rect``. You also need to enable the ``Expand`` vertical size flag in the "
"inspector. The panel now uses all the space available in the main viewport."
msgstr ""

msgid ""
"Next, let's add a button to our example main screen plugin. Add a ``Button`` "
"node, and set the text to \"Print Hello\" or similar. Add a script to the "
"button like this:"
msgstr ""

msgid ""
"Then connect the \"pressed\" signal to itself. If you need help with "
"signals, see the :ref:`doc_signals` article."
msgstr ""

msgid ""
"We are done with the main screen panel. Save the scene as ``main_panel."
"tscn``."
msgstr ""

msgid "Update the plugin script"
msgstr ""

msgid ""
"We need to update the ``main_screen_plugin.gd`` script so the plugin "
"instances our main panel scene and places it where it needs to be. Here is "
"the full plugin script:"
msgstr ""

msgid ""
"A couple of specific lines were added. ``MainPanel`` is a constant that "
"holds a reference to the scene, and we instance it into "
"`main_panel_instance`."
msgstr ""

msgid ""
"The ``_enter_tree()`` function is called before ``_ready()``. This is where "
"we instance the main panel scene, and add them as children of specific parts "
"of the editor. We use ``get_editor_interface().get_editor_viewport()`` to "
"obtain the viewport and add our main panel instance as a child to it. We "
"call the ``make_visible(false)`` function to hide the main panel so it "
"doesn't compete for space when first activating the plugin."
msgstr ""

msgid ""
"The ``_exit_tree()`` function is called when the plugin is deactivated. If "
"the main screen still exists, we call ``queue_free()`` to free the instance "
"and remove it from memory."
msgstr ""

msgid ""
"The ``make_visible()`` function is overridden to hide or show the main panel "
"as needed. This function is automatically called by the editor when the user "
"clicks on the main viewport buttons at the top of the editor."
msgstr ""

msgid ""
"The ``get_plugin_name()`` and ``get_plugin_icon()`` functions control the "
"displayed name and icon for the plugin's main viewport button."
msgstr ""

msgid ""
"Another function you can add is the ``handles()`` function, which allows you "
"to handle a node type, automatically focusing the main screen when the type "
"is selected. This is similar to how clicking on a 3D node will automatically "
"switch to the 3D viewport."
msgstr ""

msgid "Try the plugin"
msgstr "Testando o plugin"

msgid ""
"Activate the plugin in the Project Settings. You'll observe a new button "
"next to 2D, 3D, Script above the main viewport. Clicking it will take you to "
"your new main screen plugin, and the button in the middle will print text."
msgstr ""

msgid ""
"If you would like to try a finished version of this plugin, check out the "
"plugin demos here: https://github.com/godotengine/godot-demo-projects/tree/"
"master/plugins"
msgstr ""

msgid ""
"If you would like to see a more complete example of what main screen plugins "
"are capable of, check out the 2.5D demo projects here: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/2.5d"
msgstr ""

msgid "Translation status"
msgstr "Progresso da Tradução"
