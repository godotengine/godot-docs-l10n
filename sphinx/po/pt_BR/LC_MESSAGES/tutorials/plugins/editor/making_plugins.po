# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making plugins"
msgstr "Fazendo plugins"

msgid "About plugins"
msgstr "Sobre plugins"

msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""
"Um plug-in é uma ótima maneira de ampliar o editor com ferramentas úteis. "
"Pode ser feito inteiramente com GDScript e cenas padrão, sem precisar "
"recarregar o editor. Ao contrário dos módulos, você não precisa criar código "
"C++ nem recompilar o editor. Embora isso torne os plug-ins menos poderosos, "
"ainda há muitas coisas que você pode fazer com eles. Observe que um plug-in "
"é semelhante a qualquer cena que você já pode criar, exceto que é criado "
"usando um script para adicionar a funcionalidade do editor."

msgid ""
"This tutorial will guide you through the creation of two simple plugins so "
"you can understand how they work and be able to develop your own. The first "
"will be a custom node that you can add to any scene in the project and the "
"other will be a custom dock added to the editor."
msgstr ""
"Este tutorial irá guiá-lo através da criação de dois plugins simples para "
"que você possa entender como eles funcionam e ser capaz de desenvolver o seu "
"próprio. O primeiro será um nó personalizado que você pode adicionar a "
"qualquer cena do projeto e o outro será um painel personalizado adicionado "
"ao editor."

msgid "Creating a plugin"
msgstr "Criando um plugin"

msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""
"Antes de começar, crie um novo projeto vazio onde quiser. Isso servirá como "
"base para desenvolver e testar os plugins."

msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""
"A primeira coisa que você precisa para o editor identificar um novo plugin é "
"criar dois arquivos: um ``plugin.cfg`` para configuração e um script de "
"ferramenta com a funcionalidade. Plugins tem um caminho padrão como ``addons/"
"plugin_name`` dentro da pasta do projeto. Godot fornece uma caixa de diálogo "
"para gerar esses arquivos e colocá-los onde precisam estar."

msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create`` "
"button in the top-right."
msgstr ""
"Na barra de ferramentas principal, clique no menu suspenso ``Projeto``. Em "
"seguida, clique em ``Configurações do projeto...``. Vá para a guia "
"``Plugins`` e clique no botão ``Criar`` no canto superior direito."

msgid "You will see the dialog appear, like so:"
msgstr "Você verá a caixa de diálogo aparecer, assim:"

#, fuzzy
msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr ""
"O texto do placeholder em cada campo descreve como isso afeta a criação dos "
"arquivos pelo plug-in e os valores do arquivo de configuração."

msgid "To continue with the example, use the following values:"
msgstr "Para continuar com o exemplo, utilize os seguintes valores:"

#, fuzzy
msgid ""
"Unchecking the ``Activate now?`` option in C# is always required because, "
"like every other C# script, the EditorPlugin script needs to be compiled "
"which requires building the project. After building the project the plugin "
"can be enabled in the ``Plugins`` tab of ``Project Settings``."
msgstr ""
"Desmarcar a opção ``Ativar agora?`` em C# é sempre necessário porque, como "
"qualquer outro script C#, o script EditorPlugin precisa ser compilado, o que "
"requer a construção do projeto. Depois de construir o projeto, o plugin pode "
"ser habilitado na aba ``Plugins`` de ``Project Settings``."

msgid "You should end up with a directory structure like this:"
msgstr "Você deve acabar com uma estrutura de diretório como esta:"

msgid ""
"``plugin.cfg`` is a simple INI file with metadata about your plugin. The "
"name and description help people understand what it does. Your name helps "
"you get properly credited for your work. The version number helps others "
"know if they have an outdated version; if you are unsure on how to come up "
"with the version number, check out `Semantic Versioning <https://semver.org/"
">`_. The main script file will instruct Godot what your plugin does in the "
"editor once it is active."
msgstr ""
"``plugin.cfg`` é um arquivo INI simples com metadados sobre seu plugin. O "
"nome e a descrição ajudam as pessoas a entender o que ele faz. Seu nome "
"ajuda você a receber os devidos créditos por seu trabalho. O número da "
"versão ajuda outras pessoas a saber se possuem uma versão desatualizada; se "
"você não tiver certeza de como obter o número da versão, verifique `Semantic "
"Versioning <https://semver.org/>`_. O arquivo de script principal instruirá "
"Godot sobre o que seu plug-in faz no editor quando estiver ativo."

msgid "The script file"
msgstr "O arquivo de script"

msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""
"Após a criação do plugin, a caixa de diálogo abrirá automaticamente o script "
"EditorPlugin para você. O script tem dois requisitos que você não pode "
"alterar: deve ser um script ``tool``, ou então não carregará corretamente no "
"editor, e deve herdar de :ref:`class_EditorPlugin`."

msgid ""
"In addition to the EditorPlugin script, any other script that your plugin "
"uses must *also* be a tool. * Any GDScript without ``tool`` imported into "
"the editor will act like an empty file! * Any C# class without ``[Tool]`` "
"won't be reloaded when the project is built forcing you to re-enable the "
"plugin!"
msgstr ""
"Além do script do EditorPlugin, qualquer outro script usado pelo seu plug-in "
"*também* deve ser uma ferramenta. * Qualquer GDScript sem ``tool`` importado "
"para o editor funcionará como um arquivo vazio! * Qualquer classe C# sem "
"``[Tool]`` não será recarregada quando o projeto for construído, forçando "
"você a reativar o plugin!"

msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_method__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node_method__exit_tree>` to clean it up. Thankfully, "
"the dialog generates these callbacks for you. Your script should look "
"something like this:"
msgstr ""
"É importante lidar com a inicialização e a limpeza dos recursos. Uma boa "
"prática é usar a função virtual :ref:`_enter_tree() "
"<class_Node_method__enter_tree>` para inicializar seu plugin e :ref:"
"`_exit_tree() <class_Node_method__exit_tree>` para limpá-lo. Felizmente, a "
"caixa de diálogo gera esses retornos de chamada para você. Seu script deve "
"ficar mais ou menos assim:"

msgid "This is a good template to use when creating new plugins."
msgstr "Este é um bom modelo para usar ao criar novos plugins."

msgid "A custom node"
msgstr "Um nó personalizado"

msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""
"Às vezes, você deseja um determinado comportamento em muitos nós, como uma "
"cena ou controle personalizado que pode ser reutilizado. A instanciação é "
"útil em muitos casos, mas às vezes pode ser complicada, especialmente se "
"você a estiver usando em muitos projetos. Uma boa solução para isso é criar "
"um plugin que adicione um nó com um comportamento personalizado."

msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_gdscript_basics_class_name>`. If you are writing GDScript "
"or NativeScript, we recommend using Script Classes instead."
msgstr ""
"Os nós adicionados por meio de um EditorPlugin são nós \"CustomType\". "
"Embora trabalhem com qualquer linguagem de script, eles têm menos recursos "
"do que :ref:`o sistema Script Class <doc_gdscript_basics_class_name>`. Se "
"você estiver escrevendo GDScript ou NativeScript, recomendamos o uso de "
"classes de script."

msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the editor "
"(nodes or resources). However, before you can create the type, you need a "
"script that will act as the logic for the type. While that script doesn't "
"have to use the ``tool`` keyword, it can be added so the script runs in the "
"editor."
msgstr ""
"Para criar um novo tipo de nó, você pode usar a função :ref:"
"`add_custom_type() <class_EditorPlugin_method_add_custom_type>` da classe :"
"ref:`class_EditorPlugin`. Esta função pode adicionar novos tipos ao editor "
"(nós ou recursos). No entanto, antes de criar o tipo, você precisa de um "
"script que atue como a lógica do tipo. Embora esse script não precise usar a "
"palavra-chave ``tool``, ela pode ser adicionada para que o script seja "
"executado no editor."

msgid ""
"For this tutorial, we'll create a simple button that prints a message when "
"clicked. For that, we'll need a simple script that extends from :ref:"
"`class_Button`. It could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""
"Para este tutorial, criaremos um botão simples que imprime uma mensagem "
"quando clicado. Para isso, vamos precisar de um script simples que se "
"estende de :ref:`class_Button`. Também pode estender :ref:`class_BaseButton` "
"se você preferir:"

msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.png\")`). You can also use SVG icons if "
"desired."
msgstr ""
"Isso é tudo para o nosso botão básico. Você pode salvá-lo como ``my_button."
"gd`` dentro da pasta do plugin. Você também precisará de um ícone 16×16 para "
"mostrar na árvore de cena. Se você não tiver um, você pode pegar o padrão do "
"mecanismo e salvá-lo em sua pasta `addons/my_custom_node` como `icon.png`, "
"ou usar o logotipo Godot padrão (`preload(\"res:// icon.png\")`). Você "
"também pode usar ícones SVG, se desejar."

msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""
"Agora, precisamos adicioná-lo como um tipo personalizado para que seja "
"exibido na caixa de diálogo **Criar Novo Nó**. Para isso, altere o script "
"``custom_node.gd`` para o seguinte:"

msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""
"Feito isso, o plugin já deve estar disponível na lista de plugins em "
"**Configurações do Projeto**, então ative-o conforme explicado em "
"`Verificando os resultados`_."

msgid "Then try it out by adding your new node:"
msgstr "Em seguida, experimente-o adicionando seu novo nó:"

msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""
"Ao adicionar o nó, você pode ver que ele já tem o script que você criou "
"anexado a ele. Defina um texto para o botão, salve e execute a cena. Ao "
"clicar no botão, você pode ver algum texto no console:"

msgid "A custom dock"
msgstr "Um painel personalizado"

msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""
"Às vezes, você precisa estender o editor e adicionar ferramentas que estão "
"sempre disponíveis. Uma maneira fácil de fazer isso é adicionar um novo dock "
"com um plug-in. Docks são apenas cenas baseadas em Control, então elas são "
"criadas de forma semelhante às cenas GUI usuais."

msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""
"A criação de um painel personalizado é feita exatamente como um nó "
"personalizado. Crie um novo arquivo ``plugin.cfg`` na pasta ``addons/"
"my_custom_dock`` e adicione o seguinte conteúdo a ele:"

msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""
"Em seguida, crie o script ``custom_dock.gd`` na mesma pasta. Preencha-o com "
"o :ref:`template que vimos antes <doc_making_plugins_template_code>` para "
"começar bem."

msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""
"Como estamos tentando adicionar um novo painel personalizado, precisamos "
"criar o conteúdo do painel. Isso nada mais é do que uma cena padrão do "
"Godot: basta criar uma nova cena no editor e editá-la."

msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""
"Para um painel do editor, o nó raiz **deve** ser um :ref:`Control "
"<class_Control>` ou uma de suas classes filhas. Para este tutorial, você "
"pode criar um único botão. O nome do nó raiz também será o nome que aparece "
"na guia painel, portanto, certifique-se de fornecer um nome curto e "
"descritivo. Além disso, não se esqueça de adicionar algum texto ao seu botão."

msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""
"Salve esta cena como ``my_dock.tscn``. Agora, precisamos pegar a cena que "
"criamos e adicioná-la como um encaixe no editor. Para isso, você pode contar "
"com a função :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` da classe :ref:"
"`EditorPlugin <class_EditorPlugin>`."

msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""

msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""

msgid "Checking the results"
msgstr "Verificando os resultados"

msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list. If it is not showing, click on the **Update** button in the "
"top-right corner."
msgstr ""

msgid ""
"You can see the plugin is inactive on the **Status** column; click on the "
"status to select **Active**. The dock should become visible before you even "
"close the settings window. You should now have a custom dock:"
msgstr ""

msgid "Going beyond"
msgstr "Indo além"

msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""

msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""

msgid "Registering autoloads/singletons in plugins"
msgstr "Registrando autoloads/singletons em plugins"

msgid ""
"It is possible for editor plugins to automatically register :ref:`autoloads "
"<doc_singletons_autoload>` when the plugin is enabled. This also includes "
"unregistering the autoload when the plugin is disabled."
msgstr ""

msgid ""
"This makes setting up plugins faster for users, as they no longer have to "
"manually add autoloads to their project settings if your editor plugin "
"requires the use of an autoload."
msgstr ""

msgid "Use the following code to register a singleton from an editor plugin:"
msgstr ""
"Use o seguinte código para registrar um singleton de um plugin de editor:"

msgid "Translation status"
msgstr "Progresso da Tradução"
