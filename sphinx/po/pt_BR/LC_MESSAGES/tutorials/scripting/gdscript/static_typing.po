# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Tipagem estática em GDScript"

msgid "In this guide, you will learn:"
msgstr "Neste guia, você aprenderá:"

msgid "**How to use types in GDScript**"
msgstr "**Como usar tipos no GDScript**"

msgid "That **static types can help you avoid bugs**"
msgstr "Que os **tipos estáticos podem ajudá-lo a evitar erros**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"A decisão de onde e como você usa esse novo recurso de linguagem é "
"inteiramente sua: você pode usá-lo apenas em alguns arquivos GDScript "
"sensíveis, usá-lo em qualquer lugar ou escrever códigos como sempre fez!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Tipos estáticos podem ser usados em variáveis, constantes, funções, "
"parâmetros e tipos de retorno."

msgid "Typed GDScript is available since Godot 3.1."
msgstr "O GDScript tipado está disponível desde Godot 3.1."

msgid "A brief look at static typing"
msgstr "Uma breve olhada na tipagem estática"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"Com GDScript tipado, Godot pode detectar ainda mais erros enquanto você "
"escreve o código! Ele fornece a você e a seus colegas de equipe mais "
"informações enquanto você trabalha, pois os tipos de argumentos aparecem "
"quando você chama um método."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Imagine que você esteja programando um sistema de inventário. Você codifica "
"um nó ``Item``, depois um ``Inventário``. Para adicionar itens ao "
"inventário, as pessoas que trabalham com seu código devem sempre passar um "
"``Item`` para o método ``Inventário.add``. Com tipos, você pode impor isso:"

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Outra vantagem significativa do GDScript tipado é o novo **sistema de "
"alerta**. A partir da versão 3.1, Godot dá avisos sobre o seu código à "
"medida que você o escreve: o motor identifica seções de seu código que podem "
"levar a problemas em tempo de execução, mas permite que você decida se "
"deseja ou não deixar o código como está. Mais sobre isso em um momento."

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Tipos estáticos também oferecem opções melhores de conclusão de código. "
"Abaixo, você pode ver a diferença entre opções de conclusão tipadas dinâmica "
"e estática completa para uma classe chamada ``PlayerController``."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Você provavelmente armazenou um nó em uma variável antes e digitou um ponto "
"para ficar sem sugestões de preenchimento automático:"

msgid "code completion options for dynamic"
msgstr ""

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Isto é devido a código dinâmico. O Godot não pode saber qual nó ou tipo de "
"valor você está passando para a função. Se você escrever o tipo "
"explicitamente no entanto, você obterá todos os métodos e variáveis públicos "
"do nó:"

msgid "code completion options for typed"
msgstr ""

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"No futuro, o GDScript tipado também aumentará o desempenho do código: a "
"compilação Just-In-Time e outras melhorias do compilador já estão no roteiro!"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"No geral, a programação tipada proporciona uma experiência mais estruturada. "
"Ajuda a evitar erros e melhora o aspecto de autodocumentação dos seus "
"scripts. Isso é especialmente útil quando você trabalha em equipe ou em um "
"projeto de longo prazo: estudos mostram que os desenvolvedores passam a "
"maior parte do tempo lendo o código de outras pessoas ou scripts que "
"escreveram no passado e esqueceram. Quanto mais claro e mais estruturado o "
"código, mais rápido será entender, mais rápido você poderá avançar."

msgid "How to use static typing"
msgstr "Como usar a tipagem estática"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Para definir o tipo de uma variável ou uma constante, escreva dois pontos "
"após o nome da variável, seguido por seu tipo. Por exemplo. ``var health: "
"int``. Isso força o tipo da variável a permanecer sempre o mesmo:"

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot tentará inferir tipos se você escrever dois pontos, mas omite o tipo:"

msgid "Currently you can use three types of… types:"
msgstr "Atualmente você pode usar três tipos de… tipos:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Embutido <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Classes e nós centrais (``Objeto``, ``Nó``, ``Area2D``, ``Camera2D``, etc.)"

msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"Suas próprias classes personalizadas. Veja o novo recurso :ref:'class_name "
"<doc_gdscript_basics_class_name>' para registrar tipos no editor."

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"Você não precisa escrever inferências de tipo para constantes, já que o "
"Godot o define automaticamente a partir do valor atribuído. Mas você ainda "
"pode fazer isso para tornar a intenção do seu código mais clara."

msgid "Custom variable types"
msgstr "Tipos de variável personalizados"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Você pode usar qualquer classe, incluindo suas classes personalizadas, como "
"tipos. Existem duas maneiras de usá-los em scripts. O primeiro método é pré-"
"carregar o script que você deseja usar como um tipo em uma constante:"

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"O segundo método é usar a palavra-chave ``class_name`` quando você cria. "
"Para o exemplo acima, o seu Rifle.gd ficaria assim:"

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Se você usa ``class_name``, o Godot registra o tipo Rifle globalmente no "
"editor, e você pode usá-lo em qualquer lugar, sem ter que previamente "
"carregá-lo em uma constante:"

msgid "Variable casting"
msgstr "Conversão de variáveis"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"A conversão de tipos é um conceito-chave em linguagens tipados. Casting é a "
"conversão de um valor de um tipo para outro."

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Imagine um Inimigo no seu jogo, que ``extends Area2D``. Você quer que ele "
"colida com o Jogador, um ``KinematicBody2D`` com um script chamado "
"``PlayerController`` atrelado a ele."

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Você pode verificar se este ``PhysicsBody2D`` é o seu Jogador com a palavra-"
"chave ``as`` e usando os dois pontos ``:`` novamente para forçar a variável "
"a usar este tipo. Isso força a variável a se ater ao tipo "
"``PlayerController``:"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Como nós estamos lidando com um tipo personalizado, se o ``body`` não "
"extende ``PlayerController``, a variável ``player``\\ vai ser definida como "
"``null``. Nós podemos usar isso para checar se o body é o player or não. Nós "
"também poderemos usar preenchimento automático completo no variável player "
"graças a essa conversão."

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Se você tentar moldar com um tipo embutido e falhar, Godot lançará um erro."

msgid "Safe lines"
msgstr "Linhas seguras"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Você também pode usar casting para garantir linhas seguras. As linhas "
"seguras são uma nova ferramenta do Godot 3.1 para lhe dizer quando linhas de "
"código ambíguas são seguras para o tipo. Como você pode misturar e combinar "
"códigos tipados e dinâmicos, às vezes, Godot não tem informações suficientes "
"para saber se uma instrução disparará um erro ou não em tempo de execução."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Isso acontece quando você pega um nó filho. Vamos tomar um timer como "
"exemplo: com código dinâmico, você pode pegar o nó usando ``$Timer``. "
"GDScript suporta `duck-typing <https://stackoverflow.com/"
"a/4205163/8125343>`__, então mesmo que o seu timer seja do tipo ``Timer``, "
"ele também é um ``Node`` e um ``Object``, extendendo duas classes. Com "
"GDScript dinâmico, você não se importa com o tipo do nó desde que ele tenha "
"os métodos que você quer chamar."

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Você pode usar casting para dizer ao Godot o tipo que você espera quando "
"você obtém um nó: ``($Timer as Timer)``, ``($Player as KinematicBody2D)`` "
"etc. O Godot irá verificar que o tipo funciona e, se funcionar, o número da "
"linha ficará verde à esquerda do editor de script."

msgid "Unsafe vs Safe Line"
msgstr "Linha insegura vs. segura"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Linha não segura (linha 7) vs Linhas Seguras (linha 6 e 8)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Você pode desativar linhas seguras ou alterar suas cores nas configurações "
"do editor."

msgid "Define the return type of a function with the arrow ->"
msgstr "Defina o tipo de retorno de uma função com a seta ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Para definir o tipo de retorno de uma função, coloque um traço e o símbolo "
"de menor que ``->`` depois de sua declaração, seguido pelo tipo de retorno:"

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"O tipo ``void`` significa que a função não retorna nada. Você pode usar "
"qualquer tipo, como com variáveis:"

msgid "You can also use your own nodes as return types:"
msgstr "Você também pode usar seus próprios nós como tipos de retorno:"

msgid "Typed or dynamic: stick to one style"
msgstr "Tipada ou dinâmica: Adote um estilo"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"GDScript tipado e GDScript dinâmico podem coexistir em um mesmo projeto. Mas "
"é recomendado adotar um dos dois estilos para manter a consistência do seu "
"código base. Facilita para todos trabalharem juntos se vocês seguirem as "
"mesmas diretrizes, e acelera a leitura e o entendimento do código de outras "
"pessoas."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"Código tipado leva um pouco mais de escrita, mas você terá os benefícios "
"discutidos acima. Aqui está um exemplo do mesmo script vazio utilizando a "
"tipagem dinâmica:"

msgid "And with static typing:"
msgstr "E com a tipagem estática:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Como você pode ver, você também pode usar tipos com os métodos virtuais da "
"engine. Chamadas de retorno de sinal, como quaisquer métodos, também podem "
"usar tipos. Aqui um sinal ``body_entered`` com a tipagem dinâmica:"

msgid "And the same callback, with type hints:"
msgstr "E a mesma chamada de retorno, com as inferências de tipo:"

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Você é livre pra substituir, por exemplo, o ``CollisionObject2D``, com seu "
"próprio tipo, para converter os parâmetros automaticamente:"

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"A variável ``bullet`` pode guardar qualquer objeto ``CollisionObject2D`` "
"aqui, mas temos que garantir que é o nosso ``Bullet``, um nó que criamos "
"para o nosso projeto. Se for qualquer outra coisa, como uma ``Area2D``, ou "
"qualquer nó que não estenda ``Bullet``, a variável ``bullet`` será ``null``."

msgid "Warning system"
msgstr "Sistema de alertas"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""
"A documentação sobre o sistema de avisos do GDScript foi movida para :ref:"
"`doc_gdscript_warning_system`."

msgid "Cases where you can't specify types"
msgstr "Casos onde você não pode especificar tipos"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Para concluir essa introdução, vamos abordar alguns poucos casos onde você "
"não pode usar inferências de tipo. Todos os exemplos abaixo **irão acionar "
"erros**."

msgid "You can't use Enums as types:"
msgstr "Você não pode usar Enums como tipos:"

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""
"Você não pode especificar o tipo de membros individuais em um array. Isso "
"lhe dará um erro:"

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"Você não pode forçar a atribuição de tipos em um loop ``for``, pois cada "
"elemento em que o loop ``for`` executa em loop já possui um tipo diferente. "
"Então você **não pode** escrever:"

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "Dois scripts não podem depender um do outro de maneira cíclica:"

msgid "Summary"
msgstr "Resumo"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"GDScript tipado é uma ferramenta poderosa. Disponível na versão 3.1 do "
"Godot, lhe ajudará a escrever um código mais estruturado, evitando erros "
"comuns, e a criar sistemas escaláveis. No futuro, a tipagem estática também "
"te trará um bom aumento de desempenho graças às futuras otimizações do "
"compilador."

msgid "Translation status"
msgstr "Progresso da Tradução"
