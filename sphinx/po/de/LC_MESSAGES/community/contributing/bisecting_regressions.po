# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "Halbierender Rückschritt"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"Halbierung ist ein Weg, um Rückschritte in Software zu finden. Nachdem Sie "
"einen Fehler im `Godot repository on GitHub <https://github.com/godotengine/"
"godot>`__ gemeldet haben, werden Sie möglicherweise von einem Mitwirkenden "
"gebeten, das Problem zu *halbieren*. Durch die Halbierung können Mitwirkende "
"Fehler schneller beheben, da sie im Voraus wissen, welches Commit den "
"Rückschritt verursacht hat. Ihre Bemühungen werden allgemein geschätzt :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr ""
"In der folgenden Anleitung wird erläutert, wie Sie einen Rückschritt durch "
"Halbieren finden."

msgid "What is bisecting?"
msgstr "Was ist halbierend?"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Godot-Entwickler verwenden das Versionskontrollsystem `Git <https://git-scm."
"com/>`__. Im Kontext von Git ist die Halbierung der Prozess der Durchführung "
"für eine manuelle `binäre Suche <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ , um festzustellen, wann ein Rückschritt "
"aufgetreten ist. Während es normalerweise für Fehler verwendet wird, können "
"damit auch andere Arten unerwarteter Änderungen gefunden werden, z.B. "
"Leistungsrückschritte."

msgid "Using official builds to speed up bisecting"
msgstr "Verwenden Sie offizielle Builds, um die Halbierung zu beschleunigen"

msgid ""
"Before using Git's ``bisect`` command, we strongly recommend trying to "
"reproduce the bug with an older (or newer) official release. This greatly "
"reduces the range of commits that potentially need to be built from source "
"and tested. You can find binaries of official releases, as well as alphas, "
"betas, and release candidates `here <https://downloads.tuxfamily.org/"
"godotengine/>`__."
msgstr ""
"Bevor Sie den ``bisect``-Befehl von Git verwenden, empfehlen wir dringend, "
"den Fehler mit einer älteren (oder neueren) offiziellen Version zu "
"reproduzieren. Das reduziert die Bandbreite der Commits, die potentiell aus "
"dem Quellcode gebaut und getestet werden müssen, erheblich. Sie können "
"Binärdateien von offiziellen Versionen, sowie Alphas, Betas und Release "
"Candidates `hier <https://downloads.tuxfamily.org/godotengine/>`__ finden."

msgid ""
"For example, if you've reported a bug against Godot 3.2, you should first "
"try to reproduce the bug in Godot 3.1 (not a patch release, see below for "
"the reason). If the bug doesn't occur there, try to reproduce it in Godot "
"3.2 *beta 1* (which is roughly in the middle of all test builds available). "
"If you can't reproduce the bug with Godot 3.2 beta 1, then try newer betas "
"and RC builds. If you do manage to reproduce the bug with Godot 3.2 beta 1, "
"then try older alpha builds."
msgstr ""
"Wenn Sie z. B. einen Fehler mit Godot 3.2 gemeldet haben, sollten Sie "
"zunächst versuchen, den Fehler in Godot 3.1 zu reproduzieren (keine Patch-"
"Version, siehe unten für den Grund). Wenn der Fehler dort nicht auftritt, "
"versuchen Sie, ihn in Godot 3.2 *beta 1* zu reproduzieren (was ungefähr in "
"der Mitte aller verfügbaren Test-Builds liegt). Wenn Sie den Fehler mit "
"Godot 3.2 beta 1 nicht reproduzieren können, dann versuchen Sie neuere Betas "
"und RC-Builds. Wenn Sie es schaffen, den Fehler mit Godot 3.2 beta 1 zu "
"reproduzieren, dann versuchen Sie ältere Alpha-Builds."

msgid ""
"For bisecting regressions, don't use patch releases such as Godot 3.1.2. "
"Instead, use the minor version's first release like Godot 3.1. This is "
"because patch releases are built from a separate *stable branch*. This kind "
"of branch doesn't follow the rest of Godot's development, which is done in "
"the ``master`` branch."
msgstr ""
"Verwenden Sie für die Bisektion von Regressionen keine Patch-Versionen wie "
"Godot 3.1.2. Verwenden Sie stattdessen das erste Release der Minor-Version "
"wie Godot 3.1. Das liegt daran, dass Patch-Versionen aus einem separaten "
"*stable branch* erstellt werden. Diese Art von Zweig folgt nicht der "
"restlichen Entwicklung von Godot, die im ``master``-Zweig stattfindet."

msgid "The Git bisect command"
msgstr "Der Befehl Git bisect"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"Wenn Sie einen Build gefunden haben, der den Fehler im obigen Testprozess "
"nicht aufwies, können Sie nun damit beginnen, die Regression zu bisektieren. "
"Das Git Versionskontrollsystem bietet dafür einen eingebauten Befehl: ``git "
"bisect``. Das macht den Prozess halbautomatisch, da Sie nur die Engine bauen "
"müssen, sie laufen lassen und versuchen, den Fehler zu reproduzieren."

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"Bevor Sie eine Regression bisectieren, müssen Sie eine Build-Umgebung "
"einrichten, um Godot aus dem Quellcode zu kompilieren. Lesen Sie dazu die "
"Seite :ref:`Kompilieren <toc-devel-compiling>` für Ihre Zielplattform. (Zum "
"Kompilieren von Godot aus dem Quellcode sind keine C++-Programmierkenntnisse "
"erforderlich.)"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"Beachten Sie, dass das Kompilieren von Godot auf langsamer Hardware eine "
"Weile dauern kann (bis zu einer Stunde für jeden vollständigen Neuaufbau auf "
"einer langsamen Dual-Core-CPU). Das bedeutet, dass der gesamte Prozess bis "
"zu mehrere Stunden dauern kann. Wenn Ihre Hardware zu langsam ist, möchten "
"Sie vielleicht dort aufhören und die Ergebnisse Ihrer \"Vor-Bisectierung\" "
"im GitHub Issue berichten, so dass ein anderer Mitwirkender von dort aus das "
"Bisecting fortsetzen kann."

msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""
"Um mit dem Bisecting zu beginnen, müssen Sie zunächst die Commit-Hashes "
"(Identifier) des \"schlechten\" und \"guten\" Builds ermitteln. \"Schlecht\" "
"bezieht sich auf den Build, der den Fehler aufweist, während \"gut\" sich "
"auf die Version bezieht, die den Fehler nicht aufweist. Wenn Sie einen Pre-"
"Release-Build als \"guten\" oder \"schlechten\" Build verwenden, durchsuchen "
"Sie den `Download-Mirror <https://downloads.tuxfamily.org/godotengine/>`__, "
"gehen Sie in den Ordner, der den Pre-Release enthält, den Sie "
"heruntergeladen haben und suchen Sie nach der Datei ``README.txt``. Der "
"Commit-Hash wird in diese Datei geschrieben."

msgid ""
"If you're using a stable release as the \"good\" or \"bad\" build, use one "
"of the following commit hashes depending on the version:"
msgstr ""
"Wenn Sie eine stabile Version als \"guten\" oder \"schlechten\" Build "
"verwenden, benutzen Sie je nach Version einen der folgenden Commit-Hashes:"

msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash."
msgstr ""
"Um auf den letzten Stand des Master-Zweigs zu verweisen, können Sie "
"``master`` anstelle eines Commit-Hashs verwenden."

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`Holen Sie Godots Quellcode mit Git <doc_getting_source>`. Sobald dies "
"geschehen ist, verwenden Sie im Terminalfenster ``cd``, um den Godot-"
"Repository-Ordner zu erreichen, und geben Sie den folgenden Befehl ein:"

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr ""
"Kompiliere Godot. Dies setzt voraus, dass Sie eine Build-Umgebung "
"eingerichtet haben:"

msgid ""
"Since building Godot takes a while, you want to dedicate as many CPU threads "
"as possible to the task. This is what the ``-j`` parameter does. Here, the "
"command assigns 4 CPU threads to compiling Godot."
msgstr ""
"Da der Build von Godot eine Weile dauert, möchten Sie so viele CPU-Threads "
"wie möglich für die Aufgabe verwenden. Dies wird durch den Parameter ``-j`` "
"erreicht. Hier weist der Befehl 4 CPU-Threads zum Kompilieren von Godot zu."

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr ""
"Führen Sie die Binärdatei im Ordner ``bin /`` aus und versuchen Sie, den "
"Fehler zu reproduzieren."

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr ""
"Wenn der Build **immer noch** den Fehler aufweist, führen Sie den folgenden "
"Befehl aus:"

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr ""
"Wenn der Build den Fehler **nicht** aufweist, führen Sie den folgenden "
"Befehl aus:"

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"Nachdem Sie einen der obigen Befehle eingegeben haben, wird Git zu einem "
"anderen Commit wechseln. Sie sollten nun Godot erneut builden, versuchen, "
"den Fehler zu reproduzieren, und dann je nach Ergebnis ``git bisect good`` "
"oder ``git bisect bad`` eingeben. Dies müssen Sie mehrere Male wiederholen. "
"Je länger der Commit-Bereich ist, desto mehr Schritte werden benötigt. 5 bis "
"10 Schritte reichen normalerweise aus, um die meisten Regressionen zu "
"finden; Git wird Sie an die Anzahl der verbleibenden Schritte erinnern (im "
"worst-case Fall)."

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"Wenn Sie genügend Schritte durchgeführt haben, zeigt Git den Commit-Hash an, "
"wo die Regression aufgetreten ist. Schreiben Sie diesen Commit-Hash als "
"Kommentar zu dem GitHub Issue, das Sie bisected haben. Dies wird bei der "
"Lösung des Problems helfen. Nochmals vielen Dank für Ihren Beitrag zu "
"Godot :)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-scm."
"com/docs/git-bisect>`__."
msgstr ""
"Sie können die vollständige Dokumentation über ``git bisect`` `hier <https://"
"git-scm.com/docs/git-bisect>`__ lesen."

msgid "Translation status"
msgstr "Übersetzungsstatus"
