# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Spielerszene erstellen"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"Mit den korrekten Projekteinstellungen kann mit der Arbeit am "
"spielerkontrollierten Charakter begonnen werden."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"Die erste erstellte Szene definiert das ``Player``-Objekt. Einer der "
"Vorteile einer separaten Spieler-Szene ist, dass diese unabhängig vom Rest "
"des Spiels getestet werden kann, bevor andere Teile des Spiels existieren "
"müssen."

msgid "Node structure"
msgstr "Node Struktur"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"Um zu beginnen, müssen wir einen Wurzel-Node für das Spieler-Objekt wählen. "
"Als eine generelle Regel gilt, ein Wurzel-Node einer Szene sollte immer die "
"gewünschte Funktionalität des Objektes reflektieren - was das Objekt *ist*. "
"Klicken Sie auf den \"Andere Node\" - Knopf und fügen einen :ref:`Area2D "
"<class_Area2D>` Node zu der Szene hinzu."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot zeigt ein Icon mit einem Warnhinweis im Node des Szenenbaumes. Dieses "
"kann vorerst ignoriert werden, wir werden uns später darum kümmern."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"Mit ``Area2D`` können Objekte erkannt werden, die mit dem Spieler überlappen "
"oder diesen berühren. Wir ändern den Namen des Nodes zu ``Player``, indem "
"wir darauf Doppelklicken. Nun da wir den Wurzel-Node der Szene gesetzt "
"haben, können wir weitere Nodes hinzufügen, um ihm damit mehr Funktionalität "
"zu geben."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"Bevor wir weitere untergeordnete Nodes zu ``Player`` hinzufügen, wollen wir "
"sicherstellen, dass wir diese nicht aus Versehen bewegen oder deren Größe "
"ändern, indem wir auf sie klicken. Wählen Sie den Node aus und klicke auf "
"das Symbol rechts neben dem Schloss; sein Tooltip lautet \"Verhindert das "
"Auswählen von Unterobjekten dieses Nodes.\""

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Speichern Sie die Szene. Klicken Sie auf Szene -> Speichern oder drücken :"
"kbd:`Ctrl + S` unter Windows/Linux oder :kbd:`Cmd + S` unter MacOS."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "Für dieses Projekt halten wir uns an die Godot-Namenskonvention."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Klassen (Nodes) nutzen ``PascalCase``, Variablen und "
"Funktionen ``snake_case`` und Konstanten ``ALL_CAPS`` (Siehe :ref:"
"`doc_gdscript_styleguide`)."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: Klassen, Exportvariablen und Methoden verwenden die ``PascalCase``-"
"Schreibweise, private Felder ``_camelCase``, lokale Variablen und Parameter "
"verwenden ``camelCase`` (Siehe :ref:`doc_c_sharp_styleguide`). Beachten Sie "
"die genaue Schreibweise, wenn Sie Signale einbinden möchten."

msgid "Sprite animation"
msgstr "Sprite-Animation"

msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"Klicken Sie auf den ``Player`` Node und fügen ein :ref:`AnimatedSprite "
"<class_AnimatedSprite>` Node als Unterobjekt hinzu. Das ``AnimatedSprite`` "
"übernimmt das Erscheinungsbild und die Animationen für unseren Spieler. "
"Achten Sie auf das Warnsymbol neben dem Node . Ein ``AnimatedSprite`` "
"benötigt eine :ref:`SpriteFrames <class_SpriteFrames>` Ressource, eine Liste "
"der Animationen, die angezeigt werden können. Um eine zu erstellen suchen "
"Sie die Eigenschaft ``Frames`` im Inspektor und klicken \"[leer]\" -> "
"\"Neues SpriteFrames\". Bei erneutem draufklicken, sollte nun sich "
"automatisch das Animationspanel öffnen:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"Auf der linken Seite befindet sich eine Liste von Animationen. Klicken Sie "
"auf die \"default\" Animation und benennen sie in \"walk\" um. Dann klicken "
"Sie auf die \"hinzufügen\" Schaltfläche, um eine zweite Animation \"up\" "
"hinzuzufügen. Finden Sie die zwei Bilder, ``playerGrey_up[1/2]`` und "
"``playerGrey_walk[1/2]``, im \"Dateisystem\"-Reiter und ziehen diese in den "
"\"Animationsbilder\"-Bereich zu den entsprechenden Animationen:"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"Die Spielerbilder sind ein bisschen zu groß für das Spielefenster, also "
"müssen wir sie verkleinern. Klicken Sie auf den ``AnimatedSprite`` Node und "
"setzen die Eigenschaft ``Scale`` auf ``(0.5, 0.5)``. Sie können sie im "
"Inspektor unterhalb der Überschrift ``Node2D`` finden."

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"Abschließend fügen Sie ein :ref:`CollisionShape2D <class_CollisionShape2D>` "
"als ein Unterobjekt von ``Player`` hinzu. Er bestimmt die \"Hitbox\" des "
"Spielers oder die Grenzen seines Kollisionsbereichs. Für diesen Charakter "
"ist ein ``CapsuleShape2D`` Node am besten geeignet. Klicken Sie im Inspektor "
"neben \"Shape\" auf \"[leer]\" -> \"Neues CapsuleShape2D\". Verwenden Sie "
"die zwei Anfasser und verändern die Form so, dass sie das Sprite überdeckt:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr ""
"Wenn Sie fertig sind sollte Ihre ``Player`` Szene die folgende Struktur "
"haben:"

msgid "Make sure to save the scene again after these changes."
msgstr "Speichern Sie die Szene nach diesen Änderungen wieder ab."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"Im nächsten Schritt wird ein Skript für die Bewegung und Animation zum "
"Player Node hinzugefügt. Anschließend wird eine Kollisionserkennung "
"hinzugefügt, um zu wissen, wenn der Player von etwas getroffen wird."

msgid "Translation status"
msgstr "Übersetzungsstatus"
