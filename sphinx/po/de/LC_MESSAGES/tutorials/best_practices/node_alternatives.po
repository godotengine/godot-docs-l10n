# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Wann und wie vermeidet man die Verwendung von Nodes für alles"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Nodes sind einfach zu erstellen, aber selbst sie haben ihre Grenzen. Ein "
"Projekt kann zehntausende von Nodes haben, die alle irgendetwas tun. Je "
"komplexer ihr Verhalten ist, desto größer ist die Belastung, da jeder "
"einzelne zur Leistung eines Projekts beiträgt."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot bietet leichtere Objekte zum Erstellen von APIs, die von Nodes "
"verwendet werden. Behalten Sie dies als Möglichkeit im Hinterkopf, wenn Sie "
"festlegen wie Sie die Funktionen Ihres Projekts erstellen möchten."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Objekt <class_Object>`: Das ultimative Lightweight-Objekt, das "
"ursprüngliche Objekt, muss manuell verwaltet werden. Trotzdem ist es nicht "
"allzu schwierig, eigene benutzerdefinierte Datenstrukturen zu erstellen, "
"selbst Nodestrukturen, die auch leichter sind als die :ref:`Node "
"<class_Node>` Klasse."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Beispiel:** Siehe das Node :ref:`Tree <class_Tree>`. Es unterstützt ein "
"hohes Maß an Anpassung für ein Inhaltsverzeichnis mit einer beliebigen "
"Anzahl von Zeilen und Spalten. Die Daten, die zum Generieren der "
"Visualisierung verwendet werden, sind tatsächlich ein Baum von :ref:"
"`TreeItem <class_TreeItem>` Objekten."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Vorteile:** Durch die Vereinfachung der API auf Objekte mit kleinerem "
"Gültigkeitsbereich wird die Zugänglichkeit und die Iterationszeit "
"verbessert. Anstatt mit der gesamten Node-Bibliothek zu arbeiten, wird eine "
"abgekürzte Gruppe von Objekten erstellt, aus denen ein Node die "
"entsprechenden Unter-Notes generieren und verwalten kann."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"Man sollte vorsichtig damit umgehen. Man kann ein Objekt in einer Variablen "
"speichern, aber diese Referenzen können ohne Warnung ungültig werden. Wenn "
"der Ersteller des Objekts beispielsweise beschließt, es aus dem Nichts zu "
"löschen, wird beim nächsten Zugriff ein Fehlerstatus ausgelöst."

msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`Referenz <class_Reference>`: Nur etwas komplexer als ein Objekt. Sie "
"verfolgen Verweise auf sich selbst und löschen den geladenen Speicher nur, "
"wenn keine weiteren Verweise auf sich selbst vorhanden sind. Diese sind in "
"den meisten Fällen nützlich, in denen Daten in einer benutzerdefinierten "
"Klasse benötigt werden."

msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**Beispiel:** Siehe das :ref:`File <class_File>` Objekt. Es funktioniert "
"genau wie ein normales Objekt, nur dass man es nicht selbst löschen muss."

msgid "**Advantages:** same as the Object."
msgstr "**Vorteile:** die Gleichen wie das Objekt."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`Ressource <class_Resource>`: Nur geringfügig komplexer als Referenz. "
"Sie haben die grundlegende Fähigkeit, ihre Objekteigenschaften in / aus "
"Godot-Ressourcendateien zu serialisieren / deserialisieren (d. H. Zu "
"speichern und zu laden)."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**Beispiel:** Skripte, PackedScene (für Szenendateien) und andere Typen wie "
"die folgenden :ref:`AudioEffect <class_AudioEffect>` Klassen. Jedes dieser "
"Elemente kann gespeichert und geladen werden, daher erweitern sie sich von "
"Ressource."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Vorteile:** Es wurde :ref:`bereits viel <doc_resources>` über die Vorteile "
"von :ref:`Ressource <class_Resource>` gegenüber herkömmlichen "
"Datenspeichermethoden gesagt. Im Zusammenhang mit der Verwendung von "
"Ressourcen gegenüber Nodes liegt ihr Hauptvorteil jedoch in der "
"Inspektorkompatibilität. Sie sind zwar fast so leicht wie Objekte / "
"Referenzen, können jedoch Eigenschaften im Inspektor anzeigen und "
"exportieren. Dies ermöglicht es ihnen, einen Zweck ähnlich wie Unter-Nodes "
"in Bezug auf die Benutzerfreundlichkeit zu erfüllen, aber auch die Leistung "
"zu verbessern, wenn man plant, viele solcher Ressourcen / Nodes in ihren "
"Szenen zu haben."

msgid "Translation status"
msgstr "Übersetzungsstatus"
