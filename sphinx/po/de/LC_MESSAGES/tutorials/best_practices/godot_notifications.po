# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Benachrichtigungen in Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Jedes Objekt in Godot implementiert eine :ref:`_notification "
"<class_Object_method__notification>` -Methode. Ihr Zweck ist es, dem Objekt "
"zu ermöglichen, auf eine Vielzahl von Callbacks auf Engine-Ebene zu "
"reagieren, die sich darauf beziehen können. Wenn die Engine beispielsweise "
"ein :ref:`CanvasItem <class_CanvasItem>` zum \"Zeichnen\" auffordert, ruft "
"sie ``_notification (NOTIFICATION_DRAW)`` auf."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Einige dieser Benachrichtigungen, wie z.B. Zeichnen, sind nützlich um sie an "
"Skripten zu überschreiben. Godot hat viele von ihnen mit speziellen "
"Funktionen ausstattet:"

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""
"Was Benutzer möglicherweise *nicht* erkennen, ist, dass Benachrichtigungen "
"nicht nur für Nodes sondern auch andere Typen existieren:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: Ein Callback, der "
"während der Objektinitialisierung ausgelöst wird. Für Skripte nicht "
"zugänglich."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: Ein Callback, der ausgelöst "
"wird, bevor die Engine ein Objekt löscht, d. h. einen 'Destruktor'."

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: Ein Callback, der "
"ausgelöst wird, wenn die Maus das Fenster des Betriebssystems betritt, in "
"dem der Spielinhalt angezeigt wird."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"Und viele der Callbacks, die in Nodes *existieren*, haben keine dedizierten "
"Methoden, sind aber dennoch sehr nützlich."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: Ein Callback, der immer dann "
"ausgelöst wird, wenn ein untergeordneter Node einem anderen Node hinzugefügt "
"wird."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: Ein Callback, der immer dann "
"ausgelöst wird, wenn ein untergeordneter Node von einem anderen Node "
"entfernt wird."

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: Ein Callback, der ausgelöst "
"wird, nachdem ein Popup-Node eine ``popup*`` -Methode abgeschlossen hat. "
"Beachten Sie den Unterschied zu seinem Signal ``about_to_show``, das *vor* "
"seinem Erscheinen auslöst."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""
"Auf all diese benutzerdefinierten Benachrichtigungen kann man über die "
"universelle Methode ``_notification`` zugreifen."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Methoden in der Dokumentation, die als \"virtuell\" gekennzeichnet sind, "
"sollen auch von Skripten überschrieben werden."

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"Ein klassisches Beispiel ist die Methode :ref:`_init "
"<class_Object_method__init>` in Objekt. Obwohl es kein ``NOTIFICATION_*`` "
"Äquivalent hat, ruft die Engine die Methode trotzdem auf. Die meisten "
"Sprachen (außer C#) verlassen sich darauf als Konstruktor."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"In welcher Situation sollte man also jede dieser Benachrichtigungen oder "
"virtuellen Funktionen verwenden?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process, _physics_process und \\*_input"

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"Verwenden Sie ``_process``, wenn Sie eine Framerate-abhängige Deltazeit "
"zwischen Frames benötigen. Wenn Code, der Objektdaten aktualisiert, so oft "
"wie möglich aktualisiert werden muss, ist dies der richtige Ort. "
"Wiederkehrende Logikprüfungen und Daten-Caching werden hier häufig "
"ausgeführt, aber es kommt auf die Häufigkeit an, mit der die Auswertungen "
"aktualisiert werden müssen. Wenn nicht jeder Frame ausgeführt werden muss, "
"ist die Implementierung einer Timer-Yield-Timeout-Schleife eine weitere "
"Option."

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Verwenden Sie ``_physics_process``, wenn Sie eine Framerate-unabhängige "
"Deltazeit zwischen Frames benötigen. Wenn der Code im Laufe der Zeit "
"konsistente Aktualisierungen benötigt, unabhängig davon, wie schnell oder "
"langsam die Zeit voranschreitet, ist dies der richtige Ort. Hier sollten "
"wiederkehrende kinematische und Objekttransformationsoperationen ausgeführt "
"werden."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"Während es möglich ist, die beste Leistung zu erzielen, sollte man "
"vermeiden, während dieser Callbacks Eingabeprüfungen durchzuführen. "
"``_process`` und ``_physics_process`` werden bei jeder Gelegenheit ausgelöst "
"(sie \"ruhen\" sich standardmäßig nicht aus). Im Gegensatz dazu werden ``* "
"_input`` Callbacks nur in Frames ausgelöst, in denen die Engine die Eingabe "
"tatsächlich erkannt hat."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"Trotzdem kann man innerhalb der Eingabe-Callbacks nach Eingabeaktionen "
"suchen. Wenn man die Deltazeit verwenden möchte, kann man sie nach Bedarf "
"aus den zugehörigen Deltazeitmethoden abrufen."

msgid "_init vs. initialization vs. export"
msgstr "_init, Initialisierung und exportieren"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"Wenn das Skript seinen eigenen Node-Unterbaum ohne Szene initialisiert, "
"sollte dieser Code hier ausgeführt werden. Hier sollten auch andere "
"eigenschafts- oder Szenenbaum-unabhängige Initialisierungen ausgeführt "
"werden. Dies wird vor ``_ready`` oder ``_enter_tree`` ausgelöst, aber "
"nachdem ein Skript seine Eigenschaften erstellt und initialisiert hat."

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""
"Skripts verfügen über drei Arten von Eigenschaftszuweisungen, die während "
"der Instanziierung auftreten können:"

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""
"Beim Instanziieren einer Szene werden Eigenschaftswerte in der folgenden "
"Reihenfolge eingerichtet:"

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**Initiale Wertzuweisung:** Bei der Instanziierung wird entweder der "
"Initialisierungswert oder der Init-Zuweisungswert zugewiesen. Init-"
"Zuweisungen haben Vorrang vor Initialisierungswerten."

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**Exportierte Wertzuweisung:** Wenn Sie von einer Szene anstelle eines "
"Skripts instanziieren, weist Godot den exportierten Wert zu, um den im "
"Skript definierten initialen Wert zu ersetzen."

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Infolgedessen wirkt sich das Instanziieren eines Skripts gegenüber einer "
"Szene sowohl auf die Initialisierung *als auch* auf die Häufigkeit aus, mit "
"der die Engine den Setter aufruft."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready, _enter_tree und NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"Wenn Sie eine Szene instanziieren, die mit der ersten ausgeführten Szene "
"verbunden ist, instanziiert Godot Nodes im Baum (wobei ``_init`` -Aufrufe "
"ausgeführt werden) und erstellt den Baum, der von der Wurzel nach unten "
"verläuft. Dies führt dazu, dass ``_enter_tree`` -Aufrufe den Baum hinunter "
"verschachteln. Sobald der Baum vollständig ist, rufen untergeordnete Nodes "
"``_ready`` auf. Ein Node ruft diese Methode auf, sobald alle untergeordneten "
"Nodes ihre aufgerufen haben. Dies führt dann zu einer umgekehrten Kaskade, "
"die zurück zur Wurzel des Baumes führt."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"Beim Instanziieren eines Skripts oder einer eigenständigen Szene werden dem "
"Szenenbaum beim Erstellen keine Nodes hinzugefügt, sodass keine Callbacks "
"von ``_enter_tree`` ausgelöst werden. Stattdessen werden nur die Aufrufe "
"``_init`` ausgelöst. Erst wenn die Szene zum Szenenbaum hinzugefügt wird, "
"erfolgen die Aufrufe von ``_enter_tree`` und ``_ready``."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Wenn ein Verhalten ausgelöst werden muss, das als übergeordnete Nodes eines "
"anderen auftritt, unabhängig davon, ob es als Teil der Haupt- / aktiven "
"Szene auftritt oder nicht, kann die :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` Benachrichtigung verwendet "
"werden. Hier ist beispielsweise ein Snippet, das die Methode eines Nodes mit "
"einem benutzerdefinierten Signal auf dem übergeordneten Node verbindet, ohne "
"dass dies fehlschlägt. Nützlich für datenzentrierte Nodes, die zur Laufzeit "
"erstellt werden können."

msgid "Translation status"
msgstr "Übersetzungsstatus"
