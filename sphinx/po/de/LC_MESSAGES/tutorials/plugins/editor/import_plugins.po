# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Import plugins"
msgstr "Erweiterungen importieren"

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""
"In dieser Anleitung wird davon ausgegangen, dass Sie bereits wissen wie man "
"generische Plugins erstellt. Im Zweifelsfall lesen Sie bitte die Seite :ref:"
"`doc_making_plugins`. Dies setzt auch voraus, dass Sie mit dem Importsystem "
"von Godot vertraut sind."

msgid "Introduction"
msgstr "Einführung"

msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, Ogg Vorbis "
"sounds, and many more."
msgstr ""
"Ein Import-Plugin ist eine spezielle Art von Editor-Tool, mit dem "
"benutzerdefinierte Ressourcen von Godot importiert und als erstklassige "
"Ressourcen behandelt werden können. Der Editor selbst wird mit vielen Import-"
"Plugins geliefert, die die gängigen Ressourcen wie PNG Bilder, Collada und "
"glTF Modelle, Ogg Vorbis Sounds und vieles mehr verarbeiten."

msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material. In this example it will contain the pure blue color "
"(zero red, zero green, and full blue):"
msgstr ""
"Diese Anleitung zeigt Ihnen, wie Sie ein einfaches Import-Plugin erstellen, "
"um eine benutzerdefinierte Textdatei als Materialressource zu laden. Diese "
"Textdatei enthält drei durch Komma getrennte numerische Werte, die die drei "
"Kanäle einer Farbe darstellen. Die resultierende Farbe wird als Albedo "
"(Hauptfarbe) des importierten Materials verwendet. In diesem Beispiel "
"enthält es die reine blaue Farbe (null Rot, null Grün und volles Blau):"

msgid "Configuration"
msgstr "Konfiguration"

msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""
"Zuerst brauchen wir ein generisches Plugin, das die Initialisierung und "
"Zerstörung unseres Import-Plugins übernimmt. Fügen wir zuerst die Datei "
"``plugin.cfg`` hinzu:"

msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr ""
"Dann brauchen wir die Datei ``material_import.gd``, um das Import-Plugin bei "
"Bedarf hinzuzufügen und zu entfernen:"

msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""
"Wenn dieses Plugin aktiviert wird, erzeugt es eine neue Instanz des Import-"
"Plugins (das wir bald erstellen werden) und fügt es dem Editor mit der "
"Methode :ref:`add_import_plugin() "
"<class_EditorPlugin_method_add_import_plugin>` hinzu. Wir speichern eine "
"Referenz darauf in einem Klassenmitglied ``import_plugin``, damit wir später "
"beim Entfernen darauf verweisen können. Die Methode :ref:"
"`remove_import_plugin() <class_EditorPlugin_method_remove_import_plugin>` "
"wird aufgerufen, wenn das Plugin deaktiviert wird, um den Speicher "
"aufzuräumen und den Editor wissen zu lassen, dass das Import-Plugin nicht "
"mehr verfügbar ist."

msgid ""
"Note that the import plugin is a reference type, so it doesn't need to be "
"explicitly released from memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""
"Beachten Sie, dass das Import-Plugin ein Referenztyp ist, so dass es nicht "
"explizit mit der Funktion ``free()`` aus dem Speicher freigegeben werden "
"muss. Es wird automatisch von der Engine freigegeben, wenn es den "
"Gültigkeitsbereich verlässt."

msgid "The EditorImportPlugin class"
msgstr "Die EditorImportPlugin-Klasse"

msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible for implementing the methods "
"that are called by Godot when it needs to know how to deal with files."
msgstr ""
"Die Hauptfigur der Show ist die :ref:`EditorImportPlugin-Klasse "
"<class_EditorImportPlugin>`. Sie ist für die Implementierung der Methoden "
"verantwortlich, die von Godot aufgerufen werden, wenn sie wissen muss, wie "
"sie mit Dateien umgehen soll."

msgid "Let's begin to code our plugin, one method at time:"
msgstr ""
"Beginnen wir mit der Programmierung unseres Plugins, eine Methode nach der "
"anderen:"

msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name for your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""
"Die erste Methode ist die :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"Dies ist ein eindeutiger Name für Ihr Plugin, der von Godot verwendet wird, "
"um zu wissen, welcher Import in einer bestimmten Datei verwendet wurde. Wenn "
"die Dateien erneut importiert werden müssen, weiß der Editor, welches Plugin "
"er aufrufen muss."

msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible for returning the name of the type it imports and it "
"will be shown to the user in the Import dock."
msgstr ""
"Die Methode :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` ist "
"für die Rückgabe des Namens des importierten Typs verantwortlich und wird "
"dem Benutzer im Import-Panel angezeigt."

msgid ""
"You should choose this name as a continuation to \"Import as\", e.g. "
"*\"Import as Silly Material\"*. You can name it whatever you want but we "
"recommend a descriptive name for your plugin."
msgstr ""
"Sie sollten diesen Namen als Fortsetzung von \"Importieren als\" wählen, z. "
"B. *\"Importieren als Silly Material \"*. Sie können es benennen, wie Sie "
"wollen, aber wir empfehlen einen beschreibenden Namen für Ihr Plugin."

msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""
"Das Importsystem von Godot erkennt Dateitypen anhand ihrer Erweiterung. In "
"der Methode :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"geben Sie ein Array von Strings zurück, die jede Erweiterung darstellen, die "
"dieses Plugin verstehen kann. Wenn eine Erweiterung von mehr als einem "
"Plugin erkannt wird, kann der Benutzer auswählen, welches beim Importieren "
"der Dateien verwendet werden soll."

msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""
"Gängige Erweiterungen wie ``.json`` und ``.txt`` werden möglicherweise von "
"vielen Plugins verwendet. Außerdem könnte es Dateien im Projekt geben, die "
"nur Daten für das Spiel sind und nicht importiert werden sollten. Sie müssen "
"beim Importieren vorsichtig sein, um die Daten zu validieren. Erwarten Sie "
"niemals, dass die Datei wohlgeformt ist."

msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to declare what will be "
"used in the import."
msgstr ""
"Die importierten Dateien werden im Ordner ``.import`` im Stammverzeichnis "
"des Projekts gespeichert. Ihre Erweiterung sollte mit dem Typ der Ressource "
"übereinstimmen, die Sie importieren, aber da Godot nicht sagen kann, was Sie "
"verwenden werden (weil es mehrere gültige Erweiterungen für dieselbe "
"Ressource geben könnte), müssen Sie angeben, was beim Import verwendet wird."

msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""
"Da wir ein Material importieren, werden wir die spezielle Erweiterung für "
"solche Ressourcentypen verwenden. Wenn Sie eine Szene importieren, können "
"Sie ``scn`` verwenden. Generische Ressourcen können die Erweiterung ``res`` "
"verwenden. Dies wird jedoch von der Engine in keiner Weise erzwungen."

msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""
"Die importierte Ressource hat einen bestimmten Typ, damit der Editor weiß, "
"zu welchem Eigenschafts-Slot sie gehört. Dies ermöglicht das Ziehen und "
"Ablegen aus dem FileSystem-Panel auf eine Eigenschaft im Inspector."

msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr ""
"In unserem Fall handelt es sich um ein :ref:``class_SpatialMaterial`, das "
"auf 3D-Objekte angewendet werden kann."

msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""
"Wenn Sie verschiedene Typen aus derselben Erweiterung importieren, müssen "
"Sie mehrere Import-Plugins erstellen. Sie können den Importcode auf eine "
"andere Datei abstrahieren, um diesbezüglich Doppelarbeit zu vermeiden."

msgid "Options and presets"
msgstr "Optionen und Voreinstellungen"

msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""
"Ihr Plugin kann verschiedene Optionen bereitstellen, mit denen der Benutzer "
"steuern kann, wie die Ressource importiert werden soll. Wenn eine Menge "
"ausgewählter Optionen üblich ist, können Sie auch verschiedene Presets "
"erstellen, um es dem Benutzer zu erleichtern. Das folgende Bild zeigt, wie "
"die Optionen im Editor angezeigt werden:"

msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""
"Da es viele Presets geben kann und diese mit einer Nummer identifiziert "
"werden, ist es eine gute Praxis, ein Enum zu verwenden, damit Sie über Namen "
"auf sie verweisen können."

msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr ""
"Da das Enum nun definiert ist, lassen Sie uns die Methoden eines Import-"
"Plugins weiter betrachten:"

msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""
"Die Methode :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` gibt die Anzahl der "
"Presets zurück, die dieses Plugin definiert. Wir haben jetzt nur ein Preset, "
"aber wir können diese Methode zukunftssicher machen, indem wir die Größe "
"unserer ``Presets``-Aufzählung zurückgeben."

msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""
"Hier haben wir die Methode :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>`, die den Presets Namen "
"gibt, wie sie dem Benutzer präsentiert werden, also achten Sie darauf, kurze "
"und klare Namen zu verwenden."

msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""
"Wir können hier die ``match``-Anweisung verwenden, um den Code besser zu "
"strukturieren. Auf diese Weise ist es einfach, in Zukunft neue Presets "
"hinzuzufügen. Wir verwenden das Catch-All-Schema, um auch etwas "
"zurückzugeben. Obwohl Godot nicht nach Presets jenseits der von Ihnen "
"definierten Preset-Anzahl fragen wird, ist es immer besser, auf Nummer "
"sicher zu gehen."

msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""
"Wenn Sie nur eine Voreinstellung haben, können Sie den Namen einfach direkt "
"zurückgeben. Wenn Sie dies jedoch tun müssen Sie beim hinzufügen mehrerer "
"Voreinstellungen vorsichtig sein."

msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""
"Dies ist die Methode, die die verfügbaren Optionen definiert. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"gibt ein Array von Dictionaries zurück, und jedes Dictionary enthält einige "
"Schlüssel, die überprüft werden, um die Option so anzupassen, wie sie dem "
"Benutzer angezeigt wird. Die folgende Tabelle zeigt die möglichen Schlüssel:"

msgid "Key"
msgstr "Schlüssel"

msgid "Type"
msgstr "Art"

msgid "Description"
msgstr "Beschreibung"

msgid "``name``"
msgstr "``name``"

msgid "String"
msgstr "Zeichenkette"

msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr ""
"Der Name der Option. Unterstriche werden zu Leerzeichen und "
"Anfangsbuchstaben werden groß geschrieben."

msgid "``default_value``"
msgstr "``default_value``"

msgid "Any"
msgstr "beliebig"

msgid "The default value of the option for this preset."
msgstr "Der Standardwert der Option für diese Voreinstellung."

msgid "``property_hint``"
msgstr "``property_hint``"

msgid "Enum value"
msgstr "Aufzählungswert"

msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""
"Einer der :ref:`PropertyHint <enum_ @ GlobalScope_PropertyHint>` Werte, der "
"als Hinweis verwendet werden soll."

msgid "``hint_string``"
msgstr "``hint_string``"

msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr ""
"Der Hinweistext der Eigenschaft. Das gleiche, wie Sie es in der Anweisung "
"``export`` in GDScript hinzufügen würden."

msgid "``usage``"
msgstr "``usage``"

msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""
"Einer der :ref:`PropertyUsageFlags <enum_ @ GlobalScope_PropertyUsageFlags>` "
"Werte, um die Verwendung zu definieren."

msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr ""
"Die Schlüssel ``name`` und ``default_value`` **müssen** angegeben werden, "
"der Rest ist optional."

msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""
"Beachten Sie, dass die Methode ``get_import_options`` die Preset-Nummer "
"erhält, so dass Sie die Optionen für jedes verschiedene Preset konfigurieren "
"können (insbesondere den Standardwert). In diesem Beispiel verwenden wir die "
"Anweisung ``match``, aber wenn Sie viele Optionen haben und die "
"Voreinstellungen nur den Wert ändern, möchten Sie vielleicht zuerst das "
"Array mit den Optionen erstellen und es dann basierend auf dem Preset ändern."

msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""
"Die Methode ``get_import_options`` wird auch dann aufgerufen, wenn Sie keine "
"Presets definiert haben (indem Sie ``get_preset_count`` 0 zurück geben "
"lassen). Sie müssen ein Array zurückgeben, auch wenn es leer ist, sonst "
"können Sie Fehler erhalten."

msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""
"Für die Methode :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` geben wir einfach "
"``true`` zurück, weil alle unsere Optionen (d.h. die einzige, die wir "
"definiert haben) immer sichtbar sind."

msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""
"Wenn Sie eine bestimmte Option nur sichtbar machen müssen, wenn eine andere "
"mit einem bestimmten Wert belegt ist, können Sie die Logik in dieser Methode "
"hinzufügen."

msgid "The ``import`` method"
msgstr "Die ``import`` Methode"

msgid ""
"The heavy part of the process, responsible for converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""
"Der schwere Teil des Prozesses, der für die Umwandlung der Dateien in "
"Ressourcen verantwortlich ist, wird von der Methode :ref:`import() "
"<class_EditorImportPlugin_method_import>` abgedeckt. Unser Beispielcode ist "
"ein bisschen lang, also teilen wir ihn in ein paar Teile auf:"

msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""
"Der erste Teil unserer Importmethode öffnet und liest die Quelldatei. Wir "
"verwenden dazu die Klasse :ref:`File <class_File>` und übergeben den "
"Parameter ``source_file``, der vom Editor bereitgestellt wird."

msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr ""
"Wenn beim Öffnen der Datei ein Fehler auftritt, geben wir diesen zurück, um "
"dem Editor mitzuteilen, dass der Import nicht erfolgreich war."

msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""
"Dieser Code nimmt die Zeile der Datei, die er zuvor gelesen hat, und teilt "
"sie in Teile auf, die durch ein Komma getrennt sind. Wenn mehr oder weniger "
"als die drei Werte vorhanden sind, betrachtet er die Datei als ungültig und "
"meldet einen Fehler."

msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""
"Dann erzeugt es eine neue Variable :ref:`Color <class_Color>` und setzt ihre "
"Werte entsprechend der Eingabedatei. Wenn die Option ``use_red_anyway`` "
"aktiviert ist, dann setzt es die Farbe stattdessen als reines Rot."

msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""
"Dieser Teil erstellt ein neues :ref:`SpatialMaterial "
"<class_SpatialMaterial>`, als importierte Ressource. Wir erstellen eine neue "
"Instanz davon und setzen dann die Albedofarbe als den Wert, den wir zuvor "
"erhalten haben."

msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""
"Dies ist der letzte Teil und ein ziemlich wichtiger, denn hier wird die "
"erstellte Ressource auf der Festplatte gespeichert. Der Pfad der "
"gespeicherten Datei wird generiert und vom Editor über den Parameter "
"``save_path`` mitgeteilt. Beachten Sie, dass dieser **ohne** die Erweiterung "
"kommt, also fügen wir sie mit :ref:`String-Formatierung "
"<doc_gdscript_printf>` hinzu. Dazu rufen wir die Methode "
"``get_save_extension`` auf, die wir zuvor definiert haben, so dass wir "
"sicher sein können, dass sie nicht aus dem Takt geraten."

msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""
"Wir geben auch das Ergebnis der Methode :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` zurück, so dass der Editor weiß, wenn in "
"diesem Schritt ein Fehler auftritt."

msgid "Platform variants and generated files"
msgstr "Plattformvarianten und generierte Dateien"

msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""
"Sie haben vielleicht bemeraufkt, dass unser Plugin zwei Argumente der "
"Methode ``import`` ignoriert hat. Diese sind *Rückgabe-Argumente* (daher das "
"``r`` am Anfang ihres Namens), was bedeutet, dass der Editor nach dem Aufruf "
"Ihrer Import-Methode aus ihnen liest. Beides sind Arrays, die Sie mit "
"Informationen füllen können."

msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""
"Das Argument ``r_platform_variants`` wird verwendet, wenn Sie die Ressource "
"je nach Zielplattform unterschiedlich importieren müssen. Während es "
"*Plattform*-Varianten genannt wird, basiert es auf dem Vorhandensein von :"
"ref:`Feature-Tags <doc_feature_tags>`, so dass sogar die gleiche Plattform "
"je nach Einrichtung mehrere Varianten haben kann."

msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""
"Um eine Plattformvariante zu importieren, müssen Sie sie mit dem Feature-Tag "
"vor der Erweiterung speichern und dann das Tag in das Array "
"``r_platform_variants`` schieben, damit der Editor weiß, dass Sie es getan "
"haben."

msgid ""
"For example, let's say we save a different material for a mobile platform. "
"We would need to do something like the following:"
msgstr ""
"Angenommen wir speichern ein anderes Material für eine mobile Plattform. Wir "
"müssten so etwas tun:"

msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""

msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""
"Dies ist auch ein Array und sollte mit vollständigen Pfaden der von Ihnen "
"gespeicherten Dateien gefüllt sein. Als Beispiel erstellen wir ein anderes "
"Material für den nächsten Durchgang und speichern es in einer anderen Datei:"

msgid "Trying the plugin"
msgstr "Das Plugin ausprobieren"

msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""

msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""

msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""

msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""

msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""

msgid "Translation status"
msgstr "Übersetzungsstatus"
