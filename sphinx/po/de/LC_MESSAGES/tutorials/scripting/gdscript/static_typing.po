# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Statische Typisierung in GDScript"

msgid "In this guide, you will learn:"
msgstr "In dieser Anleitung geht es um:"

msgid "**How to use types in GDScript**"
msgstr "**Wie Typen in GDSkript benutzt werden**"

msgid "That **static types can help you avoid bugs**"
msgstr "Diese **statische Typen helfen Fehler zu vermeiden**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"Wo und wie Sie diese neue Sprachfunktion verwenden, liegt ganz bei Ihnen: "
"Sie können sie nur in einigen vertraulichen GDScript-Dateien verwenden, "
"überall verwenden oder Code schreiben, wie Sie es immer getan haben!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Statische Typen können für Variablen, Konstanten, Funktionen, Parameter und "
"Rückgabetypen verwendet werden."

msgid "Typed GDScript is available since Godot 3.1."
msgstr "Typisiertes GDScript ist verfügbar seit Version 3.1."

msgid "A brief look at static typing"
msgstr "Ein kurzer Überblick über statische Typisierung"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"Mit typisiertem GDScript kann Godot noch mehr Fehler erkennen, während Sie "
"den Code schreiben! Sie und Ihre Teamkollegen erhalten während der Arbeit "
"mehr Informationen, da die Argumenttypen beim Aufrufen einer Methode "
"angezeigt werden."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Stellen Sie sich vor, Sie programmieren ein Inventarsystem. Sie codieren "
"einen \"Item\" -Node und dann ein \"Inventar\". Um Artikel zum Inventar "
"hinzuzufügen, sollten die Personen, die mit Ihrem Code arbeiten, immer einen "
"Artikel an die Methode \"Inventory.add\" übergeben. Mit Typen können Sie "
"Folgendes erzwingen:"

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Ein weiterer wesentlicher Vorteil von typisiertem GDScript ist das neue "
"**Warnsystem**. Ab Version 3.1 gibt Godot beim Schreiben Warnungen zu Ihrem "
"Code aus: Die Engine identifiziert Abschnitte Ihres Codes, die zur Laufzeit "
"zu Problemen führen können. Sie können jedoch entscheiden, ob Sie den Code "
"unverändert lassen möchten oder nicht. Mehr dazu gleich."

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Statische Typen bieten Ihnen auch bessere Optionen für die Code-"
"Vervollständigung. Unten sehen Sie den Unterschied zwischen einer "
"dynamischen und einer statisch typisierten Abschlussoption für eine Klasse "
"namens \"PlayerController\"."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Sie haben wahrscheinlich schon einmal einen Node in einer Variablen "
"gespeichert und einen Punkt eingegeben, der keine Vorschläge für die "
"automatische Vervollständigung anzeigte:"

#, fuzzy
msgid "code completion options for dynamic"
msgstr "Beendigung erzwingen (optional)"

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Dies ist auf dynamischen Code zurückzuführen. Godot kann nicht wissen, "
"welchen Node oder Werttyp Sie an die Funktion übergeben. Wenn Sie den Typ "
"jedoch explizit schreiben, erhalten Sie alle öffentlichen Methoden und "
"Variablen vom Node:"

#, fuzzy
msgid "code completion options for typed"
msgstr "Beendigung erzwingen (optional)"

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"Typisiertes GDScript wird in der Zukunft auch die Codeleistung steigern: "
"Just-In-Time-Kompilierung und andere Compiler-Verbesserungen stehen bereits "
"auf der Roadmap!"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"Insgesamt bietet die typisierte Programmierung eine strukturiertere "
"Erfahrung. Es hilft, Fehler zu vermeiden und verbessert den "
"selbstdokumentierenden Aspekt Ihrer Skripte. Dies ist besonders hilfreich, "
"wenn Sie in einem Team oder an einem langfristigen Projekt arbeiten: Studien "
"haben gezeigt, dass Entwickler die meiste Zeit damit verbringen, den Code "
"anderer Leute oder Skripte zu lesen, die sie in der Vergangenheit "
"geschrieben und vergessen haben. Je klarer und strukturierter der Code ist, "
"desto schneller ist er zu verstehen, desto schneller können Sie vorankommen."

msgid "How to use static typing"
msgstr "Wie statische Typisierung genutzt wird"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Um den Typ einer Variablen oder einer Konstante zu definieren, schreiben Sie "
"einen Doppelpunkt nach dem Namen der Variablen, gefolgt von ihrem Typ. Z.B. "
"``var health: int``. Dies zwingt den Variablentyp dazu, immer gleich zu "
"bleiben:"

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot wird versuchen, Typen abzuleiten, wenn Sie einen Doppelpunkt "
"schreiben, aber Sie lassen den Typ weg:"

msgid "Currently you can use three types of… types:"
msgstr "Aktuell können drei Arten von Typen verwendet werden:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Kernklassen und Nodes (``Objekt``, ``Node``, ``Area2D``, ``Camera2D`` usw.)"

#, fuzzy
msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"Ihre eigenen, benutzerdefinierten Klassen. Schauen Sie doch die neue "
"Funktion an :ref:`class_name <doc_scripting_continued_class_name>`, um Typen "
"im Editor zu registrieren."

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"Sie müssen keine Typhinweise für Konstanten schreiben, da Godot diese "
"automatisch anhand des zugewiesenen Werts festlegt. Sie können dies dennoch "
"tun, um die Absicht Ihres Codes klarer zu machen."

msgid "Custom variable types"
msgstr "Eigene Variablentypen"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Sie können jede Klasse, einschließlich Ihrer benutzerdefinierten Klassen, "
"als Typen verwenden. Es gibt zwei Möglichkeiten sie in Skripten zu "
"verwenden. Die erste Methode besteht darin, das Skript, das Sie als Typ in "
"eine Konstante verwenden möchten, vorzuladen:"

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"Die zweite Methode besteht darin, beim Erstellen das Schlüsselwort "
"``class_name`` zu verwenden. Für das obige Beispiel würde Ihr Rifle.gd "
"folgendermaßen aussehen:"

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Wenn Sie ``class_name`` verwenden, registriert Godot den Rifle-Typ global im "
"Editor und Sie können ihn überall verwenden, ohne ihn in eine Konstante "
"vorladen zu müssen:"

msgid "Variable casting"
msgstr "Variablenumwandlung"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"Typumwandlung ist ein Schlüsselkonzept in typisierten Sprachen. Casting ist "
"die Konvertierung eines Werts von einem Typ in einen anderen."

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Stellen Sie sich einen Feind in Ihrem Spiel vor, der Area2D erweitert. Sie "
"möchten, dass es mit dem Player kollidiert, einem ``KinematicBody2D`` mit "
"einem Skript namens ``PlayerController``. Sie verwenden das Signal "
"``on_body_entered``, um die Kollision zu erkennen. Mit eingegebenem Code "
"wird der Körper, den Sie erkennen, ein generischer ``PhysicsBody2D`` sein "
"und nicht Ihr ``PlayerController`` beim ``_on_body_entered`` Rückruf."

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Sie können überprüfen, ob dieses ``PhysicsBody2D`` Ihr Player mit dem "
"Casting-Schlüsselwort ``as`` ist, und den Doppelpunkt ``:`` erneut "
"verwenden, um die Variable zur Verwendung dieses Typs zu zwingen. Dies "
"zwingt die Variable, sich an den Typ ``PlayerController`` zu halten:"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Da wir mit einem benutzerdefinierten Typ zu tun haben, falls ``body`` den "
"``PlayerController`` nicht erweitert, wird die Variable ``player`` auf "
"``null`` gesetzt. Wir können dies verwenden um zu überprüfen, ob der Körper "
"der Spieler ist oder nicht. Dank des cast erhalten wir auch eine komplette "
"automatische Vervollständigung der Spielervariablen."

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Wenn Sie versuchen mit einem integrierten Typ zu casten und dies "
"fehlschlägt, gibt Godot einen Fehler aus."

msgid "Safe lines"
msgstr "Sichere Zeilen"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Sie können auch casting verwenden, um sichere Zeilen zu gewährleisten. "
"Sichere Zeilen sind ein neues Tool in Godot 3.1, mit dem Sie feststellen "
"können, wann mehrdeutige Codezeilen typsicher sind. Da Sie typisierten und "
"dynamischen Code mischen und abgleichen können, verfügt Godot manchmal nicht "
"über genügend Informationen um zu wissen, ob eine Anweisung zur Laufzeit "
"einen Fehler auslöst oder nicht."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Dies geschieht, wenn Sie einen untergeordneten Node erhalten. Nehmen wir zum "
"Beispiel einen Timer: Mit dynamischem Code können Sie den Node mit "
"``$Timer`` erhalten. GDScript unterstützt `Duck-Typing <https://"
"stackoverflow.com/a/4205163/8125343>`__, so das selbst wenn Ihr Timer vom "
"Typ ``Timer`` ist, so ist er auch ein ``Node`` und ein ``Object``, er "
"erweitert zwei Klassen. Mit dynamischem GDScript kann Ihnen auch der Node-"
"typ egal sein, solange er über die Methoden verfügt, die Sie aufrufen müssen."

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Sie können Casting verwenden um Godot den zu erwartenden Typ mitzuteilen, "
"wenn Sie einen Node erhalten: ``($Timer als Timer)``, ``($Player als "
"KinematicBody2D)`` usw. Godot stellt die Funktionalität des Typs sicher, und "
"wenn ja wird die Zeilennummer links im Skripteditor grün."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""
"Unsichere Zeile (Zeile 7) im Vergleich zu sicheren Zeilen (Zeile 6 und 8)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Sie können sichere Zeilen deaktivieren oder ihre Farbe in den "
"Editoreinstellungen ändern."

msgid "Define the return type of a function with the arrow ->"
msgstr "Definieren Sie den Rückgabetyp einer Funktion mit dem Pfeil ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Um den Rückgabetyp einer Funktion zu definieren, schreiben Sie nach ihrer "
"Deklaration einen Bindestrich und eine rechtwinklige Klammer ``->``, gefolgt "
"vom Rückgabetyp:"

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"Der Typ ``void`` bedeutet, dass die Funktion nichts zurückgibt. Sie können "
"wie bei Variablen einen beliebigen Typ verwenden:"

msgid "You can also use your own nodes as return types:"
msgstr "Sie können auch Ihre eigenen Nodes als Rückgabetypen verwenden:"

msgid "Typed or dynamic: stick to one style"
msgstr "Typisiert oder dynamisch: Halten Sie sich an einen Stil"

#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"Typisiertes GDScript und dynamisches GDScript können im selben Projekt "
"koexistieren. Ich empfehle jedoch sich aus Gründen der Konsistenz in Ihrer "
"Codebasis und für Ihre Kollegen an beide Stile zu halten. Es ist für alle "
"einfacher zusammenzuarbeiten, wenn Sie dieselben Richtlinien befolgen und "
"den Code anderer schneller lesen und verstehen können."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"Typisierter Code erfordert etwas mehr Schreibaufwand, aber Sie erhalten die "
"oben beschriebenen Vorteile. Hier ist ein Beispiel für dasselbe leere Skript "
"in einem dynamischen Stil:"

msgid "And with static typing:"
msgstr "Und mit statischer Typisierung:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Wie Sie sehen, können Sie auch Typen mit den virtuellen Methoden der Engine "
"verwenden. Signalrückrufe können wie alle Methoden auch Typen verwenden. "
"Hier ist ein ``body_entered`` Signal im dynamischen Stil:"

msgid "And the same callback, with type hints:"
msgstr "Und der gleiche Aufruf mit Typhinweisen:"

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Sie können dies jederzeit ersetzen, z.B. ``CollisionObject2D`` mit Ihrem "
"eigenen Typ, um Parameter automatisch umzuwandeln:"

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"Die Variable ``bullet`` könnte hier jedes ``CollisionObject2D`` enthalten, "
"aber wir stellen sicher, dass es sich um unser ``Bullet`` handelt, einen für "
"unser Projekt erstellten Node. Wenn es sich um etwas anderes handelt, z.B. "
"ein ``Area2D`` oder einen Node, der ``Bullet`` nicht erweitert, ist die "
"Variable ``bullet`` ``null``."

msgid "Warning system"
msgstr "Warnsystem"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""
"Die Dokumentation zum GDScript-Warnsystem wurde verschoben nach :ref:"
"`doc_gdscript_warning_system`."

msgid "Cases where you can't specify types"
msgstr "Fälle in denen man keine Typen spezifizieren kann"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Lassen Sie uns zum Abschluss dieser Einführung einige Fälle behandeln, in "
"denen Sie keine Typhinweise verwenden können. Alle folgenden Beispiele "
"**lösen Fehler aus**."

msgid "You can't use Enums as types:"
msgstr "Man kann Aufzählungen nicht als Typen verwenden:"

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""
"Sie können den Typ einzelner Mitglieder in einem Array nicht angeben. Dies "
"erzeugt einen Fehler:"

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"Sie können die Zuweisung von Typen in einer ``for``-Schleife nicht "
"erzwingen, da jedes Element, das diese ``for``-Schleife durchläuft, bereits "
"einen anderen Typ hat. Sie können also **nicht** schreiben:"

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "Zwei Skripte können nicht zyklisch voneinander abhängen:"

msgid "Summary"
msgstr "Zusammenfassung"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"Typisiertes GDScript ist ein leistungsstarkes Tool. Ab Version 3.1 von Godot "
"verfügbar, können Sie strukturierteren Code schreiben, häufige Fehler "
"vermeiden und skalierbare Systeme erstellen. In Zukunft werden statische "
"Typen dank anstehender Compiler-Optimierungen auch einen schönen "
"Leistungsschub bringen."

msgid "Translation status"
msgstr "Übersetzungsstatus"
