# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "Verwendung von InputEvent"

msgid "What is it?"
msgstr "Was ist das?"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"Das Verwalten von Eingaben ist normalerweise komplex, unabhängig vom "
"Betriebssystem oder der Plattform. Um dies ein wenig zu vereinfachen, wird "
"ein spezieller integrierter Typ bereitgestellt :ref:`InputEvent "
"<class_InputEvent>`. Dieser Datentyp kann so konfiguriert werden, dass er "
"verschiedene Arten von Eingabeereignissen enthält. Eingabeereignisse laufen "
"durch die Engine und können je nach Zweck an mehreren Orten empfangen werden."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"Hier ist ein kurzes Beispiel, dass das Spiel beendet sobald die Escape-Taste "
"gedrückt wird:"

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"Es ist jedoch sauberer und flexibler, die bereitgestellte Funktion :ref:"
"`InputMap <class_InputMap>` zu verwenden, mit der Sie Eingabeaktionen "
"definieren und ihnen verschiedene Schlüssel zuweisen können. Auf diese Weise "
"können Sie mehrere Tasten für dieselbe Aktion definieren (z.B. die Escape-"
"Taste auf der Tastatur und die Start-Taste auf einem Gamepad). Sie können "
"diese Zuordnung dann einfacher in den Projekteinstellungen ändern, ohne "
"Ihren Code zu aktualisieren, und sogar eine Schlüsselzuordnung darüber "
"erstellen, damit Ihr Spiel diese Zuordnung zur Laufzeit ändern kann!"

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"Sie können Ihre InputMap unter **Projekt > Projekt Einstellungen> Input "
"Map** einrichten und dann die folgenden Aktionen ausführen:"

msgid "How does it work?"
msgstr "Wie funktioniert das?"

msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""
"Jedes Eingabe-Ereignis stammt vom Benutzer/Spieler (obwohl es möglich ist, "
"ein Eingabe-Ereignis zu generieren und es an die Engine zurückzusenden, was "
"für Gestensteuerung nützlich ist). Das Betriebssystemobjekt für jede "
"Plattform liest Ereignisse vom Gerät und leitet sie dann an MainLoop weiter. "
"Da :ref:`Szenenbaum <class_SceneTree>` die Standard-MainLoop-Implementierung "
"ist, werden hier die Ereignisse zugeführt. Godot bietet eine Funktion zum "
"Abrufen des aktuellen Szenenbaum-Objekts: **get_tree()**."

msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
"Der Szenenbaum weiß jedoch nicht, was mit dem Ereignis zu tun ist, und gibt "
"es daher an das Ansichtsfenster weiter, beginnend mit \"root\" :ref:"
"`Viewport <class_Viewport>` (der erste Node des Szenenbaums). "
"Ansichtsfenster machen ziemlich viel mit den empfangenen Eingaben, in dieser "
"Reihenfolge:"

msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""
"Zunächst wird die Funktion standard :ref:`Node._input() "
"<class_Node_method__input>` in jedem Node aufgerufen, der sie überschreibt "
"(und die Eingabeverarbeitung nicht mit :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input> ` deaktiviert hat). Wenn eine Funktion "
"das Ereignis verwendet, kann sie :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>` aufrufen und das Ereignis "
"wird nicht mehr verbreitet. Dies stellt sicher, dass Sie noch vor der GUI "
"alle interessanten Ereignisse filtern können. Für die Gameplay-Eingabe passt "
"im Allgemeinen :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` besser, da die GUI die Ereignisse "
"abfangen kann."

msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"gui_input\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""
"Zweitens wird versucht, die Eingabe in die GUI einzuspeisen und zu sehen, ob "
"irgendein Steuerelement sie empfangen kann. Wenn ja, wird das :ref:`Control "
"<class_Control>` über die virtuelle Funktion :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` aufgerufen und das Signal \"gui_input\" "
"ausgegeben (diese Funktion kann von Skripten durch Erben von ihr neu "
"implementiert werden). Wenn das Steuerelement das Ereignis \"konsumieren\" "
"will, ruft es :ref:`Control.accept_event() "
"<class_Control_method_accept_event>` auf und das Ereignis wird nicht mehr "
"verbreitet. Mit der Eigenschaft :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` können Sie steuern, ob ein :ref:"
"`Control <class_Control>` über den :ref:`Control._gui_input() "
"<class_Control_method__gui_input>`-Callback über Mausereignisse informiert "
"wird und ob diese Ereignisse weiterverbreitet werden."

msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""

msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport with :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` turned on, a ray to the "
"physics world (in the ray direction from the click) will be cast. (For the "
"root viewport, this can also be enabled in :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) If "
"this ray hits an object, it will call the :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` function in the "
"relevant physics object (bodies receive this callback by default, but areas "
"do not. This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""

msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""
"Wenn das Ereignis nicht behandelt wurde, wird es schließlich an den nächsten "
"Ansichtsbereich in der Baumstruktur übergeben, andernfalls wird es ignoriert."

msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""
"Wenn Sie Ereignisse an alle empfangenden Nodes innerhalb einer Szene senden, "
"erfolgt dies im Ansichtsfenster in umgekehrter Reihenfolge: Beginnend mit "
"dem untersten Node des Szenenbaums und endet am Wurzel-Node:"

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"GUI-Ereignisse werden auch im Szenenbaum angezeigt. Da diese Ereignisse "
"jedoch auf bestimmte Steuerelemente abzielen, erhalten nur direkte Vorfahren "
"des zum Ziel gesetzten Kontroll-Nodes das Ereignis."

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"In Übereinstimmung mit dem Node-basierten Design von Godot können "
"spezialisierte untergeordnete Nodes bestimmte Ereignisse verarbeiten, "
"während ihre Vorfahren und letztendlich die Szenenwurzel bei Bedarf ein "
"allgemeineres Verhalten liefern können."

msgid "Anatomy of an InputEvent"
msgstr "Anatomie eines Eingabe-Ereignisses"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` ist nur ein integrierter Basistyp, "
"stellt nichts dar und enthält nur einige grundlegende Informationen wie die "
"Ereignis-ID (die für jedes Ereignis erhöht wird), den Geräteindex usw."

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""
"Es gibt verschiedene spezielle Arten von Eingabe-Ereignissen, die in der "
"folgenden Tabelle beschrieben werden:"

msgid "Event"
msgstr "Ereignis"

msgid "Type Index"
msgstr "Typ Index"

msgid "Description"
msgstr "Beschreibung"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "NONE"
msgstr "NONE"

msgid "Empty Input Event."
msgstr "Leeres Eingabe-Ereignis."

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

msgid "KEY"
msgstr "KEY"

msgid "Contains a scancode and Unicode value, as well as modifiers."
msgstr "Enthält einen Scancode und einen Unicode-Wert sowie Modifikatoren."

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "MOUSE_BUTTON"
msgstr "MOUSE_BUTTON"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "enthält Klickinformationen wie Schaltflächen, Modifikatoren usw."

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

msgid "MOUSE_MOTION"
msgstr "MOUSE_MOTION"

msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""
"Enthält Bewegungsinformationen wie relative, absolute Positionen und "
"Geschwindigkeit."

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "JOYSTICK_MOTION"
msgstr "JOYSTICK_MOTION"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "Enthält Informationen zu analogen Joystick/Joypad-Achsen."

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "JOYSTICK_BUTTON"
msgstr "JOYSTICK_BUTTON"

msgid "Contains Joystick/Joypad button information."
msgstr "Enthält Informationen zu Joystick-/Joypad-Knöpfen."

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid "SCREEN_TOUCH"
msgstr "SCREEN_TOUCH"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"Enthält Multi-Touch-Informationen zum Drücken/Freigeben. (nur auf "
"Mobilgeräten verfügbar)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid "SCREEN_DRAG"
msgstr "SCREEN_DRAG"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"Enthält Informationen zum Ziehen mit mehreren Berührungen. (multi-touch - "
"nur auf Mobilgeräten verfügbar)"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

msgid "SCREEN_ACTION"
msgstr "SCREEN_ACTION"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"Enthält eine generische Aktion. Diese Ereignisse werden häufig vom "
"Programmierer als Feedback generiert. (mehr dazu weiter unten)"

msgid "Actions"
msgstr "Aktionen"

msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""
"Ein Eingabe-Ereignis kann eine vordefinierte Aktion darstellen oder nicht. "
"Aktionen sind nützlich, da sie das Eingabegerät beim Programmieren der "
"Spielelogik abstrahieren. Dies ermöglicht:"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"Derselbe Code funktioniert für verschiedene Geräte mit unterschiedlichen "
"Eingaben (z.B. Tastatur auf dem PC, Joypad auf der Konsole)."

msgid "Input to be reconfigured at run-time."
msgstr "Eingaben, die zur Laufzeit neu konfiguriert werden sollen."

msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr ""
"Aktionen können über das Menü Projekteinstellungen auf der Registerkarte "
"Aktionen erstellt werden."

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"Jedes Ereignis hat die Methoden :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` und :ref:`InputEvent "
"<class_InputEvent>`."

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""

msgid "InputMap"
msgstr "InputMap"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""

msgid "Translation status"
msgstr "Übersetzungsstatus"
