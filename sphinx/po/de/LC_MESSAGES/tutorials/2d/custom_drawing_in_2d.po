# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom drawing in 2D"
msgstr "2D benutzerdefiniertes zeichnen"

msgid "Introduction"
msgstr "Einführung"

msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""
"Godot hat Nodes um Sprites, Polygone, Partikel und alles Mögliche zu "
"zeichnen. In den meisten Fällen reicht dies aus, aber nicht immer. Bevor Sie "
"vor Angst, Wut und Verzweiflung weinen, weil ein Node zum Zeichnen dieses "
"bestimmten *Etwas* nicht existiert ... wäre es gut zu wissen, wie einfach es "
"ist jeden 2D-Node (sei es :ref:`Control <class_Control> `oder :ref:`Node2D "
"<class_Node2D>`basiert) dazu zu bringen benutzerdefinierte Befehle zu "
"zeichnen. Es ist *wirklich* einfach dies zu tun."

msgid ""
"Custom drawing in a 2D node is *really* useful. Here are some use cases:"
msgstr ""
"Das manuelle Zeichnen in einem 2D-Node ist *wirklich* nützlich. Hier einige "
"Beispiele, warum:"

msgid ""
"Drawing shapes or logic that existing nodes can't do, such as an image with "
"trails or a special animated polygon."
msgstr ""
"Zeichnen von Formen oder Logik, die vorhandene Nodes nicht leisten können, "
"z. B. ein Bild mit Spuren oder ein spezielles animiertes Polygon."

msgid ""
"Visualizations that are not that compatible with nodes, such as a tetris "
"board. (The tetris example uses a custom draw function to draw the blocks.)"
msgstr ""
"Visualisierungen, die nicht so kompatibel mit Nodes sind, wie zum Beispiel "
"ein Tetris-Brett. (Das Tetris-Beispiel verwendet eine benutzerdefinierte "
"Zeichenfunktion, um die Blöcke zu zeichnen.)"

msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using a large number of nodes, possibly lowering memory usage and "
"improving performance."
msgstr ""
"Zeichnen einer großen Anzahl einfacher Objekte. Durch benutzerdefinierte "
"Zeichnungen wird der Overhead für die Verwendung großer Anzahlen von Nodes "
"vermieden, wodurch sich die Speichernutzung verringert und möglicherweise "
"schneller wird."

msgid ""
"Making a custom UI control. There are plenty of controls available, but when "
"you have unusual needs, you will likely need a custom control."
msgstr ""
"Erstellen eines benutzerdefinierten UI-Steuerelements. Es gibt eine Vielzahl "
"von Steuerelementen, aber wenn Sie ungewöhnliche Anforderungen haben, "
"benötigen Sie wahrscheinlich ein benutzerdefiniertes Steuerelement."

msgid "Drawing"
msgstr "Zeichnen"

msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""
"Fügen Sie ein Skript zu einem beliebigen von :ref:`CanvasItem "
"<class_CanvasItem>` abgeleiteten Node hinzu, wie zum Beispiel :ref:`Control "
"<class_Control>` oder :ref:`Node2D <class_Node2D>`. Überschreiben Sie dann "
"die Funktion ``_draw()``."

msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""
"Es gibt viele Zeichenbefehle, die alle in der Klassenreferenz :ref:"
"`CanvasItem <class_CanvasItem>` beschrieben werden."

msgid "Updating"
msgstr "Aktualisieren"

msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""
"Die Funktion ``_draw()`` wird nur einmal aufgerufen , womit dann die "
"Zeichenbefehle gecached und zwischengespeichert werden, sodass weitere "
"Aufrufe nicht erforderlich sind."

msgid ""
"If re-drawing is required because a state or something else changed, call :"
"ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that same node "
"and a new ``_draw()`` call will happen."
msgstr ""
"Wenn ein erneutes Zeichnen erforderlich ist, weil sich ein Status oder etwas "
"anderes geändert hat, rufen Sie :ref:`CanvasItem.update() "
"<class_CanvasItem_method_update>` in demselben Node auf und ein neuer "
"``_draw()`` Aufruf wird ausgeführt."

msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""
"Hier ist ein etwas komplexeres Beispiel, eine Texturvariable, die bei "
"Änderung neu gezeichnet wird:"

msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""
"In einigen Fällen kann es wünschenswert sein jedes Frame zu zeichnen. Rufen "
"Sie dazu einfach ``update()`` aus dem ``_process()`` Rückruf auf:"

msgid "An example: drawing circular arcs"
msgstr "Beispiel: Kreisbögen zeichnen"

msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""
"Wir werden jetzt die benutzerdefinierte Zeichenfunktion der Godot Engine "
"verwenden um etwas zu zeichnen für das Godot keine Funktionen bereitstellt. "
"Als Beispiel bietet Godot eine Funktion ``draw_circle()`` die einen ganzen "
"Kreis zeichnet. Was ist jedoch mit dem Zeichnen eines Teils eines Kreises? "
"Sie müssen eine Funktion schreiben um dies auszuführen und selbst zeichnen."

msgid "Arc function"
msgstr "Bogen-Funktion"

msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""
"Ein Bogen wird durch seine Kreisparameter definiert, d.h. den Mittelpunkt "
"und den Radius. Der Bogen selbst wird dann durch den Winkel definiert bei "
"dem er beginnt und durch den Winkel bei dem er stoppt. Dies sind die 4 "
"Argumente, die wir für unsere Zeichenfunktion angeben müssen. Wir geben auch "
"den Farbwert an, damit wir den Bogen auf Wunsch in verschiedenen Farben "
"zeichnen können."

msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LOD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""
"Grundsätzlich erfordert das Zeichnen einer Form auf dem Bildschirm, dass sie "
"in eine bestimmte Anzahl von Punkten zerlegt wird, die von einem zum "
"nächsten verknüpft sind. Wie Sie sich vorstellen können, wird Ihre Form umso "
"glatter, je mehr Punkte sie enthält, aber desto schlechter wird sie auch in "
"Bezug auf die Prozessorleistung. Wenn Ihre Form sehr groß ist (oder in 3D in "
"der Nähe der Kamera), müssen im Allgemeinen mehr Punkte gezeichnet werden, "
"damit sie nicht eckig aussieht. Im Gegensatz dazu, wenn Ihre Form klein ist "
"(oder in 3D, weit von der Kamera entfernt), können Sie die Anzahl der Punkte "
"verringern, um Prozessorkosten zu sparen. Dies wird als *Level of Detail "
"(LOD)* bezeichnet. In unserem Beispiel verwenden wir einfach eine feste "
"Anzahl von Punkten, unabhängig vom Radius."

msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""
"Erinnern Sie sich an die Anzahl der Punkte, in die unsere Form zerlegt "
"werden muss? Wir haben diese Zahl in der Variablen ``nb_points`` auf einen "
"Wert von ``32`` festgelegt. Dann initialisieren wir ein leeres "
"``PoolVector2Array`` das einfach ein Array von ``Vector2`` ist."

msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""
"Der nächste Schritt besteht darin die tatsächlichen Positionen dieser 32 "
"Punkte zu berechnen, aus denen ein Bogen besteht. Dies geschieht in der "
"ersten for-Schleife: Wir iterieren über die Anzahl der Punkte, für die wir "
"die Positionen berechnen möchten, plus einen Punkt, der den letzten Punkt "
"enthält. Wir bestimmen zuerst den Winkel jedes Punktes zwischen dem Start- "
"und dem Endwinkel."

msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""
"Der Grund, warum jeder Winkel um 90 ° verringert wird besteht darin, dass "
"wir aus jedem Winkel mithilfe der Trigonometrie 2D-Positionen berechnen (Sie "
"wissen, Sinus und Cosinus ...). Um es einfacher zu machen, verwenden "
"``sin()`` und ``cos()`` Bogenmaß, nicht Grad. Der Winkel von 0 ° (0 "
"Bogenmaß) beginnt bei 3 Uhr, obwohl wir bei 12 Uhr mit dem Zählen beginnen "
"möchten. Also verringern wir jeden Winkel um 90 ° um bei 12 Uhr mit dem "
"Zählen zu beginnen."

msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""
"Die tatsächliche Position eines Punktes auf einem Kreis im Winkel ``angle`` "
"(im Bogenmaß) wird durch ``Vector2(cos(angle), sin(angle))`` angegeben. Da "
"``sin()`` und ``cos()`` Werte zwischen -1 und 1 zurückliefern, befindet sich "
"die Position auf einem Kreis mit Radius 1. Um diese Position auf unserem "
"Hilfskreis zu haben, der einen Radius von ``radius`` hat, müssen wir einfach "
"die Position mit ``radius`` multiplizieren. Schließlich müssen wir unseren "
"Hilfskreis an der Position ``center`` positionieren, indem wir ihn zu "
"unserem Wert ``Vector2`` hinzufügen. Schließlich fügen wir den Punkt in das "
"zuvor definierte ``PoolVector2Array`` ein."

msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""
"Jetzt müssen wir tatsächlich unsere Punkte zeichnen. Wie Sie sich vorstellen "
"können, werden wir nicht einfach unsere 32 Punkte zeichnen, wir müssen auch "
"überall dazwischen zeichnen. Wir hätten jeden Punkt mit der vorherigen "
"Methode selbst berechnen und einzeln nacheinander zeichnen können. Dies ist "
"jedoch zu kompliziert und ineffizient (außer wenn dies ausdrücklich "
"erforderlich ist), sodass wir einfach Linien zwischen jedem Punktepaar "
"ziehen. Wenn der Radius unseres Hilfskreises nicht groß ist, wird die Länge "
"jeder Linie zwischen zwei Punkten niemals lang genug sein, um sie zu sehen. "
"Falls doch, müssten wir lediglich die Anzahl der Punkte erhöhen."

msgid "Draw the arc on the screen"
msgstr "Zeichne den Bogen auf dem Bildschirm"

msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""
"Wir haben jetzt eine Funktion die etwas auf dem Bildschirm zeichnet; es wird "
"Zeit sie innerhalb der ``_draw()`` Funktion aufzurufen:"

msgid "Result:"
msgstr "Ergebnis:"

msgid "Arc polygon function"
msgstr "Bogenpolygon-Funktion"

msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""
"Wir können noch einen Schritt weiter gehen und nicht nur eine Funktion "
"schreiben, die den durch den Bogen definierten Teil der Scheibe zeichnet, "
"sondern auch deren gesamte Form. Die Methode ist genau die gleiche wie "
"zuvor, außer dass wir anstelle von Linien ein Polygon zeichnen:"

msgid "Dynamic custom drawing"
msgstr "Dynamische benutzerdefinierte Zeichnung"

msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""
"In Ordnung, wir können jetzt benutzerdefinierte Inhalte auf dem Bildschirm "
"zeichnen. Es ist jedoch statisch; Lassen Sie uns diese Form um den "
"Mittepunkt drehen. Die Lösung hierfür besteht einfach darin, die Werte "
"angle_from und angle_to im Laufe der Zeit zu ändern. In unserem Beispiel "
"erhöhen wir sie einfach um 50. Dieser Inkrementwert muss konstant bleiben, "
"sonst ändert sich die Drehzahl entsprechend."

msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""
"Zuerst müssen wir die Variablen angle_from und angle_to oben in unserem "
"Skript global anlegen. Beachten Sie auch, dass Sie sie in anderen Nodes "
"speichern und mit ``get_node()`` darauf zugreifen können."

msgid "We make these values change in the _process(delta) function."
msgstr "Wir ändern diese Werte in der Funktion _process(delta)."

msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""
"Wir erhöhen hier auch unsere Werte angle_from und angle_to. Wie dem auch "
"sei, wir dürfen jedoch nicht vergessen, die resultierenden Werte zwischen 0 "
"und 360 ° zu begrenzen (``wrap()``)! Das heißt, wenn der Winkel 361 ° "
"beträgt, ist er tatsächlich 1 °. Wenn Sie diese Werte nicht begrenzen, "
"funktioniert das Skript trotzdem korrekt, aber die Winkelwerte werden mit "
"der Zeit immer größer, bis sie den maximalen ganzzahligen Wert erreichen, "
"den Godot verwalten kann (``2 ^ 31 - 1``). In diesem Fall kann Godot "
"abstürzen oder unerwartetes Verhalten hervorrufen."

msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""
"Schließlich dürfen wir nicht vergessen, die Funktion ``update()`` "
"aufzurufen, die automatisch ``_draw()`` aufruft. Auf diese Weise können Sie "
"steuern, wann Sie den Frame aktualisieren möchten."

msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""
"Ebenso bitte nicht vergessen die Funktion ``_draw()``zu ändern, damit diese "
"Variablen genutzt werden:"

msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""
"Startet das Programm! Es läuft, aber der Bogen dreht sich wahnsinnig "
"schnell! Was ist Falsch?"

msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""
"Der Grund ist, dass Ihre GPU die Frames tatsächlich so schnell wie möglich "
"anzeigt. Wir müssen das Zeichnen mit dieser Geschwindigkeit "
"\"normalisieren\"; Um dies zu erreichen, müssen wir den Parameter ``delta`` "
"der Funktion ``_process()`` verwenden. ``delta`` enthält die Zeit, die "
"zwischen den beiden zuletzt gerenderten Frames vergangen ist. Es ist im "
"Allgemeinen klein (ungefähr 0,0003 Sekunden, dies hängt jedoch von Ihrer "
"Hardware ab). Wenn Sie also ``delta`` zur Steuerung für das Zeichnen "
"verwenden, stellen Sie sicher, dass Ihr Programm auf der Hardware aller "
"Benutzer mit der gleichen Geschwindigkeit ausgeführt wird."

msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""
"In unserem Fall müssen wir einfach unsere Variable ``rotation_angle`` mit "
"``delta`` in der Funktion ``_process()`` multiplizieren. Auf diese Weise "
"werden unsere 2 Winkel um einen viel kleineren Wert vergrößert, der direkt "
"von der Rendergeschwindigkeit abhängt."

msgid "Let's run again! This time, the rotation displays fine!"
msgstr ""
"Starte das Programm noch einmal! Diesmal wird die Drehung korrekt angezeigt!"

#, fuzzy
msgid "Antialiased drawing"
msgstr "**Anti-Aliasing:**"

#, fuzzy
msgid ""
"Godot offers method parameters in :ref:"
"`draw_line<class_CanvasItem_method_draw_line>` to enable antialiasing, but "
"it doesn't work reliably in all situations (for instance, on mobile/web "
"platforms, or when HDR is enabled). There is also no ``antialiased`` "
"parameter available in :ref:"
"`draw_polygon<class_CanvasItem_method_draw_polygon>`."
msgstr ""
"Godot bietet Methodenparameter in :ref:"
"`draw_line<class_CanvasItem_method_draw_line>` an, um Antialiasing zu "
"aktivieren, aber es funktioniert nicht in allen Situationen zuverlässig (zum "
"Beispiel auf Mobil-/Web-Plattformen oder wenn HDR aktiviert ist). Es ist "
"auch kein ``antialiased`` Parameter in :ref:"
"`draw_polygon<class_CanvasItem_method_draw_polygon>` verfügbar."

#, fuzzy
msgid ""
"As a workaround, install and use the `Antialiased Line2D add-on <https://"
"github.com/godot-extended-libraries/godot-antialiased-line2d>`__ (which also "
"supports antialiased Polygon2D drawing). Note that this add-on relies on "
"high-level nodes, rather than low-level ``_draw()`` functions."
msgstr ""
"Als Abhilfe können Sie das `Antialiased Line2D Add-on <https://github.com/"
"godot-extended-libraries/godot-antialiased-line2d>`__ (das auch das "
"Antialiased Polygon2D Zeichnen unterstützt) installieren und verwenden. "
"Beachten Sie, dass dieses Add-on auf High-Level-Knoten beruht und nicht auf "
"Low-Level-Funktionen ``_draw()``."

msgid "Tools"
msgstr "Werkzeuge"

msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor. This can be used as a preview or visualization of some feature or "
"behavior. See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""
"Das Zeichnen eigener Nodes kann auch erwünscht sein, wenn Sie diese im "
"Editor ausführen, um sie als Vorschau oder Visualisierung einer Funktion "
"oder eines Verhaltens zu verwenden. Unter :ref:"
"`doc_running_code_in_the_editor`finden sie weitere Informationen."

msgid "Translation status"
msgstr "Übersetzungsstatus"
