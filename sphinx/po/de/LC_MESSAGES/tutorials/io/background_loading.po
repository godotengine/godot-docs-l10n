# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Background loading"
msgstr "Laden im Hintergrund"

msgid ""
"When switching the main scene of your game (e.g. going to a new level), you "
"might want to show a loading screen with some indication that progress is "
"being made. The main load method (``ResourceLoader::load`` or just ``load`` "
"from GDScript) blocks your thread, making your game appear frozen and "
"unresponsive while the resource is being loaded. This document discusses the "
"alternative of using the ``ResourceInteractiveLoader`` class for smoother "
"load screens."
msgstr ""

msgid "ResourceInteractiveLoader"
msgstr "ResourceInteractiveLoader"

msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, and "
"control is returned to the caller. Each stage is generally a sub-resource "
"that is loaded by the main resource. For example, if you're loading a scene "
"that loads 10 images, each image will be one stage."
msgstr ""

msgid "Usage"
msgstr "Nutzung"

msgid "Usage is generally as follows"
msgstr "Die Verwendung ist im Allgemeinen wie folgt"

msgid "Obtaining a ResourceInteractiveLoader"
msgstr "Abrufen eines ResourceInteractiveLoader"

msgid ""
"This method will give you a ResourceInteractiveLoader that you will use to "
"manage the load operation."
msgstr ""
"Mit dieser Methode erhalten Sie einen ResourceInteractiveLoader, mit dem Sie "
"den Ladevorgang verwalten."

msgid "Polling"
msgstr "Abfragen"

msgid ""
"Use this method to advance the progress of the load. Each call to ``poll`` "
"will load the next stage of your resource. Keep in mind that each stage is "
"one entire \"atomic\" resource, such as an image, or a mesh, so it will take "
"several frames to load."
msgstr ""

msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. Any "
"other return value means there was an error and loading has stopped."
msgstr ""

msgid "Load progress (optional)"
msgstr "Ladefortschritt (optional)"

msgid "To query the progress of the load, use the following methods:"
msgstr ""
"Verwenden Sie die folgenden Methoden, um den Fortschritt des Ladevorgangs "
"abzufragen:"

msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""

msgid "Forcing completion (optional)"
msgstr "Beendigung erzwingen (optional)"

msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr ""

msgid "Obtaining the resource"
msgstr "Die Ressource erhalten"

msgid ""
"If everything goes well, use this method to retrieve your loaded resource."
msgstr ""
"Wenn alles gut geht, verwenden Sie diese Methode, um Ihre geladene Ressource "
"abzurufen."

msgid "Example"
msgstr "Beispiel"

msgid ""
"This example demonstrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""

msgid ""
"First, we set up some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr ""

msgid ""
"The function ``goto_scene`` is called from the game when the scene needs to "
"be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which could show a "
"progress bar or loading screen."
msgstr ""

msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then we "
"deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means loading is done, anything else means there was an "
"error. Also note we skip one frame (via ``wait_frames``, set on the "
"``goto_scene`` function) to allow the loading screen to show up."
msgstr ""

msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load fast, which means we might be able to cram "
"more than one call to ``poll`` in one frame; some might take way more than "
"your value for ``time_max``, so keep in mind we won't have precise control "
"over the timings."
msgstr ""

msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, or "
"can also update a paused animation (the animation represents the entire load "
"process from beginning to end). ``set_new_scene`` puts the newly loaded "
"scene on the tree. Because it's a scene being loaded, ``instance()`` needs "
"to be called on the resource obtained from the loader."
msgstr ""

msgid "Using multiple threads"
msgstr "Mehrere Threads verwenden"

msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""

msgid "Use a semaphore"
msgstr "Semaphoren verwenden"

msgid ""
"While your thread waits for the main thread to request a new resource, use a "
"``Semaphore`` to sleep (instead of a busy loop or anything similar)."
msgstr ""

msgid "Not blocking main thread during the polling"
msgstr "Den Hauptthread während der Abfrage nicht blockieren"

msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock the main thread while you call ``poll`` on your loader "
"class. When a resource is done loading, it might require some resources from "
"the low-level APIs (VisualServer, etc), which might need to lock the main "
"thread to acquire them. This might cause a deadlock if the main thread is "
"waiting for your mutex while your thread is waiting to load a resource."
msgstr ""
"Wenn Sie ein Mutex haben, um Aufrufe vom Hauptthread zu Ihrer Loader-Klasse "
"zuzulassen, sperren Sie den Hauptthread nicht, während Sie ``poll`` in Ihrer "
"Loader-Klasse aufrufen. Wenn eine Ressource fertig geladen ist, benötigt sie "
"möglicherweise einige Ressourcen von den APIs auf niedriger Ebene "
"(VisualServer usw.), die möglicherweise den Hauptthread sperren müssen, um "
"sie zu erhalten. Dies kann zu einem Deadlock führen, wenn der Hauptthread "
"auf Ihren Mutex wartet, während Ihr Thread darauf wartet, eine Ressource zu "
"laden."

msgid "Example class"
msgstr "Beispiel Klasse"

msgid ""
"You can find an example class for loading resources in threads here: :"
"download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as follows:"
msgstr ""
"Eine Beispielklasse für das Laden von Ressourcen in Threads finden Sie "
"hier: :download:`resource_queue.gd <files/resource_queue.gd>`. Die Benutzung "
"ist wie folgt:"

msgid "Call after you instance the class to start the thread."
msgstr "Rufe nach der Instanz die Klasse auf, um den Thread zu starten."

msgid ""
"Queue a resource. Use optional argument \"p_in_front\" to put it in front of "
"the queue."
msgstr ""
"Stelle eine Ressource in die Warteschlange. Verwende das optionale Argument "
"\"p_in_front\", um sie an den Anfang der Warteschlange zu stellen."

msgid "Remove a resource from the queue, discarding any loading done."
msgstr ""
"Entferne eine Ressource aus der Warteschlange und verwerfe dabei jede "
"geladene."

msgid ""
"Returns ``true`` if a resource is fully loaded and ready to be retrieved."
msgstr ""
"Gibt ``true`` zurück, wenn eine Ressource vollständig geladen und bereit zum "
"Abruf ist."

msgid ""
"Get the progress of a resource. Returns -1 if there was an error (for "
"example if the resource is not in the queue), or a number between 0.0 and "
"1.0 with the progress of the load. Use mostly for cosmetic purposes "
"(updating progress bars, etc), use ``is_ready`` to find out if a resource is "
"actually ready."
msgstr ""
"Ruft den Fortschritt einer Ressource ab. Gibt -1 zurück, wenn ein Fehler "
"aufgetreten ist (z.B. wenn die Ressource nicht in der Warteschlange steht), "
"oder eine Zahl zwischen 0,0 und 1,0 mit dem Fortschritt des Ladevorgangs. "
"Verwende diese Funktion hauptsächlich für kosmetische Zwecke (Aktualisierung "
"von Fortschrittsbalken usw.), verwende ``is_ready``, um herauszufinden, ob "
"eine Ressource tatsächlich bereit ist."

msgid ""
"Returns the fully loaded resource, or ``null`` on error. If the resource is "
"not fully loaded (``is_ready`` returns ``false``), it will block your thread "
"and finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""
"Gibt die vollständig geladene Ressource zurück, oder ``null`` bei einem "
"Fehler. Wenn die Ressource nicht vollständig geladen ist (``is_ready`` gibt "
"``false`` zurück), blockiert sie Ihren Thread und beendet das Laden. Wenn "
"sich die Ressource nicht in der Warteschlange befindet, wird "
"``ResourceLoader::load`` aufgerufen, um sie normal zu laden und "
"zurückzugeben."

msgid "Example:"
msgstr "Beispiel:"

msgid ""
"**Note**: this code, in its current form, is not tested in real world "
"scenarios. If you run into any issues, ask for help in one of `Godot's "
"community channels <https://godotengine.org/community>`__."
msgstr ""
"**Bemerkung**: Dieser Code wird in seiner derzeitigen Form nicht in realen "
"Szenarien getestet. Wenn Sie auf irgendwelche Probleme stoßen, bitten Sie in "
"einem von `Godots Gemeinschaftskanälen <https://godotengine.org/"
"community>`__ um Hilfe."

msgid "Translation status"
msgstr "Übersetzungsstatus"
