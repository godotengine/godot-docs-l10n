# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Your first 2D shader"
msgstr "Ein erstes Shader-Spiel"

msgid "Introduction"
msgstr "Einführung"

msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""

msgid "Setup"
msgstr "Einrichtung"

msgid ""
":ref:`CanvasItem <doc_canvas_item_shader>` shaders are used to draw all 2D"
msgstr ""
":ref:`CanvasItem <doc_canvas_item_shader>` Shader werden zum Zeichnen aller "
"2D"

#, fuzzy
msgid ""
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
":ref:`CanvasItem <doc_canvas_item_shader>` Shader werden zum Zeichnen aller "
"2D-Objekte in Godot verwendet, während :ref:`Spatial <doc_spatial_shader>` "
"Shader zum Zeichnen aller 3D-Objekte verwendet werden."

msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""

msgid ""
"All objects derived from a :ref:`CanvasItem <class_canvasitem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprites <class_sprite>`, :ref:`TileMaps <class_tilemap>`, :ref:"
"`MeshInstance2Ds <class_meshinstance2d>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""

msgid ""
"To begin, create a Sprite node. You can use any CanvasItem, but for this "
"tutorial we will use a Sprite."
msgstr ""

msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"Icon.png\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"Schauen Sie im Inspektor nach unten im Abschnitt CanvasItem, klicken Sie "
"neben \"Material\" und wählen Sie \"Neues ShaderMaterial\". Dadurch wird "
"eine neue Materialressource erstellt. Klicken Sie auf die erscheinende "
"Kugel. Godot weiß derzeit nicht, ob Sie einen CanvasItem-Shader oder einen "
"Spatial-Shader schreiben, und zeigt eine Vorschau der Ausgabe von räumlichen "
"Shadern an. Was Sie also sehen, ist die Ausgabe des Standard Spatial-Shaders."

msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the new "
"shader resource and the shader editor will open. You are now ready to begin "
"writing your first shader."
msgstr ""

msgid "Your first CanvasItem shader"
msgstr "Ein erster CanvasItem-Shader"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr ""

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr ""
"Diese Zeile teilt der Engine mit, welche integrierten Variablen und "
"Funktionen Sie bereitstellen soll."

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""

msgid "Your first fragment function"
msgstr "Ihre erste Fragmentfunktion"

msgid ""
"The fragment function runs for every pixel in a Sprite and determines what "
"color that pixel should be."
msgstr ""

msgid ""
"They are restricted to the pixels covered by the Sprite, that means you "
"cannot use one to, for example, create an outline around a Sprite."
msgstr ""

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr ""
"Die einfachste Fragmentfunktion tut nichts anderes, als jedem Pixel eine "
"einzelne Farbe zuzuweisen."

msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>` "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr ""
"Herzlichen Glückwunsch! Sie sind fertig. Sie haben erfolgreich Ihren ersten "
"Shader in Godot geschrieben."

msgid "Now let's make things more complex."
msgstr "Lassen Sie uns die Dinge jetzt komplexer machen."

msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr ""
"``UV`` variiert zwischen 0-1 von links nach rechts und von oben nach unten."

msgid "Using ``TEXTURE`` built-in"
msgstr "Verwenden der integrierten ``TEXTURE``"

msgid ""
"When you want to adjust a color in a Sprite you cannot just adjust the color "
"from the texture manually like in the code below."
msgstr ""

msgid ""
"The default fragment function reads from a texture and displays it. When you "
"overwrite the default fragment function, you lose that functionality, so you "
"have to implement it yourself. You read from textures using the ``texture`` "
"function. Certain nodes, like Sprites, have a dedicated texture variable "
"that can be accessed in the shader using ``TEXTURE``. Use it together with "
"``UV`` and ``texture`` to draw the Sprite."
msgstr ""

msgid "Uniform input"
msgstr "Auf Eingabe prüfen (Uniform)"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr ""
"Sie können Uniforms verwenden, indem Sie sie oben im Shader wie folgt "
"definieren:"

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr ""
"Genauere Informationen über Godots Shader-Sprache gibt es im eigenen "
"Artikel: :ref:`Shading Language <doc_shading_language>`."

msgid "Add a uniform to change the amount of blue in our Sprite."
msgstr ""
"Fügen Sie ein Uniform hinzu, um den Blauanteil in unserem Sprite zu ändern."

msgid ""
"Now you can change the amount of blue in the Sprite from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""

msgid "Interacting with shaders from code"
msgstr "Interaktion mit Shadern aus Code"

msgid ""
"You can change uniforms from code using the function ``set_shader_param()`` "
"which is called on the node's material resource. With a Sprite node, the "
"following code can be used to set the ``blue`` uniform."
msgstr ""

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""

msgid "Your first vertex function"
msgstr "Ihre erste Vertex Funktion"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr ""
"Da wir nun eine Fragment-Funktion haben, schreiben wir eine Vertex-Funktion."

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr ""
"Verwenden Sie die Vertex-Funktion zur Berechnung, wo auf dem Bildschirm "
"jeder Vertex landen soll."

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr ""
"Sie können die Eckpunkte versetzen, indem Sie diese direkt zu ``VERTEX`` "
"hinzufügen."

msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for simple "
"animation."
msgstr ""
"In Kombination mit der integrierten Variablen ``TIME`` kann dies für "
"einfache Animationen verwendet werden."

msgid "Conclusion"
msgstr "Fazit"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""

msgid "Translation status"
msgstr "Übersetzungsstatus"
