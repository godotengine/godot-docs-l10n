# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Screen-reading shaders"
msgstr "Bildschirmlesender-Shader"

msgid "Introduction"
msgstr "Einführung"

#, fuzzy
msgid ""
"It is often desired to make a shader that reads from the same screen to "
"which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""
"Sehr oft ist es erwünscht einen Shader zu erstellen, der von demselben "
"Bildschirm liest, auf den er schreibt. 3D-APIs wie OpenGL oder DirectX "
"machen dies aufgrund interner Hardwareeinschränkungen sehr schwierig. GPUs "
"sind extrem parallel, sodass das Lesen und Schreiben alle möglichen Cache- "
"und damit verbundene Probleme verursacht. Infolgedessen unterstützt dies "
"nicht einmal die modernste Hardware ordnungsgemäß."

msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy."
msgstr ""
"Die Problemumgehung besteht darin, eine Kopie des Bildschirms oder eines "
"Teils des Bildschirms in einen Rückpuffer zu erstellen und dann beim "
"Zeichnen daraus zu lesen. Godot bietet einige Tools, die diesen Prozess "
"vereinfachen."

msgid "SCREEN_TEXTURE built-in texture"
msgstr "SCREEN_TEXTURE eingebaute Textur"

msgid ""
"Godot :ref:`doc_shading_language` has a special texture, ``SCREEN_TEXTURE`` "
"(and ``DEPTH_TEXTURE`` for depth, in the case of 3D). It takes as argument "
"the UV of the screen and returns a vec3 RGB with the color. A special built-"
"in varying: SCREEN_UV can be used to obtain the UV for the current fragment. "
"As a result, this simple canvas_item fragment shader:"
msgstr ""

msgid "results in an invisible object, because it just shows what lies behind."
msgstr ""
"führt zu einem unsichtbaren Objekt, da es nur zeigt was dahinter steckt."

msgid ""
"The reason why textureLod must be used is because, when Godot copies back a "
"chunk of the screen, it also does an efficient separatable gaussian blur to "
"its mipmaps."
msgstr ""
"Der Grund, warum texturLod verwendet werden muss liegt darin, dass Godot "
"beim Zurückkopieren eines Teils des Bildschirms auch eine effiziente, "
"trennbare Gaußsche Unschärfe für seine MipMaps ausführt."

msgid ""
"This allows for not only reading from the screen, but reading from it with "
"different amounts of blur at no cost."
msgstr ""
"Dies ermöglicht nicht nur das Lesen vom Bildschirm, sondern auch das "
"kostenlose Lesen davon mit unterschiedlichen Unschärfen."

msgid ""
"Mipmaps are not generated in GLES2 due to poor performance and compatibility "
"with older devices."
msgstr ""
"MipMaps werden in GLES2 aufgrund der schlechten Leistung und Kompatibilität "
"mit älteren Geräten nicht generiert."

msgid "SCREEN_TEXTURE example"
msgstr "SCREEN_TEXTURE Beispiel"

msgid ""
"``SCREEN_TEXTURE`` can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""

msgid "Behind the scenes"
msgstr "hinter den Kulissen"

msgid ""
"While this seems magical, it's not. In 2D, the ``SCREEN_TEXTURE`` built-in, "
"when first found in a node that is about to be drawn, does a full-screen "
"copy to a back-buffer. Subsequent nodes that use it in shaders will not have "
"the screen copied for them, because this ends up being inefficient. In 3D, "
"the screen is copied after the opaque geometry pass, but before the "
"transparent geometry pass, so transparent objects will not be captured in "
"the ``SCREEN_TEXTURE``."
msgstr ""

msgid ""
"As a result, in 2D, if shaders that use ``SCREEN_TEXTURE`` overlap, the "
"second one will not use the result of the first one, resulting in unexpected "
"visuals:"
msgstr ""
"Wenn sich in 2D Shader überlappen die ``SCREEN_TEXTURE`` verwenden, "
"verwendet der zweite das nicht Ergebnis des ersten, was zu unerwarteten "
"visuellen Elementen führt:"

msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for ``SCREEN_TEXTURE`` as the first one below, so the first one "
"\"disappears\", or is not visible."
msgstr ""

msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""

msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""
"Bei richtigem Kopieren des Rückpuffers zeigen die beiden Kugeln einen "
"korrekten Übergang:"

msgid ""
"In 3D, there is less flexibility to solve this particular issue because the "
"``SCREEN_TEXTURE`` is only captured once. Be careful when using "
"``SCREEN_TEXTURE`` in 3D as it won't capture transparent objects and may "
"capture some opaque objects that are in front of the object."
msgstr ""

msgid ""
"You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport "
"<class_Viewport>` with a camera in the same position as your object, and "
"then use the :ref:`Viewport's <class_Viewport>` texture instead of "
"``SCREEN_TEXTURE``."
msgstr ""

msgid "Back-buffer logic"
msgstr "Rückpufferlogik"

msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr ""
"Um es verständlicher zu machen, funktioniert die Rückpuffer-Kopierlogik in "
"Godot folgendermaßen:"

msgid ""
"If a node uses the ``SCREEN_TEXTURE``, the entire screen is copied to the "
"back buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""
"Wenn ein Node ``SCREEN_TEXTURE`` verwendet, wird der gesamte Bildschirm in "
"den Backpuffer kopiert, noch bevor dieser Node gezeichnet wird. Dies "
"geschieht nur beim ersten Mal; nachfolgende Nodes lösen dies nicht aus."

msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if ``SCREEN_TEXTURE`` was not used), the behavior described in "
"the point above does not happen. In other words, automatic copying of the "
"entire screen only happens if ``SCREEN_TEXTURE`` is used in a node for the "
"first time and no BackBufferCopy node (not disabled) was found before in "
"tree-order."
msgstr ""

msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then use ``SCREEN_TEXTURE`` on a "
"different region. Avoid this behavior!"
msgstr ""

msgid "DEPTH_TEXTURE"
msgstr "DEPTH_TEXTURE"

#, fuzzy
msgid ""
"For 3D shaders, it's also possible to access the screen depth buffer. For "
"this, the ``DEPTH_TEXTURE`` built-in is used. This texture is not linear; it "
"must be converted via the inverse projection matrix."
msgstr ""
"Bei 3D-Shadern ist es auch möglich, auf den Bildschirmtiefenpuffer "
"zuzugreifen. Hierzu wird das integrierte ``DEPTH_TEXTURE`` verwendet. Diese "
"Textur ist nicht linear; es muss über die inverse Projektionsmatrix "
"konvertiert werden."

msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr ""
"Der folgende Code ruft die 3D-Position unter dem gezeichneten Pixel ab:"

msgid "Translation status"
msgstr "Übersetzungsstatus"
