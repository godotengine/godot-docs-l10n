# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cutout animation"
msgstr "컷 아웃(Cutout) 애니메이션"

msgid "What is it?"
msgstr ""

msgid ""
"Traditionally, `cutout animation <https://en.wikipedia.org/wiki/"
"Cutout_animation>`__ is a type of `stop motion animation <https://en."
"wikipedia.org/wiki/Stop_motion>`__ in which pieces of paper (or other thin "
"material) are cut into special shapes and arranged in two-dimensional "
"representations of characters and objects. Characters' bodies are usually "
"made out of several pieces. The pieces are arranged and photographed once "
"for each frame of the film. The animator moves and rotates the parts in "
"small increments between each shot to create the illusion of movement when "
"the images are played back quickly in sequence."
msgstr ""

#, fuzzy
msgid ""
"Simulations of cutout animation can now be created using software as seen in "
"`South Park <https://en.wikipedia.org/wiki/South_Park>`__ and `Jake and the "
"Never Land Pirates <https://en.wikipedia.org/wiki/"
"Jake_and_the_Never_Land_Pirates>`__."
msgstr ""
"디지털 시대의 도래와 함께 이 기술은 컴퓨터를 사용하여 가능하게 되었고 결과적"
"으로 디지털 컷아웃을 이용한 애니메이션 TV 쇼의 양이 증가하게 되었습니다. 눈"
"에 띄는 예로는 `South Park <https://en.wikipedia.org/wiki/South_Park>`__ 또"
"는 `Jake and the Never Land Pirates <https://en.wikipedia.org/wiki/"
"Jake_and_the_Never_Land_Pirates>`__ 있습니다."

#, fuzzy
msgid ""
"In video games, this technique has also become popular. Examples of this are "
"`Paper Mario <https://en.wikipedia.org/wiki/Super_Paper_Mario>`__ or `Rayman "
"Origins <https://en.wikipedia.org/wiki/Rayman_Origins>`__ ."
msgstr ""
"비디오 게임에서 또한 이 기술이 유명합니다. 예로는 `Paper Mario <https://en."
"wikipedia.org/wiki/Super_Paper_Mario>`__ 또는 `Rayman Origins <https://en."
"wikipedia.org/wiki/Rayman_Origins>`__ 가 있습니다."

#, fuzzy
msgid "Cutout animation in Godot"
msgstr "컷 아웃(Cutout) 애니메이션"

msgid ""
"Godot provides tools for working with cutout rigs, and is ideal for the "
"workflow:"
msgstr ""

#, fuzzy
msgid ""
"**The animation system is fully integrated with the engine**: This means "
"animations can control much more than just motion of objects. Textures, "
"sprite sizes, pivots, opacity, color modulation, and more, can all be "
"animated and blended."
msgstr ""
"**애니메이션 시스템이 엔진과 완전히 통합됨**: 이 말은 즉 애니메이션은 텍스"
"처, 스프라이트 크기, 중심점, 불투명함, 색깔 변조(modulation) 등과 같은 단순"
"한 오브젝트의 움직임 이상의 것을 제어할 수 있습니다의."

msgid ""
"**Combine animation styles**: AnimatedSprite allows traditional cel "
"animation to be used alongside cutout animation. In cel animation different "
"animation frames use entirely different drawings rather than the same pieces "
"positioned differently. In an otherwise cutout-based animation, cel "
"animation can be used selectively for complex parts such as hands, feet, "
"changing facial expressions, etc."
msgstr ""

msgid ""
"**Custom Shaped Elements**: Custom shapes can be created with :ref:"
"`Polygon2D <class_Polygon2D>` allowing UV animation, deformations, etc."
msgstr ""

#, fuzzy
msgid ""
"**Particle Systems**: A cutout animation rig can be combined with particle "
"systems. This can be useful for magic effects, jetpacks, etc."
msgstr ""
"**입자 시스템**: 또한 전통적인 애니메이션 구조와 혼합될 수 있습니다. 마법 효"
"과, 제트팩 등에 유용함."

#, fuzzy
msgid ""
"**Custom Colliders**: Set colliders and influence areas in different parts "
"of the skeletons, great for bosses and fighting games."
msgstr ""
"**사용자 정의 충돌기(Colliders)**: 뼈대의 각기 다른 부분에 충돌기와 영향 영역"
"을 설정합니다. 보스, 격투 게임 등에 적합함."

#, fuzzy
msgid ""
"**Animation Tree**: Allows complex combinations and blending between several "
"animations, the same way it works in 3D."
msgstr ""
"**애니메이션 트리**: 여러 애니메이션의 복잡한 조합과 혼합을 가능하게 합니다. "
"3D에서 동일한 방식으로 작동합니다."

msgid "And much more!"
msgstr "그리고 더 많이 있습니다!"

msgid "Making of GBot"
msgstr "GBot 만들기"

msgid ""
"For this tutorial, we will use as demo content the pieces of the `GBot "
"<https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ character, created by "
"Andreas Esau."
msgstr ""
"이번 튜토리얼을 위해서 우리는 `GBot <https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ 캐릭터의 조각들을 데모 컨텐츠"
"로 사용할 것입니다. created by Andreas Esau."

msgid ""
"Get your assets: :download:`gbot_resources.zip <files/gbot_resources.zip>`."
msgstr ""

msgid "Setting up the rig"
msgstr ""

msgid "Create an empty Node2D as root of the scene, we will work under it:"
msgstr "씬의 루트로 빈 Node2D를 만듭니다. 우리는 아래와 같이 작업할 것입니다:"

#, fuzzy
msgid ""
"The first node of the model is the hip. Generally, both in 2D and 3D, the "
"hip is the root of the skeleton. This makes it easier to animate:"
msgstr ""
"좋아요. 우리가 만들 모델의 첫 번째 노드는 엉덩이가 될 것 입니다. 일반적으로 "
"2D와 3D 모두 엉덩이는 골격의 뿌리입니다. 이렇게 하면 애니메이션을 보다 쉽게 "
"할 수 있습니다:"

#, fuzzy
msgid ""
"Next will be the torso. The torso needs to be a child of the hip, so create "
"a child sprite and load the torso texture, later accommodate it properly:"
msgstr ""
"다음은 몸통입니다. 몸통은 엉덩이의 자손이여야 하므로 자손 스프라이트를 만들"
"어 몸통을 불러오고 나중에 적당히 맞춥니다:"

#, fuzzy
msgid ""
"This looks good. Let's see if our hierarchy works as a skeleton by rotating "
"the torso. We can do this be pressing :kbd:`E` to enter rotate mode, and "
"dragging with the left mouse button. To exit rotate mode hit :kbd:`ESC`."
msgstr ""
"좋아 보입니다. 우리 구조가 몸통을 돌려서 골격으로 작용하는지 봅시다. ``E`` "
"를 눌러 회전 모드로 들어가고 왼쪽 마우스 버튼으로 끌 수 있습니다. 회전 모드"
"를 종료하려면 ``ESC`` 를 누르세요."

#, fuzzy
msgid "The rotation pivot is wrong and needs to be adjusted."
msgstr ""
"이런, 좋게 보이지 않습니다! 회전 중심점이 잘못 되었습니다. 즉 조정할 필요가 "
"있습니다."

#, fuzzy
msgid ""
"This small cross in the middle of the :ref:`Sprite <class_Sprite>` is the "
"rotation pivot:"
msgstr ""
":ref:`Sprite <class_Sprite>` 의 가운데에 있는 이 작은 십자가가 회전 중심점입"
"니다:"

msgid "Adjusting the pivot"
msgstr "중심점 조정하기"

msgid ""
"The pivot can be adjusted by changing the *offset* property in the Sprite:"
msgstr "중심점은 스프라이트에서 *offset* 속성을 변경해서 조정될 수 있습니다:"

#, fuzzy
msgid ""
"The pivot can also be adjusted *visually*. While hovering over the desired "
"pivot point,  press :kbd:`V` to move the pivot there for the selected "
"Sprite. There is also a tool in the tool bar that has a similar function."
msgstr ""
"그러나 *시각적으로* 할 수 있는 방법이 더 있습니다. 중심점이 있기를 원하는 지"
"점에 커서를 올려놓고 단순히 \"v\" 키를 누르면 선택된 스프라이트의 중심점이 해"
"당 위치로 움직입니다. 또는 툴바에 유사한 기능을 가진 툴이 있습니다."

#, fuzzy
msgid ""
"Continue adding body pieces, starting with the right arm. Make sure to put "
"each sprite in its correct place in the hierarchy, so its rotations and "
"translations are relative to its parent:"
msgstr ""
"이제 좋아 보입니다! 오른쪽 팔을 시작으로 몸 부분을 계속 추가합시다. 구조에 넣"
"을 때 스프라이트의 회전과 변환이 부모에 상대적이 되도록 하세요:"

msgid ""
"With the left arm there's a problem. In 2D, child nodes appear in front of "
"their parents:"
msgstr ""

msgid ""
"We want the left arm to appear *behind* the hip and the torso. We could move "
"the left arm nodes behind the hip (above the hip node in the scene "
"hierarchy), but then the left arm is no longer in its proper place in the "
"hierarchy. This means it wouldn't be affected by the movement of the torso. "
"We'll fix this problem with ``RemoteTransform2D`` nodes."
msgstr ""

msgid ""
"You can also fix depth ordering problems by adjusting the Z property of any "
"node inheriting from Node2D."
msgstr ""

msgid "RemoteTransform2D node"
msgstr "RemoteTransform2D 노드"

#, fuzzy
msgid ""
"The :ref:`RemoteTransform2D <class_RemoteTransform2D>` node transforms nodes "
"somewhere else in the hierarchy. This node applies its own transform "
"(including any transformation it inherits from its parents) to the remote "
"node it targets."
msgstr ""
"Godot은 :ref:`RemoteTransform2D <class_RemoteTransform2D>` 라는 특수한 노드"
"를 제공합니다. 이 노드는 원격 노드에 적용한 변형을 계층 어딘가에 있는 노드를 "
"변형할 것입니다."

#, fuzzy
msgid ""
"This allows us to correct the visibility order of our elements, "
"independently of the locations of those parts in the cutout hierarchy."
msgstr "이를 통해 계층과 독립적인 뚜렷한 순서를 가질 수 있습니다."

msgid ""
"Create a ``RemoteTransform2D`` node as a child of the torso. Call it "
"``remote_arm_l``. Create another RemoteTransform2D node inside the first and "
"call it ``remote_hand_l``. Use the ``Remote Path`` property of the two new "
"nodes to target the ``arm_l`` and ``hand_l`` sprites respectively:"
msgstr ""

#, fuzzy
msgid ""
"Moving the ``RemoteTransform2D`` nodes now moves the sprites. So we can "
"create animations by adjusting the ``RemoteTransform2D`` transforms:"
msgstr ""
"원격 변형 노드를 움직이면 스프라이트가 움직입니다. 쉽게 애니메이션을 할 수 있"
"고 캐릭터 자세를 잡을 수 있습니다:"

msgid "Completing the skeleton"
msgstr "뼈대 완성하기"

msgid ""
"Complete the skeleton by following the same steps for the rest of the parts. "
"The resulting scene should look similar to this:"
msgstr ""
"나머지 부분도 같은 과정을 거쳐서 뼈대를 완성합니다. 씬 결과는 다음과 같이 비"
"슷하게 보여야 합니다:"

msgid ""
"The resulting rig will be easy to animate. By selecting the nodes and "
"rotating them you can animate forward kinematics (FK) efficiently."
msgstr ""

msgid "For simple objects and rigs this is fine, but there are limitations:"
msgstr ""

msgid ""
"Selecting sprites in the main viewport can become difficult in complex rigs. "
"The scene tree ends up being used to select parts instead, which can be "
"slower."
msgstr ""

msgid ""
"Inverse Kinematics (IK) is useful for animating extremities like hands and "
"feet, and can't be used with our rig in its current state."
msgstr ""

#, fuzzy
msgid "To solve these problems we'll use Godot's skeletons."
msgstr ""
"이러한 문제를 해결하기 위해서 Godot은 골격에 관한 간단한 메서드를 지원합니다."

msgid "Skeletons"
msgstr "스켈레톤"

msgid ""
"In Godot there is a helper to create \"bones\" between nodes. The bone-"
"linked nodes are called skeletons."
msgstr ""

#, fuzzy
msgid ""
"As an example, let's turn the right arm into a skeleton. To create a "
"skeleton, a chain of nodes must be selected from top to bottom:"
msgstr ""
"예를 들어 오른쪽 팔을 골격으로 만들어 봅시다. 골격을 만들기 위해서는 일련의 "
"노드가 위에서 아래로 선택되어야 합니다:"

msgid "Then, click on the Skeleton menu and select ``Make Bones``."
msgstr ""
"그 다음 스켈레톤 설정 메뉴를 클릭하고 ``노드에서 맞춤 본 만들기`` 를 선택하세"
"요."

msgid "This will add bones covering the arm, but the result may be surprising."
msgstr ""

msgid ""
"Why does the hand lack a bone? In Godot, a bone connects a node with its "
"parent. And there's currently no child of the hand node. With this knowledge "
"let's try again."
msgstr ""

msgid ""
"The first step is creating an endpoint node. Any kind of node will do, but :"
"ref:`Position2D <class_Position2D>` is preferred because it's visible in the "
"editor. The endpoint node will ensure that the last bone has orientation."
msgstr ""

msgid ""
"Now select the whole chain, from the endpoint to the arm and create bones:"
msgstr ""

msgid ""
"The result resembles a skeleton a lot more, and now the arm and forearm can "
"be selected and animated."
msgstr ""

msgid ""
"Create endpoints for all important extremities. Generate bones for all "
"articulable parts of the cutout, with the hip as the ultimate connection "
"between all of them."
msgstr ""

msgid ""
"You may notice that an extra bone is created when connecting the hip and "
"torso. Godot has connected the hip node to the scene root with a bone, and "
"we don't want that. To fix this, select the root and hip node, open the "
"Skeleton menu, click ``clear bones``."
msgstr ""

#, fuzzy
msgid "Your final skeleton should look something like this:"
msgstr "당신의 최종 씬은 이렇게 보여야 할 것입니다."

msgid ""
"You might have noticed a second set of endpoints in the hands. This will "
"make sense soon."
msgstr ""

msgid ""
"Now that the whole figure is rigged, the next step is setting up the IK "
"chains. IK chains allow for more natural control of extremities."
msgstr ""

msgid "IK chains"
msgstr "IK 체인"

msgid ""
"IK stands for inverse kinematics. It's a convenient technique for animating "
"the position of hands, feet and other extremities of rigs like the one we've "
"made. Imagine you want to pose a character's foot in a specific position on "
"the ground. Without IK chains, each motion of the foot would require "
"rotating and positioning several other bones (the shin and the thigh at "
"least). This would be quite complex and lead to imprecise results."
msgstr ""

msgid ""
"IK allows us to move directly the foot while the shin and thigh self-adjust."
msgstr ""

msgid ""
"To create an IK chain, select a chain of bones from endpoint to the base for "
"the chain. For example, to create an IK chain for the right leg, select the "
"following:"
msgstr ""

msgid "Then enable this chain for IK. Go to Edit > Make IK Chain."
msgstr ""

msgid "As a result, the base of the chain will turn *Yellow*."
msgstr ""

msgid ""
"Once the IK chain is set-up grab any child or grand-child of the base of the "
"chain (e.g. a foot) and move it. You'll see the rest of the chain adjust as "
"you adjust its position."
msgstr ""

#, fuzzy
msgid "Animation tips"
msgstr "애니메이션 설정"

msgid ""
"The following section will be a collection of tips for creating animation "
"for your cutout rigs. For more information on how the animation system in "
"Godot works, see :ref:`doc_introduction_animation`."
msgstr ""

#, fuzzy
msgid "Setting keyframes and excluding properties"
msgstr "씬 노드 속성 접근하기"

msgid ""
"Special contextual elements appear in the top toolbar when the animation "
"editor window is open:"
msgstr ""

msgid ""
"The key button inserts location, rotation, and scale keyframes for the "
"selected objects or bones at the current playhead position."
msgstr ""

msgid ""
"The \"loc\", \"rot\", and \"scl\" toggle buttons to the left of the key "
"button modify its function, allowing you to specify which of the three "
"properties keyframes will be created for."
msgstr ""

msgid ""
"Here's an illustration of how this can be useful: Imagine you have a node "
"which already has two keyframes animating its scale only. You want to add an "
"overlapping rotation movement to the same node. The rotation movement should "
"begin and end at different times from the scale change that's already set "
"up. You can use the toggle buttons to have only rotation information added "
"when you add a new keyframe. This way, you can avoid adding unwanted scale "
"keyframes which would disrupt the existing scale animation."
msgstr ""

#, fuzzy
msgid "Creating a rest pose"
msgstr "프로젝트 생성하기"

msgid ""
"Think of a rest pose as a default pose that your cutout rig should be set to "
"when no other pose is active in your game. Create a rest pose as follows:"
msgstr ""

msgid ""
"1. Make sure the rig parts are positioned in what looks like a \"resting\" "
"arrangement."
msgstr ""

#, fuzzy
msgid "Create a new animation, rename it \"rest\"."
msgstr "AnimationPlayer 노드 만들기"

msgid "Select all nodes in your rig (box selection should work fine)."
msgstr ""

msgid ""
"4. Make sure the \"loc\", \"rot\", and \"scl\" toggle buttons are all active "
"in the toolbar."
msgstr ""

msgid ""
"5. Press the key button. Keys will be inserted for all selected parts "
"storing their current arrangement. This pose can now be recalled when "
"necessary in your game by playing the \"rest\" animation you've created."
msgstr ""

msgid "Modifying rotation only"
msgstr ""

msgid ""
"When animating a cutout rig, often it's only the rotation of the nodes that "
"needs to change. Location and scale are rarely used."
msgstr ""

msgid ""
"So when inserting keys, you might find it convenient to have only the "
"\"rot\" toggle active most of the time:"
msgstr ""

msgid ""
"This will avoid the creation of unwanted animation tracks for position and "
"scale."
msgstr ""

#, fuzzy
msgid "Keyframing IK chains"
msgstr "IK 체인"

msgid ""
"When editing IK chains, it's not necessary to select the whole chain to add "
"keyframes. Selecting the endpoint of the chain and inserting a keyframe will "
"automatically insert keyframes for all other parts of the chain too."
msgstr ""

msgid "Visually move a sprite behind its parent"
msgstr ""

msgid ""
"Sometimes it is necessary to have a node change its visual depth relative to "
"its parent node during an animation. Think of a character facing the camera, "
"who pulls something out from behind his back and holds it out in front of "
"him. During this animation the whole arm and the object in his hand would "
"need to change their visual depth relative to the body of the character."
msgstr ""

msgid ""
"To help with this there's a keyframable \"Behind Parent\" property on all "
"Node2D-inheriting nodes. When planning your rig, think about the movements "
"it will need to perform and give some thought to how you'll use \"Behind "
"Parent\" and/or RemoteTransform2D nodes. They provide overlapping "
"functionality."
msgstr ""

msgid "Setting easing curves for multiple keys"
msgstr ""

msgid "To apply the same easing curve to multiple keyframes at once:"
msgstr ""

msgid "Select the relevant keys."
msgstr ""

#, fuzzy
msgid ""
"Click on the pencil icon in the bottom right of the animation panel. This "
"will open the transition editor."
msgstr ""
"노드 탭에서 AnimationPlayer 노드를 클릭해서 뷰포트 하단의 애니메이션 패널을 "
"엽니다."

msgid "In the transition editor, click on the desired curve to apply it."
msgstr ""

msgid "2D Skeletal deform"
msgstr ""

msgid ""
"Skeletal deform can be used to augment a cutout rig, allowing single pieces "
"to deform organically (e.g. antennae that wobble as an insect character "
"walks)."
msgstr ""

msgid ""
"This process is described in a :ref:`separate tutorial <doc_2d_skeletons>`."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
