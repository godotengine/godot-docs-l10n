# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Beziers, curves and paths"
msgstr "베지어 곡선과 경로"

msgid ""
"Bezier curves are a mathematical approximation of natural geometric shapes. "
"We use them to represent a curve with as little information as possible and "
"with a high level of flexibility."
msgstr ""
"베지어 곡선은 자연적인 기하학적 형상들의 수학적 근사입니다. 이들을 사용하면 "
"가능한 한 적은 정보를 이용하여 최대한 높은 유연성으로 곡선을 나타낼 수 있습니"
"다."

msgid ""
"Unlike more abstract mathematical concepts, Bezier curves were created for "
"industrial design. They are a popular tool in the graphics software industry."
msgstr ""
"다른 추상적인 수학적 개념들과는 다르게, 베지어 곡선은 산업 디자인을 위해 만들"
"어졌습니다. 이는 그래픽 소프트웨어 업계에서 매우 인기 있는 도구입니다."

msgid ""
"They rely on :ref:`interpolation<doc_interpolation>`, which we saw in the "
"previous article, combining multiple steps to create smooth curves. To "
"better understand how Bezier curves work, let's start from its simplest "
"form: Quadratic Bezier."
msgstr ""
"이들은 우리가 이전 글에서 보았던 :ref:`선형 보간법<doc_interpolation>` 에 의"
"존하며, 여러 단계를 조합하여 부드러운 곡선을 만듭니다. 베지어 곡선이 어떻게 "
"작동하는지 더 잘 이해할 수 있도록, 우선 가장 간단한 형태인 2차 베지어 곡선부"
"터 살펴봅시다."

msgid "Quadratic Bezier"
msgstr "2차 베지어 (Quadratic Bezier)"

msgid "Take three points, the minimum required for Quadratic Bezier to work:"
msgstr "2차 베지어 곡선을 만들기 위해, 최소한의 요구치인 점 3개를 잡아 봅시다:"

msgid ""
"To draw a curve between them, we first interpolate gradually over the two "
"vertices of each of the two segments formed by the three points, using "
"values ranging from 0 to 1. This gives us two points that move along the "
"segments as we change the value of ``t`` from 0 to 1."
msgstr ""
"먼저 세 점을 통해서 만들어지는 두 개의 선분 각각이 가지는 두 꼭짓점을, 0과 1 "
"사이의 ``t`` 값을 이용하여 서서히 보간합니다. 그러면 ``t`` 값을 0에서 1으로 "
"바꿀 때 선분을 따라 이동하는 점 2개를 얻을 수 있습니다."

msgid ""
"We then interpolate ``q0`` and ``q1`` to obtain a single point ``r`` that "
"moves along a curve."
msgstr ""
"얻은 두 점인 ``q0`` 과 ``q1`` 을 보간하면, 곡선을 그리며 이동하는 한 점 "
"``r`` 을 얻을 수 있습니다."

msgid "This type of curve is called a *Quadratic Bezier* curve."
msgstr "이와 같은 곡선을 *2차 베지어 곡선* 이라고 부릅니다."

msgid "*(Image credit: Wikipedia)*"
msgstr "*(사진 출처: 위키백과)*"

msgid "Cubic Bezier"
msgstr "3차 베지어 (Cubic Bezier)"

msgid ""
"Building upon the previous example, we can get more control by interpolating "
"between four points."
msgstr ""
"바로 전 예제를 바탕으로, 세 점 대신 네 점을 사용하면 곡선을 더 잘 제어할 수 "
"있습니다."

msgid ""
"We first use a function with four parameters to take four points as an "
"input, ``p0``, ``p1``, ``p2`` and ``p3``:"
msgstr ""
"우선, ``p0``, ``p1``, ``p2``, ``p3`` 이 4개의 점을 인자로 받는 함수를 정의합"
"니다:"

msgid ""
"We apply a linear interpolation to each couple of points to reduce them to "
"three:"
msgstr "그 뒤 각각의 꼭짓점을 따라 선형 보간을 적용하여 점 3개를 얻습니다:"

msgid "We then take our three points and reduce them to two:"
msgstr "같은 방법으로 점 3개를 이용해 2개의 점을 얻고:"

msgid "And to one:"
msgstr "마지막으로 하나의 점을 얻으면:"

msgid "Here is the full function:"
msgstr "아래는 완성된 함수입니다:"

msgid ""
"The result will be a smooth curve interpolating between all four points:"
msgstr "결과적으로 네 점을 따라서 보간되는 매끄러운 곡선이 그려지게 됩니다:"

msgid ""
"Cubic Bezier interpolation works the same in 3D, just use ``Vector3`` "
"instead of ``Vector2``."
msgstr ""
"3차 베지어 보간은 ``Vector2`` 를 ``Vector3`` 으로만 바꾸면 3D에서도 동일하게 "
"작동합니다."

msgid "Adding control points"
msgstr "제어점 만들기"

msgid ""
"Building upon Cubic Bezier, we can change the way two of the points work to "
"control the shape of our curve freely. Instead of having ``p0``, ``p1``, "
"``p2`` and ``p3``, we will store them as:"
msgstr ""

msgid "``point0 = p0``: Is the first point, the source"
msgstr ""

msgid "``control0 = p1 - p0``: Is a vector relative to the first control point"
msgstr ""

msgid ""
"``control1 = p3 - p2``: Is a vector relative to the second control point"
msgstr ""

msgid "``point1 = p3``: Is the second point, the destination"
msgstr ""

msgid ""
"This way, we have two points and two control points which are relative "
"vectors to the respective points. If you've used graphics or animation "
"software before, this might look familiar:"
msgstr ""

msgid ""
"This is how graphics software presents Bezier curves to the users, and how "
"they work and look in Godot."
msgstr ""

msgid "Curve2D, Curve3D, Path and Path2D"
msgstr ""

#, fuzzy
msgid ""
"There are two objects that contain curves: :ref:`Curve3D <class_Curve3D>` "
"and :ref:`Curve2D <class_Curve2D>` (for 3D and 2D respectively)."
msgstr ""
"두 가지 방법이 항상 호환되는 것은 아닙니다. 컨테이너는 자손을 제어하기 때문"
"에, 레이아웃 메뉴를 그것들에게 사용할 수 없습니다. 각 컨테이너는 특정한 효과"
"를 갖고 있으므로 당신은 제대로 동작하는 인터페이스를 얻기 위해 그들을 중첩"
"(nest)할지도 모릅니다. 레이아웃 접근을 사용하는 경우 자손들을 아래계층에서 위"
"계층 방향으로 작업합니다. 씬에 추가적이 컨테이너를 사용하지 않으므로 더 깨끗"
"한 계층 구조를 만들 수 있지만, 항목을 행이나 열, 격자 등으로 배열하기는 더 어"
"렵습니다."

msgid ""
"They can contain several points, allowing for longer paths. It is also "
"possible to set them to nodes: :ref:`Path <class_Path>` and :ref:`Path2D "
"<class_Path2D>` (also for 3D and 2D respectively):"
msgstr ""

msgid ""
"Using them, however, may not be completely obvious, so following is a "
"description of the most common use cases for Bezier curves."
msgstr ""

msgid "Evaluating"
msgstr ""

msgid ""
"Just evaluating them may be an option, but in most cases it's not very "
"useful. The big drawback with Bezier curves is that if you traverse them at "
"constant speed, from ``t = 0`` to ``t = 1``, the actual interpolation will "
"*not* move at constant speed. The speed is also an interpolation between the "
"distances between points ``p0``, ``p1``, ``p2`` and ``p3`` and there is not "
"a mathematically simple way to traverse the curve at constant speed."
msgstr ""

msgid "Let's do a simple example with the following pseudocode:"
msgstr ""

msgid ""
"As you can see, the speed (in pixels per second) of the circle varies, even "
"though ``t`` is increased at constant speed. This makes beziers difficult to "
"use for anything practical out of the box."
msgstr ""

msgid "Drawing"
msgstr "그리기"

msgid ""
"Drawing beziers (or objects based on the curve) is a very common use case, "
"but it's also not easy. For pretty much any case, Bezier curves need to be "
"converted to some sort of segments. This is normally difficult, however, "
"without creating a very high amount of them."
msgstr ""

msgid ""
"The reason is that some sections of a curve (specifically, corners) may "
"require considerable amounts of points, while other sections may not:"
msgstr ""

msgid ""
"Additionally, if both control points were ``0, 0`` (remember they are "
"relative vectors), the Bezier curve would just be a straight line (so "
"drawing a high amount of points would be wasteful)."
msgstr ""

msgid ""
"Before drawing Bezier curves, *tessellation* is required. This is often done "
"with a recursive or divide and conquer function that splits the curve until "
"the curvature amount becomes less than a certain threshold."
msgstr ""

msgid ""
"The *Curve* classes provide this via the :ref:`Curve2D.tessellate() "
"<class_Curve2D_method_tessellate>` function (which receives optional "
"``stages`` of recursion and angle ``tolerance`` arguments). This way, "
"drawing something based on a curve is easier."
msgstr ""

msgid "Traversal"
msgstr ""

msgid ""
"The last common use case for the curves is to traverse them. Because of what "
"was mentioned before regarding constant speed, this is also difficult."
msgstr ""

msgid ""
"To make this easier, the curves need to be *baked* into equidistant points. "
"This way, they can be approximated with regular interpolation (which can be "
"improved further with a cubic option). To do this, just use the :ref:`Curve."
"interpolate_baked()<class_Curve_method_interpolate_baked>` method together "
"with :ref:`Curve2D."
"get_baked_length()<class_Curve2D_method_get_baked_length>`. The first call "
"to either of them will bake the curve internally."
msgstr ""

msgid ""
"Traversal at constant speed, then, can be done with the following pseudo-"
"code:"
msgstr ""

msgid "And the output will, then, move at constant speed:"
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
