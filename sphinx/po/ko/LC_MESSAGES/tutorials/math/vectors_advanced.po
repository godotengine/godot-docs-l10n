# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Advanced vector math"
msgstr "고급 벡터 연산"

msgid "Planes"
msgstr "평면"

msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"외적은 단위 벡터에 대한 또 다른 흥미로운 속성을 갖고있습니다. 벡터에 수직이"
"고 (원점을 통해) 평면을 통과한다고 상상해보십시오. 평면은 전체 공간을 양(비행"
"기 위)과 음(비행기 아래)으로 나누면, (일반적으로 믿는 것과 무관) 그 연산들을 "
"2차원에서도 사용할 수 있습니다:"

msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"표면에 수직인 단위 벡터(표면의 방향을 서술합니다)를 **단위 법선 벡터**\\ 라"
"고 합니다. 그러나 일반적으로 *법선 벡터*\\ 로 줄여 씁니다. 법선 벡터는 평면, "
"3차원 기하학(각 면 또는 정점이 어디서 마주보는지 결정하기 위해) 등에 나타납니"
"다. **법선 벡터**\\ 는 **단위 벡터**\\ 이지만, 이것의 사용법 때문에 *법선 벡"
"터* 라고 합니다(원점을 (0,0)이라고 부르는 것처럼!)."

msgid ""
"It's as simple as it looks. The plane passes by the origin and the surface "
"of it is perpendicular to the unit vector (or *normal*). The side towards "
"the vector points to is the positive half-space, while the other side is the "
"negative half-space. In 3D this is exactly the same, except that the plane "
"is an infinite surface (imagine an infinite, flat sheet of paper that you "
"can orient and is pinned to the origin) instead of a line."
msgstr ""
"그것은 보이는 것 만큼 간단합니다. 평면은 원점을 통과하며 그 표면은 단위 벡터"
"(또는 *법선벡터*_)에 수직입니다. 벡터 점을 향하는 측면은 양의 반쪽 공간이고, "
"다른 쪽은 음의 반쪽 공간입니다. 3차원에서는 평면이 선 대신 무한 표면(방향을 "
"지정할 수 있고 원점에 고정되는 무한 평면 용지)이라는 점을 제외하면 정확하게 "
"동일합니다."

msgid "Distance to plane"
msgstr "평면과의 거리"

msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"이제 평면이 무엇인지 알았으니, 다시 내적으로 돌아가 봅시다. **단위벡터** 와 "
"**공간 내 모든 점** 사이의 내적 (예, 이번에는 벡터와 위치 간에 내적을수행함)"
"은 점에서 평면까지의 **거리를 반환합니다** :"

msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr ""
"그러나 절대적인 거리가 아니라, 만약 점이 음수인 경우에는 거리도 음수입니다:"

msgid "This allows us to tell which side of the plane a point is."
msgstr "이것은 우리가 평면의 어느 쪽을 가리키는 것을 허락한다."

msgid "Away from the origin"
msgstr "원점으로부터 멀리"

msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"난 당신이 무슨 생각을 하는지 압니다! 지금까지 이것은 좋았지만, *실제* 평면은 "
"원점만 통과하는 것이 아니라 공간 어디에나 있습니다. 실제 *평면* 작업을 원하"
"는 경우 *지금*."

msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"평면은 공간을 둘로 나눌 뿐만 아니라 *극성* 도 가지고 있다는 것을 기억하세요. "
"이는 완벽하게 겹치는 평면을 가질 수 있지만, 음의 면과 양의 면은 서로 교환된다"
"는 것을 의미합니다."

msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"이를 위해 전체 평면을 **법선벡터** *N* 과 원점으로부터 **스칼라 *D* 의** 거리"
"로 설명하겠습니다. 따라서 우리 평면은 N과 D로 보여집니다. 예를 들면 다음과 같"
"습니다:"

msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"3차원 수학에서 Godot은 이를 처리하는 :ref:`Plane <class_Plane>` 의 내장 유형"
"을 제공합니다."

msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""
"기본적으로 N과 D는 공간의 평면을 나타낼 수 있으며(N의 크기에 따라 다름) 2차"
"원 또는 3차원의 경우 모두 수학이 동일합니다. 이전과 동일하지만, D는 원점에서"
"부터 평면까지 N 방향으로 이동하는 거리입니다. 예를 들어, 평면의 한 지점에 도"
"달하고 싶다고 가정해 보십시오:"

msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""
"이것은 법선 벡터를 늘려 그것이 평면에 닿게 할 것입니다. 이 수학은 혼란스러워 "
"보일지 모르지만 실제로는 보이는 것보다 훨씬 더 간단합니다. 만약 우리가 다시 "
"한 번 점에서부터 평면까지의 거리를 알려고 한다면, 우리는 거리에 따라 조정만 "
"하면 됩니다:"

msgid "The same thing, using a built-in function:"
msgstr "이것도 마찬가지로, 내장 함수 사용:"

msgid "This will, again, return either a positive or negative distance."
msgstr "이것은 또 양수나 음수의 거리를 반환할 것입니다."

msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""
"평면의 극성 N과 D를 모두 부정함으로써 뒤집을 수 있습니다. 이렇게 하면 평면이 "
"동일한 위치에 있지만 반전된 음과 양의 절반 공간이 있는 평면이 됩니다:"

msgid ""
"Of course, Godot also implements this operator in :ref:`Plane "
"<class_Plane>`, so doing:"
msgstr ""
"물론 고도는 또한 이 연산자를 :ref:`Plane <class_Plane>` 에 구현하여 다음과 같"
"은 작업을 수행합니다:"

msgid "Will work as expected."
msgstr "기대한 대로 작동할 것입니다."

msgid ""
"So, remember, a plane is just that and its main practical use is calculating "
"the distance to it. So, why is it useful to calculate the distance from a "
"point to a plane? It's extremely useful! Let's see some simple examples.."
msgstr ""
"기억하세요, 평면은 단지 그것입니다 그리고 그것의 주요한 실용적 용도는 그것에 "
"대한 거리를 계산하는 것입니다. 그렇다면, 한 지점에서 평면까지의 거리를 계산하"
"는 것이 왜 유용한가? 그것은 매우 유용합니다! 몇 가지 간단한 예를 봅시다."

msgid "Constructing a plane in 2D"
msgstr "2D로 평면 구성하기"

msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"평면이 갑자기 나오지 않는 게 분명하니까 꼭 만들어져야합니다. 2D로 구성하는 것"
"은 쉽습니다. 이것은 법선(단위 벡터)와 점 또는 공간의 두 점으로부터 수행될 수 "
"있습니다."

msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so just calculate D from the dot product of the normal "
"and the point."
msgstr ""
"법선벡터 및 점의 경우, 대부분의 작업이 완료됩니다. 법선벡터가 이미 계산되어 "
"있으므로, 점과 법선벡터의 내적 으로 부터 D를 계산하기만 하면 됩니다."

msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"평면에서의 두 점은, 실제로 두 개의 평면이 그들을 통과하면서 같은 공간을 공유"
"하지만, 법선 벡터는 보통 다른 방향을 가리킨다. 두 점에서 법선벡터를 계산하려"
"면 먼저 방향 벡터를 얻은 다음 어느 쪽으로든 90° 회전해야 합니다:"

msgid ""
"The rest is the same as the previous example, either point_a or point_b will "
"work since they are in the same plane:"
msgstr ""
"나머지는 이전 예와 동일합니다. point_a 또는 point_b는 동일한 평면에 있으므로 "
"작동합니다:"

msgid ""
"Doing the same in 3D is a little more complex and will be explained further "
"down."
msgstr ""
"3차원에서 동일한 작업을 수행하는 것은 약간 더 복잡하며, 아래에 자세히 설명되"
"어 있습니다."

msgid "Some examples of planes"
msgstr "평면의 예"

msgid ""
"Here is a simple example of what planes are useful for. Imagine you have a "
"`convex <https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"여기 유용한 평면들의 간단한 예가 있습니다. 여러분이 `컨벡스 <https://www."
"mathsisfun.com/definitions/convex.html>`__ 폴리곤을 가지고 있다고 상상해 보세"
"요. 예를 들어 직사각형, 사다리꼴, 삼각형 또는 어떤 면이 안쪽으로 굽히지 않는 "
"모든 폴리곤이 있습니다."

msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"폴리곤의 모든 세그먼트에 대해 해당 세그먼트를 통과하는 평면을 계산합니다. 평"
"면 목록이 있으면 폴리곤 내부에 점이 있는지 확인하는 등 깔끔한 작업을 수행할 "
"수 있습니다."

msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"우리는 모든 평면을 통과합니다, 점까지의 거리가 양수인 평면을 찾을 수 있으면 "
"점은 폴리곤 외부에 있습니다. 아니면 점은 폴리곤 내부에 있습니다."

msgid "Code should be something like this:"
msgstr "코드는 다음과 같아야 합니다:"

msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"꽤 멋지죠, 네? 하지만 이것은 훨씬 더 나아집니다! 조금만 더 노력하면, 유사한 "
"논리가 우리에게 컨벡스(볼록) 폴리곤 두 개가 겹치는 때를 알려줄 것입니다. 이것"
"을 분리축 이론(SAT)이라고 하며 대부분의 물리학 엔진은 이것을 콜리전을 감지하"
"기 위해 사용합니다."

msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"점을 사용하면 평면이 양의 거리를 반환하는지 확인하는 것으로 점이 외부에 있는"
"지 여부를 충분히 알 수 있습니다. 다른 폴리곤을 사용하면 *모두* *기타* *폴리곤"
"* *점* 으로 양의 거리를 반환하는 평면을 찾아야 합니다. 이 확인은 A의 평면을 B"
"의 점에 대해 수행한 다음 B의 평면을 A의 점에 대해 수행합니다:"

msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""
"보시다시피 평면은 매우 유용하며, 이것이 빙산의 일각일 뿐입니다. 여러분은 아"
"마 볼록하지 않은 폴리곤에 무슨 일이 일어날지 궁금해 할 것입니다. 일반적으로 "
"오목한 폴리곤은 작은 컨벡스(볼록) 폴리곤으로 분할하거나 BSP(요즘 많이 사용되"
"지 않는 기술)와 같은 기술을 사용하여 처리됩니다."

msgid "Collision detection in 3D"
msgstr "3D에서 콜리전 감지"

msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"이것은 또 다른 보너스 비트인데, 이것은 인내심을 갖고 이 긴 튜토리얼을 따라가"
"는 것에 대한 보상입니다. 여기 또 다른 지혜가 있습니다. 직접 사용 사례(Godot"
"는 이미 콜리전 감지를 매우 잘 수행함)는 아니지만 거의 모든 물리적 엔진과 콜리"
"전 감지 라이브러리에 사용됩니다 :)"

msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"컨벡스 모양을 2D로 변환하는 것이 콜리전 탐지에 유용했다는 것을 기억하시나요? "
"당신은 점이 컨벡스 모양 안에 있는지 또는 두 개의 2D 컨벡스 모양이 겹치는지를 "
"탐지할 수 있습니다."

msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"네, 3D에서도 작동합니다. 만일 두 개의 3D 다면체 모양이 충돌하면 분리면을 찾"
"을 수 없습니다. 분리면이 발견되면 모양은 확실히 충돌하지 않습니다."

msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""
"비트를 새로 고치려면 폴리곤 A의 모든 정점이 평면의 한 쪽에 있고 폴리곤 B의 모"
"든 정점이 다른 쪽에 있음을 의미합니다. 이 평면은 항상 폴리곤 A 또는 폴리곤 B"
"의 면 평면 중 하나입니다."

msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"그러나 3D에서는 분리면을 찾을 수 없기 때문에 이 접근법에 문제가 있습니다. 다"
"음은 이러한 상황의 예입니다:"

msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"이를 방지하려면 일부 추가 평면을 분리기로 테스트해야 합니다. 이러한 평면은 폴"
"리곤 A의 모서리와 폴리곤 B의 모서리 사이의 외적입니다"

msgid "So the final algorithm is something like:"
msgstr "마지막 알고리즘은 다음과 같습니다:"

msgid "More information"
msgstr "더 많은 정보"

msgid ""
"For more information on using vector math in Godot, see the following "
"article:"
msgstr ""
"Godot에서 벡터 수학을 사용하는 것에 대한 자세한 정보에 대해서는, 다음 글들을 "
"참조하세요:"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video series \"Essence of Linear Algebra\": https://www.youtube."
"com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
