# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Idle and Physics Processing"
msgstr "유휴 (Idle) 상태와 물리 프로세싱"

msgid ""
"Games run in a loop. Each frame, you need to update the state of your game "
"world before drawing it on screen. Godot provides two virtual methods in the "
"Node class to do so: :ref:`Node._process() <class_Node_method__process>` "
"and :ref:`Node._physics_process() <class_Node_method__physics_process>`. If "
"you define either or both in a script, the engine will call them "
"automatically."
msgstr ""
"게임은 루프 안에서 실행됩니다. 각 프레임 마다, 게임 월드의 상태를 화면에 표시"
"하기 전에 업데이트 해야 합니다. Godot는 Node 클래스에서 사용하기 위한 두 가"
"지 가상 메서드를 제공합니다: :ref:`Node._process() "
"<class_Node_method__process>` 및 :ref:`Node._physics_process() "
"<class_Node_method__physics_process>`. 스크립트에서 두 가지나 한 가지를 정의"
"한다면, 엔진이 이를 자동으로 호출합니다."

msgid "There are two types of processing available to you:"
msgstr "사용할 수 있는 프로세싱 타입은 두 가지가 있습니다:"

msgid ""
"**Idle processing** allows you to run code that updates a node every frame, "
"as often as possible."
msgstr ""
"**Idle processing**(유휴상태 프로세싱) 은 모든 프레임마다 노드를 가능한 한 자"
"주 업데이트하는 코드를 실행하게 해줍니다."

msgid ""
"**Physics processing** happens at a fixed rate, 60 times per second by "
"default. This is independent of your game's actual framerate, and keeps "
"physics running smoothly. You should use it for anything that involves the "
"physics engine, like moving a body that collides with the environment."
msgstr ""
"**Physics processing** (물리 프로세싱) 은 기본적으로 1초 당 60회를 고정된 속"
"도로 처리합니다. 이는 게임의 실제 프레임 속도와는 별개이며, 물리 (physics)를 "
"매끄럽게 진행하도록 유지합니다. 움직이는 몸이 환경에 충돌하는 것처럼, 물리 엔"
"진과 관련된 모든 것에 대해 물리 프로세싱을 사용해야 합니다."

msgid ""
"You can activate idle processing by defining the ``_process()`` method in a "
"script. You can turn it off and back on by calling :ref:`Node.set_process() "
"<class_Node_method_set_process>`."
msgstr ""
"스크립트에서 :ref:`Node._process() <class_Node_method__process>`\\ 메서드를 "
"정의하여 유휴 프로세싱을 활성화 할 수 있습니다. :ref:`Node.set_process() "
"<class_Node_method_set_process>`를 호출하여 이 기능을 끄고 킬 수 있습니다."

msgid "The engine calls this method every time it draws a frame:"
msgstr "엔진은 프레임을 그릴 때 마다 이 메서드를 호출합니다:"

#, fuzzy
msgid ""
"Keep in mind that the frequency at which the engine calls ``_process()`` "
"depends on your application's framerate, which varies over time and across "
"devices."
msgstr ""
"``_process()``\\ 가 호출되는 빈도는 응용 프로그램이 초 당 몇 프레임 (FPS)으"
"로 실행되는지에 따라 다르다는 것을 명심해야 합니다. 이 비율은 시간과 기기에 "
"따라 다를 수 있습니다."

#, fuzzy
msgid ""
"The function's ``delta`` parameter is the time elapsed in seconds since the "
"previous call to ``_process()``. Use this parameter to make calculations "
"independent of the framerate. For example, you should always multiply a "
"speed value by ``delta`` to animate a moving object."
msgstr ""
"이 함수의 ``delta`` 파라미터는 이전에 호출된 ``_process()`` 에서 경과된 시간 "
"(초) 입니다. 이 파라미터를 사용하여 프레임 속도와 독립적으로 계산합니다. 예"
"를 들어, 속도 값에 ``delta`` 를 항상 곱해줘서 움직이는 물체에 애니매이션 효과"
"를 줄 수 있습니다."

#, fuzzy
msgid ""
"Physics processing works with a similar virtual function: "
"``_physics_process()``. Use it for calculations that must happen before each "
"physics step, like moving a character that collides with the game world. As "
"mentioned above, ``_physics_process()`` runs at fixed time intervals as much "
"as possible to keep the physics interactions stable. You can change the "
"interval between physics steps in the Project Settings, under Physics -> "
"Common -> Physics Fps. By default, it's set to run 60 times per second."
msgstr ""
"``_physics_process()``\\ 를 이용한 물리 처리도 이와 유사합니다. 하지만 이 메"
"서드는 각 물리 처리 단계 이전에 처리되어야 하는 명령에 사용해야 합니다. 예를 "
"들면 캐릭터 조종은 항상 물리 단계 이전에 실행되며 고정된 시간 간격으로 호출됩"
"니다: 기본적으로 초 당 60회 실행됩니다. 프로젝트 설정(Project Settings)의 "
"Physics -> Common -> Physics Fps에서 시간 간격을 변경할 수 있습니다."

#, fuzzy
msgid ""
"The function ``_process()`` is not synchronized with physics. Its rate "
"depends on hardware and game optimization. It also runs after the physics "
"step in single-threaded games."
msgstr ""
"그러나 ``_proceed()`` 함수는 물리 처리 단계와 동기화되지 않습니다. 프레임 비"
"율은 일정하지 않고 하드웨어와 게임 최적화에 의존하기 때문이죠. 이 함수는 단"
"일 스레드 게임의 동적 단계를 거친 후에 실행됩니다."

#, fuzzy
msgid ""
"You can see the ``_process()`` function at work by creating a scene with a "
"single Label node, with the following script attached to it:"
msgstr ""
"간단하게 ``_process()`` 함수가 작동하는 예시를 들면, Label 노드 하나로 된 씬"
"을 만들고 다음 스크립트를 넣습니다:"

#, fuzzy
msgid "When you run the scene, you should see a counter increasing each frame."
msgstr "위 스크립트는 프레임당 증가하는 카운터를 보여줍니다."

msgid "Translation status"
msgstr "번역 상태"
