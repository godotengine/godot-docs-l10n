# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cross-language scripting"
msgstr "언어간 스크립팅"

msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes written in "
"different languages."
msgstr ""
"Godot에선 여러분에 필요에 맞춰 스크립트 언어를 조합해 사용할 수 있습니다. 따"
"라서 하나의 프로젝트에서 C#과 GDScript 모두로 노드를 정의할 수도 있습니다. "
"이 페이지에서는 서로 다른 언어로 작성된 노드 사이에서 발생할 수 있는 상호작용"
"을 살펴볼 것입니다."

msgid ""
"The following two scripts will be used as references throughout this page."
msgstr "아래의 두 스크립트를 이 페이지를 진행하는 동안 참조할 것입니다."

msgid "Instantiating nodes"
msgstr "노드 인스턴스화 하기"

msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr ""
"씬 트리에서 노드를 사용하고 있는 것이 아니라면, 아마 노드를 코드에서 직접 인"
"스턴스화 하는 것을 원하실겁니다."

msgid "Instantiating C# nodes from GDScript"
msgstr "GDScript에서 C# 노드 인스턴스화 하기"

msgid ""
"Using C# from GDScript doesn't need much work. Once loaded (see :ref:"
"`doc_gdscript_classes_as_resources`), the script can be instantiated with :"
"ref:`new() <class_CSharpScript_method_new>`."
msgstr ""
"C# 노드는 GDScript에서 어렵지 않게 사용할 수 있습니다. 로딩이 끝나면 (:ref:"
"`doc_gdscript_classes_as_resources`를 참고하세요) :ref:`new() "
"<class_CSharpScript_method_new>`로 스크립트를 인스턴스화 할 수 있습니다."

msgid ""
"When creating ``.cs`` scripts, you should always keep in mind that the class "
"Godot will use is the one named like the ``.cs`` file itself. If that class "
"does not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""
"``.cs`` 스크립트를 생성할 때, Godot은 ``.cs`` 파일과 동일한 이름의 클래스를 "
"사용하려 한다는 것을 명심하십시오. 만약 그런 이름의 클래스가 파일 내에 없다"
"면 다음 에러가 발생할 것입니다: ``Invalid call. Nonexistent function `new` "
"in base``."

msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr "예를 들어, MyCoolNode.cs내에 MyCoolNode 클래스가 존재해야 합니다."

msgid ""
"You also need to check your ``.cs`` file is referenced in the project's ``."
"csproj`` file. Otherwise, the same error will occur."
msgstr ""
"``.cs`` 파일이 프로젝트의 ``.csproj`` 파일 내에서 참조되었는지 역시 확인해야 "
"합니다. 만약 참조되지 않았다면 위와 동일한 에러가 발생합니다."

msgid "Instantiating GDScript nodes from C#"
msgstr "GDScript 노드를 C#에서 인스턴스화 하기"

msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""
"C#에서의 방법도 위와 크게 다르지 않습니다. 로딩이 완료되면 GDScript를 :ref:"
"`GDScript.New() <class_GDScript_method_new>`로 인스턴스화 할 수 있습니다."

msgid ""
"Here we are using an :ref:`class_Object`, but you can use type conversion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""
"여기서는 :ref:`class_Object`을 사용했지만, :ref:"
"`doc_c_sharp_features_type_conversion_and_casting`에 설명된 것처럼 변환할 수"
"도 있습니다."

msgid "Accessing fields"
msgstr "멤버 변수 접근하기"

msgid "Accessing C# fields from GDScript"
msgstr "GDScript에서 C# 멤버 변수에 접근하기"

msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr ""
"GDScript에서는 크게 신경 쓸 것 없이 쓰던 그대로 C# 멤버 번수에 접근할 수 있습"
"니다."

msgid ""
"Note that it doesn't matter if the field is defined as a property or an "
"attribute. However, trying to set a value on a property that does not define "
"a setter will result in a crash."
msgstr ""
"멤버 변수가 속성(property)인지 어트리뷰트인지는 중요하지 않지만, setter가 없"
"는 속성(property)의 값을 바꾸려고 하면 오류가 발생한다는 점을 명심하십시오."

msgid "Accessing GDScript fields from C#"
msgstr "C#에서 GDScript 멤버 변수 접근하기"

msgid ""
"As C# is statically typed, accessing GDScript from C# is a bit more "
"convoluted, you will have to use :ref:`Object.Get() "
"<class_Object_method_get>` and :ref:`Object.Set() "
"<class_Object_method_set>`. The first argument is the name of the field you "
"want to access."
msgstr ""
"C#이 정적 언어이기 때문에, C#에서 GDScript에 접근하는 것은 조금 복잡합니다. "
"첫 번째 인수로 접근할 멤버 변수의 이름을 입력하고 :ref:`Object.Get() "
"<class_Object_method_get>`또는 :ref:`Object.Set() <class_Object_method_set>`"
"을 사용해야 합니다."

msgid ""
"Keep in mind that when setting a field value you should only use types the "
"GDScript side knows about. Essentially, you want to work with built-in types "
"as described in :ref:`doc_gdscript` or classes extending :ref:`class_Object`."
msgstr ""
"멤버 변수에 값을 입력할 때 GDScript가 인식할 수 있는 타입의 값을 넘겨줘야 합"
"니다. 따라서 :ref:`doc_gdscript`에 있는 내장(built-in) 타입 또는 :ref:"
"`class_Object`의 파생 클래스를 사용해야 할 겁니다."

msgid "Calling methods"
msgstr "메서드 호출하기"

msgid "Calling C# methods from GDScript"
msgstr "GDScript에서 C# 메서드 호출하기"

msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast the arguments to match function "
"signatures. If that's impossible, you'll see the following error: ``Invalid "
"call. Nonexistent function `FunctionName```."
msgstr ""
"말했듯이 GDScript에서는 쓰던대로 C# 메서드를 호출할 수 있습니다. 넘긴 인자들"
"의 타입은 마샬링에서 가능한 한 함수 원형에 맞게 변환될 것이며, 만약 불가능하"
"다면 다음의 에러가 발생합니다: ``Invalid call. Nonexistent function "
"`FunctionName```."

msgid "Calling GDScript methods from C#"
msgstr "C#에서 GDScript 메서드 호출하기"

msgid ""
"To call GDScript methods from C# you'll need to use :ref:`Object.Call() "
"<class_Object_method_call>`. The first argument is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""
"C#에서 GDScript 메서드를 호출하려면 첫 인자로 호출할 메서드 이름을 입력하고 :"
"ref:`Object.Call() <class_Object_method_call>`을 호출하면 됩니다. 이후에 입력"
"된 인자들은 호출할 메서드에게 넘겨집니다."

msgid ""
"As you can see, if the first argument of the called method is an array, "
"you'll need to cast it as ``object``. Otherwise, each element of your array "
"will be treated as a single argument and the function signature won't match."
msgstr ""
"만약 위와 같이 호출할 함수의 첫 인자가 배열일 때에는, 배열을 ``object`` 로 타"
"입 변환해야 합니다. 그렇지 않으면 배열의 각 원소들이 하나의 인자로 취급되어 "
"함수 원형과 맞지 않게 됩니다."

msgid "Inheritance"
msgstr "상속(Inheritance)"

msgid ""
"A GDScript file may not inherit from a C# script. Likewise, a C# script may "
"not inherit from a GDScript file. Due to how complex this would be to "
"implement, this limitation is unlikely to be lifted in the future. See `this "
"GitHub issue <https://github.com/godotengine/godot/issues/38352>`__ for more "
"information."
msgstr ""
"GDScript 파일이 C# 스크립트를 상속할 수 없고, 그 반대 역시 불가능합니다. 이 "
"동작을 구현하는 것이 매우 까다로우므로, 이 제한은 바뀌지 않을 가능성이 높습니"
"다. 자세한 내용은 이 `GitHub issue <https://github.com/godotengine/godot/"
"issues/38352>`__ 를 참고하세요."

msgid "Translation status"
msgstr "번역 상태"
