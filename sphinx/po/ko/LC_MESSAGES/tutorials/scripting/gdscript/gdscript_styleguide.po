# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript style guide"
msgstr "GDScript 스타일 가이드"

msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"이 스타일 가이드는 우아한 GDScript를 작성하기 위한 규칙을 나열합니다. 목표는 "
"깨끗하고 읽기 쉬운 코드 작성을 장려하고 프로젝트, 토론 및 튜토리얼 전반에 걸"
"쳐 일관성을 촉진하는 것입니다. 바라건대 이 가이드는 자동 서식 툴의 개발도 지"
"원할 것입니다."

msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"GDScript는 Python에 가깝기 때문에 이 가이드는 Python의 `PEP 8 <https://www."
"python.org/dev/peps/pep-0008/>`__ 프로그래밍 스타일 가이드에서 영감을 받았습"
"니다."

msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"스타일 가이드는 빡빡한 법전이 아닙니다. 아직은 아래의 가이드라인을 적용하지 "
"못할 수도 있습니다. 그런 일이 발생하면 최선의 판단을 내리고 동료 개발자에게 "
"통찰력을 요청하세요."

msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"일반적으로 프로젝트와 팀 내에서 코드를 일관되게 유지하는 것이 이 가이드를 따"
"라가는 것보다 더 중요합니다."

msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godot의 내장 스크립트 에디터는 기본적으로 이러한 규칙을 많이 사용합니다. 에디"
"터가 여러분을 도울 수 있도록 하세요."

msgid "Here is a complete class example based on these guidelines:"
msgstr "이 가이드라인을 기반으로 한 전체 클래스 예제입니다:"

msgid "Formatting"
msgstr "서식(Formatting)"

msgid "Encoding and special characters"
msgstr "인코딩과 특수 문자"

msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr ""
"줄 바꿈을 위해 라인 피드 (**LF**) 문자를 사용합니다. CRLF나 CR은 사용하지 않"
"습니다 *(편집기 기본 설정)*"

msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""
"각 파일의 끝에 하나의 라인 피드 문자를 사용합니다. *(편집기 기본 설정)*"

msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"`바이트 순서 표식 <https://ko.wikipedia.org/wiki/"
"%EB%B0%94%EC%9D%B4%ED%8A%B8_%EC%88%9C%EC%84%9C_%ED%91%9C%EC%8B%9D>`_ 없이 "
"**UTF-8** 인코딩을 사용합니다. *(편집기 기본 설정)*"

msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""
"들여쓰기로 스페이스바 대신 **Tab(탭)** 키를 사용합니다. *(편집기 기본 설정)*"

msgid "Indentation"
msgstr "들여쓰기"

msgid "Each indent level should be one greater than the block containing it."
msgstr "들여쓰기 너비는 블록 바깥보다 한 칸 더 커야 됩니다."

msgid "**Good**:"
msgstr "**좋음**:"

msgid "**Bad**:"
msgstr "**나쁨**:"

msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr ""
"정규 코드 블록과 이어지는 줄을 구분하기 위해 2 칸 들여쓰기를 사용하세요."

msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr ""
"이 규칙의 예외는 배열, 딕셔너리, 열거형입니다. 연속되는 줄을 구분하려면 한 "
"칸 들여쓰기를 사용하세요:"

msgid "Trailing comma"
msgstr "쉼표 매달기(Trailing comma)"

msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""
"배열, 딕셔너리, 열거형의 마지막 줄에 쉼표 매달기를 사용하세요. 이렇게 하면 "
"새 요소를 추가해도 이전의 마지막 줄을 수정하지 않아도 되기 때문에 리팩토링하"
"기 쉽고 버전 컨트롤에서 비교가 더 잘 됩니다."

msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr ""
"쉼표 매달기는 한 줄 목록에는 불필요합니다. 따라서 이 경우는 사용하지 마세요."

msgid "Blank lines"
msgstr "공백 줄(Blank lines)"

msgid "Surround functions and class definitions with two blank lines:"
msgstr "함수와 클래스 정의를 두 개의 공백 줄로 묶습니다:"

msgid "Use one blank line inside functions to separate logical sections."
msgstr "로직 섹션을 분리하기 위해 함수 안에 하나의 공백 줄을 사용합니다."

msgid ""
"We use a single line between classes and function definitions in the class "
"reference and in short code snippets in this documentation."
msgstr ""

msgid "Line length"
msgstr "줄 길이"

msgid "Keep individual lines of code under 100 characters."
msgstr "코드 한 줄은 100 문자 이내로 유지합니다."

msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"가능하다면 80 문자 이내로 유지해보세요. 이렇게 하면 작은 화면에서도 코드를 읽"
"기 쉽고, 외부 텍스트 에디터에서 양쪽에 두 스크립트가 열려있는 화면에서도 읽"
"기 쉽습니다. 예를 들면 서로 다른 코드 개정판을 볼 때요."

msgid "One statement per line"
msgstr "한 줄에 하나의 명령문"

msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"한 줄에 여러 명령문을 묶지 마세요. C 프로그래머라면 한 줄에 조건문을 함께 사"
"용하지 마세요."

msgid "The only exception to that rule is the ternary operator:"
msgstr "유일한 예외라면 삼항(Ternary) 연산자일 것입니다:"

msgid "Format multiline statements for readability"
msgstr "가독성을 위해서 여러 줄로 명령문 형식 지정"

msgid ""
"When you have particularly long ``if`` statements or nested ternary "
"expressions, wrapping them over multiple lines improves readability. Since "
"continuation lines are still part of the same expression, 2 indent levels "
"should be used instead of one."
msgstr ""
"특히 긴 ``if`` 문이나 중첩된 삼항 표현식이 있는 경우 여러 줄로 감싸면 가독성"
"이 향상됩니다. 연속되는 줄은 여전히 동일한 표현식의 일부이므로 하나 대신 2개"
"의 들여쓰기 수준을 사용해야 합니다."

msgid ""
"GDScript allows wrapping statements using multiple lines using parentheses "
"or backslashes. Parentheses are favored in this style guide since they make "
"for easier refactoring. With backslashes, you have to ensure that the last "
"line never contains a backslash at the end. With parentheses, you don't have "
"to worry about the last line having a backslash at the end."
msgstr ""
"GDScript에서는 괄호나 백슬래시를 사용해 여러 줄을 사용하여 명령문을 줄 바꿈"
"할 수 있습니다. 괄호는 더 쉽게 리팩토링할 수 있도록 하기 때문에 이 스타일 가"
"이드에서 선호됩니다. 백슬래시를 사용하면 마지막 줄 끝에 백슬래시가 포함되지 "
"않도록 해야 합니다. 괄호를 사용하면 마지막 줄 끝에 백슬래시가 있는 것에 대해 "
"걱정할 필요가 없습니다."

msgid ""
"When wrapping a conditional expression over multiple lines, the ``and``/"
"``or`` keywords should be placed at the beginning of the line continuation, "
"not at the end of the previous line."
msgstr ""
"조건식을 여러 줄로 묶을 때 ``and``/``or`` 키워드는 이전 줄의 끝이 아니라 줄 "
"연속의 시작 부분에 배치해야 합니다."

msgid "Avoid unnecessary parentheses"
msgstr "불필요한 괄호 피하기"

msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations or wrapping over multiple lines, they only "
"reduce readability."
msgstr ""
"표현식과 조건문에서 괄호를 사용하지 마세요. 작업 순서나 여러 줄을 묶는 데에 "
"필요한 경우가 아니면 가독성만 떨어뜨립니다."

msgid "Boolean operators"
msgstr "불리언(Boolean) 연산자"

msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "가장 접근하기 쉬운 불리언 연산자의 영어 텍스트 버전을 선호합니다:"

msgid "Use ``and`` instead of ``&&``."
msgstr "``&&`` 대신 ``and``\\ 를 사용하세요."

msgid "Use ``or`` instead of ``||``."
msgstr "``||`` 대신 ``or``\\ 를 사용하세요."

msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"모호한 표현을 막고자 불리언 연산자 주변에 괄호를 사용하세요. 이렇게 하면 긴 "
"표현식도 읽기 쉬워집니다."

msgid "Comment spacing"
msgstr "주석(Comment) 간격"

msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"일반 주석은 공백으로 시작해야 하지만 주석을 달은 코드는 공백으로 시작하지 않"
"아야 합니다. 이렇게 하면 텍스트 주석을 비활성화된 코드와 구분하는 데 도움이 "
"됩니다."

msgid ""
"In the script editor, to toggle the selected code commented, press :kbd:"
"`Ctrl + K`. This feature adds a single # sign at the start of the selected "
"lines."
msgstr ""
"스크립트 에디터에서 주석 처리된 선택한 코드를 토글하려면 :kbd:`Ctrl + K`\\ "
"를 누르세요. 이 기능은 선택한 줄의 시작 부분에 하나의 # 기호를 추가합니다."

msgid "Whitespace"
msgstr "공백"

msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"항상 연산자 주위와 쉼표 뒤에는 한 칸을 띄어주세요. 또한 딕셔너리 참조 및 함"
"수 호출에 공백을 추가하지 마세요."

msgid "Don't use spaces to align expressions vertically:"
msgstr "표현식을 세로로 정렬하기 위해 공백을 사용하지 마세요:"

msgid "Quotes"
msgstr "따옴표"

msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"작은 따옴표로 주어진 문자열을 더 작은 문자 수로 이스케이프하게 만드는 것이 아"
"니라면 큰 따옴표를 사용하세요. 아래의 예제를 참고하세요:"

msgid "Numbers"
msgstr "숫자"

msgid ""
"Don't omit the leading or trailing zero in floating-point numbers. "
"Otherwise, this makes them less readable and harder to distinguish from "
"integers at a glance."
msgstr ""
"부동 소수점 숫자에서 앞뒤에 붙는 0을 생략하지 마세요. 그렇지 않으면 가독성이 "
"떨어지고 정수와 한눈에 구별하기 어려워집니다."

msgid "**Good**::"
msgstr "**좋음**:"

msgid "**Bad**::"
msgstr "**나쁨**:"

msgid ""
"Use lowercase for letters in hexadecimal numbers, as their lower height "
"makes the number easier to read."
msgstr ""
"16진수의 문자에는 소문자를 사용하세요. 알파벳 높이가 낮을수록 숫자를 더 읽기 "
"쉽게 하기 때문입니다."

msgid ""
"Take advantage of GDScript's underscores in literals to make large numbers "
"more readable."
msgstr "리터럴에서 GDScript의 밑줄을 활용해 큰 숫자를 더 읽기 쉽게 만드세요."

msgid "Naming conventions"
msgstr "명명 규칙"

msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"이러한 명명 규칙은 Godot 엔진 스타일을 따릅니다. 이 규칙을 깨면 코드가 기본 "
"제공 명명 규칙과 충돌해서 일관되지 않게 됩니다."

msgid "File names"
msgstr "파일 이름"

msgid ""
"Use snake_case for file names. For named classes, convert the PascalCase "
"class name to snake_case::"
msgstr ""
"파일 이름으로 스네이크\\_표기법(snake\\_case)을 사용하세요. 명명된 클래스의 "
"경우 파스칼 표기(PascalCase)된 클래스 이름을 스네이크\\_표기(snake\\_case)로 "
"변환하세요::"

msgid ""
"This is consistent with how C++ files are named in Godot's source code. This "
"also avoids case sensitivity issues that can crop up when exporting a "
"project from Windows to other platforms."
msgstr ""
"이는 Godot의 소스 코드에서 C++ 파일의 이름이 어떻게 지정되는지와 일치합니다. "
"이는 또한 Windows에서 다른 플랫폼으로 프로젝트를 내보낼 때 발생할 수 있는 대"
"소문자 구분 문제를 방지합니다."

msgid "Classes and nodes"
msgstr "클래스와 노드"

msgid "Use PascalCase for class and node names:"
msgstr "클래스와 노드 이름에는 파스칼 표기법(PascalCase)을 사용하세요:"

msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr ""
"그리고 상수 또는 변수로 클래스를 불러올 때도 파스칼 표기법(PascalCase)을 사용"
"하세요:"

msgid "Functions and variables"
msgstr "함수와 변수"

msgid "Use snake\\_case to name functions and variables:"
msgstr "함수와 변수 이름에는 스네이크\\_표기법(snake\\_case)을 사용하세요:"

msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"사용자가 재정의해야 하는 가상 메서드 함수, private 함수, private 변수 앞에 밑"
"줄(\\_) 하나를 추가하세요:"

msgid "Signals"
msgstr "신호"

msgid "Use the past tense to name signals:"
msgstr "시그널의 이름에는 과거형을 사용하세요:"

msgid "Constants and enums"
msgstr "상수(Constant)와 열거형(enum)"

msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr ""
"상수\\_표기법(CONSTANT\\_CASE)으로 상수를 작성하세요. 다시 말해, 모든 단어는 "
"대문자로 하고 띄어쓰기 대신 밑줄 (\\_)을 사용하세요:"

msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"열거형 *이름*\\ 에는 파스칼 표기법(PascalCase)을 사용하고, 열거형의 멤버에는 "
"상수와 마찬가지로 상수\\_표기법(CONSTANT\\_CASE)을 사용하세요:"

msgid "Code order"
msgstr "코드 순서"

msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"이 섹션에서는 코드 순서에 중점을 둡니다. 서식은 :ref:`formatting`\\ 을 참고하"
"세요. 명명 규칙의 경우 :ref:`naming_conventions`\\ 를 참고하세요."

msgid "We suggest to organize GDScript code this way:"
msgstr "제안하는 GDScript 코드 구조는 다음과 같습니다:"

msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"코드를 위에서 아래로 쉽게 읽을 수 있도록 순서를 최적화했으며, 코드를 처음 읽"
"는 개발자가 어떻게 작동하는지 이해하고 변수 선언 순서와 관련된 오류를 방지할 "
"수 있습니다."

msgid "This code order follows four rules of thumb:"
msgstr "이 코드 순서는 네 가지 규칙을 따릅니다:"

msgid "Properties and signals come first, followed by methods."
msgstr "속성과 시그널이 첫 번째로 옵니다. 그 뒤는 메서드가 나옵니다."

msgid "Public comes before private."
msgstr "공개(Public) 코드가 개인(Private) 코드보다 먼저 옵니다."

msgid "Virtual callbacks come before the class's interface."
msgstr ""
"가상 콜백(Virtual Callback)이 클래스의 인터페이스(Class's Interface)보다 먼"
"저 옵니다."

msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"오브젝트의 생성 및 초기화 함수인 ``_init``\\ 과 ``_ready``\\ 는 런타임에서 오"
"브젝트를 수정하는 함수보다 먼저 옵니다."

msgid "Class declaration"
msgstr "클래스 선언(Declaration)"

msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr ""
"코드가 에디터에서 실행되게 하려면 스크립트의 첫 번째 줄에 ``tool`` 키워드를 "
"배치하세요."

msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""
"`class_name`\\ 이 있다면 바로 아래에 배치하세요. tool 기능을 사용하면 "
"GDScript를 프로젝트의 전역 타입으로 바꿀 수 있습니다. 자세한 설명은 :ref:"
"`doc_gdscript`\\ 를 참고하세요."

msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr ""
"다음으로, 클래스가 내장 타입을 확장(extend)하고 있다면 `extends` 키워드를 추"
"가하세요."

msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""
"그 다음에는 클래스에 대한 별개의 문서(docstring)를 주석으로 넣어야 합니다. 이"
"를 사용하면 예를 들어, 팀원에게 클래스의 역할과 작동 방식을 설명하고, 다른 개"
"발자가 클래스를 어떻게 사용해야 하는지를 설명할 수 있습니다."

msgid "Signals and properties"
msgstr "시그널(Signal)과 속성(Property)"

msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr ""
"Docstring이 끝나면 시그널 선언을 작성한 뒤에 속성, 즉 멤버 변수를 작성합니다."

msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr ""
"열거형(Enum)은 시그널 뒤에 나와야 합니다. 다른 속성의 내보내기 힌트로 사용할 "
"수 있기 때문이죠."

msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr ""
"그런 다음, 상수(Constant), 내보낸 변수, 공개(Public), 개인(Private), onready "
"변수를 순서대로 작성하세요."

msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""
"GDScript 컴파일러는 onready 변수를 ``_ready`` 콜백 바로 이전에 실행합니다. 이"
"를 사용해 노드 종속성을 캐싱할 수 있습니다. 즉, 클래스가 의존하는 씬에서 자"
"식 노드를 가져올 수 있습니다. 위의 예제에서 이를 보여줍니다."

msgid "Member variables"
msgstr "멤버 변수"

msgid ""
"Don't declare member variables if they are only used locally in a method, as "
"it makes the code more difficult to follow. Instead, declare them as local "
"variables in the method's body."
msgstr ""
"메서드에서 지역적으로만 사용되는 경우 멤버 변수를 선언하지 마세요. 코드를 따"
"라가기 더 어렵게 만들기 때문입니다. 대신 메서드 본문에서 지역 변수로 선언하세"
"요."

msgid "Local variables"
msgstr "지역 변수(Local Variables)"

msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""
"지역 변수를 처음 사용할 때와 최대한 가깝게 선언하세요. 이렇게 하면 변수가 선"
"언된 위치를 찾기 위해 너무 많이 스크롤하지 않고도 코드를 더 쉽게 따라갈 수 있"
"습니다."

msgid "Methods and static functions"
msgstr "메서드(Method)와 정적(Static) 함수"

msgid "After the class's properties come the methods."
msgstr "클래스 속성 뒤에는 메서드가 옵니다."

msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""
"엔진이 메모리에 오브젝트를 생성할 때 호출하는 ``_init()`` 콜백 메서드로 시작"
"하세요. 그 뒤로 Godot가 씬 트리에 노드를 추가할 때 호출하는 ``_ready()`` 콜백"
"이 옵니다."

msgid ""
"These functions should come first because they show how the object is "
"initialized."
msgstr ""
"이러 함수들은 오브젝트가 초기화되는 방법을 보여주기 때문에 먼저 와야 합니다."

msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""
"``_unhandled_input()``, ``_physics_process``\\ 와 같은 다른 내장된 가상 콜백"
"은 다음에 와야 합니다. 이 메서드들은 오브젝트의 메인 루프와 게임 엔진과의 상"
"호작용을 제어합니다."

msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr ""
"이 다음은 순서에 따라 클래스 인터페이스의 나머지인 공개 메서드와 개인 메서드"
"가 옵니다."

msgid "Static typing"
msgstr "정적 타이핑(Static Typing)"

msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"Godot 3.1부터, GDScript는 :ref:`선택적 정적 타이핑"
"<doc_gdscript_static_typing>`\\ 을 지원합니다."

msgid "Declared types"
msgstr "선언된 타입"

msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr "변수의 타입을 선언하려면 ``<variable>: <type>``\\ 을 사용하세요:"

msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr "함수의 반환 타입을 선언하려면 ``-> <type>``\\ 을 사용하세요:"

msgid "Inferred types"
msgstr "추론된 타입"

msgid "In most cases you can let the compiler infer the type, using ``:=``:"
msgstr ""
"대부분의 경우 ``:=``\\ 를 사용해 컴파일러가 타입을 추론하도록 할 수 있습니다:"

msgid ""
"However, in a few cases when context is missing, the compiler falls back to "
"the function's return type. For example, ``get_node()`` cannot infer a type "
"unless the scene or file of the node is loaded in memory. In this case, you "
"should set the type explicitly."
msgstr ""
"그러나 컨텍스트가 누락된 경우 컴파일러는 함수의 반환 타입으로 폴백(fall back)"
"합니다. 예를 들어 ``get_node()``\\ 는 노드의 씬이나 파일이 메모리에 로드되지 "
"않는 한 타입을 유추할 수 없습니다. 이 경우 타입을 명시적으로 설정해야 합니다."

msgid ""
"Alternatively, you can use the ``as`` keyword to cast the return type, and "
"that type will be used to infer the type of the var."
msgstr ""
"또는 ``as`` 키워드를 사용해 반환 타입을 캐스팅할 수 있으며, 해당 타입은 var"
"의 타입을 추론하는 데 사용됩니다."

msgid ""
"This option is also considered more :ref:`type-"
"safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""
"이 방법은 첫 번째 방법보다 더 :ref:`타입에 안전한"
"<doc_gdscript_static_typing_safe_lines>`\\ 것으로 간주됩니다."

msgid "Translation status"
msgstr "번역 상태"
