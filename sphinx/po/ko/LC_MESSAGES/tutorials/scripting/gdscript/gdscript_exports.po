# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript exports"
msgstr "GDScript 내보내기"

msgid "Introduction to exports"
msgstr "내보내기 소개"

msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""
"Godot에서 클래스 멤버는 내보낼 수 있습니다. 즉, 멤버의 값은 (:ref:`씬 "
"<class_PackedScene>`\\ 처럼) 붙어있는 리소스와 함께 저장됩니다. 그리고 속성"
"(Property) 편집기에서 편집할 수 있습니다. 내보내려면 ``export`` 키워드를 사용"
"합니다::"

msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the ``export`` keyword (see the "
"*Examples* section below)."
msgstr ""
"내보낸 변수는 상수 표현식으로 초기화되거나 ``export`` 키워드에 대한 인수 형식"
"의 내보내기 힌트가 있어야 합니다(아래 *예제* 섹션을 참고하세요)."

msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"멤버 변수 내보내기의 기본적인 장점 중 하나는 에디터에서 멤버 변수를 보고 편집"
"할 수 있다는 점입니다. 이런 식으로 아티스트와 게임 디자이너는 나중에 프로그"
"램 실행 방식에 영향을 주는 값을 수정할 수 있습니다. 이를 위해 특별한 내보내"
"기 구문이 제공됩니다."

#, fuzzy
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language."
msgstr ""
"속성 내보내기는 C#과 같은 다른 언어에서도 가능합니다. 구문은 언어에 따라 다릅"
"니다. C# 내보내기에 대한 정보는 :ref:`doc_c_sharp_exports`\\ 를 참고하세요."

msgid "Examples"
msgstr "예제"

msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"에디터에서 스크립트가 실행되지 않더라도 내보낸 속성은 계속 편집할 수 있습니"
"다. 속성은 :ref:`\"툴(Tool)\" 모드 <doc_gdscript_tool_mode>`\\ 의 스크립트와 "
"함께 사용할 수 있습니다."

msgid "Exporting bit flags"
msgstr "비트 플래그(bit flags) 내보내기"

msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS, ...``, they "
"can be set from the editor::"
msgstr ""
"비트 플래그로 사용되는 정수는 하나의 속성에 여러 ``true``/``false``\\ (불리"
"언) 값을 저장할 수 있습니다. 다음과 같이 내보내기 힌트 ``int, FLAGS, ...``\\ "
"를 사용해 에디터에서 설정할 수 있습니다::"

msgid ""
"You must provide a string description for each flag. In this example, "
"``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and "
"``Wind`` corresponds to value 8. Usually, constants should be defined "
"accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"각 플래그에 대한 문자열 설명을 제공해야 합니다. 이 예제에서 ``Fire``\\ 는 값 "
"1, ``Water``\\ 는 값 2, ``Earth``\\ 는 값 4, ``Wind``\\ 는 값 8에 해당합니"
"다. 일반적으로 상수는 이에 따라 정의되어야 합니다(예: ``const ELEMENT_WIND = "
"8`` 등등)."

msgid ""
"Export hints are also provided for the physics and render layers defined in "
"the project settings::"
msgstr ""
"프로젝트 설정에 정의된 물리 및 렌더 레이어에 대한 내보내기 힌트도 제공됩니"
"다::"

msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, use boolean variables instead."
msgstr ""
"비트 플래그를 사용하려면 비트 연산에 대한 이해가 필요합니다. 확실하지 않은 경"
"우 대신 boolean 변수를 사용하세요."

msgid "Exporting arrays"
msgstr "배열 내보내기"

msgid ""
"Exported arrays can have initializers, but they must be constant expressions."
msgstr "내보낸 배열에 초기화 변수를 할당할 수 있지만 상수 표현식이어야 합니다."

msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""
"내보낸 배열이 Resource를 상속받는 타입을 지정하는 경우 파일시스템"
"(FileSystem) 독에서 여러 파일을 한 번에 끌어다 놓으면 인스펙터(Inspector)에"
"서 배열 값을 설정할 수 있습니다."

msgid "Setting exported variables from a tool script"
msgstr "툴 스크립트에서 내보낸 변수 설정"

msgid ""
"When changing an exported variable's value from a script in :ref:"
"`doc_gdscript_tool_mode`, the value in the inspector won't be updated "
"automatically. To update it, call :ref:`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` after setting the "
"exported variable's value."
msgstr ""
":ref:`doc_gdscript_tool_mode` 스크립트에서 내보낸 변수의 값을 변경할 때 인스"
"펙터(Inspector)의 값은 자동으로 업데이트되지 않습니다. 업데이트하려면 내보낸 "
"변수의 값을 설정한 후 :ref:`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>`\\ 를 호출하세요."

msgid "Advanced exports"
msgstr "고급 내보내기"

msgid ""
"Not every type of export can be provided on the level of the language itself "
"to avoid unnecessary design complexity. The following describes some more or "
"less common exporting features which can be implemented with a low-level API."
msgstr ""
"불필요한 디자인 복잡성을 피하기 위해 모든 타입의 내보내기를 언어 자체 수준에"
"서 제공할 수 있는 것은 아닙니다. 다음은 로우 레벨 API로 구현할 수 있는 다소 "
"일반적인 내보내기 기능에 대해 설명합니다."

msgid ""
"Before reading further, you should get familiar with the way properties are "
"handled and how they can be customized with :ref:`_set() "
"<class_Object_method__get_property_list>`, :ref:`_get() "
"<class_Object_method__get_property_list>`, and :ref:`_get_property_list() "
"<class_Object_method__get_property_list>` methods as described in :ref:"
"`doc_accessing_data_or_logic_from_object`."
msgstr ""
"더 읽기 전에 속성이 처리되는 방식과 :ref:"
"`doc_accessing_data_or_logic_from_object`에 설명된 대로 :ref:`_set() "
"<class_Object_method__get_property_list>`, :ref:`_get() "
"<class_Object_method__get_property_list>`, :ref:`_get_property_list() "
"<class_Object_method__get_property_list>` 메서드를 동해 속성을 커스텀하는 방"
"법에 대해 알고 있어야 합니다."

msgid ""
"For binding properties using the above methods in C++, see :ref:"
"`doc_binding_properties_using_set_get_property_list`."
msgstr ""
"C++에서 위의 방법을 사용해 속성을 바인딩하려면 :ref:"
"`doc_binding_properties_using_set_get_property_list`\\ 를 참고하세요."

msgid ""
"The script must operate in the ``tool`` mode so the above methods can work "
"from within the editor."
msgstr ""
"위의 방법이 에디터 안에서 작동할 수 있도록 스크립트는 ``툴(tool)`` 모드에서 "
"작동해야 합니다."

#, fuzzy
msgid "Properties"
msgstr "속성"

msgid ""
"To understand how to better use the sections below, you should understand "
"how to make properties with advanced exports."
msgstr ""

msgid ""
"The ``_get_property_list()`` function gets called by the inspector. You can "
"override it for more advanced exports. You must return an ``Array`` with the "
"contents of the properties for the function to work."
msgstr ""

#, fuzzy
msgid "``name`` is the name of the property"
msgstr "``name``\\ 은 인스펙터(Inspector)에 추가할 카테고리의 이름입니다."

msgid "``type`` is the type of the property from ``Variant.Type``."
msgstr ""

msgid ""
"The ``float`` type is called a real (``TYPE_REAL``) in the ``Variant.Type`` "
"enum."
msgstr ""

#, fuzzy
msgid "Attaching variables to properties"
msgstr "지역 변수나 속성을 접근:"

msgid ""
"To attach variables to properties (allowing the value of the property to be "
"used in scripts), you need to create a variable with the exact same name as "
"the property or else you may need to override the :ref:`_set() "
"<class_Object_method__get_property_list>` and :ref:`_get() "
"<class_Object_method__get_property_list>` methods. Attaching a variable to "
"to a property also gives you the ability to give it a default state. ::"
msgstr ""

#, fuzzy
msgid "Adding default values for properties"
msgstr "지역 변수나 속성을 접근:"

msgid ""
"To define default values for advanced exports, you need to override the "
"``property_can_revert()`` and ``property_get_revert()`` methods."
msgstr ""

msgid ""
"The ``property_can_revert()`` method takes the name of a property and must "
"return ``true`` if the property can be reverted. This will enable the Revert "
"button next to the property in the inspector."
msgstr ""

msgid ""
"The ``property_get_revert()`` method takes the name of a property and must "
"return the default value for that property."
msgstr ""

msgid "Adding script categories"
msgstr "스크립트 카테고리 추가"

#, fuzzy
msgid ""
"For better visual distinguishing of properties, a special script category "
"can be embedded into the inspector to act as a separator. ``Script "
"Variables`` is one example of a built-in category. ::"
msgstr ""
"속성을 시각적으로 더 잘 구별하기 위해 특수한 스크립트 카테고리를 인스펙터"
"(Inspector)에 삽입해서 구분자 역할을 할 수 있습니다. ``스크립트 변수(Script "
"Variables)``\\ 는 기본 제공 카테고리의 한 예시입니다."

msgid "``name`` is the name of a category to be added to the inspector;"
msgstr "``name``\\ 은 인스펙터(Inspector)에 추가할 카테고리의 이름입니다."

msgid ""
"Every following property added after the category definition will be a part "
"of the category."
msgstr ""

msgid ""
"``PROPERTY_USAGE_CATEGORY`` indicates that the property should be treated as "
"a script category specifically, so the type ``TYPE_NIL`` can be ignored as "
"it won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""
"``PROPERTY_USAGE_CATEGORY``\\ 는 속성을 스크립트 카테고리로 구체적으로 처리해"
"야 함을 명시하므로 실제로 스크립팅 로직에 사용되지 않는 ``TYPE_NIL`` 타입은 "
"무시할 수 있지만 어쨌든 정의해야 합니다."

msgid "Grouping properties"
msgstr "속성 그루핑(Grouping)"

#, fuzzy
msgid "A list of properties with similar names can be grouped. ::"
msgstr "유사한 이름을 가진 속성 목록을 그룹화할 수 있습니다."

msgid ""
"``name`` is the name of a group which is going to be displayed as "
"collapsible list of properties;"
msgstr "``name``\\ 은 축소 가능한 속성 목록으로 표시될 그룹의 이름입니다."

#, fuzzy
msgid ""
"Every following property added after the group property with the prefix "
"(which determined by ``hint_string``) will be shortened. For instance, "
"``rotate_speed`` is going to be shortened to ``speed`` in this case. "
"However, ``movement_speed`` won't be a part of the group and will not be "
"shortened."
msgstr ""
"그룹 속성 뒤에 추가되는 모든 연속(successive) 속성은 ``hint_string`` 키를 통"
"해 정의된 접두사에 따라 축소되고 단축됩니다. 예를 들어 위의 경우 "
"``rotate_speed``\\ 는 ``speed``\\ 로 단축됩니다."

msgid ""
"``PROPERTY_USAGE_GROUP`` indicates that the property should be treated as a "
"script group specifically, so the type ``TYPE_NIL`` can be ignored as it "
"won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""
"``PROPERTY_USAGE_GROUP``\\ 은 속성이 특히 스크립트 그룹으로 처리되어야 함을 "
"나타냅니다. 따라서 ``TYPE_NIL`` 타입은 실제로 스크립팅 로직에 사용되지 않기 "
"때문에 무시할 수 있지만 어쨌든 정의해야 합니다."

msgid "Translation status"
msgstr "번역 상태"
