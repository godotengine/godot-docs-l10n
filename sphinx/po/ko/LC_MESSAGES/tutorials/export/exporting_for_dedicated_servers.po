# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Exporting for dedicated servers"
msgstr "데디케이티드 서버로 내보내기"

msgid ""
"If you want to run a dedicated server for your project on a machine that "
"doesn't have a GPU or display server available, you'll need to use a server "
"build of Godot."
msgstr ""
"GPU 혹은 디스플레이 서버가 없는 기기에서 데디케이티드 서버를 동작시키려면 "
"Godot의 서버 빌드 기능을 사용해야 합니다."

msgid "Platform support"
msgstr "플랫폼 지원"

msgid ""
"**Linux:** `Download an official Linux server binary <https://godotengine."
"org/download/server>`__. To compile a server binary from source, follow "
"instructions in :ref:`doc_compiling_for_x11`."
msgstr ""
"**Linux:** 서버 이진 파일을 직접 컴파일 하려면 `Linux 공식 서버 이진 파일을 "
"다운로드 <https://godotengine.org/download/server>`__ 하십시오. 다음 설명을 "
"따라 진행하십시오 :ref:`doc_compiling_for_x11`."

msgid ""
"**macOS:** :ref:`Compile a server binary from source for macOS "
"<doc_compiling_for_osx>`."
msgstr ""
"**macOS:** :ref:`macOS 서버 이진 파일을 소스에서 컴파일하기 "
"<doc_compiling_for_osx>`."

msgid ""
"**Windows:** There is no dedicated server build for Windows yet. As an "
"alternative, you can use the ``--no-window`` command-line argument to "
"prevent Godot from spawning a window. Note that even with the ``--no-"
"window`` command-line argument, you'll need to have OpenGL support available "
"on the Windows machine."
msgstr ""
"**Windows:** 아직까지는 Windows용 데디케이티드 서버 빌드가 존재하지 않습니"
"다. 대신 ``--no-window`` 커맨드라인 인자로 Godot이 창을 띄우는 것을 방지할 "
"수 있습니다. 하지만 ``--no-window`` 인자를 사용하더라도 Windows 머신이 OpenGL"
"을 지원해야 합니다."

msgid ""
"If your project uses C#, you'll have to use a Mono-enabled server binary."
msgstr "프로젝트가 C#을 사용한다면 Mono용 서버 이진 파일을 사용해야 합니다."

msgid "\"Headless\" versus \"server\" binaries"
msgstr "\"Headless\" 와 \"server\" 이진 파일 비교"

msgid ""
"The `server download page <https://godotengine.org/download/server>`__ "
"offers two kinds of binaries with several differences."
msgstr ""
"The `서버 다운로드 페이지 <https://godotengine.org/download/server>`__ 는 여"
"러 차이점이 있는 두 가지 바이너리 파일을 지원합니다."

msgid ""
"**Server:** Use this one for running dedicated servers. It does not contain "
"editor functionality, and is therefore smaller and more optimized."
msgstr ""
"**Server:** 데디케이티드 서버를 구축할 때 사용하십시오. 에디터 기능이 없기 때"
"문에 용량이 작고 최적화가 더 잘 되어 있습니다."

msgid ""
"**Headless:** This binary contains editor functionality and is intended to "
"be used for exporting projects. This binary *can* be used to run dedicated "
"servers, but it's not recommended as it's larger and less optimized."
msgstr ""
"**Headless:** 이 이진 파일은 에디터 기능을 포함하며 프로젝트를 내보낼 때 사용"
"하도록 만들어졌습니다. 이 이진 파일도 데디케이티드 서버를 구축하는 것이 *가능"
"은 하지만* 용량이 크고 최적화가 잘 되어있지 않기 때문에 권장되지 않습니다."

msgid "Exporting a PCK file"
msgstr "PCK 파일 내보내기"

msgid "There are two ways to export a project for a server:"
msgstr "서버로 프로젝트를 내보낼 수 있는 방법이 두 가지 있습니다:"

msgid ""
"Create a Linux/X11 export preset, define a custom Release export template "
"that points to the server binary then export the project as usual."
msgstr ""
"Linux/X11 내보내기 프리셋을 생성한 후 서버 이진 파일을 가리키는 커스팀 릴리"
"스 내보내기 템플릿을 정의해 평상시처럼 프로젝트를 내보내는 방법."

msgid "Export a PCK file only, preferably from a Linux/X11 export preset."
msgstr "Linux/X11 내보내기 프리셋 등으로 PCK 파일만을 내보내는 법."

msgid ""
"Both methods should result in identical output. The text below describes the "
"PCK file approach."
msgstr ""
"두 가지 방법의 결과는 동일합니다. 하단의 텍스트는 PCK 파일을 내보내는 방법에 "
"대해 설명합니다."

msgid ""
"Once you've downloaded a server binary, you should export a PCK file "
"containing your project data. After creating the export preset, click "
"**Export PCK/ZIP** at the bottom of the Export dialog then choose a "
"destination path. The **Export With Debug** checkbox in the file dialog has "
"no bearing on the final PCK file, so you can leave it as-is."
msgstr ""
"서버 이진 파일을 다운로드 했다면 프로젝트 데이터를 가진 PCK 파일을 내보냅니"
"다. 내보내기 프리셋을 생성한 뒤 내보내기 창 하단의 **Export PCK/ZIP** 을 클릭"
"해 내보낼 경로를 설정하면 됩니다. 파일 창의 **Export With Debug** 체크박스는 "
"PCK 파일과 관련이 없으므로 그냥 놔두셔도 됩니다."

msgid "See :ref:`doc_exporting_projects` for more information."
msgstr "자세한 설명은 :ref:`doc_exporting_projects` 를 참고하세요."

msgid ""
"If you're exporting the project from a headless editor, call the headless "
"editor with the `--export-pack` option while in the project folder to export "
"only a PCK file."
msgstr ""
"프로젝트를 headless 에디터에서 내보낸다면 프로젝트 폴더에서 headless 에디터"
"를 `--export-pack` 옵션으로 호출해 PCK 파일만을 내보낼 수 있습니다."

msgid ""
"The PCK file will include resources not normally needed by the server, such "
"as textures and sounds. This means the PCK file will be larger than it could "
"possibly be. Support for stripping unneeded resources from a PCK for server "
"usage is planned in a future Godot release."
msgstr ""
"PCK 파일은 텍스처나 음향 파일처럼 통상적인 경우 서버에 필요하지 않은 리소스"
"도 포함하고 있으므로 PCK 파일의 용량이 불필요하게 커집니다. PCK 파일에서 서버"
"에서 불필요한 자원을 제외해주는 기능이 이후의 Godot 릴리스에 계획되어 있습니"
"다."

msgid ""
"On the bright side, this allows the same PCK file to be used both by a "
"client and dedicated server build. This can be useful if you want to ship a "
"single archive that can be used both as a client and dedicated server."
msgstr ""
"그래도 좋은 점을 찾아보자면 데디케이티드 서버 빌드와 클라이언트가 동일한 PCK "
"파일을 사용할 수 있다는 점입니다. 서버와 클라이언트 모두로 사용이 가능한 단"
"일 아카이브가 필요하다면 유용한 점입니다."

msgid "Preparing the server distribution"
msgstr "서버 배포 준비하기"

msgid ""
"After downloading or compiling a server binary, you should now place it in "
"the same folder as the PCK file you've exported. The server binary should "
"have the same name as the PCK (excluding the extension). This lets Godot "
"detect and use the PCK file automatically. If you want to start a server "
"with a PCK that has a different name, you can specify the path to the PCK "
"file using the ``--main-pack`` command-line argument::"
msgstr ""
"서버 이진 파일을 다운로드 한 이후 내보낸 PCK 파일과 동일한 폴더에 저장하십시"
"오. 서버 이진 파일은 Godot이 자동으로 PCK 파일을 찾을 수 있도록 PCK 파일과 동"
"일한 이름을 가져야 합니다(확장자는 제외). 만약 서버와 PCK 파일의 이름을 다르"
"게 지정하고 싶다면 다음과 같이 ``--main-pack`` 커맨드라인 인자로 PCK 파일의 "
"경로를 지정해줄 수 있습니다::"

msgid "Starting the dedicated server"
msgstr "데디케이티드 서버 구동시키기"

msgid ""
"If both your client and server are part of the same Godot project, you will "
"have to add a way to start the server directly using a command-line "
"argument. This can be done by adding the following code snippet in your main "
"scene (or a singleton)'s ``_ready()`` method::"
msgstr ""
"클라이언트와 서버가 모두 동일한 Godot 프로젝트의 일부라면 커맨드라인 인자로 "
"서버를 직접 구동시킬 수 있는 방법을 추가해야 합니다. 메인 씬(혹은 싱글턴)의 "
"``_ready()`` 메서드에 아래의 코드 스니펫을 추가하면 됩니다:"

msgid ""
"Alternatively, you can make the dedicated server always start up if a "
"headless or server binary is detected::"
msgstr ""
"다른 방법으로는 아래와 같이 headless 또는 서버 이진 파일이 감지되면 데디케이"
"티드 서버가 구동되도록 만들 수도 있습니다::"

msgid ""
"If your client and server are separate Godot projects, your server should "
"most likely be configured in a way where running the main scene starts a "
"server automatically."
msgstr ""
"만약 클라이언트와 서버가 별개의 Godot 프로젝트라면 일반적으로 메인 씬을 실행"
"하면 서버가 자동으로 구동되도록 구성하는 것이 좋습니다."

msgid "Next steps"
msgstr "고급 단계"

msgid ""
"On Linux, to make your dedicated server restart after a crash or system "
"reboot, you can `create a systemd service <https://medium.com/@benmorel/"
"creating-a-linux-service-with-systemd-611b5c8b91d6>`__. This also lets you "
"view server logs in a more convenient fashion, with automatic log rotation "
"provided by systemd."
msgstr ""
"Linux에서 시스템 오류 및 재부팅 이후 데디케이티드 서버가 자동으로 재시작되도"
"록 하려면 `systemd service <https://medium.com/@benmorel/creating-a-linux-"
"service-with-systemd-611b5c8b91d6>`__ 를 생성하면 됩니다. 이렇게 하면 systemd"
"가 automatic log rotation을 지원하므로 서버 로그를 더 편하게 확인할 수 있습니"
"다."

msgid ""
"If you have experience with containers, you could also look into wrapping "
"your dedicated server in a `Docker <https://www.docker.com/>`__ container. "
"This way, it can be used more easily in an automatic scaling setup (which is "
"outside the scope of this tutorial)."
msgstr ""
"만약 컨테이너를 다뤄본 경험이 있다면 데디케이티드 서버를`Docker <https://www."
"docker.com/>`__ 로 래핑하는 것 역시 고려해보십시오. 이렇게 하면 자동 스케일 "
"조절시 더 간편해집니다(튜토리얼 주제를 벗어나는 내용입니다)."

msgid "Translation status"
msgstr "번역 상태"
