# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D meshes"
msgstr "2D 메시"

msgid "Introduction"
msgstr "소개"

#, fuzzy
msgid ""
"In 3D, meshes are used to display the world. In 2D, they are rare as images "
"are used more often. Godot's 2D engine is a pure two-dimensional engine, so "
"it can't really display 3D meshes directly (although it can be done via "
"``Viewport`` and ``ViewportTexture``)."
msgstr ""
"3D에서 메시는 세계를 보여주기 위해 사용됩니다. 2D에서는 이미지가 자주 사용되"
"기 때문에 희귀합니다. Godot의 2D 엔진은 순수한 2차원 엔진이기 때문에 직접적으"
"로 3D 메시를 실제로 보여줄 수는 없습니다(``Viewport`` 와 ``ViewportTexture`` "
"를 통해 할 수 있지만)."

msgid ""
"If you are interested in displaying 3D meshes on a 2D viewport, see the :ref:"
"`doc_viewport_as_texture` tutorial."
msgstr ""
"만약 3D 메시를 2D 뷰포트에 보여주고 싶은 경우 :ref:`doc_viewport_as_texture` "
"튜토리얼을 참고하세요."

msgid ""
"2D meshes are meshes that contain two-dimensional geometry (Z can be omitted "
"or ignored) instead of 3D. You can experiment creating them yourself using "
"``SurfaceTool`` from code and displaying them in a ``MeshInstance2D`` node."
msgstr ""

msgid ""
"Currently, the only way to generate a 2D mesh within the editor is by either "
"importing an OBJ file as a mesh, or converting it from a Sprite."
msgstr ""

msgid "Optimizing pixels drawn"
msgstr ""

msgid ""
"This workflow is useful for optimizing 2D drawing in some situations. When "
"drawing large images with transparency, Godot will draw the whole quad to "
"the screen. The large transparent areas will still be drawn."
msgstr ""

msgid ""
"This can affect performance, especially on mobile devices, when drawing very "
"large images (generally screen sized), or layering multiple images on top of "
"each other with large transparent areas (for example, when using "
"``ParallaxBackground``)."
msgstr ""

msgid ""
"Converting to a mesh will ensure that only the opaque parts will be drawn "
"and the rest will be ignored."
msgstr ""

msgid "Converting Sprites to 2D meshes"
msgstr "스프라이트를 2D 메시로 변환하기"

msgid ""
"You can take advantage of this optimization by converting a ``Sprite`` to a "
"``MeshInstance2D``. Start with an image that contains large amounts of "
"transparency on the edges, like this tree:"
msgstr ""

#, fuzzy
msgid "Put it in a ``Sprite`` and select \"Convert to 2D Mesh\" from the menu:"
msgstr "``Sprite`` 에 넣고 메뉴에서 \"Convert to 2D Mesh\" 를 선택하세요"

msgid ""
"A dialog will appear, showing a preview of how the 2D mesh will be created:"
msgstr ""
"2D 메시가 어떻게 생성될 지에 대한 미리보기를 보여주는 대화 상자가 나타날 겁니"
"다:"

#, fuzzy
msgid ""
"The default values are good enough for many cases, but you can change growth "
"and simplification according to your needs:"
msgstr ""
"기본값은 많은 경우에 충분하지만 필요에 따라 성장(growth)과 단순화"
"(simplification)를 변경할 수 있습니다."

msgid ""
"Finally, push the ``Convert 2D Mesh`` button and your Sprite will be "
"replaced:"
msgstr "마지막으로 ``Convert 2D Mesh`` 버튼을 누르면 스프라이트가 교체됩니다:"

msgid "Translation status"
msgstr "번역 상태"
