# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Canvas layers"
msgstr ""

msgid "Viewport and Canvas items"
msgstr ""

#, fuzzy
msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""
":ref:`Node2D <class_Node2D>` 또는 :ref:`Control <class_Control>` 와 같은 2D "
"노드는 모든 2D 노드의 기초가 되는 :ref:`CanvasItem <class_CanvasItem>` 로부"
"터 상속됩니다. CanvasItems은 트리 형태로 배열될 수 있고 변형을 상속받게 됩니"
"다. 이는 부모를 옮길 때 자손들도 함께 움직이는 것을 의미합니다."

#, fuzzy
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that display them."
msgstr ""
"이러한 노드는 뷰포트의 간접 또는 직접적인 자손으로 배치되고 이를 통해 보여집"
"니다."

#, fuzzy
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a custom :ref:"
"`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy it "
"contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"뷰포트는 :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>` 속성을 가지는데 사용자 정의 :ref:"
"`Transform2D <class_Transform2D>` 변형을 통해 모든 CanvasItem 계층을 변형할 "
"수 있습니다. :ref:`Camera2D <class_Camera2D>`와 같은 노드는 이 변형을 바꾸는 "
"것에 의해 작동됩니다."

msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""

#, fuzzy
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"그러나 일반적으로 게임이나 애플리케이션의 *모든 것*\\ 이 캔버스 변환의 대상"
"이 되는 것을 원하지 않습니다. 예를 들면 다음과 같습니다:"

msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr "**패럴랙스 배경**: 무대 나머지 부분보다 느리게 움직이는 배경."

msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""

#, fuzzy
msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**전환**: 전환에 사용되는 효과(페이드, 혼합)가 고정된 위치에 남아 있기를 원"
"할 수 있습니다."

msgid "How can these problems be solved in a single scene tree?"
msgstr "단일 씬 트리에서 어떻게 이 문제들을 해결할 수 있을까요?"

msgid "CanvasLayers"
msgstr ""

#, fuzzy
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"이 해답은 자손들과 손자들에 분리된 2D 렌더링 레이어를 추가하는 :ref:"
"`CanvasLayer <class_CanvasLayer>` 노드에 있습니다. 뷰포트 자손들은 기본적으"
"로 \"0\" 레이어에 그려집니다. 반면에 CanvasLayer는 아무 숫자 레이어에 그려집"
"니다. 더 큰 숫자를 가진 레이어가 위에 그려집니다. 또한 각 CanvasLayers 만의 "
"변형을 가지고 다른 레이어의 변형에 의존하지 않습니다. 이것은 세계가 움직이는 "
"동안에 UI를 고정될 수 있게 해줍니다."

msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""

#, fuzzy
msgid "Here's a diagram of how it looks:"
msgstr "도표는 다음과 같습니다:"

#, fuzzy
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayer들은 트리 순서에 독립적이고 레이어 수에만 의존합니다. 그래서 필요"
"할 때 인스턴스화 될 수 있습니다."

msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
