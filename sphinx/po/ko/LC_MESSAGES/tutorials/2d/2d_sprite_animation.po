# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D Sprite animation"
msgstr "2D 스프라이트 애니메이션"

msgid "Introduction"
msgstr "소개"

#, fuzzy
msgid ""
"In this tutorial, you'll learn how to create 2D animated characters with the "
"AnimatedSprite class and the AnimationPlayer. Typically, when you create or "
"download an animated character, it will come in one of two ways: as "
"individual images or as a single sprite sheet containing all the animation's "
"frames. Both can be animated in Godot with the AnimatedSprite class."
msgstr ""
"이번 튜토리얼에서는 2D 애니메이션 캐릭터를 만드는 두 가지 방법을 배우게 됩니"
"다. 전형적으로 애니메이션 캐릭터를 만들거나 다운로드 할 경우 두 가지 유형 중 "
"하나일 것입니다: 개별 이미지 또는 애니메이션 프레임을 모두 담긴 단일 스프라이"
"트 시트. 애셋 유형에 따라 다음 해결책 중 하나를 선택할 수 있습니다."

#, fuzzy
msgid ""
"First, we'll use :ref:`AnimatedSprite <class_AnimatedSprite>` to animate a "
"collection of individual images. Then we will animate a sprite sheet using "
"this class. Finally, we will learn another way to animate a sprite sheet "
"with :ref:`AnimationPlayer <class_AnimationPlayer>` and the *Animation* "
"property of :ref:`Sprite <class_Sprite>`."
msgstr ""
"첫 번째는 :ref:`AnimatedSprite <class_AnimatedSprite>` 를 사용하여 개별적인 "
"이미지들을 애니메이션으로 만들 겁니다. 그 다음 스프라이트 시트를 사용하려면 :"
"ref:`Sprite <class_Sprite>` 의 *Animation* 속성과 함께 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 를 사용합니다."

msgid ""
"Art for the following examples by https://opengameart.org/users/ansimuz and "
"by https://opengameart.org/users/tgfcoder"
msgstr ""

msgid "Individual images with AnimatedSprite"
msgstr ""

#, fuzzy
msgid ""
"In this scenario, you have a collection of images, each containing one of "
"your character's animation frames. For this example, we'll use the following "
"animation:"
msgstr ""
"이 시나리오에서는 당신은 캐릭터의 애니메이션 프레임들을 포함하는 이미지 컬렉"
"션을 가집니다. 이 예제에서 다음과 같은 애니메이션을 사용합니다:"

msgid ""
"You can download the images here: :download:`run_animation.zip <files/"
"run_animation.zip>`"
msgstr ""
"이미지들은 여기서 다운로드 할 수 있습니다: :download:`using_kinematic2d.zip "
"<files/using_kinematic2d.zip>`"

msgid ""
"Unzip the images and place them in your project folder. Set up your scene "
"tree with the following nodes:"
msgstr ""
"이미지 압축을 풀고 당신의 프로젝트 폴더에 넣으세요. 다음과 같은 노드를 씬 트"
"리에 설정하세요:"

#, fuzzy
msgid ""
"The root node could also be :ref:`Area2D <class_Area2D>` or :ref:"
"`RigidBody2D <class_RigidBody2D>`. The animation will still be made in the "
"same way. Once the animation is completed, you can assign a shape to the "
"CollisionShape2D. See :ref:`Physics Introduction <doc_physics_introduction>` "
"for more information."
msgstr ""
"루트 노드는 :ref:`Area2D <class_Area2D>` 또는 :ref:`RigidBody2D "
"<class_RigidBody2D>` 도 될 수 있습니다. 애니메이션은 여전히 똑같은 방법으로 "
"만들어질 것입니다. 애니메이션이 완성되면, CollisionShape2D 를 할당할 수 있습"
"니다. 자세한 정보는 :ref:`Physics Introduction <doc_physics_introduction>` "
"를 참고하세요."

msgid ""
"Now select the ``AnimatedSprite`` and in its *SpriteFrames* property, select "
"\"New SpriteFrames\"."
msgstr ""
"이제 ``AnimatedSprite`` 를 선택하고 노드의 *SpriteFrames* 속성에서 \"새 "
"SpriteFrames\"를 선택하세요."

msgid ""
"Click on the new SpriteFrames resource and you'll see a new panel appear at "
"the bottom of the editor window:"
msgstr ""
"새 SpriteFrames 리소스를 클릭하면 편집기 창 하단에 새로운 패널이 나타날 것입"
"니다:"

msgid ""
"From the FileSystem dock on the left side, drag the 8 individual images into "
"the center part of the SpriteFrames panel. On the left side, change the name "
"of the animation from \"default\" to \"run\"."
msgstr ""
"왼쪽의 파일 시스템 독에서 8개의 개별 이미지를 SpriteFrames 패널의 중앙 부분으"
"로 끌어다 놓으세요. 왼쪽에서 애니메이션의 이름을 \"default\"에서 \"run\"으로 "
"변경하세요."

#, fuzzy
msgid ""
"Back in the Inspector, check the box for the *Playing* property. You should "
"now see the animation playing in the viewport. However, it is a bit slow. To "
"fix this, change the *Speed (FPS)* setting in the SpriteFrames panel to 10."
msgstr ""
"인스펙터(Inspecter)로 돌아가서 *Playing* 속성 박스를 체크하세요. 이제 뷰포트"
"에서 애니메이션이 재생되는 것을 볼 수 있습니다. 그러나 꽤 느립니다. 고치기 위"
"해서는 SpriteFrames 패널에서 *속도 (FPS)* 설정을 바꾸세요."

msgid ""
"You can add additional animations by clicking the \"New Animation\" button "
"and adding additional images."
msgstr ""
"\"새로운 애니메이션\" 버튼을 클릭하고 이미지를 추가해서 애니메이션을 추가할 "
"수 있습니다."

msgid "Controlling the animation"
msgstr "애니메이션 제어하기"

msgid ""
"Once the animation is complete, you can control the animation via code using "
"the ``play()`` and ``stop()`` methods. Here is a brief example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"애니메이션을 완성하면 ``play()`` 와 ``stop()`` 메서드를 사용하여 코드로 애니"
"메이션을 제어할 수 있습니다. 여기 오른쪽 화살표 키를 누르고 있으면 애니메이션"
"을 재생하고 떼면 중지하는 간단한 예제가 있습니다."

msgid "Sprite sheet with AnimatedSprite"
msgstr ""

msgid ""
"You can also easily animate from a sprite sheet with the class "
"``AnimatedSprite``. We will use this public domain sprite sheet:"
msgstr ""

#, fuzzy
msgid ""
"Right-click the image and choose \"Save Image As\" to download it, and then "
"copy the image into your project folder."
msgstr ""
"오른쪽 마우스 버튼으로 이미지를 클릭하고 \"다른 이름으로 저장\" 선택해서 다운"
"로드 하세요. 그 다음 당신의 프로젝트 폴더에 이미지를 복사하세요."

#, fuzzy
msgid ""
"Set up your scene tree the same way you did previously when using individual "
"images. Select the ``AnimatedSprite`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""
"이제 ``AnimatedSprite`` 를 선택하고 노드의 *SpriteFrames* 속성에서 \"새 "
"SpriteFrames\"를 선택하세요."

#, fuzzy
msgid ""
"Click on the new SpriteFrames resource. This time, when the bottom panel "
"appears, select \"Add frames from a Sprite Sheet\"."
msgstr ""
"새 SpriteFrames 리소스를 클릭하면 편집기 창 하단에 새로운 패널이 나타날 것입"
"니다."

msgid "You will be prompted to open a file. Select your sprite sheet."
msgstr ""

msgid ""
"A new window will open, showing your sprite sheet. The first thing you will "
"need to do is to change the number of vertical and horizontal images in your "
"sprite sheet. In this sprite sheet, we have four images horizontally and two "
"images vertically."
msgstr ""

msgid ""
"Next, select the frames from the sprite sheet that you want to include in "
"your animation. We will select the top four, then click \"Add 4 frames\" to "
"create the animation."
msgstr ""

msgid ""
"You will now see your animation under the list of animations in the bottom "
"panel. Double click on default to change the name of the animation to jump."
msgstr ""

msgid ""
"Finally, check Playing on the AnimatedSprite in the inspector to see your "
"frog jump!"
msgstr ""

msgid "Sprite sheet with AnimationPlayer"
msgstr ""

#, fuzzy
msgid ""
"Another way that you can animate when using a sprite sheet is to use a "
"standard :ref:`Sprite <class_Sprite>` node to display the texture, and then "
"animating the change from texture to texture with :ref:`AnimationPlayer "
"<class_AnimationPlayer>`."
msgstr ""
"애니메이션 프레임을 모두 포함하는 스프라이트 시트를 가지고 있는 경우에는 간단"
"하게 ``AnimatedSprite`` 를 사용할 수 없습니다. 대신에 텍스처를 보여주기 위해 "
"표준 :ref:`Sprite <class_Sprite>` 노드를 사용한 다음 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 로 텍스처에서 텍스처로 변경사항을 애니메이션 할 수 "
"있습니다."

msgid "Consider this sprite sheet, which contains 6 frames of animation:"
msgstr "6개의 애니메이션 프레임이 포함된 스프라이트 시트를 고려하세요:"

msgid ""
"Right-click the image and choose \"Save Image As\" to download, then copy "
"the image into your project folder."
msgstr ""
"오른쪽 마우스 버튼으로 이미지를 클릭하고 \"다른 이름으로 저장\" 선택해서 다운"
"로드 하세요. 그 다음 당신의 프로젝트 폴더에 이미지를 복사하세요."

msgid ""
"Our goal is to display these images one after another in a loop. Start by "
"setting up your scene tree:"
msgstr ""
"우리의 목표는 이 이미지들을 차례로 반복해서 보여주는 것입니다. 다음과 같이 "
"씬 트리를 설정하여 시작하세요:"

msgid ""
"Drag the spritesheet into the Sprite's *Texture* property, and you'll see "
"the whole sheet displayed on the screen. To slice it up into individual "
"frames, expand the *Animation* section in the Inspector and set the "
"*Hframes* to ``6``. *Hframes* and *Vframes* are the number of horizontal and "
"vertical frames in your sprite sheet."
msgstr ""
"스프라이트 시트를 스프라이트의 *Texture* 속성에 끌어 놓으면 전체 시트가 화면"
"에 보여집니다. 개별 프레임으로 자르려면 인스펙터(Inspecter)에서 *Animation* "
"부분을 확장하고 *Hframes* 을 ``6`` 으로 설정하세요. *Hframes* 와 *Vframes* "
"는 스프라이트 시트에서 수평 및 수직 프레임의 수입니다."

#, fuzzy
msgid ""
"Now try changing the value of the *Frame* property. You'll see that it "
"ranges from ``0`` to ``5`` and the image displayed by the Sprite changes "
"accordingly. This is the property we'll be animating."
msgstr ""
"이제 *Frame* 속성 값을 변경해보세요. ``0`` 에서부터 ``5`` 까지의 값의 범위를 "
"보게 되고 변화에 따라 보여지는 스프라이트 이미지도 바뀝니다. 이 속성이 우리"
"가 애니메이션으로 만들 속성입니다."

msgid ""
"Select the ``AnimationPlayer`` and click the \"Animation\" button followed "
"by \"New\". Name the new animation \"walk\". Set the animation length to "
"``0.6`` and click the \"Loop\" button so that our animation will repeat."
msgstr ""
"``AnimationPlayer`` 를 선택하고 \"애니메이션\" 버튼을 클릭한 다음 \"새 파일"
"\"을 클릭하세요. 새 애니메이션을 \"walk\"로 이름을 지으세요. 애니메이션 길이"
"를 ``0.6`` 로 설정하고 \"Loop\" 버튼을 클릭해서 애니메이션이 반복되도록 하세"
"요."

msgid ""
"Now select the ``Sprite`` node and click the key icon to add a new track."
msgstr ""
"이제 ``스프라이트`` 를 선택하고 열쇠 아이콘을 클릭해서 새로운 트랙에 추가하세"
"요."

#, fuzzy
msgid ""
"Continue adding frames at each point in the timeline (``0.1`` seconds by "
"default), until you have all the frames from 0 to 5. You'll see the frames "
"actually appearing in the animation track:"
msgstr ""
"타임라인 각 지점(기본 ``0.1`` 초)에 0에서부터 5까지 모든 프레임들을 계속 추가"
"하세요. 애니메이션 트랙에 프레임들이 실제로 나타나는 것을 볼 수 있을 것입니"
"다:"

msgid "Press \"Play\" on the animation to see how it looks."
msgstr "애니메이션에서 \"Play\" 를 누르고 어떻게 작동하는지 보세요."

#, fuzzy
msgid "Controlling an AnimationPlayer animation"
msgstr "애니메이션 제어하기"

#, fuzzy
msgid ""
"Like with AnimatedSprite, you can control the animation via code using the "
"``play()`` and ``stop()`` methods. Again, here is an example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"애니메이션을 완성하면 ``play()`` 와 ``stop()`` 메서드를 사용하여 코드로 애니"
"메이션을 제어할 수 있습니다. 여기 오른쪽 화살표 키를 누르고 있으면 애니메이션"
"을 재생하고 떼면 중지하는 간단한 예제가 있습니다."

msgid ""
"If updating both an animation and a separate property at once (for example, "
"a platformer may update the sprite's ``h_flip``/``v_flip`` properties when a "
"character turns while starting a 'turning' animation), it's important to "
"keep in mind that ``play()`` isn't applied instantly. Instead, it's applied "
"the next time the :ref:`AnimationPlayer <class_AnimationPlayer>` is "
"processed. This may end up being on the next frame, causing a 'glitch' "
"frame, where the property change was applied but the animation was not. If "
"this turns out to be a problem, after calling ``play()``, you can call "
"``advance(0)`` to update the animation immediately."
msgstr ""

msgid "Summary"
msgstr "요약"

#, fuzzy
msgid ""
"These examples illustrate the two classes you can use in Godot for 2D "
"animation. ``AnimationPlayer`` is a bit more complex than "
"``AnimatedSprite``, but it provides additional functionality, since you can "
"also animate other properties like position or scale. The class "
"``AnimationPlayer`` can also be used with an ``AnimatedSprite``. Experiment "
"to see what works best for your needs."
msgstr ""
"이 예제들은 2D 애니메이션에서 마주치게 될 두 가지 가장 흔한 상황을 보여줍니"
"다. 각각 장점을 가지고 있습니다. ``AnimationPlayer`` 로 하게되면 꽤 복잡하지"
"만 추가적인 기능들을 제공합니다. 다른 위치 또는 크기와 같은 속성들을 애니메이"
"션 할 수 있습니다. 실험해보고 어느 방법이 당신의 필요에 알맞는지 알아보세요."

msgid "Translation status"
msgstr "번역 상태"
