# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Custom drawing in 2D"
msgstr "2D에서 사용자 임의 그리기"

msgid "Introduction"
msgstr "소개"

#, fuzzy
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""
"Godot은 스프라이트, 폴리곤, 입자 등을 그리기 위한 노드를 가지고 있습니다. 대"
"부분 경우에 충분하지만 항상 그렇지는 않습니다. 두려움, 불안, 분노 속에 울기 "
"전에 특별한 *무언가* 를 그리는 노드가 존재하지 않기 때문에... 2D 노드( :ref:"
"`Control <class_Control>` 또는 :ref:`Node2D <class_Node2D>` 기반)가 사용자 지"
"정 명령을 쉽게 그릴 수 있는 것을 알면 좋을 것입니다. 또한 하는 것도 *진짜* 쉽"
"습니다."

#, fuzzy
msgid ""
"Custom drawing in a 2D node is *really* useful. Here are some use cases:"
msgstr ""
"노드에서 수동으로 사용자 임의 그림은 *진짜* 유용합니다. 여기 왜 그런지 몇 가"
"지 예가 있습니다:"

#, fuzzy
msgid ""
"Drawing shapes or logic that existing nodes can't do, such as an image with "
"trails or a special animated polygon."
msgstr ""
"노드에서 처리되지 않는 도형 또는 논리 그리기 (예: 원을 그리는 노드, 이미지 자"
"국, 특별한 종류의 움직이는 폴리곤 등 만들기)."

#, fuzzy
msgid ""
"Visualizations that are not that compatible with nodes, such as a tetris "
"board. (The tetris example uses a custom draw function to draw the blocks.)"
msgstr ""
"노드와 호환되지 않는 시각화: (예: 테트리스 보드). 테트리스 예제는 블록을 그리"
"기 위해 사용자 정의 그리기 함수를 사용합니다."

#, fuzzy
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using a large number of nodes, possibly lowering memory usage and "
"improving performance."
msgstr ""
"많은 양의 단순 물체 그리기. 사용자 정의 그림을 사용하면 메모리 집약도가 낮아"
"지고 잠재적으로 속도가 빨라져 노드 사용의 오버헤드를 방지할 수 있습니다."

#, fuzzy
msgid ""
"Making a custom UI control. There are plenty of controls available, but when "
"you have unusual needs, you will likely need a custom control."
msgstr ""
"사용자 정의 UI 컨트롤 만들기. 사용할 수 있는 컨트롤은 많지만, 새롭고 맞춤화"
"된 컨트롤을 만들어야 할 필요성에 부딪치기 쉽습니다."

msgid "Drawing"
msgstr "그리기"

msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""
":ref:`CanvasItem <class_CanvasItem>` 를 상속받는 :ref:`Control "
"<class_Control>` 또는 :ref:`Node2D <class_Node2D>` 와 같은 노드에 스크립트를 "
"추가하세요. 그런 다음 ``_draw()`` 함수를 재정의하세요."

#, fuzzy
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""
"그리기 명령은 :ref:`CanvasItem <class_CanvasItem>` 클래스 참고에 설명되어 있"
"습니다. 많은 양의 명령이 있습니다."

msgid "Updating"
msgstr ""

msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""
"``_draw()`` 함수는 단 한 번만 호출하고, 그 다음에는 그리기 명령을 캐싱하여 기"
"억하므로 추가 호출은 불필요합니다."

#, fuzzy
msgid ""
"If re-drawing is required because a state or something else changed, call :"
"ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that same node "
"and a new ``_draw()`` call will happen."
msgstr ""
"상태나 다른 것이 변경되어 다시 그리기가 필요한 경우 간단하게 같은 노드에서 :"
"ref:`CanvasItem.update() <class_CanvasItem_method_update>` 를 호출하면 새로"
"운 ``_draw()`` 호출이 발생합니다."

msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""
"여기 좀 더 복잡한 예가 있는데 텍스처 변수는 수정하면 다시 그려지게 됩니다:"

msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""
"어떤 경우 모든 프레임을 그리는 것이 바람직할 수 있습니다. 이를 위해 "
"``_process()`` 콜백에서 다음과 같이 ``update()`` 를 호출하세요:"

msgid "An example: drawing circular arcs"
msgstr "예제: 원호 그리기"

msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""
"이제 Godot 엔진의 사용자 정의 그리기 기능을 사용하여 Godot가 제공하지 않는 기"
"능을 그릴 겁니다. 예를 들어, Godot은 전체 원을 그리는 ``draw_circle()`` 함수"
"를 제공합니다. 하지만 원의 일부를 그리는 것은 어떨까요? 이것을 수행하려면 함"
"수를 코드화해서 직접 그려야 할 것입니다."

msgid "Arc function"
msgstr "호(Arc) 함수"

msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""
"호는 보조하는 원 매개변수, 즉 중심 위치와 반지름에 의해 정의됩니다. 그 다음, "
"호 자체는 시작하는 각도와 정지하는 각도에 의해 정의됩니다. 이것들은 우리가 그"
"리기 함수에 제공해야 하는 네 가지 인수입니다. 색 값도 제공해서 원하면 다른 색"
"으로 호를 그릴 수 있을 겁니다."

#, fuzzy
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LOD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""
"기본적으로 화면에 도형을 그리면 어느 한 점에서 다른 점으로 연결된 선이 일정"
"한 수의 점으로 분해될 것을 요구합니다. 상상할 수 있듯이 도형의 점이 많아질수"
"록 부드러워지지만 처리 비용 관해서는 무거워질 것입니다. 일반적으로 만약 당신"
"의 도형이 거대하다면(또는 3D에서 카메라에서 가까운) 그것은 각진 모양이 없이 "
"더 많은 점을 그려야 할 것입니다. 반대로 모양이 작으면(또는 3D에서 카메라에서 "
"멀리 떨어진), 처리 비용을 절감하기 위해 점의 수를 줄일 수 있습니다. 이를 "
"*Level of Detail(LoD)* 라고 합니다. 우리의 예에서는 우리는 반지름에 상관 없"
"이 단지 정해진 수의 점을 사용할 겁니다."

msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""
"우리 도형이 몇 개의 점으로 분해되어야 하는지 기억하시나요? 우리는 이 수를 "
"``nb_points`` 변수에 ``32`` 값으로 정합니다. 그 다음 우리는 빈 "
"``PoolVector2Array`` 를 초기화합니다. 그냥 ``Vector2`` 의 배열입니다."

#, fuzzy
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""
"다음 단계는 호를 구성하는 32개 점의 실제 위치를 계산하는 것으로 구성됩니다. "
"이것은 첫 번째 for 반복문에서 이루어집니다. 위치를 계산할 점의 수와 하나를 더"
"해서 마지막 점까지 포함시킨 점의 수를 반복합니다. 우리는 먼저 출발 각도와 끝 "
"각도로 각 지점의 각도를 결정합니다."

msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""
"각각의 각도가 90° 씩 줄어드는 이유는 각 각도를 삼각법을 사용하여 2D 위치를 계"
"산하기 때문입니다(코사인과 사인을 알아야 합니다). 그러나 간단히 말하면 "
"``cos()`` 와 ``sin()`` 는 각도가 아니라 라디안을 사용합니다. 0°의 각도(0 라디"
"안)는 3시 방향에서 시작합니다(우리는 12시 방향에서 세기를 원하지만). 그래서 "
"12시 방향에서부터 세기 위해 각각의 각도를 90° 씩 줄입니다."

msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""

#, fuzzy
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""
"이제 우리는 점들을 실제로 그려야 합니다. 우리는 간단히 32개의 점을 그리지 못"
"합니다. 각각의 점들 사이를 모두 그려야 합니다. 우리는 이전 메서드를 이용하여 "
"계산된 점들을 모두 하나씩 이어 그릴 수 있었습니다. 하지만 이 방법은 너무 복잡"
"하고 비효율적입니다(명시적으로 필요한 경우는 예외). 그래서 우리는 간단히 각각"
"의 한 쌍의 점 사이에 선을 그립니다. 보조하는 원의 반지름이 크지 않는 한, 한 "
"쌍의 점 사이의 각각의 선 길이는 결코 충분히 볼 수 있을 만큼 길지 않을 것입니"
"다. 만약 그렇게 된다면, 우리는 단순히 점의 수를 늘려야 할 것입니다."

msgid "Draw the arc on the screen"
msgstr "화면에 호 그리기"

msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""

msgid "Result:"
msgstr "결과:"

msgid "Arc polygon function"
msgstr ""

msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""

msgid "Dynamic custom drawing"
msgstr ""

msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""

msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""

msgid "We make these values change in the _process(delta) function."
msgstr ""

msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""

msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""

msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""

msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""

msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""

msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""

msgid "Let's run again! This time, the rotation displays fine!"
msgstr ""

#, fuzzy
msgid "Antialiased drawing"
msgstr "**안티 앨리어싱:**"

msgid ""
"Godot offers method parameters in :ref:"
"`draw_line<class_CanvasItem_method_draw_line>` to enable antialiasing, but "
"it doesn't work reliably in all situations (for instance, on mobile/web "
"platforms, or when HDR is enabled). There is also no ``antialiased`` "
"parameter available in :ref:"
"`draw_polygon<class_CanvasItem_method_draw_polygon>`."
msgstr ""

msgid ""
"As a workaround, install and use the `Antialiased Line2D add-on <https://"
"github.com/godot-extended-libraries/godot-antialiased-line2d>`__ (which also "
"supports antialiased Polygon2D drawing). Note that this add-on relies on "
"high-level nodes, rather than low-level ``_draw()`` functions."
msgstr ""

msgid "Tools"
msgstr "툴"

msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor. This can be used as a preview or visualization of some feature or "
"behavior. See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
