# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Viewport and canvas transforms"
msgstr "뷰포트와 캔버스 변형"

msgid "Introduction"
msgstr "소개"

#, fuzzy
msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"노드에서 콘텐츠를 지역으로 그리는 순간부터 화면에 그려지는 시간까지 진행되는 "
"2D 변환에 대한 개요입니다. 이 개요는 엔진에서 매우 저수준의 세부 정보를 설명"
"합니다."

msgid "Canvas transform"
msgstr "캔버스 변형"

#, fuzzy
msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"이전 :ref:`doc_canvas_layers` 튜토리얼에서 언급한 것과 같이 모든 CanvasItem "
"노드(Node2D와 Control를 기반으로 두는 노드는 CanvasItem를 공통의 루트로 사용"
"하는 것을 기억하세요)는 *Canvas Layer*에 있습니다. 모든 canvas layer는 :ref:"
"`Transform2D <class_Transform2D>`로 접근할 수 있는 변형(옮김(translation), 회"
"전, 스케일 등)이 있습니다."

#, fuzzy
msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"또한 이전 튜토리얼에서도 다뤘듯이 노드는 기본적으로 내장된 캔버스의 레이어 0"
"에서 그려집니다. 노드를 다른 레이어에 배치하려면 :ref:\"CanvasLayer "
"<class_CanvasLayer> 노드를 사용할 수 있습니다."

msgid "Global canvas transform"
msgstr "전역 캔버스 변형(Global canvas transform)"

#, fuzzy
msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this transform is not of "
"much use, but is used in the CanvasItem Editor in Godot's editor."
msgstr ""
"뷰포트에는 전역 캔버스 변형(또한 :ref:\"Transform2D <class_Transform2D>도)이 "
"있습니다. 이는 모든 각각의 *Canvas Layer* 변형에 영향을 미치는 마스터 변형입"
"니다. 일반적으로 이 변형은 별로 쓸모가 없지만 Godot 편집기의 CanvasItem 편집"
"기에서 사용된다."

msgid "Stretch transform"
msgstr "늘이기 변형(Stretch transform)"

#, fuzzy
msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"마지막으로, 뷰포트에는 *늘이기 변형*이 있으며, 이는 화면 크기를 조정하거나 늘"
"일 때 사용됩니다. 이 변형은 내부적으로 사용되지만( :ref:"
"`doc_multiple_resolutions`에 설명됨) 각 뷰포트에서 수동으로 설정할 수도 있습"
"니다."

#, fuzzy
msgid ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. To convert InputEvent coordinates to "
"local CanvasItem coordinates, the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. InputEvent 좌표를 지역 CanvasItem 좌표로 "
"변환하기 위해서는 :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` 기능을 편의를 위해 추가했습니다."

msgid "Transform order"
msgstr "변형 순서"

msgid ""
"For a coordinate in CanvasItem local properties to become an actual screen "
"coordinate, the following chain of transforms must be applied:"
msgstr ""
"CanvasItem 지역 속성의 좌표가 실제 화면 좌표가 되려면 다음과 같은 변형 체인"
"이 적용되어야 합니다:"

msgid "Transform functions"
msgstr "변형 기능들"

msgid "Obtaining each transform can be achieved with the following functions:"
msgstr "각 변형을 얻으려면 다음과 같은 기능을 사용합니다:"

msgid "Type"
msgstr "타입"

msgid "Transform"
msgstr "변형"

msgid "CanvasItem"
msgstr ""

msgid ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"
msgstr ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"

msgid "CanvasLayer"
msgstr ""

msgid ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"
msgstr ""

msgid "CanvasLayer+GlobalCanvas+Stretch"
msgstr ""

msgid ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"
msgstr ""

msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""
"마지막으로 CanvasItem 지역 좌표를 화면 좌표로 변환하려면 다음 순서로 곱하세"
"요:"

msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"그러나 화면 좌표를 사용하여 작업하는 것은 일반적으로 바람직하지 않음을 명심하"
"세요. 권장되는 접근방식은 Canvas 좌표(``CanvasItem.get_global_transform()``)"
"로 자동으로 화면 해상도를 제대로 크기 조정할 수 있게 간단히 작동해야 합니다."

msgid "Feeding custom input events"
msgstr ""

#, fuzzy
msgid ""
"It is often desired to feed custom input events to the scene tree. With the "
"above knowledge, to correctly do this, it must be done the following way:"
msgstr ""
"씬 트리에 사용자 지정 이벤트를 주는 것이 바람직합니다. 위의 지식으로 이벤트"
"를 주려면 다음과 같은 방법으로 해야 됩니다."

msgid "Translation status"
msgstr "번역 상태"
