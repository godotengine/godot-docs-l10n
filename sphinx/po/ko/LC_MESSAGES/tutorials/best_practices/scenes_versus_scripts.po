# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When to use scenes versus scripts"
msgstr "씬과 스크립트 중 하나를 사용해야 하는 경우"

msgid ""
"We've already covered how scenes and scripts are different. Scripts define "
"an engine class extension with imperative code, scenes with declarative code."
msgstr ""
"우리는 이미 씬과 스크립트가 다르다는 것을 압니다. 스크립트는 명령형 코드, 선"
"언형 코드로 만든 씬을 사용해 엔진 클래스 확장을 정의합니다."

msgid ""
"Each system's capabilities are different as a result. Scenes can define how "
"an extended class initializes, but not what its behavior actually is. Scenes "
"are often used in conjunction with a script so that the scene acts as an "
"extension of the scripts declarative code."
msgstr ""
"각 시스템의 능력은 결과적으로는 다릅니다. 씬은 어떻게 확장된 클래스를 초기화"
"하는 지 정의할 수 있지만, 씬은 종종 스크립트와 함께 사용되어 선언형 코드 스크"
"립트의 확장으로 작업하기도 합니다."

msgid "Anonymous types"
msgstr "익명 타입"

msgid ""
"It *is* possible to completely define a scenes' contents using a script "
"alone. This is, in essence, what the Godot Editor does, only in the C++ "
"constructor of its objects."
msgstr ""
"스크립트 하나 만으로 씬의 내용을 완전히 정의하는 것은 *가능합니다*. 본질적으"
"로, Godot 편집기가 하는 일은 오직 오브젝트의 C++ 생성자에서 이루어집니다."

msgid ""
"But, choosing which one to use can be a dilemma. Creating script instances "
"is identical to creating in-engine classes whereas handling scenes requires "
"a change in API:"
msgstr ""
"하지만 어떤 것을 사용해야 하는지 결정하는 것은 딜레마가 됩니다. 스크립트 인스"
"턴스를 만드는 것은 인 게임 클래스를 만드는 것과 동일하지만 씬을 다루려면 API"
"를 변경해야 합니다:"

msgid ""
"Also, scripts will operate a little slower than scenes due to the speed "
"differences between engine and script code. The larger and more complex the "
"node, the more reason there is to build it as a scene."
msgstr ""
"또한 엔진과 스크립트 코드 간의 속도 차 때문에 스크립트가 씬에 비해 조금 더 느"
"리게 작동합니다. 노드가 크고 복잡할수록, 씬으로 작업하는 것이 더 좋습니다."

msgid "Named types"
msgstr "명명된 타입"

msgid ""
"In some cases, a user can register a script as a new type within the editor "
"itself. This displays it as a new type in the node or resource creation "
"dialog with an optional icon. In these cases, the user's ability to use the "
"script is much more streamlined. Rather than having to..."
msgstr ""
"몇 가지 경우에서, 사용자는 편집기 자체 내에서 스크립트를 새로운 타입으로 등록"
"할 수 있습니다. 노드 생성 또는 리소스 생성 대화상자에서 선택한 아이콘이 있는 "
"새 타입으로 나타납니다. 이런 경우, 스크립트를 사용하는 사용자의 능력은 훨씬 "
"더 간소화 되었습니다. 더 이상 다음과 같이 하지 않아도 됩니다..."

msgid "Know the base type of the script they would like to use."
msgstr "사용하고 싶은 스크립트의 기본 타입을 알기."

msgid "Create an instance of that base type."
msgstr "기본 타입의 인스턴스를 생성하기."

msgid "Add the script to the node."
msgstr "노드에 스크립트를 추가하기."

msgid "(Drag-n-drop method)"
msgstr "(드래그 앤 드롭 방식)"

msgid "Find the script in the FileSystem dock."
msgstr "파일 시스템 독에서 스크립트를 찾기."

msgid "Drag and drop the script onto the node in the Scene dock."
msgstr "스크립트를 씬 독의 노드로 드래그 앤 드롭하기."

msgid "(Property method)"
msgstr "(속성 방식)"

msgid ""
"Scroll down to the bottom of the Inspector to find the ``script`` property "
"and select it."
msgstr ""
"인스펙터(Inspecter)의 맨 아래로 내려서 ``script`` 속성을 찾고 선택하기."

msgid "Select \"Load\" from the dropdown."
msgstr "드롭다운 메뉴에서 \"불러오기\" 선택하기."

msgid "Select the script from the file dialog."
msgstr "파일 대화 상자에서 스크립트를 선택하기."

msgid ""
"With a registered script, the scripted type instead becomes a creation "
"option like the other nodes and resources in the system. One need not do any "
"of the above work. The creation dialog even has a search bar to look up the "
"type by name."
msgstr ""
"등록된 스크립트를 사용하면, 스크립트된 타입에서 다른 시스템 내 노드와 리소스"
"와 같은 생성 옵션이 됩니다. 위의 작업을 하지 않아도 됩니다. 생성 대화 상자는 "
"타입을 이름으로 찾아볼 수 있는 검색 상자도 있습니다."

msgid "There are two systems for registering types..."
msgstr "타입을 등록하는 데는 두 가지 시스템이 있습니다..."

msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ":ref:`맞춤 타입 <doc_making_plugins>`"

msgid "Editor-only. Typenames are not accessible at runtime."
msgstr "편집기만 가능. 런타임 도중 타입이름에 접근할 수 없습니다."

msgid "Does not support inherited custom types."
msgstr "상속된 맞춤 타입을 지원하지 않습니다."

msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr "초기화 툴. 스크립트로 노드를 만듭니다. 더 이상은 없습니다."

msgid ""
"Editor has no type-awareness of the script or its relationship to other "
"engine types or scripts."
msgstr ""
"편집기는 스크립트에 대한 타입 인식이나 다른 엔진 타입이나 스크립트 간의 관계"
"가 없습니다."

msgid "Allows users to define an icon."
msgstr "사용자가 아이콘을 정의할 수 있도록 합니다."

msgid ""
"Works for all scripting languages because it deals with Script resources in "
"abstract."
msgstr "스크립트 리소스를 추상화하기 때문에 모든 스크립트 언어에서 작동합니다."

msgid ""
"Set up using :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."
msgstr ""
":ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`\\ 을 사용해 설정합니다."

#, fuzzy
msgid ":ref:`Script Classes <doc_gdscript_basics_class_name>`"
msgstr ":ref:`스크립트 클래스 <doc_scripting_continued_class_name>`"

msgid "Editor and runtime accessible."
msgstr "편집기와 런타임에 접근할 수 있습니다."

msgid "Displays inheritance relationships in full."
msgstr "상속 관계를 전체적으로 표시합니다."

msgid ""
"Creates the node with the script, but can also change types or extend the "
"type from the editor."
msgstr ""
"스크립트로 노드를 만듭니다, 하지만 편집기에서 타입을 바꾸거나 확장할 수도 있"
"습니다."

msgid ""
"Editor is aware of inheritance relationships between scripts, script "
"classes, and engine C++ classes."
msgstr ""
"편집기는 스크립트, 스크립트 클래스 및 엔진 C++ 클래스 간의 상속 관계를 인식합"
"니다."

msgid ""
"Engine developers must add support for languages manually (both name "
"exposure and runtime accessibility)."
msgstr ""
"엔진 개발자는 수동으로 언어 지원을 추가해야 합니다 (이름 표시와 런타임 접근 "
"가능성 모두)."

msgid "Godot 3.1+ only."
msgstr "Godot 3.1+에서만 가능합니다."

msgid ""
"The Editor scans project folders and registers any exposed names for all "
"scripting languages. Each scripting language must implement its own support "
"for exposing this information."
msgstr ""
"편집기는 프로젝트 폴더를 스캔하고 모든 스크립팅 언어의 노출된 이름을 등록합니"
"다.  각 스크립팅 언어가 이 정보가 노출되는 것을 자체적인 지원으로 구현해야 합"
"니다."

msgid ""
"Both methodologies add names to the creation dialog, but script classes, in "
"particular, also allow for users to access the typename without loading the "
"script resource. Creating instances and accessing constants or static "
"methods is viable from anywhere."
msgstr ""
"두 방법론 모두 생성 대화 상자에 이름을 추가할 수 있습니다, 하지만 특히 스크립"
"트 클래스는 사용자가 스크립트 리소스를 불러오지 않고도 타입이름에 접근할 수 "
"있습니다. 인스턴스를 만들고 상수나 정적 메서드에 접근하는 것은 어디서나 가능"
"합니다."

msgid ""
"With features like these, one may wish their type to be a script without a "
"scene due to the ease of use it grants users. Those developing plugins or "
"creating in-house tools for designers to use will find an easier time of "
"things this way."
msgstr ""
"이러한 기능으로, 사람들은 사용자가 사용하기 쉽도록 그들의 타입이 씬이 없는 스"
"크립트가 되길 원합니다. 플러그인을 개발하거나 디자이너를 위한 사내 툴을 만드"
"는 사람들에게 이러한 방식은 더 쉬운 작업 시간을 찾을 수 있을 겁니다."

msgid ""
"On the downside, it also means having to use largely imperative programming."
msgstr "단점은 명령형 프로그래밍을 주로 사용해야 하는 것입니다."

msgid "Performance of Script vs PackedScene"
msgstr "스크립트와 PackedScene의 성능 비교"

msgid ""
"One last aspect to consider when choosing scenes and scripts is execution "
"speed."
msgstr "마지막으로 씬과 스크립트를 선택할 때 고려할 사항은 실행 속도입니다."

#, fuzzy
msgid ""
"As the size of objects increases, the scripts' necessary size to create and "
"initialize them grows much larger. Creating node hierarchies demonstrates "
"this. Each Node's logic could be several hundred lines of code in length."
msgstr ""
"오브젝트의 규모가 커질수록, 그것을 만드는 데 필요한 스크립트의 규모도 더욱 "
"더 커집니다. 이것은 노드 계층 구조를 만드는 것으로 드러납니다. 각 노드의 논리"
"는 수 백줄의 코드가 될 수 있습니다."

msgid ""
"The code example below creates a new ``Node``, changes its name, assigns a "
"script to it, sets its future parent as its owner so it gets saved to disk "
"along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""
"아래의 코드 예제는 새로운 ``Node`` 를 생성하고, 이름을 변경하고, 스크립트를 "
"지정하고, 소유자를 부모가 될 노드로 초기화해 디스크에 같이 저장되도록 한 뒤 "
"``Main`` 노드의 자식으로 등록하는 코드입니다:"

msgid ""
"Script code like this is much slower than engine-side C++ code. Each "
"instruction makes a call to the scripting API which leads to many "
"\"lookups\" on the back-end to find the logic to execute."
msgstr ""
"이와 같은 스크립트 코드는 엔진쪽의 C++ 코드보다 훨씬 느립니다. 매 명령은 스크"
"립트 API를 호출하기 때문에 실행할 로직을 찾기 위해 백엔드에서 많은 "
"\"lookup\"이 일어나게 됩니다."

msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, defines "
"resources that use serialized data to create objects. The engine can process "
"scenes in batches on the back-end and provide much better performance than "
"scripts."
msgstr ""
"씬은 이런 문제를 피할 수 있도록 해줍니다. 씬이 상속하는 기본 타입인 :ref:"
"`PackedScene <class_PackedScene>`은 오브젝트를 생성할 때 직렬화된 데이터를 사"
"용하는 리소스를 정의합니다. 엔진은 백엔드에서 씬을 여러 뭉치로 처리할 수 있"
"게 되고 스크립트보다 훨씬 나은 성능을 보입니다."

msgid "Conclusion"
msgstr "결론"

msgid "In the end, the best approach is to consider the following:"
msgstr "마지막으로, 최선의 접근법은 다음을 고려해보는 것입니다:"

msgid ""
"If one wishes to create a basic tool that is going to be re-used in several "
"different projects and which people of all skill levels will likely use "
"(including those who don't label themselves as \"programmers\"), then "
"chances are that it should probably be a script, likely one with a custom "
"name/icon."
msgstr ""
"여러 다른 프로젝트에서 재사용하며, (\"프로그래머\"라는 이름표가 없는 사람들"
"을 포함한) 모든 실력 수준의 사람들이 사용할 수 있는 기본 툴을 만들고 싶다면, "
"아마 스크립트로 만들어야 할 것입니다, 맞춤 이름/아이콘을 줄 수 있으니까요."

msgid ""
"If one wishes to create a concept that is particular to their game, then it "
"should always be a scene. Scenes are easier to track/edit and provide more "
"security than scripts."
msgstr ""
"게임에 특화된 개념을 만들고 시다면, 그것은 항상 씬이 되어야 합니다. 씬이 스크"
"립트보다 더 쉽게 연결/편집하고 더 보안이 좋습니다."

msgid ""
"If one would like to give a name to a scene, then they can still sort of do "
"this in 3.1 by declaring a script class and giving it a scene as a constant. "
"The script becomes, in effect, a namespace:"
msgstr ""
"씬에 이름을 주고 싶다면, 스크립트 클래스를 선언하고 상수로 씬을 지정하여 3.1"
"에서 이 작업을 수행할 수 있습니다. 스크립트는 사실상 네임스페이스가 됩니다:"

msgid "Translation status"
msgstr "번역 상태"
