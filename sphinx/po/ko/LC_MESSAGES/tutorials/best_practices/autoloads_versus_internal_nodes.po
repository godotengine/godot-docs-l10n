# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Autoloads versus regular nodes"
msgstr "오토로드 대 내장 노드"

msgid ""
"Godot offers a feature to automatically load nodes at the root of your "
"project, allowing you to access them globally, that can fulfill the role of "
"a Singleton: :ref:`doc_singletons_autoload`. These auto-loaded nodes are not "
"freed when you change the scene from code with :ref:`SceneTree.change_scene "
"<class_SceneTree_method_change_scene>`."
msgstr ""
"Godot은 프로젝트의 루트에 자동으로 노드를 로드하는 기능을 지원해 전역적으로 "
"액세스가 가능하도록 합니다. 따라서 싱글턴 :ref:`doc_singletons_autoload`의 목"
"적에 부합합니다. 자동으로 로드된 노드들은 코드에서 :ref:`SceneTree."
"change_scene <class_SceneTree_method_change_scene>`로 씬을 변경할 때 할당이 "
"해제되지 않습니다."

msgid ""
"In this guide, you will learn when to use the Autoload feature, and "
"techniques you can use to avoid it."
msgstr ""
"이 가이드에서는 오토로드 기능을 사용할 때와 이를 피하기 위한 기법을 배우게 됩"
"니다."

msgid "The cutting audio issue"
msgstr "오디오 잘림 문제"

#, fuzzy
msgid ""
"Other engines can encourage the use of creating manager classes, singletons "
"that organize a lot of functionality into a globally accessible object. "
"Godot offers many ways to avoid global state thanks to the node tree and "
"signals."
msgstr ""
"다른 엔진에서는 전역으로 접근 가능할 오브젝트에 다양한 기능을 구성하는 \"관리"
"자\" 클래스를 만들어 쓰는 것을 권장할 지도 모릅니다. Godot는 이러한 오브젝트"
"의 크기를 줄이는 방식을 지원하는 것으로 커집니다. 대신 내용물을 가능한 한 개"
"별 노드로 이동시킵니다."

#, fuzzy
msgid ""
"For example, let's say we are building a platformer and want to collect "
"coins that play a sound effect. There's a node for that: the :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. But if we call the "
"``AudioStreamPlayer`` while it is already playing a sound, the new sound "
"interrupts the first."
msgstr ""
"예를 들어, 한 개발자가 플랫포머 게임을 제작하면서 동전을 먹을 때 음향 효과가 "
"나게 하려면 어떻게 해야 할까요? 글쎄요, 이를 위한 노드가 있습니다: :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. 하지만 소리가 재생되고 있는 도"
"중 AudioStreamPlayer를 \"재생(play)\"하면, 새로운 소리는 첫 번째 소리가 끝나"
"기 전에 재생하면서 방해가 된다는 것을, 테스트를 하면서 알게 됩니다."

#, fuzzy
msgid ""
"A solution is to code a global, auto-loaded sound manager class. It "
"generates a pool of ``AudioStreamPlayer`` nodes that cycle through as each "
"new request for sound effects comes in. Say we call that class ``Sound``, "
"you can use it from anywhere in your project by calling ``Sound."
"play(\"coin_pickup.ogg\")``. This solves the problem in the short term but "
"causes more problems:"
msgstr ""
"사용자는 SoundManager 오토로드 노드를 만들어 더 똑똑한 전체 시스템을 만드는 "
"것이 최선의 해결책이라고 생각하는 경향이 있습니다. 이것은 새로운 음향 효과 요"
"청이 들어올 때마다 순환하는 AudioStreamPlayer들의 풀(Pool)을 만들어냅니다. 그"
"런 다음 SoundManager를 오토로드로 만들어 어디서든 `SFX.play(\"coin_pickup."
"ogg\")`\\ 를 가지고 접근하도록 합니다. 사용자는 거의 알지 못했습니다, 자신이 "
"많은 복잡한 문제를 코드로 가지고 왔습니다."

#, fuzzy
msgid ""
"**Global state**: one object is now responsible for all objects' data. If "
"the ``Sound`` class has errors or doesn't have an AudioStreamPlayer "
"available, all the nodes calling it can break."
msgstr ""
"**전역 상태**: 한 오브젝트가 이제 모든 오브젝트의 데이터를 담당합니다. SFX가 "
"오류가 발생하거나 AudioStreamPlayer를 사용할 수 없다면, 전부 망가집니다."

#, fuzzy
msgid ""
"**Global access**: now that any object can call ``Sound.play(sound_path)`` "
"from anywhere, there's no longer an easy way to find the source of a bug."
msgstr ""
"**전역 접근**: 이제 모든 오브젝트가 어디서든 `SFX.play(sound_path)`\\ 를 호출"
"할 수 있습니다, SFX 버그가 어디서 시작했는 지를 아는 쉬운 방법은 더 이상 없습"
"니다."

msgid ""
"**Global resource allocation**: with a pool of ``AudioStreamPlayer`` nodes "
"stored from the start, you can either have too few and face bugs, or too "
"many and use more memory than you need."
msgstr ""
"**전역 리소스 할당**: ``AudioStreamPlayer`` 노드 풀을 처음에 생성하기 때문에 "
"너무 적게 생성하면 버그가 발생하고 너무 많이 생성하면 메모리를 비효율적으로 "
"사용하게 됩니다."

msgid ""
"About global access, the problem is that Any code anywhere could pass wrong "
"data to the ``Sound`` autoload in our example. As a result, the domain to "
"explore to fix the bug spans the entire project."
msgstr ""
"전역 접근의 문제점은 어딘가의 어떤 코드든지 예제의 ``Sound`` 오토로드에 잘못"
"된 데이터를 전달할 수 있다는 점 입니다. 결과적으로 버그를 찾기 위해 프로젝트 "
"전체를 탐색해야 합니다."

msgid ""
"When you keep code inside a scene, only one or two scripts may be involved "
"in audio."
msgstr ""
"코드를 씬 내에 국한시킬 경우, 오디오에 개입할 수 있는 스크립트는 한 두개 뿐입"
"니다."

#, fuzzy
msgid ""
"Contrast this with each scene keeping as many ``AudioStreamPlayer`` nodes as "
"it needs within itself and all these problems go away:"
msgstr ""
"이것과 반대로 각 씬이 필요한 만큼의 AudioStreamPlayer 노드를 유지하면 이 문제"
"는 사라집니다."

msgid ""
"Each scene manages its own state information. If there is a problem with the "
"data, it will only cause issues in that one scene."
msgstr ""
"각 씬은 자체적인 상태 정보를 관리합니다. 데이터에 문제가 생기면, 해당 데이터"
"가 있는 씬 내에서만 사고를 일으킵니다."

msgid ""
"Each scene accesses only its own nodes. Now, if there is a bug, it's easy to "
"find which node is at fault."
msgstr ""
"각 씬은 자기 자신의 노드들에만 액세스합니다. 따라서 버그가 일어난다면 어느 노"
"드에서 오류가 생긴 것인지 특정하기가 쉽습니다."

msgid "Each scene allocates exactly the amount of resources it needs."
msgstr "각 씬은 자신에게 정확히 필요한 양의 리소스만을 할당합니다."

msgid "Managing shared functionality or data"
msgstr "공유 기능 및 데이터 관리하기"

msgid ""
"Another reason to use an Autoload can be that you want to reuse the same "
"method or data across many scenes."
msgstr ""
"오토로드를 써야 하는 또 다른 이유는 동일한 메소드나 데이터를 여러 씬에서 재사"
"용 하고 싶기 때문입니다."

#, fuzzy
msgid ""
"In the case of functions, you can create a new type of ``Node`` that "
"provides that feature for an individual scene using the :ref:`class_name "
"<doc_gdscript_basics_class_name>` keyword in GDScript."
msgstr ""
"함수의 경우 GDScript의 :ref:`class_name <doc_scripting_continued_class_name>`"
"키워드를 사용해 개별 씬에 기능을 지원하도록 새로운 타입의 ``Node``를 만들 수 "
"있습니다."

msgid "When it comes to data, you can either:"
msgstr "데이터의 경우 다음이 가능합니다:"

msgid ""
"Create a new type of :ref:`Resource <class_Resource>` to share the data."
msgstr ""
"새로운 타입의 :ref:`Resource <class_Resource>`을 만들어서 데이터를 공유하는 "
"것."

msgid ""
"Store the data in an object to which each node has access, for example using "
"the ``owner`` property to access the scene's root node."
msgstr ""
"``owner`` 속성(property)로 액세스 할 수 있는 씬의 루트 노드처럼 각 노드에 액"
"세스 할 수 있는 오브젝트에 데이터를 저장하는 것."

msgid "When you should use an Autoload"
msgstr "언제 오토로드를 사용해야 하는지"

msgid "Auto-loaded nodes can simplify your code in some cases:"
msgstr "다음과 같은 경우 오토로드된 노드로 코드를 간소화시킬 수 있습니다:"

msgid ""
"**Static Data**: if you need data that is exclusive to one class, like a "
"database, then an autoload can be a good tool. There is no scripting API in "
"Godot to create and manage static data otherwise."
msgstr ""
"**Static Data**: 만약 데이터베이스처럼 특정한 클래스에 국한된 데이터가 필요하"
"다면 오토로드가 유용할 수 있습니다. Godot에는 달리 정적인 데이터를 생성할 수 "
"있는 스크립팅 API가 없습니다."

msgid ""
"**Static functions**: creating a library of functions that only return "
"values."
msgstr "**Static functions**: 값만을 반환하는 함수 라이브러리를 생성합니다."

#, fuzzy
msgid ""
"**Systems with a wide scope**: If the singleton is managing its own "
"information and not invading the data of other objects, then it's a great "
"way to create systems that handle broad-scoped tasks. For example, a quest "
"or a dialogue system."
msgstr ""
"싱글톤이 자체 정보를 관리하고 있고, 다른 오브젝트의 데이터에 침범하지 않는다"
"면, 넓은 범위의 작업을 다루기 위해 \"시스템\" 클래스를 만드는 것이 좋은 방법"
"입니다. 예를 들어 타겟팅 시스템, 퀘스트 시스템, 아니면 대화 상자 시스템이 대"
"표적인 싱글톤 구현 사례입니다."

msgid ""
"Until Godot 3.1, another use was just for convenience: autoloads have a "
"global variable for their name generated in GDScript, allowing you to call "
"them from any script file in your project. But now, you can use the "
"``class_name`` keyword instead to get auto-completion for a type in your "
"entire project."
msgstr ""
"Godot 3.1 이전까지는 편의성을 위해 GDScript에서 생성된 오토로드의 이름에 대"
"한 전역번수로 프로젝트의 어떤 스크립트에서든 호출이 가능했습니다. 하지만 이"
"제 프로젝트 내 모든 타입이 자동완성되는 걸 보고 있을 필요 없이 "
"``class_name`` 키워드를 사용하면 됩니다."

msgid ""
"Autoload is not exactly a Singleton. Nothing prevents you from instantiating "
"copies of an auto-loaded node. It is only a tool that makes a node load "
"automatically as a child of the root of your scene tree, regardless of your "
"game's node structure or which scene you run, e.g. by pressing :kbd:`F6` key."
msgstr ""
"오토로드는 정확히 말하자면 싱글턴은 아닙니다. 오토로드된 노드의 복사본을 인스"
"턴스화 하는데 아무런 제약이 없기 때문입니다. 오토로드는 그저 노드가 게임의 노"
"드 구조나 :kbd:`F6`키를 누르면 어떤 씬이 실행되는지 여부에 관계 없이 자동으"
"로 씬 트리의 자식 노드로 만들어주는 도구일 뿐입니다."

msgid ""
"As a result, you can get the auto-loaded node, for example an autoload "
"called ``Sound``, by calling ``get_node(\"/root/Sound\")``."
msgstr ""
"결과적으로 만약 오토로드의 이름이 ``Sound`` 라면 ``get_node(\"/root/"
"Sound\")`` 를 호출해서 오토로드된 노드를 얻을 수 있습니다."

msgid "Translation status"
msgstr "번역 상태"
