# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction"
msgstr "소개"

msgid ""
"This series is a collection of best practices to help you work efficiently "
"with Godot."
msgstr ""
"이 모음집은 Godot의 효율적인 사용을 도울 수 있도록 모범 사례를 모아놓은 것입"
"니다."

msgid ""
"Godot allows for a great amount of flexibility in how you structure a "
"project's codebase and break it down into scenes. Each approach has its pros "
"and cons, and they can be hard to weigh until you've worked with the engine "
"for long enough."
msgstr ""
"Godot은 프로젝트의 코드베이스 구성과 씬으로 나누는 방법에 따라 높은 유연성을 "
"가질 수 있습니다. 각각의 접근법들은 장단점이 있고 엔진을 오래 다뤄보지 않았다"
"면 이를 재단하는 것이 어려울 수 있습니다."

msgid ""
"There are always many ways to structure your code and solve specific "
"programming problems. It would be impossible to cover them all here."
msgstr ""
"코드의 구조 구성과 프로그래밍 문제 해결은 언제나 여러가지 방법으로 이루어 질 "
"수 있습니다. 모든 방법을 여기에 소개하는 것은 불가능할 겁니다."

msgid ""
"That is why each article starts from a real-world problem. We will break "
"down each problem in fundamental questions, suggest solutions, analyze the "
"pros and cons of each option, and highlight the best course of action for "
"the problem at hand."
msgstr ""
"그렇기 때문에 이 글들이 실제로 마주칠만한 문제에서 시작하는 것입니다. 여기서"
"는 각 문제들의 근본적인 문제에 접근하고, 해결책을 제안한 뒤, 각 해결책의 장단"
"점을 비교하고 지금의 문제를 해결할 수 있는 모범 답안을 소개 할 겁니다."

msgid ""
"You should start by reading :ref:`doc_what_are_godot_classes`. It explains "
"how Godot's nodes and scenes relate to classes and objects in other Object-"
"Oriented programming languages. It will help you make sense of the rest of "
"the series."
msgstr ""
"우선 :ref:`doc_what_are_godot_classes`를 먼저 읽어보십시오. Godot의 노드와 씬"
"이 어떻게 다른 객체 지향 언어의 클래스와 객체와 연결되는지 설명되어있습니다. "
"이후의 글들을 이해하는데 도움을 줄 것입니다."

msgid ""
"The best practices in Godot rely on Object-Oriented design principles. We "
"use tools like the `single responsibility <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>`_ principle and `encapsulation <https://en."
"wikipedia.org/wiki/Encapsulation_(computer_programming)>`_."
msgstr ""
"Godot에서의 모범 사례들은 객체 지향 설계에 기반하고 있습니다. `단일 책임 원"
"칙 <https://ko.wikipedia.org/wiki/단일_책임_원칙>`_ 이나 `캡슐화 <https://ko."
"wikipedia.org/wiki/캡슐화>`_ 같은 방법론을 사용해 접근합니다."

msgid "Translation status"
msgstr "번역 상태"
