# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot interfaces"
msgstr "Godot 인터페이스"

msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr ""
"기능을 위해 다른 오브젝트에 의존하는 스크립트가 필요한 경우가 종종 있습니다. "
"이 과정에는 2부분이 있습니다:"

msgid "Acquiring a reference to the object that presumably has the features."
msgstr "아마도 기능을 갖는 오브젝트에 대한 참조를 얻기."

msgid "Accessing the data or logic from the object."
msgstr "오브젝트에서 데이터 또는 논리에 접근하기."

msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr ""
"이 튜토리얼의 나머지 부분에서는 이 모든 작업을 하는 다양한 방법을 간략하게 설"
"명합니다."

msgid "Acquiring object references"
msgstr "오브젝트 참조 얻기"

msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""
"모든 :ref:`Object <class_Object>\\ 에 있어, 오브젝트를 참조하는 가장 기본이 "
"되는 방식은 획득한 다른 인스턴스로부터 존재하는 오브젝트로 참조를 가져오는 것"
"이다."

msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""
":ref:`Reference <class_Reference>` 오브젝트에게도 같은 원리가 적용됩니다. 사"
"용자들은 종종 :ref:`Node <class_Node>`\\ 와 :ref:`Resource "
"<class_Resource>`\\ 를 이런 방식으로 연결하지만, 대체 조치가 가능합니다."

msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr ""
"속성(property)이나 메서드 액세스 대신 로드 액세스로 리소스에 접근할 수 있습니"
"다."

msgid "Note the following:"
msgstr "다음을 명심하십시오:"

msgid "There are many ways in which a language can load such resources."
msgstr "언어가 리소스를 로드 할 수 있는 방법은 여러가지가 존재합니다."

msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr ""
"오브젝트가 데이터에 액세스하는 방법을 설계할 때 리소스를 레퍼런스 형식으로 전"
"달하는 것이 가능함을 염두에 두십시오."

msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""
"리소스를 로딩할 때 내부적으로 엔진이 관리하는 캐싱된 리소스 인스턴스를 가져온"
"다는 사실을 기억해두십시오. 새 오브젝트를 생성하려면 이미 존재하면 레퍼런스"
"를 :ref:`duplicate <class_Resource_method_duplicate>`하거나 ``new()`` 를 사용"
"해 처음부터 인스턴스화 시켜야 합니다."

msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr ""
"노드도 마찬가지로 다른 방법으로 액세스가 가능한데, 씬트리를 이용하는 방법입니"
"다."

msgid "Accessing data or logic from an object"
msgstr "오브젝트에서 데이터나 로직에 액세스하기"

msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""
"Godot의 스크립팅 API는 덕 타이핑 되어 있습니다. 따라서 스크립트가 동작을 수행"
"할 때 Godot은 동작의 지원을 **타입** 을 통해 확인하는 것이 아닌 오브젝트가 개"
"별 메소드를 **구현** 하는지를 확인합니다."

msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""
"예를 들어서, :ref:`CanvasItem <class_CanvasItem>`는 ``visible`` 속성"
"(property)를 갖고 있습니다. 스크립팅 API에게 노출된 모든 속성(property)들은 "
"이름으로 바인딩 된 setter와 getter 쌍과 같습니다. :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`에 액세스가 발생하면 Godot은 다음과 같은 "
"동작을 수행합니다:"

msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""
"오브젝트에 스크립트가 붙어있다면 스크립트를 통해 속성(property)의 값을 지정하"
"려 시도합니다. 따라서 스크립트가 속성(property)의 setter 메소드를 오버라이드 "
"해서 부모 오브젝트의 속성(property)를 오버라이드 할 수 있도록 합니다."

msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""
"만약 스크립트에게 그 속성(property)가 없다면 스크립트는 ClassDB에 HashMap "
"lookup을 수행해 CanvasItem 클래스와 이를 상속하는 모든 타입에서 \"visible\" "
"속성(property)을 찾고 만약 발견한다면 연결된 setter나 getter를 호출합니다. "
"HashMap에 관한 자세한 정보는 :ref:`data preferences <doc_data_preferences>` "
"문서를 참고하십시오."

msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr ""
"만약 찾지 못한다면 유저가\"script\" 또는 \"meta\" 속성(property)에 액세스하"
"는 것을 원하는지 명시적으로 묻습니다."

msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""

msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""

msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""

msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr ""

msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""

msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""

msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""

msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
