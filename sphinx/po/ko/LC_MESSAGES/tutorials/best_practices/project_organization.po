# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Project organization"
msgstr "프로젝트 조직"

msgid "Introduction"
msgstr "소개"

msgid ""
"Since Godot has no restrictions on project structure or filesystem usage, "
"organizing files when learning the engine can seem challenging. This "
"tutorial suggests a workflow which should be a good starting point. We will "
"also cover using version control with Godot."
msgstr ""
"Godot는 프로젝트 구조나 파일 시스템 사용에 있어 제한을 두지 않기 때문에 엔진"
"을 배울 때, 파일을 조직하는 것은 도전적인 것처럼 보일 수 있습니다. 이 튜토리"
"얼에서는 좋은 출발점이 될만한 워크플로를 제안합니다. 그리고 Godot로 버전 제어"
"를 사용하는 것도 다룰 것입니다."

msgid "Organization"
msgstr "구성"

msgid ""
"Godot is scene-based in nature, and uses the filesystem as-is, without "
"metadata or an asset database."
msgstr ""
"Godot는 본질적으로 씬 기반이고, 파일 시스템을 메타데이터나 애셋 데이터베이스"
"가 아닌, 있는 그대로 사용합니다."

msgid ""
"Unlike other engines, many resources are contained within the scene itself, "
"so the amount of files in the filesystem is considerably lower."
msgstr ""
"다른 엔진과 달리, 많은 리소스가 씬 자체에 내장되어 있기에, 파일 시스템에 있"
"는 파일의 양은 상당히 적습니다."

msgid ""
"Considering that, the most common approach is to group assets as close to "
"scenes as possible; when a project grows, it makes it more maintainable."
msgstr ""
"그것을 고려해보면, 가장 일반적인 접근법은 애셋들을 씬과 가능한 밀접하게 묶어"
"내는 것입니다; 프로젝트가 커지다 보면, 프로젝트를 더 유지할 수 있게 만듭니다."

msgid ""
"As an example, one can usually place into a single folder their basic "
"assets, such as sprite images, 3D model meshes, materials, and music, etc. "
"They can then use a separate folder to store built levels that use them."
msgstr ""
"예를 들어, 보통은 하나의 폴더에 기본 애셋을 넣습니다, 스프라이트 이미지나, "
"3D 모델 메시, 머티리얼, 그리고 음악 등이죠. 그런 다음 별도의 폴더를 만들어 그"
"것들을 사용하는 레벨을 저장할 수 있습니다."

msgid "Style guide"
msgstr "스타일 가이드"

msgid ""
"For consistency across projects, we recommend following these guidelines:"
msgstr "프로젝트 간의 일관성을 위해 아래의 가이드라인을 지켜주십시오:"

msgid ""
"Use **snake_case** for folder and file names (with the exception of C# "
"scripts). This sidesteps case sensitivity issues that can crop up after "
"exporting a project on Windows. C# scripts are an exception to this rule, as "
"the convention is to name them after the class name which should be in "
"PascalCase."
msgstr ""
"프로젝트를 Windows에서 내보낼 때 이름이 잘리는 문제를 피하기 위해 C# 스크립트"
"를 제외한 폴더와 파일 이름에는 **snake_case** 를 사용해주십시오. 예외적으로 "
"C# 스크립트는 PascalCase로 작성된 클래스와 동일한 파일 이름을 가져야 하므로 "
"PascalCase로 작성되어야 합니다."

#, fuzzy
msgid ""
"Use **PascalCase** for node names, as this matches built-in node casing."
msgstr ""
"노드의 이름에는 내장(built-in)된 노드 케이싱과 맞도록 **PascalCase** 를 사용"
"하십시오."

msgid ""
"In general, keep third-party resources in a top-level ``addons/`` folder, "
"even if they aren't editor plugins. This makes it easier to track which "
"files are third-party. There are some exceptions to this rule; for instance, "
"if you use third-party game assets for a character, it makes more sense to "
"include them within the same folder as the character scenes and scripts."
msgstr ""
"일반적인 경우, 서드파티 리소스는 에디터 플러그인이 아니더라도 최상위의 "
"``addons/`` 폴더에 저장하십시오. 이렇게 하면 서드파티 파일을 찾아내는 것이 쉬"
"워집니다. 몇 가지 예외로 서드파티 캐릭터 에셋같은 경우가 있는데, 이 경우는 캐"
"릭터 씬과 스크립트가 위치한 폴더에 저장하는 것이 더 직관적입니다."

msgid "Importing"
msgstr "가져오기"

msgid ""
"Godot versions prior to 3.0 did the import process from files outside the "
"project. While this can be useful in large projects, it resulted in an "
"organization hassle for most developers."
msgstr ""
"3.0 버전 이전의 Godot에서는 프로젝트 밖에서 파일을 접근하는 것으로 가져오기"
"를 실행했습니다. 이것이 큰 규모의 프로젝트에는 유용하지만, 대부분의 개발자들"
"에게는 조직의 번거로움을 초래했습니다."

msgid ""
"Because of this, assets are now transparently imported from within the "
"project folder."
msgstr "이 때문에, 애셋은 이제 프로젝트 폴더 내에서 투명하게 가져옵니다."

msgid "Ignoring specific folders"
msgstr "특정 폴더를 무시하기"

msgid ""
"To prevent Godot from importing files contained in a specific folder, create "
"an empty file called ``.gdignore`` in the folder (the leading ``.`` is "
"required). This can be useful to speed up the initial project importing."
msgstr ""
"Godot이 특정 폴더의 파일을 가져오는 것을 막으려면 ``.gdignore`` 라는 이름의 "
"빈 파일을 폴더에 생성하면 됩니다(위와 같이 이름 앞에 ``.`` 이 들어가야 합니"
"다). 이렇게 하면 프로젝트를 빠르게 가져올 수 있습니다."

msgid ""
"To create a file whose name starts with a dot on Windows, you can use a text "
"editor such as Notepad++ or use the following command in a command prompt: "
"``type nul > .gdignore``"
msgstr ""
"Windows에서 이름이 .으로 시작하는 파일을 만들려면 Notepad++같은 텍스트 에디터"
"를 사용하거나 명령 프롬프트에서 다음의 명령을 사용하십시오:``type nul > ."
"gdignore``"

msgid ""
"Once the folder is ignored, resources in that folder can't be loaded anymore "
"using the ``load()`` and ``preload()`` methods. Ignoring a folder will also "
"automatically hide it from the FileSystem dock, which can be useful to "
"reduce clutter."
msgstr ""
"폴더가 무시된 상태라면 ``load()`` 혹은 ``preload()`` 메서드를 사용해서 리소스"
"를 로딩하는 것이 불가능하며, 파일시스템 독에서 표시되지 않습니다. 불필요한 데"
"이터를 줄이는데 유용합니다."

msgid ""
"Note that the ``.gdignore`` file's contents are ignored, which is why the "
"file should be empty. It does not support patterns like ``.gitignore`` files "
"do."
msgstr ""
"``.gdignore`` 파일은 ``.gitignore`` 처럼 패턴을 지원하지 않고 그냥 내용이 무"
"시되므로 파일의 내용은 비워두는게 좋습니다."

msgid "Case sensitivity"
msgstr "대소문자 구분"

msgid ""
"Windows and recent macOS versions use case-insensitive filesystems by "
"default, whereas Linux distributions use a case-sensitive filesystem by "
"default. This can cause issues after exporting a project, since Godot's PCK "
"virtual filesystem is case-sensitive. To avoid this, it's recommended to "
"stick to ``snake_case`` naming for all files in the project (and lowercase "
"characters in general)."
msgstr ""
"Windows와 최근 macOS 버전들은 Linux 배포판들과 반대로 대소문자 구분이 없는 파"
"일시스템을 기본적으로 사용합니다. Godot의 PCK 파일시스템은 대소문자를 구분하"
"므로 프로젝트를 내보낸 후 문제가 발생할 수 있는데, 프로젝트의 모든 파일 "
"``snake_case`` (와 소문자들)를 사용해 이런 문제를 예방하는 것을 권장합니다."

msgid ""
"You can break this rule when style guides say otherwise (such as the C# "
"style guide). Still, be consistent to avoid mistakes."
msgstr ""
"C# 스타일 가이드라인처럼 스타일 가이드라인에 예외가 있다면 이 규칙을 깨도 됩"
"니다. 하지만 실수하지 않도록 일관성을 유지하십시오."

msgid ""
"On Windows 10, to further avoid mistakes related to case sensitivity, you "
"can also make the project folder case-sensitive. After enabling the Windows "
"Subsystem for Linux feature, run the following command in a PowerShell "
"window::"
msgstr ""
"Windows 10의 경우, 대소문자 구분과 관련된 실수를 방지하기 위해 프로젝트 폴더"
"가 대소문자를 구분하도록 만들 수도 있습니다. Linux용 Windows 하위 시스템 기능"
"을 활성화 한 후, PowerShell 창에 다음 명령을 입력하십시오::"

msgid ""
"If you haven't enabled the Windows Subsystem for Linux, you can enter the "
"following line in a PowerShell window *running as Administrator* then reboot "
"when asked::"
msgstr ""
"Linux용 Windows 하위 시스템을 활성화하지 않았다면, Powershell에서 아래의 명령"
"을 *관리자 권한으로 실행* 한 후 재부팅 알림이 나올 때 재부팅하는 방법도 있습"
"니다::"

msgid "Translation status"
msgstr "번역 상태"
