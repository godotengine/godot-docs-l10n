# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "InputEvent 사용하기"

msgid "What is it?"
msgstr ""

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"입력을 관리하는 것은 보통 OS나 플랫폼과 상관없이 복잡합니다. 이것을 조금이나"
"마 쉽게 하기 위해 특수 내장 유형 :ref:`InputEvent <class_InputEvent>`\\ 이 제"
"공됩니다. 이 데이터 타입은 여러 타입의 입력 이벤트를 포함하도록 구성할 수 있"
"습니다. 입력 이벤트는 엔진을 통해 이동하고 목적에 따라 여러 위치에서 수신될 "
"수 있습니다."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""

msgid "How does it work?"
msgstr ""

msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""

msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""

msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""

msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"gui_input\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""

msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""

msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport with :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` turned on, a ray to the "
"physics world (in the ray direction from the click) will be cast. (For the "
"root viewport, this can also be enabled in :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) If "
"this ray hits an object, it will call the :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` function in the "
"relevant physics object (bodies receive this callback by default, but areas "
"do not. This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""

msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""

msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""

msgid "Anatomy of an InputEvent"
msgstr ""

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""

msgid "Event"
msgstr ""

msgid "Type Index"
msgstr ""

msgid "Description"
msgstr "설명"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ""

msgid "NONE"
msgstr ""

msgid "Empty Input Event."
msgstr ""

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ""

msgid "KEY"
msgstr ""

msgid "Contains a scancode and Unicode value, as well as modifiers."
msgstr ""

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ""

msgid "MOUSE_BUTTON"
msgstr ""

msgid "Contains click information, such as button, modifiers, etc."
msgstr ""

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ""

msgid "MOUSE_MOTION"
msgstr ""

msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ""

msgid "JOYSTICK_MOTION"
msgstr ""

msgid "Contains Joystick/Joypad analog axis information."
msgstr ""

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ""

msgid "JOYSTICK_BUTTON"
msgstr ""

msgid "Contains Joystick/Joypad button information."
msgstr ""

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ""

msgid "SCREEN_TOUCH"
msgstr ""

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ""

msgid "SCREEN_DRAG"
msgstr ""

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ""

msgid "SCREEN_ACTION"
msgstr ""

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""

msgid "Actions"
msgstr ""

msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""

msgid "Input to be reconfigured at run-time."
msgstr ""

msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr ""

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""

msgid "InputMap"
msgstr ""

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
