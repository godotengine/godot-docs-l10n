# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "TSCN file format"
msgstr ""

msgid ""
"The TSCN (text scene) file format represents a single scene tree inside "
"Godot. Unlike binary SCN files, TSCN files have the advantage of being "
"mostly human-readable and easy for version control systems to manage."
msgstr ""

msgid ""
"The ESCN (exported scene) file format is identical to the TSCN file format, "
"but is used to indicate to Godot that the file has been exported from "
"another program and should not be edited by the user from within Godot. "
"Unlike SCN and TSCN files, during import, ESCN files are compiled to binary "
"SCN files stored inside the ``.import/`` folder. This reduces the data size "
"and speeds up loading, as binary formats are faster to load compared to text-"
"based formats."
msgstr ""

msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `resource_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/resource_format_text.cpp>`_ in the "
"``ResourceFormatLoaderText`` class."
msgstr ""

msgid "File structure"
msgstr "파일 구조"

msgid "There are five main sections inside the TSCN file:"
msgstr ""

msgid "File Descriptor"
msgstr ""

msgid "External resources"
msgstr ""

msgid "Internal resources"
msgstr ""

msgid "Nodes"
msgstr "노드"

msgid "Connections"
msgstr "연결(Connections)"

msgid ""
"The file descriptor looks like ``[gd_scene load_steps=3 format=2]`` and "
"should be the first entry in the file. The ``load_steps`` parameter is equal "
"to the total amount of resources (internal and external) plus one (for the "
"file itself). If the file has no resources, ``load_steps`` is omitted. The "
"engine will still load the file correctly if ``load_steps`` is incorrect, "
"but this will affect loading bars and any other piece of code relying on "
"that value."
msgstr ""

msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with ``[ext_resource .....]``."
msgstr ""

msgid ""
"A TSCN file may contain single-line comments starting with a semicolon (``;"
"``). However, comments will be discarded when saving the file using the "
"Godot editor."
msgstr ""

msgid "Entries inside the file"
msgstr ""

msgid ""
"A heading looks like ``[<resource_type> key=value key=value key=value ...]`` "
"where resource_type is one of:"
msgstr ""

msgid "``ext_resource``"
msgstr ""

msgid "``sub_resource``"
msgstr ""

#, fuzzy
msgid "``node``"
msgstr "``그룹 노드``"

#, fuzzy
msgid "``connection``"
msgstr "연결(Connections)"

msgid ""
"Below every heading comes zero or more ``key = value`` pairs. The values can "
"be complex datatypes such as Arrays, Transforms, Colors, and so on. For "
"example, a spatial node looks like:"
msgstr ""

msgid "The scene tree"
msgstr "씬 트리"

msgid ""
"The scene tree is made up of… nodes! The heading of each node consists of "
"its name, parent and (most of the time) a type. For example ``[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]``"
msgstr ""

msgid "Other valid keywords include:"
msgstr ""

#, fuzzy
msgid "``instance``"
msgstr "``inst2dict``"

#, fuzzy
msgid "``instance_placeholder``"
msgstr "``is_instance_valid(obj)``"

#, fuzzy
msgid "``owner``"
msgstr "``Center``"

msgid ""
"``index`` (sets the order of appearance in the tree. If absent, inherited "
"nodes will take precedence over plain ones)"
msgstr ""

#, fuzzy
msgid "``groups``"
msgstr "``그룹 노드``"

msgid ""
"The first node in the file, which is also the scene root, must not have a "
"``parent=Path/To/Node`` entry in its heading. All scene files should have "
"exactly *one* scene root. If it doesn't, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but shouldn't contain the "
"scene root's name. If the node is a direct child of the scene root, the path "
"should be ``\".\"``. Here is an example scene tree (but without any node "
"content):"
msgstr ""

msgid ""
"Similar to the internal resource, the document for each node is currently "
"incomplete. Fortunately, it is easy to find out because you can simply save "
"a file with that node in it. Some example nodes are:"
msgstr ""

msgid "NodePath"
msgstr ""

msgid ""
"A tree structure is not enough to represent the whole scene. Godot uses a "
"``NodePath(Path/To/Node)`` structure to refer to another node or attribute "
"of the node anywhere in the scene tree. For instance, MeshInstance uses "
"``NodePath()`` to point to its skeleton. Likewise, Animation tracks use "
"``NodePath()`` to point to node properties to animate."
msgstr ""

msgid "Skeleton"
msgstr "스켈레톤"

msgid ""
"The Skeleton node inherits the Spatial node, but also may have a list of "
"bones described in key-value pairs in the format ``bones/Id/"
"Attribute=Value``. The bone attributes consist of:"
msgstr ""

msgid "``name``"
msgstr ""

msgid "``parent``"
msgstr ""

msgid "``rest``"
msgstr ""

msgid "``pose``"
msgstr ""

#, fuzzy
msgid "``enabled``"
msgstr "``end``"

#, fuzzy
msgid "``bound_children``"
msgstr "``move_and_collide``"

msgid "``name`` must be the first attribute of each bone."
msgstr ""

msgid ""
"``parent`` is the index of parent bone in the bone list, with parent index, "
"the bone list is built to a bone tree."
msgstr ""

msgid "``rest`` is the transform matrix of bone in its \"resting\" position."
msgstr ""

msgid "``pose`` is the pose matrix; use ``rest`` as the basis."
msgstr ""

msgid ""
"``bound_children`` is a list of ``NodePath()`` which point to "
"BoneAttachments belonging to this bone."
msgstr ""

#, fuzzy
msgid "Here's an example of a skeleton node with two bones:"
msgstr "어떻게 작동하는 지의 예제입니다:"

msgid "BoneAttachment"
msgstr ""

msgid ""
"BoneAttachment node is an intermediate node to describe some node being "
"parented to a single bone in a Skeleton node. The BoneAttachment has a "
"``bone_name=NameOfBone`` attribute, and the corresponding bone being the "
"parent has the BoneAttachment node in its ``bound_children`` list."
msgstr ""

msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr ""

msgid "AnimationPlayer"
msgstr "AnimationPlayer"

msgid ""
"AnimationPlayer works as an animation library. It stores animations listed "
"in the format ``anim/Name=SubResource(ResourceId)``; each line refers to an "
"Animation resource. All the animation resources use the root node of "
"AnimationPlayer. The root node is stored as ``root_node=NodePath(Path/To/"
"Node)``."
msgstr ""

msgid "Resources"
msgstr "리소스"

msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""

msgid ""
"References to the resources are handled by ``id`` numbers in the resource's "
"heading. External resources and internal resources are referred to with "
"``ExtResource(id)`` and ``SubResource(id)``, respectively. Because there "
"have different methods to refer to internal and external resources, you can "
"have the same ID for both an internal and external resource."
msgstr ""

msgid ""
"For example, to refer to the resource ``[ext_resource id=3 "
"type=\"PackedScene\" path=....]``, you would use ``ExtResource(3)``."
msgstr ""

msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of a path, a type and an ID."
msgstr ""

msgid ""
"Godot always generates absolute paths relative to the resource directory and "
"thus prefixed with ``res://``, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""

msgid "Some example external resources are:"
msgstr ""

msgid ""
"Like TSCN files, a TRES file may contain single-line comments starting with "
"a semicolon (``;``). However, comments will be discarded when saving the "
"resource using the Godot editor."
msgstr ""

msgid ""
"A TSCN file can contain meshes, materials and other data. These are "
"contained in the *internal resources* section of the file. The heading for "
"an internal resource looks similar to those of external resources, except "
"that it doesn't have a path. Internal resources also have ``key=value`` "
"pairs under each heading. For example, a capsule collision shape looks like:"
msgstr ""

msgid ""
"Some internal resources contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"*before* the reference to it. This means that order matters in the file's "
"internal resources section."
msgstr ""

msgid ""
"Unfortunately, documentation on the formats for these subresources isn't "
"complete. Some examples can be found by inspecting saved resource files, but "
"others can only be found by looking through Godot's source."
msgstr ""

msgid "ArrayMesh"
msgstr "ArrayMesh"

msgid ""
"ArrayMesh consists of several surfaces, each in the format "
"``surface\\Index={}``. Each surface is a set of vertices and a material."
msgstr ""

msgid "TSCN files support two surface formats:"
msgstr ""

msgid "For the old format, each surface has three essential keys:"
msgstr ""

msgid "``primitive``"
msgstr ""

#, fuzzy
msgid "``arrays``"
msgstr "``Array``"

#, fuzzy
msgid "``morph_arrays``"
msgstr "``Array``"

msgid ""
"``primitive`` is an enumerate variable, ``primitive=4`` which is "
"``PRIMITIVE_TRIANGLES`` is frequently used."
msgstr ""

msgid "``arrays`` is a two-dimensional array, it contains:"
msgstr ""

#, fuzzy
msgid "Vertex positions array"
msgstr "``x.attribute``"

#, fuzzy
msgid "Normals array"
msgstr "지역 변수(Local Variables)"

msgid "Tangents array"
msgstr ""

msgid "Vertex colors array"
msgstr ""

msgid "UV array 1"
msgstr ""

msgid "UV array 2"
msgstr ""

msgid "Bone indexes array"
msgstr ""

#, fuzzy
msgid "Bone weights array"
msgstr "본 무게값"

msgid "Vertex indexes array"
msgstr ""

msgid ""
"``morph_arrays`` is an array of morphs. Each morph is exactly an ``arrays`` "
"without the vertex indexes array."
msgstr ""

msgid "An example of ArrayMesh:"
msgstr ""

msgid "Animation"
msgstr "애니메이션"

msgid ""
"An animation resource consists of tracks. Besides, it has ``length``, "
"``loop`` and ``step`` applied to all the tracks."
msgstr ""

msgid "``length`` and ``step`` are both durations in seconds."
msgstr ""

msgid ""
"Each track is described by a list of key-value pairs in the format ``tracks/"
"Id/Attribute``. Each track includes:"
msgstr ""

msgid "``type``"
msgstr ""

#, fuzzy
msgid "``path``"
msgstr "``$NodePath``"

#, fuzzy
msgid "``interp``"
msgstr "``Center``"

msgid "``keys``"
msgstr ""

msgid "``loop_wrap``"
msgstr ""

msgid "``imported``"
msgstr ""

msgid ""
"The ``type`` must be the first attribute of each track. The value of "
"``type`` can be:"
msgstr ""

#, fuzzy
msgid "``transform``"
msgstr "'변형'"

#, fuzzy
msgid "``value``"
msgstr "'값'"

#, fuzzy
msgid "``method``"
msgstr "메서드"

msgid ""
"The ``path`` has the format ``NodePath(Path/To/Node:attribute)``. It's the "
"path to the animated node or attribute, relative to the root node defined in "
"the AnimationPlayer."
msgstr ""

msgid ""
"The ``interp`` is the method to interpolate frames from the keyframes. It is "
"an enum variable with one of the following values:"
msgstr ""

#, fuzzy
msgid "``0`` (constant)"
msgstr "0 (상수)"

#, fuzzy
msgid "``1`` (linear)"
msgstr "``Mono`` (선택)"

msgid "``2`` (cubic)"
msgstr ""

msgid ""
"The ``keys`` correspond to the keyframes. It appears as a "
"``PoolRealArray()``, but may have a different structure for tracks with "
"different types."
msgstr ""

msgid ""
"A Transform track uses every 12 real numbers in the ``keys`` to describe a "
"keyframe. The first number is the timestamp. The second number is the "
"transition followed by a 3-number translation vector, followed by a 4-number "
"rotation quaternion (X, Y, Z, W) and finally a 3-number scale vector. The "
"default transition in a Transform track is 1.0."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
