# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Listening to player input"
msgstr "에디터의 입력 범위 제한하기"

msgid ""
"Building upon the previous lesson :ref:`doc_scripting_first_script`, let's "
"look at another important feature of any game: giving control to the player. "
"To add this, we need to modify our ``Sprite.gd`` code."
msgstr ""
"이전 강의 :ref:`doc_scripting_first_script`를 바탕으로 게임의 또 다른 중요한 "
"기능인 플레이어에게 제어권을 부여하는 방법을 살펴보겠습니다. 이를 추가하려면 "
"``Sprite.gd`` 코드를 수정해야 합니다."

msgid "You have two main tools to process the player's input in Godot:"
msgstr "Godot에서 플레이어의 입력을 처리하는 두 가지 주요 도구가 있습니다:"

msgid ""
"The built-in input callbacks, mainly ``_unhandled_input()``. Like "
"``_process()``, it's a built-in virtual function that Godot calls every time "
"the player presses a key. It's the tool you want to use to react to events "
"that don't happen every frame, like pressing :kbd:`Space` to jump. To learn "
"more about input callbacks, see :ref:`doc_inputevent`."
msgstr ""
"내장 입력 콜백, 주로 ``_unhandled_input()``. ``_process()``와 마찬가지로, 플"
"레이어가 키를 누를 때마다 Godot가 호출하는 내장 가상 함수입니다. :kbd:`Space`"
"를 눌러 점프하는 것과 같이, 매 프레임마다 발생하는 것은 아닌 이벤트에 반응하"
"는 데 사용할 수 있는 도구입니다. 입력 콜백에 대해 자세히 알아보려면 :ref:"
"`doc_inputevent`를 참조하세요."

msgid ""
"The ``Input`` singleton. A singleton is a globally accessible object. Godot "
"provides access to several in scripts. It's the right tool to check for "
"input every frame."
msgstr ""
"``Input`` 싱글톤. 싱글톤은 전역적으로 액세스 가능한 객체입니다. Godot는 스크"
"립트의 여러 항목에 대한 액세스를 제공합니다. 매 프레임마다 입력을 확인할 때 "
"적합한 도구입니다."

msgid ""
"We're going to use the ``Input`` singleton here as we need to know if the "
"player wants to turn or move every frame."
msgstr ""
"매 프레임마다 플레이어가 회전이나 이동을 원하는지 알아야 하므로 여기서는 "
"``Input`` 싱글턴을 사용할 것입니다."

msgid ""
"For turning, we should use a new variable: ``direction``. In our "
"``_process()`` function, replace the ``rotation += angular_speed * delta`` "
"line with the code below."
msgstr ""
"회전을 위해서는 새 변수 ``direction``를 사용해야 합니다. ``_process()`` 함수"
"에서, ``rotation += angle_speed * delta`` 줄을 아래 코드로 바꾸세요."

msgid ""
"Our ``direction`` local variable is a multiplier representing the direction "
"in which the player wants to turn. A value of ``0`` means the player isn't "
"pressing the left or the right arrow key. A value of ``1`` means the player "
"wants to turn right, and ``-1`` means they want to turn left."
msgstr ""
"우리의 ``direction`` 지역 변수는 플레이어가 회전하려는 방향을 나타내는 곱하"
"는 수입니다. '0' 값은 플레이어가 왼쪽 또는 오른쪽 화살표 키를 누르고 있지 않"
"음을 의미합니다. '1'은 플레이어가 오른쪽, '-1'은 왼쪽으로 돌기를 원한다는 의"
"미입니다."

msgid ""
"To produce these values, we introduce conditions and the use of ``Input``. A "
"condition starts with the ``if`` keyword in GDScript and ends with a colon. "
"The condition is the expression between the keyword and the end of the line."
msgstr ""
"이러한 값을 생성하기 위해, 조건문과 ``Input`` 사용을 소개합니다. 조건문은 "
"GDScript에서 ``if`` 키워드로 시작하고 콜론으로 끝납니다. 조건은 키워드와 줄 "
"끝 사이의 표현식입니다."

msgid ""
"To check if a key was pressed this frame, we call ``Input."
"is_action_pressed()``. The method takes a text string representing an input "
"action and returns ``true`` if the action is pressed, ``false`` otherwise."
msgstr ""
"현재 프레임에서 키가 눌렸는지 확인하기 위해 ``Input.is_action_pressed()``를 "
"호출합니다. 이 메서드는 입력 동작을 나타내는 텍스트 문자열을 가져와 해당 동작"
"이 눌려지면 'true'를 반환하고, 그렇지 않으면 'false'를 반환합니다."

msgid ""
"The two actions we use above, \"ui_left\" and \"ui_right\", are predefined "
"in every Godot project. They respectively trigger when the player presses "
"the left and right arrows on the keyboard or left and right on a gamepad's D-"
"pad."
msgstr ""
"위에서 사용한 \"ui_left\"와 \"ui_right\"는 모든 Godot 프로젝트에 미리 정의되"
"어 있습니다. 플레이어가 키보드의 왼쪽 및 오른쪽 화살표를 누르거나 게임 패드"
"의 D 패드에서 왼쪽 및 오른쪽 화살표를 누를 때 각각 트리거됩니다."

msgid ""
"You can see and edit input actions in your project by going to Project -> "
"Project Settings and clicking on the Input Map tab."
msgstr ""
"프로젝트 -> 프로젝트 설정으로 이동하여 입력 맵 탭을 클릭하면 프로젝트의 입력 "
"작업을 보고 편집할 수 있습니다."

msgid ""
"Finally, we use the ``direction`` as a multiplier when we update the node's "
"``rotation``: ``rotation += angular_speed * direction * delta``."
msgstr ""
"마지막으로 ``direction``을 곱해서 노드의 ``roatation``을 갱신합니다: "
"``rotation += angular_speed * direction * delta``."

msgid ""
"If you run the scene with this code, the icon should rotate when you press :"
"kbd:`Left` and :kbd:`Right`."
msgstr ""
"이 코드로 씬을 실행하면 :kbd:`Left` 및 :kbd:`Right`를 누를 때 아이콘이 회전해"
"야 합니다."

msgid "Moving when pressing \"up\""
msgstr "\"up\"을 눌러 이동하기"

msgid ""
"To only move when pressing a key, we need to modify the code that calculates "
"the velocity. Replace the line starting with ``var velocity`` with the code "
"below."
msgstr ""
"키를 누를 때만 이동하려면, 속도를 계산하는 코드를 수정해야 합니다. ``var "
"Velocity``로 시작하는 줄을 아래 코드로 바꿉니다."

msgid ""
"We initialize the ``velocity`` with a value of ``Vector2.ZERO``, another "
"constant of the built-in ``Vector`` type representing a 2D vector of length "
"0."
msgstr ""
"``velocity``은 ``Vector2.ZERO``로 초기화 한다. 여기서 ``Vector`` 타입의 내장 "
"상수 ``Vector2.ZERO``은 길이가 0인 벡터를 의미한다."

msgid ""
"If the player presses the \"ui_up\" action, we then update the velocity's "
"value, causing the sprite to move forward."
msgstr ""
"플레이어가 \"ui_up\" 액션을 누르면, 속도값을 변경해 스프라이트가 앞으로 이동"
"하게 한다."

#, fuzzy
msgid "Complete script"
msgstr "GDScript 예제"

msgid "Here is the complete ``Sprite.gd`` file for reference."
msgstr "참조용 전체 ``Sprite.gd`` 파일은 다음과 같습니다."

msgid ""
"If you run the scene, you should now be able to rotate with the left and "
"right arrow keys and move forward by pressing :kbd:`Up`."
msgstr ""
"이제 씬을 실행하면 왼쪽 및 오른쪽 화살표 키로 회전하고 :kbd:`Up`을 눌러 앞으"
"로 이동할 수 있어야 합니다."

msgid "Summary"
msgstr "요약"

msgid ""
"In summary, every script in Godot represents a class and extends one of the "
"engine's built-in classes. The node types your classes inherit from give you "
"access to properties like ``rotation`` and ``position`` in our sprite's "
"case. You also inherit many functions, which we didn't get to use in this "
"example."
msgstr ""
"요약하자면, Godot의 모든 스크립트는 클래스를 나타내며 엔진에 내장된 클래스 "
"중 하나를 확장합니다. 클래스가 상속하는 노드 유형은 스프라이트의 경우 "
"``rotation`` 및 ``position`` 과 같은 프로퍼티에 대한 액세스를 제공합니다. 또"
"한 이 예제에서는 사용하지 않은 많은 함수를 상속합니다."

msgid ""
"In GDScript, the variables you put at the top of the file are your class's "
"properties, also called member variables. Besides variables, you can define "
"functions, which, for the most part, will be your classes' methods."
msgstr ""
"GDScript에서 파일 맨 위에 넣는 변수는 클래스의 프로퍼티이며 멤버 변수라고도 "
"합니다. 변수 외에도 함수를 정의할 수 있는데, 대부분의 경우 클래스의 메서드가 "
"될 것입니다."

msgid ""
"Godot provides several virtual functions you can define to connect your "
"class with the engine. These include ``_process()``, to apply changes to the "
"node every frame, and ``_unhandled_input()``, to receive input events like "
"key and button presses from the users. There are quite a few more."
msgstr ""
"Godot은 클래스와 엔진을 연결하기 위해 여러분이 정의할 수 있는 몇 가지 가상 함"
"수를 제공합니다. 여기에는 매 프레임마다 노드에 변경 사항을 적용하는 "
"``_process()`` 와 사용자로부터 키 및 버튼 누름과 같은 입력 이벤트를 수신하는 "
"``_unhandled_input()`` 이 포함됩니다. 이 외에도 꽤 많은 함수가 있습니다."

msgid ""
"The ``Input`` singleton allows you to react to the players' input anywhere "
"in your code. In particular, you'll get to use it in the ``_process()`` loop."
msgstr ""
"``Input`` 싱글톤을 사용하면 코드의 어느 곳에서나 플레이어의 입력에 반응할 수 "
"있습니다. 특히 ``_process()`` 루프에서 이것을 사용하게 될 것입니다."

msgid ""
"In the next lesson :ref:`doc_signals`, we'll build upon the relationship "
"between scripts and nodes by having our nodes trigger code in scripts."
msgstr ""
"다음 단원인 :ref:`doc_signals`에서는 노드가 스크립트에서 코드를 트리거하도록 "
"하여 스크립트와 노드 간의 관계를 구축해 보겠습니다."

msgid "Translation status"
msgstr "번역 상태"
