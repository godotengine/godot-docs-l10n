# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Scripting languages"
msgstr "씬 스크립팅하기"

msgid ""
"This lesson will give you an overview of the available scripting languages "
"in Godot. You will learn the pros and cons of each option. In the next part, "
"you will write your first script using GDScript."
msgstr ""
"이 강의에서는 Godot에서 사용할 수 있는 스크립트 언어들을 살펴볼 것입니다. 옵"
"션 별로 어떤 장점과 단점이 있는지 배워봅시다. 그 다음, GDScript를 사용하여 "
"첫 번째 스크립트를 작성해 보겠습니다."

msgid ""
"**Scripts attach to a node and extend its behavior**. This means that "
"scripts inherit all functions and properties of the node they attach to."
msgstr ""
"**스크립트는 노드에 연결되어 노드의 동작을 확장합니다**. 이는 스크립트가 연결"
"된 노드의 모든 기능과 속성을 상속한다는 의미입니다."

msgid ""
"For example, take a game where a Camera2D node follows a ship. The Camera2D "
"node follows its parent by default. Imagine you want the camera to shake "
"when the player takes damage. As this feature is not built into Godot, you "
"would attach a script to the Camera2D node and code the shake."
msgstr ""
"Camera2D 노드가 배를 따라가는 게임을 예로 들어봅시다. Camera2D 노드는 기본적"
"으로 상위 노드를 따릅니다. 플레이어가 피해를 입을 때 카메라가 흔들리기를 원한"
"다고 상상해 봅시다. 이 기능은 Godot에 내장되어 있지 않으므로, Camera2D 노드"
"에 스크립트를 연결하고 흔들림을 코딩하면 됩니다."

#, fuzzy
msgid "Available scripting languages"
msgstr "다른 스크립팅 언어와 소통하기"

msgid ""
"Godot offers **five gameplay programming languages**: GDScript, C#, "
"VisualScript, and, via its GDNative technology, C and C++. There are more :"
"ref:`community-supported languages "
"<doc_what_is_gdnative_third_party_bindings>`, but these are the official "
"ones."
msgstr ""
"Godot는 **5가지 게임플레이 프로그래밍 언어**를 제공합니다: GDScript, C#, "
"VisualScript와 GDNative 기술을 통한 C와 C++입니다. 더 많은 :ref:`커뮤니티 지"
"원 언어 <doc_what_is_gdnative_third_party_bounds>`가 있지만 이것이 공식적인 "
"언어입니다."

msgid ""
"You can use multiple languages in a single project. For instance, in a team, "
"you could code gameplay logic in GDScript as it's fast to write, let level "
"designers script quests in the graphical language VisualScript, and use C# "
"or C++ to implement complex algorithms and maximize their performance. Or "
"you can write everything in GDScript or C#. It's your call."
msgstr ""
"하나의 프로젝트에서 여러 언어를 사용할 수 있습니다. 예를 들어, 팀에서는 작성 "
"속도가 빠른 GDScript로 게임플레이 로직을 코딩하고, 레벨 디자이너는 그래픽 언"
"어인 VisualScript로 퀘스트를 스크립트하도록 하고, C# 또는 C++를 사용하여 복잡"
"한 알고리즘을 구현하고 성능을 극대화할 수 있습니다. 또는, GDScript나 C#으로 "
"모든 것을 작성해도 됩니다. 원하는 대로 하세요."

msgid ""
"We provide this flexibility to answer the needs of different game projects "
"and developers."
msgstr ""
"우리는 다양한 게임 프로젝트와 개발자의 요구에 부응하기 위해 다양한 선택지를 "
"제공합니다."

msgid ""
"`Godot 4.0 will remove VisualScript from core entirely. <https://godotengine."
"org/article/godot-4-will-discontinue-visual-scripting>`__ As a result, "
"creating new projects using visual scripting in Godot is not recommended. "
"Future Godot 4.x releases may have VisualScript reimplemented as an "
"extension."
msgstr ""
"`Godot 4.0은 비주얼스크립트를 완전히 제거할 것입니다. <https://godotengine."
"org/article/godot-4-will-discontinue-visual-scripting>`__ 결과적으로, Godot에"
"서 비주얼 스크립팅을 사용하는 새로운 프로젝트를 만드는 것은 권장되지 않습니"
"다. 추후의 Godot 4.x 릴리즈는 비주얼스크립트를 재구현하는 확장을 포함할 수도 "
"있습니다."

msgid ""
"While Godot 3.x will keep VisualScript supported, we recommend :ref:`trying "
"out GDScript <toc-learn-scripting-gdscript>` instead, especially if you "
"intend to migrate your project to Godot 4."
msgstr ""
"Godot 3.x 는 비주얼스크립트를 계속 지원하지만, 저희는 그 대안으로 :ref:"
"`GDScript를 시도해보는 것을 <toc-learn-scripting-gdscript>` (특히 여러분이 자"
"신의 프로젝트를 Godot 4로 마이그레이션할 생각이 있으시다면) 권장합니다."

#, fuzzy
msgid "Which language should I use?"
msgstr "어떤 이동 메서드를 사용해야 할까요?"

msgid ""
"If you're a beginner, we recommend to **start with GDScript**. We made this "
"language specifically for Godot and the needs of game developers. It has a "
"lightweight and straightforward syntax and provides the tightest integration "
"with Godot."
msgstr ""
"초보자라면 **GDScript로 시작하기**를 권장합니다. GDScript는 Godot와 게임 개발"
"자의 요구를 위해 특별히 만들어진 언어입니다. GDScript는 가볍고, 문법이 직관적"
"이며 Godot와 가장 긴밀하게 통합되어 있습니다."

msgid ""
"For C#, you will need an external code editor like `VSCode <https://code."
"visualstudio.com/>`_ or Visual Studio. While C# support is now mature, you "
"will find fewer learning resources for it compared to GDScript. That's why "
"we recommend C# mainly to users who already have experience with the "
"language."
msgstr ""
"C#의 경우 `VSCode <https://code.visualstudio.com/>`_ 또는 Visual Studio 등의 "
"외부 코드 편집기가 필요합니다. C# 지원은 이제 성숙해졌지만 GDScript에 비해 학"
"습 리소스가 더 적습니다. 그렇기 때문에 우리는 이미 언어 경험이 있는 사용자에"
"게 주로 C#을 권장합니다."

msgid "Let's look at each language's features, as well as its pros and cons."
msgstr "각 언어의 특징과 장단점을 살펴보겠습니다."

msgid "GDScript"
msgstr "GDScript"

msgid ""
":ref:`GDScript<doc_gdscript>` is an `object-oriented <https://en.wikipedia."
"org/wiki/Object-oriented_programming>`_ and `imperative <https://en."
"wikipedia.org/wiki/Imperative_programming>`_ programming language built for "
"Godot. It's made by and for game developers to save you time coding games. "
"Its features include:"
msgstr ""
":ref:`GDScript<doc_gdscript>`는 Godot용으로 만들어진`객체 지향 <https://en."
"wikipedia.org/wiki/Object- Oriented_programming>`_이자 `명령형 <https://en."
"wikipedia.org/wiki/ Imperative_programming>`_ 프로그래밍 언어입니다. GDScript"
"는 게임 코딩 시간을 단축하기 위해 게임 개발자에 의해, 게임 개발자를 위해 만들"
"어졌습니다. 그 기능은 다음과 같습니다:"

msgid "A simple syntax that leads to short files."
msgstr "파일을 짧게 만드는 간단한 구문."

msgid "Blazing fast compilation and loading times."
msgstr "엄청나게 빠른 컴파일 및 로딩 시간."

#, fuzzy
msgid ""
"Tight editor integration, with code completion for nodes, signals, and more "
"information from the scene it's attached to."
msgstr ""
"에디터 통합은 노드, 시그널, 그리고 많은 편집 중인 씬과 관련된 항목을 위한 코"
"드 완성으로 우리를 즐겁게 합니다."

#, fuzzy
msgid ""
"Built-in vector and transform types, making it efficient for heavy use of "
"linear algebra, a must for games."
msgstr ""
"(Vectors, transforms 등과 같은) 많은 벡터 유형을 지니고 있어서, 선형 대수를 "
"많이 사용하는데 효율적입니다."

#, fuzzy
msgid "Supports multiple threads as efficiently as statically typed languages."
msgstr "정적 타입 언어보다 낮은 퍼포먼스."

msgid ""
"No `garbage collection <https://en.wikipedia.org/wiki/"
"Garbage_collection_(computer_science)>`_, as this feature eventually gets in "
"the way when creating games. The engine counts references and manages the "
"memory for you in most cases by default, but you can also control memory if "
"you need to."
msgstr ""
"게임을 만들 때 방해가 되는 `가비지 컬렉션<https://en.wikipedia.org/wiki/"
"Garbage_collection_(computer_science)>`_없음. 엔진은 대부분의 경우 기본적으"
"로 참조를 계산하고 메모리를 관리하지만 필요한 경우 메모리를 제어할 수도 있음."

msgid ""
"`Gradual typing <https://en.wikipedia.org/wiki/Gradual_typing>`_. Variables "
"have dynamic types by default, but you also can use type hints for strong "
"type checks."
msgstr ""
"`점진적 타이핑 <https://en.wikipedia.org/wiki/Gradual_typing>`_. 변수에는 기"
"본적으로 동적 유형이 있지만 강력한 유형 검사를 위해 유형 힌트 사용 가능."

msgid ""
"GDScript looks like Python as you structure your code blocks using "
"indentations, but it doesn't work the same way in practice. It's inspired by "
"multiple languages, including Squirrel, Lua, and Python."
msgstr ""
"GDScript의 코드 블록은 들여쓰기를 사용해 Python처럼 보이지만, 동일한 방식으"
"로 동작하는 건 아닙니다. GDScript는 Squirrel, Lua, Python을 포함한 여러 언어"
"에서 영감을 받았습니다."

msgid "Why don't we use Python or Lua directly?"
msgstr "그냥 Python이나 Lua를 사용하면 안될까요?"

msgid ""
"Years ago, Godot used Python, then Lua. Both languages' integration took a "
"lot of work and had severe limitations. For example, threading support was a "
"big challenge with Python."
msgstr ""
"몇 년 전, Godot는 Python을 사용했고 이후 Lua를 사용했습니다. 두 언어의 통합에"
"는 많은 작업이 필요했고 심각한 제한이 있었습니다. 예를 들어, 스레딩 지원은 "
"Python의 큰 과제였습니다."

msgid ""
"Developing a dedicated language doesn't take us more work and we can tailor "
"it to game developers' needs. We're now working on performance optimizations "
"and features that would've been difficult to offer with third-party "
"languages."
msgstr ""
"전용 언어를 개발하는 것은 이보다 더 많은 작업이 필요하지 않으며 게임 개발자"
"의 요구에 맞게 조정도 할 수 있습니다. 이제 우리는 서드파티 언어로는 제공하기 "
"어려웠던 성능 최적화 및 기능을 개발 중입니다."

msgid ".NET / C#"
msgstr ".NET / C#"

#, fuzzy
msgid ""
"As Microsoft's `C# <https://en.wikipedia.org/wiki/"
"C_Sharp_(programming_language)>`_ is a favorite amongst game developers, we "
"officially support it. C# is a mature and flexible language with tons of "
"libraries written for it. We could add support for it thanks to a generous "
"donation from Microsoft."
msgstr ""
"Microsoft의 C#은 게임 개발자들 사이에서 사랑받는 언어입니다. 그래서 이 언어"
"를 공식적으로 지원합니다. C#은 많은 코드로 작성된 완전한 언어로, Microsoft의 "
"자비로운 기여 덕분에 지원할 수 있게 되었습니다."

#, fuzzy
msgid ""
"C# offers a good tradeoff between performance and ease of use, although you "
"should be aware of its garbage collector."
msgstr ""
"비록 가비지 컬렉터에 대해 알아야 하지만 이 언어는 성능과 사용 용이성 두 가지"
"를 절충하고 있습니다."

msgid ""
"You must use the Mono edition of the Godot editor to script in C#. You can "
"download it on the Godot website's `download <https://godotengine.org/"
"download/>`_ page."
msgstr ""
"C#으로 스크립트를 작성하려면 Godot 편집기의 Mono 버전을 사용해야 합니다. "
"Godot 웹사이트의 `다운로드<https://godotengine.org/download/>`_ 페이지에서 다"
"운로드할 수 있습니다."

#, fuzzy
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory, you can use any third-party .NET library or framework in Godot, as "
"well as any Common Language Infrastructure-compliant programming language, "
"such as F#, Boo, or ClojureCLR. However, C# is the only officially "
"supported .NET option."
msgstr ""
"Godot가 `Mono <https://mono-project.com>`_ .NET 런타임을 사용하기 때문에, 이"
"론적으로 F#, Boo, ClojureCLR와 같은 공통 언어 기반 호환 프로그래밍 언어를 포"
"함한 모든 제 3자 .NET 라이브러리나 프레임워크를 Godot의 스크립트로 사용할 수 "
"있습니다. 하지만 실제로는 C#만 공식으로 지원하는 .NET 옵션입니다."

msgid ""
"GDScript code itself doesn't execute as fast as compiled C# or C++. However, "
"most script code calls functions written with fast algorithms in C++ code "
"inside the engine. In many cases, writing gameplay logic in GDScript, C#, or "
"C++ won't have a significant impact on performance."
msgstr ""
"GDScript 코드 자체는 컴파일 된 C# 또는 C++만큼 빠르게 실행되지 않습니다. 그러"
"나 대부분의 스크립트 코드는 엔진 내부에서 C++ 코드로 빠른 알고리즘으로 작성"
"된 함수를 호출합니다. 대부분의 경우 GDScript, C# 또는 C++로 게임플레이 로직"
"을 작성해도 성능에 큰 영향을 미치지 않습니다."

msgid "VisualScript"
msgstr "비주얼스크립트(VisualScript)"

msgid ""
":ref:`Visual Scripting<doc_what_is_visual_script>` is a graph-based visual "
"programming language where you connect blocks. It can be a great tool for "
"non-programmers like game designers and artists."
msgstr ""
":ref:`비주얼 스크립팅<doc_what_is_visual_script>`은 블록을 연결하는 그래프 기"
"반의 시각적 프로그래밍 언어입니다. 게임 디자이너나 아티스트와 같이 프로그래머"
"가 아닌 사람들에게도 훌륭한 도구가 될 수 있습니다."

msgid ""
"You can use other languages to create custom blocks that are specific to "
"your game, for example, to script AIs, quests, or dialogues. That's where "
"the strength of VisualScript lies."
msgstr ""
"다른 언어를 사용하여 게임에 특정한 사용자 정의 블록을 만들 수 있습니다(예: "
"AI, 퀘스트 또는 대화 스크립트). VisualScript의 강점은 바로 여기에 있습니다."

msgid ""
"While it provides all the basic building blocks you need to code complete "
"games, we do not recommend to use VisualScript this way. Programming "
"everything with it is slow compared to using other programming languages."
msgstr ""
"VisualScript로도 완전한 게임을 코딩하는 데 필요한 모든 기본 구성 요소가 제공"
"되지만, 이런 방식으로 사용하지 않는 것이 좋습니다. 이 언어로 모든 것을 프로그"
"래밍하는 것은 다른 프로그래밍 언어를 사용하는 것에 비해 느립니다."

msgid ""
"For more information, see :ref:`Getting started with VisualScript "
"<doc_getting_started_visual_script>`."
msgstr ""
"자세한 내용은 :ref:`VisualScript 시작하기 "
"<doc_getting_started_visual_script>`를 참조하세요."

msgid "C and C++ via GDNative"
msgstr "GDNative를 통한 C 및 C++"

#, fuzzy
msgid ""
"GDNative allows you to write game code in C or C++ without needing to "
"recompile or even restart Godot."
msgstr ""
"마지막으로 3.0 출시에서 가장 빛나는 추가 요소입니다: GDNative는 Godot를 다시 "
"컴파일하지 않아도 (심지어 재시작하지 않아도) C++로 스크립팅할 수 있게 해줍니"
"다."

#, fuzzy
msgid ""
"You can use any version of the language or mix compiler brands and versions "
"for the generated shared libraries, thanks to our use of an internal C API "
"Bridge."
msgstr ""
"내부 C API Bridge를 사용한 덕분에 모든 C++버전을 사용할 수 있고, 생성된 공유 "
"라이브러리의 컴파일러 브랜드와 버전을 완벽하게 혼합할 수 있습니다."

#, fuzzy
msgid ""
"GDNative is the best choice for performance. You don't need to use it "
"throughout an entire game, as you can write other parts in GDScript, C#, or "
"VisualScript."
msgstr ""
"이 언어는 성능에 있어서는 최고이지만 게임 전체에 사용할 필요는 없습니다. "
"GDScript나 VisualScript을 통해 다른 부분을 작성할 수 있기 때문이죠. 그러나 "
"GDNative의 API는 Godot의 실제 C++ API와 유사하기 때문에 명확하고 사용하기 쉽"
"습니다."

msgid ""
"When working with GDNative, the available types, functions, and properties "
"closely resemble Godot's actual C++ API."
msgstr ""
"GDNative로 작업할 때, 사용 가능한 타입과 함수 및 속성은 Godot의 실제 C++ API"
"와 매우 유사합니다."

msgid "Summary"
msgstr "요약"

msgid ""
"Scripts are files containing code that you attach to a node to extend its "
"functionality."
msgstr ""
"스크립트는 노드의 기능을 확장하기 위해 연결하는 코드가 포함된 파일입니다."

msgid ""
"Godot supports five official scripting languages, offering you flexibility "
"between performance and ease of use."
msgstr ""
"Godot는 5개의 공식 스크립트 언어를 지원하여 성능과 사용 편의성 사이의 유연성"
"을 제공합니다."

msgid ""
"You can mix languages, for instance, to implement demanding algorithms with "
"C or C++ and write most of the game logic with GDScript or C#."
msgstr ""
"예를 들어, C 또는 C++로 까다로운 알고리즘을 구현하고 그 외 대부분의 게임 로직"
"을 GDScript 또는 C#으로 작성하는 식으로 여러 언어를 사용할 수 있습니다."

msgid "Translation status"
msgstr "번역 상태"
