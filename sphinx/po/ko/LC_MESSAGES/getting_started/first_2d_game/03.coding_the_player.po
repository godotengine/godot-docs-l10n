# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Coding the player"
msgstr "플레이어 움직이기"

msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr ""

#, fuzzy
msgid ""
"To do so, we need to add some functionality that we can't get from a built-"
"in node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"이제 내장 노드 만으로는 얻을 수 없는 몇 가지 기능을 추가해야 하므로 스크립트"
"를 만들겁니다. ``Player`` 노드를 클릭하고 \"스크립트 추가(Attach Script)\" 버"
"튼을 누르세요:"

msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"스크립트 설정 창은 기본 설정으로 냅두어도 됩니다. 그냥 \"만들기(Create)\"를 "
"누르세요:"

msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"C#이나 다른 언어로 스크립트를 만들려면 만들기를 누르기 전에 `언어(language)` "
"드롭 다운 메뉴에서 언어를 선택하세요."

msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""

msgid "Start by declaring the member variables this object will need:"
msgstr "이 오브젝트가 필요로 하는 멤버 변수를 선언함으로써 시작합시다:"

msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"첫 번째 변수인 ``speed``\\ 에 ``export`` 키워드를 사용하면 인스펙터"
"(Inspector) 내에서 값을 설정할 수 있습니다. 인스펙터(Inspector)에서도 원하는 "
"값으로 조정할 수 있어서 편리합니다. ``Player`` 노드를 선택하면 인스펙터"
"(Inspector)의 \"Script Variables\" 섹션에 나타납니다. 여기서 값을 바꾸면 스크"
"립트에 작성한 값을 오버라이드한다는 점을 기억하세요."

msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"여러분이 C#을 사용한다면, 새로운 외부변수(export variables)나 시그널을 보기 "
"위해서 프로젝트 구성물(assemblies)을 다시 빌드할 필요가 있습니다. 이 컴파일"
"은 에디터 밑의 \"Mono\" 단어를 클릭해 Mono 패널이 나타나게 한 후 \"프로젝트 "
"빌드(Build Project)\" 버튼을 눌러서 수동으로 진행됩니다."

msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 함수는 노드가 씬 트리에 들어올 때 호출되는데, 이 때가 게임 창의 "
"크기를 알아보기 좋은 순간입니다:"

msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"이제 ``_process()`` 함수를 사용해서 플레이어가 무엇을 할 지 정의할 수 있습니"
"다. ``_process()``\\ 는 매 프레임마다 호출되므로, 게임에서 자주 변하는 요소들"
"을 업데이트하기 위해서 사용할 수 있습니다. 플레이어에게는, 다음과 같은 작업"
"이 필요합니다:"

msgid "Check for input."
msgstr "입력을 확인."

msgid "Move in the given direction."
msgstr "주어진 방향으로 이동."

msgid "Play the appropriate animation."
msgstr "적절한 애니메이션을 재생."

#, fuzzy
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this game, "
"we will map the arrow keys to the four directions."
msgstr ""
"먼저, 입력을 확인해야 합니다 - 플레이어가 키를 누르는 중일까요? 이 게임에서, "
"우리는 방향키 입력을 확인해야 합니다. 입력 액션은 프로젝트 설정(Project "
"Settings)의 \"입력 맵(Input Map)\"에 정의되어 있습니다. 여기에서 사용자 지정 "
"이벤트를 정의하고 여기에 다른 키, 마우스 이벤트, 혹은 다른 입력을 할당할 수"
"도 있습니다. 이 데모에서, 우리는 키보드의 방향키가 할당된 기본 이벤트를 사용"
"할 것입니다."

msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""

msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"then click the \"Key\" option in the drop-down menu. A dialog asks you to "
"type in the desired key. Press the right arrow on your keyboard and click "
"\"Ok\"."
msgstr ""

msgid "Repeat these steps to add three more mappings:"
msgstr ""

msgid "``move_left`` mapped to the left arrow key."
msgstr ""

msgid "``move_up`` mapped to the up arrow key."
msgstr ""

msgid "And ``move_down`` mapped to the down arrow key."
msgstr ""

#, fuzzy
msgid "Your input map tab should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

msgid "Click the \"Close\" button to close the project settings."
msgstr ""

msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""

msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()``\\ 를 사용해서 키가 눌러졌는지를 감지할 수 있는"
"데, 눌러지면 ``true`` 값을 반환하고 그렇지 않으면 ``false`` 값을 반환합니다."

msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"먼저 ``velocity``\\ 를 ``(0, 0)``\\ 으로 설정합니다. 기본적으로 플레이어는 움"
"직이지 않아야 합니다. 그런 다음 각 입력을 확인하고 ``velocity``\\ 에서 더하거"
"나 빼서 최종 방향을 얻습니다. 예를 들어, ``오른쪽 방향키``\\ 와 ``아래쪽 방향"
"키``\\ 을 동시에 누르고 있으면 결과 ``velocity`` 벡터는 ``(1, 1)``\\ 이 됩니"
"다. 이 경우 동시에 수평과 수직 방향으로 이동하기 때문에 플레이어는 수평으로 "
"이동할 때보다 대각선으로 *더 빠르게* 이동합니다."

msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"우리는 velocity를 *정규화(normalize)*\\하면, 즉 velocity의 *길이(length)*\\ "
"를 ``1``\\ 로 설정한 다음, 원하는 속도를 곱하면 이 문제를 방지할 수 있습니"
"다. 이렇게 하면 더 이상 대각선 방향 이동속도가 더 빠르지 않습니다."

msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"이제까지 벡터 수학을 안 써봤거나 복습이 필요하다면 :ref:`doc_vector_math`\\ "
"에서 Godot에서 벡터를 어떻게 사용하는지 볼 수 있습니다. 보면 좋지만 나머지 튜"
"토리얼을 위해 꼭 필수적인 것은 아닙니다."

#, fuzzy
msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"이제 AnimatedSprite에서 ``play()``\\ 와 ``stop()``\\ 을 호출할 수 있도록 플레"
"이어가 움직이고 있는지를 확인할 것입니다."

#, fuzzy
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, "
"``$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$``\\ 는 ``get_node()``\\ 의 줄임말입니다. 그래서 위의 코드인 "
"``$AnimatedSprite.play()``\\ 는 ``get_node(\"AnimatedSprite\").play()``\\ 와 "
"같습니다."

#, fuzzy
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"GDScript에서, ``$``\\ 는 현재 노드에서 상대적인 경로에 있는 노드를 반환하거"
"나, 노드가 없다면 ``null`` 값을 반환합니다. AnimatedSprite가 현재 노드의 자식"
"인 상태이므로, ``$AnimatedSprite``\\ 를 사용할 수 있습니다."

msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"이동 방향이 있으므로 이제 플레이어의 위치를 업데이트할 수 있습니다. 또한 "
"``clamp()``\\ 를 사용해 플레이어가 화면에서 나가는 것을 방지할 수 있습니다. *"
"클램핑(Clamping)*\\ 은 값을 주어진 범위로 제한하는 것을 의미합니다. "
"``_process`` 함수의 맨 아래에 다음을 추가합니다(`else` 아래에 들여쓰기가 되"
"어 있지 않은지 확인하세요):"

msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()` 함수에 있는 매개변수 `delta` 는 (이전 프레임이 완료되는데 걸린 "
"시간인) \"프레임 길이(frame length)\" 를 참조합니다. 이 값을 사용하면 프레임 "
"레이트가 변경되어도 플레이어의 이동속도를 항상 일정하게 유지할 수 있습니다."

#, fuzzy
msgid ""
"Click \"Play Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm you "
"can move the player around the screen in all directions."
msgstr ""
"\"씬 실행(Play Scene)\" (``F6``)을 누르고 플레이어가 화면 내에서 모든 방향으"
"로 움직일 수 있는지 확인하세요."

msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "\"디버거(Debugger)\" 패널에 다음과 같은 오류가 표시되는 경우"

msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"

#, fuzzy
msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"이는 AnimatedSprite 노드의 이름을 잘못 입력했음을 의미합니다. 노드 이름은 대"
"소문자를 구분하며 ``$NodeName``\\ 또는 ``get_node(\"NodeName\")``\\ 이 씬 트"
"리에 표시되는 이름과 일치해야 합니다."

msgid "Choosing animations"
msgstr "애니메이션 고르기"

#, fuzzy
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"이제 플레이어가 이동할 수 있으므로 방향에 따라 AnimatedSprite가 재생 중인 애"
"니메이션을 변경해야 합니다. 플레이어가 오른쪽으로 걷는 것을 보여주는 "
"\"walk\" 애니메이션이 있습니다. 이 애니메이션은 왼쪽 이동을 위해 ``flip_h`` "
"속성을 사용해 수평으로 뒤집혀져야 합니다. 아래로 이동하려면 ``flip_v``\\ 로 "
"수직으로 뒤집혀져야 하는 \"up\" 애니메이션도 있습니다. 이 코드를 "
"``_process()`` 함수의 끝에 배치해 보겠습니다:"

msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"위 코드의 불리언(boolean) 값 할당은 프로그래머를 위한 일반적인 축약입니다. 우"
"리는 비교 테스트(boolean)를 수행하고 또한 boolean 값을 *할당*하기 때문에 두 "
"가지를 동시에 수행할 수 있습니다. 아래 코드와 위의 한 줄 부울 할당 명령문을 "
"비교해보세요:"

msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr "씬을 다시 재생하고 애니메이션이 각 방향에서 올바른지 확인합니다."

msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"흔한 실수로 애니메이션 이름을 잘못 입력합니다. SpriteFrames 패널의 애니메이"
"션 이름은 코드에 입력한 것과 일치해야 합니다. 애니메이션 이름을 "
"``\"Walk\"``\\ 으로 지은 경우 코드에 대문자 \"W\"를 사용해야 합니다."

msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"플레이어가 제대로 움직이고 있다고 생각하면 다음 줄을 ``_ready()``\\ 에 추가해"
"보세요. 게임이 시작될 때 플레이어가 숨겨집니다:"

msgid "Preparing for collisions"
msgstr "콜리전 준비하기"

msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"우리는 ``Player``\\ 가 적과 닿았다는 것을 감지하길 원하지만 아직 적을 만들지 "
"않았습니다! 충돌이 작동하도록 우리는 Godot의 *시그널(signal)* 기능을 사용할 "
"것이기 때문에 괜찮습니다."

msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "스크립트 맨 위 ``extends Area2D`` 다음에 아래 코드를 추가하세요:"

msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"이것은 적과 충돌할 때 플레이어가 방출하는 \"hit\"라는 사용자 지정 시그널을 정"
"의합니다. 충돌을 감지하기 위해 ``Area2D``\\ 를 사용합니다. ``Player`` 노드를 "
"선택하고 인스펙터(Inspector) 독 옆에 있는 \"노드(Node)\" 독을 클릭해 플레이어"
"가 방출할 수 있는 시그널 목록을 확인해보세요:"

msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"우리의 커스텀 \"hit\" 시그널도 거기에 있다는 점에 주목하세요! 적들은 "
"``RigidBody2D`` 노드가 될 것이기 때문에, 우리는 ``body_entered(body: Node)`` "
"시그널이 필요합니다. 이 시그널을 적과 플레이어와 닿았을 때 방출할 것입니다. "
"\"연결(Connect)\"을 누르면 \"시그널을 메서드에 연결(Connect a Signal to a "
"Method)\" 창이 열립니다. 우리는 어떤 설정도 바꿀 필요가 없으므로 \"연결"
"(Connect)\"을 누르세요. - Godot는 자동으로 플레이어 스크립트에 함수를 생성해"
"줍니다."

msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"시그널이 이 기능에 연결되었음을 나타내는 녹색 아이콘에 유의하세요. 다음 코드"
"를 함수에 추가하세요:"

msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"적이 플레이어에 충돌할 때마다 시그널이 방출됩니다. 우리는 두 번 이상 ``hit`` "
"시그널이 발동되지 않도록 플레이어의 콜리전을 비활성화 해야 합니다."

msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"엔진의 충돌 처리 도중에 영역의 콜리전 모양을 비활성화하면 오류가 발생할 수 있"
"습니다. ``set_deferred()``\\ 를 사용하면 Godot가 모양을 비활성화 하기에 안전"
"해질 때까지 기다려줍니다."

msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"마지막으로 새로운 게임을 시작할 때 플레이어를 초기화하기 위해 호출할 수 있는 "
"함수를 추가합니다."

msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
