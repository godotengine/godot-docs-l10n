# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating the player scene"
msgstr "애니메이션 만들기"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"첫 번째 씬은 ``Player`` 오브젝트를 정의합니다. 별도의 플레이어 씬을 만드는 것"
"의 장점 중 하나는 게임의 다른 부분을 만들기 전에도 별도로 테스트할 수 있다는 "
"것입니다."

msgid "Node structure"
msgstr "노드 구조"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"시작하려면 플레이어 오브젝트의 루트 노드를 선택해야 합니다. 일반적으로 씬의 "
"루트 노드는 개체가 원하는 기능, 즉 개체가 *무엇*인지를 반영해야 합니다. \"다"
"른 노드(Other Node)\" 버튼을 클릭하고 씬에 :ref:`Area2D <class_Area2D>` 노드"
"를 추가하세요."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot는 씬 트리에서 노드 옆에 경고 아이콘을 보여줍니다. 지금은 무시해도 됩니"
"다. 나중에 다룰 것입니다."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D``\\ 를 사용하면 플레이어와 겹치거나 충돌하는 물체를 감지할 수 있습니"
"다. 노드를 두 번 클릭하여 노드 이름을 ``Player``\\ 로 변경하세요. 이제 씬의 "
"루트 노드를 설정했으므로 노드를 추가해 더 많은 기능을 줄 수 있습니다."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` 노드에 자식을 추가하기 전에, 실수로 자식을 클릭해서 자식이 움직이"
"거나 크기가 바뀌지 않도록 해야 합니다. 노드를 선택하고 자물쇠 오른쪽에 있는 "
"아이콘을 클릭하세요. 노드의 툴 팁에는 \"오브젝트의 자식을 선택하지 않도록 합"
"니다.\" 라고 표시됩니다."

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"씬을 저장합니다. 씬(Scene) -> 씬 저장(Save Scene)을 클릭하거나 Windows/Linux"
"에서는 :kbd:`Ctrl + S`\\ 를, Mac에서는 :kbd:`Cmd + S`\\ 를 누르세요."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 파스칼 표기법(PascalCase)을 사용하고, 변수와 함"
"수는 스네이크_표기법(snake_case)을 사용하며, 상수는 전부 대문자(ALL_CAPS)를 "
"사용합니다(:ref:`doc_gdscript_styleguide` 참조)."

#, fuzzy
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: 클래스, export 변수 그리고 메서드는 파스칼 표기법(PascalCase)을 사용"
"합니다. private 필드는 카멜 표기법(_camelCase)를 사용합니다. 지역변수와 매개"
"변수는 카멜 표기법(camelCase)을 사용합니다(:ref:`doc_c_sharp_styleguide` 참"
"고). 시그널을 연결할 때는 메서드 이름을 정확하게 입력하도록 주의하세요."

msgid "Sprite animation"
msgstr "스프라이트 애니메이션"

#, fuzzy
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"``Player`` 노드를 클릭하고 :ref:`AnimatedSprite <class_AnimatedSprite>` 노드"
"를 자식으로 추가하세요. ``AnimatedSprite``\\ 는 플레이어의 모양과 애니메이션"
"을 처리합니다. 노드 옆을 보면 주의 표시가 있습니다. ``AnimatedSprite``\\ 에"
"는 표시할 수 있는 애니메이션 목록인 :ref:`SpriteFrames <class_SpriteFrames>` "
"리소스가 필요합니다. 리소스를 만들려면 인스펙터(Inspector)에서 ``Frames`` 속"
"성을 찾아, \"[비었음]([empty])\" -> \"새 SpriteFrames(New SpriteFrames)\"를 "
"클릭하세요. 이러면 자동으로 \"SpriteFrames\" 패널이 열립니다:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"왼쪽에는 애니메이션 목록이 있습니다. \"default\"를 클릭하고 이름을 "
"\"right\"로 바꾸세요. 그런 다음 \"새 애니메이션(New Animation)\" 버튼을 클릭"
"해 \"up\"이라는 두 번째 애니메이션을 만드세요. \"파일시스템(FileSystem)\" 독"
"에서 플레이어 이미지를 찾으세요. 이 이미지는 이전에 압축을 푼 ``art`` 폴더 안"
"에 있습니다. ``playerGrey_up[1/2]``\\ 와 ``playerGrey_walk[1/2]`` 두 개의 이"
"미지를 해당 애니메이션에 대한 패널의 \"애니메이션 프레임(Animation Frame)\" "
"쪽으로 끌어다 놓으세요:"

#, fuzzy
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"플레이어 이미지가 게임 창에 비해 너무 크기 때문에, 크기를 줄여야 합니다. "
"``AnimatedSprite`` 노드를 클릭하고 ``Scale`` 속성을 ``(0.5, 0.5)``\\ 로 설정"
"하세요. 인스펙터(Inspecter)의 ``Node2D`` 에서 찾을 수 있습니다."

#, fuzzy
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"마지막으로, :ref:`CollisionShape2D <class_CollisionShape2D>`\\ 를 "
"``Player``\\ 의 자식으로 추가하세요. 이것이 플레이어의 \"히트박스(hitbox)\", "
"즉 콜리전 영역을 결정합니다. 이 캐릭터에게는 ``CapsuleShape2D`` 노드가 가장 "
"적합합니다, 그러므로 인스펙터(Inspecter)의 \"Shape\" 옆에 \"[비었음]"
"([empty])\" -> \"새 CapsuleShape2D(New CapsuleShape2D)\"를 클릭하세요. 스프라"
"이트 전체를 덮도록 두 개의 크기 핸들로 콜리전 영역 크기를 조절하세요:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

msgid "Make sure to save the scene again after these changes."
msgstr "이러한 변경 후에 씬을 다시 저장하는 것을 잊지 마세요."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
