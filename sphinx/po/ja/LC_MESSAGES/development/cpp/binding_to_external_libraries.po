# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Binding to external libraries"
msgstr "外部ライブラリへのバインド"

msgid "Modules"
msgstr "モジュール"

#, fuzzy
msgid ""
"The Summator example in :ref:`doc_custom_modules_in_c++` is great for small, "
"custom modules, but what if you want to use a larger, external library? "
"Let's look at an example using `Festival <http://www.cstr.ed.ac.uk/projects/"
"festival/>`_, a speech synthesis (text-to-speech) library written in C++."
msgstr ""
":ref:`doc_custom_modules_in_c++` のSummatorの例は、小さなカスタムモジュールに"
"最適ですが、より大きな外部ライブラリを使用する場合はどうでしょうか？ C++で作"
"成された音声合成(テキスト読み上げ)ライブラリであるFestivalを使用した例を見て"
"みましょう。"

msgid ""
"To bind to an external library, set up a module directory similar to the "
"Summator example:"
msgstr ""
"外部ライブラリにバインドするには、Summatorの例のようなモジュールディレクトリ"
"をセットアップします:"

msgid "Next, you will create a header file with a simple TTS class:"
msgstr "次に、単純なTTSクラスを使用してヘッダーファイルを作成します:"

msgid "And then you'll add the cpp file."
msgstr "そして、cppファイルを追加します。"

msgid ""
"Just as before, the new class needs to be registered somehow, so two more "
"files need to be created:"
msgstr ""
"前と同じように、新しいクラスを何らかの方法で登録する必要があるため、さらに2つ"
"のファイルを作成する必要があります:"

msgid ""
"These files must be in the top-level folder of your module (next to your "
"``SCsub`` and ``config.py`` files) for the module to be registered properly."
msgstr ""

#, fuzzy
msgid "These files should contain the following:"
msgstr "このコードは、次の動作を提供します:"

msgid ""
"Next, you need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""
"次に、ビルドシステムがこのモジュールをコンパイルするように ``SCsub`` ファイル"
"を作成する必要があります:"

#, fuzzy
msgid ""
"You'll need to install the external library on your machine to get the .a "
"library files. See the library's official documentation for specific "
"instructions on how to do this for your operation system. We've included the "
"installation commands for Linux below, for reference."
msgstr ""
".aライブラリファイルを取得するには、マシンに外部ライブラリをインストールする"
"必要があります。ご使用のオペレーティングシステムでこれを行う具体的な手順につ"
"いては、ライブラリの公式ドキュメントを参照してください。参考のために、Linuxの"
"インストールコマンドを以下に示します。"

#, fuzzy
msgid ""
"The voices that Festival uses (and any other potential external/3rd-party "
"resource) all have varying licenses and terms of use; some (if not most) of "
"them may be be problematic with Godot, even if the Festival Library itself "
"is MIT License compatible. Please be sure to check the licenses and terms of "
"use."
msgstr ""
"**重要:** Festivalが使用する音声(およびその他の潜在的な外部/サードパーティリ"
"ソース)にはすべて、さまざまなライセンスと使用条件があります。Festivalライブラ"
"リ自体がMITライセンス互換である場合でも、それらの一部(ほとんどではないにして"
"も)がGodotに問題がある可能性があります。ライセンスと使用条件を必ず確認してく"
"ださい。"

#, fuzzy
msgid ""
"The external library will also need to be installed inside your module to "
"make the source files accessible to the compiler, while also keeping the "
"module code self-contained. The festival and speech_tools libraries can be "
"installed from the modules/tts/ directory via git using the following "
"commands:"
msgstr ""
"外部ライブラリもモジュール内にインストールして、ソースファイルにコンパイラか"
"らアクセスできるようにすると同時に、モジュールコードを自己完結させたままにす"
"る必要があります。 festivalおよびspeech_toolsライブラリは、次のコマンドを使用"
"して、gitを介してmodules/ tts/ディレクトリからインストールできます:"

msgid ""
"If you don't want the external repository source files committed to your "
"repository, you can link to them instead by adding them as submodules (from "
"within the modules/tts/ directory), as seen below:"
msgstr ""
"外部リポジトリのソースファイルをリポジトリにコミットしたくない場合は、以下に"
"示すように(modules/tts/ディレクトリ内から)サブモジュールとして追加することに"
"より、外部リポジトリソースファイルにリンクできます:"

#, fuzzy
msgid ""
"Please note that Git submodules are not used in the Godot repository. If you "
"are developing a module to be merged into the main Godot repository, you "
"should not use submodules. If your module doesn't get merged in, you can "
"always try to implement the external library as a GDNative C++ plugin."
msgstr ""
"**重要:** GitサブモジュールはGodotリポジトリでは使用されないことに注意してく"
"ださい。メインのGodotリポジトリにマージするモジュールを開発している場合、サブ"
"モジュールを使用しないでください。モジュールがマージされない場合は、外部ライ"
"ブラリをGDNative C++プラグインとしていつでも実装できます。"

msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr ""
"コンパイラが見るインクルードディレクトリを追加するには、環境のパスに追加しま"
"す:"

msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone `env` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example `SCsub` with custom flags:"
msgstr ""
"モジュールのビルド時にカスタムコンパイラフラグを追加する場合は、最初に `env` "
"のクローンを作成する必要があるので、これらのフラグはGodotビルド全体に追加され"
"ません(エラーが発生する可能性があります)。カスタムフラグを使用した `SCsub` の"
"例:"

msgid "The final module should look like this:"
msgstr "最終的なモジュールは次のようになります:"

msgid "Using the module"
msgstr "モジュールの使用"

msgid "You can now use your newly created module from any script:"
msgstr "これで、任意のスクリプトから新しく作成したモジュールを使用できます:"

msgid "And the output will be ``is_spoken: True`` if the text is spoken."
msgstr "テキストが読み上げられた場合、出力は ``is_spoken: True`` になります。"

msgid "Translation status"
msgstr "翻訳ステータス"
