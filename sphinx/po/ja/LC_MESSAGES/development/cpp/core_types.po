# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Core types"
msgstr "コアタイプ"

msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""
"Godot には、そのコアを構成する豊富なクラスとテンプレートのセットがあり、すべ"
"てがその上に構築されています。"

msgid ""
"This reference will try to list them in order for their better understanding."
msgstr "このリファレンスでは、理解を深めるためにそれらをリストしようとします。"

msgid "Definitions"
msgstr "定義"

#, fuzzy
msgid ""
"Godot uses the standard C99 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""
"Godot は、現在すべてのコンパイラでサポートされている標準のC98データ型 "
"( ``uint8_t``、 ``uint32_t`` 、 ``int64_t`` など) を使用します。それらのホ"
"イールを再発明するのは楽しくありません。コードを読みにくくするからです。"

msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""
"一般に、大きな構造体や配列を使用しない限り、特定のタスクで最も効率的なデータ"
"型を使用するようには注意が必要です。 ``int`` は、必要な場合を除き、ほとんどの"
"コードで使用されます。これは、今日ではすべてのデバイスが少なくとも32ビットバ"
"スを持っており、1サイクルでそのような操作を行うことができるので行われます。"
"コードも読みやすくなります。"

msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr ""
"ファイルまたはメモリサイズの場合は、 ``size_t`` が使用され、64ビットであるこ"
"とが保証されます。"

msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""
"Unicode文字の場合、多くのアーキテクチャには4バイトの長いwchar_tがあり、2バイ"
"トが必要な場合があるため、wchar_tの代わりにCharTypeが使用されます。ただし、デ"
"フォルトでは、これは強制されておらず、CharTypeはwchar_tに直接マップされます。"

msgid "References:"
msgstr "リファレンス:"

#, fuzzy
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/"
"typedefs.h>`__"
msgstr ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/master/core/"
"typedefs.h>`_"

msgid "Memory model"
msgstr "メモリモデル"

msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""
"PCは素晴らしいアーキテクチャです。多くの場合、コンピューターにはギガバイトの"
"RAM、テラバイトのストレージ、ギガヘルツのCPUがあり、アプリケーションがさらに"
"リソースを必要とすると、OSは非アクティブなリソースをスワップアウトします。そ"
"の他のアーキテクチャ(モバイルやコンソールなど)は、一般的にもっと制限されてい"
"ます。"

msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""
"最も一般的なメモリモデルはヒープです。ヒープは、アプリケーションがメモリの領"
"域を要求し、基盤となるOSがそれをどこかに適合させて返すことを試みます。これ"
"は、多くの場合、最適に機能し、柔軟性がありますが、時間が経つと乱用されると、"
"セグメンテーションにつながる可能性があります。"

msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""
"セグメンテーションでは、ほとんどの一般的な割り当てには小さすぎるホールがゆっ"
"くりと作成されるため、メモリが浪費されます。ヒープとセグメンテーションについ"
"ては多くの文献があるため、ここではこのトピックについては詳しく説明しません。"
"最近のオペレーティング・システムはページ・メモリーを使用するため、セグメン"
"テーションの問題は緩和されますが、解決されません。"

msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""
"ただし、多くの調査とテストでは、十分なメモリがある場合、最大ヒープサイズと未"
"使用のメモリの割合に比例して最大割り当てサイズが所定のしきい値を下回っていれ"
"ば、時間が経過してもセグメンテーションは一定のままで、問題にならないことが示"
"されています。つまり、メモリの10〜20％を空けて、小さな割り当てですべて実行す"
"れば大丈夫です。"

msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""
"Godotは、動的に割り当てることができるすべてのオブジェクトが小さいことを要求し"
"ます(せいぜい数KB未満)。しかし、割り当てが大きすぎるとどうなりますか(画像や"
"メッシュジオメトリ、大きな配列など)？この場合、Godotには動的メモリプールを使"
"用するオプションがあります。このメモリにアクセスするにはロックする必要があ"
"り、割り当てがメモリ不足になると、プールは必要に応じて再配置および圧縮されま"
"す。ゲームのニーズに応じて、プログラマは動的メモリプールサイズを構成できま"
"す。"

msgid "Allocating memory"
msgstr "メモリの割り当て"

msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""
"Godot には、特にデバッグ中にゲーム内のメモリ使用量を追跡するための多くのツー"
"ルがあります。このため、通常のCおよびC++ライブラリ呼び出しは使用しないでくだ"
"さい。代わりに、他にもいくつか用意されています。"

msgid "For C-style allocation, Godot provides a few macros:"
msgstr "Cスタイルの割り当てでは、Godotはいくつかのマクロを提供します:"

msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr ""
"これらは、標準Cライブラリに含まれる通常のmalloc、realloc、freeと同等です。"

msgid "For C++-style allocation, special macros are provided:"
msgstr "C++スタイルの割り当てでは、特別なマクロが提供されます:"

msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr "これは、new、delete、new[]およびdelete[]と同じです。"

msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""
"memnew/memdeleteはまた、小さなC++マジックを使用し、オブジェクトが作成された直"
"後に、そして削除される直前にオブジェクトに通知します。"

msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""
"動的メモリの場合、PoolVector<> テンプレートが提供されます。PoolVectorは標準の"
"vectorクラスであり、C++標準ライブラリのvectorに非常に似ています。 PoolVector"
"バッファーを作成するには、これを使用します:"

msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr ""
"PoolVectorは、[]演算子を使用してアクセスできます。このためのヘルパーがいくつ"
"かあります:"

msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""
"これらの操作により、PoolVectorからの高速な読み取り/書き込みが可能になり、範囲"
"外になるまでロックを保持します。ただし、大量のアクセスに対してはread()と"
"write()が遅すぎるため、PoolVectorは小さな動的メモリの操作に使用する必要があり"
"ます。"

#, fuzzy
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/"
"memory.h>`__"
msgstr ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/"
"memory.h>`_"

#, fuzzy
msgid ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/"
"pool_vector.cpp>`__"
msgstr ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/master/core/"
"pool_vector.cpp>`__"

msgid "Containers"
msgstr "コンテナ"

msgid "Godot provides also a set of common containers:"
msgstr "Godot には、一般的なコンテナのセットも用意されています:"

msgid "Vector"
msgstr "Vector"

msgid "List"
msgstr "List"

msgid "Set"
msgstr "Set"

msgid "Map"
msgstr "\\ Map"

msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""
"C++のテンプレートは多くの場合インライン化され、デバッグシンボルとコードの両方"
"でバイナリサイズがかなり大きくなるため、これらはシンプルで、可能な限り最小限"
"にすることを目指しています。List、Set、およびMapは、次のようにポインターを使"
"用して反復できます:"

msgid "The Vector<> class also has a few nice features:"
msgstr "Vector<> クラスには、いくつかの優れた機能もあります:"

msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr ""
"書き込み時にコピーするので、変更しない限りコピーを作成する方が安価です。"

msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr ""
"参照カウンタでアトミック操作を使用して、マルチスレッドをサポートします。"

#, fuzzy
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector."
"h>`__"
msgstr ""
"`core/vector.h <https://github.com/godotengine/godot/blob/master/core/vector."
"h>`_"

#, fuzzy
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"
msgstr ""
"`core/list.h <https://github.com/godotengine/godot/blob/master/core/list.h>`_"

#, fuzzy
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"
msgstr ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`_"

#, fuzzy
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"
msgstr ""
"`core/map.h <https://github.com/godotengine/godot/blob/master/core/map.h>`_"

msgid "String"
msgstr "文字列"

msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""
"GodotはStringクラスも提供しています。このクラスには、膨大な量の機能、すべての"
"関数(類似ケース操作)での完全なUnicodeサポート、utf8解析/抽出、そして変換と視"
"覚化のためのヘルパーがあります。"

#, fuzzy
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring."
"h>`__"
msgstr ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/master/core/"
"ustring.h>`_"

msgid "StringName"
msgstr "\\ StringName"

msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""
"StringNameはStringに似ていますが、一意です。文字列からStringNameを作成する"
"と、すべての等しい文字列に対して一意の内部ポインターが作成されます。文字列を"
"比較することは基本的にポインタを比較するため、StringNameは識別子として文字列"
"を使用するのに便利です。"

msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr "StringName(特に新しい文字列)の作成は遅くなりますが、比較は高速です。"

#, fuzzy
msgid ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/"
"string_name.h>`__"
msgstr ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/master/core/"
"string_name.h>`__"

msgid "Math types"
msgstr "算術型"

msgid ""
"There are several linear math types available in the core/math directory."
msgstr "core/mathディレクトリには、いくつかの線形数学タイプがあります。"

#, fuzzy
msgid "`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"
msgstr ""
"`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"

msgid "NodePath"
msgstr "\\ NodePath"

msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr ""
"これは、シーンツリーにパスを格納し、高速に参照するために使用される特別なデー"
"タ型です。"

#, fuzzy
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/"
"node_path.h>`__"
msgstr ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/master/core/"
"node_path.h>`__"

msgid "RID"
msgstr "RID"

msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""
"RIDはリソースIDです。 サーバーはこれらを使用して、保存されているデータを参照"
"します。 RIDは不透明です。つまり、RIDが参照するデータに直接アクセスすることは"
"できません。 RIDは、さまざまな種類の参照データに対しても一意です。"

#, fuzzy
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""
"`core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid.h>`_"

msgid "Translation status"
msgstr "翻訳ステータス"
