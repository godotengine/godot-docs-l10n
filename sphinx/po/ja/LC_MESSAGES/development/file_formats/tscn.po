# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "TSCN file format"
msgstr "TSCNファイル形式"

#, fuzzy
msgid ""
"The TSCN (text scene) file format represents a single scene tree inside "
"Godot. Unlike binary SCN files, TSCN files have the advantage of being "
"mostly human-readable and easy for version control systems to manage."
msgstr ""
"TSCN(テキストのシーン)ファイル形式は、Godot内の単一のシーンツリーを表しま"
"す。 TSCNファイルには、ほぼ人間が読み取り可能で、バージョン管理システムが管理"
"しやすいという利点があります。インポート中、TSCNファイルは.importフォルダ内に"
"保存されたバイナリ ``.scn`` ファイルにコンパイルされます。これにより、データ"
"サイズが小さくなり、読み込みが高速化されます。"

#, fuzzy
msgid ""
"The ESCN (exported scene) file format is identical to the TSCN file format, "
"but is used to indicate to Godot that the file has been exported from "
"another program and should not be edited by the user from within Godot. "
"Unlike SCN and TSCN files, during import, ESCN files are compiled to binary "
"SCN files stored inside the ``.import/`` folder. This reduces the data size "
"and speeds up loading, as binary formats are faster to load compared to text-"
"based formats."
msgstr ""
"ESCN(エクスポートされたシーン)ファイル形式はTSCNファイル形式と同じですが、"
"ファイルが別のプログラムからエクスポートされており、ユーザーがGodot内から編集"
"してはならないことをGodotに示すために使用されます。"

msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `resource_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/resource_format_text.cpp>`_ in the "
"``ResourceFormatLoaderText`` class."
msgstr ""
"完全な説明をお探しの場合、解析は `resource_format_text.cpp <https://github."
"com/godotengine/godot/blob/master/scene/resources/resource_format_text."
"cpp>`_ ファイルの ``ResourceFormatLoaderText`` クラスで処理されるので、そちら"
"を確認してみてください。"

msgid "File structure"
msgstr "ファイル構造"

msgid "There are five main sections inside the TSCN file:"
msgstr "TSCNファイルには、次の5つの主要なセクションがあります:"

msgid "File Descriptor"
msgstr "ファイル記述子"

msgid "External resources"
msgstr "外部リソース"

msgid "Internal resources"
msgstr "内部リソース"

msgid "Nodes"
msgstr "ノード"

msgid "Connections"
msgstr "接続"

#, fuzzy
msgid ""
"The file descriptor looks like ``[gd_scene load_steps=3 format=2]`` and "
"should be the first entry in the file. The ``load_steps`` parameter is equal "
"to the total amount of resources (internal and external) plus one (for the "
"file itself). If the file has no resources, ``load_steps`` is omitted. The "
"engine will still load the file correctly if ``load_steps`` is incorrect, "
"but this will affect loading bars and any other piece of code relying on "
"that value."
msgstr ""
"ファイル記述子は ``[gd_scene load_steps=1 format=2]`` のように見え、ファイル"
"の最初のエントリでなければなりません。\\ ``load_steps`` パラメータは(理論上)"
"ファイル内のリソースの数でなければなりません。ただし、実際には、その値は重要"
"ではないようです。"

msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with ``[ext_resource .....]``."
msgstr ""
"これらのセクションは順番に表示されますが、区別するのは難しい場合があります。"
"それらの唯一の違いは、セクション内のすべての項目の見出しの最初の要素です。た"
"とえば、すべての外部リソースの見出しは ``[ext_resource .....]`` で始まる必要"
"があります。"

msgid ""
"A TSCN file may contain single-line comments starting with a semicolon (``;"
"``). However, comments will be discarded when saving the file using the "
"Godot editor."
msgstr ""
"TSCNファイルには、セミコロン(``;``)で始まる単一行のコメントが含まれる場合があ"
"ります。ただし、Godotエディタを使用してファイルを保存すると、コメントは破棄さ"
"れます。"

msgid "Entries inside the file"
msgstr "ファイル内のエントリ"

msgid ""
"A heading looks like ``[<resource_type> key=value key=value key=value ...]`` "
"where resource_type is one of:"
msgstr ""
"見出しは ``[<resource_type> key=value key=value key=value ...]`` のようになり"
"ます。ここで、resource_typeは次のいずれかです:"

msgid "``ext_resource``"
msgstr "\\ ``ext_resource``"

msgid "``sub_resource``"
msgstr "\\ ``sub_resource``"

msgid "``node``"
msgstr "\\ ``node``"

msgid "``connection``"
msgstr "\\ ``connection``"

msgid ""
"Below every heading comes zero or more ``key = value`` pairs. The values can "
"be complex datatypes such as Arrays, Transforms, Colors, and so on. For "
"example, a spatial node looks like:"
msgstr ""
"すべての見出しの下には、0個以上の ``key = value`` ペアがあります。値は、配"
"列、幾何学変換、色などの複雑なデータ型にすることができます。たとえば、spatial"
"ノードは次のようになります:"

msgid "The scene tree"
msgstr "シーンツリー"

msgid ""
"The scene tree is made up of… nodes! The heading of each node consists of "
"its name, parent and (most of the time) a type. For example ``[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]``"
msgstr ""
"シーンツリーは…ノードで構成されています！各ノードの見出しは、その名前、親、お"
"よび(ほとんどの場合)タイプで構成されます。たとえば、\\ ``[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]``"

msgid "Other valid keywords include:"
msgstr "その他の有効なキーワードは次のとおりです:"

msgid "``instance``"
msgstr "\\ ``instance``"

msgid "``instance_placeholder``"
msgstr "\\ ``instance_placeholder``"

msgid "``owner``"
msgstr "\\ ``owner``"

msgid ""
"``index`` (sets the order of appearance in the tree. If absent, inherited "
"nodes will take precedence over plain ones)"
msgstr ""

msgid "``groups``"
msgstr "\\ ``groups``"

msgid ""
"The first node in the file, which is also the scene root, must not have a "
"``parent=Path/To/Node`` entry in its heading. All scene files should have "
"exactly *one* scene root. If it doesn't, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but shouldn't contain the "
"scene root's name. If the node is a direct child of the scene root, the path "
"should be ``\".\"``. Here is an example scene tree (but without any node "
"content):"
msgstr ""
"シーンのルートでもあるファイルの最初のノードには、見出しに ``parent=Path/To/"
"Node`` エントリがあってはなりません。すべてのシーンファイルには、正確に\\ *1"
"つ*\\ のシーンルートが必要です。そうでない場合、Godotはファイルのインポートに"
"失敗します。その他のノードの親パスは絶対パスである必要がありますが、シーン"
"ルートの名前を含めるべきではありません。ノードがシーンルートの直接の子である"
"場合、パスは ``\".\"``(相対パス)である必要があります。シーンツリーの例を次に"
"示します(ただし、ノードの内容は含んでいません):"

msgid ""
"Similar to the internal resource, the document for each node is currently "
"incomplete. Fortunately, it is easy to find out because you can simply save "
"a file with that node in it. Some example nodes are:"
msgstr ""
"内部リソースと同様に、各ノードに関するドキュメントは現時点では不完全です。で"
"すが幸いにも、そのノードを含むファイルを保存するだけで簡単に見つけられます。"
"ノードの例を次に示します:"

msgid "NodePath"
msgstr "\\ NodePath"

msgid ""
"A tree structure is not enough to represent the whole scene. Godot uses a "
"``NodePath(Path/To/Node)`` structure to refer to another node or attribute "
"of the node anywhere in the scene tree. For instance, MeshInstance uses "
"``NodePath()`` to point to its skeleton. Likewise, Animation tracks use "
"``NodePath()`` to point to node properties to animate."
msgstr ""
"ツリー構造は、シーン全体を表すのに十分ではありません。 Godotは "
"``NodePath(Path/To/Node)`` 構造を使用して、シーンツリー内の任意の場所にある別"
"のノードまたはノードの属性を参照します。たとえば、MeshInstanceは "
"``NodePath()`` を使用してそのスケルトンを指します。同様に、アニメーショント"
"ラックは ``NodePath()`` を使用して、アニメーション化するノードプロパティを指"
"し示します。"

msgid "Skeleton"
msgstr "スケルトン"

msgid ""
"The Skeleton node inherits the Spatial node, but also may have a list of "
"bones described in key-value pairs in the format ``bones/Id/"
"Attribute=Value``. The bone attributes consist of:"
msgstr ""
"SkeletonノードはSpatialノードを継承しますが、\\ ``bones/Id/Attribute=Value`` "
"の形式でキーと値のペアで記述されたボーンのリストも持つ場合があります。ボーン"
"の属性は次のもので構成されます:"

msgid "``name``"
msgstr "``name``"

msgid "``parent``"
msgstr "\\ ``parent``"

msgid "``rest``"
msgstr "\\ ``rest``"

msgid "``pose``"
msgstr "\\ ``pose``"

msgid "``enabled``"
msgstr "\\ ``enabled``"

msgid "``bound_children``"
msgstr "\\ ``bound_children``"

msgid "``name`` must be the first attribute of each bone."
msgstr "``name`` は各ボーンの最初の属性でなければなりません。"

msgid ""
"``parent`` is the index of parent bone in the bone list, with parent index, "
"the bone list is built to a bone tree."
msgstr ""
"``parent`` は、ボーンリスト内の親ボーンのインデックスです。親インデックスを使"
"用してボーン リストはボーン ツリーに構築されます。"

msgid "``rest`` is the transform matrix of bone in its \"resting\" position."
msgstr "``rest`` は、その「休息」位置にある骨の変換行列です。"

msgid "``pose`` is the pose matrix; use ``rest`` as the basis."
msgstr "``pose`` はポーズ行列です。基準として ``rest`` を使用します。"

msgid ""
"``bound_children`` is a list of ``NodePath()`` which point to "
"BoneAttachments belonging to this bone."
msgstr ""
"``bound_children`` は、このボーンに属するBoneAttachmentsを指す "
"``NodePath()`` のリストです。"

msgid "Here's an example of a skeleton node with two bones:"
msgstr "2つのボーンを持つスケルトンノードの例を次に示します:"

msgid "BoneAttachment"
msgstr "\\ BoneAttachment"

msgid ""
"BoneAttachment node is an intermediate node to describe some node being "
"parented to a single bone in a Skeleton node. The BoneAttachment has a "
"``bone_name=NameOfBone`` attribute, and the corresponding bone being the "
"parent has the BoneAttachment node in its ``bound_children`` list."
msgstr ""
"BoneAttachmentノードは、スケルトンノードの単一のボーンにペアレント化されてい"
"るノードを記述する中間ノードです。 BoneAttachmentには ``bone_name = "
"NameOfBone`` 属性があり、親である対応するボーンの ``bound_children`` リストに"
"はBoneAttachmentノードがあります。"

msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr "スケルトンのボーンを親とする1つのMeshInstanceの例:"

msgid "AnimationPlayer"
msgstr "\\ AnimationPlayer"

msgid ""
"AnimationPlayer works as an animation library. It stores animations listed "
"in the format ``anim/Name=SubResource(ResourceId)``; each line refers to an "
"Animation resource. All the animation resources use the root node of "
"AnimationPlayer. The root node is stored as ``root_node=NodePath(Path/To/"
"Node)``."
msgstr ""
"AnimationPlayerは、アニメーションライブラリとして機能します。\\ ``anim/"
"Name=SubResource(ResourceId)`` の形式でリストされたアニメーションを保存しま"
"す; 各行は、アニメーションリソースを参照します。すべてのアニメーションリソー"
"スは、AnimationPlayerのルートノードを使用します。ルートノードは "
"``root_node=NodePath(Path/To/Node)`` として保存されます。"

msgid "Resources"
msgstr "リソース"

msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""
"リソースは、ノードを構成するコンポーネントです。たとえば、MeshInstanceノード"
"には、付随するArrayMeshリソースがあります。ArrayMeshリソースは、TSCNファイル"
"の内部または外部のいずれかである場合があります。"

msgid ""
"References to the resources are handled by ``id`` numbers in the resource's "
"heading. External resources and internal resources are referred to with "
"``ExtResource(id)`` and ``SubResource(id)``, respectively. Because there "
"have different methods to refer to internal and external resources, you can "
"have the same ID for both an internal and external resource."
msgstr ""
"リソースへの参照は、リソースの見出しの ``id`` 番号によって処理されます。外部"
"リソースと内部リソースは、それぞれ ``ExtResource(id)`` と "
"``SubResource(id)`` で参照されます。内部リソースと外部リソースを参照する方法"
"は異なるため、内部リソースと外部リソースの両方に同じIDを使用できます。"

msgid ""
"For example, to refer to the resource ``[ext_resource id=3 "
"type=\"PackedScene\" path=....]``, you would use ``ExtResource(3)``."
msgstr ""
"たとえば、リソース ``[ext_resource id=3 type=\"PackedScene\" path=....]`` を"
"参照するには、\\ ``ExtResource(3)`` を使用します。"

msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of a path, a type and an ID."
msgstr ""
"外部リソースは、TSCNファイル自体に含まれていないリソースへのリンクです。外部"
"リソースは、パス、タイプ、およびIDで構成されます。"

msgid ""
"Godot always generates absolute paths relative to the resource directory and "
"thus prefixed with ``res://``, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""
"Godotは常にリソースディレクトリを基準とした絶対パスを生成し、\\ ``res://`` と"
"いうプレフィックスを付けますが、TSCNファイルの場所を基準としたパスも有効で"
"す。"

msgid "Some example external resources are:"
msgstr "外部リソースの例を次に示します:"

msgid ""
"Like TSCN files, a TRES file may contain single-line comments starting with "
"a semicolon (``;``). However, comments will be discarded when saving the "
"resource using the Godot editor."
msgstr ""
"TSCNファイルと同様に、TRESファイルにはセミコロン(``;``)で始まる単一行のコメン"
"トが含まれる場合があります。ただし、Godotエディタを使用してリソースを保存する"
"と、コメントは破棄されます。"

msgid ""
"A TSCN file can contain meshes, materials and other data. These are "
"contained in the *internal resources* section of the file. The heading for "
"an internal resource looks similar to those of external resources, except "
"that it doesn't have a path. Internal resources also have ``key=value`` "
"pairs under each heading. For example, a capsule collision shape looks like:"
msgstr ""
"TSCNファイルには、メッシュ、マテリアル、その他のデータを含めることができま"
"す。これらは、ファイルの *internal resources* セクションに含まれています。内"
"部リソースの見出しは、パスがないことを除いて、外部リソースの見出しと似ていま"
"す。内部リソースには、各見出しの下に ``key = value`` のペアもあります。たとえ"
"ば、カプセルのコリジョン形状は次のようになります:"

msgid ""
"Some internal resources contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"*before* the reference to it. This means that order matters in the file's "
"internal resources section."
msgstr ""
"一部の内部リソースには、他の内部リソース(マテリアルを持つメッシュなど)へのリ"
"ンクが含まれています。この場合、参照元のリソースは、参照される\\ *前に*\\ 出"
"現する必要があります。これは、ファイルの内部リソースセクションで順序が重要で"
"あることを意味します。"

msgid ""
"Unfortunately, documentation on the formats for these subresources isn't "
"complete. Some examples can be found by inspecting saved resource files, but "
"others can only be found by looking through Godot's source."
msgstr ""
"残念ながら、これらのサブリソースの形式に関するドキュメントは完全ではありませ"
"ん。いくつかの例は保存されたリソースファイルを調べることで見つけることができ"
"ますが、他の例はGodotのソースを調べることでのみ見つけることができます。"

msgid "ArrayMesh"
msgstr "\\ ArrayMesh"

msgid ""
"ArrayMesh consists of several surfaces, each in the format "
"``surface\\Index={}``. Each surface is a set of vertices and a material."
msgstr ""
"ArrayMeshは、それぞれが ``surface\\Index={}`` という形式のいくつかのサーフェ"
"スで構成されています。各サーフェスは、頂点とマテリアルのセットです。"

msgid "TSCN files support two surface formats:"
msgstr "TSCNファイルは、次の2つのサーフェス形式をサポートします:"

msgid "For the old format, each surface has three essential keys:"
msgstr "古い形式では、各サーフェスには3つの重要なキーがあります:"

msgid "``primitive``"
msgstr "\\ ``primitive``"

msgid "``arrays``"
msgstr "\\ ``arrays``"

msgid "``morph_arrays``"
msgstr "\\ ``morph_arrays``"

msgid ""
"``primitive`` is an enumerate variable, ``primitive=4`` which is "
"``PRIMITIVE_TRIANGLES`` is frequently used."
msgstr ""
"``primitive`` は列挙型変数で、\\ ``primitive =4`` である "
"``PRIMITIVE_TRIANGLES`` がよく使用されます。"

msgid "``arrays`` is a two-dimensional array, it contains:"
msgstr "``arrays`` は2次元配列であり、次のものが含まれます:"

msgid "Vertex positions array"
msgstr "頂点位置配列"

#, fuzzy
msgid "Normals array"
msgstr "\\ real array"

msgid "Tangents array"
msgstr "接線配列"

msgid "Vertex colors array"
msgstr "頂点カラー配列"

msgid "UV array 1"
msgstr "UV配列1"

msgid "UV array 2"
msgstr "UV配列2"

msgid "Bone indexes array"
msgstr "ボーンインデックス配列"

msgid "Bone weights array"
msgstr "ボーンウェイト配列"

msgid "Vertex indexes array"
msgstr "頂点インデックス配列"

msgid ""
"``morph_arrays`` is an array of morphs. Each morph is exactly an ``arrays`` "
"without the vertex indexes array."
msgstr ""
"``morph_arrays`` はモーフの配列です。各モーフは、頂点インデックス配列を持たな"
"いまさに　``配列`` です。"

msgid "An example of ArrayMesh:"
msgstr "ArrayMeshの例:"

msgid "Animation"
msgstr "アニメーション"

msgid ""
"An animation resource consists of tracks. Besides, it has ``length``, "
"``loop`` and ``step`` applied to all the tracks."
msgstr ""
"アニメーションリソースはトラックで構成されます。また、すべてのトラックに適用"
"される ``length``\\ 、\\ ``loop`` そして ``step`` があります。"

msgid "``length`` and ``step`` are both durations in seconds."
msgstr "``length`` と ``step`` はどちらも秒単位の期間です。"

msgid ""
"Each track is described by a list of key-value pairs in the format ``tracks/"
"Id/Attribute``. Each track includes:"
msgstr ""
"各トラックは、\\ ``tracks/Id/Attribute`` 形式のキーと値のペアのリストによって"
"記述されます。各トラックには以下が含まれます:"

msgid "``type``"
msgstr "\\ ``type``"

msgid "``path``"
msgstr "\\ ``path``"

msgid "``interp``"
msgstr "\\ ``interp``"

msgid "``keys``"
msgstr "\\ ``keys``"

msgid "``loop_wrap``"
msgstr "\\ ``loop_wrap``"

msgid "``imported``"
msgstr "\\ ``imported``"

msgid ""
"The ``type`` must be the first attribute of each track. The value of "
"``type`` can be:"
msgstr ""
"``type`` は各トラックの最初の属性でなければなりません。\\ ``type``の値は次の"
"とおりです:"

msgid "``transform``"
msgstr "\\ ``transform``"

msgid "``value``"
msgstr "\\ ``value``"

msgid "``method``"
msgstr "\\ ``method``"

msgid ""
"The ``path`` has the format ``NodePath(Path/To/Node:attribute)``. It's the "
"path to the animated node or attribute, relative to the root node defined in "
"the AnimationPlayer."
msgstr ""
"``path`` の形式は ``NodePath(Path/To/Node:attribute)`` です。これは、"
"AnimationPlayerで定義されたルートノードを基準とした、アニメーション化された"
"ノードまたは属性へのパスです。"

#, fuzzy
msgid ""
"The ``interp`` is the method to interpolate frames from the keyframes. It is "
"an enum variable with one of the following values:"
msgstr ""
"``interp`` はキーフレームからフレームを補間する方法です。これは列挙型変数であ"
"り、値を持つことができます:"

#, fuzzy
msgid "``0`` (constant)"
msgstr "0 (定数)"

#, fuzzy
msgid "``1`` (linear)"
msgstr "1 (リニア)"

#, fuzzy
msgid "``2`` (cubic)"
msgstr "2 (キュービック)"

msgid ""
"The ``keys`` correspond to the keyframes. It appears as a "
"``PoolRealArray()``, but may have a different structure for tracks with "
"different types."
msgstr ""
"``keys`` はキーフレームに対応しています。\\ ``PoolRealArray()`` として表示さ"
"れますが、異なるタイプのトラックに対して異なる構造を持つ場合があります。"

msgid ""
"A Transform track uses every 12 real numbers in the ``keys`` to describe a "
"keyframe. The first number is the timestamp. The second number is the "
"transition followed by a 3-number translation vector, followed by a 4-number "
"rotation quaternion (X, Y, Z, W) and finally a 3-number scale vector. The "
"default transition in a Transform track is 1.0."
msgstr ""
"Transformトラックは、キーフレームを記述するために ``keys`` の中の12個の実数を"
"使用します。最初の数値はタイムスタンプです。 2番目の数値はトランジション、そ"
"れに続く3個の数値は平行移動ベクトル、次の4個の数値は回転四元数(X、Y、Z、W)、"
"最後は3個の数値のスケールベクトルです。 Transformトラックのデフォルトのトラン"
"ジションは1.0です。"

msgid "Translation status"
msgstr "翻訳ステータス"
