# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Universal Windows Platform"
msgstr "ユニバーサルWindowsプラットフォームのコンパイル"

msgid ""
"This page describes how to compile UWP export template binaries from source. "
"If you're looking to export your project to UWP instead, read :ref:"
"`doc_exporting_for_uwp`."
msgstr ""

msgid "Requirements"
msgstr "必要条件"

#, fuzzy
msgid "SCons 3.0+ (see :ref:`doc_compiling_for_windows` for more details)."
msgstr ""
"SCons (詳細については、\\ :ref:`doc_compiling_for_windows`\\ を参照してくださ"
"い)。"

#, fuzzy
msgid ""
"Visual Studio 2017 or later. See :ref:`doc_compiling_for_windows` about the "
"caveats of installing it and the various prompts."
msgstr ""
"Visual Studio 2015 update2。以前のバージョンで動作する場合があります。インス"
"トールの注意点とさまざまなプロンプトについては、\\ :ref:"
"`doc_compiling_for_windows`\\ を参照してください。"

msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr "Windows 10 SDK (Visual Studio のインストールで選択できます)。"

msgid ""
"`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` "
"(default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""
"`ANGLE source <https://github.com/Microsoft/angle>`_\\ 。ms_master(デフォル"
"ト)ブランチを使用します。問題を避けるため、スペースのないパスに保管してくださ"
"い。"

msgid ""
"The ANGLE repo by Microsoft has been discontinued and the ``ms_master`` "
"branch has been cleared out."
msgstr ""
"マイクロソフトによるANGLEリポジトリは廃止され、\\ ``ms_master`` ブランチは削"
"除されました。"

msgid ""
"As a temporary workaround however, it is still possible to download an older "
"state of the source code via commit `c61d048 <https://github.com/microsoft/"
"angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__."
msgstr ""
"ただし、一時的な回避策として、コミット `c61d048 <https://github.com/"
"microsoft/angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__ を使用し"
"て、古い状態のソースコードをダウンロードすることも可能です。"

msgid ""
"This page will eventually be updated in the future to reflect the new build "
"instructions."
msgstr ""
"このページは、最終的に新しいビルド手順を反映するために将来的に更新されます。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Godotにおける基本的なSconsの使い方については、\\ :ref:"
"`doc_introduction_to_the_buildsystem`\\ を参照してください。"

msgid "Compiling"
msgstr "コンパイル"

msgid ""
"You need to open a proper Visual Studio prompt for the target architecture "
"you want to build. Check :ref:`doc_compiling_for_windows` to see how these "
"prompts work."
msgstr ""
"ビルドするターゲットアーキテクチャに対して、適切な Visual Studioプロンプトを"
"開く必要があります。これらのプロンプトがどのように動作するかを確認するに"
"は、\\ :ref:`doc_compiling_for_windows`\\ をチェックしてください。"

msgid ""
"There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) "
"and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with "
"``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""
"UWPには、x86(32ビット)、x64(64ビット)、ARM(32ビット)の3つのターゲットアーキテ"
"クチャがあります。後者の場合、 ``x86_arm`` または ``amd64_arm`` を引数として "
"``vcvarsall.bat`` を実行して、環境を設定できます。"

msgid ""
"Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE "
"source code. The build process will also build ANGLE to produce the required "
"DLLs for the selected architecture."
msgstr ""
"ANGLEソースコードをダウンロードしたディレクトリに ``ANGLE_SRC_PATH`` を設定し"
"ます。ビルドプロセスでは、選択したアーキテクチャに必要なDLLを生成するために"
"ANGLEも構築されます。"

msgid ""
"Once you're set, run the SCons command similarly to the other platforms::"
msgstr ""
"設定が完了したら、SConsコマンドを他のプラットフォームと同様に実行します:"

msgid "Creating UWP export templates"
msgstr "UWPエクスポートテンプレートの作成"

msgid ""
"To export using the editor you need to properly build package the templates. "
"You need all three architectures with ``debug`` and ``release`` templates to "
"be able to export."
msgstr ""
"エディタを使用してエクスポートするには、テンプレートを適切にビルドする必要が"
"あります。エクスポートするには、 ``debug`` と ``release`` テンプレートを持つ "
"3 つのアーキテクチャがすべて必要です。"

msgid ""
"Open the command prompt for one architecture and run SCons twice (once for "
"each target)::"
msgstr ""
"1つのアーキテクチャのコマンドプロンプトを開き、SConsを2回実行します(ターゲッ"
"トごとに1回):"

msgid "Repeat for the other architectures."
msgstr "他のアーキテクチャについても同じ手順を繰り返します。"

msgid ""
"In the end your ``bin`` folder will have the ``.exe`` binaries with a name "
"like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/"
"arch)."
msgstr ""
"最後に ``bin`` フォルダには ``godot.uwp.opt.debug.32.x86.exe`` (ターゲット/"
"アーチごとに異なる)という名前の ``.exe`` バイナリが入っています。"

msgid ""
"Copy one of these to ``misc/dist/uwp_template`` inside the Godot source "
"folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, "
"under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, "
"``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, "
"putting them along with the executable."
msgstr ""
"これらのいずれかをGodotソースフォルダ内の ``misc/dist/uwp_template`` にコピー"
"し、バイナリの名前を ``godot.uwp.exe`` に変更します。ANGLEソースから、 "
"``winrt/10/src/Release _% arch%`` (ここで、 ``%arch%`` は ``Win32`` 、 "
"``x64`` または ``ARM`` です。)で ``libEGL.dll`` と ``libGLESv2.dll`` を取得"
"し、実行ファイルとともに配置します。"

msgid ""
"Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting "
"Zip according to the target/architecture of the template::"
msgstr ""
"``uwp_template`` フォルダ内のファイルをZIPに追加します。テンプレートのター"
"ゲット/アーキテクチャに従って、結果の Zip の名前を変更します:"

msgid ""
"Move those templates to the ``[versionstring]\\templates`` folder in Godot "
"settings path, where `versionstring` is the version of Godot you have "
"compiled the export templates for - e.g. `3.0.alpha` for the alpha version "
"of Godot 3. If you don't want to replace the templates, you can set the "
"\"Custom Package\" property in the export window."
msgstr ""
"これらのテンプレートをGodot 設定パスの ``[バージョン名]\\templates`` フォルダ"
"に移動します。テンプレートを置き換えたくない場合は、エクスポートウィンドウで"
"「カスタム パッケージ」プロパティを設定できます。"

msgid "Running UWP apps with Visual Studio"
msgstr "Visual Studioを使用してUWPアプリを実行する"

msgid ""
"If you want to debug the UWP port or simply run your apps without packaging "
"and signing, you can deploy and launch them using Visual Studio. It might be "
"the easiest way if you are testing on a device such as a Windows Phone or an "
"Xbox One."
msgstr ""
"UWPポートをデバッグする場合、またはパッケージ化と署名なしでアプリを実行する場"
"合は、Visual Studioを使用してアプリをデプロイして起動できます。Windows Phone"
"やXbox Oneなどのデバイスでテストを行う場合は、最も簡単な方法です。"

msgid ""
"Within the ANGLE source folder, open ``templates`` and double-click the "
"``install.bat`` script file. This will install the Visual Studio project "
"templates for ANGLE apps."
msgstr ""
"ANGLEソースフォルダ内で ``templates`` を開き、 ``install.bat`` スクリプトファ"
"イルをダブルクリックします。ANGLEアプリのVisual Studioプロジェクト テンプレー"
"トがインストールされます。"

msgid ""
"If you have not built Godot yet, open the ``winrt/10/src/angle.sln`` "
"solution from the ANGLE source and build it to Release/Win32 target. You may "
"also need to build it for ARM if you plan to run on a device. You can also "
"use MSBuild if you're comfortable with the command line."
msgstr ""
"Godotをまだビルドしていない場合は、ANGLEソースから ``winrt/10/src/angle."
"sln`` ソリューションを開き、Release/Win32ターゲットにビルドします。デバイスで"
"実行する場合は、ARM用にビルドする必要がある場合もあります。コマンドラインに慣"
"れていれば、MSBuildを使用することもできます。"

msgid ""
"Create a new Windows App project using the \"App for OpenGL ES (Windows "
"Universal)\" project template, which can be found under the ``Visual C++/"
"Windows/Universal`` category."
msgstr ""
"\"App for OpenGL ES (Windows Universal)\" プロジェクトテンプレートを使用し"
"て、新しいWindowsアプリプロジェクトを作成します。このテンプレートは、\\ "
"``Visual C++/Windows/Universal`` カテゴリにあります。"

msgid ""
"This is a base project with the ANGLE dependencies already set up. However, "
"by default it picks the debug version of the DLLs which usually have poor "
"performance. So in the \"Binaries\" filter, click in each of the DLLs there "
"and in the \"Properties\" window and change the relative path from "
"``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""
"これは、すでにANGLE依存関係が設定されている基本プロジェクトです。ただし、デ"
"フォルトでは、通常パフォーマンスの低いDLLのデバッグバージョンが選択されます。"
"そのため、\"Binaries\"フィルタで、そこにある各DLLをクリック"
"し、\"Properties\"ウィンドウで相対パスを ``Debug_Win32`` から "
"``Release_Win32`` (またはデバイスの場合は ``Release_ARM``) に変更します。"

msgid ""
"In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to "
"the Godot executable for UWP you have. In the \"Properties\" window, set "
"\"Content\" to ``True`` so it's included in the project."
msgstr ""
"同じ\"Binaries\"フィルタで、\"Add > Existing Item\"を選択し、使用しているUWP"
"のGodot実行可能ファイルをポイントします。\"Properties\"ウィンドウで、プロジェ"
"クトに含まれるように\"Content\"を ``True`` に設定します。"

msgid ""
"Right-click the ``Package.appxmanifest`` file and select \"Open With... > "
"XML (Text) Editor\". In the ``Package/Applications/Application`` element, "
"replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to "
"``godot.uwp.exe`` (or whatever your Godot executable is called). Also change "
"the ``EntryPoint`` attribute to ``GodotUWP.App``. This will ensure that the "
"Godot executable is correctly called when the app starts."
msgstr ""
"``Package.appxmanifest`` ファイルを右クリックして、「アプリケーションから開"
"く...> XML(テキスト)エディタ」を選択します。 ``Package/Applications/"
"Application`` 要素で、 ``Executable`` 属性を ``$targetnametoken$.exe`` から "
"``godot.uwp.exe`` (またはGodot実行可能ファイルが呼び出されるもの)に置き換えま"
"す。 また、 ``EntryPoint`` 属性を ``GodotUWP.App`` に変更します。 これによ"
"り、アプリの起動時にGodot実行可能ファイルが正しく呼び出されます。"

msgid ""
"Create a folder (*not* a filter) called ``game`` in your Visual Studio "
"project folder and there you can put either a ``data.pck`` file or your "
"Godot project files. After that, make sure to include it all with the \"Add "
"> Existing Item\" command and set their \"Content\" property to ``True`` so "
"they're copied to the app."
msgstr ""
"Visual Studioプロジェクトフォルダに ``game`` という名前のフォルダ(フィルタ\\ "
"*ではない*\\ ) を作成し、 ``data.pck`` ファイルまたはGodotプロジェクトファイ"
"ルを配置できます。その後、必ず[追加 > 既存のアイテム] コマンドですべてを含"
"め、アプリにコピーできるように「コンテンツ」プロパティを ``True`` に設定しま"
"す。"

msgid ""
"To ease the workflow, you can open the \"Solution Properties\" and in the "
"\"Configuration\" section untick the \"Build\" option for the app. You still "
"have to build it at least once to generate some needed files, you can do so "
"by right-clicking the project (*not* the solution) in the \"Solution "
"Explorer\" and selecting \"Build\"."
msgstr ""
"ワークフローを容易にするために、「ソリューションプロパティ」を開き、「構成」"
"セクションでアプリの「ビルド」オプションのチェックを解除します。必要なファイ"
"ルを生成するには、少なくとも1回ビルドする必要がありますが、[ソリューション エ"
"クスプローラ] でプロジェクト(ソリューション\\ *ではない*\\ ) を右クリックし、"
"「ビルド」を選択します。"

msgid ""
"Now you can just run the project and your app should open. You can also use "
"the \"Start Without Debugging\" option from the \"Debug\" menu (or press :"
"kbd:`Ctrl + F5`) to make it launch faster."
msgstr ""
"これで、プロジェクトを実行するだけで、アプリが開きます。 [デバッグ]メニューの"
"[デバッグなしで開始]オプションを使用して(または :kbd:`Ctrl + F5` を押して)起"
"動を高速化することもできます。"

msgid "Translation status"
msgstr "翻訳ステータス"
