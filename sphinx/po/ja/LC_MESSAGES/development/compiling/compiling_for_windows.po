# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Windows"
msgstr "Windows用のコンパイル"

msgid ""
"This page describes how to compile Windows editor and export template "
"binaries from source. If you're looking to export your project to Windows "
"instead, read :ref:`doc_exporting_for_windows`."
msgstr ""

msgid "Requirements"
msgstr "必要条件"

msgid "For compiling under Windows, the following is required:"
msgstr "Windowsでコンパイルするには、次のことが必要です:"

#, fuzzy
msgid ""
"`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_, "
"version 2017 or later. VS 2019 is recommended. **Make sure to read "
"\"Installing Visual Studio caveats\" below or you will have to run/download "
"the installer again.**"
msgstr ""
"バージョン2015以降の `Visual Studio Community <https://www.visualstudio.com/"
"vs/community/>`_\\ 。VS 2019を推奨。\\ **必ず、下記にある『Visual Studioのイ"
"ンストールに関する注意事項』を読んでください。でないと、インストーラーを再実"
"行あるいは再ダウンロードしなければならなくなるでしょう。**\\"

#, fuzzy
msgid ""
"`MinGW-w64 <http://mingw-w64.org/>`__ with GCC can be used as an alternative "
"to Visual Studio. Be sure to install/configure it to use the ``posix`` "
"thread model."
msgstr ""
"MinGW-w64上でのGCCも、Visual Studioの代わりに使うことができます。\\ "
"``posix``\\ スレッドモデルでインストールおよび設定がなされていることを確認し"
"てください。"

msgid ""
"`Python 3.5+ <https://www.python.org/downloads/windows/>`_. **Make sure to "
"enable the option to add Python to the ``PATH`` in the installer.**"
msgstr ""

msgid ""
"`SCons <https://www.scons.org/>`_ build system. Using the latest release is "
"recommended, especially for proper support of recent Visual Studio releases."
msgstr ""

msgid ""
"If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install "
"MinGW and other dependencies using the following command::"
msgstr ""
"もし `Scoop <https://scoop.sh/>`_ がインストールされていれば、MinGWや他の依存"
"関係を、次のコマンドで簡単にインストールできます:"

msgid ""
"If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily "
"install MinGW and other dependencies using the following command::"
msgstr ""
"もし `MSYS2 <https://www.msys2.org/>`_ がインストールされていれば、MinGWや他"
"の依存関係を、次のコマンドで簡単にインストールできます:"

msgid ""
"For each MSYS2 MinGW subsystem, you should then run `pip3 install scons` in "
"its shell."
msgstr ""

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Godotにおける基本的なSconsの使い方については、\\ :ref:"
"`doc_introduction_to_the_buildsystem`\\ を参照してください。"

msgid "Setting up SCons"
msgstr "SConsの設定"

#, fuzzy
msgid ""
"To install SCons, open the command prompt and run the following command::"
msgstr ""
"SConsをインストールするには、コマンドプロンプトを開き、以下のコマンドを実行し"
"ます。"

msgid ""
"If you are prompted with the message ``Defaulting to user installation "
"because normal site-packages is not writeable``, you may have to run that "
"command again using elevated permissions. Open a new command prompt as an "
"Administrator then run the command again to ensure that SCons is available "
"from the ``PATH``."
msgstr ""

msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into a command prompt (``cmd."
"exe``)."
msgstr ""
"PythonとSConsがきちんとインストールされたかどうか確認するには、コマンドプロン"
"プト (``cmd.exe``) にて\\ ``python --version``\\ および\\ ``scons --"
"version``\\ とタイプしてみてください。"

msgid ""
"If the commands above don't work, make sure to add Python to your ``PATH`` "
"environment variable after installing it, then check again. You can do so by "
"running the Python installer again and enabling the option to add Python to "
"the ``PATH``."
msgstr ""
"上記のコマンドが失敗した場合は、インストール後にPythonを環境変数\\ "
"``PATH``\\ に含めてから、ふたたび確認してください。そうするには、Pythonインス"
"トーラーを再実行して、Pythonを\\ ``PATH``\\ に含めるオプションを有効にすれば"
"できます。"

msgid ""
"If SCons cannot detect your Visual Studio installation, it might be that "
"your SCons version is too old. Update it to the latest version with ``python "
"-m pip install --upgrade scons``."
msgstr ""

msgid "Installing Visual Studio caveats"
msgstr "Visual Studioのインストールに関する注意事項"

msgid ""
"If installing Visual Studio 2017 or 2019, make sure to enable **C++** in the "
"list of workflows to install."
msgstr ""
"Visual Studio 2017あるいは2019をインストールする場合は、ワークロードのリスト"
"から **C++** を有効しなければなりません。"

msgid ""
"If installing Visual Studio 2015, make sure to run a **Custom** installation "
"instead of **Typical** and select **C++** as a language there."
msgstr ""
"Visual Studio 2015をインストールする場合は、\\ **標準**\\ ではなく\\ **カスタ"
"ム**\\ を選択し、言語から C++ を選んでください。"

msgid ""
"If you've already made the mistake of installing Visual Studio without C++ "
"support, run the installer again; it should present you a **Modify** button. "
"Running the installer from *Add/Remove Programs* will only give you a "
"**Repair** option, which won't let you install C++ tools."
msgstr ""
"もし間違ってC++サポート無しでVisual Studioをインストールしてしまったなら、ふ"
"たたびインストーラーを実行してください。\\ **変更 (Modify)**\\ ボタンが表示さ"
"れるはずです。\\ *プログラムの追加と削除* からインストーラーを起動しても、\\ "
"**修復**\\ オプションしか表示されず、C++ツールはインストールできません。"

msgid "Downloading Godot's source"
msgstr "Godotのソースをダウンロードする"

#, fuzzy
msgid "Refer to :ref:`doc_getting_source` for detailed instructions."
msgstr ""
"詳細については、\\ :ref:`doc_running_code_in_the_editor` を参照してください。"

msgid ""
"The tutorial will assume from now on that you placed the source code in ``C:"
"\\godot``."
msgstr ""
"ここからのチュートリアルは、ソースコードを\\ ``C:\\godot``\\ に置いたとして進"
"めます。"

msgid ""
"To prevent slowdowns caused by continuous virus scanning during compilation, "
"add the Godot source folder to the list of exceptions in your antivirus "
"software."
msgstr ""

msgid ""
"For Windows Defender, hit the :kbd:`Windows` key, type \"Windows Defender "
"Settings\" then hit :kbd:`Enter`. Under **Virus & threat protection**, go to "
"**Virus & threat protection setting** and scroll down to **Exclusions**. "
"Click **Add or remove exclusions** then add the Godot source folder."
msgstr ""

msgid "Compiling"
msgstr "コンパイル"

msgid "Selecting a compiler"
msgstr "コンパイラの選択"

#, fuzzy
msgid ""
"SCons will automatically find and use an existing Visual Studio "
"installation. If you do not have Visual Studio installed, it will attempt to "
"use MinGW instead. If you already have Visual Studio installed and want to "
"use MinGW, pass ``use_mingw=yes`` to the SCons command line. Note that MSVC "
"builds cannot be performed from the MSYS2 or MinGW shells. Use either ``cmd."
"exe`` or PowerShell instead."
msgstr ""
"SConsは、インストールされたVisual Studioを自動的に探します。もしVisual Studio"
"がインストールされていなければ、代わりにMinGWが使えるか試します。もし、"
"Visual StudioがインストールされていてもMinGWを使用したいときは、SConsのコマン"
"ドラインに\\ ``use_mingw=yes``\\ を渡してください。"

msgid ""
"During development, using the Visual Studio compiler is usually a better "
"idea, as it links the Godot binary much faster than MinGW. However, MinGW "
"can produce more optimized binaries using link-time optimization (see "
"below), making it a better choice for production use."
msgstr ""
"開発版には、MinGWよりも早くGodotバイナリをリンクできるVisual Studioのほうが、"
"通常は好ましいでしょう。しかし、MinGWはリンク時最適化を用いることにより、さら"
"に最適化されたバイナリを出力できるので (下記を参照)、製品版ではより良い選択肢"
"になるでしょう。"

msgid "Running SCons"
msgstr "SConsの実行"

msgid ""
"After opening a command prompt, change to the root directory of the engine "
"source code (using ``cd``) and type::"
msgstr ""
"コマンド プロンプトを開き、エンジンのソースコードがあるディレクトリのルートに"
"移動して (\\ ``cd``\\ を使用)、次のように打ちます::"

msgid ""
"When compiling with multiple CPU threads, SCons may warn about pywin32 being "
"missing. You can safely ignore this warning."
msgstr ""
"複数CPUスレッドでコンパイルするとき、pywin32が無いという警告をSConsは出すかも"
"しれません。しかし、これは無視しても大丈夫です。"

#, fuzzy
msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name ``godot.windows.tools.32.exe`` or ``godot."
"windows.tools.64.exe``. By default, SCons will build a binary matching your "
"CPU architecture, but this can be overridden using ``bits=64`` or "
"``bits=32``."
msgstr ""
"すべて問題なければ、出力された実行可能なバイナリは ``godot.windows.tools.32."
"exe`` あるいは ``godot.windows.tools.64.exe`` の名前で ``C:\\godot\\bin\\`` "
"に置かれます。"

msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Running it will bring up the Project Manager."
msgstr ""
"この実行ファイルにはエンジン全体が含まれていて、単体で起動できます。実行する"
"と、プロジェクト マネージャーが現れます。"

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""
"制作に使うGodotをコンパイルするなら、SConsのオプション "
"``target=release_debug`` を追加すれば、より小さくて高速な実行ファイルにするこ"
"とができます。"

#, fuzzy
msgid ""
"If you are compiling Godot with MinGW, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""
"GodotをMinGWでコンパイルするなら、SConsのオプション ``use_lto=yes`` を追加す"
"れば、さらに小さくて高速なバイナリにすることができます。リンク時最適化には大"
"量のメモリを消費するので、およそ 3GB の使用可能なRAMを必要とします。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#, fuzzy
msgid "Development in Visual Studio"
msgstr "Visual Studioまたはその他のIDEでの開発"

msgid ""
"Using an IDE is not required to compile Godot, as SCons takes care of "
"everything. But if you intend to do engine development or debugging of the "
"engine's C++ code, you may be interested in configuring a code editor or an "
"IDE."
msgstr ""

msgid ""
"Folder-based editors don't require any particular setup to start working "
"with Godot's codebase. To edit projects with Visual Studio they need to be "
"set up as a solution."
msgstr ""

msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this::"
msgstr ""
"SConsを ``vsproj=yes`` パラメーターとともに実行すれば、Visual Studioソリュー"
"ションを生成できます::"

msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot using Visual Studio's **Build** button."
msgstr ""
"これでGodotのソースをVisual Studioのソリューションとして開けるようになり、"
"Visual Studioの\\ **ビルド (Build)**\\ ボタンでビルドできます。"

#, fuzzy
msgid "See :ref:`doc_configuring_an_ide_vs` for further details."
msgstr ""
"SCons (詳細については、\\ :ref:`doc_compiling_for_windows`\\ を参照してくださ"
"い)。"

msgid "Cross-compiling for Windows from other operating systems"
msgstr "他のオペレーティングシステムからのWindowsのクロスコンパイル"

#, fuzzy
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"mingw-w64.org/doku.php>`__, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distribution, here are "
"some known ones:"
msgstr ""
"もしあなたがLinuxまたはmacOSユーザーなら、\\ `MinGW-w64 <https://mingw-w64."
"org/doku.php>`_ のインストールが必要になります。通常、32ビット版と64ビット版"
"が用意されています。パッケージ名はディストリビューションによって異なる場合が"
"ありますが、以下はいくつかの知られている例です:"

msgid "**Arch Linux**"
msgstr "\\ **Arch Linux**"

msgid "Install `mingw-w64-gcc from the AUR`_."
msgstr ""
"Install `mingw-w64-gcc from the AUR`_ (AURからmingw-w64-gccをインストール)。"

msgid "**Debian** / **Ubuntu**"
msgstr "**Debian** / **Ubuntu**"

msgid "**Fedora**"
msgstr "**Fedora**"

msgid "**macOS**"
msgstr "**macOS**"

msgid "**Mageia**"
msgstr "\\ **Mageia**"

msgid ""
"Before attempting the compilation, SCons will check for the following "
"binaries in your ``PATH`` environment variable::"
msgstr ""
"コンパイルする前に、SConsは下記のバイナリが ``PATH`` 環境変数にあるかチェック"
"します::"

msgid ""
"If the binaries are not located in the ``PATH`` (e.g. ``/usr/bin``), you can "
"define the following environment variables to give a hint to the build "
"system::"
msgstr ""
"もしバイナリが ``PATH``(たとえば ``/usr/bin``)になかった場合、このように環境"
"変数を設定することでビルドシステムに教えられます::"

msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system)::"
msgstr ""
"正しく設定できたか確認するには、下記のシェルを実行することで動くコンパイラが"
"呼ばれるはずです (バージョン表示はシステムにより異なります)::"

msgid "Troubleshooting"
msgstr "トラブルシューティング"

msgid ""
"Cross-compiling from some Ubuntu versions may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""
"Ubuntuのいくつかのバージョンでは、標準設定でPOSIXスレッディングが有効になって"
"いないので、クロスコンパイルすると\\ `このバグ <https://github.com/"
"godotengine/godot/issues/9258>`_ (英語) が発生する可能性があります。"

msgid ""
"You can change that configuration following those instructions, for 64-bit::"
msgstr ""
"下記のとおりにすれば設定を変更できます。64ビットの場合 (それぞれ実行してか"
"ら、リストにある x86_64-w64-mingw32-gcc-posix および x86_64-w64-mingw32-g++-"
"posix を選択する)::"

msgid "And for 32-bit::"
msgstr ""
"そして32ビットの場合 (それぞれ実行してから、リストにある i686-w64-mingw32-"
"gcc-posix および i686-w64-mingw32-g++-posix を選択する)::"

msgid "Creating Windows export templates"
msgstr "Windowsエクスポートテンプレートの作成"

msgid ""
"Windows export templates are created by compiling Godot without the editor, "
"with the following flags::"
msgstr ""
"Windowsのエクスポート テンプレートは、Godotをエディタ無しでコンパイルすること"
"で作成します。次のフラグを使用してください::"

msgid ""
"If you plan on replacing the standard export templates, copy these to the "
"following location, replacing ``<version>`` with the version identifier "
"(such as ``3.1.1.stable`` or ``3.2.dev``)::"
msgstr ""
"もし標準のエクスポート テンプレートを置き換えるつもりであるなら、それらを下記"
"の場所にコピーしてください。\\ ``<version>`` の部分はバージョン識別子で置き換"
"えます (``3.1.1.stable`` や ``3.2.dev`` のように)::"

msgid "With the following names::"
msgstr "名前は次のようにします::"

msgid ""
"However, if you are using custom modules or custom engine code, you may "
"instead want to configure your binaries as custom export templates here:"
msgstr ""
"一方、もしカスタム モジュールやカスタム エンジンコードを使用しているなら、バ"
"イナリをカスタムのエクスポート テンプレートとして指定することもできます。"

msgid ""
"You don't need to copy them in this case, just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build, you will automatically have the custom templates referenced."
msgstr ""
"この場合はコピーする必要はなく、Godotのソースフォルダ内にある ``bin\\`` ディ"
"レクトリに出力されたファイルを指定するだけです。こうすれば、次にビルドした時"
"も、自動的にカスタム テンプレートを参照するようになります。"

msgid "Translation status"
msgstr "翻訳ステータス"
