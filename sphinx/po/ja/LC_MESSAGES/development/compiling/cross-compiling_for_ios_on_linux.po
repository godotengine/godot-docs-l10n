# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cross-compiling for iOS on Linux"
msgstr "Linux上のiOS用のクロスコンパイル"

msgid ""
"The procedure for this is somewhat complex and requires a lot of steps, but "
"once you have the environment properly configured it will be easy to compile "
"Godot for iOS anytime you want."
msgstr ""
"この手順は多少複雑で多くのステップを必要としますが、一度環境を適切に設定すれ"
"ば、いつでも好きな時にiOS用のGodotをコンパイルすることが容易になります。"

msgid "Disclaimer"
msgstr "免責事項"

msgid ""
"While it is possible to compile for iOS on a Linux environment, Apple is "
"very restrictive about the tools to be used (especially hardware-wise), "
"allowing pretty much only their products to be used for development. So this "
"is **not official**. However, a `statement from Apple in 2010 <http://www."
"apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-"
"Guidelines.html>`__ says they relaxed some of the `App Store review "
"guidelines <https://developer.apple.com/app-store/review/guidelines/>`__ to "
"allow any tool to be used, as long as the resulting binary does not download "
"any code, which means it should be OK to use the procedure described here "
"and cross-compiling the binary."
msgstr ""
"Linux環境でiOS用にコンパイルすることは可能ですが、Appleは使用するツールに非常"
"に制限をかけており(特にハードウェア的に)、開発にはほとんど自社の製品しか使用"
"できません。ですので、これは\\ **公式ではありません**\\ 。しかし、\\ `2010年"
"にAppleが出した声明 <http://www.apple.com/pr/library/2010/09/09Statement-by-"
"Apple-on-App-Store-Review-Guidelines.html>`_\\ によると、\\ `App Storeのレ"
"ビューガイドライン <https://developer.apple.com/app-store/review/guidelines/"
">`_\\ の一部を緩和し、コードをダウンロードしない限り、あらゆるツールを使える"
"ようにしたとのことです。つまり、ここで説明する手順を使用してバイナリをクロス"
"コンパイルしてもかまいません。"

msgid "Requirements"
msgstr "必要条件"

msgid ""
"`XCode with the iOS SDK <https://developer.apple.com/xcode/download>`__ (a "
"dmg image)"
msgstr ""
"`XCode with the iOS SDK <https://developer.apple.com/xcode/download>`_\\ (dmg"
"イメージ)"

msgid ""
"`Clang >= 3.5 <http://clang.llvm.org>`__ for your development machine "
"installed and in the ``PATH``. It has to be version >= 3.5 to target "
"``arm64`` architecture."
msgstr ""
"`Clang >= 3.5 <http://clang.llvm.org>`_ がインストールされ、 ``PATH`` にイン"
"ストールされている開発マシン用。。``arm64`` アーキテクチャをターゲットにする"
"には、バージョンが 3.5 以降である必要があります。"

msgid ""
"`Fuse <https://github.com/libfuse/libfuse>`__ for mounting and umounting the "
"dmg image."
msgstr ""
"dmgイメージをマウントおよびアンマウントするには、\\ `Fuse <https://github."
"com/libfuse/libfuse>`_を使用します。"

msgid ""
"`darling-dmg <https://github.com/darlinghq/darling-dmg>`__, which needs to "
"be built from source. The procedure for that is explained below."
msgstr ""
"`darling-dmg <https://github.com/darlinghq/darling-dmg>`_ 、 ソースから構築す"
"る必要があります。そのための手順を以下に説明します。"

msgid ""
"For building darling-dmg, you'll need the development packages of the "
"following libraries: fuse, icu, openssl, zlib, bzip2."
msgstr ""
"「darling-dmg」を構築するには、fuse、icu、openssl、zlib、bzip2というライブラ"
"リの開発パッケージが必要です。"

msgid ""
"`cctools-port <https://github.com/tpoechtrager/cctools-port>`__ for the "
"needed build tools. The procedure for building is quite peculiar and is "
"described below."
msgstr ""
"`cctools-port <https://github.com/tpoechtrager/cctools-port>`_ 必要なビルド"
"ツール。ビルドの手順は非常に独特であり、以下に説明します。"

msgid "This also has some extra dependencies: automake, autogen, libtool."
msgstr "これには、automake、autogen、libtoolなどの追加の依存関係もあります。"

msgid "Configuring the environment"
msgstr "環境のコンフィグ"

msgid "darling-dmg"
msgstr "\\ darling-dmg"

msgid "Clone the repository on your machine:"
msgstr "マシン上のリポジトリのクローンを作成します:"

msgid "Build it:"
msgstr "それを構築します:"

msgid "Preparing the SDK"
msgstr "SDKの準備"

msgid "Mount the XCode image:"
msgstr "XCodeイメージをマウントする:"

msgid "Extract the iOS SDK:"
msgstr "\\ iOS SDK を抽出する:"

msgid "Pack the SDK:"
msgstr "SDKをパックする:"

msgid "Toolchain"
msgstr "ツールチェーン"

msgid "Build cctools:"
msgstr "ビルドcctools:"

msgid ""
"Copy the tools to a nicer place. Note that the SCons scripts for building "
"will look under ``usr/bin`` inside the directory you provide for the "
"toolchain binaries, so you must copy to such subdirectory, akin to the "
"following commands:"
msgstr ""
"ツールをより良い場所にコピーします。ビルド用のSConsスクリプトは、ツールチェー"
"ンバイナリに指定するディレクトリ内の ``usr/bin`` の下に置かれるので、次のコマ"
"ンドに似たサブディレクトリにコピーする必要があります:"

msgid ""
"Now you should have the iOS toolchain binaries in ``/home/user/iostoolchain/"
"usr/bin``."
msgstr ""
"\\ iOSツールチェーンバイナリが ``/home/user/iostoolchain/usr/bin`` にあるはず"
"です。"

msgid "Compiling Godot for iPhone"
msgstr "\\ iPhone用ゴドットのコンパイル"

msgid ""
"Once you've done the above steps, you should keep two things in your "
"environment: the built toolchain and the iPhoneOS SDK directory. Those can "
"stay anywhere you want since you have to provide their paths to the SCons "
"build command."
msgstr ""
"上記のステップを完了したら、ビルドされたツールチェーンとiPhoneOS SDKディレク"
"トリーという2つのものを環境に残しておく必要があります。これらはSConsのbuildコ"
"マンドにパスを指定する必要があるため、任意の場所に置くことができます。"

msgid ""
"For the iPhone platform to be detected, you need the ``OSXCROSS_IOS`` "
"environment variable defined to anything."
msgstr ""
"\\ iPhoneプラットフォームを検出するには、 ``OSXCROSS_IOS`` 環境変数を何かに定"
"義する必要があります。"

msgid ""
"Now you can compile for iPhone using SCons like the standard Godot way, with "
"some additional arguments to provide the correct paths:"
msgstr ""
"これで、標準的なGodotの方法のようにSConsを使ってiPhone用にコンパイルでき、正"
"しいパスを提供するためのいくつかの引数を追加することができます:"

msgid "Producing fat binaries"
msgstr "ファットバイナリの生成"

msgid ""
"Apple requires a fat binary with both architectures (``armv7`` and "
"``arm64``) in a single file. To do this, use the ``arm-apple-darwin11-lipo`` "
"executable. The following example assumes you are in the root Godot source "
"directory:"
msgstr ""
"Appleでは、1 つのファイルに両方のアーキテクチャ ( ``armv7`` 及び ``arm64`` ) "
"を含むファットバイナリを必要とします。これを行うには、 ``arm-apple-darwin11-"
"lipo`` 実行可能ファイルを使用します。次の例では、ルートGodotソースディレクト"
"リに入っていると仮定します:"

msgid "Then you will have iOS fat binaries in ``bin`` directory."
msgstr "次に、\\ ``bin`` にiOSのファットバイナリがあります。"

msgid "Translation status"
msgstr "翻訳ステータス"
