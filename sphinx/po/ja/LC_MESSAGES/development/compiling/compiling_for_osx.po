# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for macOS"
msgstr "macOS へのコンパイル"

msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""

msgid "Requirements"
msgstr "必要条件"

msgid "For compiling under macOS, the following is required:"
msgstr "macOSでコンパイルするには、以下が必要です:"

msgid "`Python 3.5+ <https://www.python.org>`_."
msgstr "`Python 3.5 以降 <https://www.python.org/>`_\\ 。"

#, fuzzy
msgid "`SCons 3.0+ <https://www.scons.org>`_ build system."
msgstr "`SCons <https://www.scons.org>`__ ビルドシステム。"

msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (またはXcode用のよ"
"り軽量なコマンドラインツール)。"

msgid ""
"*Optional* - `yasm <https://yasm.tortall.net/>`_ (for WebM SIMD "
"optimizations)."
msgstr ""
"*オプション* - `yasm <https://yasm.tortall.net/>`_ (WebM SIMD最適化用)。"

msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons and yasm using the following command::"
msgstr ""
"`Homebrew <https://brew.sh/>`_ がインストールされている場合、次のコマンドを使"
"用してSConsとyasmを簡単にインストールできます:"

msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr ""
"Homebrewをインストールすると、Xcodeのコマンドラインツールがまだない場合は自動"
"的に取得されます。"

#, fuzzy
msgid ""
"Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, "
"you can easily install SCons and yasm using the following command::"
msgstr ""
"`Homebrew <https://brew.sh/>`_ がインストールされている場合、次のコマンドを使"
"用してSConsとyasmを簡単にインストールできます:"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Godotにおける基本的なSconsの使い方については、\\ :ref:"
"`doc_introduction_to_the_buildsystem`\\ を参照してください。"

msgid "Compiling"
msgstr "コンパイル"

msgid "Start a terminal, go to the root directory of the engine source code."
msgstr ""
"ターミナルを起動し、エンジンのソースコードのルートディレクトリに移動します。"

msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr ""

msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr ""

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands and then use ``lipo`` to bundle them together::"
msgstr ""

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""
"すべてうまくいけば、結果のバイナリ実行可能ファイルは ``bin/`` サブディレクト"
"リに置かれます。この実行可能ファイルにはエンジン全体が含まれており、依存関係"
"なしで実行されます。それを実行すると、プロジェクトマネージャーが表示されま"
"す。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#, fuzzy
msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/osx_tools.app``. Typically, for an "
"optimized editor binary built with ``target=release_debug``::"
msgstr ""
"公式ビルドのように.appを作成するには、\\ ``misc/dist/osx_tools.app`` にあるテ"
"ンプレートを使用する必要があります。通常、\\ ``scons p=osx "
"target=release_debug`` で構築された最適化されたエディタバイナリの場合:"

msgid "Compiling a headless/server build"
msgstr ""

msgid ""
"To compile a *headless* build which provides editor functionality to export "
"projects in an automated manner, use::"
msgstr ""

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

msgid ""
"To compile a release *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""

msgid "Building export templates"
msgstr "エクスポートテンプレートの構築"

msgid ""
"To build macOS export templates, you have to compile with ``tools=no`` (no "
"editor) and respectively for ``target=release`` (release template) and "
"``target=release_debug``."
msgstr ""

msgid ""
"Official templates are universal binaries which support both Intel x86_64 "
"and ARM64 architectures. You can also create export templates that support "
"only one of those two architectures by leaving out the ``lipo`` step below."
msgstr ""

msgid "For Intel x86_64::"
msgstr ""

msgid "For ARM64 (Apple M1)::"
msgstr ""

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands blocks and then use ``lipo`` to bundle them together::"
msgstr ""

msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/osx_template.app``. The release and "
"debug builds should be placed in ``osx_template.app/Contents/MacOS`` with "
"the names ``godot_osx_release.64`` and ``godot_osx_debug.64`` respectively. "
"You can do so with the following commands (assuming a universal build, "
"otherwise replace the ``.universal`` extension with the one of your arch-"
"specific binaries)::"
msgstr ""

msgid ""
"You can then zip the ``osx_template.app`` folder to reproduce the ``osx."
"zip`` template from the official Godot distribution::"
msgstr ""

msgid "Cross-compiling for macOS from Linux"
msgstr "LinuxからのmacOSのクロスコンパイル"

msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""
"Linux環境でmacOS用にコンパイルすることが可能です(Linux用のWindows Subsystemを"
"使用してWindowsでコンパイルすることもできます)。そのためには、macOSをターゲッ"
"トとして使用できるように、\\ `OSXCross <https://github.com/tpoechtrager/"
"osxcross>`__ をインストールする必要があります。まず、指示に従ってインストール"
"します:"

msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""
"`OSXCross repository <https://github.com/tpoechtrager/osxcross>`_ をマシン上"
"のどこかにクローンします(またはzipファイルをダウンロードしてどこかに解凍しま"
"す)。例:"

msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""
"以下のURLの内容に従ってSDKをパッケージ化します:https://github.com/"
"tpoechtrager/osxcross#packaging-the-sdk"

msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""
"OSXCrossをインストールするには、以下の手順に従ってください:https://github."
"com/tpoechtrager/osxcross#installation"

msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""
"その後、\\ ``OSXCROSS_ROOT`` をOSXCrossインストールへのパス(リポジトリをク"
"ローンした、またはzipを抽出したのと同じ場所)として定義する必要があります。例:"

msgid "Now you can compile with SCons like you normally would::"
msgstr "これで、通常のようにSConsでコンパイルできます:"

msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""
"SConsビルドシステムで予期されているものとは異なるOSXCross SDKバージョンがある"
"場合は、\\ ``osxcross_sdk`` 引数でカスタムバージョンを指定できます:"

msgid "Translation status"
msgstr "翻訳ステータス"
