# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Coding the player"
msgstr "プレイヤーのコーディング"

msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr "このパートでは、playerの動きやアニメーション、衝突判定を設定します。"

msgid ""
"To do so, we need to add some functionality that we can't get from a built-"
"in node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"そのために、組み込みノードからは得られない機能を追加する必要があるので、スク"
"リプトを追加します。 ``Player`` ノードをクリックし、「スクリプトをアタッチ」"
"ボタンをクリックします:"

msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"スクリプト設定ウィンドウ内の設定はそのままで構いません。「作成」をクリックし"
"てください:"

msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"C#スクリプトまたはその他の言語を作成する場合は、作成を実行する前に [言語] ド"
"ロップダウン メニューから言語を選択します。"

msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"はじめてGDScriptを扱う場合は、 :ref:`doc_scripting` を読んでから先に進んでく"
"ださい。"

msgid "Start by declaring the member variables this object will need:"
msgstr "まず、このオブジェクトに必要なメンバー変数を宣言します:"

msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"最初の変数 ``speed`` で ``export`` キーワードを使用すると、インスペクタでその"
"値を設定できるようになります。これは、値をノードの組み込みプロパティのように"
"調整できるようにする場合に便利です。 ``Player`` ノードをクリックすると、イン"
"スペクタの \"Script Variables\" セクションにプロパティが表示されます。ここで"
"値を変更すると、スクリプトに記述された値よりも優先されることに注意してくださ"
"い。"

msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"C#を使用している場合、新しいエクスポート変数またはシグナルを表示する場合は、"
"プロジェクトアセンブリを(再)ビルドする必要があります。このビルドは、エディタ"
"ウィンドウの下部にある「Mono」をクリックしてMonoパネルを表示し、「Build "
"Project」ボタンをクリックして手動でトリガーできます。"

msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 関数は、ノードがシーンツリーに入ると呼び出されます。これは、ゲー"
"ムウィンドウのサイズを調べる良いタイミングです:"

msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"これで ``_process()`` 関数を使用して、プレイヤーが何をするかを定義できます。 "
"``_process()`` はフレームごとに呼び出されるため、これを使用してゲームの要素を"
"更新しますが、これは頻繁に変更されることが予想されます。プレイヤーの場合、次"
"のことを行う必要があります:"

msgid "Check for input."
msgstr "入力をチェックします。"

msgid "Move in the given direction."
msgstr "指定した方向に移動します。"

msgid "Play the appropriate animation."
msgstr "適切なアニメーションを再生します。"

msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this game, "
"we will map the arrow keys to the four directions."
msgstr ""
"まず、入力をチェックする必要があります - プレイヤーはキーを押しているでしょう"
"か？このゲームでは、4方向の入力チェックをする必要があります。入力アクション"
"は、プロジェクト設定の「インプットマップ」で定義されます。ここで、カスタムイ"
"ベントを定義し、異なるキー、マウスイベント、またはその他の入力を割り当てるこ"
"とができます。このデモでは、キーボードの矢印キーを4方向に割り当てます。"

msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""
"「プロジェクト」→「プロジェクト設定」の順にクリックしてプロジェクト設定を開"
"き、上部の「インプットマップ」タブをクリックします。一番上のバーに"
"\"move_right\"と入力し、「追加」をクリックして ``move_right`` アクションを追"
"加します。"

msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"then click the \"Key\" option in the drop-down menu. A dialog asks you to "
"type in the desired key. Press the right arrow on your keyboard and click "
"\"Ok\"."
msgstr ""
"キー入力をこのアクションに設定する必要があります。右の\"+\"アイコンをクリック"
"し、出てきたドロップダウンメニューの中から\"Key\"オプションを選択します。どの"
"キーを利用したいか聞かれますので、キーボードの右矢印キーをクリック"
"し、\"Ok\"を選択してください。"

msgid "Repeat these steps to add three more mappings:"
msgstr "以上の手順を残り3方向分設定します。"

msgid "``move_left`` mapped to the left arrow key."
msgstr "``move_left`` を左矢印キーに設定します。"

msgid "``move_up`` mapped to the up arrow key."
msgstr "``move_up`` を上矢印キーに設定します。"

msgid "And ``move_down`` mapped to the down arrow key."
msgstr "そして``move_down`` を下矢印キーに設定します。"

msgid "Your input map tab should look like this:"
msgstr "インプットマップは次のようになります:"

msgid "Click the \"Close\" button to close the project settings."
msgstr "「閉じる」ボタンを押してプロジェクト設定を終了します。"

msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""
"今回は一つのキーのみを各アクションに設定しましたが、複数のキーやジョイス"
"ティックボタン、マウスボタンを同じアクションに設定することができます。"

msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"キーが押されているかどうかを ``Input.is_action_pressed()`` を使用して検出でき"
"ます。これは、押された場合は ``true`` 、押されていない場合は ``false`` を返し"
"ます。"

msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"まず ``velocity`` を ``(0, 0)`` に設定することから始めます - デフォルトでは、"
"プレイヤーは動いてはいけません。次に、各入力をチェックし、 ``velocity`` から"
"加算/減算して全体の方向を取得します。たとえば、 ``右`` と ``下`` を同時に押し"
"た場合、結果の ``velocity`` ベクトルは ``(1, 1)`` になります。この場合、水平"
"方向と垂直方向の動きを追加しているため、プレイヤーは水平方向に移動した場合よ"
"りも、斜め方向に\\ *速く*\\ 移動します。"

msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"加速度を\\ *正規化*\\ すれば、これを防ぐことができます。つまり、速度の\\ *長"
"さ*\\ を ``1`` に設定し、それから希望の速度を乗算します。これは、これ以上速い"
"対角移動がないことを意味します。"

msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"以前にベクトル演算を使用したことがない場合、あるいは忘れてしまった場合"
"は、\\ :ref:`doc_vector_math`\\ でGodotのベクトル使用の説明をみることができま"
"す。これは知っておくと良いですが、このチュートリアルの残りの部分では必要ない"
"でしょう。"

msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"また、AnimatedSpriteの ``play()`` または ``stop()`` を呼び出せるようにするた"
"め、プレイヤーが移動中かどうかも確認します。"

msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, "
"``$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` は ``get_node()`` の省略形です。したがって、上記のコードでは、\\ "
"``$AnimatedSprite.play()`` は ``get_node(\"AnimatedSprite\").play()`` と同じ"
"です。"

msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"GDScriptでは、\\ ``$`` は現在のノードからの相対パスにあるノードを返し、ノード"
"が見つからない場合は ``null`` を返します。 AnimatedSpriteは現在のノードの子で"
"あるため、\\ ``$AnimatedSprite`` を使用できます。"

msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"移動方向がわかったので、プレイヤーの位置を更新します。\\ ``clamp()`` を使用し"
"て、プレイヤーが画面を離れないようにします。\\ *Clamping*\\ の意味は長さに制"
"限をかける事です。\\ ``_process`` 関数の下部に追加して下さい (`else` までイン"
"デントしないように注意):"

msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()` 関数の `delta` パラメーターは *フレームの長さ* - 前のフレームが"
"完了するまでに要した時間を参照します。この値を使うことで、動きの処理はフレー"
"ムレートの変動の影響を受けなくなります。"

msgid ""
"Click \"Play Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm you "
"can move the player around the screen in all directions."
msgstr ""
"「シーンを実行」( :kbd:`F6` 、macOSでは :kbd:`Cmd + R` )をクリックして、画面"
"上で全方向にプレイヤーを移動できることを確認してください。"

msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "「デバッガ」パネルで以下のようなエラーが発生した場合"

msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``null インスタンス上の ベース 'null インスタンス' の関数 'play' を呼び出そう"
"としています。``"

msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"この場合、AnimatedSpriteノード名のスペルが間違っている可能性があります。ノー"
"ド名は大文字と小文字を区別するので、\\ ``$NodeName`` はシーンツリーに表示され"
"ている名前と一致させる必要があります。"

msgid "Choosing animations"
msgstr "アニメーションの選択"

msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"プレイヤーを移動できるようになったので、AnimatedSpriteが再生するアニメーショ"
"ンを方向に合わせて変更させる必要があります。今あるのは「walk」アニメーション"
"で、プレイヤーは右方向へ歩きます。左への動きには ``flip_h`` プロパティを使用"
"して水平に反転させます。また「up」アニメーションもあり、これは ``flip_v`` で"
"垂直に反転させれば、下への動きになります。では、このコードを ``_process()`` "
"関数の最後に配置します:"

msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"上記のコードにおけるブール値の代入は、プログラマーがよく使う略式記法です。比"
"較テスト (ブール値) とブール値の代入を行っていますが、両方とも同時に行うこと"
"ができます。次のコードと、上記の1行でのブール値代入とを比べてみましょう。"

msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""
"もう一度シーンを再生して、それぞれの方向のアニメーションが正しいことを確認し"
"てください。"

msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"ここでよくある間違いは、アニメーションの名前を間違って入力してしまうことで"
"す。SpriteFramesパネルに表示されるアニメーションの名前は、コードの中で入力し"
"たものと一致していなければなりません。もしアニメーションの名前を "
"``\"Walk\"`` とした場合、コード中では大文字の \"W\" も使わなければなりませ"
"ん。"

msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"動きが正しく機能していることを確認したら、次の行を ``_ready()`` に追加して、"
"ゲームの開始時にプレイヤーが非表示になるようにします:"

msgid "Preparing for collisions"
msgstr "コリジョン(衝突/当り判定)の準備"

msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"``Player`` には敵に攻撃されたことを検知してもらいたいのですが、まだ敵を作って"
"いません！Godotの\\ *シグナル*\\ 機能を使って動作させるので、大丈夫です。"

msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "スクリプトの先頭で ``extends Area2d`` の後に、次の行を追加します:"

msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"これは、プレイヤーが敵と衝突したときにプレイヤーが発信する(送り出す)\"hit\"と"
"呼ばれるカスタムシグナルを定義します。衝突を検出するために ``Area2D`` を使用"
"します。 ``Player`` ノードを選択し、インスペクタタブの横にある「ノード」タブ"
"をクリックすると、プレイヤーが発信するシグナルのリストが表示されます:"

msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"カスタムの「hit」シグナルもありますね！　敵は ``RigidBody2D`` ノードになるた"
"め、 ``body_entered(body: Node)`` シグナルが必要です。これは、ボディがプレイ"
"ヤーに接触したときに発信されます。「接続」をクリックすると、「シグナルの接"
"続」ウィンドウが現れます。これらの設定を変更する必要はないので、再度「接続」"
"をクリックしてください。Godotはプレイヤーのスクリプトに自動的に関数を作成しま"
"す。"

msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"シグナルがこの関数に接続されていることを示す緑色のアイコンに注意してくださ"
"い。次のコードを関数に追加します:"

msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"敵がプレイヤーに当たるたびに、シグナルが発せられます。プレイヤーの衝突を無効"
"にして、 ``hit`` シグナルを複数回トリガーしないようにする必要があります。"

msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"エリアのコリジョン形状を無効にすると、それがエンジンの衝突処理の途中だったと"
"きにエラーが発生する可能性があります。 ``set_deferred()`` を使用すると、安全"
"にシェイプを無効にできるようになるまでGodotを待機させることができます。"

msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"最後のピースとなるのは、新しいゲームの開始時にPlayerをリセットするため、呼び"
"出す関数を追加することです。"

msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr "playerが設定できたことを確認したら、次のパートで敵を設定しましょう。"

msgid "Translation status"
msgstr "翻訳ステータス"
