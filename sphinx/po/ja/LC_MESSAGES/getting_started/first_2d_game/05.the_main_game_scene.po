# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "The main game scene"
msgstr "メインシーン"

msgid ""
"Now it's time to bring everything we did together into a playable game scene."
msgstr "今まで作成したすべてをまとめ、遊べるゲームにするときが来ました。"

msgid ""
"Create a new scene and add a :ref:`Node <class_Node>` named ``Main``. (The "
"reason we are using Node instead of Node2D is because this node will be a "
"container for handling game logic. It does not require 2D functionality "
"itself.)"
msgstr ""
"新しいシーンを作成し、 \\ ``Main``\\ という名前の :ref:`Node <class_Node>` を"
"追加します。 (Node2D ではなく、Nodeを使用する理由は、これはゲームロジックを扱"
"うノードであり、これ自体に2D機能が不要であるためです。)"

msgid ""
"Click the **Instance** button (represented by a chain link icon) and select "
"your saved ``Player.tscn``."
msgstr ""
"**インスタンス** ボタン（チェーン リンク アイコンで表示）をクリックし、保存し"
"た \\ ``Player.tscn``\\ を選択してください。"

msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr "次に ``Main`` の子供として以下のノードを追加します(値は秒単位です)。"

msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>`\\ ( ``MobTimer`` という名前) - モブが出現する頻度"
"を制御する"

msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` ( ``ScoreTimer`` という名前) - 一秒ごとに得点を上"
"げる"

msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` ( ``StartTimer`` という名前) - 開始する前に遅延さ"
"せる"

msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
"\\ :ref:`Position2D <class_Position2D>` (``StartPosition`` という名前) - プレ"
"イヤーの開始位置を示す"

msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "各 ``Timer`` ノードの ``Wait Time`` プロパティを次のように設定します:"

msgid "``MobTimer``: ``0.5``"
msgstr "\\ ``MobTimer``: ``0.5``"

msgid "``ScoreTimer``: ``1``"
msgstr "\\ ``ScoreTimer``: ``1``"

msgid "``StartTimer``: ``2``"
msgstr "\\ ``StartTimer``: ``2``"

msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"さらに、 ``StartTimer`` の ``One Shot`` プロパティを「On」に設定し、 "
"``StartPosition`` ノードの ``Position`` を ``(240, 450)`` に設定します。"

msgid "Spawning mobs"
msgstr "モブの生成"

msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"メインノードは新しいモブを生成し、画面の端のランダムな場所に表示するようにし"
"ます。 ``Main`` の子として ``MobPath`` という名前の\\ :ref:`Path2D "
"<class_Path2D>`\\ ノードを追加します。 ``Path2D`` を選択すると、エディタの上"
"部にいくつかの新しいボタンが表示されます:"

msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""
"中央のアイコン([点を追加])を選択し、表示されているコーナーをクリックしてポイ"
"ントを追加してパスを描画します。ポイントをグリッドにスナップするには、[グリッ"
"ドスナップを使う]が選択されていることを確認します。このオプションは、[ロック]"
"ボタンの左側にあり、「交差する線と磁石」のアイコンで表示されています。"

msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*時計回り*\\ にパスを描画します。そうしないと、モブは\\ *内側*\\ ではなく\\ *"
"外側*\\ を向いて発生します！"

msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"画像にポイント ``4`` を配置した後、「カーブを閉じる」ボタンをクリックすると、"
"カーブが完成します。"

msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"パスが定義されたので、 ``MobPath`` の子として\\ :ref:`PathFollow2D "
"<class_PathFollow2D>`\\ ノードを追加し、 ``MobSpawnLocation`` という名前を付"
"けます。このノードは自動的に回転し、パスの移動に従うので、パスに沿ってランダ"
"ムな位置と方向を選択できます。"

msgid "Your scene should look like this:"
msgstr "シーンは次のようになります:"

msgid "Main script"
msgstr "Mainスクリプト"

msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"スクリプトを ``Main`` に追加します。 スクリプトの上部で、\\ "
"``export(PackedScene)`` を使用して、インスタンス化するMobシーンを選択できるよ"
"うにします。"

msgid ""
"We also add a call to ``randomize()`` here so that the random number "
"generator generates different random numbers each time the game is run:"
msgstr ""
"また、ここで\\ ``randomize()``\\ の呼び出しを追加し、ゲームを実行する度に乱数"
"発生器が異なる乱数を生成するようにします。"

msgid ""
"Click the ``Main`` node and you will see the ``Mob Scene`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""
"\\ ``Main``\\ ノードをクリックすると、インスペクタの「Script Variables(スクリ"
"プト変数)」の下に\\ ``Mob Scene``\\ プロパティがあります。"

msgid "You can assign this property's value in two ways:"
msgstr "このプロパティの値は、ふたつの方法で指定できます:"

msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" dock and drop it in the **Mob "
"Scene** property."
msgstr ""
"「ファイルシステム」パネルから ``Mob.tscn`` をドラッグし、 **Mob Scene** プロ"
"パティにドロップします。"

msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr ""
"[空] の隣にある下矢印をクリックして「読み込み」を選び、\\ ``Mob.tscn`` を選択"
"します。"

msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""
"次に、シーンドックの ``Player`` ノードを選択し、サイドバーのノードドックにア"
"クセスします。ノードドックでは、シグナルタブが選択されていることを確認してく"
"ださい。"

msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"``Player`` ノードのシグナルのリストが表示されているはずです。リストの中から "
"``hit`` のシグナルを見つけてダブルクリックしてください (または右クリックして "
"\"接続...\" を選択)。これでシグナルの接続ダイアログが開きます。ゲームが終了し"
"たときに必要な処理を行う ``game_over`` という名前の新しい関数をこれから作りま"
"す。シグナル接続ダイアログの下部にある「受信側メソッド」ボックスに"
"「game_over」と入力し、「接続」をクリックしてください。新しい関数に以下のコー"
"ドを追加し、さらに、新しいゲームのための設定を行う ``new_game`` 関数も追加し"
"ます:"

msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"次に、各Timerノード (``StartTimer``\\ 、\\ ``ScoreTimer``\\ 、\\ および "
"``MobTimer``) の ``timeout()`` シグナルをメインスクリプトに接続します。\\ "
"``StartTimer`` は他の2つのタイマーを開始します。\\ ``ScoreTimer`` はスコアを1"
"増やします。"

msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position. When "
"we spawn a mob, we'll pick a random value between ``150.0`` and ``250.0`` "
"for how fast each mob will move (it would be boring if they were all moving "
"at the same speed)."
msgstr ""
"\\ ``_on_MobTimer_timeout()``\\ では、モブ インスタンスを作成し、\\ "
"``Path2D``\\ に沿ってランダムに開始場所を選び、モブを動作させることにしまし"
"た。\\ ``PathFollow2D``\\ ノードはパスに沿って自動的に回転するので、これを使"
"用して mob の方向とその位置を選択します。モブ を生成するときは、\\ "
"``150.0``\\ と \\ ``250.0``\\ の間でランダムに値を選び、それぞれの モブ がど"
"れくらい速く動くかを決定します（モブがすべて同じ速度で動くと退屈になってしま"
"うでしょう）。"

msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""
"注意点として、新しいインスタンスは ``add_child()`` を使ってシーンに追加しなけ"
"ればなりません。"

msgid ""
"Why ``PI``? In functions requiring angles, Godot uses *radians*, not "
"degrees. Pi represents a half turn in radians, about ``3.1415`` (there is "
"also ``TAU`` which is equal to ``2 * PI``). If you're more comfortable "
"working with degrees, you'll need to use the ``deg2rad()`` and ``rad2deg()`` "
"functions to convert between the two."
msgstr ""
"なぜ \\ ``PI``\\ なのでしょうか？角度を必要とする関数では、Godot は度ではな"
"く、\\ *ラジアン*\\ を使用します。円周率は、半回転をラジアンで表します。\\ "
"``3.1415``\\ (\\ ``TAU``\\ もあり、\\ ``2 * PI``\\ と同じです) です。もし、度"
"を扱う方が好きなら、\\ ``deg2rad()``\\ と\\ ``rad2deg()``\\ という関数を使っ"
"て両者を変換しなければならないでしょう。"

msgid "Testing the scene"
msgstr "シーンのテスト"

msgid ""
"Let's test the scene to make sure everything is working. Add this "
"``new_game`` call to ``_ready()``:"
msgstr ""
"シーンをテストして、すべてが動作していることを確認してみましょう。これを \\ "
"``_ready()``\\ に追加してください:"

msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""
"また、 ``Main`` を「メインシーン」として設定してみましょう - ゲームが起動した"
"ときに自動的に実行されるシーンです。「実行」ボタンを押して、プロンプトが表示"
"されたら ``Main.tscn`` を選択してください。"

msgid ""
"If you had already set another scene as the \"Main Scene\", you can right "
"click ``Main.tscn`` in the FileSystem dock and select \"Set As Main Scene\"."
msgstr ""
"すでに他のシーンをメインシーンに設定していた場合は、ファイルシステム"
"(\"FileSystem\") ドックの \\ ``Main.tscn``\\ を右クリックして「メインシーンと"
"して設定」(\"Set As Main Scene\") を選択してください。"

msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""
"プレイヤーを移動でき、モブが発生したり、モブに当たった時にプレイヤーが消える"
"ようになっているはずです。"

msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""
"全て動作していることが確認できたら、 ``_ready()`` から ``new_game()`` の呼び"
"出しを削除してください。"

msgid ""
"What's our game lacking? Some user interface. In the next lesson, we'll add "
"a title screen and display the player's score."
msgstr ""
"私たちのゲームには何が足りないのでしょう？それは、ユーザーインターフェイスで"
"す。次のレッスンでは、タイトル画面を追加して、プレイヤーのスコアを表示するこ"
"とにします。"

msgid "Translation status"
msgstr "翻訳ステータス"
