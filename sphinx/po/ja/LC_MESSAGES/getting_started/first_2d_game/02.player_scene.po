# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "playerシーンの作成"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"プロジェクト設定が完了したので、操作できるキャラクターを作成しましょう。"

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"最初のシーンでは、 ``Player`` オブジェクトを定義します。Player シーンを独立し"
"て作成する利点の 1 つは、たとえゲームの他の部分を作成する前であっても、個別に"
"テストができることです。"

msgid "Node structure"
msgstr "ノード構成"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"はじめに、プレイヤーオブジェクトのルートノードを選択する必要があります。原則"
"として、シーンのルートノードはオブジェクトに望まれる機能 (オブジェクトが*何で"
"あるか*) を反映する必要があります。「その他のノード」のボタンをクリックして、"
"シーンに :ref:`Area2D <class_Area2D>`` ノードを加えます。"

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godotは、シーンツリーのノードの横に警告アイコンを表示します。現時点では無視し"
"て構いません。後で対処します。"

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D`` を使用すると、プレイヤーに重なり合ったり、プレイヤーに衝突したりす"
"るオブジェクトを検出できます。ノードの名前をダブルクリックして、名前を "
"``Player`` に変更します。シーンのルートノードを決めたので、これにノードを追加"
"して機能を追加できます。"

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` ノードに子を追加する前に、追加した子を誤って移動したりサイズを変更"
"したりしないようにします。ノードを選択し、ロックの右側にあるアイコンをクリッ"
"クします。ツールチップには「オブジェクトの子を選択不可にする。」と書いてあり"
"ます"

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"シーンを保存します。 [シーン]-> [シーンを保存]をクリックするか、Windows/Linux"
"では :kbd:`Ctrl + S` を押し、macOSでは :kbd:`Cmd + S` を押します。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "このプロジェクトでは、Godotの命名規則に従います。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: クラス(ノード)はPascalCaseを使用し、変数と関数はsnake_caseを使"
"用し、定数はALL_CAPSを使用します(\\ :ref:`doc_gdscript_styleguide`\\ を参"
"照)。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: クラス、export変数、メソッドはPascalCaseを使用し、プライベートフィー"
"ルドは _camelCase を使用し、ローカル変数とパラメーターは camelCase を使用しま"
"す(\\ :ref:`doc_c_sharp_styleguide`\\ を参照)。シグナルを接続するときは、メ"
"ソッド名を正確に入力してください。"

msgid "Sprite animation"
msgstr "スプライトアニメーション"

msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"``Player`` ノードをクリックし、\\ :ref:`AnimatedSprite "
"<class_AnimatedSprite>` ノードを子として追加します。 ``AnimatedSprite`` は、"
"Playerの外観とアニメーションを処理します。ノードの横に警告マークがあることに"
"注意してください。\\ ` `AnimatedSprite`` にはアニメーションのリストである :"
"ref:`SpriteFrames <class_SpriteFrames>` リソースが必要です。作成するには、イ"
"ンスペクタ上の ``Frames`` プロパティをクリックし、「[空]」→「新規 "
"SpriteFrames」をクリックします。更にもう一度クリックすることで、SpriteFrames"
"パネルが自動的に開きます:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"左側にはアニメーションの一覧があります。「default」をクリックし、「walk」に名"
"前を変更します。次に、「新規アニメーション」ボタンをクリックして、「up」とい"
"う名前の 2 番目のアニメーションを作成します。 ファイルシステムタブ内、 "
"``art`` フォルダより、 ``playerGrey_up[1,2]`` と ``playerGrey_walk[1,2]`` を "
"「アニメーション フレーム」側にドラッグします:"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"プレイヤーの画像はゲームウィンドウに対して少し大きすぎるため、縮小する必要が"
"あります。\\ ``AnimatedSprite``\\ ノードをクリックし、 \\ ``Scale``\\ プロパ"
"ティを \\ ``(0.5,0.5)``\\ に設定します。(Scale プロパティは) インスペクタの "
"\\ ``Node2D``\\ ヘッダの下にあります。"

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"最後に、\\ :ref:`CollisionShape2D <class_CollisionShape2D>`\\ を \\ "
"``Player``\\ の子として追加します。これにより、プレイヤーの「ヒットボック"
"ス」、つまりその衝突領域の境界が決定されます。このキャラクターでは、\\ "
"``CapsuleShape2D``\\ ノードがうまくフィットするので、インスペクタの「Shape」"
"の隣で「[空]」->「新規 CapsuleShape2D」をクリックします。2つのサイズハンドル"
"を使用して、スプライトを覆うようにシェイプのサイズを変更します:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完了すると、 ``Player`` シーンは次のようになります:"

msgid "Make sure to save the scene again after these changes."
msgstr "これらの変更後は、必ずシーンを再度保存してください。"

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"次のパートでは、動かしたりアニメーションさせるためのスクリプトをplayerノード"
"に追加します。それから、playerがなにかにあたった事がわかるよう、衝突判定を設"
"定します。"

msgid "Translation status"
msgstr "翻訳ステータス"
