# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating your first script"
msgstr "初めてのスクリプト作成"

msgid ""
"In this lesson, you will code your first script to make the Godot icon turn "
"in circles using GDScript. As we mentioned :ref:`in the introduction <toc-"
"learn-introduction>`, we assume you have programming foundations. The "
"equivalent C# code has been included in another tab for convenience."
msgstr ""
"このレッスンでは、GDScript を使ってGodotアイコンを回転させるスクリプトをコー"
"ディングします。 :ref:`in the introduction <toc-learn-introduction>` で触れた"
"ように、プログラミングの基礎知識があることを前提にしています。同等の C# コー"
"ドは、便宜上、別のタブに含まれています。"

msgid ""
"To learn more about GDScript, its keywords, and its syntax, head to the :ref:"
"`GDScript reference<doc_gdscript>`."
msgstr ""
"GDScript、そのキーワード、およびその構文の詳細については、 :ref:`GDScript "
"reference<doc_gdscript>` にアクセスしてください。"

msgid ""
"To learn more about C#, head to the :ref:`C# basics <doc_c_sharp>` page."
msgstr ""
"C#の詳細については、\\ :ref:`C# basics <doc_c_sharp>` を参照してください。"

msgid "Project setup"
msgstr "プロジェクトの設定"

msgid ""
"Please create a new project to start with a clean slate. Your project should "
"contain one picture: the Godot icon, which we often use for prototyping in "
"the community."
msgstr ""
"では 新規project を作成して下さい、白紙の状態から始めます。プロジェクトには1"
"つの画像ファイルが含まれている必要があります。今回はコミュニティでのプロトタ"
"イピングによく使用されるGodotアイコンを使います。"

msgid ""
"We need to create a Sprite node to display it in the game. In the Scene "
"dock, click the Other Node button."
msgstr ""
"ゲームに表示するには、Spriteノード を作成する必要があります。シーンドックで、"
"[Other Node] ボタンをクリックします。"

msgid ""
"Type \"Sprite\" in the search bar to filter nodes and double-click on Sprite "
"to create the node."
msgstr ""
"検索バーに「Sprite」と入力してノードをフィルタリングし、Spriteをダブルクリッ"
"クしてノードを作成します。"

msgid "Your Scene tab should now only have a Sprite node."
msgstr "これで、[シーン]タブにスプライトノードのみが追加されました。"

msgid ""
"A Sprite node needs a texture to display. In the Inspector on the right, you "
"can see that the Texture property says \"[empty]\". To display the Godot "
"icon, click and drag the file ``icon.png`` from the FileSystem dock onto the "
"Texture slot."
msgstr ""
"スプライトノードを表示するにはテクスチャが必要です。右側のインスペクターで、"
"Textureプロパティが「[空]」と表示されていることがわかります。 Godotアイコンを"
"表示するには、ファイル ``icon.png`` をFileSystemドックからTextureスロットにド"
"ラッグアンドドロップします。"

msgid ""
"You can create Sprite nodes automatically by dragging and dropping images on "
"the viewport."
msgstr ""
"また ビューポートに画像をドラッグアンドドロップすることで、スプライトノードを"
"自動的に作成することもできます。"

msgid ""
"Then, click and drag the icon in the viewport to center it in the game view."
msgstr ""
"次に、ビューポートの Godotアイコン をドラッグし、ゲームビューの中央に配置しま"
"す。"

msgid "Creating a new script"
msgstr "新規スクリプトの作成"

msgid ""
"To create and attach a new script to our node, right-click on Sprite in the "
"scene dock and select \"Attach Script\"."
msgstr ""
"新しいスクリプトを作成してノードにアタッチするには、シーンドックでスプライト"
"を右クリックし、[スクリプトをアタッチ]を選択します。"

msgid ""
"The Attach Node Script window appears. It allows you to select the script's "
"language and file path, among other options."
msgstr ""
"「ノードにスクリプトをアタッチする」(\"Attach node Script\")ウィンドウが表示"
"されます。このウィンドウでは、スクリプトの言語やファイルパスなどのオプション"
"を選択できます。"

msgid ""
"Change the Template from Default to Empty to start with a clean file. Leave "
"the other options by default and click the Create button to create the "
"script."
msgstr ""
"テンプレートを デフォルト から Empty に変更して、クリーンなファイルから始めま"
"す。デフォルトで他のオプションを変更せず、[作成]ボタンをクリックしてスクリプ"
"トを作成します。"

msgid ""
"The Script workspace should appear with your new ``Sprite.gd`` file open and "
"the following line of code:"
msgstr ""
"スクリプトワークスペースに新しい\\ ``Sprite.gd`` \\ ファイルが開いて下記の"
"コードが表示されます。"

msgid ""
"Every GDScript file is implicitly a class. The ``extends`` keyword defines "
"the class this script inherits or extends. In this case, it's ``Sprite``, "
"meaning our script will get access to all the properties and functions of "
"the Sprite node, including classes it extends, like ``Node2D``, "
"``CanvasItem``, and ``Node``."
msgstr ""
"すべてのGDScriptファイルは暗黙的なクラスです。 ``extends`` キーワードは、この"
"スクリプトが継承または拡張クラスであることを定義します。この場合 スクリプト"
"の ``Sprite`` クラスは、 ``Node2D`` 、 ``CanvasItem`` 、 ``Node`` など、拡張"
"クラスを含む、Spriteノードのすべてのプロパティと関数にアクセスできます。"

msgid ""
"In GDScript, if you omit the line with the ``extends`` keyword, your class "
"will implicitly extend :ref:`Reference <class_Reference>`, which Godot uses "
"to manage your application's memory."
msgstr ""
"GDScriptでは、 ``extends`` キーワードの行を省略した場合 :ref:`Reference "
"<class_Reference>` 、 Godotがアプリケーションのメモリを管理するために クラス"
"は暗黙的に拡張されます。"

msgid ""
"Inherited properties include the ones you can see in the Inspector dock, "
"like our node's ``texture``."
msgstr ""
"継承されたプロパティには、ノードの ``texture`` のように、インスペクタードック"
"に表示されるプロパティも含まれます。"

msgid ""
"By default, the Inspector displays a node's properties in \"Title Case\", "
"with capitalized words separated by a space. In GDScript code, these "
"properties are in \"snake_case\", which is lowercase with words separated by "
"an underscore."
msgstr ""
"デフォルトでは、インスペクタータブ内ではノードのプロパティを「Title Case」"
"（タイトルケース）で表示し、大文字の単語をスペースで区切ります。 GDScriptコー"
"ド内では、これらのプロパティは「snake_case」（スネークケース）およびアンダー"
"スコアで区切られた小文字で表記します。"

msgid ""
"You can hover any property's name in the Inspector to see a description and "
"its identifier in code."
msgstr ""
"インスペクター内で任意のプロパティの名前にカーソルを合わせると、その説明と"
"コード内での識別子が表示されます。"

msgid "Hello, world!"
msgstr "ハロー、ワールド!"

msgid ""
"Our script currently doesn't do anything. Let's make it print the text "
"\"Hello, world!\" to the Output bottom panel to get started."
msgstr ""
"現在、スクリプトは何もしません。 手始めに「Hello、world！」というテキストを下"
"部[出力]パネルに表示させましょう。"

msgid "Add the following code to your script:"
msgstr "スクリプトに次のコードを追加します。"

msgid ""
"Let's break it down. The ``func`` keyword defines a new function named "
"``_init``. This is a special name for our class's constructor. The engine "
"calls ``_init()`` on every object or node upon creating it in memory, if you "
"define this function."
msgstr ""
"こまかく見てみましょう。 ``func`` キーワードは、 ``_init`` という名前の新しい"
"関数を定義します。これは、クラスのコンストラクターの特別な名前です。この関数"
"を定義すると、エンジンがメモリ内にオブジェクトまたはノードを作成すると "
"``_init()`` が初期化のため呼ばれます。"

msgid ""
"GDScript is an indent-based language. The tab at the start of the line that "
"says ``print()`` is necessary for the code to work. If you omit it or don't "
"indent a line correctly, the editor will highlight it in red and display the "
"following error message: \"Indented block expected\"."
msgstr ""
"GDScriptはインデントベースの言語です。コードが機能するには、 ``print()`` とい"
"う行の先頭にあるタブが必要です。これを省略したり、行を正しくインデントしな"
"かったりすると、エディターはそれを赤で強調表示し、\"Unexpected indentation(予"
"期しないインデント)\" というエラーメッセージを表示します。"

msgid ""
"Save the scene if you haven't already, then press :kbd:`F6` (:kbd:`Cmd + R` "
"on macOS) to run it. Look at the **Output** bottom panel that expands. It "
"should display \"Hello, world!\"."
msgstr ""
"シーンをまだ保存していない場合は保存し、 :kbd:`F6` を(macOSでは :kbd:`Cmd + "
"R` )押して実行します。展開された下部の ** [Output]** パネルを確認します。 "
"\"Hello, world!\"と表示されているはずです。"

msgid ""
"Delete the ``_init()`` function, so you're only left with the line ``extends "
"Sprite``."
msgstr ""
"次に ``_init()`` 関数を削除して、 ``extends Sprite`` という行だけを残します。"

msgid "Turning around"
msgstr "回転させるには"

msgid ""
"It's time to make our node move and rotate. To do so, we're going to add two "
"member variables to our script: the movement speed in pixels per second and "
"the angular speed in radians per second."
msgstr ""
"スプライトノードを移動および回転させるときが来ました。そのために、スクリプト"
"に2つのメンバー変数を追加します。1秒あたりのピクセル数で表した移動速度と1秒あ"
"たりのラジアンで表した角速度です。"

msgid ""
"Member variables sit near the top of the script, after any \"extends\" "
"lines, but before functions. Every node instance with this script attached "
"to it will have its own copy of the ``speed`` and ``angular_speed`` "
"properties."
msgstr ""
"メンバー変数は、スクリプトの先頭付近、\"extends\" 行の後、関数の前に置かれま"
"す。このスクリプトがアタッチされているすべてのノードインスタンスは、 "
"``speed`` （速度）プロパティと ``angular_speed`` （角速度）プロパティの独自の"
"コピーを持つことになります。"

msgid ""
"Angles in Godot work in radians by default, but you have built-in functions "
"and properties available if you prefer to calculate angles in degrees "
"instead."
msgstr ""
"Godotの角度はデフォルトではラジアン単位で計算されますが、度単位で角度を計算し"
"たい場合に使える組み込み関数やプロパティも用意されています。"

msgid ""
"To move our icon, we need to update its position and rotation every frame in "
"the game loop. We can use the ``_process()`` virtual function of the "
"``Node`` class. If you define it in any class that extends the Node class, "
"like Sprite, Godot will call the function every frame and pass it an "
"argument named ``delta``, the time elapsed since the last frame."
msgstr ""
"アイコンを移動するには、ゲームループ内のフレームごとにアイコンの位置と回転を"
"更新する必要があります。 ``Node`` クラスの ``_process（）`` 仮想関数を使用で"
"きます。 SpriteなどのNodeクラスの拡張クラスで定義すると、Godotはフレームごと"
"に関数を呼び出し、最後のフレームからの経過時間である ``delta`` という名前の引"
"数を渡します。"

msgid ""
"Games work by rendering many images per second, each called a frame, and "
"they do so in a loop. We measure the rate at which a game produces images in "
"Frames Per Second (FPS). Most games aim for 60 FPS, although you might find "
"figures like 30 FPS on slower mobile devices or 90 to 240 for virtual "
"reality games."
msgstr ""
"ゲームは、1秒あたりに数多くの画像をレンダリングすることで機能します。各画像は"
"フレームと呼ばれ、ループしてレンダリングされます。ゲームが画像を生成する速度"
"をフレーム/秒（FPS）で測定します。ほとんどのゲームは60FPSを目指していますが、"
"低速のモバイルデバイスでは30 FPS、バーチャルリアリティゲームでは90〜240のよう"
"な数値が見られる場合があります。"

msgid ""
"The engine and game developers do their best to update the game world and "
"render images at a constant time interval, but there are always small "
"variations in frame render times. That's why the engine provides us with "
"this delta time value, making our motion independent of our framerate."
msgstr ""
"エンジンとゲームの開発者は、一定の時間でゲームの世界を更新しレンダリングする"
"ために最善を尽くしますが、フレームのレンダリング時間には常に小さな変動があり"
"ます。これはエンジンがフレームレートに依存しないモーションを作成するため提供"
"するデルタタイムです。"

msgid "At the bottom of the script, define the function:"
msgstr "スクリプトの最後に、関数を定義します。"

msgid ""
"The ``func`` keyword defines a new function. After it, we have to write the "
"function's name and arguments it takes in parentheses. A colon ends the "
"definition, and the indented blocks that follow are the function's content "
"or instructions."
msgstr ""
"``func`` キーワードは新しい関数を定義します。その後、関数名と引数を括弧で囲ん"
"で記述する必要があります。コロンで定義を終了し、それに続くインデントされたブ"
"ロックが関数のコンテンツまたは命令になります。"

msgid ""
"Notice how ``_process()``, like ``_init()``, starts with a leading "
"underscore. By convention, Godot's virtual functions, that is to say, built-"
"in functions you can override to communicate with the engine, start with an "
"underscore."
msgstr ""
"``_init()`` や ``_process()`` のように関数の先頭がアンダースコアで始まること"
"に注意してください。慣例により、Godotの仮想関数、つまり、エンジンとやりとりす"
"るため オーバーライドされる組み込み関数は、アンダースコアから始まります。"

msgid ""
"The line inside the function, ``rotation += angular_speed * delta``, "
"increments our sprite's rotation every frame. Here, ``rotation`` is a "
"property inherited from the class ``Node2D``, which ``Sprite`` extends. It "
"controls the rotation of our node and works with radians."
msgstr ""
"関数内の行 ``rotation += angular_speed * delta`` は、フレームごとにスプライト"
"の回転角をインクリメントします。ここで、 ``rotation`` は、 ``Sprite`` が拡張"
"する ``Node2D`` クラスから継承されたプロパティです。ノードの回転を制御し、ラ"
"ジアンで指定します。"

msgid ""
"In the code editor, you can ctrl-click on any built-in property or function "
"like ``position``, ``rotation``, or ``_process`` to open the corresponding "
"documentation in a new tab."
msgstr ""
"コードエディタで、「position」、「rotation」、「_ process」などの組み込みプロ"
"パティまたは関数をCtrlキーを押しながらクリックすると対応する説明文が新しいタ"
"ブで開きます。"

msgid "Run the scene to see the Godot icon turn in-place."
msgstr ""
"シーンを実行して、Godotアイコンが指定した位置で回転することを確認します。"

msgid "Moving forward"
msgstr "前進させるには"

msgid ""
"Let's now make the node move. Add the following two lines to the "
"``_process()`` function, ensuring the new lines are indented the same way as "
"the one before them."
msgstr ""
"ノードを動かしてみましょう。次の2行を \\ ``_process（）``\\ 関数に追加し、前"
"の行にそろえインデントします。"

msgid ""
"As we already saw, the ``var`` keyword defines a new variable. If you put it "
"at the top of the script, it defines a property of the class. Inside a "
"function, it defines a local variable: it only exists within the function's "
"scope."
msgstr ""
"すでに見たように、 ``var`` キーワードは新しい変数を定義します。スクリプトの先"
"頭に配置すると、クラスのプロパティとして定義されます。関数内で定義されたもの"
"はローカル変数となり、関数のスコープ内でのみ参照されます。"

msgid ""
"We define a local variable named ``velocity``, a 2D vector representing both "
"a direction and a speed. To make the node move forward, we start from the "
"Vector2 class's constant Vector2.UP, a vector pointing up, and rotate it by "
"calling the ``Vector2.rotated()`` method. This expression, ``Vector2.UP."
"rotated(rotation)``, is a vector pointing forward relative to our icon. "
"Multiplied by our ``speed`` property, it gives us a velocity we can use to "
"move the node forward."
msgstr ""
"``velocity`` という名前のローカル変数を定義します、方向と速度の両方を表す2Dベ"
"クトルです。ノードを前進させるには、Vector2クラスの定数 Vector2.UP（上向きの"
"ベクトル）を用います、回転は ``Vector2.rotated()`` メソッドを呼び出して実行し"
"ます。この式 ``Vector2.UP.rotated（rotation）`` は、アイコンに対して前方を指"
"すベクトルです。 ``speed`` プロパティを掛けることで、ノードを前方に移動するた"
"めの速度が得られます。"

msgid ""
"We add ``velocity * delta`` to the node's ``position`` to move it. The "
"position itself is of type :ref:`Vector2 <class_Vector2>`, a built-in type "
"in Godot representing a 2D vector."
msgstr ""
"ノードの\\ ``position``\\ に \\ ``velocity * delta``\\ を追加して移動していま"
"す。このposition自体は :ref:`Vector2 <class_Vector2>` というタイプで、2次元ベ"
"クトルを表すGodotの組み込み型です。"

msgid "Run the scene to see the Godot head run in circles."
msgstr "シーンを実行してGodotの頭がぐるぐる回るのを確認してください。"

msgid ""
"Moving a node like that does not take into account colliding with walls or "
"the floor. In :ref:`doc_your_first_2d_game`, you will learn another approach "
"to moving objects while detecting collisions."
msgstr ""
"このようなノードの移動では、壁や床との衝突は考慮されません。 ref:"
"`doc_your_first_2d_game` では、衝突を検出しながらオブジェクトを移動させる別の"
"アプローチを学びます。"

msgid ""
"Our node currently moves by itself. In the next part :ref:"
"`doc_scripting_player_input`, we'll use player input to control it."
msgstr ""
"このノードは現在、ノード自身で移動します。次のパート :ref:"
"`doc_scripting_player_input` では、プレイヤーの入力を使ってノードをコントロー"
"ルします。"

msgid "Complete script"
msgstr "完全なスクリプト"

msgid "Here is the complete ``Sprite.gd`` file for reference."
msgstr "参考までに、\\ ``Sprite.gd``\\ ファイル全体は次のようになります。"

msgid "Translation status"
msgstr "翻訳ステータス"
