# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scripting languages"
msgstr "スクリプト言語"

msgid ""
"This lesson will give you an overview of the available scripting languages "
"in Godot. You will learn the pros and cons of each option. In the next part, "
"you will write your first script using GDScript."
msgstr ""
"このレッスンではGodotで使用できるスクリプト言語の概要をお伝えします。それぞれ"
"の長所と短所も学習できます。次のパートではGDScriptを使って最初のスクリプトを"
"書いていきます。"

msgid ""
"**Scripts attach to a node and extend its behavior**. This means that "
"scripts inherit all functions and properties of the node they attach to."
msgstr ""
"**スクリプトはノードに接続され、ノードの振る舞いを拡張するもの** です。これは"
"接続されるノードの関数とプロパティすべてを継承することを意味します。"

msgid ""
"For example, take a game where a Camera2D node follows a ship. The Camera2D "
"node follows its parent by default. Imagine you want the camera to shake "
"when the player takes damage. As this feature is not built into Godot, you "
"would attach a script to the Camera2D node and code the shake."
msgstr ""
"例えば、Camera2Dノードが船を追いかけるゲームで考えてみましょう。Camera2Dノー"
"ドは、デフォルトでは親ノードについて動きます。ここで、プレイヤーがダメージを"
"受けると、カメラが揺れるようにしたいとします。この機能はGodotに組み込まれてい"
"ないので、スクリプトをアタッチしてカメラが揺れるようにコーディングする必要が"
"あります。"

msgid "Available scripting languages"
msgstr "利用可能なスクリプト言語"

msgid ""
"Godot offers **five gameplay programming languages**: GDScript, C#, "
"VisualScript, and, via its GDNative technology, C and C++. There are more :"
"ref:`community-supported languages "
"<doc_what_is_gdnative_third_party_bindings>`, but these are the official "
"ones."
msgstr ""
"Godotは、\\ **5 つのゲームプレイ用プログラミング言語**\\ を提供します。"
"GDScript、C#、VisualScript、そして GDNative テクノロジーによる C++ と C で"
"す。他にも :ref:`community-supported languages "
"<doc_what_is_gdnative_third_party_bindings>` がありますが、これらは正式なもの"
"です。"

msgid ""
"You can use multiple languages in a single project. For instance, in a team, "
"you could code gameplay logic in GDScript as it's fast to write, let level "
"designers script quests in the graphical language VisualScript, and use C# "
"or C++ to implement complex algorithms and maximize their performance. Or "
"you can write everything in GDScript or C#. It's your call."
msgstr ""
"1つのプロジェクトで複数の言語を使用することができます。例えば、チーム内で、"
"ゲームプレイのロジックは記述の速いGDScriptでコーディングし、レベルデザイナー"
"はグラフィカル言語のVisualScriptでクエストをスクリプト化し、C#やC++で複雑なア"
"ルゴリズムを実装してパフォーマンスを最大化するといったことが可能です。あるい"
"は、すべてをGDScriptやC#で記述することもできます。それはあなたが決めることで"
"す。"

msgid ""
"We provide this flexibility to answer the needs of different game projects "
"and developers."
msgstr ""
"このように、さまざまなゲームプロジェクトや開発者のニーズに応えるために、柔軟"
"な対応を行っています。"

msgid ""
"`Godot 4.0 will remove VisualScript from core entirely. <https://godotengine."
"org/article/godot-4-will-discontinue-visual-scripting>`__ As a result, "
"creating new projects using visual scripting in Godot is not recommended. "
"Future Godot 4.x releases may have VisualScript reimplemented as an "
"extension."
msgstr ""
"`Godot4.0ではビジュアルスクリプトを完全に廃止することが決定されています。"
"<https://godotengine.org/article/godot-4-will-discontinue-visual-scripting>` "
"そのため、これからビジュアルスクリプトを使用してプロジェクトを作成するのは推"
"奨されていません。Godot4.0より先のバージョンでビジュアルスクリプトを拡張機能"
"としてリリースする可能性はあります。"

msgid ""
"While Godot 3.x will keep VisualScript supported, we recommend :ref:`trying "
"out GDScript <toc-learn-scripting-gdscript>` instead, especially if you "
"intend to migrate your project to Godot 4."
msgstr ""
"Godot3はビジュアルスクリプトをサポートしているものの、特にGodot4に移行したい"
"と考えている場合はこちらを :ref:`trying out GDScript <toc-learn-scripting-"
"gdscript>` 見ることをお勧めします。"

msgid "Which language should I use?"
msgstr "どの言語を使うべきか?"

msgid ""
"If you're a beginner, we recommend to **start with GDScript**. We made this "
"language specifically for Godot and the needs of game developers. It has a "
"lightweight and straightforward syntax and provides the tightest integration "
"with Godot."
msgstr ""
"もしあなたが初心者なら、\\ **GDScript**\\ から始めることをお勧めします。私た"
"ちはこの言語を、Godot とゲーム開発者のニーズのために特別に作りました。軽量で"
"わかりやすい構文を持ち、Godot との最も緊密な統合を提供します。"

msgid ""
"For C#, you will need an external code editor like `VSCode <https://code."
"visualstudio.com/>`_ or Visual Studio. While C# support is now mature, you "
"will find fewer learning resources for it compared to GDScript. That's why "
"we recommend C# mainly to users who already have experience with the "
"language."
msgstr ""
"C# の場合は、`VSCode <https://code.visualstudio.com/>`_ や Visual Studio など"
"の外部のコードエディターが必要になります。C# は十分にサポートされていますが、"
"GDScript と比較すると学習に役立つ情報はあまり出回っていません。そのため、C#は"
"主に、すでにこの言語を使い慣れている経験豊富なユーザーにお勧めしています。"

msgid "Let's look at each language's features, as well as its pros and cons."
msgstr "各言語の特徴や長所・短所を見ていきましょう。"

msgid "GDScript"
msgstr "GDScript"

msgid ""
":ref:`GDScript<doc_gdscript>` is an `object-oriented <https://en.wikipedia."
"org/wiki/Object-oriented_programming>`_ and `imperative <https://en."
"wikipedia.org/wiki/Imperative_programming>`_ programming language built for "
"Godot. It's made by and for game developers to save you time coding games. "
"Its features include:"
msgstr ""
":ref:`GDScript<doc_gdscript>` は、\\ `オブジェクト指向 <https://ja.wikipedia."
"org/wiki/"
"%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0>`_\\ "
"および \\ `命令型 <https://ja.wikipedia.org/wiki/"
"%E5%91%BD%E4%BB%A4%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0`_\\ "
"プログラミング言語であり、Godot用に開発されました。ゲーム開発者のために、ゲー"
"ムコーディングの時間を短縮するために作られました。その特徴は以下の通りです。"

msgid "A simple syntax that leads to short files."
msgstr "短いファイルにつながるシンプルな構文。"

msgid "Blazing fast compilation and loading times."
msgstr "コンパイルと読み込みが非常に速い。"

msgid ""
"Tight editor integration, with code completion for nodes, signals, and more "
"information from the scene it's attached to."
msgstr ""
"エディタとの緊密な統合により、ノードやシグナルなどの情報をシーンからコード補"
"完することができます。"

msgid ""
"Built-in vector and transform types, making it efficient for heavy use of "
"linear algebra, a must for games."
msgstr ""
"ベクトル型と変換型を内蔵しており、ゲームに必須の線形代数の多用に効率的です。"

msgid "Supports multiple threads as efficiently as statically typed languages."
msgstr "静的型付き言語と同じようにマルチスレッドに対応しています。"

msgid ""
"No `garbage collection <https://en.wikipedia.org/wiki/"
"Garbage_collection_(computer_science)>`_, as this feature eventually gets in "
"the way when creating games. The engine counts references and manages the "
"memory for you in most cases by default, but you can also control memory if "
"you need to."
msgstr ""
"`ガベージ コレクション <https://ja.wikipedia.org/wiki/"
"%E3%82%AC%E3%83%99%E3%83%BC%E3%82%B8%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3>`_ "
"はありません。この機能はゲーム作成時に結局邪魔になるので、この機能は使用でき"
"ません。デフォルトでは、ほとんどの場合、エンジンが参照をカウントしてメモリを"
"管理してくれますが、必要であればメモリを制御することもできます。"

msgid ""
"`Gradual typing <https://en.wikipedia.org/wiki/Gradual_typing>`_. Variables "
"have dynamic types by default, but you also can use type hints for strong "
"type checks."
msgstr ""
"\\ `Gradual typing <https://en.wikipedia.org/wiki/Gradual_typing>`_\\ です。"
"変数はデフォルトで動的な型を持ちますが、型ヒントを用いて強力な型チェックを行"
"うこともできます。"

msgid ""
"GDScript looks like Python as you structure your code blocks using "
"indentations, but it doesn't work the same way in practice. It's inspired by "
"multiple languages, including Squirrel, Lua, and Python."
msgstr ""
"GDScript はインデントを使ってコードブロックを構成するため Python のように見え"
"ますが、実際には同じようには動きません。GDScriptは、Squirrel、Lua、Pythonなど"
"複数の言語からヒントを得ています。"

msgid "Why don't we use Python or Lua directly?"
msgstr "なぜ我々はPythonやLuaを直接使っていないのか？"

msgid ""
"Years ago, Godot used Python, then Lua. Both languages' integration took a "
"lot of work and had severe limitations. For example, threading support was a "
"big challenge with Python."
msgstr ""
"数年前、GodotはPythonを使い、次にLuaを使いました。どちらの言語も、統合には多"
"くの労力を要し、大きな制約がありました。例えば、Pythonではスレッドのサポート"
"が大きな課題でした。"

msgid ""
"Developing a dedicated language doesn't take us more work and we can tailor "
"it to game developers' needs. We're now working on performance optimizations "
"and features that would've been difficult to offer with third-party "
"languages."
msgstr ""
"専用言語を開発することで手間がかからず、ゲーム開発者のニーズに合わせてカスタ"
"マイズすることができます。現在、サードパーティーの言語では提供することが難し"
"かったパフォーマンスの最適化や機能の開発に取り組んでいます。"

msgid ".NET / C#"
msgstr ".NET / C#"

msgid ""
"As Microsoft's `C# <https://en.wikipedia.org/wiki/"
"C_Sharp_(programming_language)>`_ is a favorite amongst game developers, we "
"officially support it. C# is a mature and flexible language with tons of "
"libraries written for it. We could add support for it thanks to a generous "
"donation from Microsoft."
msgstr ""
"Microsoftの\\ `C# <https://ja.wikipedia.org/wiki/C_Sharp>`_\\ はゲーム開発者"
"の間で人気があるので、私たちは公式にこれをサポートしています。C# は成熟した柔"
"軟な言語であり、そのために書かれた多くのライブラリがあります。Microsoft から"
"の寛大な寄付のおかげで、私たちはこの言語のサポートを追加することができまし"
"た。"

msgid ""
"C# offers a good tradeoff between performance and ease of use, although you "
"should be aware of its garbage collector."
msgstr ""
"C#は、ガベージコレクタに注意する必要がありますが、性能と使いやすさの間のト"
"レードオフを提供します。"

msgid ""
"You must use the Mono edition of the Godot editor to script in C#. You can "
"download it on the Godot website's `download <https://godotengine.org/"
"download/>`_ page."
msgstr ""
"C#でスクリプトを書くには、GodotエディタのMonoエディションを使用する必要があり"
"ます。Godotのウェブサイトの\\ `download <https://godotengine.org/download/"
">`_\\ ページでダウンロードすることができます。"

msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory, you can use any third-party .NET library or framework in Godot, as "
"well as any Common Language Infrastructure-compliant programming language, "
"such as F#, Boo, or ClojureCLR. However, C# is the only officially "
"supported .NET option."
msgstr ""
"Godotは\\ `Mono <https://mono-project.com>`_\\ .NETランタイムを使用するため、"
"理論的には、サードパーティの.NETライブラリまたはフレームワークをGodotで使用で"
"きます。また、F#、Boo、ClojureCLRなどの共通言語インフラストラクチャに準拠した"
"プログラミング言語も使用できます。 ただし、実際には、C#が公式にサポートされて"
"いる唯一の.NETオプションです。"

msgid ""
"GDScript code itself doesn't execute as fast as compiled C# or C++. However, "
"most script code calls functions written with fast algorithms in C++ code "
"inside the engine. In many cases, writing gameplay logic in GDScript, C#, or "
"C++ won't have a significant impact on performance."
msgstr ""
"GDScriptコード自体は、コンパイルされたC＃またはC++ほど高速には実行されませ"
"ん。ただし、ほとんどのスクリプトコードは、エンジン内のC++コードで記述された高"
"速なアルゴリズムの関数を呼び出します。多くの場合、GDScript、C＃、またはC ++で"
"ゲームプレイロジックを記述しても、パフォーマンスに大きな影響はありません。"

msgid "VisualScript"
msgstr "VisualScript(ビジュアルスクリプト)"

msgid ""
":ref:`Visual Scripting<doc_what_is_visual_script>` is a graph-based visual "
"programming language where you connect blocks. It can be a great tool for "
"non-programmers like game designers and artists."
msgstr ""
":ref:`Visual Scripting<doc_what_is_visual_script>` はグラフベースのビジュアル"
"プログラミング言語であり、ブロックを繋いでいくものです。ゲームデザイナーや"
"アーティストなど、プログラマーでない人にとっても素晴らしいツールになります。"

msgid ""
"You can use other languages to create custom blocks that are specific to "
"your game, for example, to script AIs, quests, or dialogues. That's where "
"the strength of VisualScript lies."
msgstr ""
"他の言語を使用して、ゲームに特化したカスタムブロックを作成することができま"
"す。例えば、AIやクエスト、ダイアログをスクリプト化するためです。そこが"
"VisualScriptの強みです。"

msgid ""
"While it provides all the basic building blocks you need to code complete "
"games, we do not recommend to use VisualScript this way. Programming "
"everything with it is slow compared to using other programming languages."
msgstr ""
"VisualScript は、ゲームを完成させるために必要な基本的な構成要素をすべて備えて"
"いますが、この方法での使用はお勧めしません。他のプログラミング言語と比較し"
"て、プログラミングに時間がかかります。"

msgid ""
"For more information, see :ref:`Getting started with VisualScript "
"<doc_getting_started_visual_script>`."
msgstr ""
"詳しくは、 :ref:`Getting started with VisualScript "
"<doc_getting_started_visual_script>` を参照してください。"

msgid "C and C++ via GDNative"
msgstr "GDNativeを介したCとC++"

msgid ""
"GDNative allows you to write game code in C or C++ without needing to "
"recompile or even restart Godot."
msgstr ""
"GDNativeを使えば、Godotを再コンパイルしたり、再起動したりする必要なく、CやC+"
"+でゲームコードを書くことができます。"

msgid ""
"You can use any version of the language or mix compiler brands and versions "
"for the generated shared libraries, thanks to our use of an internal C API "
"Bridge."
msgstr ""
"C API Bridgeの利用により、生成される共有ライブラリには、任意の言語のバージョ"
"ンやコンパイラブランド、バージョンの混在が可能です。"

msgid ""
"GDNative is the best choice for performance. You don't need to use it "
"throughout an entire game, as you can write other parts in GDScript, C#, or "
"VisualScript."
msgstr ""
"GDNativeは、パフォーマンスを重視する場合に最適です。他の部分はGDScript、C#、"
"VisualScriptで書けるので、ゲーム全体を通して使う必要はありません。"

msgid ""
"When working with GDNative, the available types, functions, and properties "
"closely resemble Godot's actual C++ API."
msgstr ""
"GDNative を使用する場合、使用可能な型、関数、およびプロパティは、Godot の実際"
"の C++ API によく似ています。"

msgid "Summary"
msgstr "概要"

msgid ""
"Scripts are files containing code that you attach to a node to extend its "
"functionality."
msgstr ""
"スクリプトとは、機能を拡張したいノードに接続されるコードを含むファイルです。"

msgid ""
"Godot supports five official scripting languages, offering you flexibility "
"between performance and ease of use."
msgstr ""
"Godotは5つの言語を公式サポートし、パフォーマンスと使用の容易さの柔軟性を提供"
"しています。"

msgid ""
"You can mix languages, for instance, to implement demanding algorithms with "
"C or C++ and write most of the game logic with GDScript or C#."
msgstr ""
"必要なアルゴリズムをCやC++で実装してほとんどのゲームロジックをGDScriptやC#で"
"書く、というような言語を混ぜて開発することも可能です。"

msgid "Translation status"
msgstr "翻訳ステータス"
