# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "インスタンスの作成"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""
"前のパートでは、シーンとは1つのノードをルートとし、ツリー構造で構成されたノー"
"ドの集まりであることを見てきました。プロジェクトは、いくつものシーンに分割す"
"ることができます。この機能により、ゲームの様々なコンポーネントを分解して整理"
"することができます。"

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""
"好きなだけシーンを作成し、\\ ``.tscn``\\ (\"text scene\") という拡張子でディ"
"スクに保存することが可能です。前のレッスンの\\ ``Label.tscn``\\ ファイルはそ"
"の例です。これらのファイルは、シーンの内容に関する情報をパックしているた"
"め、\"Packed Scenes\"と呼んでいます。"

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""
"以下はボールの例です。ボールが落ちたり壁で跳ねたりできるようにするために、"
"Ballという名前の :ref:`RigidBody2D <class_RigidBody2D>` ノードをルートとして"
"おり、さらに :ref:`Sprite <class_Sprite>` ノードと :ref:`CollisionShape2D "
"<class_CollisionShape2D>` から構成されています。"

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""
"一度保存したシーンは設計図として機能し、他のシーンで何度でも再現することがで"
"きます。このようにテンプレートからオブジェクトを複製することを、"
"**instancing** と呼びます。"

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""
"前のパートで述べたように、インスタンス化されたシーンは、ノードのように動作し"
"ます。エディタは、デフォルトでそのコンテンツを隠蔽します。Ballをインスタンス"
"化すると、Ballノードだけが表示されます。また、各複製がユニークな名前を持って"
"いることに注意してください。"

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""
"Ball シーンのすべてのインスタンスは、\\ ``Ball.tscn``\\ と同じ構造とプロパ"
"ティで開始されます。ただし、それぞれを独立して変更することができます。たとえ"
"ば、跳ね返り方、重さ、またはソース シーンによって公開されるプロパティを変更す"
"ることができます。"

msgid "In practice"
msgstr "実際に使う"

msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: :download:"
"`instancing.zip <files/instancing.zip>`."
msgstr ""
"インスタンス化を実際に使って、Godotで具体的にどう動くのかを見てみましょう。私"
"たちが用意したボールのサンプルプロジェクトをダウンロードしてください： :"
"download:`instancing.zip <files/instancing.zip>`."

msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""
"このプロジェクトを任意の場所で解凍してください。次に、Godotを開き、[インポー"
"ト]ボタンを使用してこのプロジェクトをプロジェクトマネージャーに追加してくださ"
"い。"

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""
"表示されたポップアップで、参照ボタン(\"Browse\")をクリックし、解凍したフォル"
"ダに移動します。"

msgid "Double-click the ``project.godot`` file to open it."
msgstr "\\ ``project.godot``\\ ファイルをダブルクリックして開いてください。"

msgid "Finally, click the Import & Edit button."
msgstr ""
"最後に、「インポートと編集」(\"Import & Edit\")ボタンをクリックします。"

msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""
"このプロジェクトには、2つのパックされたシーンが含まれています。\\ ``Main."
"tscn``\\ (ボールと衝突する壁を含む)と\\ ``Ball.tscn``\\ のシーンです。メイン"
"シーンは自動的に開きます。"

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""
"Mainノードの子として、ボールを追加してみましょう。Scene ドックで、Main ノード"
"を選択します。次に、シーンドックの上部にあるリンクアイコンをクリックします。"
"このボタンで、現在選択されているノードの子として、シーンのインスタンスを追加"
"することができます。"

msgid "Double-click the ball scene to instance it."
msgstr "Ballシーンをダブルクリックしてインスタンス化します。"

msgid "The ball appears in the top-left corner of the viewport."
msgstr "ビューポートの左上隅にボールが表示されます。"

msgid "Click on it and drag it towards the center of the view."
msgstr "それをクリックし、ビューの中心に向かってドラッグします。"

msgid "Play the game by pressing F5. You should see it fall."
msgstr ""
"F5キーを押してゲームを実行してください。ボールが落ちるのが見えるはずです。"

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""
"さて、Ball ノードのインスタンスをさらに作成したいと思います。ボールを選択した"
"まま、 :kbd:`Ctrl-D` (macOS では :kbd:`Cmd-D`) を押して、複製コマンドを呼び出"
"します。クリックアンドドラッグして、新しいボールを別の場所に移動します。"

msgid "You can repeat this process until you have several in the scene."
msgstr ""
"この作業を、シーン内にいくつかボールができるまで繰り返すことができます。"

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""
"もう一度ゲームを実行します。今度は、すべてのボールが互いに独立して落下するの"
"が見えるはずです。これがインスタンスの役割です。それぞれが、テンプレートの"
"シーンを独立して再現しているのです。"

msgid "Editing scenes and instances"
msgstr "シーンとインスタンスの編集"

msgid "There is more to instances. With this feature, you can:"
msgstr ""
"インスタンスにはまだまだあります。この機能を使用すると、次のことができます。"

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""
"インスペクタを使って、1つのボールのプロパティを他のボールに影響を与えずに変更"
"します。"

msgid ""
"Change the default properties of every Ball by opening the ``Ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""
"\\ ``Ball.tscn``\\ シーンを開き、Ball ノードに変更を加えることによって、すべ"
"ての Ball のデフォルトプロパティを変更することができます。保存すると、プロ"
"ジェクト内のすべてのBallインスタンスの値が更新されます。"

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""
"インスタンスのプロパティを変更すると、対応するパックされたシーンの値が常に上"
"書きされます。"

msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""
"試してみましょう。\\ ``Ball.tscn``\\ を開き、Ball ノードを選択します。右側の"
"インスペクタで、PhysicsMaterialプロパティをクリックして展開します。"

msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""
"数値フィールドをクリックし、\\ ``2``\\ と入力し、 :kbd:`Enter` を押して、バウ"
"ンスプロパティを \\ ``2``\\ にセットしてください。"

msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""
"kbd:`F5` を押してゲームを実行して、すべてのボールがより多くバウンドすることに"
"注目してください。ボールのシーンはすべてのインスタンスのテンプレートなので、"
"これを修正して保存すると、すべてのインスタンスがそれに応じて更新されます。"

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""
"それでは、個々のインスタンスを調整しましょう。ビューポートの上にある対応する"
"タブをクリックして、Mainシーンに戻りましょう。"

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""
"インスタンス化されたBallノードの1つを選択し、インスペクタで、その重力スケール"
"(\"Gravity Scale\")値を\\ ``10``\\ に設定します。"

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr "変更したプロパティの横に、グレーの「復元」ボタンが表示されます。"

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"このアイコンは、元のパックされたシーンから値を上書きしていることを示します。"
"元のシーンでプロパティを変更しても、値のオーバーライドはインスタンスに保存さ"
"れます。復元アイコンをクリックすると、プロパティが保存されたシーンの値に復元"
"されます。"

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""
"ゲームを再実行し、このボールが他のボールよりずっと速く落ちていることに注目し"
"てください。"

msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""
"あるインスタンスの\\ ``PhysicsMaterial``\\ の値を変更すると、他のすべてのイン"
"スタンスに影響を及ぼします。これは、\\ ``PhysicsMaterial``\\ がリソースであ"
"り、リソースはインスタンス間で共有されるからです。リソースを1つのインスタンス"
"に固有にするには、インスペクタでそのリソースを右クリックし、コンテキストメ"
"ニューの「ユニーク化」をクリックします。"

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""
"リソースは、後のレッスンで取り上げますが、Godotゲームの重要な構成要素の一つで"
"す。"

msgid "Scene instances as a design language"
msgstr "デザイン言語としてのシーンインスタンス"

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""
"Godotのインスタンスとシーンは、優れたデザイン言語を提供し、他のエンジンとは一"
"線を画しています。私たちは、一からこのコンセプトに基づいてGodotを設計しまし"
"た。"

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""
"Godot でゲームを作る場合、MVC (Model-View-Controller) や Entity-Relationship "
"ダイアグラムのようなアーキテクチャのコードパターンを排除することをお勧めしま"
"す。その代わりに、プレイヤーがゲームの中で目にする要素を想像することから始"
"め、それらに基づいてコードを構成するとよいでしょう。"

msgid "For example, you could break down a shooter game like so:"
msgstr "例えば、シューティングゲームを分解すると、こんな感じです。"

msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"このような図は、ほとんどどんな種類のゲームでも思いつくでしょう。それぞれの長"
"方形は、プレイヤーの視点からゲーム内で見えるエンティティを表しています。矢印"
"は、どのシーンがどれを所有しているかを示しています。"

msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"ダイアグラムができたら、そこに記載されている各要素のシーンを作成して、ゲーム"
"を開発することをお勧めします。シーンのツリーを構築するために、コードまたはエ"
"ディタで直接インスタンス化を使用します。"

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"プログラマーは、抽象的なアーキテクチャを設計し、そこにコンポーネントを当ては"
"めようとすることに多くの時間を費やす傾向があります。シーンをベースにした設計"
"は、開発をより速く、より簡単にし、ゲームロジックそのものに集中することができ"
"ます。ほとんどのゲームコンポーネントはシーンに直接マッピングされるため、シー"
"ンのインスタンス化をベースにしたデザインを使用すると、他のアーキテクチャの"
"コードはほとんど必要ありません。"

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"ここでは、大量のアセットとネストされた要素を持つオープンワールドゲームのシー"
"ン図の例を示します。"

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""
"まず、部屋を作るところから始めると想像してください。家具をユニークに配置し"
"た、いくつかの異なる部屋のシーンを作成することができます。その後、インテリア"
"に複数の部屋のインスタンスを使用する家のシーンを作成することができます。イン"
"スタンス化された多くの家と、城塞を置くための大きな地形から、城塞を作ることに"
"なります。これらは、それぞれ1つまたは複数のサブシーンをインスタンス化したシー"
"ンとなります。"

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"その後、衛兵のシーンを作り、城塞に追加することもできます。間接的にゲームの世"
"界全体に追加されることになります。"

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"Godotでは、このようにシーンを作成してインスタンス化するだけで、簡単にゲーム上"
"で反復することができます。エディターは、プログラマー、デザイナー、アーティス"
"トが同様に利用できるように設計されています。典型的なチーム開発では、2Dや3Dの"
"アーティスト、レベルデザイナー、ゲームデザイナー、アニメーターが参加し、全員"
"がGodotエディターで作業を行います。"

msgid "Summary"
msgstr "概要"

msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr ""
"インスタンス化とは、設計図からオブジェクトを生成するプロセスで、多くの便利な"
"使い方があります。シーンを使えば、次のようなことが得られます。"

msgid "The ability to divide your game into reusable components."
msgstr "ゲームを再利用可能なコンポーネントに分割する機能。"

msgid "A tool to structure and encapsulate complex systems."
msgstr "複雑なシステムを構造化し、カプセル化するためのツール。"

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr "ゲームプロジェクトの構造を自然な方法で考えるための言語。"

msgid "Translation status"
msgstr "翻訳ステータス"
