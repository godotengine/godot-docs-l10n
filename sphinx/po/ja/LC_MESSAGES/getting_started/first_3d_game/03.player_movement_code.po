# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Moving the player with code"
msgstr "プログラムでプレイヤーを動かす"

msgid ""
"It's time to code! We're going to use the input actions we created in the "
"last part to move the character."
msgstr ""
"いよいよコーディングです。前編で作成した入力アクションを使って、キャラクター"
"を動かしていきます。"

msgid ""
"Right-click the *Player* node and select *Attach Script* to add a new script "
"to it. In the popup, set the *Template* to *Empty* before pressing the "
"*Create* button."
msgstr ""
"新しいスクリプトを追加するために、\\ *Player*\\ ノードを右クリックし、\\ *ス"
"クリプトをアタッチ*\\ (Attach Script)を選択します。ポップアップで、\\ *テンプ"
"レート*\\ (Template)を\\ *Empty*\\ にセットしてから \\*作成*\\ (Create)ボタン"
"を押してください。"

msgid "|image0|"
msgstr "\\ |image0|"

msgid "image0"
msgstr "image0"

msgid ""
"Let's start with the class's properties. We're going to define a movement "
"speed, a fall acceleration representing gravity, and a velocity we'll use to "
"move the character."
msgstr ""
"まず、このクラスのプロパティから始めましょう。移動速度(speed)、重力を表す落下"
"加速度(gravity)、そしてキャラクターを移動させるのに使う速度(velocity)を定義し"
"ていきます。"

msgid ""
"These are common properties for a moving body. The ``velocity`` is a 3D "
"vector combining a speed with a direction. Here, we define it as a property "
"because we want to update and reuse its value across frames."
msgstr ""
"これらは移動体に共通するプロパティです。\\ ``velocity``\\ は、速度と方向を組"
"み合わせた3Dベクトルです。ここでは、フレーム間で値を更新して再利用したいの"
"で、プロパティとして定義しています。"

msgid ""
"The values are quite different from 2D code because distances are in meters. "
"While in 2D, a thousand units (pixels) may only correspond to half of your "
"screen's width, in 3D, it's a kilometer."
msgstr ""
"距離はメートル単位なので、2D コードとは値がかなり異なります。2D では、1000単"
"位（ピクセル）は画面の幅の半分にしか相当しませんが、3D では 1km になります。"

msgid ""
"Let's code the movement now. We start by calculating the input direction "
"vector using the global ``Input`` object, in ``_physics_process()``."
msgstr ""
"それでは、動きをコーディングしてみましょう。まず、グローバルな\\ ``Input``\\ "
"オブジェクトを使って、\\ ``_physics_process()``\\ で入力方向ベクトルを計算す"
"るところから始めます。"

msgid ""
"Here, we're going to make all calculations using the ``_physics_process()`` "
"virtual function. Like ``_process()``, it allows you to update the node "
"every frame, but it's designed specifically for physics-related code like "
"moving a kinematic or rigid body."
msgstr ""
"ここでは、\\ ``_physics_process()``\\ 仮想関数を使用してすべての計算を行いま"
"す。\\ ``_process()``\\ と同様に、フレームごとにノードを更新することができま"
"すが、運動体や剛体の移動などの物理関連のコードに特化した設計になっています。"

msgid ""
"To learn more about the difference between ``_process()`` and "
"``_physics_process()``, see :ref:`doc_idle_and_physics_processing`."
msgstr ""
"\\ ``_process()``\\ と\\ ``_physics_process()``\\ の違いについては、 :ref:"
"`doc_idle_and_physics_processing` を参照してください。"

msgid ""
"We start by initializing a ``direction`` variable to ``Vector3.ZERO``. Then, "
"we check if the player is pressing one or more of the ``move_*`` inputs and "
"update the vector's ``x`` and ``z`` components accordingly. These correspond "
"to the ground plane's axes."
msgstr ""
"まず、\\ ``direction``\\ 変数を \\ ``Vector3.ZERO``\\ に初期化することからは"
"じめます。次に、プレイヤーが\\ ``move_*``\\ の入力を一つ以上押しているかどう"
"かを確認し、ベクトルの\\ ``x``\\ 、\\ ``z``\\ 成分を適宜に更新します。これら"
"の成分は地平面の軸に相当します。"

msgid ""
"These four conditions give us eight possibilities and eight possible "
"directions."
msgstr "この4つの条件は8つの可能性そして8つの可能な方向を与えます。"

msgid ""
"In case the player presses, say, both W and D simultaneously, the vector "
"will have a length of about ``1.4``. But if they press a single key, it will "
"have a length of ``1``. We want the vector's length to be consistent. To do "
"so, we can call its ``normalize()`` method."
msgstr ""
"たとえば、プレイヤーが W と D の両方を同時に押した場合、ベクトルの長さは\\ "
"``1.4``\\ 程度になります。しかし、1 つのキーを押した場合は、\\ ``1``\\ の長さ"
"になります。ベクトルの長さが一定であるようにしたいので、そのために\\ "
"``normalize()``\\ メソッドを呼び出します。"

msgid ""
"Here, we only normalize the vector if the direction has a length greater "
"than zero, which means the player is pressing a direction key."
msgstr ""
"ここでは、方向が0より大きい長さを持つ場合、つまりプレイヤーが方向キーを押して"
"いる場合にのみ、このベクトルを正規化(normalize)します。"

msgid ""
"In this case, we also get the *Pivot* node and call its ``look_at()`` "
"method. This method takes a position in space to look at in global "
"coordinates and the up direction. In this case, we can use the ``Vector3."
"UP`` constant."
msgstr ""
"この場合、\\ *Pivot*\\ ノードも取得し、その\\ ``look_at()``\\ メソッドを呼び"
"出します。このメソッドは、空間上で「向く」(look at)先のグローバル座標と、上に"
"あたる方向を引数に取ります。この場合、\\ ``Vector3.UP``\\ という定数を使うこ"
"とができます。"

msgid ""
"A node's local coordinates, like ``translation``, are relative to their "
"parent. Global coordinates are relative to the world's main axes you can see "
"in the viewport instead."
msgstr ""
"ノードのローカル座標は、 ``translation`` のように、親からの相対的な座標です。"
"グローバル座標は、ビューポートで見ることができる、ワールドのメイン軸からの相"
"対座標です。"

msgid ""
"In 3D, the property that contains a node's position is ``translation``. By "
"adding the ``direction`` to it, we get a position to look at that's one "
"meter away from the *Player*."
msgstr ""
"3D では、ノードの位置を含むプロパティは\\ ``translation``\\ となります。これ"
"に\\ ``direction``\\ を加えると、\\ *Player*\\ は1メートル離れた位置を見るこ"
"とができます。"

msgid ""
"Then, we update the velocity. We have to calculate the ground velocity and "
"the fall speed separately. Be sure to go back one tab so the lines are "
"inside the ``_physics_process()`` function but outside the condition we just "
"wrote."
msgstr ""
"次に、速度(velocity)を更新します。地面での速度と落下速度を別々に計算する必要"
"があります。行は字下げを1タブ戻し、\\ ``_physics_process()``\\ 関数の中にあり"
"つつ、今書いた条件文の外にあるようにしてください。"

msgid ""
"For the vertical velocity, we subtract the fall acceleration multiplied by "
"the delta time every frame. Notice the use of the ``-=`` operator, which is "
"a shorthand for ``variable = variable - ...``."
msgstr ""
"垂直方向の速度については、落下加速度に毎フレームのデルタタイムを掛けたものを"
"差し引きます。\\ ``-=``\\ という演算子が使われていることに注目してください。"
"これは \\ ``variable = variable - ...``\\ の省略形になっています。"

msgid ""
"This line of code will cause our character to fall in every frame. This may "
"seem strange if it's already on the floor. But we have to do this for the "
"character to collide with the ground every frame."
msgstr ""
"この行によってキャラクターは全てのフレームで落下します。キャラクターがすでに"
"床の上にいる場合は、これは奇妙に思えるかもしれません。しかし、キャラクターを"
"全てのフレームで地面に衝突させるためには、このようにしなければなりません。"

msgid ""
"The physics engine can only detect interactions with walls, the floor, or "
"other bodies during a given frame if movement and collisions happen. We will "
"use this property later to code the jump."
msgstr ""
"物理エンジンは、移動および衝突が起こった場合にのみ、特定のフレームにおける"
"壁、床、または他の物体との相互作用を検出することができます。 後でこのプロパ"
"ティを使ってジャンプをコーディングします。"

msgid ""
"On the last line, we call ``KinematicBody.move_and_slide()``. It's a "
"powerful method of the ``KinematicBody`` class that allows you to move a "
"character smoothly. If it hits a wall midway through a motion, the engine "
"will try to smooth it out for you."
msgstr ""
"最後の行で、\\ ``KinematicBody.move_and_slide()``\\ を呼び出しています。これ"
"は、\\ ``KinematicBody``\\ クラスの強力なメソッドで、キャラクターをスムーズに"
"移動させることを可能にします。動作の途中で壁にぶつかっても、エンジンがスムー"
"ズな動きにしようとします。"

msgid ""
"The function takes two parameters: our velocity and the up direction. It "
"moves the character and returns a leftover velocity after applying "
"collisions. When hitting the floor or a wall, the function will reduce or "
"reset the speed in that direction from you. In our case, storing the "
"function's returned value prevents the character from accumulating vertical "
"momentum, which could otherwise get so big the character would move through "
"the ground slab after a while."
msgstr ""
"この関数は2つのパラメータを受け取ります: 速度と上を指す方向です。関数はキャラ"
"クターを移動させ、衝突を適用した後に残った速度を返します。床や壁にぶつかる"
"と、その方向への速度が減少またはリセットされます。この場合、関数の戻り値を保"
"存しておくことで、キャラクターが垂直方向の勢いを蓄積し、床を貫通してしまうの"
"を防ぎます。"

msgid "And that's all the code you need to move the character on the floor."
msgstr ""
"そして、これが床の上でキャラクターを動かすために必要なコードのすべてです。"

msgid "Here is the complete ``Player.gd`` code for reference."
msgstr "参考までに、\\ ``Player.gd``\\ の完全なコードを以下に示します。"

msgid "Testing our player's movement"
msgstr "プレイヤーの動きをテストする"

msgid ""
"We're going to put our player in the *Main* scene to test it. To do so, we "
"need to instantiate the player and then add a camera. Unlike in 2D, in 3D, "
"you won't see anything if your viewport doesn't have a camera pointing at "
"something."
msgstr ""
"これから、\\ *Main*\\ のシーンにプレーヤーを置いて、テストしてみます。そのた"
"めには、プレーヤーをインスタンス化し、カメラを追加する必要があります。2D とは"
"異なり、3D では、ビューポートにカメラがない場合は何も見えません。"

msgid ""
"Save your *Player* scene and open the *Main* scene. You can click on the "
"*Main* tab at the top of the editor to do so."
msgstr ""
"\\ *Player*\\ のシーンを保存し、\\ *Main*\\ のシーンを開いてみてください。エ"
"ディタ上部の\\ *Main*\\ タブをクリックすると開けます。"

msgid "|image1|"
msgstr "\\ |image1|"

msgid "image1"
msgstr "image1"

msgid ""
"If you closed the scene before, head to the *FileSystem* dock and double-"
"click ``Main.tscn`` to re-open it."
msgstr ""
"シーンを閉じていた場合は、\\ *ファイルシステム*\\ (FileSystem)ドックで、\\ "
"``Main.tscn``\\ をダブルクリックして再び開いてください。"

msgid ""
"To instantiate the *Player*, right-click on the *Main* node and select "
"*Instance Child Scene*."
msgstr ""
"\\ *Player*\\ をインスタンス化するには、\\ *Main*\\ ノードを右クリックし"
"て、\\ *子シーンをインスタンス化*\\ (Instantiate Child Scene)を選択してくださ"
"い。"

msgid "|image2|"
msgstr "\\ |image2|"

msgid "image2"
msgstr "image2"

msgid ""
"In the popup, double-click *Player.tscn*. The character should appear in the "
"center of the viewport."
msgstr ""
"ポップアップで、\\ *Player.tscn*\\ をダブルクリックします。キャラクターが"
"ビューポートの中央に表示されるはずです。"

msgid "Adding a camera"
msgstr "カメラを追加する"

msgid ""
"Let's add the camera next. Like we did with our *Player*\\ 's *Pivot*, we're "
"going to create a basic rig. Right-click on the *Main* node again and select "
"*Add Child Node* this time. Create a new *Position3D*, name it "
"*CameraPivot*, and add a *Camera* node as a child of it. Your scene tree "
"should look like this."
msgstr ""
"次にカメラを追加しましょう。\\ *Player*\\ の\\ *Pivot*\\ で行ったように、基本"
"的なリグを作成することにします。\\ *Main*\\ ノードをもう一度右クリックし、今"
"度は\\ *子ノードを追加*\\ (Add Child Node)を選択します。新しい \\ "
"*Position3D*\\ を作成し、それを *CameraPivot* と名づけ、\\ *Camera*\\ ノード"
"をその子として追加してください。シーン ツリーは、次のようになります。"

msgid "|image3|"
msgstr "\\ |image3|"

msgid "image3"
msgstr "image3"

msgid ""
"Notice the *Preview* checkbox that appears in the top-left when you have the "
"*Camera* selected. You can click it to preview the in-game camera projection."
msgstr ""
"\\ *Camera*\\ を選択しているとき左上に表示される \\ *プレビュー*\\ (Preview)"
"チェック ボックスに注目してください。これをクリックすると、ゲーム内のカメラの"
"投影をプレビューすることができます。"

msgid "|image4|"
msgstr "\\ |image4|"

msgid "image4"
msgstr "image4"

msgid ""
"We're going to use the *Pivot* to rotate the camera as if it was on a crane. "
"Let's first split the 3D view to be able to freely navigate the scene and "
"see what the camera sees."
msgstr ""
"ここでは、\\ *Pivot*\\ を使用して、クレーンに乗っているかのようにカメラを回転"
"させることにします。まず、3D ビューを分割して、シーンを自由に移動できるように"
"し、カメラが見ているものを確認できるようにしましょう。"

msgid ""
"In the toolbar right above the viewport, click on *View*, then *2 "
"Viewports*. You can also press :kbd:`Ctrl + 2` (:kbd:`Cmd + 2` on macOS)."
msgstr ""
"ビューポートのすぐ上のツールバーで、\\ *ビュー*\\ (View)、そして\\ *2 ビュー"
"ポート*\\ (2 Viewports)をクリックしてください。また、:kbd:`Ctrl + 2` (macOS"
"は :kbd:`Cmd + 2` )を押すことも可能です。"

msgid "|image5|"
msgstr "\\ |image5|"

msgid "image5"
msgstr "image5"

msgid ""
"On the bottom view, select the *Camera* and turn on camera preview by "
"clicking the checkbox."
msgstr ""
"下のビューで\\ *Camera*\\ を選択し、プレビューのチェックボックスをクリックし"
"てカメラプレビューをオンにします。"

msgid "|image6|"
msgstr "|image6|"

msgid "image6"
msgstr "\\ image6"

msgid ""
"In the top view, move the camera about ``19`` units on the Z axis (the blue "
"one)."
msgstr ""
"上のビューで、カメラをZ軸（青い方）に\\ ``19``\\ ユニットほど移動させます。"

msgid "|image7|"
msgstr "\\ |image7|"

msgid "image7"
msgstr "\\ image7"

#, fuzzy
msgid ""
"Here's where the magic happens. Select the *CameraPivot* and rotate it "
"``-45`` degrees around the X axis (using the red circle). You'll see the "
"camera move as if it was attached to a crane."
msgstr ""
"ここでマジックが起こります。\\ *CameraPivot*\\ を選択し、X 軸（赤い円を使用）"
"の周りに\\ ``45``\\ 度回転させます。カメラがクレーンに取り付けられているよう"
"に動くのがわかると思います。"

msgid "|image8|"
msgstr "\\ |image8|"

msgid "image8"
msgstr "\\ image8"

msgid ""
"You can run the scene by pressing :kbd:`F6` and press the arrow keys to move "
"the character."
msgstr ""
":kbd:`F6`を押してシーンを実行し、矢印キーを押してキャラクターを移動することが"
"できます。"

msgid "|image9|"
msgstr "\\ |image9|"

msgid "image9"
msgstr "\\ image9"

msgid ""
"We can see some empty space around the character due to the perspective "
"projection. In this game, we're going to use an orthographic projection "
"instead to better frame the gameplay area and make it easier for the player "
"to read distances."
msgstr ""
"透視投影(Perspective)を使用しているため、キャラクターの周囲の何もない空間が見"
"えています。このゲームでは、ゲームプレイエリアをより適切に枠に収め、プレイ"
"ヤーが距離を読みやすくするために、代わりに平行投影(Orthographic)を使用するこ"
"とにします。"

msgid ""
"Select the *Camera* again and in the *Inspector*, set the *Projection* to "
"*Orthogonal* and the *Size* to ``19``. The character should now look flatter "
"and the ground should fill the background."
msgstr ""
"再び\\ *Camera*\\ を選択し、\\ *インスペクター*\\ (Inspector)で、\\ "
"*Projection*\\ を \\ *Orthogonal*\\ に、\\ *Size*\\ を\\ ``19``\\ に設定しま"
"す。これで、キャラクターはより平坦に見え、地面が背景を埋めるようになるはずで"
"す。"

msgid "|image10|"
msgstr "\\ |image10|"

msgid "image10"
msgstr "\\ image10"

msgid ""
"With that, we have both player movement and the view in place. Next, we will "
"work on the monsters."
msgstr ""
"これで、プレイヤーの動きとビューの両方が整いました。次に、モンスターを作成し"
"ていきます。"

msgid "Translation status"
msgstr "翻訳ステータス"
