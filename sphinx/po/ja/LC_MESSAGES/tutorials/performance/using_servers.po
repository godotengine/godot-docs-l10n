# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using Servers"
msgstr "サーバーを使用した最適化"

msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""
"Godotのようなエンジンは、高レベルの構造と機能により、使いやすさが向上していま"
"す。それらのほとんどは、\\ :ref:`Scene System <doc_scene_tree>` を介してアク"
"セスおよび使用されます。ノードとリソースを使用すると、複雑なゲームのプロジェ"
"クト編成と資産管理が簡素化されます。"

msgid "There are, of course, always drawbacks:"
msgstr "もちろん、常に欠点もあります:"

msgid "There is an extra layer of complexity"
msgstr "(目に見える以上の)さらに複雑な層があります"

msgid "Performance is lower than using simple APIs directly"
msgstr "単純なAPIを直接使用するよりもパフォーマンスが低くなります"

msgid "It is not possible to use multiple threads to control them"
msgstr "複数のスレッドを使用してそれらを制御することはできません"

msgid "More memory is needed."
msgstr "より多くのメモリが必要になります。"

msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""
"多くの場合、これは実際には問題ではありません(Godotは非常に最適化されており、"
"ほとんどの操作はシグナルで処理されるため、ポーリングは不要です)。それでも、時"
"にはそれが必要です。たとえば、フレームごとに処理する必要がある何かのインスタ"
"ンスを数万件処理することがボトルネックになる可能性があります。"

msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""
"このような状況では、プログラマはゲームエンジンを使用していることを後悔し、よ"
"り手作りの低レベルのゲームコード実装に戻ることを望みます。"

msgid "Still, Godot is designed to work around this problem."
msgstr "それでも、Godotはこの問題を回避するように設計されています。"

msgid "Servers"
msgstr "サーバー"

#, fuzzy
msgid ""
"One of the most interesting design decisions for Godot is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""
"Godotの最も興味深い設計上の決定の1つは、シーンシステム全体が *オプション* で"
"あるという事実です。現在、その様にコンパイルすることはできませんが、完全にバ"
"イパスすることができます。"

#, fuzzy
msgid ""
"At the core, Godot uses the concept of Servers. They are very low-level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""
"コアでは、Godotはサーバーの概念を使用します。これらは、レンダリング、物理演"
"算、サウンドなどを制御するための非常に低レベルのAPIです。シーンシステムはそれ"
"らの上に構築され、それらを直接使用します。最も一般的なサーバーは次のとおりで"
"す:"

msgid ""
":ref:`VisualServer <class_VisualServer>`: handles everything related to "
"graphics."
msgstr ""
":ref:`VisualServer <class_VisualServer>`: グラフィックに関連するすべてを処理"
"します。"

msgid ""
":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D "
"physics."
msgstr ""
":ref:`PhysicsServer <class_PhysicsServer>`: 3D物理演算に関連するすべてを処理"
"します。"

msgid ""
":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related "
"to 2D physics."
msgstr ""
":ref:`Physics2DServer <class_Physics2DServer>`: 2D物理演算に関連するすべてを"
"処理します。"

msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""
":ref:`AudioServer <class_AudioServer>`: オーディオに関連するすべてを処理しま"
"す。"

#, fuzzy
msgid ""
"Explore their APIs and you will realize that all the functions provided are "
"low-level implementations of everything Godot allows you to do."
msgstr ""
"APIを調べるだけで、提供されるすべての機能がGodotで実行可能なすべての低レベル"
"実装であることに気付くでしょう。"

msgid "RIDs"
msgstr "\\ RIDs"

msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""
"サーバーを使用する鍵は、リソースID(:ref:`RID <class_RID>`)オブジェクトを理解"
"することです。これらは、サーバー実装への不透明なハンドルです。それらは手動で"
"割り当てられ、解放されます。サーバーのほぼすべての機能には、実際のリソースに"
"アクセスするためのRIDが必要です。"

#, fuzzy
msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID. Not all resources contain an RID, though: in such cases, "
"the RID will be empty. The resource can then be passed to server APIs as an "
"RID."
msgstr ""
"ほとんどのGodotのノードとリソースには、サーバーからこれらのRIDが内部的に含ま"
"れており、さまざまな機能で取得できます。実際、\\ :ref:`Resource "
"<class_Resource>` を継承するものはすべてRIDに直接キャストできます(ただし、す"
"べてのリソースにRIDが含まれるわけではありませんが、そのような場合、RIDは空に"
"なります)。実際、リソースはRIDとしてサーバーAPIに渡すことができます。リソース"
"が消去されると、内部RIDも消去されるため、サーバー外部のリソースへの参照を必ず"
"保持してください。"

msgid ""
"Resources are reference-counted (see :ref:`Reference <class_Reference>`), "
"and references to a resource's RID are *not* counted when determining "
"whether the resource is still in use. Make sure to keep a reference to the "
"resource outside the server, or else both it and its RID will be erased."
msgstr ""

msgid "For nodes, there are many functions available:"
msgstr "ノードには、次の多くの機能が用意されています:"

msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""
"CanvasItemの場合、\\ :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` メソッドは、サーバー内のキャンバス"
"アイテムRIDを返します。"

msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""
"CanvasLayerの場合、\\ :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` メソッドはサーバーのキャンバスRIDを返"
"します。"

msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""
"ビューポートの場合、\\ :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` メソッドはサーバーのビューポートRID"
"を返します。"

msgid ""
"For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) "
"contains functions to get the *VisualServer Scenario*, and the "
"*PhysicsServer Space*. This allows creating 3D objects directly with the "
"server API and using them."
msgstr ""
"3Dの場合、\\ :ref:`World <class_World>` リソース(:ref:`Viewport "
"<class_Viewport>` および :ref:`Spatial <class_Spatial>` ノードで取得可能)に"
"は *VisualServer Scenario* と *PhysicsServer Space* を取得する関数が含まれま"
"す。これにより、サーバーAPIを使用して3Dオブジェクトを直接作成し、使用すること"
"ができます。"

msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *VisualServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""
"2Dの場合、\\ :ref:`World2D <class_World2D>` リソース(:ref:`Viewport "
"<class_Viewport>` および :ref:`CanvasItem <class_CanvasItem>` ノードで取得可"
"能)には、\\ *VisualServer Canvas* と *Physics2DServer Space* を取得する関数が"
"含まれます 。これにより、サーバーAPIで2Dオブジェクトを直接作成して使用できま"
"す。"

msgid ""
"The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the "
"scenario *instance* and *instance base* via the :ref:`VisualInstance."
"get_instance() <class_VisualInstance_method_get_instance>` and :ref:"
"`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"respectively."
msgstr ""
":ref:`VisualInstance <class_VisualInstance>` クラスは、\\ :ref:"
"`VisualInstance.get_instance() <class_VisualInstance_method_get_instance>` お"
"よび :ref:`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"を介して、それぞれscenarioの *instance* および *instance base* を取得できま"
"す。"

#, fuzzy
msgid ""
"Try exploring the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr ""
"使い慣れたノードとリソースを調べて、サーバー*RID*を取得する関数を見つけてくだ"
"さい。"

msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""
"すでにノードが関連付けられているオブジェクトからRIDを制御することはお勧めしま"
"せん。代わりに、サーバー関数を常に使用して、新しい関数を作成および制御し、既"
"存の関数と対話する必要があります。"

msgid "Creating a sprite"
msgstr "スプライトの作成"

msgid ""
"This is a simple example of how to create a sprite from code and move it "
"using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""
"これは、コードからスプライトを作成し、低レベルの :ref:`CanvasItem "
"<class_CanvasItem>` APIを使用して移動する方法の簡単な例です。"

msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""
"サーバーのCanvas Item APIを使用すると、描画プリミティブを追加できます。追加し"
"た後は変更できません。アイテムをクリアし、プリミティブを再度追加する必要があ"
"ります(これは、幾何学変換を設定する場合には当てはまりません。これは、必要な回"
"数だけ実行できます)。"

msgid "Primitives are cleared this way:"
msgstr "プリミティブは次の方法でクリアされます:"

msgid "Instantiating a Mesh into 3D space"
msgstr "メッシュを3D空間にインスタンス化する"

#, fuzzy
msgid ""
"The 3D APIs are different from the 2D ones, so the instantiation API must be "
"used."
msgstr ""
"3D APIは2D APIとは異なるため、インスタンス化APIを使用する必要があります。"

msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr "2D RigidBodyの作成とスプライトの移動"

msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""
"これは :ref:`Physics2DServer <class_Physics2DServer>` APIを使用して :ref:"
"`RigidBody2D <class_RigidBody2D>` を作成し、ボディが移動すると :ref:"
"`CanvasItem <class_CanvasItem>` を移動します。"

msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer "
"<class_PhysicsServer>` respectively)."
msgstr ""
"2Dおよび3D物理サーバーは同一であるため(それぞれ :ref:`RigidBody "
"<class_RigidBody>` および :ref:`PhysicsServer <class_PhysicsServer>` を使"
"用)、3Dバージョンも非常に似ているはずです。"

msgid "Getting data from the servers"
msgstr "サーバーからデータを取得する"

msgid ""
"Try to **never** request any information from ``VisualServer``, "
"``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""
"自分が何をしているのか理解していないのなら、\\ **絶対に**\\ 関数を呼び出して "
"``VisualServer``\\ 、\\ ``PhysicsServer``\\ 、または\\ ``Physics2DServer`` に"
"情報を要求しないでください。これらのサーバーは、多くの場合、パフォーマンスの"
"ために非同期に実行され、値を返す関数を呼び出すと、関数が実際に呼び出されるま"
"で、それらの関数が停止し、保留中の処理を強制します。これをフレームごとに呼び"
"出すと、パフォーマンスが大幅に低下します(理由は明らかではありません)。"

msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""
"このため、このようなサーバーのほとんどのAPIは、保存可能な実際のデータができる"
"まで、情報を要求することさえできないように設計されています。"

msgid "Translation status"
msgstr "翻訳ステータス"
