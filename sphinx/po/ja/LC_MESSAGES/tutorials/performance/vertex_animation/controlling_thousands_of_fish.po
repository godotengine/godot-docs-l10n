# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "パーティクルで数千の魚を制御する"

msgid ""
"The problem with :ref:`MeshInstances <class_MeshInstance>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
":ref:`MeshInstances <class_MeshInstance>` の問題は、transform配列を更新するの"
"にコストがかかることです。シーンの周囲に多くの静的オブジェクトを配置するのに"
"は最適です。ただし、オブジェクトをシーン内で移動することは依然として困難で"
"す。"

#, fuzzy
msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`Particles <class_Particles>` node. Particles take advantage of GPU "
"acceleration by computing and setting the per-instance information in a :ref:"
"`Shader <class_Shader>`."
msgstr ""
"各インスタンスを興味深い方法で移動させるには、\\ :ref:`Particles "
"<class_Particles>` ノードを使用します。パーティクルは、\\ :ref:`Shader "
"<class_Shader>` でインスタンスごとの情報を計算および設定することにより、GPUア"
"クセラレーションを利用します。"

msgid ""
"Particles are not available in GLES2, instead use :ref:`CPUParticles "
"<class_CPUParticles>`, which do the same thing as Particles, but do not "
"benefit from GPU acceleration."
msgstr ""
"ParticlesはGLES2では使用できません。代わりに :ref:`CPUParticles "
"<class_CPUParticles>` を使用します。これはParticlesと同じことを行いますが、"
"GPUアクセラレーションの恩恵は受けません。"

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"最初にParticlesノードを作成します。次に、\\ ``Draw Passes`` の下で、パーティ"
"クルの ``Draw Pass 1`` を :ref:`Mesh <class_Mesh>` に設定します。次に、"
"[Process Material]の下に新しい :ref:`ShaderMaterial <class_ShaderMaterial>` "
"を作成します。"

msgid "Set the ``shader_type`` to ``particles``."
msgstr "``shader_type`` を ``particles`` に設定します。"

msgid "Then add the following two functions:"
msgstr "続いて、次の2つの関数を追加します:"

#, fuzzy
msgid ""
"These functions come from the default :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>`. They are used to generate a random number from "
"each particle's ``RANDOM_SEED``."
msgstr ""
"これらの関数は、デフォルトの :ref:`ParticlesMaterial "
"<class_ParticlesMaterial>` に由来します。それらは、各パーティクルの "
"``RANDOM_SEED`` から乱数を生成するために使用されます。"

#, fuzzy
msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the Spatial shader of the mesh, and also in the particle shader "
"the next time it is run."
msgstr ""
"パーティクルシェーダーのユニークな点は、組み込み変数の一部がフレーム間で保存"
"されることです。\\ ``TRANSFORM``\\ 、\\ ``COLOR``\\ 、および ``CUSTOM``\\ は"
"すべて、メッシュのSpatialシェーダー、および次回の実行時にパーティクルシェー"
"ダーでアクセスできます。"

msgid ""
"Next, setup your ``vertex`` function. Particles shaders only contain a "
"vertex function and no others."
msgstr ""
"次に、\\ ``vertex`` 関数をセットアップします。パーティクルシェーダーには頂点"
"関数のみが含まれ、その他は含まれません。"

#, fuzzy
msgid ""
"First we will distinguish between code that needs to be run only when the "
"particle system starts and code that should always run. We want to give each "
"fish a random position and a random animation offset when the system is "
"first run. To do so, we wrap that code in an ``if`` statement that checks "
"the built-in variable ``RESTART`` which becomes ``true`` for one frame when "
"the particle system is restarted."
msgstr ""
"最初に、パーティクルシステムの起動時にのみ実行する必要があるコードと、常に実"
"行する必要があるコードを区別します。システムが最初に実行されたときに、各魚に"
"ランダムな位置とランダムなアニメーションオフセットを与えたいので、そのコード"
"をパーティクルシステムが再起動されたときの1フレーム目に ``ture`` になる組み込"
"み変数 ``RESTART`` をチェックする ``if`` ステートメントでラップします。"

msgid "From a high level, this looks like:"
msgstr "大まかに言えば、次のようになります:"

msgid ""
"Next, we need to generate 4 random numbers: 3 to create a random position "
"and one for the random offset of the swim cycle."
msgstr ""
"次に、4つの乱数を生成する必要があります。3つはランダムな位置を作成し、1つは遊"
"泳サイクルのランダムなオフセットを作成します。"

msgid ""
"First, generate 4 seeds inside the ``RESTART`` block using the ``hash`` "
"function provided above:"
msgstr ""
"まず、上記の ``hash`` 関数を使用して ``RESTART`` ブロック内に4つのシードを生"
"成します:"

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""
"次に、これらのシードを使用して、\\ ``rand_from_seed`` を使用して乱数を生成し"
"ます:"

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"最後に、位置情報を保持するtansformの一部である ``TRANSFORM[3].xyz`` に "
"``position`` を割り当てます。"

msgid "Remember, all this code so far goes inside the ``RESTART`` block."
msgstr ""
"これまでのこのコードはすべて、\\ ``RESTART`` ブロックの内部にあることに注意し"
"てください。"

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""
"メッシュの頂点シェーダーは、前のチュートリアルとまったく同じままにすることが"
"できます。"

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"これで、\\ ``TRANSFORM`` に直接追加するか、\\ ``VELOCITY`` に書き込むことで、"
"各魚をフレームごとに個別に移動できます。"

msgid "Let's transform the fish by setting their ``VELOCITY``."
msgstr "魚の ``VELOCITY`` を設定して魚を変身させましょう。"

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""
"これは、すべてのパーティクル(または魚)が同じ速度を持つように ``VELOCITY`` を"
"設定する最も基本的な方法です。"

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""
"``VELOCITY`` を設定するだけで、好きなように魚を泳がせることができます。たとえ"
"ば、次のコードを試してください。"

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr ""
"これにより、各魚に ``2`` と ``10`` の間のユニークな速度が与えられます。"

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"前回のチュートリアルで ``CUSTOM.y`` を使用した場合、\\ ``VELOCITY`` に基づい"
"て遊泳アニメーションの速度を設定することもできます。\\ ``CUSTOM.y`` を使用し"
"てください。"

msgid "This code gives you the following behavior:"
msgstr "このコードは、次の動作を提供します:"

msgid ""
"Using a ParticlesMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"ParticlesMaterialを使用すると、魚の動作を好きなだけ単純または複雑にすることが"
"できます。このチュートリアルでは、Velocityのみを設定しますが、独自のシェー"
"ダーでは、\\ ``COLOR``\\ 、回転、スケール(``TRANSFORM`` を使用)も設定できま"
"す。パーティクルシェーダーの詳細については、\\ :ref:`パーティクルシェーダーリ"
"ファレンス <doc_particle_shader>` を参照してください。"

msgid "Translation status"
msgstr "翻訳ステータス"
