# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Animating thousands of fish with MultiMeshInstance"
msgstr "MultiMeshInstanceを使用して何千もの魚をアニメーション化する"

msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"このチュートリアルでは、頂点アニメーションと静的メッシュのインスタンス化を使"
"用して、何千もの魚をレンダリングおよびアニメーション化するために、ゲームで使"
"用されるテクニック `ABZU <https://www.gdcvault.com/play/1024409/Creating-the-"
"Art-of-ABZ>`_を探ります。"

msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance <class_MultiMeshInstance>`. "
"Using the following technique you can render thousands of animated objects, "
"even on low end hardware."
msgstr ""
"Godotでは、カスタムの :ref:`Shader <class_Shader>` と :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>` でこれを実現できます。次の手法"
"を使用すると、ローエンドのハードウェア上でも数千のアニメーションオブジェクト"
"をレンダリングできます。"

msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr ""
"まず、1匹の魚をアニメーション化することから始めます。次に、そのアニメーション"
"を何千もの魚に拡張する方法を見ていきます。"

msgid "Animating one Fish"
msgstr "1匹の魚のアニメーション"

msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance <class_MeshInstance>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"魚1匹から始めます。魚モデルを :ref:`MeshInstance <class_MeshInstance>` にロー"
"ドし、新しい :ref:`ShaderMaterial <class_ShaderMaterial>` を追加します。"

msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr "これがサンプル画像に使用する魚です。好きな魚モデルを使用できます。"

msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <http://quaternius."
"com>`_ and is shared with a creative commons license. CC0 1.0 Universal (CC0 "
"1.0) Public Domain Dedication https://creativecommons.org/publicdomain/"
"zero/1.0/"
msgstr ""
"このチュートリアルの魚モデルは、\\ `QuaterniusDev <http://quaternius.com>`_ "
"によって作成され、クリエイティブコモンズライセンスと共有されます。CC0 1.0 "
"Universal (CC0 1.0) Public Domain Dedication https://creativecommons.org/"
"publicdomain/zero/1.0/"

msgid ""
"Typically, you would use bones and a :ref:`Skeleton <class_Skeleton>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""
"通常、ボーンと :ref:`Skeleton <class_Skeleton>` を使用してオブジェクトをアニ"
"メーション化します。ただし、ボーンはCPU上でアニメーション化されるため、フレー"
"ムごとに数千もの操作を計算しなくてはならず、数千ものオブジェクトを持つことは"
"不可能になります。頂点シェーダーで頂点アニメーションを使用すると、ボーンを使"
"用せずに、数行のコードでGPUで完全にアニメーションを計算できます。"

msgid "The animation will be made of four key motions:"
msgstr "アニメーションは、4つのキーモーションで構成されます:"

msgid "A side to side motion"
msgstr "左右の動き"

msgid "A pivot motion around the center of the fish"
msgstr "魚の中心の周を旋回する動き"

msgid "A panning wave motion"
msgstr "揺ら揺らした波状の動き"

msgid "A panning twist motion"
msgstr "揺ら揺らした捻る動き"

msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"アニメーションのすべてのコードは、モーションの量を制御するuniformを持つ頂点"
"シェーダーにあります。uniformを使用してモーションの強さを制御するため、エディ"
"タでアニメーションを微調整し、シェーダーを再コンパイルせずにリアルタイムで結"
"果を確認できます。"

#, fuzzy
msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""
"すべてのモーションは、モデル空間のVERTEXに適用されたコサイン波を使用して作成"
"されます。動きが常に魚の向きに関連するように、頂点をモデル空間に配置する必要"
"があります。たとえば、左右の動きは、ワールド方向の `x` 軸ではなく、必ず魚を左"
"右に前後に移動します。"

msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr ""
"アニメーションの速度を制御するために、\\ ``TIME`` を使用して独自の時間変数を"
"定義することから始めます。"

msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"実装する最初のモーションは、左右のモーションです。これは、\\ ``VERTEX.x`` を "
"``TIME`` の ``cos`` でオフセットすることで作成できます。メッシュがレンダリン"
"グされるたびに、すべての頂点が ``cos(time)`` の量だけ横に移動します。"

msgid "The resulting animation should look something like this:"
msgstr "結果のアニメーションは次のようになります:"

msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"次に、ピボットを追加します。魚の中心は (0, 0) なので、魚の中心の周りを回転さ"
"せるために、\\ ``VERTEX`` に回転行列を掛けるだけで済みます。"

msgid "We construct a rotation matrix like so:"
msgstr "次のような回転行列を作成します:"

msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr ""
"そして、それを ``VERTEX.xz`` に乗算して ``x`` および ``z`` 軸に回転を適用しま"
"す。"

msgid "With only the pivot applied you should see something like this:"
msgstr "ピボットのみを適用すると、次のように表示されます:"

msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"次の2つの動きは、魚の背骨をパンダウンする必要があります。そのためには、新しい"
"変数 ``body`` が必要です。 ``body`` は、魚の尾が ``0`` \\、頭に ``1`` のfloat"
"です。"

msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"次の動きは、魚の長さを下るコサイン波です。それを魚の背骨に沿って移動させるた"
"めに、背骨に沿った位置で ``cos`` への入力をオフセットします。これは上で定義し"
"た変数 ``body`` です。"

msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"これは上で定義した左右の動きに非常に似ていますが、この例では、\\ ``body`` を"
"使用して ``cos`` をオフセットすることにより、脊椎に沿った各頂点が波の中で異な"
"る位置を持ち、波は魚に沿って動いているように見えます。"

#, fuzzy
msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first construct a rotation matrix."
msgstr ""
"最後の動きは捻りです。これは脊椎に沿ったパンロールです。ピボットと同様に、最"
"初に回転行列を作成します。"

#, fuzzy
msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fish's spine needs to be centered on "
"the ``z`` axis."
msgstr ""
"魚が脊椎の周りを回転するように見えるように、\\ ``xy`` 軸に回転を適用します。"
"これが機能するには、魚の脊椎を ``z`` 軸の中心に置く必要があります。"

msgid "Here is the fish with twist applied:"
msgstr "捻りが適用された魚は次のとおりです:"

msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr ""
"これらすべての動きを次々に適用すると、滑らかなゼリーのような動きが得られま"
"す。"

msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"通常の魚は主に体の後ろ半分で泳ぎます。したがって、パンの動きを魚の後ろ半分に"
"制限する必要があります。これを行うために、新しい変数 ``mask`` を作成します。"

#, fuzzy
msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end using ``smoothstep`` to control the point at which the transition "
"from ``0`` to ``1`` happens."
msgstr ""
"``mask`` は魚の頭の ``0`` から尾びれの先の ``1`` までのfloatです。\\ "
"``smoothstep`` を使用して ``0`` から ``1`` へ移行が起こるポイントを制御しま"
"す。"

msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr "以下は、\\ ``mask`` を ``COLOR`` として使用した魚の画像です:"

msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr "波については、動きに ``mask`` を掛けて、後ろ半分に制限します。"

#, fuzzy
msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask``, we would shrink the fish."
msgstr ""
"マスクを捻りに適用するために、\\ ``mix`` を使用します。\\ ``mix`` を使用する"
"と、完全に回転した頂点と回転していない頂点の間で頂点の位置を混合できます。\\ "
"``VERTEX`` に動き追加するのではなく、\\ ``VERTEX`` を回転したバージョンに置き"
"換えているため、\\ ``mask`` に回転したVERTEXを乗算する代わりに ``mix`` を使用"
"する必要があります。それに ``mask`` を掛けると、魚は小さくなります。"

msgid "Putting the four motions together gives us the final animation."
msgstr ""
"4つのモーションを組み合わせると、最終的なアニメーションが作成されます。"

msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"さあ、魚の泳ぎ方を変えるためにunifomで遊んでください。これらの4つのモーション"
"を使用して、さまざまな遊泳スタイルを作成できることがわかります。"

msgid "Making a school of fish"
msgstr "魚の群れを作る"

msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance node."
msgstr ""
"Godotでは、MultiMeshInstanceノードを使用して、何千もの同じオブジェクトを簡単"
"にレンダリングできます。"

msgid ""
"A MultiMeshInstance node is created and used the same way you would make a "
"MeshInstance node. For this tutorial, we will name the MultiMeshInstance "
"node ``School``, because it will contain a school of fish."
msgstr ""
"MultiMeshInstanceノードは、MeshInstanceノードを作成するのと同じ方法で作成およ"
"び使用されます。このチュートリアルでは、魚の群れが含まれているため、"
"MultiMeshInstanceノードに ``School`` という名前を付けます。"

msgid ""
"Once you have a MultiMeshInstance add a :ref:`MultiMesh <class_MultiMesh>`, "
"and to that MultiMesh add your :ref:`Mesh <class_Mesh>` with the shader from "
"above."
msgstr ""
"MultiMeshInstanceを作成したら、インスペクタで :ref:`MultiMesh "
"<class_MultiMesh>` を追加し、そのMultiMeshに上からシェーダーを使用して :ref:"
"`Mesh <class_Mesh>`を追加します。"

msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"MultiMeshは、インスタンスごとの3つの追加プロパティでメッシュを描画します: 幾"
"何学変換(回転、移動、スケール)、色、およびカスタム。カスタムは、\\ :ref:"
"`Color <class_Color>` を使用して4つの多目的変数を渡すために使用されます。"

msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"``instance_count`` は、描画するメッシュのインスタンスの数を指定します。とりあ"
"えず、\\ ``instance_count`` が ``0`` より大きい間は他のパラメーターを変更でき"
"ないため、\\ ``instance_count`` を ``0`` のままにします。後でGDScriptで "
"``instance_count`` を設定します。"

msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""
"``Transform Format``は、使用される変換が3Dか2Dかを指定します。このチュートリ"
"アルでは、3Dを選択します。"

#, fuzzy
msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating-point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""
"``Color Format`` と ``Custom Data Format`` の両方について、\\ "
"``None``\\ 、\\ ``Byte``\\ 、および ``Float`` から選択できます。\\ ``None`` "
"は、そのデータ(インスタンスごとの ``COLOR`` 変数または ``INSTANCE_CUSTOM`` の"
"いずれか)をシェーダーに渡さないことを意味します。\\ ``Byte`` は、渡す色を構成"
"する各数値が8ビットで格納されることを意味し、\\ ``FLoat`` は、各数値が浮動小"
"数点数(32ビット)で格納されることを意味します。\\ ``Float`` は遅くなりますが、"
"より正確です。\\ ``Byte`` はより少ないメモリで高速になりますが、視覚的なアー"
"ティファクトが見られることがあります。"

msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr "さて、\\ ``Instance Count`` を持ちたい魚の数に設定してください。"

msgid "Next we need to set the per-instance transforms."
msgstr "次に、インスタンスごとのtransformを設定する必要があります。"

msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""
"MultiMesheのインスタンスごとの変換を設定するには、2つの方法があります。 1つ目"
"は完全にエディタで行われ、\\ :ref:`MultiMeshInstanceチュートリアル "
"<doc_using_multi_mesh_instance>` で説明されています。"

msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"2つ目は、すべてのインスタンスをループ処理し、コード内でそれらのtansformを設定"
"することです。以下では、GDScriptを使用してすべてのインスタンスをループし、そ"
"れらの変換をランダムな位置に設定します。"

msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance."
msgstr ""
"このスクリプトを実行すると、MultiMeshInstanceの位置を囲むボックス内のランダム"
"な位置に魚が配置されます。"

msgid ""
"If performance is an issue for you, try running the scene with GLES2 or with "
"fewer fish."
msgstr ""
"パフォーマンスが問題になる場合は、GLES2またはより少ない魚でシーンを実行してみ"
"てください。"

#, fuzzy
msgid ""
"Notice how all the fish are all in the same position in their swim cycle? It "
"makes them look very robotic. The next step is to give each fish a different "
"position in the swim cycle so the entire school looks more organic."
msgstr ""
"すべての魚が遊泳サイクルの同じ位置にあることに注意してください。彼らは非常に"
"ロボット的に見えます。次のステップでは、各魚に遊泳サイクルの異なる位置を与"
"え、群れ全体がより有機的に見えるようにします。"

msgid "Animating a school of fish"
msgstr "魚の群れをアニメーション化する"

msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"``cos`` 関数を使用して魚をアニメーション化する利点の1つは、1つのパラメーター "
"``time`` でアニメーション化されることです。各魚に遊泳サイクルのユニークな位置"
"を与えるために、\\ ``time``をオフセットする必要があります。"

msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""
"インスタンスごとのカスタム値 ``INSTANCE_CUSTOM`` を ``time`` に加算することで"
"それを行います。"

msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"次に、値を ``INSTANCE_CUSTOM`` に渡す必要があります。そのためには、上から "
"``for`` ループに1行追加します。\\ ``for`` ループでは、各インスタンスに使用す"
"る4つのランダムフロートのセットを割り当てます。"

msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"今、魚はすべて遊泳サイクルでユニークな位置を持っています。\\ "
"``INSTANCE_CUSTOM`` を使用して、\\ ``TIME`` を掛けることでより速くまたは遅く"
"泳ぐことで、彼らにもう少し個性を与えることができます。"

msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr ""
"インスタンスごとのカスタム値を変更したのと同じ方法で、インスタンスごとの色の"
"変更を試すこともできます。"

#, fuzzy
msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster than moving thousands of MeshInstances per frame, it'll still likely "
"be slow."
msgstr ""
"この時点で遭遇する問題の1つは、魚はアニメーション化されていますが、移動はして"
"いないことです。フレームごとに各魚のインスタンスごとのtransformを更新すること"
"により、それらを移動できます。これを行うと、フレームごとに数千のMeshInstance"
"を移動するよりも高速になりますが、それでも低速になる可能性があります。"

msgid ""
"In the next tutorial we will cover how to use :ref:`Particles "
"<class_Particles>` to take advantage of the GPU and move each fish around "
"individually while still receiving the benefits of instancing."
msgstr ""
"次のチュートリアルでは、\\ :ref:`Particles <class_Particles>` を使用してGPUを"
"活用し、インスタンス化の利点を享受しながら各魚を個別に移動する方法について説"
"明します。"

msgid "Translation status"
msgstr "翻訳ステータス"
