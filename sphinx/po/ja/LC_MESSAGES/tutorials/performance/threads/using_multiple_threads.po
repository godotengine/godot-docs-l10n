# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using multiple threads"
msgstr "複数のスレッドの使用"

msgid "Threads"
msgstr "スレッド"

msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""
"スレッドはコードの同時実行を可能にします。これにより、メインスレッドの負荷を"
"軽減します。"

msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""
"Godotはスレッドをサポートし、それらを使用するための便利な関数を多数提供しま"
"す。"

msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""
"他の言語(C#、C++)を使用する場合、各言語がサポートしているスレッドクラスを使用"
"する方が簡単な場合があります。"

msgid ""
"Before using a built-in class in a thread, read :ref:`doc_thread_safe_apis` "
"first to check whether it can be safely used in a thread."
msgstr ""

msgid "Creating a Thread"
msgstr "スレッドの作成"

msgid "Creating a thread is very simple, just use the following code:"
msgstr "スレッドの作成は非常に簡単で、次のコードを使用するだけです:"

msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""
"関数は、戻るまで別のスレッドで実行されます。関数が既に戻っている場合でも、ス"
"レッドはそれを整理する必要があるので、\\ :ref:`Thread.wait_to_finish() "
"<class_Thread_method_wait_to_finish>` を呼び出し、(まだ終了していない場合は)"
"スレッドが終了するまで待機し、適切に破棄します。"

msgid "Mutexes"
msgstr "ミューテックス"

#, fuzzy
msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`doc_thread_safe_apis` documentation to understand which engine APIs support "
"multiple thread access."
msgstr ""
"複数のスレッドからのオブジェクトまたはデータへのアクセスは常にサポートされて"
"いるわけではありません(アクセスすると、予期しない動作やクラッシュが発生しま"
"す)。\\ :ref:`Thread safe APIs<doc_thread_safe_apis>` を読んで、どのエンジン"
"APIが複数のスレッドからのアクセスをサポートしているのかを理解してください。"

msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""
"独自のデータを処理するとき、または独自の関数を呼び出すときは、原則として、異"
"なるスレッドから直接同じデータにアクセスしないようにしてください。データは変"
"更時にCPUコア間で常に更新されないため、同期の問題が発生する可能性があります。"
"異なるスレッドからデータにアクセスするときは、常に\\ :ref:`Mutex "
"<class_Mutex>` を使用します。"

msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""
":ref:`Mutex.lock() <class_Mutex_method_lock>` を呼び出すと、スレッドは、同じ"
"ミューテックスを\\ *ロック*\\ しようとする、他の全てのスレッドをブロックされ"
"た(休止した)状態にします。\\ :ref:`Mutex.unlock() "
"<class_Mutex_method_unlock>` を呼び出してmutexのロックを解除すると、新たに他"
"のスレッドがロックを続行できます(ただし、一度に１つのスレッドのみ)。"

msgid "Here is an example of using a Mutex:"
msgstr "以下は、Mutex の使用例です:"

msgid "Semaphores"
msgstr "セマフォ"

msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""
"スレッドを\\ *「オンデマンド」*\\ で動作させたい場合があります。言い換えれ"
"ば、いつ作業するかを伝え、何もしていないときに休止させます。このために、\\ :"
"ref:`Semaphores <class_Semaphore>` が使用されます。関数 :ref:`Semaphore."
"wait() <class_Semaphore_method_wait>` はスレッドで使用され、データが到着する"
"までスレッドを休止します。"

msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""
"それに対し、メインスレッドは :ref:`Semaphore.post() "
"<class_Semaphore_method_post>` を使用して、データを処理する準備ができているこ"
"とを通知します:"

msgid "Translation status"
msgstr "翻訳ステータス"
