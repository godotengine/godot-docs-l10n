# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Thread-safe APIs"
msgstr "スレッドセーフAPI"

msgid "Threads"
msgstr "スレッド"

msgid ""
"Threads are used to balance processing power across CPUs and cores. Godot "
"supports multithreading, but not in the whole engine."
msgstr ""
"スレッドは、CPUとコア間で処理能力のバランスを取るために使用されます。 Godotは"
"マルチスレッドをサポートしていますが、エンジン全体ではサポートしていません。"

msgid ""
"Below is a list of ways multithreading can be used in different areas of "
"Godot."
msgstr ""
"以下は、Godotのさまざまな領域でマルチスレッドを使用する方法の一覧です。"

msgid "Global scope"
msgstr "グローバル スコープ"

msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread-safe. "
"Accessing servers from threads is supported (for VisualServer and Physics "
"servers, ensure threaded or thread-safe operation is enabled in the project "
"settings!)."
msgstr ""
":ref:`Global Scope <class_@GlobalScope>` シングルトンはすべてスレッドセーフで"
"す。スレッドからサーバーへのアクセスがサポートされています (VisualServerおよ"
"びPhysicsサーバーの場合、プロジェクト設定にてマルチスレッドまたはスレッドセー"
"フ操作が有効になっていることを確認してください！)。"

msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""
"これは、サーバーに数十万のインスタンスを作成し、スレッドから制御するコードに"
"最適です。もちろん、これはシーンツリー内ではなく直接使用されるため、多少の"
"コードが必要です。"

msgid "Scene tree"
msgstr "シーンツリー"

#, fuzzy
msgid ""
"Interacting with the active scene tree is **NOT** thread-safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""
"アクティブなシーンツリーとの対話は、スレッドセーフではありません。スレッド間"
"でデータを送信するときは、必ずミューテックスを使用してください。スレッドから"
"関数を呼び出したい場合は、\\ *call_deferred * 関数を使用できます:"

msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""
"ただし、アクティブなツリーの外側にシーンチャンク(ツリー配置のノード)を作成す"
"ることは問題ありません。このようにして、シーンの一部をスレッドで構築またはイ"
"ンスタンス化し、メインスレッドに追加できます:"

msgid ""
"Still, this is only really useful if you have **one** thread loading data. "
"Attempting to load or create scene chunks from multiple threads may work, "
"but you risk resources (which are only loaded once in Godot) tweaked by the "
"multiple threads, resulting in unexpected behaviors or crashes."
msgstr ""
"ただし、これはデータをロードするスレッドが\\ **1つ**\\ しかない場合にのみ本当"
"に役立ちます。複数のスレッドからシーンチャンクをロードまたは作成しようとする"
"と、一応は動作する場合もありますが、リソース(Godotで一度だけロードされる)が複"
"数のスレッドによって微調整され、それにより予期しない動作やクラッシュが発生す"
"るリスクがあります。"

msgid ""
"Only use more than one thread to generate scene data if you *really* know "
"what you are doing and you are sure that a single resource is not being used "
"or set in multiple ones. Otherwise, you are safer just using the servers API "
"(which is fully thread-safe) directly and not touching scene or resources."
msgstr ""
"自分が何をしているかを\\ *本当に*\\ 知っていて、単一のリソースが複数のリソー"
"スで使用または設定されていないことが確実な場合にのみ、複数のスレッドを使用し"
"てシーンデータを生成できます。それ以外の場合は、サーバーAPI(完全にスレッド"
"セーフ)を直接使用するだけにとどめ、シーンやリソースに触れない方が安全です。"

msgid "Rendering"
msgstr "レンダリング"

msgid ""
"Instancing nodes that render anything in 2D or 3D (such as Sprite) is *not* "
"thread-safe by default. To make rendering thread-safe, set the **Rendering > "
"Threads > Thread Model** project setting to **Multi-Threaded**."
msgstr ""

msgid ""
"Note that the Multi-Threaded thread model has several known bugs, so it may "
"not be usable in all scenarios."
msgstr ""

msgid "GDScript arrays, dictionaries"
msgstr "GDScriptの配列、辞書"

#, fuzzy
msgid ""
"In GDScript, reading and writing elements from multiple threads is OK, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""
"GDScriptでは、複数のスレッドから要素を読み書きすることは可能ですが、コンテナ"
"のサイズを変更する操作(要素のサイズ変更、追加、削除)には、ミューテックスを"
"ロックする必要があります。"

msgid "Resources"
msgstr "リソース"

msgid ""
"Modifying a unique resource from multiple threads is not supported. However "
"handling references on multiple threads is supported, hence loading "
"resources on a thread is as well - scenes, textures, meshes, etc - can be "
"loaded and manipulated on a thread and then added to the active scene on the "
"main thread. The limitation here is as described above, one must be careful "
"not to load the same resource from multiple threads at once, therefore it is "
"easiest to use **one** thread for loading and modifying resources, and then "
"the main thread for adding them."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
