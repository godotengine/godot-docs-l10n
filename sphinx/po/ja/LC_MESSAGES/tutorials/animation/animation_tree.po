# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using AnimationTree"
msgstr "アニメーションツリー"

msgid "Introduction"
msgstr "はじめに"

#, fuzzy
msgid ""
"With :ref:`AnimationPlayer <class_AnimationPlayer>`, Godot has one of the "
"most flexible animation systems that you can find in any game engine. The "
"ability to animate almost any property in any node or resource, as well as "
"having dedicated transform, bezier, function calling, audio and sub-"
"animation tracks, is pretty much unique."
msgstr ""
"\\ :ref:`AnimationPlayer <class_AnimationPlayer>`\\ と合わせて、Godotはあらゆ"
"るゲームエンジンの中でもトップクラスの柔軟性をもつアニメーション・システムを"
"もっています。トランスフォーム、ベジェ曲線、関数呼び出し、オーディオや副アニ"
"メーションのトラックが用意されているのみならず、あらゆるノードやリソースのど"
"んなプロパティでもアニメーションできることは、非常に独特です。"

msgid ""
"However, the support for blending those animations via ``AnimationPlayer`` "
"is relatively limited, as only a fixed cross-fade transition time can be set."
msgstr ""
"ただし、それらのアニメーションをブレンドするには、\\ ``AnimationPlayer``\\ で"
"は固定のクロスフェード遷移のみなので、比較的制限されています。"

msgid ""
":ref:`AnimationTree <class_AnimationTree>` is a new node introduced in Godot "
"3.1 to deal with advanced transitions. It supersedes the ancient "
"``AnimationTreePlayer``, while adding a huge amount of features and "
"flexibility."
msgstr ""
"\\ :ref:`AnimationTree <class_AnimationTree>`\\ は、高度な遷移をするために"
"Godot 3.1で導入されたノードです。これは古い\\ ``AnimationTreePlayer``\\ を置"
"き換えるもので、膨大な量の機能と柔軟性を加えています。"

msgid "Creating an AnimationTree"
msgstr "AnimationTreeの作成"

msgid ""
"Before starting, it must be made clear that an ``AnimationTree`` node does "
"not contain its own animations. Instead, it uses animations contained in an "
"``AnimationPlayer`` node. This way, you can edit your animations (or import "
"them from a 3D scene) as usual and then use this extra node to control the "
"playback."
msgstr ""
"始める前にまず明らかにすべきは、\\ ``AnimationTree``\\ ノードは自身のアニメー"
"ションは含みません。代わりにそれは、別にある\\ ``AnimationPlayer``\\ ノードが"
"持つアニメーションを利用します。これにより、従来通りアニメーションを編集(ある"
"いは他の3Dシーンからインポート)でき、さらに再生をコントロールしたいときにこの"
"ノードを追加するのです。"

msgid ""
"The most common way to use ``AnimationTree`` is in a 3D scene. When "
"importing your scenes from a 3D exchange format, they will usually come with "
"animations built-in (either multiple ones or split from a large one on "
"import). At the end, the imported Godot scene will contain the animations in "
"a ``AnimationPlayer`` node."
msgstr ""
"\\ ``AnimationTree``\\ の最も一般的な使い道は3Dシーンです。シーンを3D交換"
"フォーマットからインポートすると、通常はアニメーションはそのまま同梱されてい"
"ます(複数のものや、大きなものがインポートの際に分割されていても)。インポート"
"されたGodotシーンでは最終的に、アニメーションはすべて一つの\\ "
"``AnimationPlayer``\\ ノードに格納されます。"

msgid ""
"As you rarely use imported scenes directly in Godot (they are either "
"instantiated or inherited from), you can place the ``AnimationTree`` node in "
"your new scene which contains the imported one. Afterwards, point the "
"``AnimationTree`` node to the ``AnimationPlayer`` that was created in the "
"imported scene."
msgstr ""
"Godotでは、インポートされたシーンを (インスタンス化あるいは継承せずに) 直接使"
"うことは珍しいので、インポートされたシーンのための新しいシーンに\\ "
"``AnimationTree``\\ を追加することにします。そのあと\\ ``AnimationTree``\\ "
"ノードにて、インポートされたシーンの中に作られた\\ ``AnimationPlayer``\\ を割"
"り当ててください。"

msgid ""
"This is how it's done in the `Third Person Shooter demo <https://github.com/"
"godotengine/tps-demo>`_, for reference:"
msgstr ""
"参考例として、\\ `三人称視点シューターデモ <https://github.com/godotengine/"
"tps-demo>`_\\ (英語) もそうなっています。"

msgid ""
"A new scene was created for the player with a ``KinematicBody`` as root. "
"Inside this scene, the original ``.dae`` (Collada) file was instantiated and "
"an ``AnimationTree`` node was created."
msgstr ""
"プレイヤー用の新しいシーンは\\ ``KinematicBody``\\ をルートにして作られていま"
"す。このシーンの中には、元の\\ ``.dae``\\ (Collada)ファイルがインスタンス化さ"
"れ、\\ ``AnimationTree``\\ ノードが作成されてあります。"

msgid "Creating a tree"
msgstr "ツリーの作成"

msgid ""
"There are three main types of nodes that can be used in ``AnimationTree``:"
msgstr "\\ ``AnimationTree``\\ では主に3種類のノードが使えます:"

msgid ""
"Animation nodes, which reference an animation from the linked "
"``AnimationTree``."
msgstr ""
"アニメーション・ノード。リンクされた\\ ``AnimationTree``\\ のアニメーションを"
"参照します。"

msgid "Animation Root nodes, which are used to blend sub-nodes."
msgstr "アニメーションルート・ノード。副ノードとのブレンドに使われます。"

msgid ""
"Animation Blend nodes, which are used within ``AnimationNodeBlendTree`` as "
"single-graph blending via multiple input ports."
msgstr ""
"アニメーションブレンド・ノード。\\ ``AnimationNodeBlendTree``\\ の中で使用さ"
"れ、複数のインプットポートを持ち、一つのグラフでブレンドします。"

msgid "To set a root node in ``AnimationTree``, a few types are available:"
msgstr ""
"\\ ``AnimationTree``\\ のルートノードを設定するには、いくつかの型が用意されて"
"います:"

msgid ""
"``AnimationNodeAnimation``: Selects an animation from the list and plays it. "
"This is the simplest root node, and generally not used directly as root."
msgstr ""
"\\ ``AnimationNodeAnimation``: リストから選択したアニメーションを再生します。"
"これは一番シンプルなルートノードで、通常は直接のルートとしては使用されませ"
"ん。"

msgid ""
"``AnimationNodeBlendTree``: Contains many *blend* type nodes, such as mix, "
"blend2, blend3, one shot, etc. This is one of the most commonly used roots."
msgstr ""
"\\ ``AnimationNodeBlendTree``: mix、blend2、blend3、one shotなどのような、多"
"くの\\ *ブレンド*\\ 型のノードを含んでいます。これはルートとしてよく使われる"
"ものの一つです。"

msgid ""
"``AnimationNodeStateMachine``: Contains multiple root nodes as children in a "
"graph. Each node is used as a *state*, and provides multiple functions to "
"alternate between states."
msgstr ""
"\\ ``AnimationNodeStateMachine``: 一つのグラフに、複数のルートノードを子に持"
"ちます。それぞれのノードは\\ *ステート*\\ として扱われ、ステートを切り替える"
"ための機能をいくつも備えています。"

msgid ""
"``AnimationNodeBlendSpace2D``: Allows placing root nodes in a 2D blend "
"space. Control the blend position in 2D to mix between multiple animations."
msgstr ""
"\\ ``AnimationNodeBlendSpace2D``: ルートノードを2Dブレンドスペースに置けるよ"
"うになります。二次元空間でブレンド位置をコントロールし、複数のアニメーション"
"のミックスします。"

msgid "``AnimationNodeBlendSpace1D``: Simplified version of the above (1D)."
msgstr "\\ ``AnimationNodeBlendSpace1D``: 上記の簡略版です (一次元)。"

msgid "Blend tree"
msgstr "ブレンド・ツリー"

msgid ""
"An ``AnimationNodeBlendTree`` can contain both root and regular nodes used "
"for blending. Nodes are added to the graph from a menu:"
msgstr ""
"\\ ``AnimationNodeBlendTree``\\ はブレンド用で、ルートまたは通常のノードを含"
"むことができます。ノードはメニューからグラフに追加します。"

msgid ""
"All blend trees contain an ``Output`` node by default, and something has to "
"be connected to it in order for animations to play."
msgstr ""
"すべてのブレンドツリーには、標準で\\ ``Output``\\ ノードが入っていて、アニ"
"メーションを再生するにはそこに何かをつなげる必要があります。"

msgid ""
"The easiest way to test this functionality is to connect an ``Animation`` "
"node to it directly:"
msgstr ""
"この機能を確認する一番簡単な方法は、\\ ``Animation``\\ ノードを直接つなげるこ"
"とです:"

msgid ""
"This will simply play back the animation. Make sure that the "
"``AnimationTree`` is active for something to actually happen."
msgstr ""
"これは単純にアニメーションを再生します。実行する前にまず\\ "
"``AnimationTree``\\ がアクティブであることを確認してください。"

msgid "Following is a short description of available nodes:"
msgstr "下記は利用可能なノードの短い説明です:"

msgid "Blend2 / Blend3"
msgstr "\\ Blend2 / Blend3"

msgid ""
"These nodes will blend between two or three inputs by a user-specified blend "
"value:"
msgstr ""
"これらのノードは、２つあるいは３つのインプットをユーザー指定の値でブレンドし"
"ます:"

msgid "For more complex blending, it is advised to use blend spaces instead."
msgstr ""
"より複雑なブレンドには、代わりにブレンドスペースを使うことをおすすめします。"

msgid ""
"Blending can also use filters, i.e. you can control individually which "
"tracks go through the blend function. This is very useful for layering "
"animations on top of each other."
msgstr ""
"ブレンドにはフィルターを使うこともでき、どのトラックをブレンド関数に渡すかど"
"うかをコントロールできます。これはアニメーションをレイヤーに分けて重ね合わせ"
"るのに有用です。"

msgid "OneShot"
msgstr "\\ OneShot"

msgid ""
"This node will execute a sub-animation and return once it finishes. Blend "
"times for fading in and out can be customized, as well as filters."
msgstr ""
"このノードは、副アニメーションを実行し、完了すると元に戻ります。フィルターだ"
"けでなく、フェードインとフェードアウトのブレンド時間もカスタマイズできます。"

msgid "Seek"
msgstr "\\ Seek"

#, fuzzy
msgid ""
"This node can be used to cause a seek command to happen to any sub-children "
"of the animation graph. Use this node type to play an ``Animation`` from the "
"start or a certain playback position inside the ``AnimationNodeBlendTree``."
msgstr ""
"このノードは、グラフのどんな副子ノードに対してもシーク命令を送ります。時間を"
"セットした後は、値は -1 に戻ります。"

msgid ""
"After setting the time and changing the animation playback, the seek node "
"automatically goes into sleep mode on the next process frame by setting its "
"``seek_position`` value to ``-1.0``."
msgstr ""

msgid "TimeScale"
msgstr "\\ TimeScale"

msgid ""
"Allows scaling the speed of the animation (or reverse it) in any children "
"nodes. Setting it to 0 will pause the animation."
msgstr ""
"アニメーションの再生速度の変更 (あるいは逆再生) を可能にします。0 にセットす"
"るとアニメーションを一時停止します。"

msgid "Transition"
msgstr "トランジション"

msgid ""
"Very simple state machine (when you don't want to cope with a "
"``StateMachine`` node). Animations can be connected to the outputs and "
"transition times can be specified."
msgstr ""
"とても単純なステートマシンです (\\ ``StateMachine``\\ ノードを扱いたくない時"
"に)。複数のアニメーションを接続でき、トランジションの時間を指定できます。"

msgid "BlendSpace2D"
msgstr "\\ BlendSpace2D"

#, fuzzy
msgid ""
"``BlendSpace2D`` is a node to do advanced blending in two dimensions. Points "
"are added to a two-dimensional space and then a position can be controlled "
"to determine blending:"
msgstr ""
"\\ ``BlendSpace2D``\\ は二次元でより高度なブレンドをするためのノードです。二"
"次元空間に点を追加し、それらの位置をコントロールしてブレンドを決めます。"

msgid ""
"The ranges in X and Y can be controlled (and labeled for convenience). By "
"default, points can be placed anywhere (just right-click on the coordinate "
"system or use the *add point* button) and triangles will be generated "
"automatically using Delaunay."
msgstr ""
"X および Y の範囲でコントロールできます (それぞれ別の名称に変更可)。デフォル"
"トでは、点はどこにでも置けます(座標系の上で右クリックするか、\\ *点を作成*\\ "
"ボタンを使う)。三角形はドロネー分割で自動生成されます。"

msgid ""
"It is also possible to draw the triangles manually by disabling the *auto "
"triangle* option, though this is rarely necessary:"
msgstr ""
"\\ *三角形の自動作成*\\ をオフにすれば、三角形を手動で作成することもできます"
"が、必要になることはあまり無いでしょう:"

msgid ""
"Finally, it is possible to change the blend mode. By default, blending "
"happens by interpolating points inside the closest triangle. When dealing "
"with 2D animations (frame by frame), you may want to switch to *Discrete* "
"mode. Alternatively, if you want to keep the current play position when "
"switching between discrete animations, there is a *Carry* mode. This mode "
"can be changed in the *Blend* menu:"
msgstr ""
"最後に、ブレンドモードは変更することができます。標準状態では、一番近い三角形"
"の中で補完された点によってブレンドされますが、もし対象が(フレームごとに動か"
"す)2Dアニメーションなら、\\ *離散*\\ モードに切り替えてもよいでしょう。あるい"
"は、離散アニメーション間においても現在の再生位置を維持したい場合のために、\\ "
"*キャリー*\\ モードもあります。モードは\\ *ブレンド*\\ メニューから変更できま"
"す。"

msgid "BlendSpace1D"
msgstr "\\ BlendSpace1D"

msgid ""
"This is similar to 2D blend spaces, but in one dimension (so triangles are "
"not needed)."
msgstr ""
"これは2Dブレンドスペースと同様ですが、一次元のみです (そのため三角形は不要)。"

msgid "StateMachine"
msgstr "\\ StateMachine"

#, fuzzy
msgid ""
"This node acts as a state machine with root nodes as states. Root nodes can "
"be created and connected via lines. States are connected via *Transitions*, "
"which are connections with special properties. Transitions are uni-"
"directional, but two can be used to connect in both directions."
msgstr ""
"このノードは比較的シンプルなステートマシンです。ルートノードを作り、線をつな"
"いで接続します。ステートは、独自のプロパティを持つ\\ *トランジション*\\ を用"
"いて接続します。トランジションは一方通行ですが、ふたつを互いに接続させあうこ"
"とができます。"

#, fuzzy
msgid "There are many types of transition:"
msgstr "トランジションにはいくつもの種類があります:"

msgid ""
"*Immediate*: Will switch to the next state immediately. The current state "
"will end and blend into the beginning of the new one."
msgstr ""
"\\ *即座* (Immediate): 次のステートへと即座に切り替わります。現在のステートが"
"終わると、新しいほうの先頭から始まります。"

msgid ""
"*Sync*: Will switch to the next state immediately, but will seek the new "
"state to the playback position of the old state."
msgstr ""
"\\ *同期* (Sync): 次のステートへと即座に切り替わりますが、新しいステートでも"
"古いステートと同じ再生位置になります。"

msgid ""
"*At End*: Will wait for the current state playback to end, then switch to "
"the beginning of the next state animation."
msgstr ""
"\\ *終わりに* (At End): 現在のステートの再生位置が最後になるまで待ち、それか"
"ら次のステートの先頭に切り替わります。"

msgid ""
"Transitions also have a few properties. Click any transition and it will be "
"displayed in the inspector dock:"
msgstr ""
"トランジションはまた、いくつかのプロパティを持ちます。トランジションをクリッ"
"クすると、インスペクタ ドックに表示されます:"

msgid ""
"*Switch Mode* is the transition type (see above), it can be modified after "
"creation here."
msgstr ""
"\\ *Switch Mode* はトランジションの種類です (上記参照)。作成した後でもここで"
"変更できます。"

msgid ""
"*Auto Advance* will turn on the transition automatically when this state is "
"reached. This works best with the *At End* switch mode."
msgstr ""
"\\ *Auto Advance* (自動移行)は、このステートに到達したらすぐにトランジション"
"がオンになります。これは *At End* スイッチモードと合わせるのが最適です。"

msgid ""
"*Advance Condition* will turn on auto advance when this condition is set. "
"This is a custom text field that can be filled with a variable name. The "
"variable can be modified from code (more on this later)."
msgstr ""
"\\ *Advance Condition* (移行条件) は、この条件が満たされた場合に自動移行させ"
"ます。テキストフィールドには変数名を入れます。この変数はコードから変更するこ"
"とができます (詳しくは後述)。"

msgid "*Xfade Time* is the time to cross-fade between this state and the next."
msgstr ""
"\\ *Xfade Time* は、このステートと次との間でのクロスフェードにかかる時間で"
"す。"

#, fuzzy
msgid ""
"*Priority* is used together with the ``travel()`` function from code (more "
"on this later). Lower priority transitions are preferred when travelling "
"through the tree."
msgstr ""
"\\ *Priority* (優先度) は、コード内での\\ ``travel()``\\ 関数と共に使用しま"
"す (詳しくは後述)。ひとつのステートから別へと移動するときの、このノードの優先"
"度を設定します。"

#, fuzzy
msgid ""
"*Disabled* toggles disabling this transition (when disabled, it will not be "
"used during travel or auto advance)."
msgstr ""
"\\ *Disabled* (無効) は、このトランジションを無効にします (ただし travel や自"
"動移行では無視されます)。"

msgid "Root motion"
msgstr "ルート モーション"

msgid ""
"When working with 3D animations, a popular technique is for animators to use "
"the root skeleton bone to give motion to the rest of the skeleton. This "
"allows animating characters in a way where steps actually match the floor "
"below. It also allows precise interaction with objects during cinematics."
msgstr ""
"3Dアニメーションの作業では、スケルトンを動かすためにルート・スケルトン ボーン"
"を用意するのが一般的なテクニックです。これにより、キャラクターを床に合わせて"
"歩かせることが可能になります。また、ムービー場面においても、正確に物体に触れ"
"させられるようになります。"

msgid ""
"When playing back the animation in Godot, it is possible to select this bone "
"as the *root motion track*. Doing so will cancel the bone transformation "
"visually (the animation will stay in place)."
msgstr ""
"Godot内でアニメーションを再生するときは、このボーンを *ルート・モーション ト"
"ラック* に指定することができます。そうすると、そのボーンの見た目の変化は打ち"
"消されます (アニメーションはそのまま)。"

msgid ""
"Afterwards, the actual motion can be retrieved via the :ref:`AnimationTree "
"<class_AnimationTree>` API as a transform:"
msgstr ""
"そのあと、実際のモーションは\\ :ref:`AnimationTree <class_AnimationTree>` API"
"からトランスフォームとして取得します:"

msgid ""
"This can be fed to functions such as :ref:`KinematicBody.move_and_slide "
"<class_KinematicBody_method_move_and_slide>` to control the character "
"movement."
msgstr ""
"これを\\ :ref:`KinematicBody.move_and_slide "
"<class_KinematicBody_method_move_and_slide>`\\ などの関数に渡すことで、キャラ"
"クターの動きをコントロールできます。"

#, fuzzy
msgid ""
"There is also a tool node, ``RootMotionView``, that can be placed in a scene "
"and will act as a custom floor for your character and animations (this node "
"is disabled by default during the game)."
msgstr ""
"また、ツールノードとして\\ ``RootMotionView``\\ があり、シーン中に置くことで"
"キャラクターとアニメーション用のフロアが表示されます (通常このノードはゲーム"
"中は無効にされます)。"

msgid "Controlling from code"
msgstr "コードからコントロールする"

msgid ""
"After building the tree and previewing it, the only question remaining is "
"\"How is all this controlled from code?\"."
msgstr ""
"ツリーを作成してプレビューしたら、最後に残る質問は「これを全部コードからコン"
"トロールする方法は？」です。"

#, fuzzy
msgid ""
"Keep in mind that the animation nodes are just resources and, as such, they "
"are shared between all instances using them. Setting values in the nodes "
"directly will affect all instances of the scene that uses this "
"``AnimationTree``. This is generally undesirable, but does have some cool "
"use cases, e.g. you can copy and paste parts of your animation tree, or "
"reuse nodes with a complex layout (such as a state machine or blend space) "
"in different animation trees."
msgstr ""
"注意していただきたいのは、アニメーション ノードはリソースであり、したがって、"
"すべてのインスタンス間で共有されます。ノードの値を直接変更すると、この\\ "
"``AnimationTree``\\ を使用するシーンにある、すべてのインスタンスも影響を受け"
"ます。しかし、これにはクールな応用方法もあります。例えば、アニメーションツ"
"リーの一部をコピー＆ペーストできますし、(ステートマシンやブレンドスペースのよ"
"うな)複雑なレイアウトのノードを、異なるアニメーションツリー間で再利用できま"
"す。"

msgid ""
"The actual animation data is contained in the ``AnimationTree`` node and is "
"accessed via properties. Check the \"Parameters\" section of the "
"``AnimationTree`` node to see all the parameters that can be modified in "
"real-time:"
msgstr ""
"実際のアニメーション データは\\ ``AnimationTree``\\ ノードに格納されており、"
"プロパティを通じてアクセスします。\\ ``AnimationTree``\\ の Parameters セク"
"ションに、リアルタイムで変更できるパラメーターが全てあるので確認してみてくだ"
"さい:"

#, fuzzy
msgid ""
"This is handy because it makes it possible to animate them from an "
"``AnimationPlayer``, or even the ``AnimationTree`` itself, allowing the "
"realization of very complex animation logic."
msgstr ""
"これらは\\ ``AnimationPlayer``\\ や、\\ ``AnimationTree``\\ 自身からすらもア"
"ニメーション化できるので便利です。これで非常に複雑なアニメーション ロジックを"
"実現できます。"

msgid ""
"To modify these values from code, the property path must be obtained. This "
"is done easily by hovering the mouse over any of the parameters:"
msgstr ""
"これらの値をコードから変更する場合は、プロパティ パスを知る必要があります。そ"
"れには、パラメーターの上にマウスをホバーするだけです。"

msgid "Which allows setting them or reading them:"
msgstr "そうすれば、それらを設定したり読み込めます:"

msgid "State machine travel"
msgstr "ステートマシン travel"

#, fuzzy
msgid ""
"One of the nice features in Godot's ``StateMachine`` implementation is the "
"ability to travel. The graph can be instructed to go from the current state "
"to another one, while visiting all the intermediate ones. This is done via "
"the A\\* algorithm. In the absence of any viable set of transitions starting "
"at the current state and finishing at the destination state, the graph "
"teleports to the destination state."
msgstr ""
"Godotの\\ ``StateMachine``\\ 実装にあるナイスな機能のひとつは、travel (移動)"
"です。現在のステートからの移動を指示すると、グラフは中間のものを全て通ってか"
"ら、別のステートへと移ります。これはA\\* アルゴリズムにて行われます。"

msgid ""
"To use the travel ability, you should first retrieve the :ref:"
"`AnimationNodeStateMachinePlayback "
"<class_AnimationNodeStateMachinePlayback>` object from the ``AnimationTree`` "
"node (it is exported as a property)."
msgstr ""
"travel機能を使うには、まず\\ ``AnimationTree``\\ ノードから\\ :ref:"
"`AnimationNodeStateMachinePlayback "
"<class_AnimationNodeStateMachinePlayback>` オブジェクトを取得します (プロパ"
"ティのひとつ)。"

msgid ""
"Once retrieved, it can be used by calling one of the many functions it "
"offers:"
msgstr "取得したら、その多くの関数の中からひとつ呼び出せば使えます:"

msgid ""
"The state machine must be running before you can travel. Make sure to either "
"call ``start()`` or choose a node to **Autoplay on Load**."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
