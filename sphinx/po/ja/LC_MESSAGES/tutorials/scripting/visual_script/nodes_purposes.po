# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Nodes and terminology"
msgstr "ノードと用語"

msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"続行する前に、*ノード* の用語を注意して使用する必要があります。 *ビジュアルス"
"クリプトノード* (または通常は *ノード* )を参照する場合、このテキストはグラフ"
"の一部である線で接続する小さなボックスを参照します。 *シーンノード* を参照す"
"ると、シーンを構成する要素 (ツリーの一部) が参照されます。名前は似ています"
"が、機能は違います。ここで *ノード* を参照する場合、特に指定しないかぎり、 *"
"ビジュアルスクリプトノード* が参照されることを意味します。"

msgid "Node properties"
msgstr "ノード・プロパティ"

msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"ほとんどのビジュアルスクリプト実装と同様に、各ノードには編集可能なプロパティ"
"があります。しかし、Godot では、読みやすさのために編集可能なコントロールを使"
"用してノードが肥大化しないようにしています。"

msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""
"ノードは必要な情報を文字で表示していますが、しかし編集は\\ *インスペクタ*\\ "
"を通じて行います。編集するには、ノードを選択してから\\ *インスペクタ*\\ 内に"
"あるプロパティを編集してください。"

msgid "Ports and connections"
msgstr "ポートおよび接続"

msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Godotビジュアルスクリプティングでのプログラミングは、各関数内の *Nodes* およ"
"び *Port Connections* を介して行われます。"

msgid "Ports"
msgstr "ポート"

msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Godot ビジュアル スクリプティングのノードには *Ports* があります。これらは"
"ノードの左右に表示され、 *Connections* を作成するために使用できるエンドポイン"
"トです:*Ports* には *Sequence* と *Data* の 2 種類があります。"

msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""
"\\ *シーケンス・ポート* は、操作が実行された後の状態を示しています。通常、 *"
"ノード* が処理を終えると、右のポートから次のノードへ処理が移ります。もし何も"
"接続されていないときは、関数はそこで終えるか、もしくは他の *シーケンス・ポー"
"ト* が試されるでしょう(ノードによります)。これにより、白い線を追うことで関数"
"内での処理の流れをたどることができます。すべての *ノード* が *シーケンス・"
"ポート* を持っているわけではありません。事実、ほとんどにはありません。"

msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"\\ *データ・ポート* には、型指定された値が含まれています。型には、ブール値、"
"整数、文字列、Vector3、配列、オブジェクトノード、シーンノードなど、任意の通常"
"のGodot型を指定できます。ノードの右側にある *データ・ポート* は出力と見なさ"
"れ、左側のポートは入力です。それらを接続すると、次のノードに情報が流れるよう"
"になります。"

msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"ただし、すべての *データ・ポート* タイプの間に、互換性と接続許可が有るわけで"
"はありません。 それぞれのタイプには異なる表現があるので、色とアイコンに特に注"
"意を払ってください:"

msgid "Connections"
msgstr "接続"

msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""
"接続は比較的簡単な作業です。 *出力ポート* を *入力ポート* に向かってドラッグ"
"します。"

msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"切断にはもう少し練習が必要です。 *データ・ポート* での切断は、 *入力* 側から"
"離れる様にドラッグして行いますが、 *シーケンス・ポート* の場合は、 *出力* 側"
"をドラッグして行います。"

msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""
"この操作手順の違いを最初は奇妙に思えるかもしれませんが、 *データ・ポート* の"
"接続は 1:N (1つの出力ポートを多くの入力に接続できる)、 *シーケンス・ポート* "
"の接続は N:1 (多くのシーケンス出力が単一の入力に接続できる) であるために発生"
"します。"

msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"空の領域(ドラッグして接続しますが、空白領域では押しません)への接続もコンテキ"
"ストに依存し、最も一般的な操作のリストを提供します。シーケンスの場合は、条件"
"ノードになります:"

msgid "While, for data, a contextual set/get/call menu will open:"
msgstr "データの場合、コンテキスト set/get/call メニューが開きます:"

msgid "Adding nodes"
msgstr "ノードの追加"

msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"ついに!楽しいところに着きました!ただし、各タイプのノードの機能を詳しく説明す"
"る前に、ノードが最も一般的に追加および処理される方法について簡単に説明しま"
"す。"

msgid "Accessing scene nodes"
msgstr "シーンノードへのアクセス"

msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"最も一般的なタスクの 1 つは、シーンツリーノードにアクセスすることです "
"(*Visual Script Nodes* と間違えないようにします)。シーン ツリーからドラッグし"
"てキャンバスにドロップすると、このノードで *メソッド* (*member function* と呼"
"ばれることもあります)を呼び出すように求めます。"

msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"ほとんどの場合、プロパティへのアクセスが必要ですが(詳細は後述)、場合によって"
"は *calling methods* も便利です。メソッドは、オブジェクトに対して特定のアク"
"ションを実行します。この場合、マウスポインタをコントロールのローカル座標の位"
"置にワープさせることができます。もう1つの一般的な使用例は、 *queue_free* メ"
"ソッドを使用してノードを削除のためにキューに入れる場合です。"

msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"これは、編集中のシーンのいずれかのノードに *Visual Script* が含まれている場合"
"にのみ機能することに注意してください。それ以外の場合は、警告が表示されます。"

msgid "Accessing scene node properties"
msgstr "シーンノードのプロパティへのアクセス"

msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"これは、ビジュアルスクリプティングで *Scene Nodes* を編集する最も一般的な方法"
"です。 *Scene Tree* から *Scene Node* を選択し、インスペクタに移動して、編集"
"するプロパティ(値では\\ *ありません*)の *Name* を探し、キャンバスにドラッグし"
"ます:"

msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""
"その結果、 *データ・ポート* に書き込むことで、この値をスクリプトから変更でき"
"ます。"

msgid ""
"If instead reading this value is desired, drag the node again but hold :kbd:"
"`Ctrl` (or :kbd:`Cmd` on macOS). This will create a getter:"
msgstr ""
"代わりにこの値を読み取る必要が有る場合は、\\ :kbd:`Ctrl` (またはmacOSでは :"
"kbd:`Cmd`)を押したままノードをもう一度ドラッグします。これによりゲッター"
"(getter)が作成されます:"

msgid "In this case, the value can be read from a *Data Port*."
msgstr "この場合、値は *データ・ポート* から読み取ることができます。"

msgid "Variables"
msgstr "変数"

msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"変数は、値を保持できるスクリプトにローカルなメモリコンテナです。この値は、前"
"の手順で説明した方法を使用して、スクリプトの任意の関数または他のスクリプトか"
"ら読み取ることができます。"

msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"変数を追加するには、メンバーパネルの *Variables* セクションの \"+\" ボタンを"
"押します。新しい変数をダブルクリックして名前を変更します:"

msgid "Right-clicking the variable allows you to configure its properties:"
msgstr "変数を右クリックすると、そのプロパティを設定できます:"

msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""
"上記からわかるように、変数の型と初期値、およびいくつかのプロパティヒントを変"
"更できます。 「エクスポート」オプションを選択すると、ノードを選択するときにこ"
"の変数がインスペクタに表示されます。これにより、前の手順で説明した方法で他の"
"スクリプトでも使用できるようになります。"

msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""
"スクリプトで変数を使用するには、キャンバスにドラッグしてゲッターを作成します:"

msgid "Likewise, hold :kbd:`Ctrl` (or :kbd:`Cmd` on macOS) to drop a setter:"
msgstr ""
"同様に、\\ :kbd:`Ctrl` (またはmacOSの場合 :kbd:`Cmd`) を押したまま、セッター"
"(setter)をドロップします:"

msgid "Signals"
msgstr "シグナル"

msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"スクリプトで独自のシグナルを作成して使用することもできます。このためには、前"
"の手順で変数に対して行ったのと同じ手順を実行します。ただし、 *Signals* は除き"
"ます:"

msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr ""
"右クリックメニューからシグナルを編集して、引数をカスタマイズすることもできま"
"す:"

msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""
"作成したシグナルは、組み込み済ノードのシグナルとともにインスペクタに表示され"
"ます。これにより、別の *Scene Node* の別のスクリプトから接続できます。"

msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr ""
"最後に、シグナルを発信するには、単にそれをキャンバスにドラッグするだけです:"

msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""
"シグナルの発信はシーケンス操作なので、シーケンス ポートから発信される必要があ"
"ります。"

msgid "Adding more nodes"
msgstr "更なるノードの追加"

msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"基本について説明したところで、キャンバスで使用できる大量のユーティリティノー"
"ドについて説明しましょう。メンバーパネルの下に、使用可能なすべてのノードタイ"
"プの一覧が存在します:"

msgid ""
"Pressing :kbd:`Ctrl + F` (or :kbd:`Cmd + F` on macOS) allows you to search "
"the list."
msgstr ""
":kbd:`Ctrl + F` (またはmacOSでは :kbd:`Cmd + F`) を押すと、リストを検索できま"
"す。"

msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"いずれもシーンにドラッグできます。ノードとは異なり(例えば、インスペクタからプ"
"ロパティをドラッグすると、自動的に編集されるノードにコンテキストを設定しま"
"す)、これらは \"contextual\" 情報なしで追加されるので、手動で行う必要がありま"
"す。"

msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"各ノードの内容については、クラス参照を確認できることに注意してください。前述"
"のとおり、ノードの種類の概要を次に示します:"

msgid "Constants"
msgstr "定数"

msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"定数ノードは、時間の経過と同じ値として役立つ値を提供するノードです。ほとんど"
"の場合、整数または浮動小数点数です。"

msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""
"1 つ目は \"定数\" で、整数(例:42)から文字列(例:\"Hello!\")まで、任意の型の任"
"意の値を定数として選択できます。一般に、 *データ・ポート* のデフォルトの入力"
"値のために、あまりこのノードを使う事はありませんが、存在することを知っておく"
"と便利です。"

msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"2つ目は、Godotのグローバル型の定数の長いリストを含むGlobalConstantノードで"
"す。そこには、キー名、ジョイスティックやマウスボタンなどを参照するためにいく"
"つかの有用な定数を見つけることができます。"

msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr "3つ目は、PI、E などの一般的な数学定数を提供する MathConstant です。"

msgid "Data"
msgstr "データ"

msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"データノードは、あらゆる種類の情報へのアクセスを扱います。Godotの情報は、これ"
"らのノードを介してアクセスされますので、使用する最も重要なものの一部であり、"
"かなり多様です。"

msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr "ここには多くの種類のノードがあるため、簡単に説明します:"

msgid "Action"
msgstr "アクション(Action)"

msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"アクションノードは、デバイスからの入力を処理する際に不可欠です。アクションの"
"詳細については、(@TODO ACTION TUTE LINK)を読むことができます。次の例で"
"は、\"move_right\" アクションを押すと、コントロールが右に移動します。"

msgid "Engine Singleton"
msgstr "エンジン・シングルトン(EngineSingleton)"

msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""
"エンジンシングルトンはグローバルインターフェイスです(つまり参照なしでアクセス"
"できることを意味します。シーンノードとは異なり、常に使用可能です)。これらには"
"いくつかの目的がありますが、一般に、低レベルのアクセスまたはOS関連のアクセス"
"に役立ちます。"

msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""
"空のスペースに接続をドラッグすると、関数を呼び出したり、プロパティを設定/取得"
"したりするのに役立ちます:"

msgid "Local Variables"
msgstr "ローカル変数(LocalVarSet/LocalVarGet)"

msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""
"これらは、グラフの一時的なストレージとして使用できるノードです。それらを使用"
"するときは、すべて同じ名前と型を使用し、同じメモリを参照するようにしてくださ"
"い。"

#, fuzzy
msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced setter (setting requires a sequence port)."
msgstr ""
"上に示すように、単純なゲッターとシーケンス化されたゲッター(設定にはシーケンス"
"ポートが必要)の2つのノードがあります。"

msgid "Scene Node"
msgstr "シーンノード(Scene Node)"

msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""
"これはツリー内のノードへの参照にすぎませんが、実際のノードをシーン ツリーから"
"キャンバスにドラッグして、このノードを使用する方が簡単です(これにより、ノード"
"の作成と設定が行われます)。"

msgid "Self"
msgstr "自己"

msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""
"まれに、このシーンノードを引数として渡すことが望ましい場合があります。 これを"
"使用して、関数を呼び出し、プロパティを設定/取得したり、ノードをシーンツリーか"
"らキャンバスにドラッグしたり(または、スクリプトを持っているノードをイベント化"
"したり)することができます。"

msgid "SceneTree"
msgstr "シーンツリー"

msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""
"このノードは、アクティブなシーンを含むシーンツリーを参照するため、シングルト"
"ンノードに似ています。 ただし、SceneTreeは、ノードがシーン内にありアクティブ"
"な場合にのみ機能します。そうでない場合、ノードにアクセスするとエラーが返され"
"ます。"

msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""
"SceneTreeでは、ストレッチオプションの設定、グループの呼び出し、タイマーの作"
"成、または別のシーンの読み込みなど、多くの低レベルの処理が可能です。(ビジュア"
"ルスクリプトに)慣れるには良いクラスです。"

msgid "Preload"
msgstr "プリロード(Preload)"

msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""
"これは、GDScriptのpreload()と同じ機能を実行します。このリソースをロードし、使"
"用可能な状態に保持します。ノードをインスタンス化するのではなく、目的のリソー"
"スをファイルシステムドックからキャンバスにドラッグする方が簡単です。"

msgid "Resource Path"
msgstr "リソース パス"

msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""
"このノードは、選択可能なリソースへのパスを含む文字列を取得する単純なヘルパー"
"です。これは、ディスクからデータをロードする関数で便利です。"

msgid "Comment"
msgstr "コメント(Comment)"

msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""
"コメント ノードは、他のノードの周りに配置するサイズを変更できるノードとして機"
"能します。フォーカスを取得しようとしたり、選択時にトップに持ち込まれたりしま"
"せん。また、テキストを書き込むためにも使用できます。"

msgid "Flow Control"
msgstr "フロー制御"

msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""
"フロー制御ノードを使用すると、通常は特定の条件に応じて、実行によって異なる分"
"岐を取ることができます。"

msgid "Condition"
msgstr "条件"

msgid ""
"This is a simple node that checks a bool port. If ``true``, it will go via "
"the \"true\" sequence port. If ``false``, the second. After going for either "
"of them, it goes via the \"done\" port. Leaving sequence ports disconnected "
"is fine if not all of them are used."
msgstr ""
"これはboolポートをチェックする簡単なノードです。 もし ``true`` なら、それは "
"\"true\" シーケンスポートを経由します。``false`` の場合は2番目のシーケンス"
"ポートです。 それらのいずれかに行った後、\"done\" ポートを経由します。 すべて"
"のポートが使用されていない場合は、シーケンスポートを切断したままにしても問題"
"ありません。"

msgid "Iterator"
msgstr "イテレータ"

msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""
"Godotの一部のデータ型(配列、辞書など)は反復処理が可能です。つまり、それが持つ"
"各要素に対し、ちょっとしたコードを実行できることを意味します。"

msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""
"イテレータノードはすべての要素を通過し、それぞれについて、 \"each\" シーケン"
"スポートを経由して、 \"elem\" データポートで要素を利用できるようにします。"

msgid "When done, it goes via the \"exit\" sequence port."
msgstr "完了すると、 \"exit\" シーケンスポートを経由します。"

msgid "Return"
msgstr "Return(戻り値)"

msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""
"一部の関数は値を返すことができます。一般に、仮想ノードの場合、GodotはReturn"
"ノードを追加します。Returnノードは、関数を強制的に終了します。"

msgid "Sequence"
msgstr "シーケンス"

msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""
"このノードは、主にグラフを整理するのに役立ちます。順番にシーケンス ポートを呼"
"び出します。"

msgid "TypeCast"
msgstr "型キャスト(TypeCast)"

msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""
"これは使用頻度の高い便利なノードです。これを使用して、引数または他のオブジェ"
"クトを必要な型にキャストできます。その後、オブジェクトの出力をドラッグして完"
"全に完成させることもできます。"

msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""
"スクリプトにキャストすることも可能で、完全なスクリプトのプロパティと関数を使"
"用できます:"

msgid "Switch"
msgstr "スイッチ"

msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr "スイッチノードは条件ノードに似ていますが、同時に多くの値に一致します。"

msgid "While"
msgstr "While"

msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""
"これは、よりプリミティブな形式の反復です。 \"cond\" データポートの条件が満た"
"されている限り、 \"repeat\" シーケンス出力が呼び出されます。"

msgid "Functions"
msgstr "関数"

msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""
"関数(Function)は単純なヘルパーであり、ほとんどの場合確定的です。入力としてい"
"くつかの引数を取り、出力を返します。それらはほとんどシーケンスされません。"

msgid "Built-In"
msgstr "ビルトイン"

msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from :ref:`GDScript<class_@GDScript>`. Most of them are mathematical "
"functions, but others can be useful helpers. Make sure to take a look at the "
"list at some point."
msgstr ""
"組み込みヘルパーのリストがあります。リストは、\\ :ref:"
"`GDScript<class_@GDScript>`\\ のものとほとんど同じです。それらのほとんどは数"
"学関数ですが、他のものは便利なヘルパーになります。時間が出来たらリストを必ず"
"確認してください。"

msgid "By Type"
msgstr "タイプ別"

msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""
"これらは、基本的な型で使用できるメソッドです。たとえば、ドット積が必要な場合"
"は、Vector3カテゴリの代わりに \"dot\" を検索できます。ほとんどの場合、ノード"
"のリストを検索するだけで、より高速になります。"

msgid "Call"
msgstr "コール(Call)"

msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""
"これは汎用的な呼び出しノードです。直接使用されることはめったにありませんが、"
"既に構成されているノードの空の領域にドラッグすることによって使用されます。"

msgid "Constructors"
msgstr "定数"

msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""
"これらはすべて、Godotの基本データ型を作成するために必要な関数です。たとえば、"
"3つのfloatからVector3を作成する必要がある場合は、コンストラクターを使用する必"
"要があります。"

msgid "Destructor"
msgstr "デストラクター(Destructor)"

msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""
"これは、コンストラクターの反対です。任意の基本型(Vector3等)をサブ要素に分離で"
"きます。"

msgid "Emit Signal"
msgstr "シグナルの出力(EmitSignal)"

msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""
"任意のオブジェクトからシグナルを出力します。一般に、キャンバスにシグナルをド"
"ラッグする方が適切に機能するので、あまり役に立ちません。"

msgid "Get/Set"
msgstr "取得/設定(Get/Set)"

msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""
"汎用的な取得(Getter)/設定(Setter)ノード。インスペクタからプロパティをドラッグ"
"すると、ドロップ時に設定されて表示されるので、より適切に動作します。"

msgid "Wait"
msgstr "待機(Wait)"

msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""
"Waitノードは、何かが起こるまで関数の実行を中断します(実際には、多くのフレーム"
"が再開されるまで渡すことができます)。既定のノードを使用すると、フレームが通過"
"するまで待機したり、固定フレームまたは実行が再開されるまで一定の時間を待機し"
"たりできます。"

msgid "Yield"
msgstr "Yield"

msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""
"このノードはスクリプトの実行を完全に中断し、関数は実行の再開に使用できる値を"
"返します。"

msgid "Yield Signal"
msgstr "譲渡・シグナル待ち(Yield Signal)"

msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr "Yieldと同じですが、特定のシグナルが放出されるまで待ちます。"

msgid "Index"
msgstr "インデックス"

msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""
"汎用インデックス演算子。頻繁に使用されるわけではありませんが、万が一に備えて"
"用意してあります。"

msgid "Operators"
msgstr "オペレーター"

msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""
"これらは主に加算、乗算、比較などの汎用演算子です。デフォルトでは、これらはほ"
"とんどすべてのデータ型を受け入れます(供給された型が演算子によって期待されるも"
"のと一致しない場合、実行時にエラーをスローします)。エラーをより迅速にキャッチ"
"し、グラフを読みやすくするために、常にオペレーターに適した型を設定することを"
"お勧めします。"

msgid "Expression Node"
msgstr "式ノード(Expression)"

msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""
"演算子の中で、 *Expression* ノードが最も強力です。うまく使用すれば、数学的"
"だったりまたはロジック重いビジュアルスクリプトを大幅に簡素化できます。任意の"
"式を入力すると、リアルタイムで実行されます。"

msgid "Expression nodes can:"
msgstr "式ノードは次のことができます:"

msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""
"カスタム入力に基づいて数学式と論理式を実行します (例: \"a*5+b\"、aとbはカスタ"
"ム入力です):"

msgid "Access local variables or properties:"
msgstr "ローカル変数またはプロパティにアクセスします:"

msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as ``sin()``, ``cos()``, ``print()``, as well as constructors, such as "
"``Vector3(x, y, z)``, ``Rect2(...)``, etc.:"
msgstr ""
"Sin()、cos()、print()など、GDScriptで使用できる既存の組み込み関数のほとんど"
"と、Vector3(x,y,z)、Rect2(..)などのコンストラクターを使用できます:"

msgid "Call API functions:"
msgstr "API関数の呼び出し:"

msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr "処理順序を考慮する場合は、シーケンスモードを使用してください:"

msgid "Translation status"
msgstr "翻訳ステータス"
