# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Getting started with Visual Scripting"
msgstr "ビジュアル・スクリプト入門"

msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""
"Godotのすべてのものと同様に、現在のワークフローにはうまく適合しない可能性があ"
"るサードパーティ製のソリューションをコピーまたは統合するよりも、優れた経験を"
"優先します。このため、この機能がエンジンで最もうまく動作すると思われる独自の"
"バージョンを作成しました。"

msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr ""
"Godotでは、 Editorタブでビジュアルスクリプトを通常のスクリプトとスムーズに連"
"携させることができます"

msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""
"実際、ビジュアル・スクリプトはGodotと非常によく統合されているため、バージョン"
"3.0でのみ追加されたとは信じがたいほどです。これは編集時に残りのGodotパネルと"
"ドックがパレットのように機能し、そこからあらゆる種類の情報をスクリプトキャン"
"バスにドラッグアンドドロップできるためです:"

msgid "Creating a script"
msgstr "スクリプトの作成"

msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""
"スクリプトの作成は他のスクリプト言語と同じように機能します。シーン内の任意の"
"ノードを選択し、シーンツリードックの右上隅にある \"New Script\" ボタンを押し"
"ます:"

msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""
"開いたら、ドロップダウンリストからスクリプトタイプ \"Visual Script\" を選択す"
"る必要があります。スクリプトの拡張子は \".vs\" にする必要があります(Visual "
"Scriptの場合)。"

msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr ""
"最後にスクリプトエディタが開き、ビジュアル・スクリプトの編集を開始できます:"

msgid "Adding a function"
msgstr "関数の追加"

msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""
"他のビジュアルスクリプティング実装とは異なり、Godotのビジュアルスクリプティン"
"グは関数に大きく基づいています。これは、他のスクリプトエンジンと同じインター"
"フェイスを使用してエンジンと通信するために発生します。Godotでは、スクリプトイ"
"ンターフェースは汎用的で、すべての実装はそれに準拠しています。"

msgid "A function is an individual canvas with nodes connected."
msgstr "関数は、ノードが接続されている個々のキャンバスです。"

msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr ""
"1つのスクリプトに多数の関数を含めることができ、それぞれに独自のキャンバスがあ"
"り、より多くの編成が可能になります。"

msgid "There are three main ways to add functions in a script:"
msgstr "スクリプトに関数を追加するには、主に3つの方法があります:"

msgid "Overriding a virtual function"
msgstr "仮想関数のオーバーライド"

msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""
"Godotのほとんどの種類のノードやその他の種類のオブジェクトには仮想関数が含まれ"
"ています。これらは、何かが起こったときに呼び出され(コードを実行する)、参照で"
"調べることができる関数です。メンバーパネルの \"Override\" アイコンを押すと、"
"仮想関数が一覧表示されます:"

msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""
"次の例ではノードがロードされて実行中のシーンに追加されたときに関数が実行され"
"ます。このため_ready()仮想メソッドはオーバーライドされます:"

msgid "Finally, a canvas appears for this function, showing the override:"
msgstr "最後に、この関数のキャンバスが表示され、オーバーライドが表示されます:"

msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr ""
"一部の関数は値を返すことを期待しているので、そのような値を提供することを想定"
"しているリターンノードも追加します:"

msgid "Connecting a signal to a function"
msgstr "シグナルの関数への接続"

msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""
"ツリー内のノードは何かが起こるとシグナルを発します。 Godotはあらゆる種類のも"
"のにシグナルを使用します。典型的な例は、実際に押されたときに \"pressed\" シグ"
"ナルを発するボタンです。"

msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""
"このためにはノードを選択して[Node]タブを開く必要があります。これでシグナルを"
"調べることができます。表示されたら、 \"pressed\" シグナルを接続します:"

msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""
"これで接続ダイアログが開きます。 このダイアログでは、シグナルが接続されるノー"
"ドとシグナルを受信する関数を選択する必要があります:"

msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr ""
"これが正しく行われると、スクリプト内に新しい関数が作成され、シグナルが自動的"
"にその関数に接続されます:"

msgid "Creating a function manually"
msgstr "関数の手動作成"

msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""
"関数を作成する最後の方法は手動でそれをすることです。一般的には、これが必要な"
"時はさほどありません。カスタム関数は、別の(または同じ)スクリプトがそれらを手"
"動で呼び出すときに機能します。これの主な使用例は、大きな関数をいくつかの管理"
"しやすいチャンクに分割し、ビジュアルコードを再利用することです。"

msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr ""
"手動で関数を作成するには、大きな \"Plus\" ボタンを押すと、新しい関数がデフォ"
"ルトの名前で追加されます:"

msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr ""
"新しい関数が追加され、名前をダブルクリックするだけで名前を変更できます:"

msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""
"この関数が取得できる \"arguments\" (この関数を呼び出すときに渡す値)を編集する"
"には、関数ノードをクリックしてインスペクタをチェックするだけです:"

msgid "More on that will be explained later in this document."
msgstr "詳細については、このドキュメントの後半で説明します。"

msgid "Translation status"
msgstr "翻訳ステータス"
