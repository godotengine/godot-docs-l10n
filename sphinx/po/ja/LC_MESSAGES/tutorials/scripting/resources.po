# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Resources"
msgstr "リソース"

msgid "Nodes and resources"
msgstr "ノードとリソース"

msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""
"ここまでのチュートリアルではGodotの、エンジンのほとんどの機能が頼りにしてい"
"る、\\ :ref:`Node <class_Node>`\\ (ノード)クラスについて主に紹介してきまし"
"た。もうひとつ、同じくらい重要なデータ型は\\ :ref:`Resource "
"<class_Resource>`\\ (リソース)です。"

msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"*Node* は、機能を提供します。例えばスプライトや3Dモデルの表示、物理演算、ユー"
"ザーインターフェースの配置などです。一方、\\ **Resource**\\ は\\ **データの格"
"納**\\ に使います。それ自身はなにもしませんが、代わりにノードが、データの入っ"
"たリソースを使用します。"

msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ``."
"tscn`` or an ``.scn`` file), an image, a script... Here are some "
"``Resource`` examples: :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`."
msgstr ""
"Godotが保存したり、ディスクから読み込んだりするものは、すべてリソースです。こ"
"れは、シーン(.tscnや.scnファイル)や、画像、スクリプトなどが該当します。リソー"
"スの例は、\\ :ref:`Texture <class_Texture>`\\ 、\\ :ref:`Script "
"<class_Script>`\\ 、\\ :ref:`Mesh <class_Mesh>`\\ 、\\ :ref:`Animation "
"<class_Animation>`\\ 、\\ :ref:`AudioStream <class_AudioStream>`\\ 、\\ :ref:"
"`Font <class_Font>`\\ 、\\ :ref:`Translation <class_Translation>`\\ などで"
"す。"

msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"エンジンがリソースをディスクから読み込む際に、\\ **読み込むのは一度きり**\\ "
"です。もしメモリ上にすでにリソースのコピーがあれば、読み込む代わりに毎回その"
"コピーを返します。リソースはデータのみを含むので、重複させても意味はないので"
"す。"

msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"ノードとリソースにかかわらず、すべてのオブジェクトは、自身のプロパティをエク"
"スポートできます。プロパティには、String、整数(int)、Vector2など、さまざまな"
"種類がありますが、これらすべての型はリソースになることができます。つまり、"
"ノードとリソースはいずれも、他のリソースをプロパティとして持てるのです。"

msgid "External vs built-in"
msgstr "外部と組み込みの比較"

msgid "There are two ways to save resources. They can be:"
msgstr "リソースを保存する方法はふたつあります。それは:"

msgid "**External** to a scene, saved on the disk as individual files."
msgstr "シーンの\\ **外部**\\ 。個別のファイルとしてディスクに保存。"

msgid ""
"**Built-in**, saved inside the ``.tscn`` or the ``.scn`` file they're "
"attached to."
msgstr "**内蔵**\\ 。使用する\\*.tscnあるいは\\*.scnファイルの中に保存。"

msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"具体的には、\\ :ref:`Sprite <class_Sprite>`\\ ノードの\\ :ref:`Texture "
"<class_Texture>`\\ を以下に示します:"

msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr ""
"リソースのプレビューをクリックすると、リソースのプロパティを表示して編集でき"
"るようになります。"

msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"Pathプロパティはリソースの元々の場所を表しています。この例の場合は、元は "
"``robi.png`` と名付けられたPNG画像です。このように、元がファイルであれば、外"
"部リソースになります。Pathを消去するか、あるいはこの場所にない場合は、内部リ"
"ソースになります。"

msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path ``\"res://robi.png\"`` "
"and save, Godot will save the image inside the ``.tscn`` scene file."
msgstr ""
"リソースの内部と外部の切り替えは、シーンを保存するときに行われます。上記の例"
"の場合、もしパス ``\"res://robi.png\"`` を消去してから保存すると、Godotは画像"
"を .tscn シーンファイルの内部に保存します。"

msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"もし内部リソースを保存した場合でも、複数のシーンをインスタンス化したときは、"
"エンジンがそのコピーを読み込むのは一度だけです。"

msgid "Loading resources from code"
msgstr "コードからリソースを読み込む"

msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"コードにてリソースを読み込む方法は、ふたつあります。ひとつ目は ``load()`` 関"
"数で、いつでも使えます:"

msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""
"もうひとつは ``preload()`` です。この関数は ``load()`` とは違い、コンパイル時"
"にファイルをディスクから読み込んでロードします。そのため、パスが変数の場合は"
"preloadは呼べません。パスは定数の文字列である必要があります。"

msgid "Loading scenes"
msgstr "シーンの読み込み"

msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""
"シーンもまたリソースですが、しかし注意点があります。シーンは、\\ :ref:"
"`PackedScene <class_PackedScene>`\\ 型のリソースとしてディスクに保存されま"
"す。リソースの内部にシーンが入れ込まれるのです。"

msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_method_instance>` method."
msgstr ""
"シーンのインスタンスを得るには、\\ :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>`\\ メソッドを使う必要があります。"

msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"このメソッドは、シーンの階層どおりにノードを作成し、それらを設定してから、そ"
"のシーンのルートノードを返します。これは他のノードの子にすることができます。"

msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` function is fast, you can create new "
"enemies, bullets, effects, etc. without having to load them again from disk "
"each time. Remember that, as always, images, meshes, etc. are all shared "
"between the scene instances."
msgstr ""
"この方法には、いくつかの利点があります。\\ :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>`\\ メソッドは高速なので、新しい敵、弾丸、"
"エフェクトなどを、ディスクから再び読み出すことなく作成できます。覚えていただ"
"きたいのは、ほとんどの場合、画像やメッシュなどは全て、シーンのインスタンス間"
"で共有されます。"

msgid "Freeing resources"
msgstr "リソースの解放"

msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""
"``リソース(Resource)`` が使われなくなったときは、自動的に解放されます。ほとん"
"どの場合、リソースはノードに格納されているので、ノードを解放した際には、それ"
"が持つリソースも同様に、他のノードに使用されていない限り、すべてエンジンに"
"よって解放されます。"

msgid "Creating your own resources"
msgstr "独自のリソースを作成"

msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (\\*.tres, \\*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""
"Godotの他のオブジェクトと同様に、ユーザーはリソースをスクリプト化することもで"
"きます。リソーススクリプトは、オブジェクトプロパティと、シリアル化されたテキ"
"ストまたはバイナリデータ (\\*.tres, \\*.res) との間で、自由に変換できる機能を"
"継承します。また同時に、参照型から参照カウントメモリ管理機能を継承します。"

msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""
"これには、JSON、CSV、カスタムTXTファイルなどの代替となるデータ構造を超える多"
"くの明確な利点があります。これらのアセットは ユーザーがインポートするときに :"
"ref:`Dictionary <class_Dictionary>` (JSON) または :ref:`File <class_File>` と"
"してのみ解析できます。それに対してリソースは\\ :ref:`Object "
"<class_Object>`\\ 、\\ :ref:`Reference <class_Reference>`\\ 、および\\ :ref:"
"`Resource <class_Resource>`\\ 機能の継承によって、際立った利便性があります。"

msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""
"定数を定義できるため、他のデータフィールドまたはオブジェクトの定数は必要あり"
"ません。"

msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""
"プロパティの設定(setter)と取得(getter )用のメソッドを含むメソッドを定義できま"
"す。これにより、基になるデータの抽象化とカプセル化が可能になります。(カプセル"
"化する事によって)リソーススクリプトの構造を変更する必要が発生した場合でも、そ"
"のリソースを使用するゲームをその都度それに合わせて変更する必要が無くなりま"
"す。"

msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""
"シグナルを定義できるため、リソースは管理するデータの変更に対する応答をトリ"
"ガーできます。"

msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""
"プロパティが定義されているため、ユーザーは自分のデータが存在することを100％"
"知っています。"

msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""
"リソースの自動シリアル化と逆シリアル化は、 Godot エンジンの組み込み機能です。"
"ユーザーは、リソース ファイルのデータをインポート/エクスポートするためにカス"
"タム ロジックを実装する必要はありません。"

msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""
"リソースはサブリソースを再帰的にシリアル化することもできるため、ユーザーはさ"
"らに高度なデータ構造を設計できます。"

msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""
"ユーザーは、リソースをバージョン管理に適したテキストファイル(\\*.tres)として"
"保存できます。ゲームをエクスポートすると、Godotはリソースファイルをバイナリ"
"ファイル(\\*.res)としてシリアル化し、読書きの速度と圧縮率を向上させます。"

msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""
"Godotエンジンのインスペクタは、すぐに使用できるリソースファイルをレンダリング"
"および編集します。そのため、多くの場合、ユーザーはデータを視覚化または編集す"
"るためにカスタムロジックを自分で実装する必要はありません。リソースに関するこ"
"の作業を行うには、ファイルシステムドックでリソースファイルをダブルクリックす"
"るか、インスペクタのフォルダアイコンをクリックして、ダイアログでファイルを開"
"きます。"

msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr ""
"基本リソースだけでなく、\\ **その他**\\ のリソースタイプも拡張できます。"

msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr ""
"Godotを使用すると、インスペクタでカスタムリソースを簡単に作成できます。"

msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""
"インスペクタでプレーンなリソースオブジェクトを作成します。これは、スクリプト"
"がその型を拡張可能なら、新たなリソースを派生させる原型にもできます。"

msgid "Set the ``script`` property in the Inspector to be your script."
msgstr "インスペクタで ``script`` プロパティをスクリプトに設定します。"

msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""
"インスペクタにリソーススクリプトのカスタムプロパティが表示されます。これらの"
"値を編集してリソースを保存すると、インスペクタはカスタム プロパティもシリアル"
"化します。インスペクタからリソースを保存するには、インスペクタのツールメ"
"ニュー(右上)をクリックし、「保存」または「名前を付けて保存」を選択します。"

#, fuzzy
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_gdscript_basics_class_name>`, then it streamlines the process. Defining "
"a name for your script alone will add it to the Inspector's creation dialog. "
"This will auto-add your script to the Resource object you create."
msgstr ""
"スクリプトの言語が :ref:`script classes "
"<doc_scripting_continued_class_name>`\\ をサポートしている場合は、この手順が"
"合理化されます。スクリプトの名前を定義するだけで、その名前がインスペクタの作"
"成ダイアログに追加されます。これにより、作成したリソースオブジェクトにスクリ"
"プトが自動的に追加されます。"

msgid "Let's see some examples."
msgstr "いくつかの例を見てみましょう。"

msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""
"リソーススクリプトは、UnityのScriptableObjectsに似ています。インスペクタは、"
"カスタムリソースの組み込みサポートを提供します。ですが、必要に応じて、ユー"
"ザーは独自のコントロールベースのツールスクリプトを設計し、それらを :ref:"
"`EditorPlugin <class_EditorPlugin>` と組み合わせて、データ用のカスタムビジュ"
"アライゼーションとエディタを作成することもできます。"

msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""
"Unreal Engine 4のDataTablesとCurveTablesも、リソーススクリプトを使用して簡単"
"に再現できます。 DataTablesは、カスタム構造体にマッピングされた文字列であり、"
"文字列をセカンダリカスタムリソーススクリプトにマッピングする辞書に似ていま"
"す。"

msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr "辞書の値を単にインライン化する代わりに..."

msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr ""
"スプレッドシートから値の表をインポートして、これらのキーと値のペアを生成す"
"る、または..."

msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""
"エディタ内でビジュアライゼーションを設計し、これらのタイプのリソースを開いた"
"ときにインスペクタに追加する単純なプラグインを作成します。"

msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""
"CurveTablesも同じですが、float値の配列または :ref:`Curve <class_Curve>`/:ref:"
"`Curve2D <class_Curve2D>` リソースオブジェクトにマッピングされます。"

msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""
"リソース ファイル (\\*.tres/\\*.res) は、使用するスクリプトのパスをファイルに"
"格納します。リソース ファイルが読み込まれると、そのスクリプトをフェッチして型"
"の拡張機能として読み込みます。スクリプトでサブクラス、つまりスクリプトの内部"
"クラス (GDScript で ``class`` キーワードを使用するなど) を割り当てようとして"
"も、それは機能しません。Godot は、スクリプト サブクラスのカスタム プロパティ"
"を正しくシリアル化しません。"

msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
"以下の例では、Godotは ``Node`` スクリプトを読み込み、それが ``Resource`` を拡"
"張していないことを確認して、互換性がないタイプなので、スクリプトがリソースオ"
"ブジェクトのロードに失敗したと判断します。"

msgid "Translation status"
msgstr "翻訳ステータス"
