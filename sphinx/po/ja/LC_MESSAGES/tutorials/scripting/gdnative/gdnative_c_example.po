# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDNative C example"
msgstr "GDNative Cの例"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""
"このチュートリアルでは、GDNativeモジュールの作成に最低限必要なものを紹介しま"
"す。これがGDNativeの世界への出発点になるはずです。このチュートリアルの内容を"
"理解することは、この後のすべてを理解するのに役立ちます。"

#, fuzzy
msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."
msgstr ""
"始める前に、以下で説明するサンプルオブジェクトのソースコードを\\ `GDNative-"
"demos repository <https://github.com/GodotNativeTools/GDNative-demos/tree/"
"master/c/SimpleDemo>`_\\ からダウンロードできます。"

msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""
"このサンプルプロジェクトには、コンパイルを少し簡単にするSConstructファイルも"
"含まれていますが、このチュートリアルでは、プロセスを理解するために手動で作業"
"を行います。"

msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""
"\\ :ref:`GDNative <class_GDNative>`\\ を使用すると、\\ :ref:`PluginScript "
"<class_PluginScript>`\\ や\\ :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`\\ などのインターフェースを利用して、Godotに追"
"加する複数のタイプの要素を作成できます。このチュートリアルでは、\\ :ref:"
"`NativeScript <class_NativeScript>`\\ モジュールの作成について見ていきます。 "
"NativeScriptを使用すると、GDScriptファイルを作成するのと同様の方法でCまたはC+"
"+でロジックを作成できます。このGDScriptに相当するCを作成します。"

msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""
"今後のチュートリアルでは、他のタイプのGDNativeモジュールに焦点を当て、各モ"
"ジュールをいつどのように使用するかを説明します。"

msgid "Prerequisites"
msgstr "前提条件"

msgid "Before we start you'll need a few things:"
msgstr "始める前に、いくつかのものが必要です:"

msgid "A Godot executable for your target version."
msgstr "ターゲットバージョンのGodot実行可能ファイル。"

msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""
"Ｃコンパイラ。 Linuxでは、パッケージマネージャーから ``gcc`` または "
"``clang`` をインストールします。 macOSでは、Mac App StoreからXcodeをインス"
"トールできます。 Windowsでは、Visual Studio 2015以降またはMinGW-w64を使用でき"
"ます。"

#, fuzzy
msgid ""
"A Git clone of the `godot-headers repository <https://github.com/godotengine/"
"godot-headers.git>`_: these are the C headers for Godot's public API exposed "
"to GDNative."
msgstr ""
"`godot_headersリポジトリ <https://github.com/GodotNativeTools/"
"godot_headers>`_\\ のGitクローン: これらはGDNative用に公開されているGodotのパ"
"ブリックAPIのCヘッダーです。"

msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""
"次に行う作業については、このGDNativeサンプルプロジェクト専用のフォルダを作成"
"し、そのフォルダ内でターミナルを開いて実行することをお勧めします。"

msgid "This will download the required files into that folder."
msgstr "これにより、必要なファイルがそのフォルダにダウンロードされます。"

#, fuzzy
msgid ""
"If you plan to use Git for your GDNative project, you can also add ``godot-"
"headers`` as a Git submodule."
msgstr ""
"GDNativeプロジェクトにGitを使用する予定がある場合は、Gitサブモジュールとして "
"``godot_headers`` を追加することもできます。"

#, fuzzy
msgid ""
"The ``godot-headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.4``) and ideally actual release (e.g. ``3.4.4-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""
"``godot_headers`` リポジトリにはさまざまなブランチがあります。 Godotが進化す"
"るにつれて、GDNativeも進化します。バージョン間の互換性を維持しようとしていま"
"すが、常にGodotの安定ブランチ(例: ``3.1``)と理想的な実際のリリース(例: "
"``3.1.1-stable``)に一致するヘッダーに対応させたGDNativeモジュールを構築する必"
"要があります。古いバージョンのGodotヘッダーに対応して構築されたGDNativeモ"
"ジュールは、新しいバージョンのエンジンで動作する可能性がありますが、その逆は"
"できません。"

#, fuzzy
msgid ""
"The ``master`` branch of the ``godot-headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""
"``godot_headers`` リポジトリの ``master`` ブランチはGodotの ``master`` ブラン"
"チと一致しているため、最新の開発ビルドで動作するGDNativeクラスと構造体の定義"
"が含まれています。"

#, fuzzy
msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot-headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.4.4-stable`` tag for "
"use with Godot 3.4.4. In your cloned repository, you can do:"
msgstr ""
"Godotの安定バージョン用のGDNativeモジュールを作成する場合は、使用するエンジン"
"バージョンに一致するGitタグ(``git tags`` を含む)を確認してください。\\ "
"``godot_headers`` リポジトリでは、そのようなタグの先頭に ``godot-`` が付いて"
"いるため、 Godot 3.1.1で使用する ``godot-3.1.1-stable`` タグをチェックアウト"
"します。クローンリポジトリでは、次のことができます。"

#, fuzzy
msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.4``), which you would also "
"check out with ``git checkout 3.4``."
msgstr ""
"何らかの理由で安定版リリースに一致するタグが欠落している場合は、一致する安定"
"版ブランチ(``3.1`` など)にフォールバックできます。これは ``git checkout "
"3.1`` でもチェックアウトできます。"

msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""
"GDNativeに影響する独自の変更を使用してソースからGodotをビルドしている場合、更"
"新されたクラスと構造の定義は次の場所にあります。\\ ``<godotsource>/modules/"
"gdnative/include``"

msgid "Our C source"
msgstr "私たちのCソース"

msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""
"メインコードを書くことから始めましょう。最終的には、下の図の各行と同様なファ"
"イル構造を作成します。"

#, fuzzy
msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot-headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""
"Godotを開き、 ``godot_headers`` のGitクローンを含めた\"simple\" という新しい"
"プロジェクトを作成します。これにより、 ``simple`` フォルダと ``project."
"godot`` ファイルが作成されます。次に、\\ ``simple`` フォルダと ``src`` フォル"
"ダを手動で作成し、\\ ``simple`` フォルダに ``bin`` サブフォルダを作成します。"

msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""
"まず、 ``simple.c`` ファイルに何が含まれているかを見てみましょう。ここで例で"
"は、説明を単純にするためにヘッダーを用意しない単一の C ソース ファイルを作成"
"しています。大きなプロジェクトの作成を開始したら、プロジェクトを複数のファイ"
"ルに分割することをお勧めします。ただし、それはこのチュートリアルの範囲外で"
"す。"

msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""
"ソースコードを少しずつ見ていきますので、以下のすべての部分を１つの大きなファ"
"イルにまとめて行く必要があります。各セクションの説明は、それを追加するときに"
"行います。"

msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""
"上記のコードには、GDNative API構造体ヘッダーと、文字列操作のために使用する標"
"準ヘッダーが含まれています。次に、2つの異なる構造体への2つのポインターを定義"
"します。 GDNativeは、メインのGodot実行可能ファイルにコールバックするための機"
"能の、大規模なコレクションをサポートしています。モジュールがこれらの関数にア"
"クセスできるようにするため、GDNativeはこれらすべての関数へのポインターを含む"
"構造体をアプリケーションに提供します。"

msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""
"この実装をモジュール化し、簡単に拡張できるようにするため、コア関数は「コア」"
"API構造体から直接使用できますが、追加の関数には独自の「GDNative構造体」があ"
"り、拡張機能からアクセスできます。"

msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""
"この例では、これらの拡張機能の１つにアクセスして、NativeScriptに特に必要な関"
"数にアクセスします。"

msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""
"NativeScriptは、Godotの他のスクリプトと同様に動作します。NativeScript APIはか"
"なり低レベルのため、ライブラリはGDScript などの他のスクリプトシステムよりも冗"
"長に多くのことを指定する必要があります。NativeScriptインスタンスが作成される"
"と、ライブラリ指定のコンストラクターが呼び出されます。そのインスタンスが破棄"
"されると、指定されたデストラクターが実行されます。"

msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""
"これらは、オブジェクトに実装する関数の前方宣言です。コンストラクターとデスト"
"ラクターが必要です。さらに、オブジェクトには ``get_data`` と呼ばれる単一のメ"
"ソッドがあります。"

msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""
"次は、動的ライブラリがロードされたときにGodotが呼び出す最初のエントリポイント"
"です。これらのメソッドにはすべて ``godot_`` というプレフィックスが付いており"
"(後から変更できます)名前が後に続きます。 ``gdnative_init`` は動的ライブラリを"
"初期化する関数です。 Godotは、API構造体へのポインターが、役に立つと思われるさ"
"まざまな情報を含む構造体へのポインターを提供します。"

msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""
"追加のAPI構造体については、拡張機能配列をループ処理し、拡張機能の種類を確認す"
"る必要があります。"

msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""
"次は、ライブラリがアンロードされる前に呼び出される ``gdnative_terminate`` で"
"す。 Godotは、オブジェクトがライブラリを使用しなくなったときにライブラリをア"
"ンロードします。 ここで、必要なクリーンアップ処理を実行できます。 この例で"
"は、単にAPIポインタをクリアします。"

#, fuzzy
msgid ""
"Finally, we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""
"最後に、今日必要となる最も重要な関数である ``nativescript_init`` があります。"
"この関数は、GDNativeライブラリを読み込む処理の一部としてGodotによって呼び出さ"
"れ、エンジンに対して使用可能なオブジェクトを返します。"

msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""
"まず、 ``nativescript_register_class`` を呼び出すことで、どのクラスが実装され"
"ているかをエンジンに伝えます。ここでの最初のパラメーターは、エンジンから与え"
"られたハンドルポインターです。 2番目はオブジェクトクラスの名前です。 3番目"
"は、「継承」するGodotのオブジェクトのタイプです。これは真の継承ではありません"
"が、十分に近いものです。最後に、4番目と5番目のパラメーターは、コンストラク"
"ターとデストラクターの説明です。"

#, fuzzy
msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot-headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""
"次に、クラスの各メソッドに対して ``nativescript_register_method`` を呼び出し"
"て、メソッド (この場合は 1 つのメソッド) について Godot に伝えます。この"
"チュートリアルでは、単に ``get_data`` だけです。最初のパラメータは、再びハン"
"ドルポインタです。2 つ目は、登録するオブジェクト クラスの名前です。3 つ目は、"
"GDScript に認識される関数の名前です。4 つ目は属性設定です (可能な値について"
"は、 ``godot_headers / nativescript / godot_nativescript.h`` の "
"``godot_method_rpc_mode`` 列挙型を参照してください)。5 番目(最後)のパラメー"
"ターは、メソッドが呼び出されたときに呼び出す関数の説明です。"

msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""
"構造体 ``instance_method`` の記述には、関数自体への関数ポインターが最初の"
"フィールドとして含まれています。これらの構造体の他の2つのフィールドは、メソッ"
"ドごとのユーザーデータを指定するためのものです。 2つ目は ``method_data`` "
"フィールドで、これはすべての関数呼び出しで ``p_method_data`` 引数として渡され"
"ます。これはおそらく、1つの関数を複数の異なるスクリプト クラスの異なるメソッ"
"ドで再利用する場合に便利です。 ``method_data`` 値が解放する必要のあるメモリへ"
"のポインタである場合、3つ目の ``free_func`` フィールドにはそのメモリを解放す"
"る関数へのポインタを含めることができます。このフリー関数は、スクリプト自体(イ"
"ンスタンスではありません！)がアンロードされると呼び出されます(つまり、通常は"
"ライブラリのアンロード時に)。"

msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""
"それでは、オブジェクトの機能に関する作業を始めましょう。 まず、GDNativeクラス"
"のインスタンスのメンバーデータを格納するために使用する構造体を定義します。"

msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""
"次に、コンストラクターを定義します。コンストラクターで行うことは、構造体にメ"
"モリを割り当て、そのメモリにデータを書き込むことだけです。ここではGodotのメモ"
"リ関数を使ってメモリを追跡し、新しい構造体へのポインターを返すことに注意して"
"ください。このポインターは、複数のオブジェクトがインスタンス化された場合に、"
"インスタンスIDとして機能します。"

msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""
"このポインタは、 ``p_user_data`` というパラメーターとしてオブジェクトに関連す"
"る関数のいずれかに渡され、インスタンスの識別とメンバーデータへのアクセスの両"
"方に使用できます。"

msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""
"オブジェクトに対してGodotが実行され、インスタンスのメンバデータが解放される"
"と、デストラクタが呼び出されます。"

msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""
"最後に、 ``get_data`` 関数を実装します。データは常にバリアント型(Variant)とし"
"て送受信されるため、文字列のデータを返すには、まずCの文字列をGodotの文字列オ"
"ブジェクトに変換し、次にその文字列オブジェクトを戻り値のバリアントにコピーす"
"る必要があります。"

msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""
"文字列はGodotではヒープに割り当てられるため、そのメモリを解放するデストラクタ"
"があります。 デストラクタには ``godot_TYPENAME_destroy`` という名前が付けられ"
"ます。 バリアントが文字列で作成されると、その文字列を参照します。 つまり、元"
"の文字列を「破棄」して参照カウントを減らすことができます。 そうしないと、参照"
"カウントがゼロにならず、メモリの割り当てが解除されないため、文字列のメモリが"
"リークします。 返されたバリアントは、Godotによって自動的に破棄されます。"

msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""
"より複雑な操作では、どの値の割り当てを解放するべきなのかそれとも保持するべき"
"なのか、混乱しないように追跡する必要があります。一般的な規則として、C++で デ"
"ストラクターが呼び出されるときには ``godot_TYPENAME_destroy`` を呼び出しま"
"す。文字列デストラクターは、バリアント型 (Variant) の作成後に C++ で呼び出さ"
"れるため、C でも同じことが必要です。"

msgid "The variant we return is destroyed automatically by Godot."
msgstr "戻り値として返されるバリアントは、Godotによって自動的に破棄されます。"

msgid "And that is the whole source code of our module."
msgstr "これがモジュールのソースコード全体です。"

msgid "Compiling"
msgstr "コンパイル"

msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""
"次に、ソースコードをコンパイルする必要があります。前述のとおり、GitHubのサン"
"プルプロジェクトには、すべての面倒な作業を行う「SCons configuration」が含まれ"
"ていますが、ここでのチュートリアルでは、コンパイラを直接呼び出します。"

msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""
"上記のフォルダ構造に揃えてあると仮定すると、 ``src`` フォルダでターミナルセッ"
"ションを開き、そこからコマンドを実行するのが最善です。先に進む前に ``bin``"
"フォルダを作成してください。"

msgid "On Linux:"
msgstr "Linux:"

msgid "On macOS:"
msgstr "macOS:"

msgid "On Windows:"
msgstr "Windows:"

msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""
"Windowsでのビルドでは、 ``libsimple.lib`` ライブラリも作成されます。これは、"
"(一般的には)DLLにアクセスするためにプロジェクトのコンパイルで生成されるライブ"
"ラリです。Godotにとってはそれは単に副産物なので必要ではありません。リリースの"
"ためにゲームをエクスポートするとき、このファイルは無視されエクスポートには含"
"まれませんが心配はいりません。"

msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr "GDNativeLibrary(``.gdnlib``)ファイルの作成"

msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""
"モジュールをコンパイルしたら、動的ライブラリに対応する\\ :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>`\\ リソースを作成し、それを ``."
"gdnlib`` 拡張子を付けて一緒に配置する必要があります。このファイルは、どの動的"
"ライブラリがモジュールの一部であり、プラットフォームごとにロードする必要があ"
"るかをGodotに伝えます。"

msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr ""
"Godotを使用してこのファイルを生成できるため、エディタでシンプルなプロジェクト"
"を開きます。"

msgid "Start by clicking the create resource button in the Inspector:"
msgstr "まず、インスペクタで 「リソースの作成」 ボタンをクリックします:"

msgid "And select ``GDNativeLibrary``:"
msgstr "そして、 ``GDNativeLibrary`` を選択します:"

msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""
"下部のパネルにコンテキストエディタが表示されます。右下にある[下部パネルを展"
"開]ボタンを使用して、目いっぱいの高さにパネルを拡張します。"

msgid "General properties"
msgstr "一般的なプロパティ"

msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr ""
"インスペクタには、ライブラリの読み込みを制御するためのさまざまなプロパティが"
"あります。"

msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""
"*Load Once* が有効な場合、ライブラリは一度だけ読み込まれ、ライブラリを使用す"
"る個々のスクリプトは同じデータを使用します。グローバルに定義した変数は、作成"
"されるオブジェクトのインスタンスからアクセスできます。*Load Once* を無効にす"
"ると、スクリプトがライブラリにアクセスするたびに、ライブラリの新しいコピーが"
"メモリに読み込まれます。"

msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""
"*Singleton* が有効になっている場合はライブラリが自動的に読み込まれ、 "
"``godot_gdneative_singleton`` という関数が呼び出されます。これに関しては別の"
"チュートリアルで説明を行ないます。"

msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""
"*Symbol Prefix* は、これまでに見た ``godot_nativescript_init`` の ``godot_`` "
"のようなコア関数用のプレフィックスです。静的にリンクする複数のGDNativeライブ"
"ラリを使用する場合は、異なるプレフィックスを使用する必要があります。これもま"
"た別のチュートリアルでさらに掘り下げる対象です。iOSは動的ライブラリを好まない"
"ため、現時点ではこのプラットフォーム(iOS)への展開にのみ必要です。"

msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""
"*Reloadable* は、エディタがフォーカスを失ったときにライブラリをリロードする必"
"要があるかどうかを定義します。通常は、外部で変更を加えられたライブラリから、"
"新しいシンボルまたは変更されたシンボルを取得します。"

msgid "Platform libraries"
msgstr "プラットフォームライブラリ"

msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""
"GDNativeLibraryエディタプラグインを使用すると、サポートするプラットフォームと"
"アーキテクチャごとに2つの設定を行うことができます。"

msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""
"*ダイナミック ライブラリ*\\ 列(保存されたファイルの ``entry`` セクション)は、"
"プラットフォームと機能の組み合わせごとに、どのダイナミックライブラリをロード"
"する必要があるかを示しています。これは、特定のプラットフォームにエクスポート"
"するときに、どのファイルをエクスポートする必要があるかをエクスポーターに通知"
"します。"

msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""
"*依存関係*\\ 列(``dependencies`` セクション)は、ライブラリが機能するために各"
"プラットフォームにエクスポートする必要がある他のファイルをGodotに伝えます。 "
"例えばGDNativeモジュールが別のDLLを使用してサードパーティライブラリの機能を実"
"装する場合には、そのDLLをここにリストアップします。"

msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""
"この例では、Linux、macOS、Windows用のライブラリのみを構築しました。フォルダボ"
"タンをクリックして、関連するフィールドでそれらをリンクできます。 3つのライブ"
"ラリをすべて作成した場合、次のようなものが必要です:"

msgid "Saving the resource"
msgstr "リソースの保存"

msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""
"次に、インスペクタの[保存]ボタンを使用して、GDNativeLibraryリソースを ``bin/"
"libsimple.gdnlib`` として保存できます:"

msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr ""
"ファイルはテキストベースの形式で保存され、次のような内容が含まれている必要が"
"あります:"

msgid "Creating the NativeScript (``.gdns``) file"
msgstr "NativeScript( ``.gdns``)ファイルの作成"

#, fuzzy
msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"SIMPLE\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""
"`` .gdnlib`` ファイルを使用して、ライブラリを読み込む方法をGodotに指示しまし"
"た。次に、「単純な」オブジェクトクラスについて通知する必要があります。これを"
"行うには、拡張子が ``.gdns`` の\\ :ref:`NativeScript <class_NativeScript>`\\ "
"リソースファイルを作成します。"

msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""
"GDNativeLibraryリソースの場合と同様に、インスペクタで新しいリソースを作成する"
"ボタンをクリックし、 ``NativeScript`` を選択します:"

#, fuzzy
msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"SIMPLE\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""
"インスペクタは、入力する必要があるいくつかのプロパティを表示します。\\ "
"*Class Name* として、\"Simple\" を入力します。これは、\\ "
"``godot_nativescript_register_class`` を呼び出すときにCソースで宣言したオブ"
"ジェクトクラス名です。また、\\ *Library*\\ をクリックして\\ *読込み*\\ を選択"
"し、\\ ``.gdnlib`` ファイルを選択する必要があります:"

msgid ""
"The *Class Name* must have the same spelling as the one given in "
"``godot_nativescript_init`` when registering the class."
msgstr ""

#, fuzzy
msgid "Finally, click on the save icon and save this as ``bin/simple.gdns``:"
msgstr ""
"最後に保存アイコンをクリックし、これを ``bin/simple.gdns`` として保存します:"

msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""
"次に、シーンを構築します。ルートとしてシーンにコントロールノードを追加し、 "
"``main`` と名付けます。次に、ボタンとラベルを子ノードとして追加します。画面上"
"のどこかに適当な場所にボタンを配置して、名前を付けます。"

msgid "Select the control node and attach a script to it:"
msgstr "コントロール ノードを選択し、スクリプトをアタッチします:"

msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr "次に、ボタンの ``pressed`` シグナルをスクリプトにリンクします:"

msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr "``main.tscn`` と名付けてシーンを保存することを忘れないでください。"

msgid "Now we can implement our ``main.gd`` code:"
msgstr "``main.gd`` コードを実装できます:"

msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""
"これで、プロジェクトは機能するはずです。 Godotを初めて実行すると、メインシー"
"ンが何であるかを尋ねられるので、 ``main.tscn`` ファイルを選択して実行します。"

msgid "Translation status"
msgstr "翻訳ステータス"
