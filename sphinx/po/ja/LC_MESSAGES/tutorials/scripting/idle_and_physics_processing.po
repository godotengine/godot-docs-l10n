# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Idle and Physics Processing"
msgstr "アイドル処理と物理処理"

msgid ""
"Games run in a loop. Each frame, you need to update the state of your game "
"world before drawing it on screen. Godot provides two virtual methods in the "
"Node class to do so: :ref:`Node._process() <class_Node_method__process>` "
"and :ref:`Node._physics_process() <class_Node_method__physics_process>`. If "
"you define either or both in a script, the engine will call them "
"automatically."
msgstr ""
"ゲームはループで動いています。各フレームごとに、画面に描画する前にゲーム世界"
"の状態を更新する必要があります。Godot は、そのための 2 つの仮想メソッド: :"
"ref:`Node._process() <class_Node_method__process>` and :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` を Node クラスに用意"
"しています。スクリプトでどちらか、または両方を定義すると、エンジンは自動的に"
"それらを呼び出します。"

msgid "There are two types of processing available to you:"
msgstr "2種類の処理が用意されています:"

msgid ""
"**Idle processing** allows you to run code that updates a node every frame, "
"as often as possible."
msgstr ""
"**アイドル処理** を使うと、ノードを毎フレーム更新するようなコードを、可能な限"
"り頻繁に実行することができます。"

msgid ""
"**Physics processing** happens at a fixed rate, 60 times per second by "
"default. This is independent of your game's actual framerate, and keeps "
"physics running smoothly. You should use it for anything that involves the "
"physics engine, like moving a body that collides with the environment."
msgstr ""
"**物理処理** は固定レートで行われ、デフォルトでは1秒間に60回です。これはゲー"
"ムの実際のフレームレートとは無関係で、物理がスムーズに行われるようにします。"
"物理エンジンが関係するもの、たとえば、環境と衝突する体を動かすような場合に使"
"用するとよいでしょう。"

msgid ""
"You can activate idle processing by defining the ``_process()`` method in a "
"script. You can turn it off and back on by calling :ref:`Node.set_process() "
"<class_Node_method_set_process>`."
msgstr ""
"スクリプトで ``_process()`` メソッドを定義することで、アイドル処理を有効にす"
"ることができます。また、 :ref:`Node.set_process() "
"<class_Node_method_set_process>` を呼び出すことで、アイドル処理をオフにしたり"
"オンに戻したりすることができます。"

msgid "The engine calls this method every time it draws a frame:"
msgstr "エンジンはフレームを描画するたびに以下のメソッドを呼び出します:"

msgid ""
"Keep in mind that the frequency at which the engine calls ``_process()`` "
"depends on your application's framerate, which varies over time and across "
"devices."
msgstr ""
"エンジンが ``_process()`` を呼び出す頻度は、アプリケーションのフレームレート"
"に依存し、時間やデバイスによって異なることを覚えておいてください。"

msgid ""
"The function's ``delta`` parameter is the time elapsed in seconds since the "
"previous call to ``_process()``. Use this parameter to make calculations "
"independent of the framerate. For example, you should always multiply a "
"speed value by ``delta`` to animate a moving object."
msgstr ""
"この関数の ``delta`` パラメーターは、 ``_process()`` が前回呼び出されてからの"
"経過時間 (秒) です。このパラメーターは、フレームレートに依存しない計算を行う"
"ために使用します。例えば、移動するオブジェクトをアニメーションさせるには、常"
"に速度の値に ``delta`` を乗じる必要があります。"

msgid ""
"Physics processing works with a similar virtual function: "
"``_physics_process()``. Use it for calculations that must happen before each "
"physics step, like moving a character that collides with the game world. As "
"mentioned above, ``_physics_process()`` runs at fixed time intervals as much "
"as possible to keep the physics interactions stable. You can change the "
"interval between physics steps in the Project Settings, under Physics -> "
"Common -> Physics Fps. By default, it's set to run 60 times per second."
msgstr ""
"物理処理は、同様の仮想関数 ``_physics_process()`` で動作します。これはゲーム"
"世界に衝突判定を持つキャラクターの制御など、各物理ステップの前に実行する必要"
"がある処理に使用します。前述のとおり、 ``_physics_process()`` は物理的な相互"
"作用を安定させるために、可能な限り固定時間間隔(デフォルトでは毎秒60回)で呼び"
"出されます。この間隔は、プロジェクト設定の Physics -> Common-> Physics Fps で"
"変更できます。"

msgid ""
"The function ``_process()`` is not synchronized with physics. Its rate "
"depends on hardware and game optimization. It also runs after the physics "
"step in single-threaded games."
msgstr ""
"一方、\\ ``_process()`` 関数は物理処理と同期されません。そのレートは一定では"
"なく、ハードウェアとゲームの最適化に依存します。シングルスレッドのゲームで"
"は、物理ステップの後に実行されます。"

msgid ""
"You can see the ``_process()`` function at work by creating a scene with a "
"single Label node, with the following script attached to it:"
msgstr ""
"Labelノードが1つあるシーンを作成し、以下のスクリプトをアタッチすると、\\ "
"``_process()``\\ 関数の動作を確認できます:"

msgid "When you run the scene, you should see a counter increasing each frame."
msgstr ""
"シーンを実行すると、カウンターが各フレームごとに増加しているのが確認できま"
"す。"

msgid "Translation status"
msgstr "翻訳ステータス"
