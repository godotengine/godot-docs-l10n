# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript exports"
msgstr "GDScriptのエクスポート"

msgid "Introduction to exports"
msgstr "エクスポートの導入"

msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""
"クラスメンバーはエクスポートできます。つまりそれらの値は、それらが関連付けら"
"れているリソース( \\ :ref:`scene <class_PackedScene>` など)と共に保存されま"
"す。プロパティエディタで編集することもできます。エクスポートは ``export`` "
"キーワードを使用して行われます::"

msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the ``export`` keyword (see the "
"*Examples* section below)."
msgstr ""
"エクスポートされた変数は、定数式で初期化するか、\\ ``export`` キーワードの引"
"数の形式でエクスポート・ヒントを持つ必要があります(下記の\\ *例*\\ 参照)。"

msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"メンバー変数をエクスポートする基本的な利点の1つは、エディタで表示および編集で"
"きることです。このようにして、アーティストやゲームデザイナーは後でプログラム"
"の実行方法に影響する値を変更できます。このために特別なエクスポート構文が用意"
"されています。"

#, fuzzy
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language."
msgstr ""
"プロパティのエクスポートは C#のような別の言語でも実行できます。構文の違いは言"
"語に依存します。"

msgid "Examples"
msgstr "例"

msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"スクリプトがエディタで実行されていない場合でも、エクスポートされたプロパティ"
"はまだ編集可能です。これは :ref:`script in \"tool\" mode "
"<doc_gdscript_tool_mode>` と共に使うことが出来ます。"

msgid "Exporting bit flags"
msgstr "ビットフラグのエクスポート"

#, fuzzy
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS, ...``, they "
"can be set from the editor::"
msgstr ""
"ビットフラグとして使用される整数は、1つのプロパティに複数の ``true``/"
"``false`` (ブール値)値を格納できます。エクスポートヒント ``int, FLAGS`` を使"
"用して、エディタから設定できます::"

#, fuzzy
msgid ""
"You must provide a string description for each flag. In this example, "
"``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and "
"``Wind`` corresponds to value 8. Usually, constants should be defined "
"accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"この例では、 ``Fire`` の値は1、 ``Water`` の値は2、 ``Earth`` の値は4、 "
"``Wind`` は値8に対応します。通常、定数はそれに応じて定義する必要があります"
"(例: ``const ELEMENT_WIND = 8`` など)。"

msgid ""
"Export hints are also provided for the physics and render layers defined in "
"the project settings::"
msgstr ""
"エクスポートのヒントは、プロジェクト設定で定義された物理レイヤーとレンダーレ"
"イヤーにも提供されています:"

#, fuzzy
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, use boolean variables instead."
msgstr ""
"ビットフラグを使用するには、ビット単位の操作についてある程度理解する必要があ"
"ります。疑わしい場合は、代わりにブール変数をエクスポートしてください。"

msgid "Exporting arrays"
msgstr "配列のエクスポート"

msgid ""
"Exported arrays can have initializers, but they must be constant expressions."
msgstr ""
"エクスポートされた配列は初期化子を持つことができますが、それらは定数式でなけ"
"ればなりません。"

msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""
"エクスポートされた配列が、Resourceを継承する型を指定している場合は、ファイル"
"システム ドックから複数のファイルを一度にドラッグ＆ドロップすることで、インス"
"ペクタ上で配列の値を設定することができます。"

msgid "Setting exported variables from a tool script"
msgstr "エクスポートされた変数をツールスクリプトから設定する"

msgid ""
"When changing an exported variable's value from a script in :ref:"
"`doc_gdscript_tool_mode`, the value in the inspector won't be updated "
"automatically. To update it, call :ref:`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` after setting the "
"exported variable's value."
msgstr ""
":ref:`doc_gdscript_tool_mode`\\ でエクスポートされた変数の値をスクリプトから"
"変更するとき、インスペクタ内の値は自動的に更新されません。これを更新するには"
"エクスポートされた変数の値を設定した後、 :ref:"
"`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` を呼び出します。"

#, fuzzy
msgid "Advanced exports"
msgstr "高度なベクトル演算"

msgid ""
"Not every type of export can be provided on the level of the language itself "
"to avoid unnecessary design complexity. The following describes some more or "
"less common exporting features which can be implemented with a low-level API."
msgstr ""

msgid ""
"Before reading further, you should get familiar with the way properties are "
"handled and how they can be customized with :ref:`_set() "
"<class_Object_method__get_property_list>`, :ref:`_get() "
"<class_Object_method__get_property_list>`, and :ref:`_get_property_list() "
"<class_Object_method__get_property_list>` methods as described in :ref:"
"`doc_accessing_data_or_logic_from_object`."
msgstr ""

msgid ""
"For binding properties using the above methods in C++, see :ref:"
"`doc_binding_properties_using_set_get_property_list`."
msgstr ""

msgid ""
"The script must operate in the ``tool`` mode so the above methods can work "
"from within the editor."
msgstr ""

msgid "Properties"
msgstr "プロパティ"

msgid ""
"To understand how to better use the sections below, you should understand "
"how to make properties with advanced exports."
msgstr ""

msgid ""
"The ``_get_property_list()`` function gets called by the inspector. You can "
"override it for more advanced exports. You must return an ``Array`` with the "
"contents of the properties for the function to work."
msgstr ""

msgid "``name`` is the name of the property"
msgstr ""

msgid "``type`` is the type of the property from ``Variant.Type``."
msgstr ""

msgid ""
"The ``float`` type is called a real (``TYPE_REAL``) in the ``Variant.Type`` "
"enum."
msgstr ""

#, fuzzy
msgid "Attaching variables to properties"
msgstr "ローカル変数またはプロパティにアクセスします:"

msgid ""
"To attach variables to properties (allowing the value of the property to be "
"used in scripts), you need to create a variable with the exact same name as "
"the property or else you may need to override the :ref:`_set() "
"<class_Object_method__get_property_list>` and :ref:`_get() "
"<class_Object_method__get_property_list>` methods. Attaching a variable to "
"to a property also gives you the ability to give it a default state. ::"
msgstr ""

#, fuzzy
msgid "Adding default values for properties"
msgstr "ローカル変数またはプロパティにアクセスします:"

msgid ""
"To define default values for advanced exports, you need to override the "
"``property_can_revert()`` and ``property_get_revert()`` methods."
msgstr ""

msgid ""
"The ``property_can_revert()`` method takes the name of a property and must "
"return ``true`` if the property can be reverted. This will enable the Revert "
"button next to the property in the inspector."
msgstr ""

msgid ""
"The ``property_get_revert()`` method takes the name of a property and must "
"return the default value for that property."
msgstr ""

#, fuzzy
msgid "Adding script categories"
msgstr "プロパティの追加"

msgid ""
"For better visual distinguishing of properties, a special script category "
"can be embedded into the inspector to act as a separator. ``Script "
"Variables`` is one example of a built-in category. ::"
msgstr ""

msgid "``name`` is the name of a category to be added to the inspector;"
msgstr ""

msgid ""
"Every following property added after the category definition will be a part "
"of the category."
msgstr ""

msgid ""
"``PROPERTY_USAGE_CATEGORY`` indicates that the property should be treated as "
"a script category specifically, so the type ``TYPE_NIL`` can be ignored as "
"it won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""

#, fuzzy
msgid "Grouping properties"
msgstr "プロパティの追加"

msgid "A list of properties with similar names can be grouped. ::"
msgstr ""

msgid ""
"``name`` is the name of a group which is going to be displayed as "
"collapsible list of properties;"
msgstr ""

msgid ""
"Every following property added after the group property with the prefix "
"(which determined by ``hint_string``) will be shortened. For instance, "
"``rotate_speed`` is going to be shortened to ``speed`` in this case. "
"However, ``movement_speed`` won't be a part of the group and will not be "
"shortened."
msgstr ""

msgid ""
"``PROPERTY_USAGE_GROUP`` indicates that the property should be treated as a "
"script group specifically, so the type ``TYPE_NIL`` can be ignored as it "
"won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
