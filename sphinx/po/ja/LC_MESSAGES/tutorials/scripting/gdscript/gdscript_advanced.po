# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: 動的言語の紹介"

msgid "About"
msgstr "概要"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"このチュートリアルでは、GDScriptをより効率的に使用する方法を簡単に紹介しま"
"す。この言語固有の一般的なケースに焦点を当てていますが、動的型付け言語に関す"
"る多くの情報も扱っています。"

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"これは、動的型付け言語に関する経験がほとんどないかまったくないプログラマに特"
"に有用であることを意味します。"

msgid "Dynamic nature"
msgstr "動的性質"

msgid "Pros & cons of dynamic typing"
msgstr "動的型付けの長所と短所"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScriptは動的型付け言語です。その主な利点は以下のとおりです:"

msgid "The language is simple and easy to learn."
msgstr "言語はシンプルで習得が容易です。"

msgid "Most code can be written and changed quickly and without hassle."
msgstr "ほとんどのコードは、手間をかけずに素早く作成および変更できます。"

msgid "Less code written means less errors & mistakes to fix."
msgstr ""
"書かれたコードが少なければ少ないほど、エラーや修正の誤りが少なくなります。"

msgid "Easier to read the code (less clutter)."
msgstr "コードがより読みやすいです(混乱が少なくなります)。"

msgid "No compilation is required to test."
msgstr "動作テスト時にコンパイルは必要ありません。"

msgid "Runtime is tiny."
msgstr "ランタイムは小さいです。"

msgid "Duck-typing and polymorphism by nature."
msgstr "ダック・タイピングとその性質による多型。"

msgid "While the main disadvantages are:"
msgstr "主な欠点は次のとおりです:"

msgid "Less performance than statically typed languages."
msgstr "静的型付き言語よりもパフォーマンスが劣ります。"

msgid "More difficult to refactor (symbols can't be traced)"
msgstr "リファクタリングするのがより難しい(シンボルは辿ることができない)"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"静的型付け言語のコンパイル時に通常検出されるエラーの中には、コードの実行中に"
"のみ発生するものがあります(式の構文解析がより厳密なため)。"

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr "コード補完の柔軟性が低い(一部の変数型は実行時にのみ認識されます)。"

msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"これは、実際には、Godot + GDScriptはゲームを迅速かつ効率的に作成するために設"
"計された組み合わせです。非常に計算集約的で、エンジンの組み込みツール(ベクトル"
"型、Physics Engine、Mathライブラリなど)の恩恵を受けることができないゲームに"
"は、C++を使用する場合もあります。GDScriptでゲームの大部分を作成し、パフォーマ"
"ンスの向上が必要な部分にC++の一部を追加することができます。"

msgid "Variables & assignment"
msgstr "変数及び割り当て"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"動的に型付けされた言語の変数はすべて「Variant型」のようなものです。つまり、型"
"は固定されず、割り当てによってのみ変更されます。例:"

msgid "Static:"
msgstr "静的:"

msgid "Dynamic:"
msgstr "動的:"

msgid "As function arguments:"
msgstr "関数の引数として:"

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"関数も動的な性質を持っているため、次のように異なる引数で呼び出すことができま"
"す。例えば:"

msgid "Pointers & referencing:"
msgstr "ポインタと参照:"

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"CやC++(そしてある程度はJavaとC#)などの静的言語では、変数と、変数へのポインタ"
"または参照とは区別されます。後者では、元のオブジェクトへの参照を渡すことで、"
"他の関数によってオブジェクトを変更できます。"

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"C#やJavaでは、組み込み型(int、float、場合によってはString)でないものはすべて"
"常にポインタまたは参照です。参照も自動的にガベージコレクションされるため、使"
"用されなくなると削除されます。動的型付け言語もこのメモリー・モデルを使用する"
"傾向があります。例:"

msgid "C++:"
msgstr "C++:"

msgid "Java:"
msgstr "Java:"

msgid "GDScript:"
msgstr "\\ GDScript:"

#, fuzzy
msgid ""
"In GDScript, only base types (int, float, String and PoolArray types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"GDScriptでは、基本型(int、float、string、およびベクトル型)のみが値によって関"
"数に渡されます(値はコピーされます)。それ以外のもの(インスタンス、配列、辞書な"
"ど)は参照として渡されます。 \\ :ref:`class_Reference` を継承していないクラス"
"(何も指定されていない場合のデフォルト)は、使用されていないときは解放されます"
"が、 \\ :ref:`class_Object` から手動で継承している場合は手動のメモリ管理も可"
"能です。"

msgid ""
"A value is **passed by value** when it is copied every time it's specified "
"as a function parameter. One consequence of this is that the function cannot "
"modify the parameter in a way that is visible from outside the function::"
msgstr ""

msgid ""
"A value is **passed by reference** when it is *not* copied every time it's "
"specified as a function parameter. This allows modifying a function "
"parameter within a function body (and having the modified value accessible "
"outside the function). The downside is that the data passed as a function "
"parameter is no longer guaranteed to be immutable, which can cause difficult-"
"to-track bugs if not done carefully::"
msgstr ""

msgid ""
"Compared to passing by value, passing by reference can perform better when "
"using large objects since copying large objects in memory can be slow."
msgstr ""

msgid ""
"Additionally, in Godot, base types such as String are **immutable**. This "
"means that modifying them will *always* return a copy of the original value, "
"rather than modifying the value in-place."
msgstr ""

msgid "Arrays"
msgstr "配列"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"動的型付け言語の配列は、内部に多くの異なるデータ型を混在させることができ、常"
"に動的です(いつでもサイズ変更可能)。たとえば、静的型付け言語の配列を比較しま"
"す:"

msgid "And in GDScript:"
msgstr "GDScriptでは:"

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""
"動的型付け言語では、配列はリストなどの他のデータ型を兼ねることもできます:"

msgid "Or unordered sets:"
msgstr "または順序なしセット:"

msgid "Dictionaries"
msgstr "辞書"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"辞書は動的型付け言語における強力なツールです。静的型付け言語(C++やC#など)出身"
"のプログラマーの多くは、その存在を無視し、不必要に彼らの生活を困難にしていま"
"す。このデータ型は通常、そのような言語には存在しないか限定された形でのみ存在"
"しています。"

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"辞書は、キーまたは値のデータ型を完全に無視して、任意の値を他の任意の値にマッ"
"プできます。一般に信じられている事とは異なり、ハッシュテーブルを使用して実装"
"できるため効率的です。実際、これらは非常に効率的なため、一部の言語では配列を"
"も辞書として実装しています。"

msgid "Example of Dictionary:"
msgstr "辞書の例:"

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr "辞書も動的で、キーの追加や削除はいつでも低コストで行えます:"

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"ほとんどの場合、辞書を使用すると2次元配列をより簡単に実装できます。以下は簡単"
"な戦艦ゲームの例です:"

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"辞書は、データマークアップまたはクイック構造としても使用できます。 GDScriptの"
"辞書はPythonの辞書に似ていますが、Luaスタイルの構文と索引付けもサポートしてい"
"るので、初期状態や素早い構造体を書くのに役立ちます:"

msgid "For & while"
msgstr "Forとwhile"

msgid "Iterating in some statically typed languages can be quite complex:"
msgstr "静的型付け言語の中には、反復処理が非常に複雑なものがあります:"

msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "これは通常、動的型付け言語では非常に単純化されています:"

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"コンテナのデータ型(配列と辞書)は反復可能です。 辞書ではキーを繰り返すことがで"
"きます:"

msgid "Iterating with indices is also possible:"
msgstr "インデックスによる反復も可能です:"

msgid "The range() function can take 3 arguments:"
msgstr "range()関数は3つの引数を取ることができます:"

msgid "Some statically typed programming language examples:"
msgstr "静的型付けされたプログラミング言語の例:"

msgid "Translate to:"
msgstr "動的型付け言語では:"

msgid "And backwards looping is done through a negative counter:"
msgstr "逆方向ループは負のカウンタで行われます:"

msgid "Becomes:"
msgstr "動的型付け言語では:"

msgid "While"
msgstr "While"

msgid "while() loops are the same everywhere:"
msgstr "while()ループはどこでも同じです:"

msgid "Custom iterators"
msgstr "カスタム・イテレータ"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"デフォルトのイテレータがニーズに合わない場合は、スクリプト内のVariantクラス"
"の ``_iter_init`` 、 ``_iter_next`` 、および ``_iter_get`` 関数をオーバーライ"
"ドして、カスタムイテレータを作成できます。転送イテレータの実装例を次に示しま"
"す:"

msgid "And it can be used like any other iterator:"
msgstr "これらは他のイテレータと同様に使用できます:"

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"``_iter_init`` のイテレータの状態を必ずリセットしてください。リセットしない"
"と、カスタムイテレータを使用するネストされたforループが期待どおりに動作しませ"
"ん。"

msgid "Duck typing"
msgstr "ダック・タイピング"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"静的型付け言語から動的型付け言語に移る場合において、とりわけ理解するのが難し"
"い概念の1つが、ダック・タイピングです。ダック・タイピングを使用すると、コード"
"全体の設計は非常に単純かつ明確になります。しかし、その仕組みは明白ではありま"
"せん。"

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"例として、大きな岩がトンネルを流れ落ちて、途中ですべてを壊している状況を想像"
"してください。静的に型付けされた言語でのロックのコードは、次のようになります:"

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"このように、岩石によって破壊されることができるすべてはSmashableを継承しなけれ"
"ばならないでしょう。キャラクター、敵、家具、小さな岩がすべて粉砕可能であれ"
"ば、それらはSmashableクラスから継承する必要があり、おそらく複数の継承が必要に"
"なります。 多重継承が望ましくない場合は、Entityのような共通クラスを継承する必"
"要があります。それでも、仮想メソッド ``smash()`` をEntityに追加するのは、それ"
"らのうちのいくつかを粉砕できる場合に限り、それほどエレガントではありません。"

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"動的型付け言語ではこれは問題になりません。ダック・タイピングでは、必要に応じ"
"て ``smash()`` 関数を定義するだけで済みます。継承、基本クラスなどを考慮する必"
"要はありません。"

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"以上です。 大きな岩に当たったオブジェクトがsmash()メソッドを持っていれば、そ"
"れが呼ばれます。継承や多型は必要ありません。動的に型付けされた言語は、それが"
"継承しているものやクラスの型ではなく、目的のメソッドやメンバを持つインスタン"
"スだけを扱います。ダック・タイピングの定義はこれをより明確にするはずです:"

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*「アヒルのように歩きアヒルのように泳ぎアヒルのように鳴く鳥を見たら、私はその"
"鳥をアヒルと呼びます」*"

msgid "In this case, it translates to:"
msgstr "この場合は、次のように変換されます:"

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""
"*「オブジェクトが壊れる可能性がある場合は、それが何であるかは気にしないで、単"
"にそれを壊してください。」*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "はい、代わりにHulkタイピングと呼ぶべきですね。"

#, fuzzy
msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"ヒットしたオブジェクトがsmash()関数を持たない可能性があります。動的に型付けさ"
"れた言語の中には(Objective Cのように)存在しないメソッドの呼び出しを単に無視す"
"るものがありますが、GDScriptはより厳密なので、関数が存在するかどうかをチェッ"
"クするのが望ましいです:"

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"そして、その方法を単純に定義すれば、岩に触れるものは何でも砕くことができま"
"す。"

msgid "Translation status"
msgstr "翻訳ステータス"
