# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "C# API differences to GDScript"
msgstr "GDScriptとのAPIの違い"

msgid "This is a (incomplete) list of API differences between C# and GDScript."
msgstr "これは、C#とGDScriptのAPIの相違点の(不完全な)リストです。"

msgid "General differences"
msgstr "一般的な相違点"

msgid ""
"As explained in the :ref:`doc_c_sharp`, C# generally uses ``PascalCase`` "
"instead of the ``snake_case`` used in GDScript and C++."
msgstr ""
":ref:`doc_c_sharp` で説明したように、C#では一般に、GDScriptおよびC++で使用さ"
"れる ``snake_case`` の代わりに ``PascalCase`` が使用されます。"

msgid "Global scope"
msgstr "グローバル スコープ"

msgid ""
"Global functions and some constants had to be moved to classes, since C# "
"does not allow declaring them in namespaces. Most global constants were "
"moved to their own enums."
msgstr ""
"C#では名前空間で宣言できないため、グローバル関数と一部の定数をクラスに移動す"
"る必要がありました。ほとんどのグローバル定数は、独自の列挙型に移動されまし"
"た。"

msgid "Constants"
msgstr "定数"

msgid ""
"Global constants were moved to their own enums. For example, ``ERR_*`` "
"constants were moved to the ``Error`` enum."
msgstr ""
"グローバル定数は独自の列挙型に移動されました。たとえば、\\ ``ERR_ *`` 定数は "
"``Error`` 列挙型に移動されました。"

msgid "Special cases:"
msgstr "特殊なケース:"

msgid "GDScript"
msgstr "GDScript"

msgid "C#"
msgstr "C#"

msgid "``SPKEY``"
msgstr "\\ ``SPKEY``"

msgid "``GD.SpKey``"
msgstr "\\ ``GD.SpKey``"

msgid "``TYPE_*``"
msgstr "\\ ``TYPE_*``"

msgid "``Variant.Type`` enum"
msgstr "``Variant.Type`` 列挙型"

msgid "``OP_*``"
msgstr "\\ ``OP_*``"

msgid "``Variant.Operator`` enum"
msgstr "``Variant.Operator`` 列挙型"

msgid "Math functions"
msgstr "数学関数"

msgid ""
"Math global functions, like ``abs``, ``acos``, ``asin``, ``atan`` and "
"``atan2``, are located under ``Mathf`` as ``Abs``, ``Acos``, ``Asin``, "
"``Atan`` and ``Atan2``. The ``PI`` constant can be found as ``Mathf.Pi``."
msgstr ""
"``abs`` 、\\ ``acos`` 、\\ ``asin`` 、\\ ``atan`` 、\\ ``atan2`` などの数学グ"
"ローバル関数は、\\ ``Mathf`` の下に ``Abs`` 、\\ ``Acos`` 、\\ ``Asin`` 、\\ "
"``Atan`` および ``Atan2``として、\\ ``PI`` 定数は ``Mathf.Pi`` として見つける"
"ことができます。"

msgid "Random functions"
msgstr "乱数生成関数"

msgid ""
"Random global functions, like ``rand_range`` and ``rand_seed``, are located "
"under ``GD``. Example: ``GD.RandRange`` and ``GD.RandSeed``."
msgstr ""
"``rand_range`` や ``rand_seed`` などの乱数生成用のグローバル関数は、\\ "
"``GD`` の下にあります。例:``GD.RandRange`` および ``GD.RandSeed``\\ 。"

msgid "Other functions"
msgstr "その他の関数"

msgid ""
"Many other global functions like ``print`` and ``var2str`` are located under "
"``GD``. Example: ``GD.Print`` and ``GD.Var2Str``."
msgstr ""
"``print`` や ``var2str`` のような他の多くのグローバル関数は ``GD`` の下にあり"
"ます。例:``GD.Print`` および ``GD.Var2Str``\\ 。"

msgid "Exceptions:"
msgstr "例外:"

msgid "``weakref(obj)``"
msgstr "\\ ``weakref(obj)``"

msgid "``Object.WeakRef(obj)``"
msgstr "\\ ``Object.WeakRef(obj)``"

msgid "``is_instance_valid(obj)``"
msgstr "\\ ``is_instance_valid(obj)``"

msgid "``Object.IsInstanceValid(obj)``"
msgstr "\\ ``Object.IsInstanceValid(obj)``"

msgid "Tips"
msgstr "ヒント"

msgid ""
"Sometimes it can be useful to use the ``using static`` directive. This "
"directive allows to access the members and nested types of a class without "
"specifying the class name."
msgstr ""
"``using static`` ディレクティブを使用すると便利な場合があります。このディレク"
"ティブにより、クラス名を指定せずに、クラスのメンバーおよびネストされたタイプ"
"にアクセスできます。"

msgid "Example:"
msgstr "例:"

msgid "Export keyword"
msgstr "エクスポート・キーワード"

msgid ""
"Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword. "
"This attribute can also be provided with optional :ref:"
"`PropertyHint<enum_@GlobalScope_PropertyHint>` and ``hintString`` "
"parameters. Default values can be set by assigning a value."
msgstr ""
"GDScriptの ``export`` キーワードの代わりに ``[Export]`` 属性を使用します。こ"
"の属性は、オプションの :ref:`PropertyHint <enum_ @ "
"GlobalScope_PropertyHint>` および ``hintString`` パラメーターで提供することも"
"できます。デフォルト値は、値を割り当てることで設定できます。"

msgid "Signal keyword"
msgstr "シグナル・キーワード"

msgid ""
"Use the ``[Signal]`` attribute to declare a signal instead of the GDScript "
"``signal`` keyword. This attribute should be used on a `delegate`, whose "
"name signature will be used to define the signal."
msgstr ""
"GDScriptの ``signal`` キーワードの代わりに ``[Signal]`` 属性を使用してシグナ"
"ルを宣言します。この属性は、関数宣言と\\ ``delegate`` を組み合わせてシグナル"
"を定義する必要があります。"

msgid "See also: :ref:`doc_c_sharp_signals`."
msgstr ":ref:`c_sharp_signals` も参照して下さい。"

#, fuzzy
msgid "`onready` keyword"
msgstr "Onreadyキーワード"

msgid ""
"GDScript has the ability to defer the initialization of a member variable "
"until the ready function is called with `onready` (cf. :ref:"
"`doc_gdscript_onready_keyword`). For example:"
msgstr ""

msgid ""
"However C# does not have this ability. To achieve the same effect you need "
"to do this."
msgstr ""

msgid "Singletons"
msgstr "シングルトン"

msgid ""
"Singletons are available as static classes rather than using the singleton "
"pattern. This is to make code less verbose than it would be with an "
"``Instance`` property."
msgstr ""
"シングルトンは、シングルトンパターンを使用するのではなく、静的クラスとして使"
"用できます。これは、コードを ``Instance`` プロパティを使用する場合よりも冗長"
"にするためです。"

msgid ""
"However, in some very rare cases this is not enough. For example, you may "
"want to access a member from the base class ``Godot.Object``, like "
"``Connect``. For such use cases we provide a static property named "
"``Singleton`` that returns the singleton instance. The type of this instance "
"is ``Godot.Object``."
msgstr ""
"ただし、非常にまれなケースでは、これは十分ではありません。たとえば、 "
"``Connect`` のような基本クラスから ``Godot.Object`` メンバーにアクセスしたい"
"場合があります。そのようなユースケースのために、シングルトンインスタンスを返"
"す ``Singleton`` という名前の静的プロパティを提供します。このインスタンスのタ"
"イプは ``Godot.Object`` です。"

msgid "String"
msgstr "文字列"

msgid ""
"Use ``System.String`` (``string``). Most of Godot's String methods are "
"provided by the ``StringExtensions`` class as extension methods."
msgstr ""
"``System.String`` (``string``)を使用します。Godot の String メソッドのほとん"
"どは、拡張メソッドとして ``StringExtensions`` クラスによって提供されます。"

msgid "There are a few differences, though:"
msgstr "ただし、いくつかの違いがあります:"

msgid ""
"``erase``: Strings are immutable in C#, so we cannot modify the string "
"passed to the extension method. For this reason, ``Erase`` was added as an "
"extension method of ``StringBuilder`` instead of string. Alternatively, you "
"can use ``string.Remove``."
msgstr ""
"``erase``: 文字列は C#では変更できないため、拡張メソッドに渡される文字列を変"
"更することはできません。このため、文字列ではなく ``StringBuilder`` の拡張メ"
"ソッドとして ``Erase`` が追加されました。または、``string.Remove`` を使用する"
"こともできます。"

msgid ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: An additional method is provided, "
"which is an overload of ``IsSubsequenceOf``, allowing you to explicitly "
"specify case sensitivity:"
msgstr ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: ``IsSubsequenceOf`` のオーバーロー"
"ドである追加のメソッドが用意されており、大文字と小文字の区別を明示的に指定で"
"きます:"

msgid ""
"``Match``/``Matchn``/``ExprMatch``: An additional method is provided besides "
"``Match`` and ``Matchn``, which allows you to explicitly specify case "
"sensitivity:"
msgstr ""
"``Match``/``Matchn``/``ExprMatch``: ``Match`` と ``Matchn`` に加えて、大文字"
"と小文字の区別を明示的に指定できる追加のメソッドが提供されます:"

msgid "Basis"
msgstr "Basis(基底)"

msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Basis()`` initializes all primitive members to their default value. Use "
"``Basis.Identity`` for the equivalent of ``Basis()`` in GDScript and C++."
msgstr ""
"C#では、構造体にパラメーターなしのコンストラクターを含めることはできません。"
"したがって、\\ ``new Basis()`` はすべてのプリミティブメンバーを規定値に初期化"
"します。 GDScriptおよびC++の ``Basis()`` に相当するものが必要な場合は "
"``Basis.Identity``を使用します。"

msgid "The following method was converted to a property with a different name:"
msgstr "次のメソッドは、異なる名前のプロパティに変換されました:"

msgid "``get_scale()``"
msgstr "\\ ``get_scale()``"

msgid "``Scale``"
msgstr "\\ ``Scale``"

msgid "Transform2D"
msgstr "\\ Transform2D"

msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Transform2D()`` initializes all primitive members to their default value. "
"Please use ``Transform2D.Identity`` for the equivalent of ``Transform2D()`` "
"in GDScript and C++."
msgstr ""
"C#では、構造体にパラメーターなしのコンストラクターを含めることはできません。"
"したがって、\\ ``new Transform2D()`` は、すべてのプリミティブメンバーを規定値"
"に初期化します。 GDScriptおよびC++の ``Transform2D()`` に相当するものが必要な"
"場合は ``Transform2D.Identity`` を使用してください。"

msgid ""
"The following methods were converted to properties with their respective "
"names changed:"
msgstr "次のメソッドは、それぞれの名前が変更されたプロパティに変換されました:"

msgid "``get_rotation()``"
msgstr "\\ ``get_rotation()``"

msgid "``Rotation``"
msgstr "\\ ``Rotation``"

msgid "Plane"
msgstr "\\ Plane"

msgid ""
"The following method was converted to a property with a *slightly* different "
"name:"
msgstr ""
"次のメソッドは、\\ *わずかに*\\ 異なる名前のプロパティに変換されました:"

msgid "``center()``"
msgstr "\\ ``center()``"

msgid "``Center``"
msgstr "\\ ``Center``"

msgid "Rect2"
msgstr "\\ Rect2"

msgid ""
"The following field was converted to a property with a *slightly* different "
"name:"
msgstr ""
"次のフィールドは、\\ *わずかに*\\ 異なる名前のプロパティに変換されました。"

msgid "``end``"
msgstr "\\ ``end``"

msgid "``End``"
msgstr "\\ ``End``"

msgid "``get_area()``"
msgstr "\\ ``get_area()``"

msgid "``Area``"
msgstr "\\ ``Area``"

msgid "Quat"
msgstr "\\ Quat"

msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Quat()`` initializes all primitive members to their default value. Please "
"use ``Quat.Identity`` for the equivalent of ``Quat()`` in GDScript and C++."
msgstr ""
"C#では、構造体にパラメーターなしのコンストラクターを含めることはできません。"
"したがって、\\ ``new Quat()`` はすべてのプリミティブメンバーを規定値に初期化"
"します。 GDScriptおよびC++の ``Quat()`` に相当するものが必要な場合は ``Quat."
"Identity`` を使用してください。"

msgid ""
"The following methods were converted to a property with a different name:"
msgstr "次のメソッドは、異なる名前のプロパティに変換されました。"

msgid "``length()``"
msgstr "\\ ``length()``"

msgid "``Length``"
msgstr "\\ ``Length``"

msgid "``length_squared()``"
msgstr "\\ ``length_squared()``"

msgid "``LengthSquared``"
msgstr "\\ ``LengthSquared``"

msgid "Array"
msgstr "配列"

msgid ""
"*This is temporary. PoolArrays will need their own types to be used the way "
"they are meant to.*"
msgstr ""
"*これは一時的なものです。それぞれの PoolArray は、本来の方法で使用するために"
"独自の型を必要とします。*"

msgid "``Array``"
msgstr "\\ ``Array``"

msgid "``Godot.Collections.Array``"
msgstr "\\ ``Godot.Collections.Array``"

msgid "``PoolIntArray``"
msgstr "\\ ``PoolIntArray``"

msgid "``int[]``"
msgstr "\\ ``int[]``"

msgid "``PoolByteArray``"
msgstr "\\ ``PoolByteArray``"

msgid "``byte[]``"
msgstr "\\ ``byte[]``"

msgid "``PoolFloatArray``"
msgstr "\\ ``PoolFloatArray``"

msgid "``float[]``"
msgstr "\\ ``float[]``"

msgid "``PoolStringArray``"
msgstr "\\ ``PoolStringArray``"

msgid "``String[]``"
msgstr "\\ ``String[]``"

msgid "``PoolColorArray``"
msgstr "\\ ``PoolColorArray``"

msgid "``Color[]``"
msgstr "\\ ``Color[]``"

msgid "``PoolVector2Array``"
msgstr "\\ ``PoolVector2Array``"

msgid "``Vector2[]``"
msgstr "\\ ``Vector2[]``"

msgid "``PoolVector3Array``"
msgstr "\\ ``PoolVector3Array``"

msgid "``Vector3[]``"
msgstr "\\ ``Vector3[]``"

msgid ""
"``Godot.Collections.Array<T>`` is a type-safe wrapper around ``Godot."
"Collections.Array``. Use the ``Godot.Collections.Array<T>(Godot.Collections."
"Array)`` constructor to create one."
msgstr ""
"``Godot.Collections.Array<T>`` は ``Godot.Collections.Array`` のタイプセーフ"
"なラッパーです。 ``Godot.Collections.Array<T>(Godot.Collections.Array)`` コン"
"ストラクターを使用して作成します。"

msgid "Dictionary"
msgstr "辞書(ディクショナリ)"

msgid "Use ``Godot.Collections.Dictionary``."
msgstr "``Godot.Collections.Dictionary`` を使用します。"

msgid ""
"``Godot.Collections.Dictionary<T>`` is a type-safe wrapper around ``Godot."
"Collections.Dictionary``. Use the ``Godot.Collections.Dictionary<T>(Godot."
"Collections.Dictionary)`` constructor to create one."
msgstr ""
"``Godot.Collections.Dictionary<T>`` は ``Godot.Collections.Dictionary`` のタ"
"イプセーフラッパーです。 ``Godot.Collections.Dictionary<T>(Godot.Collections."
"Dictionary)`` コンストラクターを使用して作成します。"

msgid "Variant"
msgstr "バリアント"

msgid "``System.Object`` (``object``) is used instead of ``Variant``."
msgstr "``Variant`` の代わりに ``System.Object`` (``object``)が使用されます。"

msgid "Communicating with other scripting languages"
msgstr "他のスクリプト言語との通信"

msgid "This is explained extensively in :ref:`doc_cross_language_scripting`."
msgstr "これは :ref:`doc_cross_language_scripting` で詳細に説明されています。"

msgid "Yield"
msgstr "Yield"

msgid ""
"Something similar to GDScript's ``yield`` with a single parameter can be "
"achieved with C#'s `yield keyword <https://docs.microsoft.com/en-US/dotnet/"
"csharp/language-reference/keywords/yield>`_."
msgstr ""
"C#の `yieldキーワード<https://docs.microsoft.com/en-US/dotnet/csharp/"
"language-reference/keywords/yield>` を使用すると、単一のパラメーターを持つ"
"GDScriptの ``yield`` に似たものを実現できます。"

msgid ""
"The equivalent of yield on signal can be achieved with async/await and "
"``Godot.Object.ToSignal``."
msgstr ""
"async/awaitおよび ``Godot.Object.ToSignal`` を使用すると、シグナルのyieldと同"
"等の結果を得ることができます。"

msgid "Other differences"
msgstr "他の相違点"

msgid ""
"``preload``, as it works in GDScript, is not available in C#. Use ``GD."
"Load`` or ``ResourceLoader.Load`` instead."
msgstr ""
"GDScriptで動作する ``preload`` は、C#では使用できません。代わりに ``GD."
"Load`` または ``ResourceLoader.Load`` を使用してください。"

msgid "Other differences:"
msgstr "他の相違点:"

msgid "``Color8``"
msgstr "\\ ``Color8``"

msgid "``Color.Color8``"
msgstr "\\ ``Color.Color8``"

msgid "``is_inf``"
msgstr "\\ ``is_inf``"

msgid "``float.IsInfinity``"
msgstr "\\ ``float.IsInfinity``"

msgid "``is_nan``"
msgstr "\\ ``is_nan``"

msgid "``float.IsNaN``"
msgstr "\\ ``float.IsNaN``"

msgid "``dict2inst``"
msgstr "\\ ``dict2inst``"

msgid "TODO"
msgstr "\\ TODO"

msgid "``inst2dict``"
msgstr "\\ ``inst2dict``"

msgid "Translation status"
msgstr "翻訳ステータス"
