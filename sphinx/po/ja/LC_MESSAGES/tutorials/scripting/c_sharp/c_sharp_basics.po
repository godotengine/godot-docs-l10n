# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# の基本"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"C#サポートは、Godot 3.0以降で利用可能な新しい機能です。そのため、依然としてい"
"くつかの問題に遭遇したり、ドキュメントで改善できる箇所が見つかる場合がありま"
"す。 GodotのC#に関する問題は `engine GitHubページ <https://github.com/"
"godotengine/godot/issues>`_\\ にて、ドキュメントの問題は `documentation "
"GitHubページ <https://github.com/godotengine/godot-docs/issues>`_\\ にて報告"
"をお願いします。"

msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"このページでは、C#の概要と、Godotでの使用方法の両方について簡単に紹介していま"
"す。その後、\\ :ref:`特定の機能を使用する方法 "
"<doc_c_sharp_features>`\\ 、\\ :ref:`C#とGDScript APIの違い "
"<doc_c_sharp_differences>`\\ について読み、(再び)ステップバイステップ チュー"
"トリアルの\\ :ref:`スクリプトセクション <doc_scripting>`\\ を参照してくださ"
"い。"

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 6.x .NET framework, including full support for "
"C# 8.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""
"C#は、マイクロソフトが開発した高水準プログラミング言語です。Godotでは、C# 8.0"
"の完全なサポートを含むMono 6.x .NETフレームワークで実装されています。Monoは、"
"C#および共通言語ランタイムのECMA標準に基づいたMicrosoftの.NET Frameworkのオー"
"プンソース実装です。その機能を確認するための良い出発点は、Monoドキュメントの"
"\\ `互換性 <http://www.mono-project.com/docs/about-mono/compatibility/>`_\\ "
"ページです。"

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"これはC#言語全体に関する本格的なチュートリアルでは\\ **ありません**\\ 。まだ"
"その構文や機能に慣れていなければ、\\ `Microsoft C#ガイド <https://docs."
"microsoft.com/ja-jp/dotnet/csharp/index>`_\\ や他の適切な入門書を参照してくだ"
"さい。"

msgid "Setting up C# for Godot"
msgstr "Godot用のC#のセットアップ"

msgid "Prerequisites"
msgstr "前提条件"

msgid ""
"Install the latest stable version of the `.NET SDK <https://dotnet.microsoft."
"com/download>`__, previously known as the .NET Core SDK."
msgstr ""

msgid ""
"From Godot 3.2.3 onwards, installing Mono SDK is not a requirement anymore, "
"except it is required if you are building the engine from source."
msgstr ""

msgid ""
"Godot bundles the parts of Mono needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, which needs to be installed separately."
msgstr ""

#, fuzzy
msgid ""
"In summary, you must have installed the .NET SDK **and** the Mono-enabled "
"version of Godot."
msgstr ""
"要約すると、Visual StudioまたはMono(オペレーティング システムによって異なりま"
"す) **および** Mono対応バージョンのGodotがインストールされている必要がありま"
"す。"

msgid "Additional notes"
msgstr "その他の注意事項"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr ""

#, fuzzy
msgid ""
"If you are building Godot from source, install the latest stable version of "
"`Mono <https://www.mono-project.com/download/stable/>`__, and make sure to "
"follow the steps to enable Mono support in your build as outlined in the :"
"ref:`doc_compiling_with_mono` page."
msgstr ""
"Monoサポートが有効になっているGodotを使用する必要があるため、必ず **Mono "
"version** のGodotをダウンロードしてください。ソースからGodotをビルドする場合"
"は、 :ref:`doc_compiling_with_mono` ページに概説されている手順に従って、Mono"
"サポートを有効にしてビルドしてください。"

msgid "Configuring an external editor"
msgstr "外部エディタの設定"

#, fuzzy
msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Mono**. "
"Under **Mono**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"GodotのスクリプトエディタでのC#のサポートは最小限です。外部IDEまたはエディタ"
"の使用を検討してください。これらは、C#のオートコンプリート、デバッグ、および"
"その他の便利な機能を提供します。Godotで外部エディタを選択するには、 **エディ"
"タ → エディタ設定** をクリックし、 **Mono** まで下にスクロールします。 "
"**Mono** で、 **Editor** をクリックし、外部エディタを選択します。Godotは現"
"在、次の外部エディタをサポートしています。"

msgid "Visual Studio 2019"
msgstr "\\ Visual Studio 2019"

msgid "Visual Studio Code"
msgstr "\\ Visual Studio Code"

msgid "MonoDevelop"
msgstr "\\ MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "\\ Visual Studio for Mac"

msgid "JetBrains Rider"
msgstr "\\ JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr ""

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""

#, fuzzy
msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "Godotのエディタの設定では:"

msgid ""
"Set **Mono** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""

msgid "Set **Mono** -> **Builds** -> **Build Tool** to **dotnet CLI**."
msgstr ""

msgid "In Rider:"
msgstr ""

msgid "Set **MSBuild version** to **.NET Core**."
msgstr ""

msgid "Install the **Godot support** plugin."
msgstr ""

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""

msgid ""
"Set **Mono** -> **Editor** -> **External Editor** to **Visual Studio Code**."
msgstr ""

msgid "In Visual Studio Code:"
msgstr "Visual Studio Codeの場合："

#, fuzzy
msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"`VSMonoDebugger拡張機能 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_ をインストールします。"

#, fuzzy
msgid ""
"Install the `Mono Debug <https://marketplace.visualstudio.com/items?"
"itemName=ms-vscode.mono-debug>`__ extension."
msgstr ""
"`VSMonoDebugger拡張機能 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_ をインストールします。"

#, fuzzy
msgid ""
"Install the `C# Tools for Godot <https://marketplace.visualstudio.com/items?"
"itemName=neikeq.godot-csharp-vscode>`__ extension."
msgstr ""
"`VSMonoDebugger拡張機能 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_ をインストールします。"

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""

msgid ""
"To configure a project for debugging open the Godot project folder in VS "
"Code. Go to the Run tab and click on **Add Configuration...**. Select **C# "
"Godot** from the dropdown menu. Open the ``tasks.json`` and ``launch.json`` "
"files that were created. Change the executable setting in ``launch.json`` "
"and  command settings in ``tasks.json`` to your Godot executable path. Now, "
"when you start the debugger in VS Code, your Godot project will run."
msgstr ""

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio (Windows のみ)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""

msgid "While installing Visual Studio, select these workloads:"
msgstr "Visual Studioのインストールに関する注意事項:"

msgid "Mobile development with .NET"
msgstr ".NETを使ったモバイル開発"

msgid ".NET Core cross-platform development"
msgstr ""

msgid "Set **Mono** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""

msgid ""
"Next, you can download the Godot Visual Studio extension from github `here "
"<https://github.com/godotengine/godot-csharp-visualstudio/releases>`__. "
"Double click on the downloaded file and follow the installation process."
msgstr ""

msgid ""
"The option to debug your game in Visual Studio may not appear after "
"installing the extension. To enable debugging, there is a `workaround for "
"Visual Studio 2019 <https://github.com/godotengine/godot-csharp-visualstudio/"
"issues/10#issuecomment-720153256>`__. There is `a separate issue about this "
"problem in Visual Studio 2022 <https://github.com/godotengine/godot-csharp-"
"visualstudio/issues/28>`__."
msgstr ""

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""

msgid "Creating a C# script"
msgstr "C#スクリプトの作成"

#, fuzzy
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"Godot用にC#を正常に設定した後、シーン内のノードのコンテキストメニューで "
"``Attach script`` を選択すると、次のオプションが表示されます。"

msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""
"一部の仕様は変更されますが、スクリプトにC#を使用する場合でも、ほとんどの概念"
"はGDScriptと同じように機能することに注意してください。Godotを初めて使用する場"
"合は、この時点で :ref:`doc_scripting` のチュートリアルに従うことをお勧めしま"
"す。ドキュメント内のいくつかの場所にはまだC#の例が欠けていますが、ほとんどの"
"概念はGDScriptから簡単に移行できます。"

msgid "Project setup and workflow"
msgstr "プロジェクトの設定とワークフロー"

msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""
"最初のC#スクリプトを作成すると、GodotはGodotプロジェクトのC#プロジェクトファ"
"イルを初期化します。これには、C#ソリューション(``.sln``)とプロジェクトファイ"
"ル(``.csproj``)の生成、およびいくつかのユーティリティファイルとフォルダ(``."
"mono`` および ``Properties/AssemblyInfo.cs``)の生成が含まれます。 ``.mono`` "
"を除くこれらすべては重要であり、バージョン管理システム(VCS)にコミットする必要"
"があります。 ``.mono`` は、VCSの無視リストに安全に追加できます。 ``.mono`` "
"フォルダを削除して再生成すると、トラブルシューティングの際に役立つ場合があり"
"ます。"

msgid "Example"
msgstr "例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "以下に、空白のC#スクリプトと、その動作を示すコメントを示します。"

msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"ご覧のとおり、Godotの ``print`` 関数のようなGDScriptのグローバル スコープの関"
"数は、\\ ``Godot`` 名前空間の一部である ``GD`` クラスで使用できます。\\ "
"``GD`` クラスのメソッドの一覧については、\\ :ref:`@GDScript "
"<class_@gdscript>` および :ref:`@GlobalScope <class_@globalscope>` のクラス "
"リファレンス ページを参照してください。"

msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""
"ノードにアタッチしたいクラスは ``.cs`` ファイルと同じ名前にする必要があること"
"に注意してください。そうしないと、次のエラーが発生し、シーンを実行できませ"
"ん: *\"Cannot find class XXX for script res://XXX.cs\"*"

msgid "General differences between C# and GDScript"
msgstr "C#とGDScriptの一般的な違い"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# APIはGDScript/C++の ``snake_case`` の代わりに ``PascalCase`` を使います。 "
"可能であれば、フィールドとゲッター/セッターはプロパティに変換されています。一"
"般的に、C# Godot APIは合理的に可能な限り慣用的であるように努めています。"

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""
"詳細については、\\ :ref:`doc_c_sharp_differences` ページを参照してください。"

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the word **Build** in the top right corner of the "
"editor. You can also click **Mono** at the bottom of the editor window to "
"reveal the Mono panel, then click the **Build Project** button."
msgstr ""
"C#を使用している場合、新しいエクスポート変数またはシグナルを表示する場合は、"
"プロジェクトアセンブリを(再)ビルドする必要があります。このビルドは、エディタ"
"ウィンドウの下部にある「Mono」をクリックしてMonoパネルを表示し、「Build "
"Project」ボタンをクリックして手動でトリガーできます。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""

msgid "Current gotchas and known issues"
msgstr "現在の課題と既知の問題"

msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""
"GodotでのC#のサポートは非常に新しいため、いくつかの苦労や解決する必要があるも"
"のがあります。以下は、GodotでC#に飛び込む際に注意する必要がある最も重要な問題"
"の一覧ですが、疑問がある場合は、公式の `issue tracker for Mono issues "
"<https://github.com/godotengine/godot/labels/topic%3Amono>` もご覧ください。"

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "エディタプラグインの作成は可能ですが、現在は非常に複雑です。"

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""
"現在、エクスポートされた変数を除き、状態(State)は保存およびホットリロード時に"
"復元されません。"

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""
"アタッチされた C#スクリプトは、ファイル名と一致するクラス名を持つクラスを参照"
"する必要があります。"

msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation."
msgstr ""
"Godot の ``snake_case`` API 命名規則に依存する ``Get()``/``Set()`` 、\\ "
"``Call()``/``CallDeferred()`` 及びシグナル接続メソッド ``Connect()`` などのメ"
"ソッドがあります。したがって、例えば ``CallDeferred(\"AddChild\")`` を使用す"
"る場合、APIは本来の ``snake_case`` バージョンである ``add_child``を期待してい"
"るため、\\ ``AddChild`` では動作しません。ただし、任意のカスタムプロパティま"
"たはカスタムメソッドはこの制限なしに使用できます。"

#, fuzzy
msgid ""
"Exporting Mono projects is supported for desktop platforms (Linux, Windows "
"and macOS), Android, HTML5, and iOS. The only platform not supported yet is "
"UWP."
msgstr ""
"Monoプロジェクトのエクスポートは、デスクトッププラットフォーム(Linux、"
"Windows、およびmacOS)でのみサポートされています。 Android、iOS、HTML5、および"
"UWPは現在サポートされていません (`#20267 <https://github.com/godotengine/"
"godot/issues/20267>`_, `#20268 <https://github.com/godotengine/godot/"
"issues/20268>`_ `#20270 <https://github.com/godotengine/godot/"
"issues/20270>`_ `#20271 <https://github.com/godotengine/godot/"
"issues/20271>`_)。"

msgid "Performance of C# in Godot"
msgstr "GodotにおけるC#のパフォーマンス"

msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""
"いくつかの予備的な `ベンチマーク <https://github.com/cart/godot3-bunnymark>` "
"によると、一般的にGodot のC#のパフォーマンスはGDScriptと同程度ですが、いくつ"
"かの単純なケースではGDScriptの約 **～4倍** です。C++はさらにもう少し高速で"
"す。具体的な内容はユースケースによって異なります。GDScriptは、ほとんどの一般"
"的なスクリプトワークロードに対して十分に高速である可能性があります。C#そのも"
"のは高速ですが、Godotと通信するときに負荷の高い形式変換処理が必要です。"

msgid "Using NuGet packages in Godot"
msgstr "GodotでのNuGetパッケージの使用"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>` パッケージは、他のC#プロジェクトと同様に、"
"Godotでインストールおよび使用できます。多くのIDEは、パッケージを直接追加でき"
"ます。プロジェクトのルートにある ``.csproj`` ファイルにパッケージ参照を追加す"
"ることにより、手動で追加することもできます:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""

msgid "Profiling your C# code"
msgstr "C#コードのプロファイリング"

msgid ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ is available for Linux and macOS. Due to a Mono change, it does "
"not work on Windows currently."
msgstr ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ はLinuxおよびmacOSで利用可能です。\\ Monoの変更により、現在"
"Windowsでは機能しません。"

msgid ""
"External Mono profiler like `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ can be used as described `here <https://github.com/godotengine/"
"godot/pull/34382>`_."
msgstr ""
"`こちら<https://github.com/godotengine/godot/pull/34382>` _ で説明されている"
"方法で、\\ `JetBrains dotTrace <https://www.jetbrains.com/profiler/>` _ のよ"
"うな外部のMonoプロファイラーを使用できます。"

msgid "Translation status"
msgstr "翻訳ステータス"
