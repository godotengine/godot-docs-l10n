# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "C# features"
msgstr "カスタム機能"

msgid ""
"This page provides an overview of the commonly used features of both C# and "
"Godot and how they are used together."
msgstr ""
"このページでは、C#とGodotの両方で一般的に使用される機能の概要と、それらの併用"
"方法について説明します。"

msgid "Type conversion and casting"
msgstr "型変換とキャスト"

msgid ""
"C# is a statically typed language. Therefore, you can't do the following:"
msgstr "C#は静的に型指定された言語です。したがって、次の操作は実行できません:"

msgid ""
"The method ``GetNode()`` returns a ``Node`` instance. You must explicitly "
"convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""
"メソッド ``GetNode()`` は ``Node`` インスタンスを返します。この場合は、明示的"
"に目的の派生型 ``Sprite`` に変換する必要があります。"

msgid "For this, you have various options in C#."
msgstr "このために、C#にはさまざまなオプションがあります。"

msgid "**Casting and Type Checking**"
msgstr "\\ **キャストと型チェック**"

msgid ""
"Throws ``InvalidCastException`` if the returned node cannot be cast to "
"Sprite. You would use it instead of the ``as`` operator if you are pretty "
"sure it won't fail."
msgstr ""
"返されたNodeをSpriteにキャストできない場合は、 ``InvalidCastException`` をス"
"ローします。失敗しないと確信している場合は、\\ ``as`` 演算子の代わりにキャス"
"トを使用します。"

msgid "**Using the AS operator**"
msgstr "\\ **AS演算子の使用**"

msgid ""
"The ``as`` operator returns ``null`` if the node cannot be cast to Sprite, "
"and for that reason, it cannot be used with value types."
msgstr ""
"NodeをSpriteにキャストできない場合、\\ ``as`` 演算子は ``null`` を返します。"
"そのため、値型では使用できません。"

msgid "**Using the generic methods**"
msgstr "**汎用メソッドを使用**"

msgid ""
"Generic methods are also provided to make this type conversion transparent."
msgstr "この型変換を透過的にするための汎用メソッドも提供されています。"

msgid ""
"``GetNode<T>()`` casts the node before returning it. It will throw an "
"``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""
"``GetNode<T>()`` は、ノードを返す前にノードをキャストします。ノードを目的の型"
"にキャストできない場合は、\\ ``InvalidCastException`` がスローされます。"

msgid ""
"``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if "
"the node cannot be cast to the desired type."
msgstr ""
"``GetNodeOrNull<T>()`` は ``as`` 演算子を使用し、ノードを目的の型にキャストで"
"きない場合は ``null`` を返します。"

msgid "**Type checking using the IS operator**"
msgstr "**IS演算子を使用した型チェック**"

msgid ""
"To check if the node can be cast to Sprite, you can use the ``is`` operator. "
"The ``is`` operator returns false if the node cannot be cast to Sprite, "
"otherwise it returns true."
msgstr ""
"ノードをSpriteにキャストできるかどうかを確認するには、 ``is`` 演算子を使用で"
"きます。\\ ``is`` 演算子は、ノードをSpriteにキャストできない場合はfalseを返"
"し、できる場合はtrueを返します。"

msgid ""
"For more advanced type checking, you can look into `Pattern Matching "
"<https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""
"より高度な型チェックについては、 `パターンマッチング<https://docs.microsoft."
"com/ja-jp/dotnet/csharp/pattern-matching>` で調べることができます。"

msgid "C# signals"
msgstr "C#シグナル"

msgid ""
"For a complete C# example, see the **Handling a signal** section in the step "
"by step :ref:`doc_scripting` tutorial."
msgstr ""
"完全なC#の例については、チュートリアル \\ :ref:`doc_scripting` の\\ "
"**Handling a signal**\\ を参照してください。"

msgid ""
"Declaring a signal in C# is done with the ``[Signal]`` attribute on a "
"delegate."
msgstr "C#でシグナルを宣言するには、デリゲートの ``[Signal]`` 属性を使います。"

msgid ""
"These signals can then be connected either in the editor or from code with "
"``Connect``. If you want to connect a signal in the editor, you need to "
"(re)build the project assemblies to see the new signal. This build can be "
"manually triggered by clicking the “Build” button at the top right corner of "
"the editor window."
msgstr ""
"これらのシグナルは、エディタまたは ``Connect`` を持つコードから接続することが"
"できます。エディタでシグナルを接続する場合は、新しいシグナルを表示するために"
"プロジェクトアセンブリを(再)ビルドする必要があります。このビルドは、エディタ"
"ウィンドウの右上隅にある [ビルド] ボタンをクリックして手動でトリガーできま"
"す。"

msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr "シグナルの発信は ``EmitSignal`` メソッドで行われます。"

msgid ""
"Notice that you can always reference a signal name with the ``nameof`` "
"keyword (applied on the delegate itself)."
msgstr ""
"シグナル名はいつでも `` nameof`` キーワードで参照できることに注意してください"
"(デリゲート自体に適用されます)。"

#, fuzzy
msgid ""
"It is possible to bind values when establishing a connection by passing a "
"Godot array."
msgstr ""
"オブジェクト配列を渡すことで、接続を確立するときに値をバインドできます。"

msgid ""
"Signals support parameters and bound values of all the `built-in types "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/"
"built-in-types-table>`_ and Classes derived from :ref:`Godot.Object "
"<class_Object>`. Consequently, any ``Node`` or ``Reference`` will be "
"compatible automatically, but custom data objects will need to extend from "
"`Godot.Object` or one of its subclasses."
msgstr ""
"シグナルは、すべての `組み込み型<https://docs.microsoft.com/en-us/dotnet/"
"csharp/language-reference/keywords/built-in-types-table>` と :ref:`Godot."
"Object <class_Object>` から派生したクラスのパラメーターとバインド値をサポート"
"します。。したがって、すべての ``Node`` または ``Reference`` は自動的に互換性"
"がありますが、カスタムデータオブジェクトは `Godot.Object` またはそのサブクラ"
"スの1つから拡張する必要があります。"

msgid ""
"Finally, signals can be created by calling ``AddUserSignal``, but be aware "
"that it should be executed before any use of said signals (with ``Connect`` "
"or ``EmitSignal``)."
msgstr ""
"最後に、シグナルは ``AddUserSignal`` を呼び出すことで作成できますが、シグナル"
"を使用する前に(``Connect`` または ``EmitSignal`` を使って)実行する必要がある"
"ことに注意してください。"

msgid "Preprocessor defines"
msgstr "プリプロセッサ定義"

msgid ""
"Godot has a set of defines that allow you to change your C# code depending "
"on the environment you are compiling to."
msgstr ""
"Godotには、コンパイルする環境に応じてC#コードを変更できる一連の定義がありま"
"す。"

msgid ""
"If you created your project before Godot 3.2, you have to modify or "
"regenerate your `csproj` file to use this feature (compare "
"``<DefineConstants>`` with a new 3.2+ project)."
msgstr ""
"Godot 3.2より前にプロジェクトを作成した場合、この機能を使用するには、\\ "
"`csproj` ファイルを変更または再生成する必要があります (``<DefineConstants>`` "
"を新しい3.2+プロジェクトと比較してください)。"

msgid "Examples"
msgstr "例"

msgid "For example, you can change code based on the platform:"
msgstr "たとえば、プラットフォームに基づいてコードを変更できます:"

msgid ""
"Or you can detect which engine your code is in, useful for making cross-"
"engine libraries:"
msgstr ""
"または、コードがどのエンジンにあるかを検出できます。これは、クロスエンジンラ"
"イブラリを作成するのに役立ちます:"

msgid "Full list of defines"
msgstr "定義の完全なリスト"

msgid "``GODOT`` is always defined for Godot projects."
msgstr "Godotプロジェクトでは、\\ ``GODOT`` が常に定義されています。"

msgid ""
"One of ``GODOT_64`` or ``GODOT_32`` is defined depending on if the "
"architecture is 64-bit or 32-bit."
msgstr ""
"アーキテクチャが64ビットか32ビットかによって、\\ ``GODOT_64`` または "
"``GODOT_32`` のいずれかが定義されます。"

#, fuzzy
msgid ""
"One of ``GODOT_X11``, ``GODOT_WINDOWS``, ``GODOT_OSX``, ``GODOT_ANDROID``, "
"``GODOT_IOS``, ``GODOT_HTML5``, or ``GODOT_SERVER`` depending on the OS. "
"These names may change in the future. These are created from the "
"``get_name()`` method of the :ref:`OS <class_OS>` singleton, but not every "
"possible OS the method returns is an OS that Godot with Mono runs on."
msgstr ""
"OSに応じて、\\ ``GODOT_X11``\\ 、\\ ``GODOT_WINDOWS``\\ 、\\ "
"``GODOT_OSX``\\ 、\\ ``GODOT_ANDROID``\\ 、\\ ``GODOT_HTML5``\\ 、または "
"``GODOT_SERVER`` のいずれか1つ。これらの名前は将来変更される可能性がありま"
"す。これらは :ref:``OS <class_OS>`` シングルトンの ``get_name()`` メソッドか"
"ら作成されますが、メソッドが返すすべての利用可能なOSが、Monoを搭載したGodotが"
"実行できるOSというわけではありません。"

msgid ""
"When **exporting**, the following may also be defined depending on the "
"export features:"
msgstr "**エクスポート** する場合、エクスポート機能に応じて以下も定義できます:"

msgid ""
"One of ``GODOT_PC``, ``GODOT_MOBILE``, or ``GODOT_WEB`` depending on the "
"platform type."
msgstr ""
"プラットフォームの種類に応じて、\\ ``GODOT_PC``\\ 、\\ ``GODOT_MOBILE``\\ 、"
"または ``GODOT_WEB`` のいずれか。"

msgid ""
"One of ``GODOT_ARM64_V8A`` or ``GODOT_ARMEABI_V7A`` on Android only "
"depending on the architecture."
msgstr ""
"アーキテクチャにのみ依存するAndroid上の ``GODOT_ARM64_V8A`` または "
"``GODOT_ARMEABI_V7A`` のいずれか。"

#, fuzzy
msgid ""
"One of ``GODOT_ARM64`` or ``GODOT_ARMV7`` on iOS only depending on the "
"architecture."
msgstr ""
"アーキテクチャにのみ依存するAndroid上の ``GODOT_ARM64_V8A`` または "
"``GODOT_ARMEABI_V7A`` のいずれか。"

#, fuzzy
msgid ""
"Any of ``GODOT_S3TC``, ``GODOT_ETC``, and ``GODOT_ETC2`` depending on the "
"texture compression type."
msgstr ""
"テクスチャ圧縮タイプに応じて、\\ ``GODOT_S3TC``\\ 、\\ ``GODOT_ETC``\\ 、また"
"は ``GODOT_ETC2`` のいずれか。"

msgid ""
"Any custom features added in the export menu will be capitalized and "
"prefixed: ``foo`` -> ``GODOT_FOO``."
msgstr ""
"エクスポートメニューに追加されたカスタム機能はすべて大文字になり、接頭辞が付"
"けられます: ``foo`` → ``GODOT_FOO``\\ 。"

#, fuzzy
msgid ""
"To see an example project, see the OS testing demo: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/os_test"
msgstr ""
"明確にするために、これが `bomber demo <https://github.com/godotengine/godot-"
"demo-projects/tree/master/networking/multiplayer_bomber>`_ でどのように見える"
"かの例を示します:"

msgid "Translation status"
msgstr "翻訳ステータス"
