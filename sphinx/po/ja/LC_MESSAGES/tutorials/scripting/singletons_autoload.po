# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Singletons (AutoLoad)"
msgstr "シングルトン(自動読み込み)"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Godot's scene system, while powerful and flexible, has a drawback: there is "
"no method for storing information (e.g. a player's score or inventory) that "
"is needed by more than one scene."
msgstr ""
"Godotのシーンシステムは、強力で柔軟性がある一方、欠点があります: 複数のシーン"
"に必要とされる情報を保存する為の方法が存在しません(例えばプレイヤーのスコアや"
"インベントリ等)。"

msgid ""
"It's possible to address this with some workarounds, but they come with "
"their own limitations:"
msgstr ""
"それを処理出来るにいくつかの代替方法がありますが、それらの方法はそれら自身の"
"制限も伴います:"

msgid ""
"You can use a \"master\" scene that loads and unloads other scenes as its "
"children. However, this means you can no longer run those scenes "
"individually and expect them to work correctly."
msgstr ""
"あなたは\"master\"シーンを使うことが出来、それの子供の他のシーンをロードもし"
"くはアンロード出来ます。しかし、これの意味する所はこれらのシーンを個別にか"
"つ、期待した様に正しく動作させる事が出来ないという事です。"

msgid ""
"Information can be stored to disk in ``user://`` and then loaded by scenes "
"that require it, but frequently saving and loading data is cumbersome and "
"may be slow."
msgstr ""
"情報はディスクの ``user://`` に保存が可能で、シーンが必要とするならばロード出"
"来ますが、頻繁にデータをセーブとロードする事は面倒でさらに遅くもなります。"

msgid ""
"The `Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_ "
"is a useful tool for solving the common use case where you need to store "
"persistent information between scenes. In our case, it's possible to reuse "
"the same scene or class for multiple singletons as long as they have "
"different names."
msgstr ""
"`シングルトンパターン <https://ja.wikipedia.org/wiki/Singleton_パターン>`_\\ "
"は、複数のシーン間で同じ情報を保つ必要があるという、一般的なケースにおいて非"
"常に有用なツールです。私たちの場合では、同じシーンもしくはクラスを複数のシン"
"グルトンにて再利用する事は、それらシングルトンの名前が異なる限り可能です。"

msgid "Using this concept, you can create objects that:"
msgstr "このコンセプトを使うと、オブジェクトを以下のように作る事が出来ます:"

msgid "Are always loaded, no matter which scene is currently running."
msgstr "シーンが現在実行中でも問題なく、いつでもロードされます。"

msgid "Can store global variables such as player information."
msgstr "プレイヤー情報のようなグローバル変数を保管できます。"

msgid "Can handle switching scenes and between-scene transitions."
msgstr "シーンの遷移の切り替えを操作する事ができます。"

msgid ""
"*Act* like a singleton, since GDScript does not support global variables by "
"design."
msgstr ""
"シングルトンのように動作します、デザインによりGDScript はグローバル変数をサ"
"ポートしません。"

msgid "Autoloading nodes and scripts can give us these characteristics."
msgstr "自動読み込みされたノードとスクリプトは我々にこれらの特徴を与えます。"

msgid ""
"Godot won't make an AutoLoad a \"true\" singleton as per the singleton "
"design pattern. It may still be instanced more than once by the user if "
"desired."
msgstr ""
"Godotでは、AutoLoadをシングルトンデザインパターンのような、「本当の」シングル"
"トンにはしていません。必要であれば、ユーザーが複数回インスタンス化することも"
"できます。"

msgid ""
"If you're creating an autoload as part of an editor plugin, consider :ref:"
"`registering it automatically in the Project Settings "
"<doc_making_plugins_autoload>` when the plugin is enabled."
msgstr ""

msgid "AutoLoad"
msgstr "自動読み込み"

msgid ""
"You can create an AutoLoad to load a scene or a script that inherits from :"
"ref:`class_Node`."
msgstr ""
"AutoLoad を作成すれば、 :ref:`class_Node` を継承したシーンやスクリプトをロー"
"ドすることができます。"

msgid ""
"When autoloading a script, a :ref:`class_Node` will be created and the "
"script will be attached to it. This node will be added to the root viewport "
"before any other scenes are loaded."
msgstr ""
"スクリプトを自動読み込みする時、\\ :ref:`class_Node`\\ が作られそれにスクリプ"
"トがアタッチされます。このノードは他のシーンがロードされる前にルートビュー"
"ポートに追加されます。"

msgid ""
"To autoload a scene or script, select **Project > Project Settings** from "
"the menu and switch to the **AutoLoad** tab."
msgstr ""
"シーンもしくはスクリプトを自動読み込みするには、メニューから **プロジェクト "
"> プロジェクト設定** を選び**自動読み込み**タブに切り替えて下さい。"

#, fuzzy
msgid ""
"Here you can add any number of scenes or scripts. Each entry in the list "
"requires a name, which is assigned as the node's ``name`` property. The "
"order of the entries as they are added to the global scene tree can be "
"manipulated using the up/down arrow keys. Like regular scenes, the engine "
"will read these nodes in top-to-bottom order."
msgstr ""
"ここにシーンとスクリプト追加する事が出来ます。リストへの登録は名前を必要と"
"し、それはノードの ``name`` プロパティとして割り当てられます。登録の順序はグ"
"ローバルシーンツリーに追加され、それは上下の矢印キーで操作できます。"

msgid ""
"This means that any node can access a singleton named \"PlayerVariables\" "
"with:"
msgstr ""
"これの意味する所は以下のようにすれば\"PlayerVariables\"と名付けられたシングル"
"トンにアクセス出来るという事です:"

msgid ""
"If the **Enable** column is checked (which is the default), then the "
"singleton can be accessed directly without requiring ``get_node()``:"
msgstr ""
"もし\"有効\"チェックがオンなら(デフォルトでオン)シングルトンは``get_node()``"
"なしに、直接アクセス出来ます:"

msgid ""
"Note that autoload objects (scripts and/or scenes) are accessed just like "
"any other node in the scene tree. In fact, if you look at the running scene "
"tree, you'll see the autoloaded nodes appear:"
msgstr ""
"自動読み込みオブジェクトはちょうどシーンツリーの中の他のノードの様にアクセス"
"される事を心に留めて下さい。実際には、もし実行中のシーンツリーを見たら、自動"
"読み込みされたノードが現れるでしょう:"

msgid ""
"Autoloads must **not** be removed using ``free()`` or ``queue_free()`` at "
"runtime, or the engine will crash."
msgstr ""

msgid "Custom scene switcher"
msgstr "カスタムシーン・スイッチャー"

msgid ""
"This tutorial will demonstrate building a scene switcher using autoloads. "
"For basic scene switching, you can use the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method (see :ref:`doc_scene_tree` for "
"details). However, if you need more complex behavior when changing scenes, "
"this method provides more functionality."
msgstr ""
"このチュートリアルは自動読み込みを使ったシーンスイッチャーの構築を実演しま"
"す。基本的なシーンの切り替えをする為に、\\ :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>`\\ メソッドを使う事が出来ます(詳細は"
"\\ :ref:`doc_scene_tree`\\ を見てください)。しかし、あなたがシーンの変更の"
"際、より複雑なふるまいを必要としているならば、このメソッドはさらなる機能性を"
"提供します。"

msgid ""
"To begin, download the template from here: :download:`autoload.zip <files/"
"autoload.zip>` and open it in Godot."
msgstr ""
"はじめに、ここ:\\ :download:`autoload.zip <files/autoload.zip>`\\ からテンプ"
"レートをダウンロードしGodotで開いて下さい。"

msgid ""
"The project contains two scenes: ``Scene1.tscn`` and ``Scene2.tscn``. Each "
"scene contains a label displaying the scene name and a button with its "
"``pressed()`` signal connected. When you run the project, it starts in "
"``Scene1.tscn``. However, pressing the button does nothing."
msgstr ""
"プロジェクトは2つのシーンを含みます: ``Scene1.tscn`` と ``Scene2.tscn`` 。そ"
"れぞれのシーンはラベル表示されたシーンの名前と ``pressed()`` シグナルを接続さ"
"れたボタンを含みます。プロジェクトを実行した時に、 ``Scene1.tscn`` の中で開始"
"されます。しかし、押すためのボタンがありません。"

msgid "Global.gd"
msgstr "\\ Global.gd"

msgid ""
"Switch to the **Script** tab and create a new script called ``Global.gd``. "
"Make sure it inherits from ``Node``:"
msgstr ""
"**Script** タブに切り替え``Global.gd``という新しいスクリプトを作成して下さ"
"い。 ``Node`` が継承される事を確かめて下さい。"

msgid ""
"The next step is to add this script to the autoLoad list. Open **Project > "
"Project Settings** from the menu, switch to the **AutoLoad** tab and select "
"the script by clicking the browse button or typing its path: ``res://Global."
"gd``. Press **Add** to add it to the autoload list:"
msgstr ""
"次のステップはこのスクリプトを自動読み込みリストに追加する事です。メニューか"
"ら **プロジェクト> プロジェクト設定**と開き、**自動読み込み**タブへ切り替え、"
"ブラウズボタンをクリックして選択するか次のようにパスを入力します: ``res://"
"Global.gd`` 。**追加**をクリックし自動読み込みリストへ追加して下さい:"

msgid ""
"Now whenever we run any scene in the project, this script will always be "
"loaded."
msgstr ""
"これでスクリプトはプロジェクトのシーンを実行する時は、毎回ロードされる様にな"
"りました。"

msgid ""
"Returning to the script, it needs to fetch the current scene in the "
"`_ready()` function. Both the current scene (the one with the button) and "
"``Global.gd`` are children of root, but autoloaded nodes are always first. "
"This means that the last child of root is always the loaded scene."
msgstr ""
"スクリプトに戻り、 `_ready()` 関数内でカレントシーンを持って来る必要がありま"
"す。両方のカレントシーン(片方はボタンを含む)と ``global.gd`` はルートの子供で"
"す。しかし自動読み込みされるノードはいつも最初です。つまりルートの最後の子供"
"はいつも自動読み込みされたシーンになります。"

msgid ""
"Now we need a function for changing the scene. This function needs to free "
"the current scene and replace it with the requested one."
msgstr ""
"今、我々はシーンを遷移させる為の関数を必要としています。この関数はカレント"
"シーンを開放し、要求されたものに置き換える必要があります。"

msgid ""
"Using :ref:`Object.call_deferred() <class_Object_method_call_deferred>`, the "
"second function will only run once all code from the current scene has "
"completed. Thus, the current scene will not be removed while it is still "
"being used (i.e. its code is still running)."
msgstr ""
"\\ :ref:`Object.call_deferred() <class_Object_method_call_deferred>`\\ の使用"
"時は、カレントシーンが完了してから、2つ目の関数のすべてのコードが1回だけ実行"
"されます。従って、カレントシーンは使用されている間には削除されません (すなわ"
"ち、カレントシーンのコードはまだ実行中です)。"

msgid ""
"Finally, we need to fill the empty callback functions in the two scenes:"
msgstr "最後に、2つのシーンの空のコールバック関数を満たさなければなりません。"

msgid "and"
msgstr "そして"

msgid ""
"Run the project and test that you can switch between scenes by pressing the "
"button."
msgstr ""
"プロジェクトの実行とテストをするとボタンを押す事によりシーンの間を切り替えら"
"れます。"

msgid ""
"When scenes are small, the transition is instantaneous. However, if your "
"scenes are more complex, they may take a noticeable amount of time to "
"appear. To learn how to handle this, see the next tutorial: :ref:"
"`doc_background_loading`."
msgstr ""
"シーンが小さい時にはこの遷移は瞬時に行われます。しかし、シーンがより複雑な場"
"合、表示されるのに大量の時間がかかります。これの操作を学ぶには、次のチュート"
"リアルを見て下さい:\\ :ref:`doc_background_loading`\\。"

msgid ""
"Alternatively, if the loading time is relatively short (less than 3 seconds "
"or so), you can display a \"loading plaque\" by showing some kind of 2D "
"element just before changing the scene. You can then hide it just after the "
"scene is changed. This can be used to indicate to the player that a scene is "
"being loaded."
msgstr ""
"また、読み込み時間が比較的短い場合 (3秒以下など) は、シーンが変わる直前に何ら"
"かの2D要素を表示して「ローディング中」画面を表示することもできます。そして、"
"シーンが切り替わった直後にそれを隠すことができます。これは、シーンがロード中"
"であることをプレイヤーに示すために使用できます。"

msgid "Translation status"
msgstr "翻訳ステータス"
