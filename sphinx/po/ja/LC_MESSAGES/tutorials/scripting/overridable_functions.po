# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Overridable functions"
msgstr "オーバーライド可能な関数"

msgid ""
"Godot's Node class provides virtual functions you can override to update "
"nodes every frame or on specific events, like when they enter the scene tree."
msgstr ""
"Godot の Node クラスは、フレームごと、またはシーンツリーに入ったときなどの特"
"定のイベントごとにノードを更新するためにオーバーライドできる仮想関数を提供し"
"ます。"

msgid "This document presents the ones you'll use most often."
msgstr "このドキュメントでは、最も頻繁に使用するものを紹介します。"

msgid ""
"Under the hood, these functions rely on Godot's low-level notifications "
"system. To learn more about it, see :ref:`doc_godot_notifications`."
msgstr ""
"内部では、これらの関数はGodotの低レベルの通知システムに依存しています。詳しく"
"は :ref:`doc_godot_notifications`を参照してください。"

msgid ""
"Two functions allow you to initialize and get nodes, besides the class's "
"constructor: ``_enter_tree()`` and ``_ready()``."
msgstr ""
"クラスのコンストラクターの他に、これらの2つの関数でノードの初期化および取得が"
"できます: ``_enter_tree()`` and ``_ready()``."

msgid ""
"When the node enters the Scene Tree, it becomes active and the engine calls "
"its ``_enter_tree()`` method. That node's children may not be part of the "
"active scene yet. As you can remove and re-add nodes to the scene tree, this "
"function may be called multiple times throughout a node's lifetime."
msgstr ""
"ノードは、シーンツリーに入るとアクティブになり、エンジンはその "
"``_enter_tree()``メソッドを呼び出します。そのノードの子は、まだアクティブな"
"シーンの一部ではないことがあります。また、シーンツリーへのノードの削除と再追"
"加が可能なため、この関数はノードのライフタイムを通して複数回呼び出される可能"
"性があります。"

msgid ""
"Most of the time, you'll use ``_ready()`` instead. This function is called "
"only once in a node's lifetime, after ``_enter_tree()``. ``_ready()`` "
"ensures that all children have entered the scene tree first, so you can "
"safely call ``get_node()`` on it."
msgstr ""
"ほとんどの場合、代わりに ``_ready()``を使うことが多いでしょう。この関数は、"
"ノードのライフタイムの中で、 ``_enter_tree()`` の後に一度だけ呼び出されま"
"す。 ``_ready()`` は、まず全ての子がシーンツリーに入ったことを確認するので、"
"安全に ``get_node()`` を呼び出すことができます。"

msgid ""
"To learn more about getting node references, read :ref:"
"`doc_nodes_and_scene_instances`."
msgstr ""
"ノードの参照取得について詳しくは、\\ :ref:`doc_visual_shaders` を参照してくだ"
"さい。"

msgid ""
"Another related callback is ``_exit_tree()``, which the engine calls every "
"time a node exits the scene tree. This can be when you call :ref:`Node."
"remove_child() <class_Node_method_remove_child>` or when you free a node."
msgstr ""
"もう一つの関連するコールバックは ``_exit_tree()`` で、これはノードがシーンツ"
"リーから出るたびにエンジンが呼び出すものです。これは :ref:`Node."
"remove_child() <class_Node_method_remove_child>` を呼び出すときや、ノードを解"
"放するときに呼び出されます。"

msgid ""
"The two virtual methods ``_process()`` and ``_physics_process()`` allow you "
"to update the node, every frame and every physics frame respectively. For "
"more information, read the dedicated documentation: :ref:"
"`doc_idle_and_physics_processing`."
msgstr ""
"仮想関数 ``_process()`` と ``_physics_process()`` はそれぞれノードを、フレー"
"ム毎、物理フレーム毎に更新することができます。詳しくは、専用のドキュメン"
"ト : :ref:`doc_idle_and_physics_processing` を参照してください。"

msgid ""
"Two more essential built-in node callback functions are :ref:`Node."
"_unhandled_input() <class_Node_method__unhandled_input>` and :ref:`Node."
"_input() <class_Node_method__input>`, which you use to both receive and "
"process individual input events. The ``_unhandled_input()`` method receives "
"every key press, mouse click, etc. that have not been handled already in an "
"``_input()`` callback or in a user interface component. You want to use it "
"for gameplay input in general. The ``_input()`` callback allows you to "
"intercept and process input events before ``_unhandled_input()`` gets them."
msgstr ""
"さらに重要な2つの組み込みノードコールバック関数が :ref:`Node."
"_unhandled_input() <class_Node_method__unhandled_input>` と :ref:`Node."
"_input() <class_Node_method__input>` です。これらは個々の入力イベントを受信し"
"て処理するために使用されます。 ``_unhandled_input()`` メソッドは、 "
"``_input()`` コールバックやユーザーインターフェースコンポーネントでまだ処理さ"
"れていない、すべてのキーの押下、マウスクリックなどを受信します。これは、ゲー"
"ムプレイの入力全般に使用されます。 ``_input()`` コールバックは、 "
"``_unhandled_input()`` が取得する前に入力イベントをインターセプトして処理する"
"ことを可能にします。"

msgid ""
"To learn more about inputs in Godot, see the :ref:`Input section <toc-learn-"
"features-inputs>`."
msgstr ""
"Godotにおける入力の詳細については、 :ref:`Input section <toc-learn-features-"
"inputs>` を参照してください。"

msgid ""
"There are some more overridable functions like :ref:`Node."
"_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Specialized node types "
"provide more callbacks like :ref:`CanvasItem._draw() "
"<class_CanvasItem_method__draw>` to draw programmatically or :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` to handle clicks and input "
"on UI elements."
msgstr ""
"仮想関数は、 :ref:`Node._get_configuration_warning() "
"<class_Node_method__get_configuration_warning>` など他にもいくつかあります。"
"特殊なノードタイプは、プログラムによる描画を行う :ref:`CanvasItem._draw() "
"<class_CanvasItem_method__draw>` や UI 要素のクリックや入力を処理する :ref:"
"`Control._gui_input() <class_Control_method__gui_input>` などのコールバックを"
"提供します。"

msgid "Translation status"
msgstr "翻訳ステータス"
