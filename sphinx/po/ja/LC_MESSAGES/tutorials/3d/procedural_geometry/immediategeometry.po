# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using ImmediateGeometry"
msgstr "ImmediateGeometryの使用"

#, fuzzy
msgid ""
"Unlike the SurfaceTool or ArrayMesh, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>` is an actual node. Being a node makes it quick to "
"add to a scene and get visual output. It uses an OpenGL 1.x-style API like "
"SurfaceTool, but it's actually designed to create meshes on the fly."
msgstr ""
"SurfaceToolやArrayMeshとは異なり、\\ :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>` は実際のノードです。ノードであると、シーンにすばや"
"く追加して視覚的な出力を得ることができます。 SurfaceToolのような\"OpenGL 1."
"x\"スタイルのAPIを使用しますが、実際にはその場でコンテンツを作成するように設"
"計されています。"

msgid ""
"Generating complex geometry (several thousand vertices) with this node is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""
"このノードを使用して複雑なジオメトリ(数千個の頂点)を生成することは、1 回だけ"
"実行された場合でも非効率的です。代わりに、すべてのフレームを変更する単純なジ"
"オメトリを生成するように設計されています。"

msgid ""
"Before starting, you should clear the geometry by calling ``clear()``. This "
"ensures that you are not building upon the geometry from the previous frame. "
"If you want to keep geometry between frames, do not call ``clear()``."
msgstr ""
"開始する前に、\\ ``clear()`` を呼び出してジオメトリをクリアする必要がありま"
"す。これにより、前のフレームのジオメトリに基づいて構築しないことが保証されま"
"す。フレーム間でジオメトリを保持したい場合は、\\ `` clear()`` を呼び出さない"
"でください。"

msgid ""
"To begin generating geometry you must call ``begin()``. ``begin()`` takes a "
"``PrimitiveType`` as an argument. ``PrimitiveType`` is an OpenGL concept "
"that instructs the GPU how to arrange the primitive based on the vertices "
"given whether it is triangles, lines, points, etc. A complete list can be "
"found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""
"ジオメトリの生成を開始するには、\\ ``begin()`` を呼び出す必要があります。\\ "
"``begin()`` は ``PrimitiveType`` を引数として取ります。\\ ``PrimitiveType`` "
"はOpenGLの概念で、三角形、線、点などの頂点に基づいてプリミティブを配置する方"
"法をGPUに指示します。完全なリストは :ref:`Mesh <class_mesh>` のクラスリファレ"
"ンスページにあります。"

msgid ""
"Once you have called ``begin()`` you are ready to start adding vertices. You "
"add vertices one at a time. First you add vertex specific attributes such as "
"normals or UVs using ``set_****()`` (e.g. ``set_normal()``). Then you call "
"``add_vertex()`` to add a vertex with those attributes. For example:"
msgstr ""
"`` begin()`` を呼び出したら、頂点の追加を開始する準備ができています。頂点を1"
"つずつ追加します。まず、\\ ``set _ ****()`` を使用して、法線やUVなどの頂点固"
"有の属性を追加します(例: ``set_normal()``)。次に、\\ ``add_vertex()`` を呼び"
"出して、これらの属性を持つ頂点を追加します。例えば:"

msgid ""
"Only attributes added before the call to ``add_vertex()`` will be included "
"in that vertex."
msgstr ""
"``add_vertex()`` の呼び出しの前に追加された属性のみがその頂点に含まれます。"

msgid ""
"Finally, once you have added all your vertices call ``end()`` to signal that "
"you have finished generating the mesh."
msgstr ""
"最後に、頂点をすべて追加したら ``end()`` を呼び出して、メッシュの生成が終了し"
"たことを知らせます。"

msgid "The example code below draws a single triangle."
msgstr "以下のサンプルコードは、単一の三角形を描画します。"

msgid "Translation status"
msgstr "翻訳ステータス"
