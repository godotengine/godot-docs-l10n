# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "ArrayMeshの使用"

#, fuzzy
msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""
"このチュートリアルでは、\\ :ref:`ArrayMesh <class_arraymesh>` の使用法の基本"
"を紹介します"

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""
"そのためには、関数 :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` を使用します。これは最大4つ"
"のパラメーターを取ります。最初の2つは必須ですが、残りの2つはオプションです。"

#, fuzzy
msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"1つ目は ``PrimitiveType`` です。これは、三角形、線、点などであるかどうかにか"
"かわらず、頂点に基づいてプリミティブを配置する方法をGPUに指示するOpenGLの概念"
"です。完全なリストは下の :ref:`Mesh <class_mesh>` クラスのリファレンスページ"
"にあります。"

#, fuzzy
msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Pool**Array`` (e.g. PoolVector3Array, "
"PoolIntArray, etc.) for each type of information that will be used to build "
"the surface."
msgstr ""
"2番目は、メッシュ情報を格納する実際の配列です。配列は、空のブラケット ``[]`` "
"で構成される通常のGodot配列です。情報の種類ごとに ``Pool**Array`` "
"(PoolVector3Array、PoolIntArrayなど)を格納します。"

msgid ""
"The possible elements of ``arrays`` are listed below, together with the "
"position they must have within ``arrays``. See also :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>`."
msgstr ""

msgid "Index"
msgstr "インデックス"

msgid "Mesh.ArrayType Enum"
msgstr ""

#, fuzzy
msgid "Array type"
msgstr "配列パターン"

msgid "0"
msgstr "\\ 0"

msgid "``ARRAY_VERTEX``"
msgstr ""

#, fuzzy
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>` or :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"
msgstr ""
"\\ :ref:`PoolVector2Array <class_PoolVector2Array>`: \\ :ref:`Vector2 "
"<class_Vector2>` の配列。"

msgid "1"
msgstr "\\ 1"

msgid "``ARRAY_NORMAL``"
msgstr ""

#, fuzzy
msgid ":ref:`PoolVector3Array <class_PoolVector3Array>`"
msgstr "\\ 25: :ref:`PoolVector3Array<class_poolvector3array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr ""

#, fuzzy
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. First 3 "
"floats determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""
"``ARRAY_TANGENT`` = 2 | 4つのfloatが一組になったPoolRealArray。最初の3つの"
"floatは接線を決定し、最後の従法線の方向は-1または1です。"

msgid "3"
msgstr "\\ 3"

msgid "``ARRAY_COLOR``"
msgstr ""

#, fuzzy
msgid ":ref:`PoolColorArray <class_PoolColorArray>`"
msgstr "\\ 26: :ref:`PoolColorArray<class_poolcolorarray>`"

msgid "4"
msgstr "\\ 4"

msgid "``ARRAY_TEX_UV``"
msgstr ""

#, fuzzy
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>` or :ref:`PoolVector3Array "
"<class_PoolVector3Array>`"
msgstr ""
"\\ :ref:`PoolVector2Array <class_PoolVector2Array>`: \\ :ref:`Vector2 "
"<class_Vector2>` の配列。"

msgid "5"
msgstr "\\ 5"

msgid "``ARRAY_TEX_UV2``"
msgstr ""

msgid "6"
msgstr "\\ 6"

msgid "``ARRAY_BONES``"
msgstr ""

#, fuzzy
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats or :ref:"
"`PoolIntArray <class_PoolIntArray>` of groups of 4 ints. Each group lists "
"indexes of 4 bones that affects a given vertex."
msgstr ""
"``ARRAY_BONES`` = 6 | 4つのfloatが一組になったPoolRealArrayまたは4つのintが一"
"組になったPoolIntArray"

msgid "7"
msgstr "\\ 7"

msgid "``ARRAY_WEIGHTS``"
msgstr ""

#, fuzzy
msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. Each float "
"lists the amount of weight an determined bone on ``ARRAY_BONES`` has on a "
"given vertex."
msgstr ""
"``ARRAY_TANGENT`` = 2 | 4つのfloatが一組になったPoolRealArray。最初の3つの"
"floatは接線を決定し、最後の従法線の方向は-1または1です。"

msgid "8"
msgstr "\\ 8"

#, fuzzy
msgid "``ARRAY_INDEX``"
msgstr "\\ ``ARRAY_INDEX`` = 8 | PoolIntArray"

#, fuzzy
msgid ":ref:`PoolIntArray <class_PoolIntArray>`"
msgstr "\\ 21: :ref:`PoolIntArray<class_poolintarray>`"

#, fuzzy
msgid ""
"The array of vertices (at index 0) is always required. The index array is "
"optional and will only be used if included. We won't use it in this tutorial."
msgstr ""
"頂点の配列は常に必要です。他のすべてはオプションであり、含まれている場合にの"
"み使用されます。"

msgid ""
"All the other arrays carry information about the vertices. They are also "
"optional and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""

#, fuzzy
msgid ""
"For normal usage, the last two parameters in :ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` are typically left empty."
msgstr ""
"そのためには、関数 :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` を使用します。これは最大4つ"
"のパラメーターを取ります。最初の2つは必須ですが、残りの2つはオプションです。"

msgid "ArrayMesh"
msgstr "\\ ArrayMesh"

#, fuzzy
msgid ""
"In the editor, create a :ref:`MeshInstance <class_meshinstance>` and add an :"
"ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, adding "
"an ArrayMesh in the editor is not useful, but in this case it allows us to "
"access the ArrayMesh from code without creating one."
msgstr ""
":ref:`ArrayMesh <class_arraymesh>` をMeshInstanceに追加します。通常、エディタ"
"にArrayMeshを追加することは有用ではありませんが、この場合、コードを作成せずに"
"コードからArrayMeshにアクセスできます。"

msgid "Next, add a script to the MeshInstance."
msgstr "次に、MeshInstanceにスクリプトを追加します。"

msgid "Under ``_ready()``, create a new Array."
msgstr "``_ready()`` 下に、新しい配列を作成します。"

#, fuzzy
msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"これは、サーフェス情報を保持する配列になり、サーフェスに必要なすべてのデータ"
"配列を保持します。 Godotは、サイズが ``Mesh.ARRAY_MAX`` であることを期待する"
"ため、それに応じてサイズを変更します。"

msgid "Next create the arrays for each data type you will use."
msgstr "次に、使用する各データ型の配列を作成します。"

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"データ配列にジオメトリを入力したら、各配列を ``surface_array`` に追加し、メッ"
"シュにコミットすることでメッシュを作成できます。"

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"この例では、\\ ``Mesh.PRIMITIVE_TRIANGLES`` を使用しましたが、メッシュから利"
"用可能な任意のプリミティブタイプを使用できます。"

#, fuzzy
msgid "Put together, the full code looks like:"
msgstr "完全なコードをまとめると次のようになります:"

#, fuzzy
msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"中間にあるコードは、あなたが望むものなら何でも構いません。以下に、途中で実行"
"できるコード例を示します。"

msgid "Generating geometry"
msgstr "ジオメトリの生成"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"球体を生成するためのサンプルコードを次に示します。コードはGDScriptで表示され"
"ますが、コードを生成する方法についてGodot固有のものはありません。この実装は、"
"ArrayMeshとは特に関係がなく、球体を生成するための一般的なアプローチです。理解"
"に問題がある場合、または手続き型ジオメトリ全般について詳しく知りたい場合は、"
"オンラインで見つけたチュートリアルを使用できます。"

msgid "Saving"
msgstr "保存"

#, fuzzy
msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"最後に、Godotは :ref:`ResourceSaver <class_resourcesaver>` クラスを使用して"
"ArrayMeshを保存する単一のメソッドを提供します。これは、メッシュを生成し、後で"
"再生成することなく再利用する場合に便利です。"

msgid "Translation status"
msgstr "翻訳ステータス"
