# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to 3D"
msgstr "3Dの概要"

msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simple no longer work. To "
"aid in this transition, it is worth mentioning that Godot uses similar APIs "
"for 2D and 3D. Most nodes are the same and are present in both 2D and 3D "
"versions. In fact, it is worth checking the 3D platformer tutorial, or the "
"3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""
"3Dゲームの作成は難しい場合があります。 その余分なZ座標により、2Dゲームをシン"
"プルにするのに役立った多くの一般的な手法が機能しなくなります。 この移行を支援"
"するために、Godotは2Dおよび3Dに同様のAPIを使用していることに言及する価値があ"
"ります。 ほとんどのノードは同じであり、2Dバージョンと3Dバージョンの両方に存在"
"します。 実際、3Dプラットフォーマーチュートリアル、または3Dキネマティックキャ"
"ラクターチュートリアルを確認する価値があります。"

msgid ""
"In 3D, math is a little more complex than in 2D, so also checking the :ref:"
"`doc_vector_math` entry in the wiki (which was especially created for game "
"developers, not mathematicians or engineers) will help pave the way for you "
"to develop 3D games efficiently."
msgstr ""
"3Dでは、数学は2Dよりもやや複雑です。したがって、wikiの :ref:"
"`doc_vector_math` エントリ(数学者やエンジニアではなく、ゲーム開発者向けに特別"
"に作成されたもの)をチェックすることで、3Dゲームを効率的に開発する道を開くのに"
"役立ちます。"

msgid "Spatial node"
msgstr "Spatialノード"

msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Spatial <class_Spatial>` node for "
"everything 3D."
msgstr ""
":ref:`Node2D <class_Node2D>` は2Dのベースノードです。\\ :ref:`Control "
"<class_Control>` は、すべてのGUIのベースノードです。 この推論に従って、3Dエン"
"ジンはすべての3Dに対して :ref:`Spatial <class_Spatial>` ノードを使用します。"

#, fuzzy
msgid ""
"Spatial nodes have a local transform, which is relative to the parent node "
"(as long as the parent node is also of **or inherits from** the type "
"Spatial). This transform can be accessed as a 4×3 :ref:`Transform "
"<class_Transform>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (X, Y and Z angles) and scale."
msgstr ""
"Spatialノードには、親ノードに相対的なローカルな幾何学変換があります(親ノード"
"もSpatial型で\\ **あるか、または継承している**\\ 限り)。この変換は、4x3 :ref:"
"`Transform <class_Transform>` として、または位置、オイラー回転(x、y、zの角度)"
"およびスケールを表す3 :ref:`Vector3 <class_Vector3>` メンバーとしてアクセスで"
"きます。"

msgid "3D content"
msgstr "3Dコンテンツ"

#, fuzzy
msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (usually referred to as Digital Content Creation tools, or DCCs) and "
"exported to an exchange file format to be imported in Godot. This is "
"required since 3D formats are not as standardized as images."
msgstr ""
"画像コンテンツの読み込みと描画が簡単な2Dとは異なり、3Dはもう少し難しくなりま"
"す。コンテンツは、特別な3Dツール(通常DCCと呼ばれます)で作成し、Godotでイン"
"ポートするために交換用のファイル形式にエクスポートする必要があります(3D形式は"
"画像ほど標準化されていません)。"

msgid "DCC-created models"
msgstr "DCCで作成されたモデル"

msgid ""
"There are two pipelines to import 3D models in Godot. The first and most "
"common one is by :ref:`doc_importing_3d_scenes`, which allows you to import "
"entire scenes (just as they look in the DCC), including animation, skeletal "
"rigs, blend shapes, etc."
msgstr ""
"Godotに3Dモデルをインポートするには、2つのパイプラインがあります。最初の最も"
"一般的な方法は、\\ :ref:`doc_importing_3d_scenes` によるもので、アニメーショ"
"ン、スケルタルリグ、ブレンドシェイプなどを含むシーン全体を(DCCで見たとおりに)"
"インポートできます。"

msgid ""
"The second pipeline is by importing simple .OBJ files as mesh resources, "
"which can be then put inside a :ref:`MeshInstance <class_MeshInstance>` node "
"for display."
msgstr ""
"2番目のパイプラインは、単純な.OBJファイルをメッシュリソースとしてインポート"
"し、表示用に :ref:`MeshInstance <class_MeshInstance>` ノード内に配置できま"
"す。"

msgid "Generated geometry"
msgstr "生成されたジオメトリ"

msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use the :"
"ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""
":ref:`ArrayMesh <class_ArrayMesh>` リソースを直接使用して、カスタムジオメトリ"
"を作成することができます。単純に配列を作成し、\\ :ref:`ArrayMesh."
"add_surface_from_arrays() <class_ArrayMesh_method_add_surface_from_arrays>` "
"関数を使用します。\\ :ref:`SurfaceTool <class_SurfaceTool>` というヘルパーク"
"ラスも利用できます。これは、インデックス作成、法線、接線などの生成のためのよ"
"り単純なAPIとヘルパーを提供します。"

msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""
"いずれの場合でも、頂点配列を作成して3D APIに送信するとパフォーマンスが大幅に"
"低下するため、このメソッドは静的なジオメトリ(頻繁に更新されないモデル)を生成"
"するためのものです。"

msgid "Immediate geometry"
msgstr "即時ジオメトリ"

msgid ""
"If, instead, there is a requirement to generate simple geometry that will be "
"updated often, Godot provides a special node, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>`, which provides an OpenGL 1.x style immediate-"
"mode API to create points, lines, triangles, etc."
msgstr ""
"代わりに、頻繁に更新される単純なジオメトリを生成する必要がある場合、Godotは、"
"ポイントを作成するためのOpenGL 1.xスタイルの即時モードAPIを提供する特別なノー"
"ド :ref:`ImmediateGeometry <class_ImmediateGeometry>` を提供して点、線、三角"
"形などを作成します。"

msgid "2D in 3D"
msgstr "3Dでの2D"

msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:"
"`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games "
"that take advantage of mixing with 3D backgrounds, more realistic parallax, "
"lighting/shadow effects, etc."
msgstr ""
"Godotは強力な2Dエンジンを搭載していますが、多くのタイプのゲームは3D環境で2Dを"
"使用しています。回転しない固定カメラ(直交または遠近法)を使用することで、\\ :"
"ref:`Sprite3D <class_Sprite3D>` や :ref:`AnimatedSprite3D "
"<class_AnimatedSprite3D>` などのノードを使用して、3D 背景、よりリアルな視差、"
"照明/影の効果などのミキシングを利用した2Dゲームを作成できます。"

msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""
"欠点は、もちろん、プレーンな2Dと比較して複雑さが増し、パフォーマンスが低下す"
"ることと、ピクセル単位で作業ができないことです。"

msgid "Environment"
msgstr "環境"

msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""
"シーンの編集に加えて、環境を編集することもよくあります。 Godotは :ref:"
"`WorldEnvironment <class_WorldEnvironment>` ノードを提供します。これにより、"
"背景色、モード(スカイボックスを置くなど)を変更し、いくつかのタイプの組み込み"
"のポストプロセッシングエフェクトを適用できます。環境はカメラでも上書きできま"
"す。"

msgid "3D viewport"
msgstr "3Dビューポート"

msgid ""
"Editing 3D scenes is done in the 3D tab. This tab can be selected manually, "
"but it will be automatically enabled when a Spatial node is selected."
msgstr ""
"3Dシーンの編集は、3Dタブで行います。このタブは手動で選択できますが、Spatial"
"ノードを選択すると自動的に有効になります。"

msgid ""
"Default 3D scene navigation controls are similar to Blender (aiming to have "
"some sort of consistency in the free software pipeline..), but options are "
"included to customize mouse buttons and behavior to be similar to other "
"tools in the Editor Settings:"
msgstr ""
"デフォルトの3Dシーン ナビゲーション コントロールは Blender(フリーソフトウェア"
"のパイプラインに何らかの一貫性を持たせることを目指しています)に似ていますが、"
"マウス ボタンと動作を [エディタ設定] の他のツールと同様にカスタマイズするため"
"のオプションが含まれています。"

msgid "Coordinate system"
msgstr "座標系"

#, fuzzy
msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything in 3D, with 1 unit being equal to 1 meter. Physics and "
"other areas are tuned for this scale. Therefore, attempting to use a "
"different scale is usually a bad idea (unless you know what you are doing)."
msgstr ""
"Godotは全てに `メートル法 <https://ja.wikipedia.org/wiki/メートル法>`_ を使用"
"します。3D物理および、その他の分野はメートル法で調整されているため、(自分がす"
"ることを理解していないなら)違うスケールを使用するのは通常は良くない考えです。"

#, fuzzy
msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set your DCC to metric). Godot allows scaling post-import and, while this "
"works in most cases, in rare situations it may introduce floating-point "
"precision issues (and thus, glitches or artifacts) in delicate areas such as "
"rendering or physics. Make sure your artists always work in the right scale!"
msgstr ""
"3Dアセットについて作業するときは、常に正しいスケールで作業することが最善です"
"(DCCツールをメートル法に設定します)。 Godotはインポート後のスケーリングは可能"
"で、ほとんどの場合これは機能しますが、まれにレンダリングや物理などのデリケー"
"トな領域で浮動小数点精度の問題(グリッチやアーティファクトなど)が発生する可能"
"性があるため、アーティストは常に適切なスケールで作業するようにしてください！"

msgid ""
"The Y coordinate is used for \"up\", though for most objects that need "
"alignment (like lights, cameras, capsule collider, vehicle, etc.), the Z "
"axis is used as a \"pointing towards\" direction. This convention roughly "
"means that:"
msgstr ""
"Y軸は「上方向」に使用され、位置合わせが必要なほとんどのオブジェクト (ライト、"
"カメラ、CapsuleCollider、Vehicleなど) では、Z軸は「向いている方向」として使用"
"されます。この規則は、おおよそ次のことを意味します:"

msgid "**X** is sides"
msgstr "X軸は左右"

msgid "**Y** is up/down"
msgstr "Y軸は上下"

msgid "**Z** is front/back"
msgstr "Z軸は前後"

msgid "Space and manipulation gizmos"
msgstr "空間と操作のギズモ"

#, fuzzy
msgid ""
"Moving objects in the 3D view is done through the manipulator gizmos. Each "
"axis is represented by a color: Red, Green, Blue represent X, Y, Z "
"respectively. This convention applies to the grid and other gizmos too (and "
"also to the shader language, ordering of components for Vector3, Color, "
"etc.)."
msgstr ""
"3Dビューでのオブジェクトの移動は、マニピュレーターギズモを介して行われます。"
"各軸は色で表されます。赤、緑、青はそれぞれX、Y、Zを表します。この規則は、グ"
"リッドおよびその他のギズモにも適用されます(また、シェーダー言語、Vector3、"
"Colorなどのコンポーネントの順序にも適用されます)。"

msgid "Some useful keybindings:"
msgstr "いくつかの便利なキーバインド:"

msgid ""
"To snap placement or rotation, press :kbd:`Ctrl` while moving, scaling or "
"rotating."
msgstr ""
"配置または回転をスナップするには、移動、スケーリング、または回転中に :kbd:"
"`Ctrl` を押します。"

msgid "To center the view on the selected object, press :kbd:`F`."
msgstr ""
"ビューを選択したオブジェクトの中央に配置するには、\\ :kbd:`F` を押します。"

msgid "View menu"
msgstr "ビューメニュー"

msgid ""
"The view options are controlled by the \"View\" menu in the viewport's "
"toolbar."
msgstr ""
"表示オプションは、ビューポートのツールバーの[ビュー]メニューで制御されます。"

msgid "You can hide the gizmos in the 3D view of the editor through this menu:"
msgstr "このメニューを使用して、エディタの3Dビューでギズモを非表示にできます:"

msgid ""
"To hide a specific type of gizmos, you can toggle them off in the \"View\" "
"menu."
msgstr ""
"特定の種類のギズモを非表示にするには、[ビュー]メニューでオフに切り替えます。"

msgid "Default environment"
msgstr "デフォルトの環境"

msgid ""
"When created from the Project Manager, the 3D environment has a default sky."
msgstr ""
"プロジェクトマネージャーから作成した場合、3D環境にはデフォルトの空がありま"
"す。"

msgid ""
"Given how physically based rendering works, it is advised to always try to "
"work with a default environment in order to provide indirect and reflected "
"light to your objects."
msgstr ""
"物理に基づいたレンダリングがどのように機能するかを考えると、オブジェクトに間"
"接光と反射光を提供するために、常にデフォルト環境で作業することをお勧めしま"
"す。"

msgid "Cameras"
msgstr "カメラ"

msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera <class_Camera>` is also added to the scene. "
"Cameras can work in either orthogonal or perspective projections:"
msgstr ""
"3Dスペースにいくつのオブジェクトを配置しても、シーンに :ref:`Camera "
"<class_Camera>` が追加されない限り、何も表示されません。カメラは、正投影また"
"は透視投影のいずれかで動作できます:"

msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""
"カメラは、親または祖父母のビューポートに関連付けられています(表示のみ)。シー"
"ンツリーのルートはビューポートであるため、カメラはデフォルトでその上に表示さ"
"れますが、サブビューポート(レンダーターゲットまたはピクチャーインピクチャーと"
"して)が必要な場合は、その表示用に子カメラが必要です。"

msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr "複数のカメラを扱う場合、各ビューポートに次のルールが適用されます:"

msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""
"シーン ツリーにカメラが存在しない場合、最初に入力したカメラがアクティブなカメ"
"ラになります。その後でシーンに入ってくるカメラは無視されます(*current* に設定"
"されていないかぎり)。"

msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""
"カメラに\"*current*\"プロパティが設定されている場合、シーン内の他のカメラに関"
"係なくそれが使用されます。このプロパティが設定されている場合は、それまでのカ"
"メラを置き換えて、アクティブになります。"

msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr ""
"アクティブなカメラがシーンツリーを離れると、ツリー順の最初のカメラが代わりに"
"なります。"

msgid "Lights"
msgstr "ライト"

#, fuzzy
msgid ""
"Godot has a limit of up to 8 lights per mesh. Aside from that, there is no "
"limitation on the number of lights, nor of types of lights, in Godot. As "
"many as desired can be added, as long as performance allows, and no more "
"than 8 lights shine on a single mesh."
msgstr ""
"Godotのライトの数やライトのタイプに制限はありません。必要な数を追加できます"
"(パフォーマンスが許す限り)。"

msgid "Translation status"
msgstr "翻訳ステータス"
