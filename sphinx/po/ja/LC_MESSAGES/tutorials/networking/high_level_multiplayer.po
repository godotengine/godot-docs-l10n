# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "High-level multiplayer"
msgstr "高レベルのマルチプレイヤー"

#, fuzzy
msgid "High-level vs low-level API"
msgstr "高レベルAPIと低レベルAPI"

msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""
"以下では、Godotの高レベルネットワークと低レベルネットワークの違いといくつかの"
"基本事項について説明します。基本をとばして最初のノードにネットワークを追加す"
"る場合は、以下の `Initializing the network`_ までスキップしてください。ただ"
"し、後で残りも読んでください！"

msgid ""
"Godot always supported standard low-level networking via UDP, TCP and some "
"higher level protocols such as SSL and HTTP. These protocols are flexible "
"and can be used for almost anything. However, using them to synchronize game "
"state manually can be a large amount of work. Sometimes that work can't be "
"avoided or is worth it, for example when working with a custom server "
"implementation on the backend. But in most cases, it's worthwhile to "
"consider Godot's high-level networking API, which sacrifices some of the "
"fine-grained control of low-level networking for greater ease of use."
msgstr ""
"Godotは、UDP、TCP、およびSSLやHTTPなどの一部の高レベルプロトコルを介した標準"
"の低レベルネットワークを常にサポートしてきました。これらのプロトコルは柔軟性"
"があり、ほとんどすべてに使用できます。ただし、ゲームの状態を手動で同期するた"
"めにそれらを使用すると、多大な作業が必要になる場合があります。バックエンドで"
"カスタムサーバー実装を使用する場合など、その作業を回避できない場合や、そうす"
"るほうが価値がある場合があります。しかし、ほとんどの場合、使いやすさを高める"
"ために低レベルネットワークのきめ細かな制御の一部を犠牲にしてでも、Godotの高レ"
"ベルネットワークAPIを検討する価値があります。"

msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr "これは、低レベルプロトコルの固有の制限によるものです:"

msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""
"TCPは、パケットが常に確実に順序どおりに到着することを保証しますが、一般に、エ"
"ラー修正のために待ち時間が長くなります。また、手順に「接続(connection)」を必"
"要とし、マルチプレイヤーゲームのようなアプリケーションには向かない目的に合わ"
"せて最適化されているので、非常に複雑なプロトコルでもあります。パケットはより"
"大きなバッチで送信されるようにバッファリングされ、パケットごとのオーバーヘッ"
"ドが少なくなり、待ち時間が長くなります。これはHTTPのようなものには便利です"
"が、一般的にはゲームには役立ちません。この一部は、(例えば、TCP接続の「Nagleの"
"アルゴリズム」を無効にすることによって)設定および無効にすることができます。"

msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""
"UDPはより単純なプロトコルであり、パケットのみを送信します(「接続」の概念はあ"
"りません)。エラー修正を行わないので処理がかなり速くなりますが(低遅延)、パケッ"
"トは途中で失われたり、間違った順序で受信されたりする可能性があります。それに"
"加えて、UDPのMTU(最大パケットサイズ)は一般的に小さい(数百バイトのみ)ため、大"
"きなパケットを送信することは、パケットを分割し、再編成し、一部が失敗した場合"
"に再試行することを意味します。"

msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""
"一般に、TCPは信頼性が高く、順序があり、低速であると考えることができます。それ"
"に対し、UDPは信頼性がなく、順序がなく、高速であるといえます。パフォーマンスが"
"大きく異なるため、多くの場合、ゲームに必要なTCPの部分(オプションの信頼性とパ"
"ケット順序)を再構築し、不要な部分(輻輳/トラフィック制御機能、Nagleのアルゴリ"
"ズムなど)を回避することは理にかなっています。このため、ほとんどのゲームエンジ"
"ンにはこのような実装が付属しており、Godotも例外ではありません。"

msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""
"要約すると、低レベルのネットワークAPIを使用して最大限の制御を行い、すべてを素"
"のネットワークプロトコルの上に実装するか、または `SceneTree "
"<class_SceneTree>`に基づいた高レベルAPIを使用するかです。これは、一般的に最適"
"化された方法で、シーンの後ろで重い処理を引き受けます。"

#, fuzzy
msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently offers WebSockets and WebRTC support but lacks some of the higher-"
"level features, as well as raw access to low-level protocols like TCP and "
"UDP."
msgstr ""
"Godotがサポートするプラットフォームのほとんどは、言及された高レベルおよび低レ"
"ベルのネットワーク機能のすべてまたはほとんどを提供します。ただし、ネットワー"
"クは常にハードウェアとオペレーティングシステムに大きく依存しているため、一部"
"のターゲットプラットフォームでは一部の機能が変更されたり利用できない場合があ"
"ります。最も顕著ものとしてHTML5プラットフォームは、現在、WebSocketサポートの"
"みを提供しており、TCPやUDPのような低レベルのプロトコルへの未加工のアクセスだ"
"けでなく、より高いレベルの機能の一部も欠いています。"

#, fuzzy
msgid ""
"More about TCP/IP, UDP, and networking: https://gafferongames.com/post/"
"udp_vs_tcp/"
msgstr ""
"TCP/IP、UDP、およびネットワーキングの詳細: https://web.archive.org/"
"web/20190406162102/https://gafferongames.com/post/udp_vs_tcp/"

#, fuzzy
msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://gafferongames.com/categories/game-networking/>`__), "
"including the comprehensive `introduction to networking models in games "
"<https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""
"Gaffer On Gamesには、ゲームのネットワーキングに関する便利な記事が多数あります"
"(`こちら　https://web.archive.org/web/20190405204744/https://gafferongames."
"com/tags/networking/>`__)、包括的な `ゲームのネットワークモデルの紹介 "
"<http://web.archive.org/web/20190407004521/https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__。"

msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""
"Godotの組み込みネットワークではなく、選択した低レベルネットワークライブラリを"
"使用する場合は、次の例を参照してください: https://github.com/PerduGames/"
"gdnet3"

msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users data if they play your game."
msgstr ""
"ゲームにネットワークを追加するには、ある程度の責任が伴います。間違って実行す"
"ると、アプリケーションが脆弱になり、チートや悪用につながる可能性があります。"
"攻撃者がアプリケーションを実行しているマシンを危険にさらし、サーバーを使用し"
"てスパムを送信したり、他のユーザーを攻撃したり、ユーザーがゲームをプレイして"
"いる場合にユーザーデータを盗んだりすることもできます。"

msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""
"これは、ネットワーキングが関係する場合に常に当てはまり、Godotとは関係ありませ"
"ん。もちろん実験はできますが、ネットワークアプリケーションをリリースするとき"
"は、考えられるセキュリティ上の問題に常に注意してください。"

msgid "Mid level abstraction"
msgstr "中レベルの抽象化"

msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""
"ネットワークを介してゲームを同期する方法に入る前に、同期のための基本のネット"
"ワークAPIがどのように機能するかを理解しておくと役立ちます。"

#, fuzzy
msgid ""
"Godot uses a mid-level object :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`. This object is not meant to be created "
"directly, but is designed so that several C++ implementations can provide it."
msgstr ""
"Godotは、中間レベルのオブジェクト :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>` を使用します。このオブジェクトは直接作成す"
"るためのものではなく、いくつかの実装が提供できるように設計されています。"

msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""
"このオブジェクトは :ref:`PacketPeer <class_PacketPeer>` から継承されるため、"
"データのシリアル化、送信、受信に役立つすべてのメソッドを引き継ぎます。さら"
"に、ピア、転送モードなどを設定するメソッドを追加します。また、ピアが接続また"
"は切断したときに通知するシグナルも含まれています。"

#, fuzzy
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), one based "
"on WebRTC (:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`), and one "
"based on WebSocket (:ref:`WebSocketMultiplayerPeer "
"<class_WebSocketMultiplayerPeer>`), but this could be used to implement "
"mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/console-specific "
"networking APIs."
msgstr ""
"このクラスインターフェイスは、ほとんどの種類のネットワーク層、トポロジ、およ"
"びライブラリを抽象化できます。デフォルトでは、GodotはENet(:ref:"
"`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`)に基づいた実装、"
"WebRTC(:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`)に基づいた実装、お"
"よびWebSocket(:ref:`WebSocketMultiplayerPeer < "
"class_WebSocketMultiplayerPeer> `)に基づいた実装を提供しますが、これはモバイ"
"ルAPI(アドホックWiFi、Bluetooth用)またはカスタムデバイス/コンソール固有のネッ"
"トワークAPIを実装するために使用できます。"

msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. Yet it is made available "
"in case a game has specific needs for a lower level API."
msgstr ""
"ほとんどの場合、Godotはさらに高度なネットワーク機能を提供するため、このオブ"
"ジェクトを直接使用することはお勧めしません。 それでも、ゲームに低レベルAPIの"
"特定のニーズがある場合に利用できます。"

msgid "Initializing the network"
msgstr "ネットワークの初期化"

msgid ""
"The object that controls networking in Godot is the same one that controls "
"everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""
"Godotでネットワークを制御するオブジェクトは、ツリー関連のすべてを制御するオブ"
"ジェクトと同じです: :ref:`SceneTree <class_SceneTree>`\\ 。"

#, fuzzy
msgid ""
"To initialize high-level networking, the SceneTree must be provided a "
"NetworkedMultiplayerPeer object."
msgstr ""
"高レベルのネットワークを初期化するには、SceneTreeにNetworkedMultiplayerPeerオ"
"ブジェクトを提供する必要があります。"

msgid ""
"To create that object, it first has to be initialized as a server or client."
msgstr ""
"そのオブジェクトを作成するには、最初にサーバーまたはクライアントとして初期化"
"する必要があります。"

msgid ""
"Initializing as a server, listening on the given port, with a given maximum "
"number of peers:"
msgstr ""
"指定された最大ピア数を使用して、指定されたポートでリッスンするサーバーとして"
"初期化します:"

msgid "Initializing as a client, connecting to a given IP and port:"
msgstr "クライアントとして初期化して、特定のIPとポートに接続します:"

msgid "Get the previously set network peer:"
msgstr "以前に設定したネットワーク ピアを取得します:"

msgid "Checking whether the tree is initialized as a server or client:"
msgstr ""
"ツリーがサーバーまたはクライアントとして初期化されているかどうかを確認します:"

msgid "Terminating the networking feature:"
msgstr "ネットワーク機能の終了:"

msgid ""
"(Although it may make sense to send a message first to let the other peers "
"know you're going away instead of letting the connection close or timeout, "
"depending on your game.)"
msgstr ""
"(ゲームによっては、接続を閉じたりタイムアウトしたりするのではなく、他のピアに"
"自分が離れることを知らせるために、最初にメッセージを送信することは理にかなっ"
"ています。)"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""

msgid "Managing connections"
msgstr "接続の管理"

msgid ""
"Some games accept connections at any time, others during the lobby phase. "
"Godot can be requested to no longer accept connections at any point (see "
"``set_refuse_new_network_connections(bool)`` and related methods on :ref:"
"`SceneTree <class_SceneTree>`). To manage who connects, Godot provides the "
"following signals in SceneTree:"
msgstr ""
"いつでも接続を受け入れるゲームもあれば、ロビーの段階で接続するゲームもありま"
"す。 Godotは、どの時点でも接続を許可しないように要求できます"
"(``set_refuse_new_network_connections(bool)`` および :ref:`SceneTree "
"<class_SceneTree>` の関連メソッドを参照)。 接続するユーザーを管理するために、"
"Godot はSceneTreeで次のシグナルを提供します:"

msgid "Server and Clients:"
msgstr "サーバー及びクライアント:"

msgid "``network_peer_connected(int id)``"
msgstr "``network_peer_connected(int id)``"

msgid "``network_peer_disconnected(int id)``"
msgstr "``network_peer_disconnected(int id)``"

msgid ""
"The above signals are called on every peer connected to the server "
"(including on the server) when a new peer connects or disconnects. Clients "
"will connect with a unique ID greater than 1, while network peer ID 1 is "
"always the server. Anything below 1 should be handled as invalid. You can "
"retrieve the ID for the local system via :ref:`SceneTree."
"get_network_unique_id() <class_SceneTree_method_get_network_unique_id>`. "
"These IDs will be useful mostly for lobby management and should generally be "
"stored, as they identify connected peers and thus players. You can also use "
"IDs to send messages only to certain peers."
msgstr ""
"上記のシグナルは、新しいピアが接続または切断したときに、サーバーに接続されて"
"いるすべてのピア(サーバー上を含む)で呼び出されます。 クライアントは1より大き"
"い一意のIDで接続しますが、ネットワークピアID 1は常にサーバーです。 1未満は無"
"効として処理されます。ローカルシステムのIDは、\\ :ref:`SceneTree."
"get_network_unique_id() <class_SceneTree_method_get_network_unique_id>` から"
"取得できます。これらのIDは、主にロビー管理に役立ち、接続されたピア、つまりプ"
"レイヤーを識別するため、通常は保存する必要があります。 IDを使用して、特定のピ"
"アにのみメッセージを送信することもできます。"

msgid "Clients:"
msgstr "クライアント:"

msgid "``connected_to_server``"
msgstr "``connected_to_server``"

msgid "``connection_failed``"
msgstr "``connection_failed``"

msgid "``server_disconnected``"
msgstr "``server_disconnected``"

msgid ""
"Again, all these functions are mainly useful for lobby management or for "
"adding/removing players on the fly. For these tasks, the server clearly has "
"to work as a server and you have to perform tasks manually such as sending a "
"newly connected player information about other already connected players (e."
"g. their names, stats, etc)."
msgstr ""
"繰り返しますが、これらの機能はすべて、主にロビー管理やその場でのプレイヤーの"
"追加/削除に役立ちます。 これらのタスクの場合、サーバーは明らかにサーバーとし"
"て機能する必要があり、既に接続されている他のプレイヤーに、新しく接続されたプ"
"レイヤーに関する情報(名前、統計など)を送信するなどのタスクを手動で実行する必"
"要があります。"

msgid ""
"Lobbies can be implemented any way you want, but the most common way is to "
"use a node with the same name across scenes in all peers. Generally, an "
"autoloaded node/singleton is a great fit for this, to always have access to, "
"e.g. \"/root/lobby\"."
msgstr ""
"ロビーは任意の方法で実装できますが、最も一般的な方法は、すべてのピアのシーン"
"で同じ名前のノードを使用することです。 一般的に、自動ロードされたノード/シン"
"グルトンはこれに最適で、常にアクセスできます。例 \"/root/lobby\"。"

msgid "RPC"
msgstr "\\ RPC"

msgid ""
"To communicate between peers, the easiest way is to use RPCs (remote "
"procedure calls). This is implemented as a set of functions in :ref:`Node "
"<class_Node>`:"
msgstr ""
"ピア間で通信するための最も簡単な方法は、RPC(リモートプロシージャコール)を使用"
"することです。これは一連の関数として :ref:`Node <class_Node>` で実装されます:"

msgid "``rpc(\"function_name\", <optional_args>)``"
msgstr "``rpc(\"function_name\", <optional_args>)``"

msgid "``rpc_id(<peer_id>,\"function_name\", <optional_args>)``"
msgstr "``rpc_id(<peer_id>,\"function_name\", <optional_args>)``"

msgid "``rpc_unreliable(\"function_name\", <optional_args>)``"
msgstr "``rpc_unreliable(\"function_name\", <optional_args>)``"

msgid "``rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)``"
msgstr "``rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)``"

msgid "Synchronizing member variables is also possible:"
msgstr "メンバー変数の同期も可能です:"

msgid "``rset(\"variable\", value)``"
msgstr "``rset(\"variable\", value)``"

msgid "``rset_id(<peer_id>, \"variable\", value)``"
msgstr "``rset_id(<peer_id>, \"variable\", value)``"

msgid "``rset_unreliable(\"variable\", value)``"
msgstr "``rset_unreliable(\"variable\", value)``"

msgid "``rset_unreliable_id(<peer_id>, \"variable\", value)``"
msgstr "``rset_unreliable_id(<peer_id>, \"variable\", value)``"

msgid "Functions can be called in two fashions:"
msgstr "関数は、次の2つの方法で呼び出すことができます:"

msgid ""
"Reliable: when the function call arrives, an acknowledgement will be sent "
"back; if the acknowledgement isn't received after a certain amount of time, "
"the function call will be re-transmitted."
msgstr ""

msgid ""
"Unreliable: the function call is sent only once, without checking to see if "
"it arrived or not, but also without any extra overhead."
msgstr ""

msgid ""
"In most cases, reliable is desired. Unreliable is mostly useful when "
"synchronizing object positions (sync must happen constantly, and if a packet "
"is lost, it's not that bad because a new one will eventually arrive and it "
"would likely be outdated because the object moved further in the meantime, "
"even if it was resent reliably)."
msgstr ""
"ほとんどの場合、信頼性が求められます。 Unreliableは、オブジェクトの位置を同期"
"するときに主に役立ちます(同期は絶えず発生する必要があり、パケットが失われた場"
"合でも、その後に新しいパケットが到着し、その間にオブジェクトがさらに移動した"
"ために、失われたパケットの情報は古くなっている可能性があるため、無くなっても"
"さほど問題はありません。ほぼ、これは再送と同じ結果です)。"

#, fuzzy
msgid ""
"There is also :ref:`SceneTree.get_rpc_sender_id() "
"<class_SceneTree_method_get_rpc_sender_id>`, which can be used to check "
"which peer (or peer ID) sent an RPC."
msgstr ""
"``SceneTree`` には ``get_rpc_sender_id`` 関数もあり、どのピア(またはピアID)が"
"RPCを送信したかを確認するために使用できます。"

msgid "Back to lobby"
msgstr "ロビーに戻る"

msgid ""
"Let's get back to the lobby. Imagine that each player that connects to the "
"server will tell everyone about it."
msgstr ""
"ロビーに戻りましょう。サーバーに接続する各プレイヤーが、そのことを全員に伝え"
"ることを想像してみてください。"

msgid ""
"You might have already noticed something different, which is the usage of "
"the ``remote`` keyword on the ``register_player`` function:"
msgstr ""
"あなたはすでに別のことに気付いているかもしれません。これは、 "
"``register_player`` 関数の ``remote`` キーワードの使用法です:"

msgid ""
"This keyword is one of many that allow a function to be called by a remote "
"procedure call (RPC). There are six of them total:"
msgstr ""

msgid "``remote``"
msgstr "``remote``"

msgid "``remotesync``"
msgstr "``remotesync``"

msgid "``puppet``"
msgstr "``puppet``"

#, fuzzy
msgid "``puppetsync``"
msgstr "\\ puppetsync"

msgid "``master``"
msgstr "``master``"

#, fuzzy
msgid "``mastersync``"
msgstr "\\ mastersync"

msgid ""
"Each of them designate who can call the rpc, and optionally ``sync`` if the "
"RPC can be called locally."
msgstr ""

#, fuzzy
msgid ""
"If no rpc keywords are added, Godot will block any attempts to call "
"functions remotely. This makes security work a lot easier (so a client can't "
"call a function to delete a file on another client's system)."
msgstr ""
"このキーワードには主に2つの用途があります。 1つ目は、この関数をRPCから呼び出"
"すことができることをGodotに知らせることです。キーワードが追加されていない場"
"合、Godotはセキュリティのために関数を呼び出す試みをブロックします。これによ"
"り、セキュリティが非常に簡単になります(したがって、クライアントは別のクライア"
"ントのシステム上のファイルを削除する関数を呼び出すことができません)。"

msgid ""
"The ``remote`` keyword can be called by any peer, including the server and "
"all clients. The ``puppet`` keyword means a call can be made from the "
"network master to any network puppet. The ``master`` keyword means a call "
"can be made from any network puppet to the network master."
msgstr ""

msgid ""
"If ``sync`` is included, the call can also be made locally. For example, to "
"allow the network master to change the player's position on all peers:"
msgstr ""

msgid ""
"You can also use :ref:`SceneTree.get_rpc_sender_id() "
"<class_SceneTree_method_get_rpc_sender_id>` to have more advanced rules on "
"how an rpc can be called."
msgstr ""

msgid ""
"These keywords are further explained in :ref:`Synchronizing the game "
"<doc_high_level_multiplayer_synchronizing>`."
msgstr ""

msgid ""
"With this, lobby management should be more or less explained. Once you have "
"your game going, you will most likely want to add some extra security to "
"make sure clients don't do anything funny (just validate the info they send "
"from time to time, or before game start). For the sake of simplicity and "
"because each game will share different information, this is not shown here."
msgstr ""
"これにより、ロビー管理について多少説明する必要があります。ゲームを開始した"
"ら、セキュリティを追加して、クライアントがおかしなことをしないようにします"
"(時々、またはゲーム開始前に送信する情報を検証します)。話を簡単にするため、ま"
"た各ゲームは異なる情報を共有するため、ここでは具体例を示していません。"

msgid "Starting the game"
msgstr "ゲームを開始する"

msgid ""
"Once enough players have gathered in the lobby, the server should probably "
"start the game. This is nothing special in itself, but we'll explain a few "
"nice tricks that can be done at this point to make your life much easier."
msgstr ""
"十分な数のプレイヤーがロビーに集まったら、サーバーはおそらくゲームを開始する"
"はずです。これ自体は特別なことではありませんが、この時点であなたの人生をもっ"
"と楽にするためにできるいくつかの素晴らしいトリックを説明します。"

msgid "Player scenes"
msgstr "プレイヤーシーン"

msgid ""
"In most games, each player will likely have its own scene. Remember that "
"this is a multiplayer game, so in every peer you need to instance **one "
"scene for each player connected to it**. For a 4 player game, each peer "
"needs to instance 4 player nodes."
msgstr ""
"ほとんどのゲームでは、各プレイヤーが独自のシーンを持っているでしょう。これは"
"マルチプレイヤーゲームであるため、すべてのピアで **それに接続されているプレイ"
"ヤーごとに1つのシーン** をインスタンス化する必要があることに注意してくださ"
"い。 4プレイヤーゲームの場合、各ピアは4プレイヤーノードをインスタンス化する必"
"要があります。"

msgid ""
"So, how to name such nodes? In Godot, nodes need to have a unique name. It "
"must also be relatively easy for a player to tell which node represents each "
"player ID."
msgstr ""
"それでは、そのようなノードにどのように名前を付けるのでしょうか？ Godotでは、"
"ノードに一意の名前を付ける必要があります。また、プレイヤーがどのノードを各プ"
"レイヤーIDを表すかを比較的簡単に判断できる必要があります。"

msgid ""
"The solution is to simply name the *root nodes of the instanced player "
"scenes as their network ID*. This way, they will be the same in every peer "
"and RPC will work great! Here is an example:"
msgstr ""
"解決策は、インスタンス化されたプレイヤーシーンの *ルートノードにnetwork ID* "
"という名前を付けるだけです。このように、それらはすべてのピアで同じになり、RPC"
"はうまく機能します！次に例を示します:"

msgid ""
"Depending on when you execute pre_configure_game(), you may need to change "
"any calls to ``add_child()`` to be deferred via ``call_deferred()``, as the "
"SceneTree is locked while the scene is being created (e.g. when ``_ready()`` "
"is being called)."
msgstr ""
"pre_configure_game()を実行するタイミングによっては、シーンの作成中に "
"SceneTree がロックされているため(例: ``_ready`` が呼び出されている場合)、\\ "
"``call_deferred()`` を介して遅延されるように ``add_child()`` への呼び出しを変"
"更する必要がある場合があります。"

msgid "Synchronizing game start"
msgstr "ゲームの開始を同期する"

msgid ""
"Setting up players might take different amounts of time for every peer due "
"to lag, different hardware, or other reasons. To make sure the game will "
"actually start when everyone is ready, pausing the game until all players "
"are ready can be useful:"
msgstr ""
"プレイヤーのセットアップには、遅延、ハードウェアの違い、またはその他の理由に"
"より、ピアごとに異なる時間がかかる場合があります。全員の準備が整ったときに"
"ゲームが実際に開始されるようにするには、すべてのプレイヤーの準備が整うまで"
"ゲームを一時停止すると便利です:"

msgid ""
"When the server gets the OK from all the peers, it can tell them to start, "
"as for example:"
msgstr ""
"サーバーは、すべてのピアからOKを取得すると、たとえば次のように開始するように"
"指示できます:"

msgid "Synchronizing the game"
msgstr "ゲームの同期"

msgid ""
"In most games, the goal of multiplayer networking is that the game runs "
"synchronized on all the peers playing it. Besides supplying an RPC and "
"remote member variable set implementation, Godot adds the concept of network "
"masters."
msgstr ""
"ほとんどのゲームでは、マルチプレイヤーネットワーキングの目標は、ゲームをプレ"
"イするすべてのピアで同期して実行することです。 RPCとリモートメンバー変数セッ"
"トの実装を提供することに加えて、Godotはネットワークマスターの概念を追加しま"
"す。"

msgid "Network master"
msgstr "ネットワークマスター"

msgid ""
"The network master of a node is the peer that has the ultimate authority "
"over it."
msgstr ""
"ノードのネットワークマスターは、そのノードに対する最終的な権限を持つピアで"
"す。"

msgid ""
"When not explicitly set, the network master is inherited from the parent "
"node, which if not changed, is always going to be the server (ID 1). Thus "
"the server has authority over all nodes by default."
msgstr ""
"明示的に設定しない場合、ネットワーク マスタは親ノードから継承され、変更されて"
"いない場合は常にサーバー(ID 1)になります。したがって、サーバーにはデフォルト"
"ですべてのノードに対する権限があります。"

msgid ""
"The network master can be set with the function :ref:`Node."
"set_network_master(id, recursive) <class_Node_method_set_network_master>` "
"(recursive is ``true`` by default and means the network master is "
"recursively set on all child nodes of the node as well)."
msgstr ""
"ネットワークマスターは、次の関数で設定できます :ref:`Node."
"set_network_master(id, recursive) <class_Node_method_set_network_master>` (デ"
"フォルトでは再帰は ``true`` で、ネットワークマスターは同様にノードのすべての"
"子ノードに再帰的に設定されます)。"

msgid ""
"Checking that a specific node instance on a peer is the network master for "
"this node for all connected peers is done by calling :ref:`Node."
"is_network_master() <class_Node_method_is_network_master>`. This will return "
"``true`` when executed on the server and ``false`` on all client peers."
msgstr ""
":ref:`Node.is_network_master() <class_Node_method_is_network_master>` を呼び"
"出すと、ピア上の特定のノードインスタンスが、接続されているすべてのピアのこの"
"ノードのネットワークマスターであることを確認できます。これは、サーバーで実行"
"されると ``true`` を返し、すべてのクライアントピアで ``false`` を返します。"

msgid ""
"If you have paid attention to the previous example, it's possible you "
"noticed that each peer was set to have network master authority for their "
"own player (Node) instead of the server:"
msgstr ""
"前の例に注意を払っていた場合、各ピアがサーバーではなく独自の プレイヤー(ノー"
"ド)のネットワークマスター権限を持つように設定されていることに気付くかもしれま"
"せん:"

msgid ""
"Each time this piece of code is executed on each peer, the peer makes itself "
"master on the node it controls, and all other nodes remain as puppets with "
"the server being their network master."
msgstr ""
"このコードが各ピアで実行されるたびに、ピアはそれが制御するノード上でマスター"
"になり、他のすべてのノードはサーバがネットワーク マスターである Puppet として"
"残ります。"

msgid ""
"To clarify, here is an example of how this looks in the `bomber demo "
"<https://github.com/godotengine/godot-demo-projects/tree/master/networking/"
"multiplayer_bomber>`_:"
msgstr ""
"明確にするために、これが `bomber demo <https://github.com/godotengine/godot-"
"demo-projects/tree/master/networking/multiplayer_bomber>`_ でどのように見える"
"かの例を示します:"

msgid "Master and puppet keywords"
msgstr "マスターとパペットのキーワード"

msgid ""
"The real advantage of this model is when used with the ``master``/``puppet`` "
"keywords in GDScript (or their equivalent in C# and Visual Script). "
"Similarly to the ``remote`` keyword, functions can also be tagged with them:"
msgstr ""
"このモデルの本当の利点は、GDScriptの ``master``/``puppet`` キーワード(または"
"C#とVisual Scriptの同等のキーワード)で使用する場合です。\\ ``remote`` キー"
"ワードと同様に、関数にもそれらのタグを付けることができます:"

msgid "Example bomb code:"
msgstr "爆弾のコード例:"

msgid "Example player code:"
msgstr "プレイヤーのコード例:"

#, fuzzy
msgid ""
"In the above example, a bomb explodes somewhere (likely managed by whoever "
"is the master of this bomb-node, e.g. the host). The bomb knows the bodies "
"(player nodes) in the area, so it checks that they contain an ``exploded`` "
"method before calling it."
msgstr ""
"上記の例では、爆弾がどこかで爆発します(おそらく、マスターである人によって管理"
"されます)。爆弾はそのエリアの死体を知っているので、彼らはそれらをチェックし、"
"それらが ``exploded`` 関数を含んでいることをチェックします。"

msgid ""
"Recall that each peer has a complete set of instances of player nodes, one "
"instance for each peer (including itself and the host). Each peer has set "
"itself as the master of the instance corresponding to itself, and it has set "
"a different peer as the master for each of the other instances."
msgstr ""

msgid ""
"Now, going back to the call to the ``exploded`` method, the bomb on the host "
"has called it remotely on all bodies in the area that have the method. "
"However, this method is in a player node and has a ``master`` keyword."
msgstr ""

msgid ""
"The ``master`` keyword on the ``exploded`` method in the player node means "
"two things for how this call is made. Firstly, from the perspective of the "
"calling peer (the host), the calling peer will only attempt to remotely call "
"the method on the peer that it has set as the network master of the player "
"node in question. Secondly, from the perspective of the peer the host is "
"sending the call to, the peer will only accept the call if it set itself as "
"the network master of the player node with the method being called (which "
"has the ``master`` keyword). This works well as long as all peers agree on "
"who is the master of what."
msgstr ""

msgid ""
"The above setup means that only the peer who owns the affected body will be "
"responsible for telling all the other peers that its body was stunned, after "
"being remotely instructed to do so by the host's bomb. The owning peer "
"therefore (still in the ``exploded`` method) tells all the other peers that "
"its player node was stunned. The peer does this by remotely calling the "
"``stun`` method on all instances of that player node (on the other peers). "
"Because the ``stun`` method has the ``puppet`` keyword, only peers who did "
"not set themselves as the network master of the node will call it (in other "
"words, those peers are set as puppets for that node by virtue of not being "
"the network master of it)."
msgstr ""

msgid ""
"The result of this call to ``stun`` is to make the player look stunned on "
"the screen of all the peers, including the current network master peer (due "
"to the local call to ``stun`` after ``rpc(\"stun\")``)."
msgstr ""

msgid ""
"The master of the bomb (the host) repeats the above steps for each of the "
"bodies in the area, such that all the instances of any player in the bomb "
"area get stunned on the screens of all the peers."
msgstr ""

#, fuzzy
msgid ""
"Note that you could also send the ``stun()`` message only to a specific "
"player by using ``rpc_id(<id>, \"exploded\", bomb_owner)``. This may not "
"make much sense for an area-of-effect case like the bomb, but might in other "
"cases, like single target damage."
msgstr ""
"``rpc_id(<id>, \"exploded\", bomb_owner)`` を使用して、特定のプレイヤーにの"
"み ``stun()`` メッセージを送信することもできます。これは、爆弾のような影響範"
"囲の場合にはあまり意味をなさないかもしれませんが、他の場合では、単一のター"
"ゲットにダメージを与えるなどに使えます。"

#, fuzzy
msgid "Exporting for dedicated servers"
msgstr "Webのエクスポート"

msgid ""
"Once you've made a multiplayer game, you may want to export it to run it on "
"a dedicated server with no GPU available. See :ref:"
"`doc_exporting_for_dedicated_servers` for more information."
msgstr ""

msgid ""
"The code samples on this page aren't designed to run on a dedicated server. "
"You'll have to modify them so the server isn't considered to be a player. "
"You'll also have to modify the game starting mechanism so that the first "
"player who joins can start the game."
msgstr ""

msgid ""
"The bomberman example here is largely for illustrational purposes, and does "
"not do anything on the host-side to handle the case where a peer uses a "
"custom client to cheat by for example refusing to stun itself. In the "
"current implementation such cheating is perfectly possible because each "
"client is the network master of its own player, and the network master of a "
"player is the one which decides whether to call the I-was-stunned method "
"(``stun``) on all of the other peers and itself."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
