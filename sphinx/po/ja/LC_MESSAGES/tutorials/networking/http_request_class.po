# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making HTTP requests"
msgstr "HTTPリクエストを行う"

msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""
":ref:`HTTPRequest <class_HTTPRequest>` ノードは、GodotでHTTPリクエストを行う"
"最も簡単な方法です。これは、より低レベルの :ref:`HTTPClient "
"<class_HTTPClient>` に支えられており、チュートリアルについては :ref:`これ "
"<doc_http_client_class>` を使用できます。"

msgid ""
"For the sake of this example, we will create a simple UI with a button, that "
"when pressed will start the HTTP request to the specified URL."
msgstr ""
"この例のために、ボタンが付いたシンプルなUIを作成します。ボタンを押すと、指定"
"されたURLへのHTTPリクエストが開始されます。"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""

msgid "Preparing scene"
msgstr "シーンの準備"

msgid ""
"Create a new empty scene, add a CanvasLayer as the root node and add a "
"script to it. Then add two child nodes to it: a Button and an HTTPRequest "
"node. You will need to connect the following signals to the CanvasLayer "
"script:"
msgstr ""
"新しい空のシーンを作成し、CanvasLayerをルートノードとして追加し、スクリプトを"
"追加します。次に、2つの子ノード、ButtonおよびHTTPRequestノードを追加します。"
"次のシグナルをCanvasLayerスクリプトに接続する必要があります:"

msgid "Button.pressed: When the button is pressed, we will start the request."
msgstr "Button.pressed:ボタンを押すと、要求が開始されます。"

msgid ""
"HTTPRequest.request_completed: When the request is completed, we will get "
"the requested data as an argument."
msgstr ""
"HTTPRequest.request_completed: 要求が完了すると、要求されたデータが引数として"
"取得されます。"

msgid "Scripting"
msgstr "スクリプト"

msgid ""
"Below is all the code we need to make it work. The URL points to an online "
"API mocker; it returns a pre-defined JSON string, which we will then parse "
"to get access to the data."
msgstr ""
"以下は、それを動作させるために必要なすべてのコードです。URLはオンラインAPI"
"モッカーを指します。定義済みのJSON文字列を返し、データにアクセスするために解"
"析します。"

msgid ""
"With this, you should see ``(hello:world)`` printed on the console; hello "
"being a key, and world being a value, both of them strings."
msgstr ""
"これにより、コンソールに ``(hello:world)`` が表示されます。helloがキーであ"
"り、worldが値であり、どちらも文字列です。"

msgid ""
"For more information on parsing JSON, see the class references for :ref:"
"`JSON <class_JSON>` and :ref:`JSONParseResult <class_JSONParseResult>`."
msgstr ""
"JSONの解析の詳細については、\\ : ref:`JSON <class_JSON>` および :ref:"
"`JSONParseResult <class_JSONParseResult>` のクラスリファレンスを参照してくだ"
"さい。"

msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""
"``result`` が ``RESULT_SUCCESS`` に等しいかどうか、およびJSON解析エラーが発生"
"したかどうかを確認したい場合があることに注意してください。詳細については、"
"JSONクラスリファレンスと :ref:`HTTPRequest <class_HTTPRequest>` を参照してく"
"ださい。"

msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: "
"value\"``. For example, to set a custom user agent (the HTTP ``user-agent`` "
"header) you could use the following:"
msgstr ""
"もちろん、カスタムHTTPヘッダーを設定することもできます。これらは文字列配列と"
"して与えられ、各文字列には ``\"header:value\"`` 形式のヘッダーが含まれます。"
"たとえば、カスタムユーザーエージェント(HTTP ``user-agent`` ヘッダー)を設定す"
"るには、次を使用できます:"

msgid ""
"Please note that, for SSL/TLS encryption and thus HTTPS URLs to work, you "
"may need to take some steps as described :ref:`here <doc_ssl_certificates>`."
msgstr ""
"SSL/TLS暗号化とHTTPS URLが機能するためには、\\ :ref:`こちら "
"<doc_ssl_certificates>` で説明されている手順を実行する必要がある場合があるこ"
"とに注意してください。"

msgid ""
"Also, when calling APIs using authorization, be aware that someone might "
"analyse and decompile your released application and thus may gain access to "
"any embedded authorization information like tokens, usernames or passwords. "
"That means it is usually not a good idea to embed things such as database "
"access credentials inside your game. Avoid providing information useful to "
"an attacker whenever possible."
msgstr ""
"また、承認を使用してAPIを呼び出す場合、リリースされたアプリケーションを分析お"
"よび逆コンパイルし、トークン、ユーザー名、パスワードなどの埋め込み承認情報に"
"アクセスする可能性があることに注意してください。つまり、通常、ゲーム内にデー"
"タベースアクセスの資格情報などを埋め込むことはお勧めできません。可能な限り、"
"攻撃者にとって有用な情報を提供しないでください。"

msgid "Sending data to server"
msgstr "サーバーへのデータの送信"

msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""
"これまで、サーバーからのデータのリクエストに限定してきました。しかし、サー"
"バーにデータを送信する必要がある場合はどうでしょうか？一般的な方法は次のとお"
"りです:"

msgid ""
"Keep in mind that you have to wait for a request to finish before sending "
"another one. Making multiple request at once requires you to have one node "
"per request. A common strategy is to create and delete HTTPRequest nodes at "
"runtime as necessary."
msgstr ""
"リクエストが完了するのを待ってから、別のリクエストを送信する必要があることに"
"注意してください。一度に複数の要求を行うには、要求ごとに1つのノードが必要で"
"す。一般的な戦略は、必要に応じて実行時にHTTPRequestノードを作成および削除する"
"ことです。"

msgid "Translation status"
msgstr "翻訳ステータス"
