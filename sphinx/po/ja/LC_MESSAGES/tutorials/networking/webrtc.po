# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "WebRTC"
msgstr "WebRTC"

msgid "HTML5, WebSocket, WebRTC"
msgstr "HTML5、WebSocket、WebRTC"

msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""
"Godotの優れた機能の1つは、HTML5/WebAssemblyプラットフォームにエクスポートでき"
"ることです。これにより、ユーザーがWebページにアクセスしたときに、ブラウザで"
"ゲームを直接実行できます。"

msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""
"これはデモと完全なゲームの両方にとって素晴らしい機会ですが、以前はいくつかの"
"制限がありました。ネットワークの分野では、ブラウザは最近まで、最初に"
"WebSocket、次にWebRTCが標準として提案されるまではHTTPRequestsのみをサポートし"
"ていました。"

msgid "WebSocket"
msgstr "\\ WebSocket"

msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is quite simple, but a very powerful tool to send push "
"notifications to browsers, and has been used to implement chats, turn-based "
"games, etc."
msgstr ""
"2011年12月にWebSocketプロトコルが標準化されたとき、ブラウザはWebSocketサー"
"バーへの安定した双方向の接続を作成できました。プロトコルは非常にシンプルです"
"が、ブラウザにプッシュ通知を送信するための非常に強力なツールであり、チャッ"
"ト、ターンベースのゲームなどの実装に使用されています。"

msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""
"ただし、WebSocketは依然としてTCP接続を使用します。TCP接続は信頼性には優れてい"
"ますが、低遅延には適していません。したがって、VoIPやテンポの速いゲームなどの"
"リアルタイムアプリケーションには適していません。"

msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""
"このため、2010年以降、GoogleはWebRTCと呼ばれる新しいテクノロジーの開発に着手"
"しました。WebRTCは、2017年にW3Cの推奨候補になりました。 WebRTCは、はるかに複"
"雑な仕様のセットであり、2つのピア間で高速でリアルタイムの安全な通信を提供する"
"ために、舞台裏にある他の多くのテクノロジー(ICE、DTLS、SDP)に依存しています。"

msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr ""
"このアイデアは、2つのピア間の最速のルートを見つけて、可能な限り直接通信を確立"
"することです(つまり、中継サーバーを回避しようとします)。"

msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""
"ただし、これには代償が伴います。つまり、通信を開始する前に、2つのピア間で一部"
"のメディア情報を交換する必要があります(セッション記述プロトコル - SDP文字列の"
"形式)。これは通常、いわゆるWebRTC Signaling Serverの形式を取ります。"

msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""
"ピアはシグナリングサーバー(WebSocketサーバーなど)に接続し、メディア情報を送信"
"します。サーバーはこの情報を他のピアに中継し、ピアが目的の直接通信を確立でき"
"るようにします。このステップが完了すると、ピアはシグナリングサーバーから切断"
"し、直接ピアツーピア(P2P)接続を開いたままにすることができます。"

msgid "Using WebRTC in Godot"
msgstr "GodotでWebRTCを使用する"

msgid ""
"WebRTC is implemented in Godot via two main classes :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API "
"implementation :ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`. See "
"section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` for "
"more details."
msgstr ""
"WebRTCは、2つのメインクラス :ref:`WebRTCPeerConnection "
"<class_WebRTCPeerConnection>` および :ref:`WebRTCDataChannel "
"<class_WebRTCDataChannel>` に加えて、マルチプレイヤーAPI実装 :ref:"
"`WebRTCMultiplayer <class_WebRTCMultiplayer>` を介してGodotに実装されます。詳"
"細については、\\ :ref:`high-level multiplayer <doc_high_level_multiplayer>` "
"のセクションを参照してください。"

msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDNative plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://github."
"com/godotengine/webrtc-native/releases>`__."
msgstr ""
"これらのクラスはHTML5で自動的に使用できますが、\\ **ネイティブ(非HTML5) プ"
"ラットフォームでは外部GDNativeプラグインが必要です**\\ 。手順については、\\ "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ を確認し、最新の `release <https://github.com/godotengine/webrtc-"
"native/releases>`__ を取得してください。"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""

msgid "Minimal connection example"
msgstr "最小限の接続例"

msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""
"この例では、同じアプリケーション内の2つのピア間にWebRTC接続を作成する方法を示"
"します。これは実際にはあまり有用ではありませんが、WebRTC接続がどのように設定"
"されるかについての概要を説明します。"

msgid "This will print:"
msgstr "これは次のように出力されます:"

msgid "Local signaling example"
msgstr "ローカルシグナリングの例"

msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""
"この例は前の例を拡張し、2つの異なるシーンでピアを分離し、シグナリングサーバー"
"として :ref:`singleton <doc_singletons_autoload>` を使用します。"

msgid "And now for the local signaling server:"
msgstr "そして、ローカルシグナリングサーバーの場合:"

msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""
"このローカルシグナリングサーバーは、同じシーン内の2つのピアを接続するための :"
"ref:`singleton <doc_singletons_autoload>` として使用されることになっていま"
"す。"

msgid "Then you can use it like this:"
msgstr "その後、次のように使用できます:"

msgid "This will print something similar to this:"
msgstr "これはこれに類似した何かを出力します:"

msgid "Remote signaling with WebSocket"
msgstr "WebSocketを使用したリモートシグナリング"

msgid ""
"A more advanced demo using WebSocket for signaling peers and :ref:"
"`WebRTCMultiplayer <class_WebRTCMultiplayer>` is available in the `godot "
"demo projects <https://github.com/godotengine/godot-demo-projects>`_ under "
"`networking/webrtc_signaling`."
msgstr ""
"ピアのシグナリングにWebSocketを使用し、\\ :ref:`WebRTCMultiplayer "
"<class_WebRTCMultiplayer>` を使用したより高度なデモは、 `networking/"
"webrtc_signaling` 内の `godot demo projects <https://github.com/godotengine/"
"godot-demo-projects>`_ にあります。"

msgid "Translation status"
msgstr "翻訳ステータス"
