# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Saving games"
msgstr "ゲームの保存"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""
"ゲームを保存するのは複雑です。例えば、 複数のレベルにまたがった複数のオブジェ"
"クトによる情報が保存される事が望ましい場合があります。 より高度なゲームシステ"
"ムのセーブでは、任意の数のオブジェクトに関する追加情報の保存ができる必要があ"
"ります。 これにより、ゲームがより複雑に成長するにつれて、保存機能を拡張できま"
"す。"

msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""
"ユーザー設定を保存する場合は、この目的で :ref:`ConfigFile "
"<class_ConfigFile>` クラスを使用できます。"

msgid "Identify persistent objects"
msgstr "永続オブジェクトの識別"

msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""
"まず、ゲームセッション間で保持するオブジェクトと、それらのオブジェクトから保"
"持する情報を特定する必要があります。このチュートリアルでは、グループを使用し"
"て保存するオブジェクトをマークおよび処理しますが、他の方法ももちろん可能で"
"す。"

#, fuzzy
msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. We "
"can do this through either the GUI or script. Let's add the relevant nodes "
"using the GUI:"
msgstr ""
"保存するオブジェクトを \"Persist\" グループに追加することから始めます。\\ :"
"ref:`doc_scripting_continued` チュートリアルのように、GUIまたはスクリプトを使"
"用してこれを行うことができます。 GUIを使用して関連ノードを追加しましょう:"

msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""
"これが完了したら、ゲームを保存する必要があるときに、このスクリプトを使用し"
"て、保存するすべてのオブジェクトを取得し、それをすべて保存するように指示でき"
"ます:"

msgid "Serializing"
msgstr "シリアル化"

msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper "
"functions for this, such as :ref:`to_json() "
"<class_@GDScript_method_to_json>` and :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, so we will use a dictionary. Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""
"次のステップは、データをシリアル化することです。これにより、ディスクからの読"
"み取りとディスクへの保存がはるかに簡単になります。この場合、グループ Persist "
"の各メンバーはインスタンス化されたノードであり、したがってパスを持っていると"
"想定しています。GDScriptには :ref:`to_json() "
"<class_@GDScript_method_to_json>` や :ref:`parse_json() "
"<class_@GDScript_method_parse_json>` などのヘルパー関数があり、辞書を使用しま"
"す。ノードには、このデータを返す保存関数を含める必要があります。保存機能は次"
"のようになります:"

msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""
"これにより、スタイルが ``{ \"variable_name\":value_of_variable }`` の辞書が得"
"られます。これはロード時に役立ちます。"

msgid "Saving and reading data"
msgstr "データの保存と読み取り"

msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"so we can write to it or read from it. Now that we have a way to call our "
"groups and get their relevant data, let's use :ref:`to_json() "
"<class_@GDScript_method_to_json>` to convert it into an easily stored string "
"and store them in a file. Doing it this way ensures that each line is its "
"own object, so we have an easy way to pull the data out of the file as well."
msgstr ""
":ref:`doc_filesystem` チュートリアルで説明したように、ファイルを開いて、書き"
"込みまたは読み取りができるようにする必要があります。グループを呼び出して関連"
"データを取得する方法ができたので、\\ :ref:`to_json() "
"<class_@GDScript_method_to_json>` を使用して、簡単に保存できる文字列に変換"
"し、ファイルに保存しましょう。このようにすると、各行が独自のオブジェクトにな"
"ります。そのため、ファイルからデータを簡単に引き出すことができます。"

msgid ""
"Game saved! Loading is fairly simple as well. For that, we'll read each "
"line, use parse_json() to read it back to a dict, and then iterate over the "
"dict to read our values. But we'll need to first create the object and we "
"can use the filename and parent values to achieve that. Here is our load "
"function:"
msgstr ""
"ゲームが保存されました！読み込みも非常に簡単です。そのために、各行を読み取"
"り、parse_json() を使用してそれを辞書に戻し、反復処理を行って辞書の値を読み取"
"ります。ただし、最初にオブジェクトを作成する必要があり、ファイル名と親の値を"
"使用してそれを実現できます。読み込み関数は次のとおりです:"

msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""
"これで、シーン ツリーのほぼ任意の場所に配置された任意の数のオブジェクトを保存"
"して読み込むことができます！各オブジェクトは、保存する必要があるデータに応じ"
"て異なるデータを格納できます。"

msgid "Some notes"
msgstr "いくつかの注意事項"

msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""
"ゲームの状態を読み込むための設定に焦点をあてて説明をおこないました。最終的に"
"は、このロジックの多くがプロジェクトの作成者に委ねられます。これはしばしば複"
"雑であり、個々のプロジェクトのニーズに基づいて大幅にカスタマイズする必要があ"
"ります。"

msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""
"さらに、この実装では、Persistオブジェクトは他のPersistオブジェクトの子ではな"
"いと想定しています。そうしないと、無効なパスが作成されます。ネストされた永続"
"オブジェクトに対応するには、オブジェクトを段階的に保存することを検討してくだ"
"さい。最初に親オブジェクトをロードして、子オブジェクトがロードされたときに :"
"ref:`add_child() <class_node_method_add_child>` 呼び出しで使用できるようにし"
"ます。\\ :ref:`NodePath <class_nodepath>` はおそらく無効になるため、子を親に"
"リンクする方法も必要です。"

msgid "Translation status"
msgstr "翻訳ステータス"
