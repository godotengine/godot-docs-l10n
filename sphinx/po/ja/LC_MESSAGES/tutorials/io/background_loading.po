# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Background loading"
msgstr "バックグラウンド読み込み"

msgid ""
"When switching the main scene of your game (e.g. going to a new level), you "
"might want to show a loading screen with some indication that progress is "
"being made. The main load method (``ResourceLoader::load`` or just ``load`` "
"from GDScript) blocks your thread, making your game appear frozen and "
"unresponsive while the resource is being loaded. This document discusses the "
"alternative of using the ``ResourceInteractiveLoader`` class for smoother "
"load screens."
msgstr ""
"ゲームのメインシーンを切り替える(たとえば、新しいレベルに移動する)場合は、進"
"行中の状態を示すロード画面を表示することができます。メインのロードメソッド "
"``ResourceLoader::load`` または単にGDScriptからの ``load``)はスレッドをブロッ"
"クし、リソースのロード中にゲームがフリーズして応答しなくなるようにします。こ"
"のドキュメントでは、ロード画面をよりスムーズにするために "
"``ResourceInteractiveLoader`` クラスを使用する代替方法について説明します。"

msgid "ResourceInteractiveLoader"
msgstr "リソースインタラクティブローダー"

msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, and "
"control is returned to the caller. Each stage is generally a sub-resource "
"that is loaded by the main resource. For example, if you're loading a scene "
"that loads 10 images, each image will be one stage."
msgstr ""
"``ResourceInteractiveLoader`` クラスを使用すると、リソースを段階的にロードで"
"きます。 メソッド ``poll`` が呼び出されるたびに、新しいステージがロードされ、"
"制御が呼び出し元に返されます。 通常、各ステージは、メインリソースによってロー"
"ドされるサブリソースです。 たとえば、10個の画像を読み込むシーンを読み込む場"
"合、各画像は1つのステージになります。"

msgid "Usage"
msgstr "使用法"

msgid "Usage is generally as follows"
msgstr "使用法は一般的に以下の通りです"

msgid "Obtaining a ResourceInteractiveLoader"
msgstr "リソースインタラクティブローダーの取得"

msgid ""
"This method will give you a ResourceInteractiveLoader that you will use to "
"manage the load operation."
msgstr ""
"このメソッドを使用すると、ロード操作の管理に使用するリソースインタラクティブ"
"ローダーが提供されます。"

msgid "Polling"
msgstr "ポーリング"

msgid ""
"Use this method to advance the progress of the load. Each call to ``poll`` "
"will load the next stage of your resource. Keep in mind that each stage is "
"one entire \"atomic\" resource, such as an image, or a mesh, so it will take "
"several frames to load."
msgstr ""
"このメソッドを使用して、ロードの進行を進めます。\\ ``poll`` を呼び出すたび"
"に、リソースの次のステージがロードされます。 各ステージは、イメージやメッシュ"
"などの「アトミック」リソース全体であるため、ロードするのに数フレームかかるこ"
"とに注意してください。"

msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. Any "
"other return value means there was an error and loading has stopped."
msgstr ""
"エラーがなければ ``OK`` を返し、読み込みが完了すると ``ERR_FILE_EOF`` を返し"
"ます。 その他の戻り値は、エラーが発生してロードが停止したことを意味します。"

msgid "Load progress (optional)"
msgstr "読み込みの進行状況(オプション)"

msgid "To query the progress of the load, use the following methods:"
msgstr "読み込みの進行状況を確認するには、次のメソッドを使用します:"

msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""
"``get_stage_count`` は、読み込むステージの合計数を返します。 ``get_stage`` "
"は、現在読み込まれているステージを返します。"

msgid "Forcing completion (optional)"
msgstr "強制的に完了(オプション)"

msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr ""
"これ以上手順を実行せずに、現在のフレームのリソース全体をロードする必要がある"
"場合は、このメソッドを使用します。"

msgid "Obtaining the resource"
msgstr "リソースの取得"

msgid ""
"If everything goes well, use this method to retrieve your loaded resource."
msgstr ""
"すべてがうまくいけば、このメソッドを使用して読み込まれたリソースを取得しま"
"す。"

msgid "Example"
msgstr "例"

msgid ""
"This example demonstrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""
"この例は、新しいシーンをロードする方法を示しています。 例題、\\ :ref:"
"`doc_singletons_autoload` のコンテキストで考察してみましょう。"

msgid ""
"First, we set up some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr ""
"まず、いくつかの変数を設定し、ゲームのメインシーンで ``current_scene`` を初期"
"化します:"

msgid ""
"The function ``goto_scene`` is called from the game when the scene needs to "
"be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which could show a "
"progress bar or loading screen."
msgstr ""
"関数 ``goto_scene`` は、シーンを切り替える必要があるときにゲームから呼び出さ"
"れます。インタラクティブなローダーを要求し、\\ ``_process`` コールバックで"
"ローダーのポーリングを開始するために ``set_process(true)`` を呼び出します。ま"
"た、プログレスバーまたはロード画面を表示できる「ロード」アニメーションも開始"
"します。"

msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then we "
"deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means loading is done, anything else means there was an "
"error. Also note we skip one frame (via ``wait_frames``, set on the "
"``goto_scene`` function) to allow the loading screen to show up."
msgstr ""
"``_process`` はローダーがポーリングされる場所です。\\ ``poll`` が呼び出され、"
"その呼び出しからの戻り値を処理します。「OK」はポーリングを続けることを意味"
"し、\\ ``ERR_FILE_EOF`` は読み込みが完了したことを意味し、それ以外はエラーが"
"発生したことを意味します。また、ロード画面が表示されるように、1フレームをス"
"キップします( ``wait_frames`` を介して、\\ ``goto_scene`` 関数で設定)。"

msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load fast, which means we might be able to cram "
"more than one call to ``poll`` in one frame; some might take way more than "
"your value for ``time_max``, so keep in mind we won't have precise control "
"over the timings."
msgstr ""
"``OS.get_ticks_msec`` を使用してスレッドをブロックする時間を制御する方法に注"
"意してください。一部のステージは高速でロードされる場合があります。つまり、1つ"
"のフレームで ``poll`` を複数回呼び出すことができます。いくつかは "
"``time_max`` の値よりもはるかに大きくなる可能性があるため、タイミングを正確に"
"制御できないことに注意してください。"

msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, or "
"can also update a paused animation (the animation represents the entire load "
"process from beginning to end). ``set_new_scene`` puts the newly loaded "
"scene on the tree. Because it's a scene being loaded, ``instance()`` needs "
"to be called on the resource obtained from the loader."
msgstr ""
"いくつかの追加のヘルパー関数。 ``update_progress`` はプログレスバーを更新する"
"か、一時停止中のアニメーションも更新できます(アニメーションはロードプロセス全"
"体を最初から最後まで表します)。\\ ``set_new_scene`` は新しくロードされたシー"
"ンをツリーに置きます。 ロードされるシーンなので、ローダーから取得したリソース"
"で ``instance()`` を呼び出す必要があります。"

msgid "Using multiple threads"
msgstr "複数のスレッドの使用"

msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""
"リソースインタラクティブローダーは、複数のスレッドから使用できます。以下の点"
"に注意してください:"

msgid "Use a semaphore"
msgstr "セマフォを使用する"

msgid ""
"While your thread waits for the main thread to request a new resource, use a "
"``Semaphore`` to sleep (instead of a busy loop or anything similar)."
msgstr ""
"スレッドがメインスレッドが新しいリソースを要求するのを待っている間、(ビジー"
"ループまたは同様のものの代わりに) ``セマフォ(Semaphore)`` を使用してスリープ"
"します。"

msgid "Not blocking main thread during the polling"
msgstr "ポーリング中にメイン スレッドをブロックしない"

msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock the main thread while you call ``poll`` on your loader "
"class. When a resource is done loading, it might require some resources from "
"the low-level APIs (VisualServer, etc), which might need to lock the main "
"thread to acquire them. This might cause a deadlock if the main thread is "
"waiting for your mutex while your thread is waiting to load a resource."
msgstr ""
"メインスレッドからローダークラスへの呼び出しを許可するミューテックスがある場"
"合、ローダークラスで ``poll`` を呼び出している間はメインスレッドをロックしな"
"いでください。リソースの読み込みが完了すると、リソースを取得するためにメイン "
"スレッドをロックする必要がある低レベルの API (VisualServer など) からいくつか"
"のリソースが必要になる場合があります。これは、スレッドがリソースのロードを待"
"機している間にメインスレッドがミューテックスを待機している場合、デッドロック"
"を引き起こす可能性があります。"

msgid "Example class"
msgstr "サンプルクラス"

msgid ""
"You can find an example class for loading resources in threads here: :"
"download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as follows:"
msgstr ""
"スレッドでリソースをロードするためのサンプルクラスはここです: :download:"
"`resource_queue.gd <files/resource_queue.gd>`\\ 。使用法は次のとおりです:"

msgid "Call after you instance the class to start the thread."
msgstr "スレッドを開始するクラスをインスタンスした後に呼び出します。"

msgid ""
"Queue a resource. Use optional argument \"p_in_front\" to put it in front of "
"the queue."
msgstr ""
"リソースをキューに入れます。キューの先頭に置く場合は、オプションの引数 "
"\"p_in_front\" を使用します。"

msgid "Remove a resource from the queue, discarding any loading done."
msgstr "キューからリソースを削除し、行われた読み込みを破棄します。"

msgid ""
"Returns ``true`` if a resource is fully loaded and ready to be retrieved."
msgstr ""
"リソースが完全に読み込まれて取得できる状態にある場合は、\\ ``true`` を返しま"
"す。"

msgid ""
"Get the progress of a resource. Returns -1 if there was an error (for "
"example if the resource is not in the queue), or a number between 0.0 and "
"1.0 with the progress of the load. Use mostly for cosmetic purposes "
"(updating progress bars, etc), use ``is_ready`` to find out if a resource is "
"actually ready."
msgstr ""
"リソースの進行状況を取得します。エラーが発生した場合(たとえば、リソースが"
"キューにない場合)は-1を返します。または、読み込みの進行とともに0.0〜1.0の数値"
"を返します。主に装飾を目的(進行状況バーの更新など)に使用し、\\ ``is_ready`` "
"を使用してリソースが実際に準備できているかどうかを確認します。"

msgid ""
"Returns the fully loaded resource, or ``null`` on error. If the resource is "
"not fully loaded (``is_ready`` returns ``false``), it will block your thread "
"and finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""
"完全に読み込まれたリソース、またはエラーの場合は ``null`` を返します。リソー"
"スが完全に読み込まれていない場合(``is_ready`` が ``false`` を返します)、ス"
"レッドがブロックされ、読み込みが終了します。リソースがキューにない場合は "
"``ResourceLoader::load`` を呼び出して、通常どおりに読み込んで返します。"

msgid "Example:"
msgstr "例:"

#, fuzzy
msgid ""
"**Note**: this code, in its current form, is not tested in real world "
"scenarios. If you run into any issues, ask for help in one of `Godot's "
"community channels <https://godotengine.org/community>`__."
msgstr ""
"**注**: このコードは、現在の形式では、実際のシナリオではテストされていませ"
"ん。IRCのpunto(irc.freenode.netの#godotengine)に問い合わせてください。"

msgid "Translation status"
msgstr "翻訳ステータス"
