# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Exporting for dedicated servers"
msgstr "Webのエクスポート"

msgid ""
"If you want to run a dedicated server for your project on a machine that "
"doesn't have a GPU or display server available, you'll need to use a server "
"build of Godot."
msgstr ""

#, fuzzy
msgid "Platform support"
msgstr "Modサポートの提供"

msgid ""
"**Linux:** `Download an official Linux server binary <https://godotengine."
"org/download/server>`__. To compile a server binary from source, follow "
"instructions in :ref:`doc_compiling_for_x11`."
msgstr ""

msgid ""
"**macOS:** :ref:`Compile a server binary from source for macOS "
"<doc_compiling_for_osx>`."
msgstr ""

msgid ""
"**Windows:** There is no dedicated server build for Windows yet. As an "
"alternative, you can use the ``--no-window`` command-line argument to "
"prevent Godot from spawning a window. Note that even with the ``--no-"
"window`` command-line argument, you'll need to have OpenGL support available "
"on the Windows machine."
msgstr ""

msgid ""
"If your project uses C#, you'll have to use a Mono-enabled server binary."
msgstr ""

msgid "\"Headless\" versus \"server\" binaries"
msgstr ""

msgid ""
"The `server download page <https://godotengine.org/download/server>`__ "
"offers two kinds of binaries with several differences."
msgstr ""

msgid ""
"**Server:** Use this one for running dedicated servers. It does not contain "
"editor functionality, and is therefore smaller and more optimized."
msgstr ""

msgid ""
"**Headless:** This binary contains editor functionality and is intended to "
"be used for exporting projects. This binary *can* be used to run dedicated "
"servers, but it's not recommended as it's larger and less optimized."
msgstr ""

#, fuzzy
msgid "Exporting a PCK file"
msgstr "PC用エクスポート"

#, fuzzy
msgid "There are two ways to export a project for a server:"
msgstr "証明書を取得するには2つの方法があります:"

msgid ""
"Create a Linux/X11 export preset, define a custom Release export template "
"that points to the server binary then export the project as usual."
msgstr ""

msgid "Export a PCK file only, preferably from a Linux/X11 export preset."
msgstr ""

msgid ""
"Both methods should result in identical output. The text below describes the "
"PCK file approach."
msgstr ""

msgid ""
"Once you've downloaded a server binary, you should export a PCK file "
"containing your project data. After creating the export preset, click "
"**Export PCK/ZIP** at the bottom of the Export dialog then choose a "
"destination path. The **Export With Debug** checkbox in the file dialog has "
"no bearing on the final PCK file, so you can leave it as-is."
msgstr ""

#, fuzzy
msgid "See :ref:`doc_exporting_projects` for more information."
msgstr ""
"詳細については、\\ :ref:`doc_running_code_in_the_editor` を参照してください。"

msgid ""
"If you're exporting the project from a headless editor, call the headless "
"editor with the `--export-pack` option while in the project folder to export "
"only a PCK file."
msgstr ""

msgid ""
"The PCK file will include resources not normally needed by the server, such "
"as textures and sounds. This means the PCK file will be larger than it could "
"possibly be. Support for stripping unneeded resources from a PCK for server "
"usage is planned in a future Godot release."
msgstr ""

msgid ""
"On the bright side, this allows the same PCK file to be used both by a "
"client and dedicated server build. This can be useful if you want to ship a "
"single archive that can be used both as a client and dedicated server."
msgstr ""

#, fuzzy
msgid "Preparing the server distribution"
msgstr "プロジェクトの準備"

msgid ""
"After downloading or compiling a server binary, you should now place it in "
"the same folder as the PCK file you've exported. The server binary should "
"have the same name as the PCK (excluding the extension). This lets Godot "
"detect and use the PCK file automatically. If you want to start a server "
"with a PCK that has a different name, you can specify the path to the PCK "
"file using the ``--main-pack`` command-line argument::"
msgstr ""

#, fuzzy
msgid "Starting the dedicated server"
msgstr "Webのエクスポート"

msgid ""
"If both your client and server are part of the same Godot project, you will "
"have to add a way to start the server directly using a command-line "
"argument. This can be done by adding the following code snippet in your main "
"scene (or a singleton)'s ``_ready()`` method::"
msgstr ""

msgid ""
"Alternatively, you can make the dedicated server always start up if a "
"headless or server binary is detected::"
msgstr ""

msgid ""
"If your client and server are separate Godot projects, your server should "
"most likely be configured in a way where running the main scene starts a "
"server automatically."
msgstr ""

msgid "Next steps"
msgstr "次のステップ"

msgid ""
"On Linux, to make your dedicated server restart after a crash or system "
"reboot, you can `create a systemd service <https://medium.com/@benmorel/"
"creating-a-linux-service-with-systemd-611b5c8b91d6>`__. This also lets you "
"view server logs in a more convenient fashion, with automatic log rotation "
"provided by systemd."
msgstr ""

msgid ""
"If you have experience with containers, you could also look into wrapping "
"your dedicated server in a `Docker <https://www.docker.com/>`__ container. "
"This way, it can be used more easily in an automatic scaling setup (which is "
"outside the scope of this tutorial)."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
