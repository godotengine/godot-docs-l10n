# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Differences between GLES2 and GLES3"
msgstr "GLES2とGLES3の違い"

msgid ""
"This page documents the differences between GLES2 and GLES3 that are by "
"design and are not the result of bugs. There may be differences that are "
"unintentional, but they should be reported as bugs."
msgstr ""
"このページには、設計によるものであり、バグの結果ではないGLES2とGLES3の違いが"
"記載されています。意図しない違いもあるかもしれませんが、それはバグとして報告"
"する必要があります。"

msgid ""
"\"GLES2\" and \"GLES3\" are the names used in Godot for the two OpenGL-based "
"rendering backends. In terms of graphics APIs, the GLES2 backend maps to "
"OpenGL 2.1 on desktop, OpenGL ES 2.0 on mobile and WebGL 1.0 on the web. The "
"GLES3 backend maps to OpenGL 3.3 on desktop, OpenGL ES 3.0 on mobile and "
"WebGL 2.0 on the web."
msgstr ""
"\"GLES2\" と \"GLES3\" は、2つのOpenGLベースのレンダリングバックエンドのGodot"
"で使用される名前です。グラフィックAPIに関しては、GLES2バックエンドはデスク"
"トップのOpenGL 2.1、モバイルのOpenGL ES 2.0、およびWebのWebGL 1.0にマップされ"
"ます。 GLES3バックエンドは、デスクトップのOpenGL 3.3、モバイルのOpenGL ES "
"3.0、およびWebのWebGL 2.0にマップします。"

msgid "Particles"
msgstr "パーティクル"

msgid ""
"GLES2 cannot use the :ref:`Particles <class_Particles>` or :ref:`Particles2D "
"<class_Particles2D>` nodes as they require advanced GPU features. Instead, "
"use :ref:`CPUParticles <class_CPUParticles>` or :ref:`CPUParticles2D "
"<class_CPUParticles2D>`, which provides a similar interface to a :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`."
msgstr ""
"高度なGPU機能を必要とするため、(それに対応していない)GLES2では :ref:"
"`Particles <class_Particles>` または :ref:`Particles2D <class_Particles2D>` "
"ノードを使用できません。代わりに、\\ :ref:`CPUParticles "
"<class_CPUParticles>` または :ref:`CPUParticles2D <class_CPUParticles2D>` を"
"使用します。これは、\\ :ref:`ParticlesMaterial <class_ParticlesMaterial>` と"
"同様のインターフェースを提供します。"

msgid ""
"Particles and Particles2D can be converted to their CPU equivalent node with "
"the \"Convert to CPUParticles\" option in the editor."
msgstr ""
"ParticlesとParticles2Dは、エディタの[CPUパーティクルに変換]オプションを使用し"
"て、相当するCPUタイプのノードに変換できます。"

msgid "``SCREEN_TEXTURE`` mip-maps"
msgstr "``SCREEN_TEXTURE`` ミップマップ"

msgid ""
"In GLES2, ``SCREEN_TEXTURE`` (accessed via a :ref:`ShaderMaterial "
"<class_ShaderMaterial>`) does not have computed mip-maps. So when accessing "
"at a different LOD, the texture will not appear blurry."
msgstr ""
"GLES2では、\\ ``SCREEN_TEXTURE``(:ref:`ShaderMaterial "
"<class_ShaderMaterial>` を介してアクセス)には計算済のミップマップがありませ"
"ん。そのため、異なるLODでアクセスする場合に、テクスチャの解像度は変更されませ"
"ん。"

msgid "``DEPTH_TEXTURE``"
msgstr "\\ ``DEPTH_TEXTURE``"

msgid ""
"While GLES2 supports ``DEPTH_TEXTURE`` in shaders, it may not work on some "
"old hardware (especially mobile)."
msgstr ""
"GLES2はシェーダーで ``DEPTH_TEXTURE`` をサポートしますが、一部の古いハード"
"ウェア(特にモバイル)では機能しない場合があります。"

msgid "Color space"
msgstr "色空間"

#, fuzzy
msgid ""
"GLES2 and GLES3 are in different color spaces. This means that colors will "
"appear slightly different between them especially when lighting is used."
msgstr ""
"GLES2とGLES3は異なる色空間にあります。これは、特に照明を使用する場合、色がわ"
"ずかに異なるように見えることを意味します。"

msgid ""
"If your game is going to use both GLES2 and GLES3, you can use an ``if`` "
"statement check and see if the output is in sRGB, using ``OUTPUT_IS_SRGB``. "
"``OUTPUT_IS_SRGB`` is ``true`` in GLES2 and ``false`` in GLES3."
msgstr ""
"ゲームでGLES2とGLES3の両方を使用する場合、\\ ``if`` ステートメントチェックと "
"``OUTPUT_IS_SRGB`` を使用して出力がsRGBであるかどうかを確認できます。\\ "
"``OUTPUT_IS_SRGB`` はGLES2では ``true`` で、GLES3では ``false`` です。"

msgid "HDR"
msgstr "\\ HDR"

#, fuzzy
msgid ""
"GLES2 is not capable of using High Dynamic Range (HDR) rendering features. "
"If HDR is set for your project, or for a given viewport, Godot will still "
"use Low Dynamic Range (LDR) which limits viewport values to the ``0-1`` "
"range."
msgstr ""
"GLES2は、ハイダイナミックレンジ(HDR)レンダリング機能を使用できません。プロ"
"ジェクトまたは特定のビューポートにHDRが設定されている場合、Godotは引き続き"
"ビューポート値を ``0-1`` の範囲に制限する低ダイナミックレンジ(LDR)を使用しま"
"す。"

msgid ""
"The Viewport **Debanding** property and associated project setting will also "
"have no effect when HDR is disabled. This means debanding can't be used in "
"GLES2."
msgstr ""

msgid "SpatialMaterial features"
msgstr "SpatialMaterialの機能"

msgid ""
"In GLES2, the following advanced rendering features in the :ref:"
"`SpatialMaterial <class_SpatialMaterial>` are missing:"
msgstr ""
"GLES2では、\\ :ref:`SpatialMaterial <class_SpatialMaterial>` の次の高度なレン"
"ダリング機能がありません:"

msgid "Refraction"
msgstr "Refraction(屈折)"

msgid "Subsurface scattering"
msgstr "サブサーフェススキャタリング"

msgid "Anisotropy"
msgstr "Anisotropy(異方性)"

msgid "Clearcoat"
msgstr "Clearcoat(クリアコート)"

msgid "Depth mapping"
msgstr "深度マッピング"

msgid "When using SpatialMaterials they will not even appear in the editor."
msgstr "SpatialMaterialsを使用する場合、エディタには表示されません。"

msgid ""
"In custom :ref:`ShaderMaterials <class_ShaderMaterial>`, you can set values "
"for these features but they will be non-functional. For example, you will "
"still be able to set the ``SSS`` built-in (which normally adds subsurface "
"scattering) in your shader, but nothing will happen."
msgstr ""
"カスタム :ref:`ShaderMaterials <class_ShaderMaterial>` では、これらの機能の値"
"を設定できますが、機能はしません。たとえば、シェーダーで ``SSS`` ビルトイン"
"(通常はサブサーフェス スキャタリングを追加)を設定することはできますが、何も起"
"こりません。"

msgid "Environment features"
msgstr "環境機能"

msgid ""
"In GLES2, the following features in the :ref:`Environment "
"<class_Environment>` are missing:"
msgstr ""
"GLES2では、\\ :ref:`Environment <class_Environment>` に次の機能がありません:"

msgid "Auto exposure"
msgstr "自動露出"

msgid "Tonemapping"
msgstr "トーンマッピング"

msgid "Screen space reflections"
msgstr "スクリーンスペースリフレクション"

msgid "Screen space ambient occlusion"
msgstr "スクリーンスペースアンビエントオクルージョン"

msgid "That means that in GLES2 environments you can only set:"
msgstr "つまり、GLES2の環境では次の設定のみが可能です:"

msgid "Sky (including procedural sky)"
msgstr "空(手続き型の空を含む)"

msgid "Ambient light"
msgstr "環境光"

msgid "Fog"
msgstr "フォグ"

msgid "Depth of field"
msgstr "被写界深度"

msgid "Glow (also known as bloom)"
msgstr "グロー(ブルームとも呼ばれます)"

msgid "Adjustment"
msgstr "調整"

msgid "GIProbes"
msgstr "\\ GIProbes"

msgid ""
":ref:`GIProbes <class_GIProbe>` do not work in GLES2. Instead use :ref:"
"`Baked Lightmaps <class_BakedLightmap>`. For a description of how baked "
"lightmaps work see the :ref:`Baked Lightmaps tutorial <doc_baked_lightmaps>`."
msgstr ""
":ref:`GIProbes <class_GIProbe>` はGLES2では機能しません。代わりに、\\ :ref:"
"`Baked Lightmaps <class_BakedLightmap>` を使用します。ベイク処理されたライト"
"マップの機能の説明については、\\ :ref:`Baked Lightmaps tutorial "
"<doc_baked_lightmaps>` を参照してください。"

msgid "Contact shadows"
msgstr "コンタクトシャドウ"

msgid ""
"The ``shadow_contact`` property of :ref:`Lights <class_Light>` is not "
"supported in GLES2 and so does nothing."
msgstr ""
":ref:`Lights <class_Light>` の ``shadow_contact`` プロパティはGLES2ではサポー"
"トされていないため、何もしません。"

msgid "Light performance"
msgstr "ライトの性能"

msgid ""
"In GLES2, performance scales poorly with several lights, as each light is "
"processed in a separate render pass (in opposition to GLES3 which is all "
"done in a single pass). Try to limit scenes to as few lights as possible in "
"order to achieve greatest performance."
msgstr ""
"GLES2では、各ライトが個別のレンダーパスで処理されるため、GLES2では(1回のパス"
"で行われるGLES3に対して)ライトの増加に伴いパフォーマンスが低下します。最高の"
"パフォーマンスを実現するために、シーンをできるだけ少ないライトに制限してくだ"
"さい。"

msgid "Texture compression"
msgstr "テクスチャ圧縮"

msgid ""
"On mobile, GLES2 requires ETC texture compression, while GLES3 requires "
"ETC2. ETC2 is enabled by default, so if exporting to mobile using GLES2 make "
"sure to set the project setting ``rendering/vram_compression/import_etc`` "
"and then reimport textures."
msgstr ""
"モバイルでは、GLES2にはETCテクスチャ圧縮が必要ですが、GLES3にはETC2が必要で"
"す。 ETC2はデフォルトで有効になっているため、GLES2を使用してモバイルにエクス"
"ポートする場合は、プロジェクト設定 ``rendering/vram_compression/import_etc`` "
"を設定してからテクスチャを再インポートしてください。"

msgid ""
"Since ETC doesn't support transparency, you must reimport textures that "
"contain an alpha channel to use the Uncompressed, Lossy or Lossless "
"compression mode (instead of Video RAM). This can be done in the Import dock "
"after selecting them in the FileSystem dock."
msgstr ""
"ETCは透明度をサポートしていないため、アルファチャネルを含むテクスチャを再イン"
"ポートして、(ビデオRAMの代わりに)非圧縮、非可逆、または可逆圧縮モードを使用す"
"る必要があります。これは、ファイルシステムドックでそれらを選択した後、イン"
"ポートドックで実行できます。"

msgid "Blend shapes"
msgstr "形状のブレンド"

msgid ""
"In GLES2, blend shapes are implemented on the CPU instead of the GPU. "
"Accordingly, they may not perform as well as blend shapes in GLES3. To avoid "
"performance issues when using blend shapes in GLES2, try to minimize the "
"number of blend shapes that are updated each frame."
msgstr ""

msgid "Shading language"
msgstr "シェーディング言語"

msgid ""
"GLES3 provides many built-in functions that GLES2 does not. Below is a list "
"of functions that are not available or are have limited support in GLES2."
msgstr ""
"GLES3は、GLES2にはない多くの組み込み関数を提供します。以下は、GLES2で使用でき"
"ない機能またはサポートが制限されている機能のリストです。"

msgid ""
"For a complete list of built-in GLSL functions see the :ref:`Shading "
"Language doc <doc_shading_language>`."
msgstr ""
"組み込みGLSL関数の完全なリストについては、\\ :ref:`Shading Language doc "
"<doc_shading_language>` を参照してください。"

msgid "Function"
msgstr "関数"

msgid "vec_type **modf** ( vec_type x, out vec_type i )"
msgstr "\\ vec_type **modf** ( vec_type x, out vec_type i )"

msgid "vec_int_type **floatBitsToInt** ( vec_type x )"
msgstr "\\ vec_int_type **floatBitsToInt** ( vec_type x )"

msgid "vec_uint_type **floatBitsToUint** ( vec_type x )"
msgstr "\\ vec_uint_type **floatBitsToUint** ( vec_type x )"

msgid "vec_type **intBitsToFloat** ( vec_int_type x )"
msgstr "\\ vec_type **intBitsToFloat** ( vec_int_type x )"

msgid "vec_type **uintBitsToFloat** ( vec_uint_type x )"
msgstr "\\ vec_type **uintBitsToFloat** ( vec_uint_type x )"

msgid "ivec2 **textureSize** ( sampler2D_type s, int lod )"
msgstr "\\ ivec2 **textureSize** ( sampler2D_type s, int lod )"

msgid "See workaround below"
msgstr "以下の回避策を参照してください"

msgid "ivec2 **textureSize** ( samplerCube s, int lod )"
msgstr "\\ ivec2 **textureSize** ( samplerCube s, int lod )"

msgid "vec4_type **texture** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""
"\\ vec4_type **texture** ( sampler_type s, vec_type uv [, float bias] )"

msgid "**bias** not available in vertex shader"
msgstr "**bias** は頂点シェーダーでは使用できません"

msgid ""
"vec4_type **textureProj** ( sampler_type s, vec_type uv [, float bias] )"
msgstr ""
"\\ vec4_type **textureProj** ( sampler_type s, vec_type uv [, float bias] )"

msgid "vec4_type **textureLod** ( sampler_type s, vec_type uv, float lod )"
msgstr "\\ vec4_type **textureLod** ( sampler_type s, vec_type uv, float lod )"

msgid "Only available in vertex shader on some hardware"
msgstr "一部のハードウェアの頂点シェーダーでのみ使用可能"

msgid "vec4_type **textureProjLod** ( sampler_type s, vec_type uv, float lod )"
msgstr ""
"\\ vec4_type **textureProjLod** ( sampler_type s, vec_type uv, float lod )"

#, fuzzy
msgid ""
"vec4_type **textureGrad** ( sampler_type s, vec_type uv, vec_type dPdx, "
"vec_type dPdy )"
msgstr ""
"\\ vec4_type **textureGrad** ( sampler_type s, vec_type uv, vec_type dPdx, "
"vec_type dPdy)"

msgid "vec_type **dFdx** ( vec_type p )"
msgstr "\\ vec_type **dFdx** ( vec_type p )"

msgid "vec_type **dFdy** ( vec_type p )"
msgstr "\\ vec_type **dFdy** ( vec_type p )"

msgid "vec_type **fwidth** ( vec_type p )"
msgstr "\\ vec_type **fwidth** ( vec_type p )"

msgid ""
"Functions not in GLES2's GLSL were added with Godots own shader standard "
"library. These functions may perform worse in GLES2 compared to GLES3."
msgstr ""
"GLES2のGLSLにない関数は、Godot独自のシェーダー標準ライブラリで追加されまし"
"た。これらの関数は、GLES3と比較してGLES2ではパフォーマンスが低下する可能性が"
"あります。"

msgid "``textureSize()`` workaround"
msgstr "``textureSize()`` 回避策"

msgid ""
"GLES2 does not support ``textureSize()``. You can get the size of a texture "
"the old fashioned way by passing in a uniform with the texture size yourself."
msgstr ""
"GLES2は ``textureSize()`` をサポートしていません。テクスチャサイズのユニ"
"フォームを自分で渡すことで、古い方法でテクスチャのサイズを取得できます。"

msgid "Built in variables and render modes"
msgstr "組み込み変数とレンダリングモード"

msgid ""
"Godot also provides many built-in variables and render modes. Some cannot be "
"supported in GLES2. Below is a list of built-in variables and render modes "
"that, when written to, will have no effect or could even cause issues when "
"using the GLES2 backend."
msgstr ""
"Godotは、多くの組み込み変数とレンダリングモードも提供します。 GLES2でサポート"
"できないものもあります。以下は、ビルトイン変数とレンダリングモードのリストで"
"す。これらは、書き込まれたときに効果がなかったり、GLES2バックエンドの使用時に"
"問題が発生したりする可能性さえあります。"

msgid "Variable / Render Mode"
msgstr "変数/レンダリング モード"

msgid "``ensure_correct_normals``"
msgstr "\\ ``ensure_correct_normals``"

msgid "``INSTANCE_ID``"
msgstr "\\ ``INSTANCE_ID``"

msgid "``DEPTH``"
msgstr "\\ ``DEPTH``"

msgid "``ANISOTROPY``"
msgstr "\\ ``ANISOTROPY``"

msgid "``ANISOTROPY_FLOW``"
msgstr "\\ ``ANISOTROPY_FLOW``"

msgid "``SSS_STRENGTH``"
msgstr "\\ ``SSS_STRENGTH``"

msgid "Translation status"
msgstr "翻訳ステータス"
