# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using Viewports"
msgstr "2 ビューポート"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Think of a :ref:`Viewport <class_Viewport>` as a screen onto which the game "
"is projected. In order to see the game, we need to have a surface on which "
"to draw it; that surface is the Root :ref:`Viewport <class_Viewport>`."
msgstr ""
":ref:`Viewport <class_Viewport>` は、ゲームが投影されるスクリーンと考えてくだ"
"さい。ゲームを見るためには、それを描くための表面が必要です。その表面がルー"
"ト :ref:`Viewport <class_Viewport>` です。"

msgid ""
":ref:`Viewports <class_Viewport>` can also be added to the scene so that "
"there are multiple surfaces to draw on. When we are drawing to a :ref:"
"`Viewport <class_Viewport>` that is not the Root, we call it a render "
"target. We can access the contents of a render target by accessing its "
"corresponding :ref:`texture <class_ViewportTexture>`. By using a :ref:"
"`Viewport <class_Viewport>` as a render target, we can either render "
"multiple scenes simultaneously or we can render to a :ref:`texture "
"<class_ViewportTexture>` which is applied to an object in the scene, for "
"example a dynamic skybox."
msgstr ""
":ref:`Viewports <class_Viewport>` をシーンに追加して、複数のサーフェスを描画"
"することもできます。ルートではない :ref:`Viewport <class_Viewport>` に描画す"
"る場合、それをレンダーターゲットと呼びます。対応する :ref:`texture "
"<class_ViewportTexture>` にアクセスすることで、レンダーターゲットのコンテンツ"
"にアクセスできます。\\ :ref:`Viewport <class_Viewport>` をレンダーターゲット"
"として使用することにより、複数のシーンを同時にレンダーするか、シーンのオブ"
"ジェクトに適用される :ref:`texture <class_ViewportTexture>` にレンダーできま"
"すが、その例が動的なスカイボックスです。"

msgid ""
":ref:`Viewports <class_Viewport>` have a variety of use cases, including:"
msgstr ""
":ref:`Viewports <class_Viewport>` には、次のようなさまざまなユースケースがあ"
"ります:"

msgid "Rendering 3D objects within a 2D game"
msgstr "2Dゲーム内での3Dオブジェクトのレンダリング"

msgid "Rendering 2D elements in a 3D game"
msgstr "3Dゲームでの2D要素のレンダリング"

msgid "Rendering dynamic textures"
msgstr "動的テクスチャのレンダリング"

msgid "Generating procedural textures at runtime"
msgstr "実行時の手続き型テクスチャの生成"

msgid "Rendering multiple cameras in the same scene"
msgstr "同じシーンを複数のカメラでレンダリングする"

msgid ""
"What all these use cases have in common is that you are given the ability to "
"draw objects to a texture as if it were another screen and can then choose "
"what to do with the resulting texture."
msgstr ""
"これらすべてのユースケースに共通することは、あたかも別の画面であるかのように"
"テクスチャにオブジェクトを描画する機能が与えられ、結果のテクスチャをどうする"
"かを選択できることです。"

msgid "Input"
msgstr "入力"

msgid ""
":ref:`Viewports <class_Viewport>` are also responsible for delivering "
"properly adjusted and scaled input events to all their children nodes. "
"Typically, input is received by the nearest :ref:`Viewport <class_Viewport>` "
"in the tree, but you can set :ref:`Viewports <class_Viewport>` not to "
"receive input by checking 'Disable Input' to 'on'; this will allow the next "
"nearest :ref:`Viewport <class_Viewport>` in the tree to capture the input."
msgstr ""
":ref:`Viewports <class_Viewport>` は、適切に調整およびスケーリングされた入力"
"イベントをすべての子ノードに配信する役割も果たします。通常、入力はツリー内の"
"最も近い :ref:`Viewport <class_Viewport>` によって受信されますが、 'Disable "
"Input' を 'on' にチェックすることで入力を受信しないように :ref:`Viewports "
"<class_Viewport>` を設定できます。これにより、ツリー内の次に近い :ref:"
"`Viewport <class_Viewport>` が入力をキャプチャできるようになります。"

msgid ""
"For more information on how Godot handles input, please read the :ref:`Input "
"Event Tutorial<doc_inputevent>`."
msgstr ""
"Godotが入力を処理する方法の詳細については、\\ :ref:`入力イベントチュートリア"
"ル<doc_inputevent>` をお読みください。"

msgid "Listener"
msgstr "リスナー"

msgid ""
"Godot supports 3D sound (in both 2D and 3D nodes); more on this can be found "
"in the :ref:`Audio Streams Tutorial<doc_audio_streams>`. For this type of "
"sound to be audible, the :ref:`Viewport <class_Viewport>` needs to be "
"enabled as a listener (for 2D or 3D). If you are using a custom :ref:"
"`Viewport <class_Viewport>` to display your :ref:`World <class_World>`, "
"don't forget to enable this!"
msgstr ""
"Godotは3Dサウンドをサポートしています(2Dおよび3Dノードの両方で)。詳細について"
"は、\\ :ref:`オーディオストリームチュートリアル<doc_audio_streams>` を参照し"
"てください。このタイプのサウンドを聞き取るには、\\ :ref:`Viewport "
"<class_Viewport>` をリスナーとして有効にする必要があります(2Dまたは3Dの場"
"合)。カスタム :ref:`Viewport <class_Viewport>` を使用して :ref:`World "
"<class_World>` を表示している場合、これを有効にすることを忘れないでください！"

msgid "Cameras (2D & 3D)"
msgstr "カメラ(2Dおよび3D)"

msgid ""
"When using a :ref:`Camera <class_Camera>` / :ref:`Camera2D "
"<class_Camera2D>`, cameras will always display on the closest parent :ref:"
"`Viewport <class_Viewport>` (going towards the root). For example, in the "
"following hierarchy:"
msgstr ""
":ref:`Camera <class_Camera>` / :ref:`Camera2D <class_Camera2D>` を使用する場"
"合、カメラは常に最も近い親である :ref:`Viewport <class_Viewport>` に表示され"
"ます(ルートに向かって)。たとえば、次の階層では:"

msgid ""
"CameraA will display on the Root :ref:`Viewport <class_Viewport>` and it "
"will draw MeshA. CameraB will be captured by the :ref:`Viewport "
"<class_Viewport>` Node along with MeshB. Even though MeshB is in the scene "
"hierarchy, it will still not be drawn to the Root :ref:`Viewport "
"<class_Viewport>`. Similarly MeshA will not be visible from the :ref:"
"`Viewport <class_Viewport>` node because :ref:`Viewport <class_Viewport>` "
"nodes only capture nodes below them in the hierarchy."
msgstr ""
"CameraAはルート :ref:`Viewport <class_Viewport>` に表示され、MeshAを描画しま"
"す。CameraBは、MeshBとともに :ref:`Viewport <class_Viewport>` ノードによって"
"キャプチャされます。MeshBはシーン階層内にありますが、ルート :ref:`Viewport "
"<class_Viewport>` には描画されません。同様に、MeshAは :ref:`Viewport "
"<class_Viewport>` ノードからは表示されません。これは、\\ :ref:`Viewport "
"<class_Viewport>` ノードが階層内でその下のノードのみをキャプチャするためで"
"す。"

msgid ""
"There can only be one active camera per :ref:`Viewport <class_Viewport>`, so "
"if there is more than one, make sure that the desired one has the "
"\"current\" property set, or make it the current camera by calling:"
msgstr ""
"アクティブなカメラは :ref:`Viewport <class_Viewport>` につき1つしか存在できな"
"いため、複数ある場合は、目的のカメラに \"current\" プロパティが設定されている"
"ことを確認するか、次の呼び出しで現在のカメラにします:"

msgid ""
"By default, cameras will render all objects in their world. In 3D, cameras "
"can use their :ref:`cull_mask <class_Camera_property_cull_mask>` property "
"combined with the :ref:`VisualInstance's <class_VisualInstance>` :ref:`layer "
"<class_VisualInstance_property_layers>` property to restrict which objects "
"are rendered."
msgstr ""
"デフォルトでは、カメラはワールド内のすべてのオブジェクトをレンダリングしま"
"す。 3Dでは、カメラは :ref:`cull_mask <class_Camera_property_cull_mask>` プロ"
"パティを :ref:`VisualInstance's <class_VisualInstance>` :ref:`layer "
"<class_VisualInstance_property_layers>` プロパティと組み合わせて使用して、レ"
"ンダリングするオブジェクトを制限できます。"

msgid "Scale & stretching"
msgstr "スケールとストレッチ"

msgid ""
":ref:`Viewports <class_Viewport>` have a \"size\" property, which represents "
"the size of the :ref:`Viewport <class_Viewport>` in pixels. For :ref:"
"`Viewports <class_Viewport>` which are children of :ref:`ViewportContainers "
"<class_viewportcontainer>`, these values are overridden, but for all others, "
"this sets their resolution."
msgstr ""
":ref:`Viewports <class_Viewport>` には \"size\" プロパティがあり、これは :"
"ref:`Viewport <class_Viewport>` のサイズをピクセル単位で表します。\\ :ref:"
"`ViewportContainers <class_viewportcontainer>` の子である :ref:`Viewports "
"<class_Viewport>` の場合、これらの値はオーバーライドされますが、他のすべての"
"場合、これにより解像度が設定されます。"

msgid ""
"It is also possible to scale the 2D content and make the :ref:`Viewport "
"<class_Viewport>` resolution different from the one specified in size, by "
"calling:"
msgstr ""
"次を呼び出して、2Dコンテンツをスケーリングし、\\ :ref`Viewport "
"<class_Viewport>` の解像度をサイズで指定した解像度と異なるものにすることもで"
"きます:"

msgid ""
"The root :ref:`Viewport <class_Viewport>` uses this for the stretch options "
"in the project settings. For more information on scaling and stretching "
"visit the :ref:`Multiple Resolutions Tutorial <doc_multiple_resolutions>`"
msgstr ""
"ルート :ref:`Viewport <class_Viewport>` は、プロジェクト設定のストレッチオプ"
"ションにこれを使用します。スケーリングとストレッチの詳細については、次をご覧"
"ください。\\ :ref:`Multiple Resolutions Tutorial <doc_multiple_resolutions>`"

msgid "Worlds"
msgstr "ワールド"

#, fuzzy
msgid ""
"For 3D, a :ref:`Viewport <class_Viewport>` will contain a :ref:`World "
"<class_World>`. This is basically the universe that links physics and "
"rendering together. Spatial-based nodes will register using the :ref:`World "
"<class_World>` of the closest :ref:`Viewport <class_Viewport>`. By default, "
"newly created :ref:`Viewports <class_Viewport>` do not contain a :ref:`World "
"<class_World>` but use the same as their parent :ref:`Viewport "
"<class_Viewport>` (the root :ref:`Viewport <class_Viewport>` always contains "
"a :ref:`World <class_World>`, which is the one objects are rendered to by "
"default). A :ref:`World <class_World>` can be set in a :ref:`Viewport "
"<class_Viewport>` using the \"world\" property, and that will separate all "
"children nodes of that :ref:`Viewport <class_Viewport>` from interacting "
"with the parent :ref:`Viewport's <class_Viewport>` :ref:`World "
"<class_World>`. This is especially useful in scenarios where, for example, "
"you might want to show a separate character in 3D imposed over the game "
"(like in StarCraft)."
msgstr ""
"3Dの場合、\\ :ref:`Viewport <class_Viewport>` には :ref:`World "
"<class_World>` が含まれます。これは基本的に、物理演算とレンダリングをリンクす"
"る宇宙です。Spatial(3D)ベースノードは、最も近い :ref:`Viewport "
"<class_Viewport>` の :ref:`World <class_World>` を使用して登録します。デフォ"
"ルトでは、新しく作成された :ref:`Viewport <class_Viewport>` には :ref:`World "
"<class_World>` は含まれませんが、親の :ref:`Viewport <class_Viewport>` (ルー"
"ト :ref:`Viewport <class_Viewport>` には常に :ref:`World <class_World>` が含"
"まれます。これはデフォルトでオブジェクトがレンダリングされるもので"
"す)。\"World\" プロパティを使用して :ref:`World <class_World>` を :ref:"
"`Viewport <class_Viewport>` に設定できます。これにより、\\ :ref:`Viewport "
"<class_Viewport>` のすべての子ノードが親 :ref:`Viewport <class_Viewport>` :"
"ref:`World <class_World>` との対話から分離されます。これは、たとえば、"
"StarCraftのように、ゲームに3Dで乗せられた別のキャラクターを表示したい場合に特"
"に役立ちます。"

msgid ""
"As a helper for situations where you want to create :ref:`Viewports "
"<class_Viewport>` that display single objects and don't want to create a :"
"ref:`World <class_World>`, :ref:`Viewport <class_Viewport>` has the option "
"to use its own :ref:`World <class_World>`. This is useful when you want to "
"instance 3D characters or objects in a 2D :ref:`World <class_World2D>`."
msgstr ""
"単一のオブジェクトを表示する :ref:`Viewport <class_Viewport>` を作成し、\\ :"
"ref:`World <class_World>`\\ 、\\ :ref:`Viewport <class_Viewport>` を作成した"
"くない状況のヘルパーとして独自の :ref:`World <class_World>` を使用するオプ"
"ションがあります。これは、2D\\ :ref:`World <class_World2D>` で3Dキャラクター"
"またはオブジェクトをインスタンス化する場合に便利です。"

msgid ""
"For 2D, each :ref:`Viewport <class_Viewport>` always contains its own :ref:"
"`World2D <class_World2D>`. This suffices in most cases, but in case sharing "
"them may be desired, it is possible to do so by setting the :ref:`Viewport's "
"<class_Viewport>` :ref:`World2D <class_World2D>` manually."
msgstr ""
"2Dの場合、各 :ref:`Viewport <class_Viewport>` には常にそれ自身の :ref:"
"`World2D <class_World2D>` が含まれます。ほとんどの場合これで十分ですが、それ"
"らを共有したい場合は、\\ :ref:`Viewport <class_Viewport>` :ref:`World2D "
"<class_World2D>` を手動で設定することで可能です。"

msgid ""
"For an example of how this works, see the demo projects `3D in 2D <https://"
"github.com/godotengine/godot-demo-projects/tree/master/viewport/3d_in_2d>`_ "
"and `2D in 3D <https://github.com/godotengine/godot-demo-projects/tree/"
"master/viewport/2d_in_3d>`_ respectively."
msgstr ""
"これがどのように機能するかの例については、デモプロジェクト `3D in 2D "
"<https://github.com/godotengine/godot-demo-projects/tree/master/"
"viewport/3d_in_2d>`_ および `2D in 3D <https://github.com/godotengine/godot-"
"demo-projects/tree/master/viewport/2d_in_3d> `_ があります。"

msgid "Capture"
msgstr "キャプチャ"

msgid ""
"It is possible to query a capture of the :ref:`Viewport <class_Viewport>` "
"contents. For the root :ref:`Viewport <class_Viewport>`, this is effectively "
"a screen capture. This is done with the following code:"
msgstr ""
":ref:`Viewport <class_Viewport>` コンテンツのキャプチャをクエリすることが可能"
"です。ルート :ref:`Viewport <class_Viewport>` の場合、これは事実上画面キャプ"
"チャです。これは、次のコードで実行されます:"

msgid ""
"But if you use this in ``_ready()`` or from the first frame of the :ref:"
"`Viewport's <class_Viewport>` initialization, you will get an empty texture "
"because there is nothing to get as texture. You can deal with it using (for "
"example):"
msgstr ""
"しかし、これを ``_ready()`` で、または :ref:`Viewport <class_Viewport>` 初期"
"化の最初のフレームから使用すると、テクスチャとして取得するものがないため、空"
"のテクスチャを取得します。これは(例)を使用して対処できます:"

msgid "Viewport Container"
msgstr "ビューポートコンテナ"

msgid ""
"If the :ref:`Viewport <class_Viewport>` is a child of a :ref:"
"`ViewportContainer <class_viewportcontainer>`, it will become active and "
"display anything it has inside. The layout looks like this:"
msgstr ""
":ref:`Viewport <class_Viewport>` が:ref:`ViewportContainer "
"<class_viewportcontainer>` の子である場合、アクティブになり、内部にあるものを"
"すべて表示します。レイアウトは次のようになります:"

msgid ""
"The :ref:`Viewport <class_Viewport>` will cover the area of its parent :ref:"
"`ViewportContainer <class_viewportcontainer>` completely if :ref:"
"`Stretch<class_viewportcontainer_property_stretch>` is set to ``true`` in :"
"ref:`ViewportContainer <class_viewportcontainer>`. Note: The size of the :"
"ref:`ViewportContainer <class_viewportcontainer>` cannot be smaller than the "
"size of the :ref:`Viewport <class_Viewport>`."
msgstr ""
":ref:`Stretch <class_viewportcontainer_property_stretch>` が :ref:"
"`ViewportContainer <class_viewportcontainer>` で ``true`` に設定されている場"
"合、\\ :ref:`Viewport <class_Viewport>` は、その親 :ref:`ViewportContainer "
"<class_viewportcontainer>` の領域を完全にカバーします。注: :ref:"
"`ViewportContainer <class_viewportcontainer>` のサイズは、\\ :ref:`Viewport "
"<class_Viewport>` のサイズより小さくすることはできません。"

msgid "Rendering"
msgstr "レンダリング"

msgid ""
"Due to the fact that the :ref:`Viewport <class_Viewport>` is an entryway "
"into another rendering surface, it exposes a few rendering properties that "
"can be different from the project settings. The first is MSAA; you can "
"choose to use a different level of MSAA for each :ref:`Viewport "
"<class_Viewport>`; the default behavior is DISABLED. You can also set the :"
"ref:`Viewport <class_Viewport>` to use HDR, HDR is very useful for when you "
"want to store values in the texture that are outside the range 0.0 - 1.0."
msgstr ""
":ref:`Viewport <class_Viewport>` は別のレンダリングサーフェスへの入り口である"
"という事実により、プロジェクト設定とは異なるいくつかのレンダリングプロパティ"
"を公開します。最初はMSAAです。\\ :ref:`Viewport <class_Viewport>` ごとに異な"
"るレベルのMSAAを使用することを選択できます。デフォルトの動作は無効です。HDRを"
"使用するように :ref:`Viewport <class_Viewport>` を設定することもできます。HDR"
"は、0.0〜1.0の範囲外のテクスチャに値を保存する場合に非常に役立ちます。"

msgid ""
"If you know how the :ref:`Viewport <class_Viewport>` is going to be used, "
"you can set its Usage to either 3D or 2D. Godot will then restrict how the :"
"ref:`Viewport <class_Viewport>` is drawn to in accordance with your choice; "
"default is 3D. The 2D usage mode is slightly faster and uses less memory "
"compared to the 3D one. It's a good idea to set the :ref:`Viewport "
"<class_Viewport>`'s Usage property to 2D if your viewport doesn't render "
"anything in 3D."
msgstr ""
":ref:`Viewport <class_Viewport>` の使用方法がわかっている場合、その使用法を3D"
"または2Dに設定できます。Godotは、選択に従って :ref:`Viewport "
"<class_Viewport>` の描画方法を制限します。デフォルトは3Dです。2D使用モード"
"は、3Dに比べてわずかに高速であり、使用するメモリも少なくなります。ビューポー"
"トが3Dで何もレンダリングしない場合は、\\ :ref:`Viewport <class_Viewport>` の"
"Usageプロパティを2Dに設定することをお勧めします。"

msgid ""
"If you need to render 3D shadows in the viewport, make sure to set the "
"viewport's *Shadow Atlas Size* property to a value higher than 0. Otherwise, "
"shadows won't be rendered. For reference, the Project Settings define it to "
"4096 by default."
msgstr ""
"ビューポートで3Dシャドウをレンダリングする必要がある場合は、必ずビューポート"
"の *Shadow Atlas Size* プロパティを0より大きい値に設定してください。それ以外"
"の場合、シャドウはレンダリングされません。参考までに、プロジェクト設定ではデ"
"フォルトで4096に定義されています。"

msgid ""
"Godot also provides a way of customizing how everything is drawn inside :ref:"
"`Viewports <class_Viewport>` using “Debug Draw”. Debug Draw allows you to "
"specify one of four options for how the :ref:`Viewport <class_Viewport>` "
"will display things drawn inside it. Debug Draw is disabled by default."
msgstr ""
"Godotは、「デバッグ描画」を使用して :ref:`Viewport <class_Viewport>` 内にすべ"
"てを描画する方法をカスタマイズする方法も提供します。デバッグ描画では、\\ :"
"ref:`Viewport <class_Viewport>` が内部に描画されたものを表示する方法につい"
"て、4つのオプションのいずれかを指定できます。デバッグ描画はデフォルトで無効に"
"なっています。"

msgid "*A scene drawn with Debug Draw disabled*"
msgstr "*デバッグ描画を無効にして描画されたシーン*"

msgid ""
"The other three options are Unshaded, Overdraw, and Wireframe. Unshaded "
"draws the scene without using lighting information so all the objects appear "
"flatly colored the color of their albedo."
msgstr ""
"他の3つのオプションは、シェーディングなし、オーバードロー、ワイヤーフレームで"
"す。シェーディングなしは、照明情報を使用せずにシーンを描画するため、すべての"
"オブジェクトはアルベドの色と同じ均一な色で表示されます。"

msgid "*The same scene with Debug Draw set to Unshaded*"
msgstr "*デバッグ描画がUnshadedに設定された同じシーン*"

msgid ""
"Overdraw draws the meshes semi-transparent with an additive blend so you can "
"see how the meshes overlap."
msgstr ""
"Overdrawは、追加ブレンドを使用して半透明のメッシュを描画するため、メッシュが"
"どのように重なり合っているかを確認できます。"

msgid "*The same scene with Debug Draw set to Overdraw*"
msgstr "*デバッグ描画をOverdrawに設定した同じシーン*"

msgid ""
"Lastly, Wireframe draws the scene using only the edges of triangles in the "
"meshes."
msgstr ""
"最後に、Wireframeはメッシュ内の三角形のエッジのみを使用してシーンを描画しま"
"す。"

msgid ""
"The effects of the Wireframe mode are only visible in the editor, not while "
"the project is running."
msgstr ""
"ワイヤフレームモードの効果は、プロジェクトの実行中ではなく、エディタでのみ表"
"示されます。"

msgid "Render target"
msgstr "レンダーターゲット"

msgid ""
"When rendering to a :ref:`Viewport <class_Viewport>`, whatever is inside "
"will not be visible in the scene editor. To display the contents, you have "
"to draw the :ref:`Viewport's <class_Viewport>` :ref:`ViewportTexture "
"<class_ViewportTexture>` somewhere. This can be requested via code using "
"(for example):"
msgstr ""
":ref:`Viewport <class_Viewport>` にレンダリングする場合、内部のものはシーンエ"
"ディタに表示されません。内容を表示するには、\\ :ref:`Viewport "
"<class_Viewport>` :ref:`ViewportTexture <class_ViewportTexture>` をどこかに描"
"画する必要があります。これは、次のコードを使用してリクエストできます(例):"

msgid ""
"Or it can be assigned in the editor by selecting \"New ViewportTexture\""
msgstr ""
"または、「新規ViewportTexture」を選択してエディタで割り当てることができます"

msgid ""
"and then selecting the :ref:`Viewport <class_Viewport>` you want to use."
msgstr "そして、使用したい :ref:`Viewport <class_Viewport>` を選択します。"

#, fuzzy
msgid ""
"Every frame, the :ref:`Viewport <class_Viewport>`'s texture is cleared away "
"with the default clear color (or a transparent color if :ref:`Transparent "
"Bg<class_Viewport_property_transparent_bg>` is set to ``true``). This can be "
"changed by setting :ref:`Clear "
"Mode<class_Viewport_property_render_target_clear_mode>` to Never or Next "
"Frame. As the name implies, Never means the texture will never be cleared, "
"while next frame will clear the texture on the next frame and then set "
"itself to Never."
msgstr ""
"すべてのフレームで、\\ :ref:`Viewport <class_Viewport>` のテクスチャはデフォ"
"ルトのクリアカラー(または :ref:`Transparent BG "
"<class_Viewport_property_transparent_bg>` が ``true`` に設定されている場合は"
"透明カラー)でクリアされます。これは :ref:`Clear Mode "
"<class_Viewport_property_render_target_clear_mode>` をNeverまたはNext Frameに"
"設定することで変更できます。名前が示すように、Neverはテクスチャがクリアされな"
"いことを意味し、一方、次のフレームは次のフレームでテクスチャをクリアし、Never"
"に設定します。"

msgid ""
"By default, re-rendering of the :ref:`Viewport <class_Viewport>` happens "
"when the :ref:`Viewport <class_Viewport>`'s :ref:`ViewportTexture "
"<class_ViewportTexture>` has been drawn in a frame. If visible, it will be "
"rendered; otherwise, it will not. This behavior can be changed to manual "
"rendering (once), or always render, no matter if visible or not. This "
"flexibility allows users to render an image once and then use the texture "
"without incurring the cost of rendering every frame."
msgstr ""
"デフォルトでは、\\ :ref:`Viewport <class_Viewport>`の :ref:`Viewport "
"<class_Viewport>` の :ref:`ViewportTexture <class_ViewportTexture>` がフレー"
"ムに描画されたときに、\\ :ref:`Viewport <class_Viewport>` の再レンダリングが"
"行われます。表示されている場合、レンダリングされます。それ以外の場合はそうな"
"りません。この動作は、手動レンダリング(1回)に変更することも、表示するかどうか"
"に関係なく常にレンダリングすることもできます。この柔軟性により、ユーザーはイ"
"メージを一度レンダリングしてから、すべてのフレームをレンダリングするコストを"
"かけずにテクスチャを使用できます。"

msgid ""
"Make sure to check the Viewport demos! Viewport folder in the demos archive "
"available to download, or https://github.com/godotengine/godot-demo-projects/"
"tree/master/viewport"
msgstr ""
"ビューポートのデモを必ず確認してください！ダウンロード可能なデモアーカイブの"
"ビューポートフォルダ、または次 のURL https://github.com/godotengine/godot-"
"demo-projects/tree/master/viewport"

msgid "Translation status"
msgstr "翻訳ステータス"
