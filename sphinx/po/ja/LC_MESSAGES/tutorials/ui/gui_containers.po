# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using Containers"
msgstr "コンテナ"

msgid ""
":ref:`Anchors <doc_size_and_anchors>` are an efficient way to handle "
"different aspect ratios for basic multiple resolution handling in GUIs,"
msgstr ""
":ref:`アンカー <doc_size_and_anchors>` は、GUIでの基本的な複数解像度処理に対"
"して異なるアスペクト比を処理する効率的な方法ですが、"

msgid "For more complex user interfaces, they can become difficult to use."
msgstr "より複雑なユーザーインターフェイスの場合、使いにくい可能性があります。"

msgid ""
"This is often the case of games, such as RPGs, online chats, tycoons or "
"simulations. Another common case where more advanced layout features may be "
"required is in-game tools (or simply just tools)."
msgstr ""
"これは、RPG、オンラインチャット、経営/戦略シミュレーションなどのゲームによく"
"見られます。高度なレイアウト機能が必要になる可能性があるもう 1つの一般的な"
"ケースは、ゲーム内ツール(または単にツール)です。"

msgid ""
"All these situations require a more capable OS-like user interface, with "
"advanced layout and formatting. For that, :ref:`Containers "
"<class_container>` are more useful."
msgstr ""
"このような状況では、高度なレイアウトと書式設定を備えた、より高い機能を持つOS"
"のようなユーザー インターフェイスが必要です。そのためには、\\ :ref:"
"`Containers <class_container>` の方が便利です。"

msgid "Container layout"
msgstr "コンテナのレイアウト"

msgid ""
"Containers provide a huge amount of layout power (as an example, the Godot "
"editor user interface is entirely done using them):"
msgstr ""
"コンテナは、膨大な量のレイアウト機能を提供します(例として、Godotエディタの"
"ユーザーインターフェイスはそれを使って完全に仕上がっています):"

msgid ""
"When a :ref:`Container <class_Container>`-derived node is used, all "
"children :ref:`Control <class_Control>` nodes give up their own positioning "
"ability. This means the *Container* will control their positioning and any "
"attempt to manually alter these nodes will be either ignored or invalidated "
"the next time their parent is resized."
msgstr ""
":ref:`Container <class_Container>` 派生ノードを使用すると、すべての子 :ref:"
"`Control <class_Control>` ノードは独自のポジショニング機能を放棄します。つま"
"り、これらのノードを手動で変更しようとしても、\\ *コンテナ* がその位置を制御"
"しているので、次に親がサイズ変更されたときに変更が無視または無効化されること"
"を意味します。"

msgid ""
"Likewise, when a *Container* derived node is resized, all its children will "
"be re-positioned according to it, with a behavior based on the type of "
"container used:"
msgstr ""
"同様に、\\ *コンテナ* 派生ノードのサイズが変更されると、そのすべての子がそれ"
"に応じて再配置され、使用されるコンテナのタイプに基づいた動作が行われます:"

msgid "Example of *HBoxContainer* resizing children buttons."
msgstr "子ボタンのサイズを変更する *HBoxContainer* の例。"

msgid ""
"The real strength of containers is that they can be nested (as nodes), "
"allowing the creation of very complex layouts that resize effortlessly."
msgstr ""
"コンテナの本当の長所は、コンテナを(ノードとして)ネストできることです。これに"
"より、簡単にサイズ変更できる非常に複雑なレイアウトを作成できます。"

msgid "Size flags"
msgstr "サイズフラグ"

msgid ""
"When adding a node to a container, the way the container treats each child "
"depends mainly on their *size flags*. These flags can be found by inspecting "
"any control that is a child of a *Container*."
msgstr ""
"コンテナにノードを追加する場合、コンテナが各子ノードを扱う方法は、主に *Size "
"Flags* に依存します。これらのフラグは、\\ *コンテナ* の子であるコントロールを"
"調べることで見つけることができます。"

msgid ""
"Size flags are independent for vertical and horizontal sizing and not all "
"containers make use of them (but most do):"
msgstr ""
"サイズフラグは垂直および水平のサイズ設定に依存せず、すべてのコンテナがそれら"
"を使用するわけではありません(ただし、ほとんどの場合は使用します):"

msgid ""
"**Fill**: Ensures the control *fills* the designated area within the "
"container. No matter if a control *expands* or not (see below), it will only "
"*fill* the designated area when this is toggled on (it is by default)."
msgstr ""
"**Fill**: コントロールがコンテナ内の指定された領域を *塗りつぶす* ようにしま"
"す。コントロールが *Expand* かどうかに関係なく(下記参照)、これがオンに切り替"
"えられると、指定された領域が *塗りつぶされ* ます(これがデフォルトです)。"

#, fuzzy
msgid ""
"**Expand**: Attempts to use as much space as possible in the parent "
"container (in each axis). Controls that don't expand will be pushed away by "
"those that do. Between expanding controls, the amount of space they take "
"from each other is determined by the *Ratio* (see below)."
msgstr ""
"**Expand**: 親コンテナ(の縦横)で、できるだけ多くの領域を使用しようとします。"
"展開しないコントロールは、展開するコントロールによって押し出されます。それら"
"が拡大する間に、互いに取るスペースの量は *Stretch Ratio* によって決まります"
"(下記参照)。"

msgid ""
"**Shrink Center** When expanding (and if not filling), try to remain at the "
"center of the expanded area (by default it remains at the left or top)."
msgstr ""
"**Shrink Center** 拡大する場合(および塗りつぶさない場合)は、拡大された領域の"
"中心に留まるよう試みます(デフォルトでは、左または上に留まります)。"

msgid ""
"**Ratio** Simple ratio of how much expanded controls take up the available "
"space in relation to each other. A control with \"2\", will take up twice as "
"much available space as one with \"1\"."
msgstr ""
"**Stretch Ratio** 拡大されたコントロールが、相互に関連して使用可能なスペース"
"を占める割合の単純比率。\"2\"を持つコントロールは、\"1\"を持つコントロールの2"
"倍の使用可能なスペースを占有します。"

msgid ""
"Experimenting with these flags and different containers is recommended to "
"get a better grasp on how they work."
msgstr ""
"これらのフラグとさまざまなコンテナを試して、それらがどのように機能するかをよ"
"りよく把握することをお勧めします。"

msgid "Container types"
msgstr "コンテナの種類"

msgid ""
"Godot provides several container types out of the box as they serve "
"different purposes:"
msgstr ""
"Godotはさまざまな目的に役立てるため、すぐに使用できるいくつかのコンテナタイプ"
"を提供します:"

msgid "Box Containers"
msgstr "ボックスコンテナ"

#, fuzzy
msgid ""
"Arranges child controls vertically or horizontally (via :ref:`HBoxContainer "
"<class_HBoxContainer>` and :ref:`VBoxContainer <class_VBoxContainer>`). In "
"the opposite of the designated direction (as in, vertical for an horizontal "
"container), it just expands the children."
msgstr ""
"子コントロールを垂直または水平に配置します(:ref:`HBoxContainer "
"<class_HBoxContainer>` および :ref:`VBoxContainer <class_VBoxContainer>` を使"
"用)。指定された方向とは反対に(たとえば、水平コンテナの場合は垂直に)、子を拡張"
"するだけです。"

msgid ""
"These containers make use of the *Ratio* property for children with the "
"*Expand* flag set."
msgstr ""
"これらのコンテナは、\\ *Expand* フラグが設定されている子に対して *Ratio* プロ"
"パティを使用します。"

msgid "Grid Container"
msgstr "グリッドコンテナ"

msgid ""
"Arranges child controls in a grid layout (via :ref:`GridContainer "
"<class_GridContainer>`, amount of columns must be specified). Uses both the "
"vertical and horizontal expand flags."
msgstr ""
"グリッドレイアウトに子コントロールを配置します(:ref:`GridContainer "
"<class_GridContainer>` を介して、列の数量を指定する必要があります)。垂直およ"
"び水平の両方の展開フラグを使用します。"

msgid "Margin Container"
msgstr "マージンコンテナ"

msgid ""
"Child controls are expanded towards the bounds of this control (via :ref:"
"`MarginContainer <class_MarginContainer>`). Padding will be added on the "
"margins depending on the theme configuration."
msgstr ""
"子コントロールは、このコントロールの境界に向かって展開されます(:ref:"
"`MarginContainer <class_MarginContainer>` を使用)。テーマの設定に応じて余白に"
"パディングが追加されます。"

#, fuzzy
msgid ""
"Again, keep in mind that the margins are a *Theme* value, so they need to be "
"edited from the constants overrides section of each control:"
msgstr ""
"繰り返しますが、マージンは *テーマ* の値であるため、単一のコントロールで必要"
"な場合は、定数オーバーライドセクションで編集する必要があります:"

msgid "Tab Container"
msgstr "タブコンテナ"

msgid ""
"Allows you to place several child controls stacked on top of each other "
"(via :ref:`TabContainer <class_TabContainer>`), with only the *current* one "
"visible."
msgstr ""
"複数の子コントロールを (:ref:`TabContainer <class_TabContainer>` を使用して) "
"積み重ねて、\\ *current* コントロールのみが見える状態で表示します。"

msgid ""
"Changing the *current* one is done via tabs located at the top of the "
"container, via clicking:"
msgstr "*current* を変更するには、コンテナの上部にあるタブをクリックします:"

msgid ""
"The titles are generated from the node names by default (although they can "
"be overridden via *TabContainer* API)."
msgstr ""
"タイトルはデフォルトでノード名から生成されます(ただし、\\ *TabContainer* API"
"を使用してオーバーライドできます)。"

msgid ""
"Settings such as tab placement and *StyleBox* can be modified in the "
"*TabContainer* theme overrides."
msgstr ""
"タブの配置や *StyleBox* などの設定は、\\ *TabContainer* テーマのオーバーライ"
"ドで変更できます。"

msgid "Split Container"
msgstr "分割コンテナ"

msgid ""
"Accepts only one or two children controls, then places them side to side "
"with a divisor (via :ref:`HSplitContainer <class_HSplitContainer>` and :ref:"
"`VSplitContainer <class_VSplitContainer>`). Respects both horizontal and "
"vertical flags, as well as *Ratio*."
msgstr ""
"1つまたは2つの子コントロールのみを受け入れ、分割線と並べて配置します(:ref:"
"`HSplitContainer <class_HSplitContainer>` および :ref:`VSplitContainer "
"<class_VSplitContainer>` を使用)。\\ *Ratio* と同様に、水平フラグと垂直フラグ"
"の両方を考慮します。"

msgid ""
"The divisor can be dragged around to change the size relation between both "
"children:"
msgstr "分割線をドラッグして、両方の子のサイズ関係を変更できます:"

msgid "PanelContainer"
msgstr "パネルコンテナ"

msgid ""
"Simple container that draws a *StyleBox*, then expands children to cover its "
"whole area (via :ref:`PanelContainer <class_PanelContainer>`, respecting the "
"*StyleBox* margins). It respects both the horizontal and vertical size flags."
msgstr ""
"*StyleBox* を描画するシンプルなコンテナは、その領域全体をカバーするように子を"
"展開します(:ref:`PanelContainer <class_PanelContainer>` を介し、\\ "
"*StyleBox* マージンを考慮して)。これは、水平方向と垂直方向の両方のサイズのフ"
"ラグを考慮します。"

msgid ""
"This container is useful as top-level, or just to add custom backgrounds to "
"sections of a layout."
msgstr ""
"このコンテナは、トップレベルとして、またはレイアウトのセクションにカスタムの"
"背景を追加する場合に便利です。"

msgid "ScrollContainer"
msgstr "スクロールコンテナ"

msgid ""
"Accepts a single child node. If this node is bigger than the container, "
"scrollbars will be added to allow panning the node around (via :ref:"
"`ScrollContainer <class_ScrollContainer>`). Both vertical and horizontal "
"size flags are respected, and the behavior can be turned on or off per axis "
"in the properties."
msgstr ""
"単一の子ノードを受け入れます。このノードがコンテナよりも大きい場合、スクロー"
"ルバーが追加され、ノードをパンできます(:ref:`ScrollContainer "
"<class_ScrollContainer>` を使用)。垂直と水平の両方のサイズフラグが考慮され、"
"プロパティの軸ごとに動作をオンまたはオフにできます。"

msgid ""
"Mouse wheel and touch drag (when touch is available) are also valid ways to "
"pan the child control around."
msgstr ""
"マウスホイールとタッチドラッグ(タッチが使用可能な場合)も、子コントロールをパ"
"ンするための有効な方法です。"

msgid ""
"As in the example above, one of the most common ways to use this container "
"is together with a *VBoxContainer* as child."
msgstr ""
"上記の例のように、このコンテナを使用する最も一般的な方法の1つは、\\ "
"*VBoxContainer* を子として使用することです。"

msgid "ViewportContainer"
msgstr "ビューポートコンテナ"

msgid ""
"This is a special control that will only accept a single *Viewport* node as "
"child, and it will display it as if it was an image (via :ref:"
"`ViewportContainer <class_ViewportContainer>`)."
msgstr ""
"これは、子として単一の *Viewport* ノードのみを受け入れる特別なコントロール"
"で、それをイメージであるかのように表示します(:ref:`ViewportContainer "
"<class_ViewportContainer>` を使用)。"

msgid "Creating custom Containers"
msgstr "カスタムコンテナの作成"

msgid ""
"It is possible to easily create a custom container using script. Here is an "
"example of a simple container that fits children to its rect size:"
msgstr ""
"スクリプトを使用してカスタムコンテナを簡単に作成することができます。以下は、"
"子をその長方形サイズに合わせる単純なコンテナの例です:"

msgid "Translation status"
msgstr "翻訳ステータス"
