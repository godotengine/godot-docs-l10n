# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Godotの通知"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Godotのすべてのオブジェクトは :ref:`_notification "
"<class_Object_method__notification>` メソッドを実装します。その目的は、オブ"
"ジェクトがそれに関連する可能性のあるさまざまなエンジンレベルのコールバックに"
"応答できるようにすることです。たとえば、エンジンが :ref:`CanvasItem "
"<class_CanvasItem>` に「描画(draw)」するように指示すると、\\ ``_ "
"notification(NOTIFICATION_DRAW)`` が呼び出されます。"

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"drawなどのこれらの通知の一部は、スクリプトでオーバーライドするのに役立ちま"
"す。Godotは、Godotがそれらの多くを専用関数で公開するほどです:"

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "\\ ``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "\\ ``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "\\ ``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "\\ ``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "\\ ``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "\\ ``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""
"ユーザーが\\ *気づかない*\\ かもしれないのは、ノードではないタイプの通知が存"
"在するということです:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: オブジェクトの初期化中"
"にトリガーされるコールバック。スクリプトからアクセスできません。"

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: エンジンがオブジェクトを削"
"除、つまり「デストラクタ」の前にトリガーするコールバック。"

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: ゲームコンテンツを表"
"示するオペレーティングシステムでマウスがウィンドウに入ったときにトリガーする"
"コールバック。"

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"また、ノードに存在するコールバックの多くには専用のメソッドはありませんが、そ"
"れでも非常に便利です。"

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: 子ノードを別のノードに追加する"
"たびにトリガーするコールバック。"

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: 別のノードから子ノードを削除"
"するたびにトリガーするコールバック。"

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: ポップアップ ノードが "
"``popup*`` メソッドを完了した後にトリガーするコールバック。出現する\\ *前*\\ "
"にトリガーされる `` about_to_show``シグナルとの違いに注意してください。"

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""
"これらすべてのカスタム通知には、ユニバーサル ``_notification``メソッドからア"
"クセスできます。"

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"\"virtual\" というラベルの付いたドキュメント内のメソッドも、スクリプトによっ"
"てオーバーライドされることを目的としています。"

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"典型的な例は、Objectの :ref:`_init <class_Object_method__init>` メソッドで"
"す。\\ ``NOTIFICATION_*`` に相当するものはありませんが、エンジンはメソッドを"
"呼び出します。ほとんどの言語(C#を除く)は、コンストラクターとして使用します。"

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"それでは、これらの通知や仮想機能のそれぞれをどの状況で使用すべきでしょうか？"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process 対 _physics_process 対 \\*_input"

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"フレームレートに依存するフレーム間のデルタタイムが必要な場合は ``_process`` "
"を使用します。オブジェクトデータを更新するコードをできるだけ頻繁に更新する必"
"要がある場合、これが適切な場所です。繰り返しのロジックチェックとデータキャッ"
"シングがここで実行されることがよくありますが、更新するために評価が必要になる"
"頻度になります。すべてのフレームを実行する必要がない場合は、Timer-yield-"
"timeoutループを実装することも別のオプションです。"

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"フレームレートに依存しないフレーム間のデルタタイムが必要な場合は "
"``_physics_process`` を使用します。時間の進み具合に関係なく、コードの経時的な"
"一貫した更新が必要な場合は、これが適切な場所です。繰り返しのキネマティックお"
"よびオブジェクトの幾何学変換操作をここで実行する必要があります。"

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"最高のパフォーマンスを得るには、これらのコールバック中に入力チェックを行わな"
"いようにする必要があります。\\ ``_process`` と ``_physics_process`` はあらゆ"
"る機会にトリガーします(デフォルトでは「休息」しません)。対照的に、\\ "
"``*_input`` コールバックは、エンジンが実際に入力を検出したフレームでのみトリ"
"ガーされます。"

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"同じように、入力コールバック内で入力アクションをチェックできます。デルタ時間"
"を使用する場合、必要に応じて関連するデルタ時間メソッドからそれを取得できま"
"す。"

msgid "_init vs. initialization vs. export"
msgstr "_init 対 初期化 対 エクスポート"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"スクリプトがシーンなしで独自のノードサブツリーを初期化する場合、そのコードは"
"ここで実行する必要があります。他のプロパティまたはSceneTreeに依存しない初期化"
"もここで実行する必要があります。これは ``_ready`` または ``_enter_tree`` の前"
"にトリガーされますが、スクリプトがそのプロパティを作成して初期化した後にトリ"
"ガーされます。"

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""
"スクリプトには、インスタンス化の最中に発生する3つのプロパティ割り当てがありま"
"す。"

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""
"シーンをインスタンス化する場合、プロパティ値は次の順序に従って設定されます。"

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**初期値の割り当て:** インスタンス化は、初期化値または初期化用の引数値のいず"
"れかを割り当てます。初期化の引数値は初期化値よりも優先されます。"

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**エクスポートされた値の割り当て:** スクリプトではなくシーンからインスタンス"
"化する場合、Godotはエクスポートされた値を割り当てて、スクリプトで定義された初"
"期値を置き換えます。"

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"その結果、スクリプトをシーンに対してインスタンス化すると、初期化\\ *と*\\ エ"
"ンジンがセッターを呼び出す回数の両方に影響します。"

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready 対 _enter_tree 対 NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"最初に実行されたシーンにインスタンス化するシーンを接続すると、Godot はツリー"
"の下にノードをインスタンス化し(``_init`` 呼び出しを行います)、ルートから下に"
"向かってツリーを構築します。これにより、\\ ``_enter_tree`` 呼び出しがツリーの"
"下へカスケードされます。ツリーが完成すると、リーフノードは ``_ready`` を呼び"
"出します。すべての子ノードの呼び出しが終了すると、ノードはこのメソッドを呼び"
"出します。これにより、逆方向のカスケードがツリーのルートに戻ります。"

#, fuzzy
msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"スクリプトまたはスタンドアロン シーンをインスタンス化する場合、ノードは作成時"
"にSceneTreeに追加されないため、\\ ``_enter_tree`` コールバックはトリガーされ"
"ません。代わりに、\\ ``_init`` とその後の ``_ready`` 呼び出しのみが発生しま"
"す。"

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"メイン/アクティブシーンの一部として発生するかどうかに関係なく、ノードが別の"
"ノードの親として発生する動作をトリガーする必要があるばあい、\\ :ref:"
"`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` 通知を使用できます。た"
"とえば、ノードのメソッドを、失敗せずに親ノードのカスタムシグナルに接続するス"
"ニペットを次に示します。実行時に作成されるデータ中心のノードで役立ちます。"

msgid "Translation status"
msgstr "翻訳ステータス"
