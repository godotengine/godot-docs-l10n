# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When to use scenes versus scripts"
msgstr "シーンとスクリプトを使用する場合"

msgid ""
"We've already covered how scenes and scripts are different. Scripts define "
"an engine class extension with imperative code, scenes with declarative code."
msgstr ""
"シーンとスクリプトの違いについてはすでに説明しました。スクリプトは、命令型"
"コードでエンジンクラスの拡張を定義し、宣言型コードでシーンを定義します。"

msgid ""
"Each system's capabilities are different as a result. Scenes can define how "
"an extended class initializes, but not what its behavior actually is. Scenes "
"are often used in conjunction with a script so that the scene acts as an "
"extension of the scripts declarative code."
msgstr ""
"結果として、それぞれのシステムの機能は異なります。シーンは、拡張クラスの初期"
"化方法を定義できますが、実際の動作は定義できません。シーンは多くの場合、スク"
"リプトと組み合わせて使用されるため、シーンはスクリプトの宣言型コードの拡張機"
"能として機能します。"

msgid "Anonymous types"
msgstr "匿名型"

msgid ""
"It *is* possible to completely define a scenes' contents using a script "
"alone. This is, in essence, what the Godot Editor does, only in the C++ "
"constructor of its objects."
msgstr ""
"スクリプト\\ *のみ*\\ を使用してシーンのコンテンツを完全に定義することもでき"
"ます。これは本質的にはGodotエディタで行うべきことですが、スクリプトで行う場合"
"はそのオブジェクトのC++コンストラクターで行います。"

msgid ""
"But, choosing which one to use can be a dilemma. Creating script instances "
"is identical to creating in-engine classes whereas handling scenes requires "
"a change in API:"
msgstr ""
"しかし、どちらを使用するかを選択することはジレンマになる可能性があります。ス"
"クリプトインスタンスの作成はエンジン内クラスの作成と同じですが、シーンの処理"
"にはAPIを変更する必要があります:"

msgid ""
"Also, scripts will operate a little slower than scenes due to the speed "
"differences between engine and script code. The larger and more complex the "
"node, the more reason there is to build it as a scene."
msgstr ""
"また、エンジンとスクリプトコードの処理速度が異なるため、スクリプトの動作は"
"シーンよりも少し遅くなります。ノードが大きく複雑になるほど、ノードをシーンと"
"して構築する理由が増えます。"

msgid "Named types"
msgstr "名前付き型"

msgid ""
"In some cases, a user can register a script as a new type within the editor "
"itself. This displays it as a new type in the node or resource creation "
"dialog with an optional icon. In these cases, the user's ability to use the "
"script is much more streamlined. Rather than having to..."
msgstr ""
"場合によっては、ユーザーはエディタ自体の中でスクリプトを新しい型として登録で"
"きます。これにより、ノードまたはリソース作成ダイアログに新しい型として表示さ"
"れ、オプションのアイコンが表示されます。このような場合、ユーザーがスクリプト"
"を使用する機能は大幅に合理化されます。むしろ..."

msgid "Know the base type of the script they would like to use."
msgstr "使用するスクリプトの基本型を知っている。"

msgid "Create an instance of that base type."
msgstr "その基本型のインスタンスを作成します。"

msgid "Add the script to the node."
msgstr "ノードにスクリプトを追加します。"

msgid "(Drag-n-drop method)"
msgstr "(ドラッグアンドドロップ方式)"

msgid "Find the script in the FileSystem dock."
msgstr "ファイル システムドックでスクリプトを見つけます。"

msgid "Drag and drop the script onto the node in the Scene dock."
msgstr "スクリプトをシーンドックのノードにドラッグ アンド ドロップします。"

msgid "(Property method)"
msgstr "(プロパティメソッド)"

msgid ""
"Scroll down to the bottom of the Inspector to find the ``script`` property "
"and select it."
msgstr ""
"インスペクタの一番下までスクロールして ``Script`` プロパティを見つけて選択し"
"ます。"

msgid "Select \"Load\" from the dropdown."
msgstr "ドロップダウンから「読込み」を選択します。"

msgid "Select the script from the file dialog."
msgstr "ファイル ダイアログからスクリプトを選択します。"

msgid ""
"With a registered script, the scripted type instead becomes a creation "
"option like the other nodes and resources in the system. One need not do any "
"of the above work. The creation dialog even has a search bar to look up the "
"type by name."
msgstr ""
"この手順の代わりに登録済みスクリプトを使用すると、スクリプト化された型をシス"
"テム内の他のノードやリソースと同様な、作成オプションの一つにすることが出来ま"
"す。なので上記の作業を行う必要はありません。作成ダイアログには、(登録済みの)"
"型を名前で検索するための検索バーがあります。"

msgid "There are two systems for registering types..."
msgstr "型を登録するための 2つのシステムがあります..."

msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ":ref:`カスタム型<doc_making_plugins>`"

msgid "Editor-only. Typenames are not accessible at runtime."
msgstr "エディタのみ。型名は実行時にはアクセスできません。"

msgid "Does not support inherited custom types."
msgstr "継承されたカスタム型はサポートされていません。"

msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr ""
"初期化ツール。スクリプトを使用してノードを作成します。これ以外の方法はありま"
"せん。"

msgid ""
"Editor has no type-awareness of the script or its relationship to other "
"engine types or scripts."
msgstr ""
"エディタは、スクリプトの型や、他のエンジン内の型やスクリプトとの関係を認識し"
"ません。"

msgid "Allows users to define an icon."
msgstr "ユーザーがアイコンを定義できます。"

msgid ""
"Works for all scripting languages because it deals with Script resources in "
"abstract."
msgstr ""
"スクリプトリソースを抽象化して扱うので、すべてのスクリプト言語で動作します。"

msgid ""
"Set up using :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."
msgstr ""
":ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>` を使用してセットアップします。"

#, fuzzy
msgid ":ref:`Script Classes <doc_gdscript_basics_class_name>`"
msgstr ":ref:`スクリプトクラス<doc_scripting_continued_class_name>`"

msgid "Editor and runtime accessible."
msgstr "エディタとランタイムにアクセスできます。"

msgid "Displays inheritance relationships in full."
msgstr "継承関係を完全に表示します。"

msgid ""
"Creates the node with the script, but can also change types or extend the "
"type from the editor."
msgstr ""
"スクリプトを使用してノードを作成しますが、エディタから型を変更したり、型を拡"
"張したりすることもできます。"

msgid ""
"Editor is aware of inheritance relationships between scripts, script "
"classes, and engine C++ classes."
msgstr ""
"エディタは、スクリプト、スクリプトクラス、およびエンジンのC++クラス間の継承関"
"係を認識します。"

msgid ""
"Engine developers must add support for languages manually (both name "
"exposure and runtime accessibility)."
msgstr ""
"エンジン開発者は、言語のサポートを手動で追加する必要があります(名前の公開とラ"
"ンタイムのアクセシビリティの両方)。"

msgid "Godot 3.1+ only."
msgstr "Godot3.1以降のみです。"

msgid ""
"The Editor scans project folders and registers any exposed names for all "
"scripting languages. Each scripting language must implement its own support "
"for exposing this information."
msgstr ""
"エディタは、プロジェクトフォルダをスキャンし、すべてのスクリプト言語の公開名"
"を登録します。各スクリプト言語は、この情報を公開するための独自のサポートを実"
"装する必要があります。"

msgid ""
"Both methodologies add names to the creation dialog, but script classes, in "
"particular, also allow for users to access the typename without loading the "
"script resource. Creating instances and accessing constants or static "
"methods is viable from anywhere."
msgstr ""
"どちらの方法でも作成ダイアログに名前が追加されますが、特にスクリプト クラスを"
"使用すると、ユーザーはスクリプト リソースを読み込まずに型名にアクセスできま"
"す。インスタンスの作成と定数または静的メソッドへのアクセスは、どこからでも実"
"行可能です。"

msgid ""
"With features like these, one may wish their type to be a script without a "
"scene due to the ease of use it grants users. Those developing plugins or "
"creating in-house tools for designers to use will find an easier time of "
"things this way."
msgstr ""
"このような機能を使用すると、それによってユーザーに付与される使いやすさから、"
"その型をシーンのないスクリプトにしたい場合があります。このようにプラグインを"
"開発したり、デザイナーが使用する社内ツールを作成したりすることで、物事をより"
"簡単な手順で進められるようになります。"

msgid ""
"On the downside, it also means having to use largely imperative programming."
msgstr ""
"欠点として、大部分が命令型プログラミングを使用する必要があることも意味しま"
"す。"

#, fuzzy
msgid "Performance of Script vs PackedScene"
msgstr "スクリプトのパフォーマンスとPackedScene"

msgid ""
"One last aspect to consider when choosing scenes and scripts is execution "
"speed."
msgstr ""

#, fuzzy
msgid ""
"As the size of objects increases, the scripts' necessary size to create and "
"initialize them grows much larger. Creating node hierarchies demonstrates "
"this. Each Node's logic could be several hundred lines of code in length."
msgstr ""
"オブジェクトのサイズが大きくなるにつれて、作成に必要なスクリプトのサイズがど"
"んどん大きくなります。ノード階層を作成すると、これが実証されます。個々のノー"
"ドのロジックは、長さが数百行のコードになる可能性があります。"

#, fuzzy
msgid ""
"The code example below creates a new ``Node``, changes its name, assigns a "
"script to it, sets its future parent as its owner so it gets saved to disk "
"along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""
"単一の ``Node`` を子として作成する簡単な例を見てみましょう。以下のコードは、"
"新しい ``Node`` を作成し、その名前を変更し、スクリプトをそれに割り当て、将来"
"の親(``Main``)を所有者として設定し、それとともにディスクに保存され、最後に "
"``Main``ノードの子として追加します:"

#, fuzzy
msgid ""
"Script code like this is much slower than engine-side C++ code. Each "
"instruction makes a call to the scripting API which leads to many "
"\"lookups\" on the back-end to find the logic to execute."
msgstr ""
"このようなスクリプト コードは、エンジン側の C++コードよりもはるかに低速です。"
"各変更は、実行するロジックを見つけるためにバックエンドで多くの「ルックアッ"
"プ」につながるスクリプトAPIを個別に呼び出します。"

#, fuzzy
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, defines "
"resources that use serialized data to create objects. The engine can process "
"scenes in batches on the back-end and provide much better performance than "
"scripts."
msgstr ""
"シーンは、このパフォーマンスの問題を回避するのに役立ちます。\\ :ref:"
"`PackedScene <class_PackedScene>` は、シーンが継承する基本型であり、シリアル"
"化されたデータを使用してオブジェクトを作成するリソースです。エンジンは、バッ"
"クエンドでシーンをバッチ処理し、スクリプトよりもはるかに優れたパフォーマンス"
"を提供できます。"

msgid "Conclusion"
msgstr "結論"

msgid "In the end, the best approach is to consider the following:"
msgstr "最後に、最善のアプローチは次のことを考慮することです。"

msgid ""
"If one wishes to create a basic tool that is going to be re-used in several "
"different projects and which people of all skill levels will likely use "
"(including those who don't label themselves as \"programmers\"), then "
"chances are that it should probably be a script, likely one with a custom "
"name/icon."
msgstr ""
"いくつかの異なるプロジェクトで再利用され、すべてのスキルレベルの人々(自分自身"
"を「プログラマー」とラベル付けしない人を含む)が使用する可能性のある基本的な"
"ツールを作成したい場合、それは良い機会であり、おそらくスクリプトで作成する必"
"要があります。また、カスタム名/アイコンが付いたものでなければなりません。"

msgid ""
"If one wishes to create a concept that is particular to their game, then it "
"should always be a scene. Scenes are easier to track/edit and provide more "
"security than scripts."
msgstr ""
"ゲームに特化したコンセプト(モデル)を作りたい場合は、常にシーンである必要があ"
"ります。シーンは追跡/編集が容易で、スクリプトよりもセキュリティが強化されま"
"す。"

msgid ""
"If one would like to give a name to a scene, then they can still sort of do "
"this in 3.1 by declaring a script class and giving it a scene as a constant. "
"The script becomes, in effect, a namespace:"
msgstr ""
"シーンに名前を付けたい場合は、スクリプトクラスを宣言し、シーンに定数として与"
"えることで、3.1でもこれを行うことができます。スクリプトは、実際には名前空間に"
"なります:"

msgid "Translation status"
msgstr "翻訳ステータス"
