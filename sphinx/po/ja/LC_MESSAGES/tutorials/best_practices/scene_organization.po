# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene organization"
msgstr "シーン構成"

msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"この記事では、シーンコンテンツの効果的な編成に関連するトピックについて説明し"
"ます。どのノードを使用する必要がありますか？どこに配置すればよいですか？彼ら"
"はどのように相互作用する必要がありますか？"

msgid "How to build relationships effectively"
msgstr "個々の結びつきを効果的に構築する方法"

msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Godotユーザーが独自のシーンを作成し始めると、次の問題に遭遇することがよくあり"
"ます。"

#, fuzzy
msgid ""
"They create their first scene and fill it with content only to eventually "
"end up saving branches of their scene into separate scenes as the nagging "
"feeling that they should split things up starts to accumulate. However, they "
"then notice that the hard references they were able to rely on before are no "
"longer possible. Re-using the scene in multiple places creates issues "
"because the node paths do not find their targets and signal connections "
"established in the editor break."
msgstr ""
"彼らは最初のシーンを作成し、コンテンツで埋めてから、再利用可能なピースに分割"
"する必要があるという忍び寄る感覚に悩まされます。そこで、彼らは自分のシーンの"
"ブランチを自分のシーンに保存します。しかし、以前は頼りにしていたハード参照が"
"不可能になっていることに気付きます。ノードパスがターゲットを見つけられないた"
"め、シーンを複数の場所で再利用すると問題が発生します。エディタで確立されたシ"
"グナル接続が壊れます。"

msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"これらの問題を修正するには、環境に関する詳細を要求せずにサブシーンをインスタ"
"ンス化する必要があります。サブシーンがどのように使われるかを選り好みせずに自"
"分が作成されることを信頼できる必要があります。"

#, fuzzy
msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability."
msgstr ""
"OOP(オブジェクト指向プログラミング)で考慮すべき最大のことの1つは、コードベー"
"スの他の部分との `疎結合<https://en.wikipedia.org/wiki/Loose_couple> ` を使用"
"して、焦点を絞った単一目的のクラスを維持することです。これにより、オブジェク"
"トのサイズが(保守性のために)小さく保たれ、再利用性が向上するので、完了したロ"
"ジックを書き直す必要がなくなります。"

#, fuzzy
msgid ""
"These OOP best practices have *several* implications for best practices in "
"scene structure and script usage."
msgstr ""
"これらのOOPのベストプラクティスには、シーン構造とスクリプトの使用におけるベス"
"トプラクティスに *いくつかの* 影響があります。"

msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**可能な限り、依存関係を持たないようにシーンを設計する必要があります。** つま"
"り、必要なものすべてを内部に保持するシーンを作成する必要があります。"

msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"シーンが外部コンテキストとやり取りする必要がある場合、経験豊富な開発者は、 `"
"依存性の注入 <https://en.wikipedia.org/wiki/Dependency_injection>` の使用をお"
"勧めします。この手法では、高レベルAPIを使用して低レベルAPIの依存関係を提供し"
"ます。なぜこれを行うのですか？外部環境に依存するクラスは、誤ってバグや予期し"
"ない動作を引き起こす可能性があるためです。"

msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"これを行うには、データを公開し、親コンテキストを使用して初期化する必要があり"
"ます:"

#, fuzzy
msgid ""
"Connect to a signal. Extremely safe, but should be used only to \"respond\" "
"to behavior, not start it. Note that signal names are usually past-tense "
"verbs like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"シグナルに接続します。非常に安全ですが、動作に「応答」するためだけに使用し、"
"これを起動しないでください。シグナル名は通"
"常、\"entered\"、\"skill_activated\"、または \"item_collected\" のような過去"
"形の動詞であることに注意してください。"

msgid "Call a method. Used to start behavior."
msgstr "メソッドを呼び出します。動作を開始するために使用されます。"

msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""
":ref:`FuncRef <class_FuncRef>` プロパティを初期化します。メソッドの所有権は不"
"要なので、メソッドよりも安全です。動作を開始するために使用されます。"

msgid "Initialize a Node or other Object reference."
msgstr "ノードまたはその他のオブジェクト参照を初期化します。"

msgid "Initialize a NodePath."
msgstr "NodePathを初期化します。"

#, fuzzy
msgid ""
"These options hide the points of access from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""
"これらのオプションは、子ノードからのアクセスのソースを隠します。これにより、"
"子はその環境に **疎結合** されます。 APIに追加の変更を加えることなく、別のコ"
"ンテキストで再利用できます。"

msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"上記の例は親子関係を示していますが、同じ原則がすべてのオブジェクト間の関係に"
"適用されます。兄弟であるノードは、(親やその親などの)祖先が通信と参照を仲介す"
"る間のみ、相手の階層を認識する必要があります。"

msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"同じ原則は、他のオブジェクトへの依存関係を維持する非Nodeオブジェクトにも適用"
"されます。オブジェクトを実際に所有するオブジェクトがオブジェクト間の関係を管"
"理する必要があります。"

msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"データを組織内(シーンの内部)に保持することをお勧めします。疎結合のコンテキス"
"トであっても、外部のコンテキストに依存関係を置くことは、ノードは環境内の何か"
"が実在することを期待することを意味します。プロジェクトの設計哲学は、これが起"
"こらないようにする必要があります。そうでない場合、コード固有の責任により、開"
"発者はドキュメントを使用して、オブジェクトの関係を微視的に追跡する必要があり"
"ます。これは、開発地獄とも呼ばれます。外部ドキュメントに依存するコードを記述"
"すると、安全のために規定でエラーが発生しやすくなります。"

msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""
"そのようなドキュメントの作成と保守を回避するために、依存ノード (上記の "
"\"child\") を :ref:`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>` を実装するツールスクリプトに"
"変換します。空でない文字列を返すと、シーンドックは、ノードのツールチップとし"
"て文字列を持つ警告アイコンを生成します。これは、子 :ref:`CollisionShape2D "
"<class_CollisionShape2D>` ノードが定義されていない場合に、\\ :ref:`Area2D "
"<class_Area2D>` ノードなどのノードに対して表示されるアイコンと同じです。次"
"に、エディタはスクリプト コードを使用してシーンを自己ドキュメント化します。ド"
"キュメントによるコンテンツの複製は必要ありません。"

msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"このようなGUIを使用すると、プロジェクトユーザーにノードに関する重要な情報をよ"
"り適切に通知できます。外部依存関係はありますか？これらの依存関係は満たされて"
"いますか？などです。他のプログラマー、特にデザイナーとライターに対し、それを"
"構成する作業のために必要な指示を、メッセージを通して明確に伝えます。"

#, fuzzy
msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling) is "
"the next best thing. Inevitably, changes may need to be made to a class and "
"if these changes cause it to interact with other scenes in unforeseen ways, "
"then things will start to break down. The whole point of all this "
"indirection is to avoid ending up in a situation where changing one class "
"results in adversely effecting other classes."
msgstr ""
"では、なぜこの複雑な切り替えがすべて機能するのでしょうか？シーンは単独で操作"
"するときに最適に動作するためです。単独で作業できない場合は、他のユーザーと匿"
"名で作業します(最小限のハード依存関係、つまり疎結合)。クラスに加えられた避け"
"られない変更により、クラスが予期しない方法で他のシーンと対話するようになった"
"場合、事態は崩壊します。 1つのクラスを変更すると、他のクラスに悪影響を与える"
"可能性があります。"

#, fuzzy
msgid ""
"Scripts and scenes, as extensions of engine classes, should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"スクリプトとシーンはエンジンのクラスを拡張したものなので、\\ *すべて*\\ のOOP"
"原則に従うべきです。例として…"

msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr "`SOLID <https://ja.wikipedia.org/wiki/SOLID>`_"

msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://ja.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr ""
"`KISS <https://ja.wikipedia.org/wiki/KISS%E3%81%AE%E5%8E%9F%E5%89%87>`_"

msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://ja.wikipedia.org/wiki/YAGNI>`_"

msgid "Choosing a node tree structure"
msgstr "ノードツリー構造の選択"

#, fuzzy
msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in countless ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"そのため、開発者はゲームの作業を開始しますが、膨大な可能性を前に立ち止まって"
"しまいます。 彼らは何をしたいのか、どんなシステムを持ちたいのか知っているかも"
"しれませんが、それらすべてを *どこに* 置けば良いのか？と。 まあ、彼らのゲーム"
"を作る方法は常に彼ら次第です。 無数の方法でノードツリーを構築できます。 しか"
"し、自信がない人のために、この役立つガイドは、まず最初に適切な構造のサンプル"
"を提供できます。"

#, fuzzy
msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view of "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"ゲームには常に一種の「エントリポイント」が必要です。開発者はどこで物事が始ま"
"るのかを確実に追跡できるため、他の場所でロジックが続く事も追跡できます。この"
"場所は、プログラム内の他のすべてのデータとロジックの鳥瞰図としても機能しま"
"す。従来のアプリケーションでは、これは「main」関数になります。この場合、メイ"
"ンノードになります。"

msgid "Node \"Main\" (main.gd)"
msgstr "\\ Node \"Main\" (main.gd)"

msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr ""
"``main.gd`` スクリプトは、ゲームのプライマリコントローラーとして機能します。"

msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"次に、実際のゲーム内「ワールド(World)」(2Dまたは3Dのもの)があります。これは、"
"Mainの子にすることができます。さらに、プロジェクトに必要なさまざまなメニュー"
"とウィジェットを管理するゲーム用のプライマリGUIが必要になります。"

msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr "\\ Node2D/Spatial \"World\" (game_world.gd)"

msgid "Control \"GUI\" (gui.gd)"
msgstr "\\ Control \"GUI\" (gui.gd)"

msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"レベルを変更する場合、\"World\"ノードの子を入れ替えることができます。\\ :ref:"
"`シーンを手動で変更<doc_change_scenes_manually>` を使用すると、ユーザーはゲー"
"ムのワールドがどのように遷移するかを完全に制御できます。"

msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"次のステップは、プロジェクトに必要なゲームプレイシステムを検討することです。"
"既存のシステムがある場合..."

msgid "tracks all of its data internally"
msgstr "すべてのデータを内部的に追跡する"

msgid "should be globally accessible"
msgstr "グローバルにアクセス可能でなければなりません"

msgid "should exist in isolation"
msgstr "独立して存在する必要があります"

msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"...次に、\\ :ref:`自動ロード 'シングルトン' ノード "
"<doc_singletons_autoload>` を作成する必要があります。"

msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""
"小規模なゲームの場合、コントロールの少ない簡単な代替手段は、単に :ref:"
"`SceneTree.change_scene()<class_SceneTree_method_change_scene>` メソッドを呼"
"び出してメインシーンのコンテンツをスワップする「ゲーム(Game)」シングルトンに"
"することです。この構造により、「ワールド(World)」がメインゲームノードとして保"
"持されます。"

#, fuzzy
msgid ""
"Any GUI would need to also be a singleton; be a transitory part of the "
"\"World\"; or be manually added as a direct child of the root. Otherwise, "
"the GUI nodes would also delete themselves during scene transitions."
msgstr ""
"また、全てのGUIはシングルトンであるか、「ワールド(World)」の一時的なパーツで"
"あるか、またはルートの直接の子として手動で追加する必要があります。そうしない"
"と、シーンの移行中にGUIノードも削除されます。"

#, fuzzy
msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`Autoloads versus regular nodes "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"他のシステムのデータを変更するシステムがある場合、それらをオートロードではな"
"く独自のスクリプトまたはシーンとして定義する必要があります。理由の詳細につい"
"ては、\\ :ref:`'自動ロードと内部ノード' "
"<doc_autoloads_versus_internal_nodes>` のドキュメントを参照してください。"

msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"ゲーム内の各サブシステムには、シーンツリー内に独自のセクションが必要です。"
"ノードが事実上親の一要素である場合にのみ、親子関係を使用する必要があります。"
"親を削除したときに、その子として一緒に削除されてもかまいませんか？そうでない"
"場合は、兄弟または他の関係として、階層内に独自の場所が必要です。"

msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"場合によっては、これらの分離されたノードが *お互い* を相対的に配置する必要が"
"あります。このために:ref:`RemoteTransform <class_RemoteTransform>` /:ref:"
"`RemoteTransform2D <class_RemoteTransform2D>` ノードを使用できます。ターゲッ"
"トノードは、Remote\\*ノードから選択した幾何学変換の要素を条件付きで継承できま"
"す。\\ ``target`` :ref:`NodePath <class_NodePath>` を割り当てるには、次のいず"
"れかを使用します:"

msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr "割り当てを仲介する信頼できるサードパーティ(おそらく親ノード)。"

msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"目的のノードへの参照を簡単にプルするためのグループ(ターゲットの1つだけが存在"
"すると想定)。"

#, fuzzy
msgid ""
"When should one do this? Well, this is subjective. The dilemma arises when "
"one must micro-manage when a node must move around the SceneTree to preserve "
"itself. For example..."
msgstr ""
"いつこれを行うべきですか？まあ、決定するのは彼ら次第です。ジレンマは、ノード"
"がシーンツリー内を移動して自身を保持する必要がある場合に、細部まで管理する必"
"要があるときに発生します。例えば..."

msgid "Add a \"player\" node to a \"room\"."
msgstr "「プレイヤー」ノードを「ルーム」に追加する。"

msgid "Need to change rooms, so one must delete the current room."
msgstr "部屋を変更する必要があるため、現在の部屋を削除する必要があり。"

msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr ""
"ルームを削除する前に、プレイヤーを保存および/または移動する必要があります。"

msgid "Is memory a concern?"
msgstr "記憶は懸念事項ですか?"

msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"そうでない場合は、2つの部屋を作成し、プレイヤーを移動して古い部屋を削除するだ"
"けです。特に心配はいりません。"

msgid "If so, one will need to..."
msgstr "もしそうなら、1つは..."

msgid "Move the player somewhere else in the tree."
msgstr "プレイヤーをツリー内の別の場所に移動します。"

msgid "Delete the room."
msgstr "部屋を削除します。"

msgid "Instantiate and add the new room."
msgstr "新しい部屋をインスタンス化して追加します。"

msgid "Re-add the player."
msgstr "そこにプレイヤーを再度追加します。"

#, fuzzy
msgid ""
"The issue is that the player here is a \"special case\"; one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"問題は、ここでのプレイヤーは「特別なケース」であり、開発者がプロジェクトのた"
"めにこの方法でプレイヤーを処理する必要があることを *知っている* 必要がありま"
"す。そのため、この情報をチームとして確実に共有する唯一の方法は、\\ *文書化* "
"することです。ただし、実装の詳細をドキュメントに保存することは危険です。これ"
"はメンテナンスの負担になり、コードの可読性を悪化させ、プロジェクトの知的コン"
"テンツを不必要に肥大化します。"

#, fuzzy
msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This results in:"
msgstr ""
"より大きなアセットを使用したより複雑なゲームでは、シーンツリーのどこかでプレ"
"イヤーを完全に保持する方が良いでしょう。これには..."

msgid "More consistency."
msgstr "より一貫性が高くなります。"

msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr "どこかに文書化して保守する必要がある「特別なケース」はありません。"

msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr ""
"これらの詳細を考慮する必要がないため、エラーが発生する可能性はありません。"

msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"これに対し、親の幾何学変換を継承しない子ノードが必要な場合、次のオプションが"
"あります:"

msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"**declarative** ソリューション: それらの間に :ref:`Node <class_Node>` を配置"
"します。幾何学変換を行わないノードとして、ノードはそのような情報を子に渡しま"
"せん。"

msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""
"**imperative** ソリューション: :ref:`CanvasItem "
"<class_CanvasItem_method_set_as_toplevel>` ノードまたは :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` ノードに ``set_as_toplevel`` セッター"
"を使用します。これにより、ノードは継承された幾何学変換を無視します。"

msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"ネットワーク化されたゲームを構築する場合、どのノードとゲームプレイシステムが"
"すべてのプレイヤーに関連するのか、権限のあるサーバーに関連するのかを念頭に置"
"いてください。たとえば、ユーザーがすべてのプレイヤーの「PlayerController」ロ"
"ジックのコピーを持っている必要はありません。代わりに、彼らは自分自身だけが必"
"要です。そのため、これらを「ワールド」とは別のブランチに保持することで、ゲー"
"ム接続などの管理を簡素化できます。"

#, fuzzy
msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Are the nodes dependent on their parent's "
"existence? If not, then they can thrive all by themselves somewhere else. If "
"they are dependent, then it stands to reason that they should be children of "
"that parent (and likely part of that parent's scene if they aren't already)."
msgstr ""
"シーン編成の鍵は、空間的な用語ではなく関係性の用語でシーンツリーを考えること"
"です。ノードは親の存在に依存する必要がありますか？その必要がないのなら、彼ら"
"はどこか他の場所で親に依存せずに一人で成長することができます。もし依存してい"
"るのなら、それは彼らがその親の子であるべきという理にかなっています(そして、ま"
"だそうでない場合も、その親のシーンの一部である可能性があります)。"

msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"これは、ノード自体が構成要素であることを意味しますか？ 全く違います。Godotの"
"ノードツリーは、構図ではなく集合の関係性を形成します。ただし、ノードを自由に"
"移動できる柔軟性はありますが、デフォルトではそのような移動が不要な場合に最適"
"です。"

msgid "Translation status"
msgstr "翻訳ステータス"
