# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Localization using gettext"
msgstr "gettext を使ったローカライズ"

#, fuzzy
msgid ""
"In addition to :ref:`doc_importing_translations` in CSV format, Godot also "
"supports loading translation files written in the GNU gettext format (text-"
"based ``.po`` and compiled ``.mo`` since Godot 3.5)."
msgstr ""
"CSV形式の :ref:`doc_importing_translations` に加えて、GodotはGNU gettext(``."
"po``)形式で記述された翻訳ファイルの読み込みもサポートしています。"

msgid ""
"For an introduction to gettext, check out `A Quick Gettext Tutorial <https://"
"www.labri.fr/perso/fleury/posts/programming/a-quick-gettext-tutorial."
"html>`_. It's written with C projects in mind, but much of the advice also "
"applies to Godot (with the exception of ``xgettext``)."
msgstr ""
"gettextの概要については、\\ `A Quick Gettext Tutorial <https://www.labri.fr/"
"perso/fleury/posts/programming/a-quick-gettext-tutorial.html>`_ をご覧くださ"
"い。 Cプロジェクトを念頭に置いて書かれていますが、アドバイスの多くはGodotにも"
"当てはまります(``xgettext``を除く)。"

msgid "Advantages"
msgstr "利点"

msgid ""
"gettext is a standard format, which can be edited using any text editor or "
"GUI editors such as `Poedit <https://poedit.net/>`_."
msgstr ""
"gettextは標準形式であり、任意のテキストエディタまたは `Poedit <https://"
"poedit.net/>`_ などのGUIエディタを使用して編集できます。"

msgid ""
"gettext is supported by translation platforms such as `Transifex <https://"
"www.transifex.com/>`_ and `Weblate <https://weblate.org/>`_, which makes it "
"easier for people to collaborate to localization."
msgstr ""
"gettextは、\\ `Transifex <https://www.transifex.com/>`_ や `Weblate <https://"
"weblate.org/>`_ などの翻訳プラットフォームでサポートされており、人々がローカ"
"ライズに協力しやすくなります。"

msgid ""
"Compared to CSV, gettext works better with version control systems like Git, "
"as each locale has its own messages file."
msgstr ""
"CSVに比べて、gettextは各ロケール用に個別のメッセージファイルがあるため、Gitな"
"どのバージョン管理システムでより適切に動作します。"

msgid ""
"Multiline strings are more convenient to edit in gettext files compared to "
"CSV files."
msgstr ""
"複数行の文字列は、CSVファイルと比べるとgettextファイルで編集する方が便利で"
"す。"

msgid "Disadvantages"
msgstr "欠点"

msgid ""
"gettext is a more complex format than CSV and can be harder to grasp for "
"people new to software localization."
msgstr ""
"gettextはCSVよりも複雑な形式であり、ソフトウェアのローカライズを初めて行う人"
"にとっては把握が難しい場合があります。"

#, fuzzy
msgid ""
"People who maintain localization files will have to install gettext tools on "
"their system. However, as Godot supports using text-based message files (``."
"po``), translators can test their work without having to install gettext "
"tools."
msgstr ""
"ローカリゼーションファイルを管理する人は、システムにgettextツールをインストー"
"ルする必要があります。ただし、Godotはコンパイルされたメッセージオブジェクト"
"ファイル(``.mo``)を使用しないため、翻訳者はgettextツールをインストールしなく"
"ても作業をテストできます。"

msgid "Caveats"
msgstr "注意事項"

msgid ""
"As Godot uses its own PO file parser behind the scenes (which is more "
"limited than the reference GNU gettext implementation), some features such "
"as pluralization aren't supported."
msgstr ""
"Godotは独自のPOファイルパーサーをバックグラウンドで使用するため(GNU gettextの"
"リファレンス実装よりも制限されています)、複数形化などの一部の機能はサポートさ"
"れていません。"

msgid "Installing gettext tools"
msgstr "gettextツールのインストール"

msgid ""
"The command line gettext tools are required to perform maintenance "
"operations, such as updating message files. Therefore, it's strongly "
"recommended to install them."
msgstr ""
"メッセージファイルの更新などのメンテナンス操作を実行するには、コマンドライン"
"のgettextツールが必要です。したがって、それらをインストールすることを強くお勧"
"めします。"

msgid ""
"**Windows:** Download an installer from `this page <https://mlocati.github."
"io/articles/gettext-iconv-windows.html>`_. Any architecture and binary type "
"(shared or static) works; if in doubt, choose the 64-bit static installer."
msgstr ""
"**Windows:** `このページ <https://mlocati.github.io/articles/gettext-iconv-"
"windows.html>`_ からインストーラーをダウンロードします。すべてのアーキテク"
"チャおよびバイナリタイプ(共有または静的)が機能します。疑わしい場合は、64ビッ"
"トの静的インストーラーを選択してください。"

#, fuzzy
msgid ""
"**macOS:** Install gettext either using `Homebrew <https://brew.sh/>`_ with "
"the ``brew install gettext`` command, or using `MacPorts <https://www."
"macports.org/>`_ with the ``sudo port install gettext`` command."
msgstr ""
"**macOS:** `Homebrew <https://brew.sh/>`_ を使用して ``brew install "
"gettext`` コマンドでgettextをインストールします。"

msgid ""
"**Linux:** On most distributions, install the ``gettext`` package from your "
"distribution's package manager."
msgstr ""
"**Linux:** ほとんどのディストリビューションでは、ディストリビューションのパッ"
"ケージマネージャーから ``gettext`` パッケージをインストールします。"

msgid "Creating the PO template (POT) manually"
msgstr "POテンプレート (POT)の手動作成"

msgid ""
"Godot currently doesn't support extracting source strings using "
"``xgettext``, so the ``.pot`` file must be created manually. This file can "
"be placed anywhere in the project directory, but it's recommended to keep it "
"in a subdirectory, as each locale will be defined in its own file."
msgstr ""
"Godotは現在、\\ ``xgettext`` を使用したソース文字列の抽出をサポートしていない"
"ため、\\ ``.pot`` ファイルを手動で作成する必要があります。このファイルはプロ"
"ジェクトディレクトリのどこにでも配置できますが、各ロケールは個別のファイルで"
"定義されるため、サブディレクトリに保存することをお勧めします。"

msgid ""
"Create a directory named `locale` in the project directory. In this "
"directory, save a file named ``messages.pot`` with the following contents:"
msgstr ""
"プロジェクトディレクトリに `locale` という名前のディレクトリを作成します。こ"
"のディレクトリに、次の内容の ``messages.pot`` という名前のファイルを保存しま"
"す:"

msgid ""
"Messages in gettext are made of ``msgid`` and ``msgstr`` pairs. ``msgid`` is "
"the source string (usually in English), ``msgstr`` will be the translated "
"string."
msgstr ""
"gettextのメッセージは、\\ ``msgid`` と ``msgstr`` のペアで構成されていま"
"す。\\ ``msgid`` はソース文字列(通常は英語)で、\\ ``msgstr`` は翻訳された文字"
"列です。"

msgid ""
"The ``msgstr`` value in PO template files (``.pot``) should **always** be "
"empty. Localization will be done in the generated ``.po`` files instead."
msgstr ""
"POテンプレートファイル(``.pot``)の ``msgstr`` 値は\\ **常に**\\ 空である必要"
"があります。代わりに、生成された ``.po`` ファイルでローカライズが行われます。"

msgid "Creating the PO template (POT) using pybabel"
msgstr "pybabelを使ったPOテンプレート(POT)の作成"

msgid ""
"The Python tool pybabel has support for Godot and can be used to "
"automatically create and update the POT file from your scene files and "
"scripts."
msgstr ""
"PythonツールpybabelはGodotをサポートしており、シーンファイルとスクリプトから"
"POTファイルを自動的に作成および更新するために使用できます。"

msgid "After installing ``babel`` and ``babel-godot``, for example using pip:"
msgstr ""
"``babel`` と ``babel-godot`` をインストールした後、例えばpipを使用して:"

msgid ""
"Write a mapping file (for example ``babelrc``) which will indicate which "
"files pybabel needs to process (note that we process GDScript as Python, "
"which is generally sufficient):"
msgstr ""
"pybabelが処理する必要があるファイルを示すマッピングファイル(たとえば "
"``babelrc``)を記述します(GDScriptをPythonとして処理することに注意してくださ"
"い。通常はこれで事足ります):"

msgid "You can then run pybabel like so:"
msgstr "pybabelを次のように実行できます:"

msgid ""
"Use the ``-k`` option to specify what needs to be extracted. In this case, "
"arguments to :ref:`tr() <class_Object_method_tr>` will be translated, as "
"well as properties named \"text\" (commonly used by Control nodes) and "
"LineEdit's \"placeholder_text\" property."
msgstr ""
"抽出する必要があるものを指定するには、\\ ``-k`` オプションを使用します。この"
"場合、\\ :ref:`tr() <class_Object_method_tr>` への引数と、(コントロールノード"
"で一般的に使用される)\"text\"、およびLineEditの \"placeholder_text\"という名"
"前のプロパティが変換されます。"

msgid "Creating a messages file from a PO template"
msgstr "POテンプレートからメッセージファイルを作成する"

msgid ""
"The ``msginit`` command is used to turn a PO template into a messages file. "
"For instance, to create a French localization file, use the following "
"command while in the ``locale`` directory:"
msgstr ""
"``msginit`` コマンドは、POテンプレートをメッセージファイルに変換するために使"
"用されます。たとえば、フランス語のローカライズファイルを作成するには、\\ "
"``locale`` ディレクトリで次のコマンドを使用します:"

msgid ""
"The command above will create a file named ``fr.po`` in the same directory "
"as the PO template."
msgstr ""
"上記のコマンドは、POテンプレートと同じディレクトリに ``fr.po`` という名前の"
"ファイルを作成します。"

msgid ""
"Alternatively, you can do that graphically using Poedit, or by uploading the "
"POT file to your web platform of choice."
msgstr ""
"または、Poeditを使用してグラフィカルに行うか、選択したWebプラットフォームに"
"POTファイルをアップロードします。"

msgid "Loading a messages file in Godot"
msgstr "Godot でのメッセージ ファイルの読み込み"

#, fuzzy
msgid ""
"To register a messages file as a translation in a project, open the "
"**Project Settings**, then go to the **Localization** tab. In "
"**Translations**, click **Add…** then choose the ``.po`` or ``.mo`` file in "
"the file dialog. The locale will be inferred from the ``\"Language: "
"<code>\\n\"`` property in the messages file."
msgstr ""
"メッセージファイルをプロジェクトの翻訳として登録するには、\\ **プロジェクト設"
"定**\\ を開き、\\ **ローカライズ**\\ タブに移動します。\\ **翻訳**\\ で、\\ "
"**追加…**\\ をクリックし、ファイルダイアログで ``.po`` ファイルを選択します。"
"ロケールは、メッセージファイルの ``\"Language:<code>\\n\"`` プロパティから推"
"測されます。"

msgid ""
"See :ref:`doc_internationalizing_games` for more information on importing "
"and testing translations in Godot."
msgstr ""
"Godotでの翻訳のインポートとテストの詳細については、\\ :ref:"
"`doc_internationalizing_games` を参照してください。"

msgid "Updating message files to follow the PO template"
msgstr "POテンプレートに従うようにメッセージファイルを更新する"

#, fuzzy
msgid ""
"After updating the PO template, you will have to update message files so "
"that they contain new strings, while removing strings that are no longer "
"present in the PO template. This can be done automatically using the "
"``msgmerge`` tool:"
msgstr ""
"POテンプレートを更新した後、POテンプレートで削除されたPOテンプレートに存在し"
"なくなった文字列を削除すると同時に、新しい文字列を含むようにメッセージファイ"
"ルを更新する必要があります。これは ``msgmerge`` ツールを使用して自動的に実行"
"できます:"

msgid ""
"If you want to keep a backup of the original message file (which would be "
"saved as ``fr.po~`` in this example), remove the ``--backup=none`` argument."
msgstr ""
"元のメッセージファイル(この例では ``fr.po~`` として保存される)のバックアップ"
"を保持する場合は、\\ ``--backup=none`` 引数を削除します。"

msgid ""
"After running ``msgmerge``, strings which were modified in the source "
"language will have a \"fuzzy\" comment added before them in the ``.po`` "
"file. This comment denotes that the translation should be updated to match "
"the new source string, as the translation will most likely be inaccurate "
"until it's updated."
msgstr ""

msgid ""
"Strings with \"fuzzy\" comments will **not** be read by Godot until the "
"translation is updated and the \"fuzzy\" comment is removed."
msgstr ""

msgid "Checking the validity of a PO file or template"
msgstr "POファイルまたはテンプレートの有効性の確認"

msgid ""
"It is possible to check whether a gettext file's syntax is valid by running "
"the command below:"
msgstr ""
"以下のコマンドを実行すると、gettextファイルの構文が有効かどうかを確認できま"
"す:"

msgid ""
"If there are syntax errors or warnings, they will be displayed in the "
"console. Otherwise, ``msgfmt`` won't output anything."
msgstr ""
"構文エラーまたは警告がある場合は、コンソールに表示されます。そうでなけれ"
"ば、\\ ``msgfmt`` は何も出力しません。"

msgid "Using binary MO files (useful for large projects only)"
msgstr ""

msgid ""
"For large projects with several thousands of strings to translate or more, "
"it can be worth it to use binary (compiled) MO message files instead of text-"
"based PO files. Binary MO files are smaller and faster to read than the "
"equivalent PO files."
msgstr ""

msgid "You can generate a MO file with the command below:"
msgstr ""

msgid ""
"If the PO file is valid, this command will create a ``fr.mo`` file besides "
"the PO file. This MO file can then be loaded in Godot as described below."
msgstr ""

msgid ""
"The original PO file should be kept in version control so you can update "
"your translation in the future. In case you lose the original PO file and "
"wish to decompile a MO file into a text-based PO file, you can do so with:"
msgstr ""

msgid ""
"The decompiled file will not include comments or fuzzy strings, as these are "
"never compiled in the MO file in the first place."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
