# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Interpolation"
msgstr "Interpolation(補間)"

msgid ""
"Interpolation is a very basic operation in graphics programming. It's good "
"to become familiar with it in order to expand your horizons as a graphics "
"developer."
msgstr ""
"補間は、グラフィックプログラミングの非常に基本的な操作です。グラフィックス開"
"発者としての視野を広げるために、これに慣れることは良いことです。"

msgid ""
"The basic idea is that you want to transition from A to B. A value ``t``, "
"represents the states in-between."
msgstr ""
"基本的な考え方は、AからBに移行することです。値 ``t`` は、中間の状態を表しま"
"す。"

msgid ""
"As an example if ``t`` is 0, then the state is A. If ``t`` is 1, then the "
"state is B. Anything in-between is an *interpolation*."
msgstr ""
"たとえば、\\ ``t`` が0の場合、状態はAです。\\ ``t`` が1の場合、状態はBです。"
"中間はすべて\\ *補間*\\ です。"

#, fuzzy
msgid ""
"Between two real (floating-point) numbers, a simple interpolation is usually "
"described as:"
msgstr "2つの実数(浮動小数点)の間では、単純な補間は通常次のように記述されます:"

msgid "And often simplified to:"
msgstr "多くの場合、次のように簡略化されます:"

msgid ""
"The name of this type of interpolation, which transforms a value into "
"another at *constant speed* is *\"linear\"*. So, when you hear about *Linear "
"Interpolation*, you know they are referring to this simple formula."
msgstr ""
"*一定の速度*\\ で値を別の値に変換するこのタイプの補間の名前は\\ *\"線形"
"(linear)\"*\\ です。したがって、\\ *線形補間*\\ について聞いたとき、あなたは"
"彼らがこの単純な式を参照していることを知っています。"

msgid ""
"There are other types of interpolations, which will not be covered here. A "
"recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` "
"page."
msgstr ""
"他のタイプの補間がありますが、ここでは説明しません。後で :ref:`Bezier "
"<doc_beziers_and_curves>` のページを読むことをお勧めします。"

msgid "Vector interpolation"
msgstr "ベクトル補間"

msgid ""
"Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>`) can also be interpolated, they come with handy functions "
"to do it :ref:`Vector2.linear_interpolate() "
"<class_Vector2_method_linear_interpolate>` and :ref:`Vector3."
"linear_interpolate() <class_Vector3_method_linear_interpolate>`."
msgstr ""
"ベクトルタイプ(:ref:`Vector2 <class_Vector2>` および :ref:`Vector3 "
"<class_Vector3>`)も補間できます。それらはそれを行う便利な関数を備えています :"
"ref:`Vector2.linear_interpolate() <class_Vector2_method_linear_interpolate>` "
"および :ref:`Vector3.linear_interpolate() "
"<class_Vector3_method_linear_interpolate>` です。"

#, fuzzy
msgid ""
"For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_cubic_interpolate>` and :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_cubic_interpolate>`, which do a :"
"ref:`Bezier <doc_beziers_and_curves>` style interpolation."
msgstr ""
"三次補間の場合、\\ :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_linear_interpolate>` および :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_linear_interpolate>` もあり、これら"
"は :ref:`Bezier <doc_beziers_and_curves>` スタイルの補間を行います。"

msgid ""
"Here is simple pseudo-code for going from point A to B using interpolation:"
msgstr ""
"補間を使用してポイントAからBに移動するための簡単な擬似コードを次に示します:"

msgid "It will produce the following motion:"
msgstr "次のモーションを生成します:"

msgid "Transform interpolation"
msgstr "幾何学変換(変形)の補間"

msgid ""
"It is also possible to interpolate whole transforms (make sure they have "
"either uniform scale or, at least, the same non-uniform scale). For this, "
"the function :ref:`Transform.interpolate_with() "
"<class_Transform_method_interpolate_with>` can be used."
msgstr ""
"また、変換全体を補間することもできます(使用するばあいは、均一なスケール、また"
"は少なくとも同じ非均一なスケールを持っていることを確認してください)。このため"
"に、関数 :ref:`Transform.interpolate_with() "
"<class_Transform_method_interpolate_with>` を使用できます。"

msgid ""
"Here is an example of transforming a monkey from Position1 to Position2:"
msgstr "以下は、猿をPosition1からPosition2に変換する例です:"

msgid "Using the following pseudocode:"
msgstr "次の擬似コードを使用します:"

msgid "And again, it will produce the following motion:"
msgstr "また、次のモーションを生成します:"

msgid "Smoothing motion"
msgstr "スムージングモーション"

msgid ""
"Interpolation can be used to smooth movement, rotation, etc. Here is an "
"example of a circle following the mouse using smoothed motion:"
msgstr ""
"補間は、動きや回転などを滑らかにするために使用できます。これは、滑らかな動き"
"を使用したマウスに追従する円の例です:"

msgid "Here is how it looks:"
msgstr "次の様に見えます:"

msgid ""
"This useful for smoothing camera movement, allies following you (ensuring "
"they stay within a certain range), and many other common game patterns."
msgstr ""
"これは、カメラの動きを滑らかにしたり、仲間を追いかけたり(一定範囲内にとどまる"
"ようにしたり)、その他多くの一般的なゲームパターンに役立ちます。"

msgid "Translation status"
msgstr "翻訳ステータス"
