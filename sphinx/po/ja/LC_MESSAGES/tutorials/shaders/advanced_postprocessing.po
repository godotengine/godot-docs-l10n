# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Advanced post-processing"
msgstr "高度なポストプロセッシング"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"This tutorial describes an advanced method for post-processing in Godot. In "
"particular, it will explain how to write a post-processing shader that uses "
"the depth buffer. You should already be familiar with post-processing "
"generally and, in particular, with the methods outlined in the :ref:`custom "
"post-processing tutorial <doc_custom_postprocessing>`."
msgstr ""
"このチュートリアルでは、Godotでのポストプロセッシングを行うための高度な方法に"
"ついて説明します。特に、深度バッファーを使用するポストプロセッシングシェー"
"ダーの作成方法について説明します。ポストプロセッシング全般、特に :ref:`カスタ"
"ムポストプロセッシングチュートリアル <doc_custom_postprocessing>` で概説され"
"ているメソッドに既に精通している必要があります。"

msgid ""
"In the previous post-processing tutorial, we rendered the scene to a :ref:"
"`Viewport <class_Viewport>` and then rendered the Viewport in a :ref:"
"`ViewportContainer <class_ViewportContainer>` to the main scene. One "
"limitation of this method is that we could not access the depth buffer "
"because the depth buffer is only available in spatial shaders and Viewports "
"do not maintain depth information."
msgstr ""
"前のポストプロセッシングチュートリアルでは、シーンを :ref:`Viewport "
"<class_Viewport>` にレンダリングしてから、ビューポートをメインシーンに対し"
"て :ref:`ViewportContainer <class_ViewportContainer>` を使ってレンダリングし"
"ました。この方法の1つの制限は、深度バッファーはSpatialシェーダーでのみ使用可"
"能であり、ビューポートは深度情報を保持しないため、深度バッファーにアクセスで"
"きないことです。"

msgid "Full screen quad"
msgstr "フルスクリーン矩形"

msgid ""
"In the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`, "
"we covered how to use a Viewport to make custom post-processing effects. "
"There are two main drawbacks of using a Viewport:"
msgstr ""
":ref:`カスタムポストプロセッシングのチュートリアル "
"<doc_custom_postprocessing>` で、ビューポートを使用してカスタムポストプロセッ"
"シングエフェクトを作成する方法を説明しました。ビューポートを使用することに"
"は、主に2つの欠点があります。"

msgid "The depth buffer cannot be accessed"
msgstr "深度バッファにアクセスできません"

msgid "The effect of the post-processing shader is not visible in the editor"
msgstr "後処理シェーダーの効果はエディタに表示されません"

msgid ""
"To get around the limitation on using the depth buffer, use a :ref:"
"`MeshInstance <class_MeshInstance>` with a :ref:`QuadMesh <class_QuadMesh>` "
"primitive. This allows us to use a spatial shader and to access the depth "
"texture of the scene. Next, use a vertex shader to make the quad cover the "
"screen at all times so that the post-processing effect will be applied at "
"all times, including in the editor."
msgstr ""
"深度バッファの使用に関する制限を回避するには、\\ :ref:`MeshInstance "
"<class_MeshInstance>` を :ref:`QuadMesh <class_QuadMesh>` プリミティブととも"
"に使用します。これにより、Spatialシェーダーを使用して、シーンの深度テクスチャ"
"にアクセスできます。次に、頂点シェーダーを使用して、矩形が常に画面を覆うよう"
"にし、エディタを含む後処理効果が常に適用されるようにします。"

msgid ""
"First, create a new MeshInstance and set its mesh to a QuadMesh. This "
"creates a quad centered at position ``(0, 0, 0)`` with a width and height of "
"``1``. Set the width and height to ``2``. Right now, the quad occupies a "
"position in world space at the origin; however, we want it to move with the "
"camera so that it always covers the entire screen. To do this, we will "
"bypass the coordinate transforms that translate the vertex positions through "
"the difference coordinate spaces and treat the vertices as if they were "
"already in clip space."
msgstr ""
"最初に、新しいMeshInstanceを作成し、そのメッシュをQuadMeshに設定します。これ"
"により、\\ ``(0, 0, 0)`` の位置を中心とするクワッドが作成され、幅と高さが "
"``1`` になります。幅と高さを ``2`` に設定します。現在、矩形はワールド空間の原"
"点の位置を占めています。ただし、カメラとともに移動して、常に画面全体をカバー"
"するようにします。これを行うには、差分座標空間を介して頂点位置を変換する座標"
"変換をバイパスし、既にクリップ空間にあるかのように頂点を扱います。"

msgid ""
"The vertex shader expects coordinates to be output in clip space, which are "
"coordinates ranging from ``-1`` at the left and bottom of the screen to "
"``1`` at the top and right of the screen. This is why the QuadMesh needs to "
"have height and width of ``2``. Godot handles the transform from model to "
"view space to clip space behind the scenes, so we need to nullify the "
"effects of Godot's transformations. We do this by setting the ``POSITION`` "
"built-in to our desired position. ``POSITION`` bypasses the built-in "
"transformations and sets the vertex position directly."
msgstr ""
"頂点シェーダーは、座標がクリップ空間で出力されることを想定しています。これ"
"は、画面の左と下の ``-1`` から画面の右上の ``1`` までの座標です。これが、"
"QuadMeshの高さと幅を ``2`` にする必要がある理由です。Godot はモデルからビュー"
"空間への変換を処理し、背景の背後にあるクリップ空間に移動するので、Godotの変換"
"の効果を無効にする必要があります。これを行うには、ビルトインの ``POSITION`` "
"を目的の位置に設定します。\\ ``POSITION`` は、ビルトインの変換をバイパスし、"
"頂点の位置を直接設定します。"

msgid ""
"Even with this vertex shader, the quad keeps disappearing. This is due to "
"frustum culling, which is done on the CPU. Frustum culling uses the camera "
"matrix and the AABBs of Meshes to determine if the Mesh will be visible "
"*before* passing it to the GPU. The CPU has no knowledge of what we are "
"doing with the vertices, so it assumes the coordinates specified refer to "
"world positions, not clip space positions, which results in Godot culling "
"the quad when we turn away from the center of the scene. In order to keep "
"the quad from being culled, there are a few options:"
msgstr ""
"この頂点シェーダーを使用しても、矩形は消えたままです。これは、CPUで実行される"
"フラスタム(視錐台)カリングによるものです。フラスタムカリングは、カメラマト"
"リックスとメッシュのAABBを使用して、メッシュをGPUに渡す前にメッシュが表示され"
"るかどうかを決定します。 CPUは頂点の処理内容を認識していないため、指定された"
"座標はクリップスペースの位置ではなくワールドの位置を参照していると想定しま"
"す。矩形がカリングされないようにするには、いくつかのオプションがあります:"

msgid ""
"Add the QuadMesh as a child to the camera, so the camera is always pointed "
"at it"
msgstr "QuadMeshをカメラの子として追加し、カメラが常にそれを指すようにする"

msgid ""
"Set the Geometry property ``extra_cull_margin`` as large as possible in the "
"QuadMesh"
msgstr ""
"QuadMeshでGeometryプロパティ ``extra_cull_margin`` をできるだけ大きく設定しま"
"す"

msgid ""
"The second option ensures that the quad is visible in the editor, while the "
"first option guarantees that it will still be visible even if the camera "
"moves outside the cull margin. You can also use both options."
msgstr ""
"2番目のオプションは、エディタでクワッドが表示されることを保証します。一方、最"
"初のオプションは、カメラがカリングマージンの外側に移動しても表示されることを"
"保証します。両方のオプションを使用することもできます。"

msgid "Depth texture"
msgstr "深度テクスチャ"

msgid ""
"To read from the depth texture, perform a texture lookup using ``texture()`` "
"and the uniform variable ``DEPTH_TEXTURE``."
msgstr ""
"深度テクスチャから読み取るには、\\ ``texture()`` とuniform変数 "
"``DEPTH_TEXTURE`` を使用してテクスチャルックアップを実行します。"

msgid ""
"Similar to accessing the screen texture, accessing the depth texture is only "
"possible when reading from the current viewport. The depth texture cannot be "
"accessed from another viewport to which you have rendered."
msgstr ""
"画面テクスチャへのアクセスと同様に、深度テクスチャへのアクセスは、現在の"
"ビューポートから読み取るときにのみ可能です。深度テクスチャは、レンダリングし"
"た別のビューポートからアクセスできません。"

#, fuzzy
msgid ""
"The values returned by ``DEPTH_TEXTURE`` are between ``0`` and ``1`` and are "
"nonlinear. When displaying depth directly from the ``DEPTH_TEXTURE``, "
"everything will look almost white unless it is very close. This is because "
"the depth buffer stores objects closer to the camera using more bits than "
"those further, so most of the detail in depth buffer is found close to the "
"camera. In order to make the depth value align with world or model "
"coordinates, we need to linearize the value. When we apply the projection "
"matrix to the vertex position, the z value is made nonlinear, so to "
"linearize it, we multiply it by the inverse of the projection matrix, which "
"in Godot, is accessible with the variable ``INV_PROJECTION_MATRIX``."
msgstr ""
"``DEPTH_TEXTURE`` によって返される値は ``0`` と ``1`` の間にあり、非線形で"
"す。\\ ``DEPTH_TEXTURE`` から直接深度を表示すると、非常に近くない限り、すべて"
"がほぼ白く見えます。これは、深度バッファがより多くのビットを使用してカメラに"
"近いオブジェクトを格納するため、深度バッファの詳細のほとんどがカメラの近くに"
"あるためです。深度値をワールドまたはモデルの座標に合わせるために、値を線形化"
"する必要があります。射影行列を頂点位置に適用すると、z値は非線形になります。そ"
"のため、線形化するために、Godotでは変数 ``INV_PROJECTION_MATRIX`` でアクセス"
"できる射影行列の逆行列で乗算します。"

msgid ""
"Firstly, take the screen space coordinates and transform them into "
"normalized device coordinates (NDC). NDC run from ``-1`` to ``1``, similar "
"to clip space coordinates. Reconstruct the NDC using ``SCREEN_UV`` for the "
"``x`` and ``y`` axis, and the depth value for ``z``."
msgstr ""
"まず、画面空間の座標を取得し、それらを正規化されたデバイス座標(NDC)に変換しま"
"す。 NDCは、クリップ空間座標と同様に、\\ ``-1`` から ``1`` まで実行されま"
"す。\\ ``x`` および ``y`` 軸に ``SCREEN_UV``\\ 、\\ ``z`` に深度値を使用して"
"NDCを再構築します。"

msgid ""
"Convert NDC to view space by multiplying the NDC by "
"``INV_PROJECTION_MATRIX``. Recall that view space gives positions relative "
"to the camera, so the ``z`` value will give us the distance to the point."
msgstr ""
"NDCに ``INV_PROJECTION_MATRIX`` を掛けて、NDCを表示スペースに変換します。"
"ビュー空間はカメラに相対的な位置を与えることを思い出してください。そのた"
"め、\\ ``z`` 値はポイントまでの距離を与えます。"

msgid ""
"Because the camera is facing the negative ``z`` direction, the position will "
"have a negative ``z`` value. In order to get a usable depth value, we have "
"to negate ``view.z``."
msgstr ""
"カメラは負の ``z`` 方向を向いているため、位置には負の ``z`` 値が設定されま"
"す。使用可能な深度値を取得するには、\\ ``view.z`` 分の長さを無効(-view.z)にす"
"る必要があります。"

msgid ""
"The world position can be constructed from the depth buffer using the "
"following code. Note that the ``CAMERA_MATRIX`` is needed to transform the "
"position from view space into world space, so it needs to be passed to the "
"fragment shader with a varying."
msgstr ""
"ワールド位置は、次のコードを使用して深度バッファーから構築できます。ビュー空"
"間からワールド空間に位置を変換するには ``CAMERA_MATRIX`` が必要なので、"
"varyingでフラグメントシェーダーに渡す必要があることに注意してください。"

msgid "An optimization"
msgstr "最適化"

msgid ""
"You can benefit from using a single large triangle rather than using a full "
"screen quad. The reason for this is explained `here <https://michaldrobot."
"com/2014/04/01/gcn-execution-patterns-in-full-screen-passes>`_. However, the "
"benefit is quite small and only beneficial when running especially complex "
"fragment shaders."
msgstr ""
"フルスクリーン矩形を使用するのではなく、単一の大きな三角形を使用することでメ"
"リットが得られます。この理由は `ここ <https://michaldrobot.com/2014/04/01/"
"gcn-execution-patterns-in-full-screen-passes>`_ で説明されています。ただし、"
"この利点は非常に小さく、特に複雑なフラグメントシェーダーを実行する場合にのみ"
"有益です。"

msgid ""
"Set the Mesh in the MeshInstance to an :ref:`ArrayMesh <class_ArrayMesh>`. "
"An ArrayMesh is a tool that allows you to easily construct a Mesh from "
"Arrays for vertices, normals, colors, etc."
msgstr ""
"MeshInstanceのMeshを :ref:`ArrayMesh <class_ArrayMesh>` に設定します。 "
"ArrayMeshは、頂点、法線、色などの配列からメッシュを簡単に構築できるツールで"
"す。"

msgid "Now, attach a script to the MeshInstance and use the following code:"
msgstr "次に、スクリプトをMeshInstanceにアタッチし、次のコードを使用します:"

msgid ""
"The triangle is specified in normalized device coordinates. Recall, NDC run "
"from ``-1`` to ``1`` in both the ``x`` and ``y`` directions. This makes the "
"screen ``2`` units wide and ``2`` units tall. In order to cover the entire "
"screen with a single triangle, use a triangle that is ``4`` units wide and "
"``4`` units tall, double its height and width."
msgstr ""
"三角形は、正規化されたデバイス座標で指定されます。 NDCは ``-1`` から ``1`` ま"
"で ``x`` と ``y`` の両方の方向に実行されることを思い出してください。これによ"
"り、画面の幅が ``2`` 単位、高さが ``2`` 単位になります。画面全体を単一の三角"
"形で覆うには、\\ ``4`` 単位の幅と ``4`` 単位の高の、幅と高さを2倍にした三角形"
"を使用します。"

msgid ""
"Assign the same vertex shader from above and everything should look exactly "
"the same."
msgstr ""
"上から同じ頂点シェーダーを割り当てると、すべてがまったく同じに見えるはずで"
"す。"

msgid ""
"The one drawback to using an ArrayMesh over using a QuadMesh is that the "
"ArrayMesh is not visible in the editor because the triangle is not "
"constructed until the scene is run. To get around that, construct a single "
"triangle Mesh in a modelling program and use that in the MeshInstance "
"instead."
msgstr ""
"QuadMeshを使用するよりもArrayMeshを使用する場合の1つの欠点は、シーンが実行さ"
"れるまで三角形が構築されないため、エディタでArrayMeshが表示されないことです。"
"これを回避するには、モデリングプログラムで単一の三角形メッシュを作成し、代わ"
"りにそれをMeshInstanceで使用します。"

msgid "Translation status"
msgstr "翻訳ステータス"
