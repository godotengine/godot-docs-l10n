# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom post-processing"
msgstr "カスタムポストプロセッシング"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. Sometimes you want to write your own custom effect. Here's "
"how you can do so."
msgstr ""
"Godotは、ブルーム、DOF、SSAOを含む多くのポストプロセッシング効果をすぐに利用"
"できます。でも時々、独自のカスタム効果を作成したい場合もあります。そのための"
"方法は次のとおりです。"

msgid ""
"Post-processing effects are shaders applied to a frame after Godot rendered "
"it. You first want to render your scene into a :ref:`Viewport "
"<class_Viewport>`, then render the ``Viewport`` inside a :ref:"
"`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""
"ポストプロセッシング効果は、Godotがフレームをレンダリングした後に適用される"
"シェーダーです。最初にシーンを :ref:`Viewport <class_Viewport>` にレンダリン"
"グし、次に :ref:`ViewportTexture <class_ViewportTexture>` 内で ``Viewport`` "
"をレンダリングして、画面に表示します。"

msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""
"カスタムのポストプロセッシングシェーダーを実装する最も簡単な方法は、Godotの組"
"み込み機能を使用して画面テクスチャから読み取ることです。これに慣れていない場"
"合は、最初に :ref:`Screen Reading Shaders Tutorial <doc_screen-"
"reading_shaders>` を読む必要があります。"

msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""
"執筆時点では、Godotは複数のバッファーへの同時レンダリングをサポートしていませ"
"ん。ポストプロセッシングシェーダーは、法線または他のレンダーパスにアクセスで"
"きません。レンダリングされたフレームにのみアクセスできます。"

msgid "Single pass post-processing"
msgstr "シングルパスポストプロセッシング"

msgid ""
"You will need a ``Viewport`` to render your scene to, and a scene to render "
"your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer "
"<class_ViewportContainer>` to display your ``Viewport`` on the entire screen "
"or inside another :ref:`Control <class_Control>` node."
msgstr ""
"シーンをレンダリングするための ``Viewport`` と、画面上で ``Viewport`` をレン"
"ダリングするためのシーンが必要になります。\\ :ref:`ViewportContainer "
"<class_ViewportContainer>` を使用して、画面全体または別の :ref:`Control "
"<class_Control>` ノード内に ``Viewport`` を表示できます。"

msgid ""
"Rendering using a ``Viewport`` gives you control over how the scene render, "
"including the framerate, and you can use the ``ViewportContainer`` to render "
"3D objects in a 2D scene."
msgstr ""
"``Viewport`` を使用してレンダリングすると、フレームレートを含むシーンのレンダ"
"リング方法を制御できます。また、\\ ``ViewportContainer`` を使用して2Dシーンに"
"3Dオブジェクトをレンダリングできます。"

msgid ""
"For this demo, we will use a :ref:`Node2D <class_Node2D>` with a "
"``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should "
"look like this:"
msgstr ""
"このデモでは、\\ :ref:`Node2D <class_Node2D>` を ``ViewportContainer`` ととも"
"に使用し、最後に ``Viewport`` を使用します。 [**シーン**]タブは次のようになり"
"ます:"

msgid ""
"Inside the ``Viewport``, you can have whatever you want. This will contain "
"your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""
"``Viewport``の中には、望みのものを保持できます。これにはメインシーンが含まれ"
"ます。このチュートリアルでは、ランダムボックスのフィールドを使用します:"

msgid ""
"Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the "
"``ViewportContainer``, and assign a new shader resource to it. You can "
"access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""
"新しい :ref:`ShaderMaterial <class_ShaderMaterial>` を ``ViewportContainer`` "
"に追加し、新しいシェーダーリソースを割り当てます。レンダリングされた "
"``Viewport`` には、組み込みの ``TEXTURE`` ユニフォーム(uniform)を使用してアク"
"セスできます。"

msgid ""
"You can choose not to use a ``ViewportContainer``, but if you do so, you "
"will need to create your own uniform in the shader and pass the ``Viewport`` "
"texture in manually, like so:"
msgstr ""
"``ViewportContainer`` を使用しないこともできますが、使用する場合は、シェー"
"ダーで独自のユニフォーム(uniform)を作成し、次のように ``Viewport`` テクスチャ"
"を手動で渡す必要があります:"

msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr ""
"そして、次のように、GDScriptからシェーダーにテクスチャを渡すことができます:"

msgid ""
"Copy the following code to your shader. The above code is a single pass edge "
"detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_."
msgstr ""
"次のコードをシェーダーにコピーします。このコードは、シングルパスエッジ検出"
"フィルター、\\ `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_ です。"

msgid ""
"The Sobel filter reads pixels in a 9x9 grid around the current pixel and "
"adds them together, using weight. What makes it interesting is that it "
"assigns weights to each pixel; +1 for each of the eight around the center "
"and -8 for the center pixel. The choice of weights is called a \"kernel\". "
"You can use different kernels to create edge detection filters, outlines, "
"and all sorts of effects."
msgstr ""
"Sobelフィルターは、現在のピクセルの周囲の9x9グリッドのピクセルを読み取り、重"
"みを使用してそれらを加算します。興味深いのは、各ピクセルに重みを割り当てるこ"
"とです。中心の周りの8個のそれぞれに+1、中心のピクセルに-8。重みの選択は「カー"
"ネル」と呼ばれます。異なるカーネルを使用して、エッジ検出フィルター、アウトラ"
"イン、およびあらゆる種類の効果を作成できます。"

msgid "Multi-pass post-processing"
msgstr "マルチパスポストプロセッシング"

msgid ""
"Some post-processing effects like blur are resource intensive. If you break "
"them down in multiple passes however, you can make them run a lot faster. In "
"a multipass material, each pass takes the result from the previous pass as "
"an input and processes it."
msgstr ""
"ぼかしなどの後処理の効果の中には、リソースを大量に消費するものがあります。た"
"だし、複数のパスでそれらを分解する場合、それらをはるかに高速に実行できます。"
"マルチパスマテリアルでは、各パスは前のパスの結果を入力として処理します。"

msgid ""
"To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. "
"In the example above, you rendered the content of one ``Viewport`` object "
"into the root ``Viewport``, through a ``ViewportContainer`` node. You can do "
"the same thing for a multi-pass shader by rendering the content of one "
"``Viewport`` into another and then rendering the last ``Viewport`` into the "
"root ``Viewport``."
msgstr ""
"マルチパスポストプロセッシングシェーダーを作成するには、\\ ``Viewport`` ノー"
"ドをスタックします。上記の例では、\\ ``ViewportContainer`` ノードを介して、1"
"つの ``Viewport`` オブジェクトのコンテンツをルート ``Viewport`` にレンダリン"
"グしました。マルチパスシェーダーに対して同じことを行うには、ある "
"``Viewport`` のコンテンツを別の ``Viewport`` にレンダリングし、最後の "
"``Viewport`` をルート ``Viewport`` にレンダリングします。"

msgid "Your scene hierarchy will look something like this:"
msgstr "シーンの階層は次のようになります:"

msgid ""
"Godot will render the bottom ``Viewport`` node first. So if the order of the "
"passes matters for your shaders, make sure that you assign the shader you "
"want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""
"Godotは下の ``Viewport`` ノードを最初にレンダリングします。したがって、シェー"
"ダーにとってパスの順序が重要な場合は、最初に適用するシェーダーをツリー内の最"
"も低い ``ViewportContainer`` に割り当てるようにしてください。"

msgid ""
"You can also render your Viewports separately without nesting them like "
"this. You just need to use two Viewports and to render them one after the "
"other."
msgstr ""
"このようにネストせずに、ビューポートを個別にレンダリングすることもできます。 "
"2つのビューポートを使用し、それらを次々にレンダリングするだけです。"

msgid ""
"Apart from the node structure, the steps are the same as with the single-"
"pass post-processing shader."
msgstr ""
"ノード構造を除き、手順はシングルパスポストプロセッシングシェーダーと同じで"
"す。"

msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the :ref:"
"`ViewportContainers <class_ViewportContainer>`. The order in which you apply "
"the shaders does not matter:"
msgstr ""
"例として、次のコードを各 :ref:`ViewportContainers <class_ViewportContainer>` "
"にアタッチすることにより、フルスクリーンのガウスぼかし効果を作成できます。"
"シェーダーを適用する順序は重要ではありません:"

msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr "上記のコードを使用すると、次のような全画面ぼかし効果が得られます。"

msgid ""
"For more information on how ``Viewport`` nodes work, see the :ref:`Viewports "
"Tutorial <doc_viewports>`."
msgstr ""
"``Viewport`` ノードの機能の詳細については、\\ :ref:`Viewports Tutorial "
"<doc_viewports>` を参照してください。"

msgid "Translation status"
msgstr "翻訳ステータス"
