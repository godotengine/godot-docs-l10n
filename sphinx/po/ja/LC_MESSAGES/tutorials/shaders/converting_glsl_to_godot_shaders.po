# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Converting GLSL to Godot shaders"
msgstr "スプライトを2Dメッシュに変換"

msgid ""
"This document explains the differences between Godot's shading language and "
"GLSL and gives practical advice on how to migrate shaders from other "
"sources, such as Shadertoy and The Book of Shaders, into Godot shaders."
msgstr ""
"このドキュメントでは、Godotのシェーディング言語とGLSLの違いを説明し、シェー"
"ダーをShadertoyやThe Book of Shadersなどの他のソースからGodotシェーダーに移行"
"する方法に関する実用的なアドバイスを提供します。"

msgid ""
"For detailed information on Godot's shading language, please refer to the :"
"ref:`Shading Language <doc_shading_language>` reference."
msgstr ""
"Godotのシェーディング言語の詳細については、\\ :ref:`Shading Language "
"<doc_shading_language>` リファレンスを参照してください。"

msgid "GLSL"
msgstr "\\ GLSL"

msgid ""
"Godot uses a shading language based on GLSL with the addition of a few "
"quality-of-life features. Accordingly, most features available in GLSL are "
"available in Godot's shading language."
msgstr ""
"Godotは、GLSLに基づいたシェーディング言語にいくつかの「生活の質を改善させる」"
"機能を追加して使用します。したがって、GLSLで使用可能なほとんどの機能は、Godot"
"のシェーディング言語で使用できます。"

msgid "Shader programs"
msgstr "シェーダープログラム"

msgid ""
"In GLSL, each shader uses a separate program. You have one program for the "
"vertex shader and one for the fragment shader. In Godot, you have a single "
"shader that contains a ``vertex`` and/or a ``fragment`` function. If you "
"only choose to write one, Godot will supply the other."
msgstr ""
"GLSLでは、各シェーダーは個別のプログラムを使用します。頂点シェーダーとフラグ"
"メントシェーダー用に1つのプログラムがあります。 Godotには、\\ ``vertex`` およ"
"び/または ``fragment`` 関数を含む単一のシェーダーがあります。一方のみを選択し"
"た場合、Godotがもう一方を提供します。"

msgid ""
"Godot allows uniform variables and functions to be shared by defining the "
"fragment and vertex shaders in one file. In GLSL, the vertex and fragment "
"programs cannot share variables except when varyings are used."
msgstr ""
"Godotでは、1つのファイルでフラグメントシェーダーと頂点シェーダーを定義するこ"
"とにより、統一された変数と関数を共有できます。 GLSLでは、varyingが使用されて"
"いる場合を除き、頂点プログラムとフラグメントプログラムは変数を共有できませ"
"ん。"

msgid "Vertex attributes"
msgstr "頂点の属性"

msgid ""
"In GLSL, you can pass in per-vertex information using attributes and have "
"the flexibility to pass in as much or as little as you want. In Godot, you "
"have a set number of input attributes, including ``VERTEX`` (position), "
"``COLOR``, ``UV``, ``UV2``, ``NORMAL``. For a complete list, see the :ref:"
"`Shading language reference <doc_shading_language>`."
msgstr ""
"GLSLでは、属性を使用して頂点ごとの情報を渡すことができ、必要に応じて柔軟に渡"
"すことができます。 Godotには、\\ ``VERTEX``(位置)、\\ ``COLOR``\\ 、\\ "
"``UV``\\ 、\\ ``UV2``\\ 、\\ ``NORMAL`` など、設定された数の入力属性がありま"
"す。完全なリストについては :ref:`Shading language reference "
"<doc_shading_language>` を参照してください。"

msgid "gl_Position"
msgstr "\\ gl_Position"

msgid ""
"``gl_Position`` receives the final position of a vertex specified in the "
"vertex shader. It is specified by the user in clip space. Typically, in "
"GLSL, the model space vertex position is passed in using a vertex attribute "
"called ``position`` and you handle the conversion from model space to clip "
"space manually."
msgstr ""
"``gl_Position`` は、頂点シェーダーで指定された頂点の最終位置を受け取ります。"
"ユーザーがクリップスペースで指定します。通常、GLSLでは、\\ ``position`` とい"
"う頂点属性を使用してモデル空間の頂点位置が渡され、モデル空間からクリップ空間"
"への変換を手動で処理します。"

msgid ""
"In Godot, ``VERTEX`` specifies the vertex position in model space at the "
"beginning of the ``vertex`` function. Godot also handles the final "
"conversion to clip space after the user-defined ``vertex`` function is run. "
"If you want to skip the conversion from model to view space, you can set the "
"``render_mode`` to ``skip_vertex_transform``. If you want to skip all "
"transforms, set ``render_mode`` to ``skip_vertex_transform`` and set the "
"``PROJECTION_MATRIX`` to ``mat4(1.0)`` in order to nullify the final "
"transform from view space to clip space."
msgstr ""
"Godotでは、\\ ``VERTEX`` は ``vertex`` 関数の先頭にあるモデル空間内の頂点の位"
"置を指定します。 Godotは、ユーザー定義の ``vertex`` 関数が実行された後、ク"
"リップスペースへの最終的な変換も処理します。モデルからビュースペースへの変換"
"をスキップする場合は、\\ ``render_mode`` を ``skip_vertex_transform`` に設定"
"できます。すべての変換をスキップする場合は、ビュースペースからクリップスペー"
"スへの最終的な変換を無効にするために、\\ ``render_mode`` を "
"``skip_vertex_transform`` に設定し、\\ ``PROJECTION_MATRIX`` を "
"``mat4(1.0)`` に設定します。"

msgid "Varyings"
msgstr "Varying(可変)"

msgid ""
"Varyings are a type of variable that can be passed from the vertex shader to "
"the fragment shader. In modern GLSL (3.0 and up), varyings are defined with "
"the ``in`` and ``out`` keywords. A variable going out of the vertex shader "
"is defined with ``out`` in the vertex shader and ``in`` inside the fragment "
"shader."
msgstr ""
"Varyingは、頂点シェーダーからフラグメントシェーダーに渡すことができる変数の一"
"種です。最新のGLSL(3.0以上)では、varyingは ``in`` および ``out`` キーワードで"
"定義されます。頂点シェーダーから出る変数は、頂点シェーダーでは ``out``\\ 、フ"
"ラグメントシェーダーでは ``in`` で定義されます。"

msgid "Main"
msgstr "メイン"

msgid ""
"In GLSL, each shader program looks like a self-contained C-style program. "
"Accordingly, the main entry point is ``main``. If you are copying a vertex "
"shader, rename ``main`` to ``vertex`` and if you are copying a fragment "
"shader, rename ``main`` to ``fragment``."
msgstr ""
"GLSLでは、各シェーダープログラムは自己完結型のCスタイルプログラムのように見え"
"ます。したがって、メインエントリポイントは ``main`` です。頂点シェーダーをコ"
"ピーする場合は、\\ ``main`` の名前を ``vertex`` に変更し、フラグメントシェー"
"ダーをコピーする場合は、\\ ``main`` の名前を ``fragment`` に変更します。"

msgid "Constants"
msgstr "定数"

#, fuzzy
msgid ""
"Global array constants are not supported in Godot 3.x. You can fake the "
"functionality by using a uniform initialized to the value, but you will not "
"benefit from the increased speed from using a constant."
msgstr ""
"現在、Godotは定数をサポートしていません。値に初期化されたユニフォームを使用し"
"て機能を偽造することはできますが、定数を使用しても速度が向上するメリットはあ"
"りません。"

msgid "Macros"
msgstr "マクロ"

msgid ""
"In keeping with its similarity to C, GLSL lets you use macros. Commonly "
"``#define`` is used to define constants or small functions. There is no "
"straightforward way to translate defines to Godot's shading language. If it "
"is a function that is defined, then replace with a function, and if it is a "
"constant, then replace with a uniform. For other macros (``#if``, "
"``#ifdef``, etc.), there is no equivalent because they run during the pre-"
"processing stage of compilation."
msgstr ""
"Cとの類似性を維持するために、GLSLではマクロを使用できます。一般的に "
"``#define`` は定数または小さな関数を定義するために使用されます。定義をGodotの"
"シェーディング言語に変換する簡単な方法はありません。定義されている関数の場合"
"は関数で置き換え、定数の場合は均一で置き換えます。他のマクロ"
"(``\"#if``\\ 、\\ ``#ifdef`` など)については、コンパイルの前処理段階で実行さ"
"れるため、同等のマクロはありません。"

msgid "Variables"
msgstr "変数"

msgid ""
"GLSL has many built-in variables that are hard-coded. These variables are "
"not uniforms, so they are not editable from the main program."
msgstr ""
"GLSLには、ハードコードされた多くの組み込み変数があります。これらの変数は均一"
"ではないため、メインプログラムから編集することはできません。"

msgid "Variable"
msgstr "変数"

msgid "Type"
msgstr "タイプ(型)"

msgid "Equivalent"
msgstr "同等の物"

msgid "Description"
msgstr "説明"

msgid "gl_FragColor"
msgstr "\\ gl_FragColor"

msgid "out vec4"
msgstr "\\ out vec4"

msgid "COLOR"
msgstr "\\ COLOR"

msgid "Output color for each pixel."
msgstr "各ピクセルの出力色。"

msgid "gl_FragCoord"
msgstr "\\ gl_FragCoord"

msgid "vec4"
msgstr "\\ vec4"

msgid "FRAGCOORD"
msgstr "\\ FRAGCOORD"

msgid "For full screen quads. For smaller quads, use UV."
msgstr "フルスクリーン矩形用。小さな矩形の場合は、UVを使用します。"

msgid "VERTEX"
msgstr "\\ VERTEX"

msgid "Position of Vertex, output from Vertex Shader."
msgstr "頂点の位置、頂点シェーダーからの出力。"

msgid "gl_PointSize"
msgstr "\\ gl_PointSize"

msgid "float"
msgstr "\\ float"

msgid "POINT_SIZE"
msgstr "\\ POINT_SIZE"

msgid "Size of Point primitive."
msgstr "ポイントプリミティブのサイズ。"

msgid "gl_PointCoord"
msgstr "\\ gl_PointCoord"

msgid "vec2"
msgstr "\\ vec2"

msgid "POINT_COORD"
msgstr "\\ POINT_COORD"

msgid "Position on point when drawing Point primitives."
msgstr "\\ ポイントプリミティブを描画するときのポイント上の位置。"

msgid "gl_FrontFacing"
msgstr "\\ gl_FrontFacing"

msgid "bool"
msgstr "\\ bool"

msgid "FRONT_FACING"
msgstr "\\ FRONT_FACING"

msgid "True if front face of primitive."
msgstr "プリミティブが表向きの場合はTrue。"

msgid "Coordinates"
msgstr "座標"

msgid ""
"``gl_FragCoord`` in GLSL and ``FRAGCOORD`` in the Godot shading language use "
"the same coordinate system. If using UV in Godot, the y-coordinate will be "
"flipped upside down."
msgstr ""
"GLSLの ``gl_FragCoord`` とGodotシェーディング言語の ``FRAGCOORD`` は同じ座標"
"系を使用します。 GodotでUVを使用している場合、y座標は上下逆になります。"

msgid "Precision"
msgstr "精度"

msgid ""
"In GLSL, you can define the precision of a given type (float or int) at the "
"top of the shader with the ``precision`` keyword. In Godot, you can set the "
"precision of individual variables as you need by placing precision "
"qualifiers ``lowp``, ``mediump``, and ``highp`` before the type when "
"defining the variable. For more information, see the :ref:`Shading Language "
"<doc_shading_language>` reference."
msgstr ""
"GLSLでは、シェーダーの上部で、\\ ``precision`` キーワードを使用して特定のタイ"
"プ(floatまたはint)の精度を定義できます。 Godotでは、変数を定義するときに型の"
"前に精度修飾子 ``lowp``\\ 、\\ ``mediump``\\ 、および ``highp``\\ を配置する"
"ことにより、必要に応じて個々の変数の精度を設定できます。詳細については、\\ :"
"ref:`Shading Language <doc_shading_language>` リファレンスを参照してくださ"
"い。"

msgid "Shadertoy"
msgstr "\\ Shadertoy"

msgid ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ is a website that makes it easy to "
"write fragment shaders and create `pure magic <https://www.shadertoy.com/"
"view/4tjGRh>`_."
msgstr ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ は、フラグメントシェーダーの記述と "
"`pure magic(純粋な魔法) <https://www.shadertoy.com/view/4tjGRh>`_ の作成を容"
"易にするWebサイトです。"

msgid ""
"Shadertoy does not give the user full control over the shader. It handles "
"all the input and uniforms and only lets the user write the fragment shader."
msgstr ""
"Shadertoyでは、ユーザーがシェーダーを完全に制御することはできません。すべての"
"入力とuniformを処理し、ユーザーにフラグメントシェーダーの書き込みのみを許可し"
"ます。"

msgid "Types"
msgstr "種類"

#, fuzzy
msgid ""
"Shadertoy uses the webgl spec, so it runs a slightly different version of "
"GLSL. However, it still has the regular types, including constants and "
"macros."
msgstr ""
"Shadertoyはwebgl仕様を使用しているため、GLSLのわずかに異なるバージョンを実行"
"します。ただし、\\ `Constants`_ やマクロを含む通常の型はまだ残っています。"

msgid "mainImage"
msgstr "mainImage(メインイメージ)"

msgid ""
"The main point of entry to a Shadertoy shader is the ``mainImage`` function. "
"``mainImage`` has two parameters, ``fragColor`` and ``fragCoord``, which "
"correspond to ``COLOR`` and ``FRAGCOORD`` in Godot, respectively. These "
"parameters are handled automatically in Godot, so you do not need to include "
"them as parameters yourself. Anything in the ``mainImage`` function should "
"be copied into the ``fragment`` function when porting to Godot."
msgstr ""
"Shadertoyシェーダーへの主要なエントリポイントは ``mainImage`` 関数です。\\ "
"``mainImage`` には2つのパラメーター ``fragColor`` と ``fragCoord`` があり、そ"
"れぞれGodotの ``COLOR`` と ``FRAGCOORD`` に対応しています。これらのパラメー"
"ターはGodotで自動的に処理されるため、自分でパラメーターとして含める必要はあり"
"ません。 Godotに移植する場合、\\ ``mainImage`` 関数内のすべてのものを "
"``fragment`` 関数にコピーする必要があります。"

msgid ""
"In order to make writing fragment shaders straightforward and easy, "
"Shadertoy handles passing a lot of helpful information from the main program "
"into the fragment shader for you. A few of these have no equivalents in "
"Godot because Godot has chosen not to make them available by default. This "
"is okay because Godot gives you the ability to make your own uniforms. For "
"variables whose equivalents are listed as \"Provide with Uniform\", users "
"are responsible for creating that uniform themselves. The description gives "
"the reader a hint about what they can pass in as a substitute."
msgstr ""
"フラグメントシェーダーを簡単かつ簡単に記述できるようにするため、Shadertoyはメ"
"インプログラムからフラグメントシェーダーに多くの有用な情報を渡します。これら"
"のいくつかは、Godotがデフォルトで使用可能にしないように選択しているため、"
"Godotには同等のものがありません。 Godotを使用すると、独自のuniformを作成でき"
"るため、これは問題ありません。同等のものが「Uniformで提供」としてリストされて"
"いる変数の場合、ユーザーは自分でユニフォームを作成する必要があります。この説"
"明は、代替として渡すことができるものについてのヒントを読者に提供します。"

msgid "fragColor"
msgstr "\\ fragColor"

msgid "fragCoord"
msgstr "\\ fragCoord"

msgid "FRAGCOORD.xy"
msgstr "\\ FRAGCOORD.xy"

msgid "iResolution"
msgstr "\\ iResolution"

msgid "vec3"
msgstr "\\ vec3"

msgid "1.0 / SCREEN_PIXEL_SIZE"
msgstr "\\ 1.0 / SCREEN_PIXEL_SIZE"

msgid "Can also pass in manually."
msgstr "手動で渡すこともできます。"

msgid "iTime"
msgstr "\\ iTime"

msgid "TIME"
msgstr "\\ TIME"

msgid "Time since shader started."
msgstr "シェーダーが開始してからの時間。"

msgid "iTimeDelta"
msgstr "\\ iTimeDelta"

msgid "Provide with Uniform"
msgstr "Uniformで提供"

msgid "Time to render previous frame."
msgstr "前のフレームをレンダリングしてからの経過時間。"

msgid "iFrame"
msgstr "\\ iFrame"

msgid "Frame number."
msgstr "フレーム番号。"

msgid "iChannelTime[4]"
msgstr "\\ iChannelTime[4]"

msgid "Time since that particular texture started."
msgstr "特定のテクスチャが開始されてからの時間。"

msgid "iMouse"
msgstr "\\ iMouse"

msgid "Mouse position in pixel coordinates."
msgstr "ピクセル座標でのマウスの位置。"

msgid "iDate"
msgstr "\\ iDate"

msgid "Current date, expressed in seconds."
msgstr "秒単位で表される現在の日付。"

msgid "iChannelResolution[4]"
msgstr "\\ iChannelResolution[4]"

msgid "1.0 / TEXTURE_PIXEL_SIZE"
msgstr "\\ 1.0 / TEXTURE_PIXEL_SIZE"

msgid "Resolution of particular texture."
msgstr "特定のテクスチャの解像度。"

msgid "iChanneli"
msgstr "\\ iChanneli"

msgid "Sampler2D"
msgstr "\\ Sampler2D"

msgid "TEXTURE"
msgstr "\\ TEXTURE"

msgid "Godot provides only one built-in; user can make more."
msgstr ""
"Godotには1つのビルトインのみが用意されていまが、ユーザーは追加を作成できま"
"す。"

msgid ""
"``fragCoord`` behaves the same as ``gl_FragCoord`` in :ref:`GLSL "
"<glsl_coordinates>` and ``FRAGCOORD`` in Godot."
msgstr ""
"``fragCoord`` は、\\ :ref:`GLSL <glsl_coordinates>` の ``gl_FragCoord`` およ"
"びGodotの ``FRAGCOORD`` と同じように動作します。"

msgid "The Book of Shaders"
msgstr "\\ The Book of Shaders"

msgid ""
"Similar to Shadertoy, `The Book of Shaders <https://thebookofshaders.com>`_ "
"provides access to a fragment shader in the web browser, with which the user "
"may interact. The user is restricted to writing fragment shader code with a "
"set list of uniforms passed in and with no ability to add additional "
"uniforms."
msgstr ""
"Shadertoyと同様に、\\ `The Book of Shaders <https://thebookofshaders.com>`_ "
"は、ユーザーが対話できるWebブラウザーのフラグメントシェーダーへのアクセスを提"
"供します。ユーザーは、渡されたuniformのセット リストを持つフラグメント シェー"
"ダーコードを記述することだけが許され、新たなuniformを追加する機能はありませ"
"ん。"

msgid ""
"For further help on porting shaders to various frameworks generally, The "
"Book of Shaders provides a `page <https://thebookofshaders.com/04>`_ on "
"running shaders in various frameworks."
msgstr ""
"シェーダーのさまざまなフレームワークへの移植に関する一般的なヘルプについて"
"は、The Book of Shadersがさまざまなフレームワークでシェーダーを実行するため"
"の `ページ <https://thebookofshaders.com/04>`_ を提供しています。"

#, fuzzy
msgid ""
"The Book of Shaders uses the webgl spec, so it runs a slightly different "
"version of GLSL. However, it still has the regular types, including "
"constants and macros."
msgstr ""
"Book of Shadersはwebgl仕様を使用しているため、GLSLのわずかに異なるバージョン"
"を実行します。ただし、\\ `Constants`_ やマクロを含む通常の型はまだあります。"

msgid ""
"The entry point for a Book of Shaders fragment shader is ``main``, just like "
"in GLSL. Everything written in a Book of Shaders ``main`` function should be "
"copied into Godot's ``fragment`` function."
msgstr ""
"Book of Shadersフラグメントシェーダーのエントリポイントは、GLSLと同様に "
"``main`` です。 Book of Shadersの ``main`` 関数に書かれたものはすべて、Godot"
"の `` fragment`` 関数にコピーする必要があります。"

msgid ""
"The Book of Shaders sticks closer to plain GLSL than Shadertoy does. It also "
"implements fewer uniforms than Shadertoy."
msgstr ""
"Book of Shadersは、Shadertoyが行うよりも、プレーンなGLSLに近くなります。ま"
"た、Shadertoyよりも少ないuniformを実装します。"

msgid "u_resolution"
msgstr "\\ u_resolution"

msgid "u_time"
msgstr "\\ u_time"

msgid "u_mouse"
msgstr "\\ u_mouse"

msgid ""
"The Book of Shaders uses the same coordinate system as :ref:`GLSL "
"<glsl_coordinates>`."
msgstr ""
"Book of Shadersは :ref:`GLSL <glsl_coordinates>` と同じ座標系を使用します。"

msgid "Translation status"
msgstr "翻訳ステータス"
