# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Your first 3D shader"
msgstr "最初のシェーダー"

#, fuzzy
msgid ""
"You have decided to start writing your own custom Spatial shader. Maybe you "
"saw a cool trick online that was done with shaders, or you have found that "
"the :ref:`SpatialMaterial <class_SpatialMaterial>` isn't quite meeting your "
"needs. Either way, you have decided to write your own and now you need to "
"figure out where to start."
msgstr ""
"あなたは独自のカスタムSpatialシェーダーの作成を開始することにしました。たぶ"
"ん、シェーダーを使って行われたクールなトリックをオンラインで見たか、または :"
"ref:`SpatialMaterial <class_SpatialMaterial>` が自分のニーズを十分に満たして"
"いないことに気付いたのでしょう。いずれにせよ、あなたはあなた自身のシェーダー"
"を書くことに決めました、そして、今、あなたはどこから始めるべきかを理解する必"
"要があります。"

msgid ""
"This tutorial will explain how to write a Spatial shader and will cover more "
"topics than the :ref:`CanvasItem <doc_your_first_canvasitem_shader>` "
"tutorial."
msgstr ""
"このチュートリアルでは、Spatialシェーダーの作成方法を説明し、\\ :ref:"
"`CanvasItem <doc_your_first_canvasitem_shader>` チュートリアルよりも多くのト"
"ピックを扱います。"

msgid ""
"Spatial shaders have more built-in functionality than CanvasItem shaders. "
"The expectation with spatial shaders is that Godot has already provided the "
"functionality for common use cases and all the user needs to do in the "
"shader is set the proper parameters. This is especially true for a PBR "
"(physically based rendering) workflow."
msgstr ""
"Spatialシェーダーには、CanvasItemシェーダーよりも多くの機能が組み込まれていま"
"す。Spatialシェーダーで期待されるのは、Godotが一般的なユースケースの機能をす"
"でに提供しており、シェーダーでユーザーが行う必要があるのは、適切なパラメー"
"ターを設定することだけです。これは、特にPBR(物理ベースのレンダリング)ワークフ"
"ローに当てはまります。"

msgid ""
"This is a two-part tutorial. In this first part we are going to go through "
"how to make a simple terrain using vertex displacement from a heightmap in "
"the vertex function. In the :ref:`second part "
"<doc_your_second_spatial_shader>` we are going to take the concepts from "
"this tutorial and walk through how to set up custom materials in a fragment "
"shader by writing an ocean water shader."
msgstr ""
"これは2部構成のチュートリアルです。この最初のパートでは、頂点関数のハイトマッ"
"プからの頂点変位を使用して、簡単な地形を作成する方法を説明します。\\ :ref:`第"
"2部 <doc_your_second_spatial_shader>` では、このチュートリアルの概念を取り入"
"れ、海水シェーダーを作成してフラグメントシェーダーでカスタムマテリアルを設定"
"する方法を説明します。"

msgid ""
"This tutorial assumes some basic shader knowledge such as types (``vec2``, "
"``float``, ``sampler2D``), and functions. If you are uncomfortable with "
"these concepts it is best to get a gentle introduction from `The Book of "
"Shaders <https://thebookofshaders.com>`_ before completing this tutorial."
msgstr ""
"このチュートリアルでは、タイプ(``vec2``\\ 、\\ ``float``\\ 、\\ "
"``sampler2D``)、関数などのシェーダーの基本的な知識を前提としています。これら"
"の概念に不安がある場合は、このチュートリアルを完了する前に、\\ `The Book of "
"Shaders <https://thebookofshaders.com>`_のやさしい紹介を読むことをお勧めしま"
"す。"

msgid "Where to assign my material"
msgstr "マテリアルを割り当てる場所"

msgid ""
"In 3D, objects are drawn using :ref:`Meshes <class_Mesh>`. Meshes are a "
"resource type that store geometry (the shape of your object) and materials "
"(the color and how the object reacts to light) in units called \"surfaces\". "
"A Mesh can have multiple surfaces, or just one. Typically, you would import "
"a mesh from another program (e.g. Blender). But Godot also has a few :ref:"
"`PrimitiveMeshes <class_primitivemesh>` that allow you to add basic geometry "
"to a scene without importing Meshes."
msgstr ""
"3Dでは、オブジェクトは :ref:`メッシュ <class_Mesh>` を使用して描画されます。"
"メッシュは、「サーフェス」と呼ばれる単位でジオメトリ(オブジェクトの形状)とマ"
"テリアル(色とオブジェクトが光に反応する方法)を格納するリソースタイプです。"
"メッシュには、複数のサーフェス、または1つのサーフェスを含めることができます。"
"通常、別のプログラム(Blenderなど)からメッシュをインポートします。しかし、"
"Godotには、メッシュをインポートせずにシーンに基本的なジオメトリを追加できる :"
"ref:`PrimitiveMeshes <class_primitivemesh>` もいくつかあります。"

msgid ""
"There are multiple node types that you can use to draw a mesh. The main one "
"is :ref:`MeshInstance <class_meshinstance>`, but you can also use :ref:"
"`Particles <class_particles>`, :ref:`MultiMeshes <class_MultiMesh>` (with a :"
"ref:`MultiMeshInstance <class_multimeshinstance>`), or others."
msgstr ""
"メッシュの描画に使用できるノードタイプは複数あります。主なものは :ref:"
"`MeshInstance <class_meshinstance>` ですが、\\ :ref:`Particles "
"<class_particles>`\\ 、\\ :ref:`MultiMeshes <class_MultiMesh>`(:ref:"
"`MultiMeshInstance <class_multimeshinstance>` を使用することもできます)、また"
"はその他です。"

msgid ""
"Typically, a material is associated with a given surface in a mesh, but some "
"nodes, like MeshInstance, allow you to override the material for a specific "
"surface, or for all surfaces."
msgstr ""
"通常、マテリアルはメッシュ内の特定のサーフェスに関連付けられていますが、"
"MeshInstanceなどの一部のノードでは、特定のサーフェスまたはすべてのサーフェス"
"のマテリアルをオーバーライドできます。"

msgid ""
"If you set a material on the surface or mesh itself, then all MeshInstances "
"that share that mesh will share that material. However, if you want to reuse "
"the same mesh across multiple mesh instances, but have different materials "
"for each instance then you should set the material on the Meshinstance."
msgstr ""
"サーフェスまたはメッシュ自体にマテリアルを設定すると、そのメッシュを共有する"
"すべてのMeshInstanceはそのマテリアルを共有します。ただし、複数のメッシュイン"
"スタンスで同じメッシュを再利用したいが、インスタンスごとに異なるマテリアルを"
"使用する場合は、Meshinstanceでマテリアルを設定する必要があります。"

msgid ""
"For this tutorial we will set our material on the mesh itself rather than "
"taking advantage of the MeshInstance's ability to override materials."
msgstr ""
"このチュートリアルでは、MeshInstanceのマテリアルをオーバーライドする機能を利"
"用するのではなく、メッシュ自体にマテリアルを設定します。"

msgid "Setting up"
msgstr "セットアップ"

msgid "Add a new :ref:`MeshInstance <class_meshinstance>` node to your scene."
msgstr ""
"新しい :ref:`MeshInstance <class_meshinstance>` ノードをシーンに追加します。"

msgid ""
"In the inspector tab beside \"Mesh\" click \"[empty]\" and select \"New "
"PlaneMesh\". Then click on the image of a plane that appears."
msgstr ""
"[インスペクタ]タブの[Mesh]の横で[空]をクリックし、[新規 PlaneMesh]を選択しま"
"す。次に、表示される平面の画像をクリックします。"

msgid "This adds a :ref:`PlaneMesh <class_planemesh>` to our scene."
msgstr ""
"これにより、シーンに :ref:`PlaneMesh <class_planemesh>` が追加されます。"

msgid ""
"Then, in the viewport, click in the upper left corner on the button that "
"says \"Perspective\". A menu will appear. In the middle of the menu are "
"options for how to display the scene. Select 'Display Wireframe'."
msgstr ""
"次に、ビューポートで、「透視投影」というボタンの左上隅をクリックします。メ"
"ニューが表示されます。メニューの中央には、シーンの表示方法のオプションがあり"
"ます。 「ワイヤフレーム表示」を選択します。"

msgid "This will allow you to see the triangles making up the plane."
msgstr "これにより、平面を構成する三角形を見ることができます。"

msgid "Now set ``Subdivide Width`` and ``Subdivide Depth`` to ``32``."
msgstr ""
"次に、\\ ``Subdivide Width`` と ``Subdivide Depth`` を ``32`` に設定します。"

msgid ""
"You can see that there are now many more triangles in the :ref:"
"`Mesh<class_MeshInstance>`. This will give us more vertices to work with and "
"thus allow us to add more detail."
msgstr ""
":ref:`Mesh <class_MeshInstance>` には、さらに多くの三角形があることがわかりま"
"す。これにより、作業する頂点が増え、細部を追加できるようになります。"

msgid ""
":ref:`PrimitiveMeshes <class_primitivemesh>`, like PlaneMesh, only have one"
msgstr ""

#, fuzzy
msgid ""
"surface, so instead of an array of materials there is only one. Click beside "
"\"Material\" where it says \"[empty]\" and select \"New ShaderMaterial\". "
"Then click the sphere that appears."
msgstr ""
":ref:`PrimitiveMeshe <class_primitivemesh>` は、PlaneMeshのように、1つのサー"
"フェスしか持たないため、マテリアルは配列の代わりに1つしかありません。[空]と表"
"示されている[Material]の横をクリックし、[新規 ShaderMaterial]を選択します。次"
"に、表示される球をクリックします。"

msgid ""
"Now click beside \"Shader\" where it says \"[empty]\" and select \"New "
"Shader\"."
msgstr ""
"[Shader]横の[空]と表示されている場所をクリックし、[新規 Shader]を選択します。"

msgid ""
"The shader editor should now pop up and you are ready to begin writing your "
"first Spatial shader!"
msgstr ""
"作成された\"Shader\"をクリックするとシェーダーエディタが表示され、最初の"
"Spatialシェーダーの作成を開始する準備ができました！"

msgid "Shader magic"
msgstr "シェーダーマジック"

msgid ""
"Notice how there is already error? This is because the shader editor reloads "
"shaders on the fly. The first thing Godot shaders need is a declaration of "
"what type of shader they are. We set the variable ``shader_type`` to "
"``spatial`` because this is a spatial shader."
msgstr ""
"すでにエラーが発生していることに注意してください。これは、シェーダーエディタ"
"がその場でシェーダーをリロードするためです。 Godotシェーダーで最初に必要なの"
"は、どのタイプのシェーダーかを宣言することです。これは空間シェーダーなので、"
"変数 ``shader_type`` を ``spatial`` に設定します。"

msgid ""
"Next we will define the ``vertex()`` function. The ``vertex()`` function "
"determines where the vertices of your :ref:`Mesh<class_MeshInstance>` appear "
"in the final scene. We will be using it to offset the height of each vertex "
"and make our flat plane appear like a little terrain."
msgstr ""
"次に ``vertex()`` 関数を定義します。\\ ``vertex()`` 関数は :ref:`Mesh "
"<class_MeshInstance>` の頂点が最終シーンのどこに現れるかを決定します。これを"
"使用して各頂点の高さをオフセットし、平らな平面を小さな地形のように見せます。"

msgid "We define the vertex shader like so:"
msgstr "頂点シェーダーを次のように定義します:"

msgid ""
"With nothing in the ``vertex()`` function, Godot will use its default vertex "
"shader. We can easily start to make changes by adding a single line:"
msgstr ""
"``vertex()`` 関数に何もない場合、Godotはデフォルトの頂点シェーダーを使用しま"
"す。 1行追加するだけで簡単に変更を開始できます。"

msgid "Adding this line, you should get an image like the one below."
msgstr "この行を追加すると、次のような画像が表示されます。"

msgid ""
"Okay, let's unpack this. The ``y`` value of the ``VERTEX`` is being "
"increased. And we are passing the ``x`` and ``z`` components of the "
"``VERTEX`` as arguments to ``cos`` and ``sin``; that gives us a wave-like "
"appearance across the ``x`` and ``z`` axes."
msgstr ""
"さて、これを紐解きましょう。 \\ ``VERTEX`` の ``y`` 値は増加しています。そし"
"て、\\ ``cos`` と ``sin`` への引数として、\\ ``VERTEX`` の ``x`` と ``z`` コ"
"ンポーネントを渡します。これにより、\\ ``x`` 軸と ``z`` 軸に波のような外観が"
"与えられます。"

msgid ""
"What we want to achieve is the look of little hills; after all. ``cos`` and "
"``sin`` already look kind of like hills. We do so by scaling the inputs to "
"the ``cos`` and ``sin`` functions."
msgstr ""
"とりあえず、私たちが達成したいのは、小さな丘の様な外観です。\\ ``cos`` と "
"``sin`` はすでに丘のように見えます。そのためには、\\ ``cos`` および ``sin`` "
"関数の入力にスケーリングを施します。"

msgid ""
"This looks better, but it is still too spiky and repetitive, let's make it a "
"little more interesting."
msgstr ""
"これは良い感じですが、それでもまだとがりすぎて反復的です。もう少し面白くしま"
"しょう。"

msgid "Noise heightmap"
msgstr "ノイズハイトマップ"

msgid ""
"Noise is a very popular tool for faking the look of terrain. Think of it as "
"similar to the cosine function where you have repeating hills except, with "
"noise, each hill has a different height."
msgstr ""
"ノイズは、地形の外観を模倣するための非常に人気のあるツールです。これは、各丘"
"の高さが異なることを除いて、丘が繰り返されるコサイン関数に似ていると考えてく"
"ださい。"

msgid ""
"Godot provides the :ref:`NoiseTexture <class_noisetexture>` resource for "
"generating a noise texture that can be accessed from a shader."
msgstr ""
"Godotは、シェーダーからアクセスできるノイズテクスチャを生成するための :ref:"
"`NoiseTexture <class_noisetexture>` リソースを提供します。"

msgid ""
"To access a texture in a shader add the following code near the top of your "
"shader, outside the ``vertex()`` function."
msgstr ""
"シェーダーのテクスチャにアクセスするには、シェーダーの上部近くの "
"``vertex()`` 関数の外側に次のコードを追加します。"

#, fuzzy
msgid ""
"This will allow you to send a noise texture to the shader. Now look in the "
"inspector under your material. You should see a section called \"Shader "
"Params\". If you open it up, you'll see a section called \"noise\"."
msgstr ""
"これにより、ノイズテクスチャをシェーダーに送信できます。次に、マテリアルの下"
"のインスペクタを調べます。 [Shader Params]というセクションが表示されるはずで"
"す。開くと、[Noise]というセクションが表示されます。"

msgid ""
"Click beside it where it says \"[empty]\" and select \"New NoiseTexture\". "
"Then in your NoiseTexture click beside where it says \"Noise\" and select "
"\"New OpenSimplexNoise\"."
msgstr ""
"その横にある[空]をクリックして、[新規 NoiseTexture]を選択します。次に、"
"NoiseTextureで[Noise]と表示されている場所の横をクリックし、[新規 "
"OpenSimplexNoise]を選択します。"

#, fuzzy
msgid ""
":ref:`OpenSimplexNoise <class_opensimplexnoise>` is used by the NoiseTexture "
"to"
msgstr ""
":ref:`OpenSimplexNoise <class_opensimplexnoise>` は、高さマップを生成するため"
"にNoiseTextureによって使用されます。"

#, fuzzy
msgid "generate a heightmap."
msgstr "ノイズハイトマップ"

msgid "Once you set it up and should look like this."
msgstr "設定すると、次のようになります。"

#, fuzzy
msgid ""
"Now, access the noise texture using the ``texture()`` function. "
"``texture()`` takes a texture as the first argument and a ``vec2`` for the "
"position on the texture as the second argument. We use the ``x`` and ``z`` "
"channels of ``VERTEX`` to determine where on the texture to look up. Note "
"that the PlaneMesh coordinates are within the [-1,1] range (for a size of "
"2), while the texture coordinates are within [0,1], so to normalize we "
"divide by the size of the PlaneMesh 2.0 and add 0.5. ``texture()`` returns a "
"``vec4`` of the ``r, g, b, a`` channels at the position. Since the noise "
"texture is grayscale, all of the values are the same, so we can use any one "
"of the channels as the height. In this case we'll use the ``r``, or ``x`` "
"channel."
msgstr ""
"次に、 ``texture()`` 関数を使用してノイズテクスチャにアクセスします。\\ "
"``texture()`` は最初の引数としてテクスチャーを取り、2番目の引数としてテクス"
"チャー上の位置の ``vec2`` を取ります。 VERTEXの ``x`` および ``z`` チャンネル"
"を使用して、テクスチャ上のどこを検索するかを決定します。\\ ``texture()`` は、"
"その位置にある `` r, g, b, a`` チャンネルの ``vec4`` を返します。ノイズテクス"
"チャはグレースケールであるため、すべての値が同じなので、チャネルのいずれか1つ"
"を高さとして使用できます。この場合、\\ ``r`` または ``x`` チャンネルを使用し"
"ます。"

msgid ""
"Note: ``xyzw`` is the same as ``rgba`` in GLSL, so instead of ``texture()."
"x`` above, we could use ``texture().r``. See the `OpenGL documentation "
"<https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vectors>`_ for more "
"details."
msgstr ""
"注: ``xyzw`` はGLSLの ``rgba`` と同じなので、上記の ``texture().x`` の代わり"
"に ``texture().r`` を使用できます。詳細については、 `OpenGLのドキュメント "
"<https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vectors>`_ を参照してく"
"ださい。"

msgid "Using this code you can see the texture creates random looking hills."
msgstr ""
"このコードを使用すると、テクスチャがランダムに見える丘を作成することがわかり"
"ます。"

#, fuzzy
msgid ""
"Right now it is too spiky, we want to soften the hills a bit. To do that, we "
"will use a uniform. You already used a uniform above to pass in the noise "
"texture, now let's learn how they work."
msgstr ""
"今はとがっていますが、丘を少し柔らかくしたいです。そのためにユニフォームを使"
"用します。既に上記のユニフォームを使用してノイズテクスチャを渡しました。次"
"に、それらがどのように機能するかを学びましょう。"

msgid "Uniforms"
msgstr "Uniform(ユニフォーム)"

msgid ""
"Uniform variables allow you to pass data from the game into the shader. They "
"are very useful for controlling shader effects. Uniforms can be almost any "
"datatype that can be used in the shader. To use a uniform, you declare it in "
"your :ref:`Shader<class_Shader>` using the keyword ``uniform``."
msgstr ""
"Uniform変数を使用すると、ゲームからシェーダーにデータを渡すことができます。"
"シェーダーの効果を制御するのに非常に便利です。Uniform は、シェーダーで使用で"
"きるほぼすべてのデータ型です。Uniformを使用するには、キーワード ``uniform`` "
"を使用して :ref:`Shader <class_Shader>` で宣言します。"

msgid "Let's make a uniform that changes the height of the terrain."
msgstr "地形の高さを変えるユニフォームを作りましょう。"

msgid ""
"Godot lets you initialize a uniform with a value; here, ``height_scale`` is "
"set to ``0.5``. You can set uniforms from GDScript by calling the function "
"``set_shader_param()`` on the material corresponding to the shader. The "
"value passed from GDScript takes precedence over the value used to "
"initialize it in the shader."
msgstr ""
"Godotでは、Uniformを値で初期化できます。ここでは、\\ ``height_scale`` は "
"``0.5`` に設定されています。シェーダーに対応するマテリアルで関数 "
"``set_shader_param()`` を呼び出すことで、GDScriptからUniformを設定できます。 "
"GDScriptから渡される値は、シェーダーで初期化するために使用される値よりも優先"
"されます。"

#, fuzzy
msgid ""
"Changing uniforms in Spatial-based nodes is different from CanvasItem-based "
"nodes. Here, we set the material inside the PlaneMesh resource. In other "
"mesh resources you may need to first access the material by calling "
"``surface_get_material()``. While in the MeshInstance you would access the "
"material using ``get_surface_material()`` or ``material_override``."
msgstr ""
"SpatialノードからUniformを変更することは、CanvasItemノードとは異なります。こ"
"こでは、PlaneMeshリソース内にマテリアルを設定します。他のメッシュリソースで"
"は、最初に ``surface_get_material()`` を呼び出してマテリアルにアクセスする必"
"要があります。 MeshInstanceで ``get_surface_material()`` または "
"``material_override`` を使用してマテリアルにアクセスします。"

msgid ""
"Remember that the string passed into ``set_shader_param()`` must match the "
"name of the uniform variable in the :ref:`Shader<class_Shader>`. You can use "
"the uniform variable anywhere inside your :ref:`Shader<class_Shader>`. Here, "
"we will use it to set the height value instead of arbitrarily multiplying by "
"``0.5``."
msgstr ""
"``set_shader_param()`` に渡される文字列は :ref:`Shader <class_Shader>` の"
"Uniform変数の名前と一致しなければならないことに注意してください。\\ :ref:"
"`Shader <class_Shader>` 内のどこでもUniform変数を使用できます。ここでは、"
"``0.5`` を任意に乗算する代わりに、これを使用して高さの値を設定します。"

msgid "Now it looks  much better."
msgstr "今ではずっと良く見えます。"

msgid ""
"Using uniforms, we can even change the value every frame to animate the "
"height of the terrain. Combined with :ref:`Tweens <class_Tween>`, this can "
"be especially useful for simple animations."
msgstr ""
"Uniformを使用すると、フレームごとに値を変更して、地形の高さをアニメーション化"
"することもできます。\\ :ref:`Tween <class_Tween>` と組み合わせると、単純なア"
"ニメーションに特に役立ちます。"

msgid "Interacting with light"
msgstr "ライトとの相互作用"

msgid ""
"First, turn wireframe off. To do so, click in the upper-left of the Viewport "
"again, where it says \"Perspective\", and select \"Display Normal\"."
msgstr ""
"まず、ワイヤーフレームをオフにします。これを行うには、ビューポートの左上にあ"
"る[透視投影]と表示された場所をもう一度クリックし、[通常表示]を選択します。"

msgid ""
"Note how the mesh color goes flat. This is because the lighting on it is "
"flat. Let's add a light!"
msgstr ""
"メッシュの色が平坦になることに注意してください。これは、照明が平坦だからで"
"す。ライトを追加しましょう！"

msgid "First, we will add an :ref:`OmniLight<class_OmniLight>` to the scene."
msgstr ""
"最初に、シーンに :ref:`OmniLight <class_OmniLight>` を追加します。(訳注: 追加"
"後に少し上に持ち上げると説明画像と同じようになります)。"

msgid ""
"You can see the light affecting the terrain, but it looks odd. The problem "
"is the light is affecting the terrain as if it were a flat plane. This is "
"because the light shader uses the normals from the :ref:`Mesh <class_mesh>` "
"to calculate light."
msgstr ""
"ライトが地形に与える影響を見ることができますが、奇妙な見た目です。問題は、ラ"
"イトが平面であるかのように地形に影響していることです。これは、ライトシェー"
"ダーが :ref:`Mesh <class_mesh>` の法線を使用してライトを計算するためです。"

msgid ""
"The normals are stored in the Mesh, but we are changing the shape of the "
"Mesh in the shader, so the normals are no longer correct. To fix this, we "
"can recalculate the normals in the shader or use a normal texture that "
"corresponds to our noise. Godot makes both easy for us."
msgstr ""
"法線はメッシュに保存されますが、シェーダーでメッシュの形状を変更しているた"
"め、法線は正しくありません。これを修正するには、シェーダーで法線を再計算する"
"か、ノイズに対応する法線テクスチャを使用します。 Godotは両方を簡単におこなえ"
"ます。"

msgid ""
"You can calculate the new normal manually in the vertex function and then "
"just set ``NORMAL``. With ``NORMAL`` set, Godot will do all the difficult "
"lighting calculations for us. We will cover this method in the next part of "
"this tutorial, for now we will read normals from a texture."
msgstr ""
"頂点関数で新しい法線を手動で計算し、\\ ``NORMAL`` に設定することができま"
"す。\\ ``NORMAL`` に設定すると、Godotは面倒な照明計算をすべて行います。この方"
"法については、このチュートリアルの次の部分で説明しますが、今はテクスチャから"
"法線を読み取ります。"

msgid ""
"Instead we will rely on the NoiseTexture again to calculate normals for us. "
"We do that by passing in a second noise texture."
msgstr ""
"その代わりに、再びNoiseTextureを利用して法線を計算します。これを行うために、2"
"番目のノイズテクスチャで値を渡します。"

#, fuzzy
msgid ""
"Set this second uniform texture to another NoiseTexture with another "
"OpenSimplexNoise. But this time, check off \"As Normalmap\"."
msgstr ""
"別のOpenSimplexNoiseを使用して、この2番目のuniformテクスチャを別の"
"NoiseTextureに設定します。ただし、今回は[As Normalmap]をチェックしてくださ"
"い。"

msgid ""
"Now, because this is a normalmap and not a per-vertex normal, we are going "
"to assign it in the ``fragment()`` function. The ``fragment()`` function "
"will be explained in more detail in the next part of this tutorial."
msgstr ""
"さて、これは頂点ごとの法線ではなく法線マップなので、\\ ``fragment()`` 関数で"
"割り当てます。\\ ``fragment()`` 関数については、このチュートリアルの次のパー"
"トで詳しく説明します。"

msgid ""
"When we have normals that correspond to a specific vertex we set ``NORMAL``, "
"but if you have a normalmap that comes from a texture, set the normal using "
"``NORMALMAP``. This way Godot will handle the wrapping the texture around "
"the mesh automatically."
msgstr ""
"特定の頂点に対応する法線がある場合、\\ ``NORMAL`` を設定しますが、テクスチャ"
"からの法線マップがある場合は、\\ ``NORMALMAP`` を使用して法線を設定します。こ"
"の方法で、Godotはメッシュの周りのテクスチャのラッピングを自動的に処理します。"

msgid ""
"Lastly, in order to ensure that we are reading from the same places on the "
"noise texture and the normalmap texture, we are going to pass the ``VERTEX."
"xz`` position from the ``vertex()`` function to the ``fragment()`` function. "
"We do that with varyings."
msgstr ""
"最後に、ノイズテクスチャと法線マップテクスチャの同じ場所から確実に読み込むた"
"めに、\\ ``vertex()`` 関数から ``fragment()`` 関数に ``VERTEX.xz``の位置を渡"
"します。varyingを使ってそれを行います。"

#, fuzzy
msgid ""
"Above the ``vertex()`` define a ``vec2`` called ``tex_position``. And inside "
"the ``vertex()`` function assign ``VERTEX.xz`` to ``tex_position``."
msgstr ""
"``vertex()`` の上に ``vertex_position`` と呼ばれる ``vec2`` を定義します。そ"
"して、\\ ``vertex()`` 関数内で ``VERTEX.xz`` を ``vertex_position`` に割り当"
"てます。"

#, fuzzy
msgid ""
"And now we can access ``tex_position`` from the ``fragment()`` function."
msgstr ""
"そして、\\ ``fragment()`` 関数から ``vertex_position`` にアクセスできるように"
"なりました。"

msgid ""
"With the normals in place the light now reacts to the height of the mesh "
"dynamically."
msgstr "法線を設定すると、ライトはメッシュの高さに動的に反応します。"

msgid ""
"We can even drag the light around and the lighting will update automatically."
msgstr "ライトをドラッグすることもでき、照明の状態が自動的に更新されます。"

msgid ""
"Here is the full code for this tutorial. You can see it is not very long as "
"Godot handles most of the difficult stuff for you."
msgstr ""
"このチュートリアルの完全なコードは次のとおりです。 Godotが面倒な部分のほとん"
"どを処理するので、それほど長くないことがわかります。"

msgid ""
"That is everything for this part. Hopefully, you now understand the basics "
"of vertex shaders in Godot. In the next part of this tutorial we will write "
"a fragment function to accompany this vertex function and we will cover a "
"more advanced technique to turn this terrain into an ocean of moving waves."
msgstr ""
"これがこの部分のすべてです。 Godotの頂点シェーダーの基本を理解できたと思いま"
"す。このチュートリアルの次の部分では、この頂点関数に付随するフラグメント関数"
"を作成し、この地形を動く波の海に変えるためのより高度なテクニックをカバーしま"
"す。"

msgid "Translation status"
msgstr "翻訳ステータス"
