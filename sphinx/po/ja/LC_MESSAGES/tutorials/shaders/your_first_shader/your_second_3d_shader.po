# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Your second 3D shader"
msgstr "最初のシェーダー"

msgid ""
"From a high-level, what Godot does is give the user a bunch of parameters "
"that can be optionally set (``AO``, ``SSS_Strength``, ``RIM``, etc.). These "
"parameters correspond to different complex effects (Ambient Occlusion, "
"SubSurface Scattering, Rim Lighting, etc.). When not written to, the code is "
"thrown out before it is compiled and so the shader does not incur the cost "
"of the extra feature. This makes it easy for users to have complex PBR-"
"correct shading, without writing complex shaders. Of course, Godot also "
"allows you to ignore all these parameters and write a fully customized "
"shader."
msgstr ""
"高いレベルから、Godotが行うことは、オプションで設定できる一連のパラメーターを"
"ユーザーに提供することです(``AO``\\ 、\\ ``SSS_Strength``\\ 、\\ ``RIM`` な"
"ど)。これらのパラメーターは、さまざまな複雑な効果(アンビエントオクルージョ"
"ン、サブサーフェススキャタリング、リムライティングなど)に対応しています。書き"
"込まれていない場合、コードはコンパイルされる前に破棄されるため、シェーダーは"
"追加機能のコストを負担しません。これにより、ユーザーは複雑なシェーダーを作成"
"せずに、複雑なPBR補正シェーディングを簡単に作成できます。もちろん、Godotでは"
"これらのパラメーターをすべて無視して、完全にカスタマイズされたシェーダーを作"
"成することもできます。"

msgid ""
"For a full list of these parameters see the :ref:`spatial shader "
"<doc_spatial_shader>` reference doc."
msgstr ""
"これらのパラメーターの完全なリストについては、\\ :ref:`spatial shader "
"<doc_spatial_shader>` リファレンスドキュメントを参照してください。"

msgid ""
"A difference between the vertex function and a fragment function is that the "
"vertex function runs per vertex and sets properties such as ``VERTEX`` "
"(position) and ``NORMAL``, while the fragment shader runs per pixel and, "
"most importantly, sets the ``ALBEDO`` color of the :ref:"
"`Mesh<class_MeshInstance>`."
msgstr ""
"頂点関数とフラグメント関数の違いは、頂点関数は頂点ごとに実行され、\\ "
"``VERTEX`` (位置)や ``NORMAL`` などのプロパティを設定しますが、フラグメント"
"シェーダーはピクセルごとに実行され、最も重要なことは、\\ :ref:`Mesh "
"<class_MeshInstance>` の ``ALBEDO`` 色を設定します。"

msgid "Your first spatial fragment function"
msgstr "最初のspatialフラグメント関数"

msgid ""
"As mentioned in the previous part of this tutorial. The standard use of the "
"fragment function in Godot is to set up different material properties and "
"let Godot handle the rest. In order to provide even more flexibility, Godot "
"also provides things called render modes. Render modes are set at the top of "
"the shader, directly below ``shader_type``, and they specify what sort of "
"functionality you want the built-in aspects of the shader to have."
msgstr ""
"このチュートリアルの前の部分で述べたように。 Godotのフラグメント関数の標準的"
"な使用法は、さまざまなマテリアルプロパティを設定し、Godotに残りを処理させるこ"
"とです。さらに柔軟性を提供するために、Godotはレンダリングモードと呼ばれるもの"
"も提供します。レンダリングモードは、シェーダーの上部、\\ ``shader_type`` のす"
"ぐ下に設定され、シェーダーのビルトイン要素にどのような機能を持たせるかを指定"
"します。"

msgid ""
"For example, if you do not want to have lights affect an object, set the "
"render mode to ``unshaded``:"
msgstr ""
"たとえば、ライトをオブジェクトに影響させたくない場合は、レンダリングモードを "
"``unshaded`` に設定します:"

msgid ""
"You can also stack multiple render modes together. For example, if you want "
"to use toon shading instead of more-realistic PBR shading, set the diffuse "
"mode and specular mode to toon:"
msgstr ""
"複数のレンダリングモードをスタックすることもできます。たとえば、よりリアルな"
"PBRシェーディングの代わりにトゥーンシェーディングを使用する場合は、拡散モード"
"と鏡面反射モードをトゥーンに設定します:"

msgid ""
"This model of built-in functionality allows you to write complex custom "
"shaders by changing only a few parameters."
msgstr ""
"ビルトイン機能のこのモデルを使用すると、いくつかのパラメーターを変更するだけ"
"で複雑なカスタムシェーダーを作成できます。"

msgid ""
"For a full list of render modes see the :ref:`Spatial shader reference "
"<doc_spatial_shader>`."
msgstr ""
"レンダリングモードの完全なリストについては、\\ :ref:`Spatialシェーダーリファ"
"レンス <doc_spatial_shader>` を参照してください。"

msgid ""
"In this part of the tutorial, we will walk through how to take the bumpy "
"terrain from the previous part and turn it into an ocean."
msgstr ""
"チュートリアルのこの部分では、前の部分からでこぼこの地形を取り、海に変える方"
"法を説明します。"

msgid ""
"First let's set the color of the water. We do that by setting ``ALBEDO``."
msgstr ""
"まず、水の色を設定しましょう。これを行うには、\\ ``ALBEDO``を設定します。"

msgid "``ALBEDO`` is a ``vec3`` that contains the color of the object."
msgstr "``ALBEDO`` はオブジェクトの色を含む ``vec3`` です。"

msgid "Let's set it to a nice shade of blue."
msgstr "青の素敵な色合いに設定してみましょう。"

msgid ""
"We set it to a very dark shade of blue because most of the blueness of the "
"water will come from reflections from the sky."
msgstr ""
"水の青さのほとんどは空からの反射から来るため、非常に暗い青に設定しました。"

msgid ""
"The PBR model that Godot uses relies on two main parameters: ``METALLIC`` "
"and ``ROUGHNESS``."
msgstr ""
"Godotが使用するPBRモデルは、\\ ``METALLIC`` と ``ROUGHNESS`` の2つの主要なパ"
"ラメーターに依存しています。"

msgid ""
"``ROUGHNESS`` specifies how smooth/rough the surface of a material is. A low "
"``ROUGHNESS`` will make a material appear like a shiny plastic, while a high "
"roughness makes the material appear more solid in color."
msgstr ""
"``ROUGHNESS``は、材料の表面の滑らかさ/粗さを指定します。\\ ``ROUGHNESS`` が低"
"いと、素材は光沢のあるプラスチックのように見えますが、粗さが大きいと、素材の"
"色はより均一になります。"

msgid ""
"``METALLIC`` specifies how much like a metal the object is. It is better set "
"close to ``0`` or ``1``. Think of ``METALLIC`` as changing the balance "
"between the reflection and the ``ALBEDO`` color. A high ``METALLIC`` almost "
"ignores ``ALBEDO`` altogether, and looks like a mirror of the sky. While a "
"low ``METALLIC`` has a more equal representation of sky color and ``ALBEDO`` "
"color."
msgstr ""
"``METALLIC`` は、オブジェクトが金属にどれだけ似ているかを指定します。\\ "
"``0`` または ``1`` の近くに設定することをお勧めします。\\ ``METALLIC`` は、反"
"射と ``ALBEDO`` カラーのバランスを変えるものと考えてください。高い "
"``METALLIC`` は ``ALBEDO`` をほとんど無視し、空を映す鏡のように見えます。低"
"い ``METALLIC`` では、空の色と `` ALBEDO`` の色がより均等に表現されます。"

msgid ""
"``ROUGHNESS`` increases from ``0`` to ``1`` from left to right while "
"``METALLIC`` increase from ``0`` to ``1`` from top to bottom."
msgstr ""
"``ROUGHNESS`` は左から右に ``0`` から ``1`` に増加し、\\ ``METALLIC`` は上か"
"ら下に ``0`` から ``1`` に増加します。"

msgid ""
"``METALLIC`` should be close to ``0`` or ``1`` for proper PBR shading. Only "
"set it between them for blending between materials."
msgstr ""
"適切なPBRシェーディングを行うには、\\ ``METALLIC`` を ``0`` または ``1`` に近"
"づける必要があります。それらの間でのみ設定して、マテリアル間でブレンドしま"
"す。"

msgid ""
"Water is not a metal, so we will set its ``METALLIC`` property to ``0.0``. "
"Water is also highly reflective, so we will set its ``ROUGHNESS`` property "
"to be quite low as well."
msgstr ""
"水は金属ではないため、\\ ``METALLIC``プロパティを ``0.0`` に設定します。ま"
"た、水は反射率が高いため、\\ ``ROUGHNESS`` プロパティも非常に低く設定します。"

msgid ""
"Now we have a smooth plastic looking surface. It is time to think about some "
"particular properties of water that we want to emulate. There are two main "
"ones that will take this from a weird plastic surface to nice stylized "
"water. The first is specular reflections. Specular reflections are those "
"bright spots you see from where the sun reflects directly into your eye. The "
"second is fresnel reflectance. Fresnel reflectance is the property of "
"objects to become more reflective at shallow angles. It is the reason why "
"you can see into water below you, but farther away it reflects the sky."
msgstr ""
"表面が滑らかなプラスチックになりました。エミュレートしたい水の特定の特性につ"
"いて考える時が来ました。これを奇妙なプラスチックの表面から素敵な定型化された"
"水に変える主なものが2つあります。 1つは鏡面反射です。鏡面反射とは、太陽が目に"
"直接反射する場所から見える明るいスポットです。 2つ目はフレネル反射です。フレ"
"ネル反射率は、オブジェクトが浅い角度でより反射する特性です。それはあなたがあ"
"なたの真下の水を見ることができる理由ですが、それより遠くは空を反映していま"
"す。"

msgid ""
"In order to increase the specular reflections, we will do two things. First, "
"we will change the render mode for specular to toon because the toon render "
"mode has larger specular highlights."
msgstr ""
"鏡面反射を増やすために、2つのことを行います。最初に、トゥーンレンダリングモー"
"ドの方が鏡面反射ハイライトが大きくなるため、スペキュラーのレンダリングモード"
"をトゥーンに変更します。"

msgid ""
"Second we will add rim lighting. Rim lighting increases the effect of light "
"at glancing angles. Usually it is used to emulate the way light passes "
"through fabric on the edges of an object, but we will use it here to help "
"achieve a nice watery effect."
msgstr ""
"次に、リム照明を追加します。リム照明は、かすかな角度で光の効果を高めます。通"
"常、オブジェクトの端にある布地を光が通過する方法をエミュレートするために使用"
"されますが、ここでは素敵な水のような効果を達成するために使用します。"

#, fuzzy
msgid ""
"In order to add fresnal reflectance, we will compute a fresnel term in our "
"fragment shader. Here, we aren't going to use a real fresnel term for "
"performance reasons. Instead, we'll approximate it using the dot product of "
"the ``NORMAL`` and ``VIEW`` vectors. The ``NORMAL`` vector points away from "
"the mesh's surface, while the ``VIEW`` vector is the direction between your "
"eye and that point on the surface. The dot product between them is a handy "
"way to tell when you are looking at the surface head-on or at a glancing "
"angle."
msgstr ""
"フレネル反射率を追加するために、フラグメントシェーダーでフレネル項を計算しま"
"す。実際のフレネル項を使用するつもりはありませんが、代わりに ``NORMAL`` と "
"``VIEW`` ベクトルのドット積を使用して近似します。\\ ``NORMAL`` ベクトルはサー"
"フェスから離れて行く方向を指し、\\ ``VIEW`` ベクトルは視点とサーフェス上のそ"
"の点の間の方向です。それらの間のドット積は、サーフェスを正面から見ているとき"
"に、傾きの角度を見分けるのに便利な方法です。"

#, fuzzy
msgid ""
"And mix it into both ``ROUGHNESS`` and ``ALBEDO``. This is the benefit of "
"ShaderMaterials over SpatialMaterials. With SpatialMaterial, we could set "
"these properties with a texture, or to a flat number. But with shaders we "
"can set them based on any mathematical function that we can dream up."
msgstr ""
"そしてそれを ``ROUGHNESS`` と ``ALBEDO`` の両方に混ぜます。これは、"
"SpatialMaterialよりもShaderMaterialの利点です。 SpatialMaterialを使用すると、"
"これらのプロパティをテクスチャまたはフラットな数値に設定できます。しかし、"
"シェーダーを使用すれば、思いつく任意の数学関数に基づいて設定できます。"

msgid ""
"And now, with only 5 lines of code, you can have complex looking water. Now "
"that we have lighting, this water is looking too bright. Let's darken it. "
"This is done easily by decreasing the values of the ``vec3`` we pass into "
"``ALBEDO``. Let's set them to ``vec3(0.01, 0.03, 0.05)``."
msgstr ""
"そして今、わずか5行のコードで、複雑な外観の水を使用できます。照明ができたの"
"で、この水は明るすぎます。暗くしましょう。これは、\\ ``ALBEDO`` に渡す "
"``vec3`` の値を減らすことで簡単に行えます。それらを ``vec3(0.01, 0.03, "
"0.05)``に設定しましょう。"

msgid "Animating with ``TIME``"
msgstr "``TIME`` でアニメートする"

#, fuzzy
msgid ""
"Going back to the vertex function, we can animate the waves using the built-"
"in variable ``TIME``."
msgstr ""
"頂点関数に戻ると、組み込み変数 ``TIME`` を使用して波をアニメーション化できま"
"す。"

msgid ""
"``TIME`` is a built-in variable that is accessible from the vertex and "
"fragment functions."
msgstr ""
"``TIME`` は、頂点関数とフラグメント関数からアクセス可能なビルトイン変数です。"

msgid ""
"In the last tutorial we calculated height by reading from a heightmap. For "
"this tutorial, we will do the same. Put the heightmap code in a function "
"called ``height()``."
msgstr ""
"最後のチュートリアルでは、高さマップから読み取ることで高さを計算しました。こ"
"のチュートリアルでは、同じことを行います。ハイトマップコードを ``height()`` "
"という関数に入れます。"

#, fuzzy
msgid ""
"In order to use ``TIME`` in the ``height()`` function, we need to pass it in."
msgstr ""
"``height()`` 関数で ``TIME`` を使用するには、それを渡す必要があります。"

msgid "And make sure to correctly pass it in inside the vertex function."
msgstr "そして、頂点関数内でそれを正しく渡すようにしてください。"

msgid ""
"Instead of using a normalmap to calculate normals. We are going to compute "
"them manually in the ``vertex()`` function. To do so use the following line "
"of code."
msgstr ""
"法線を計算するために法線マップを使用する代わりに。 ``vertex()`` 関数でそれら"
"を手動で計算します。そのためには、次のコード行を使用します。"

msgid ""
"We need to compute ``NORMAL`` manually because in the next section we will "
"be using math to create complex-looking waves."
msgstr ""
"次のセクションでは数学を使用して複雑に見える波を作成するため、手動で "
"``NORMAL`` を計算する必要があります。"

msgid ""
"Now, we are going to make the ``height()`` function a little more "
"complicated by offsetting ``position`` by the cosine of ``TIME``."
msgstr ""
"ここで、 ``TIME`` のコサインで ``position`` をオフセットすることにより、\\ "
"``height()`` 関数をもう少し複雑にします。"

msgid ""
"This results in waves that move slowly, but not in a very natural way. The "
"next section will dig deeper into using shaders to create more complex "
"effects, in this case realistic waves, by adding a few more mathematical "
"functions."
msgstr ""
"これにより、波はゆっくりと移動しますが、自然な方法ではありません。次のセク"
"ションでは、さらにいくつかの数学関数を追加して、シェーダーを使用してより複雑"
"な効果(この場合は現実的な波)を作成する方法について詳しく説明します。"

msgid "Advanced effects: waves"
msgstr "高度な効果: 波"

msgid ""
"What makes shaders so powerful is that you can achieve complex effects by "
"using math. To illustrate this, we are going to take our waves to the next "
"level by modifying the ``height()`` function and by introducing a new "
"function called ``wave()``."
msgstr ""
"シェーダーが非常に強力なのは、数学を使用して複雑な効果を実現できることです。"
"これを説明するために、 ``height()`` 関数を修正し、\\ ``wave()`` と呼ばれる新"
"しい関数を導入することで、波を次のレベルに引き上げます。"

msgid ""
"``wave()`` has one parameter, ``position``, which is the same as it is in "
"``height()``."
msgstr ""
"``wave()`` にはパラメーター ``position`` があり、これは ``height()`` と同じで"
"す。"

msgid ""
"We are going to call ``wave()`` multiple times in ``height()`` in order to "
"fake the way waves look."
msgstr ""
"波の見かけを模倣するために、\\ ``height()`` で ``wave()`` を複数回呼び出しま"
"す。"

msgid "At first this looks complicated. So let's go through it line-by-line."
msgstr "最初はこれは複雑に見えます。それでは、行ごとに見ていきましょう。"

#, fuzzy
msgid ""
"Offset the position by the ``noise`` texture. This will make the waves "
"curve, so they won't be straight lines completely aligned with the grid."
msgstr ""
"``ノイズ`` テクスチャによって位置をオフセットします。これにより、波は曲線にな"
"り、グリッドと完全に整列した直線ではなくなります。"

msgid ""
"Define a wave-like function using ``sin()`` and ``position``. Normally "
"``sin()`` waves are very round. We use ``abs()`` to absolute to give them a "
"sharp ridge and constrain them to the 0-1 range. And then we subtract it "
"from ``1.0`` to put the peak on top."
msgstr ""
"``sin()`` と ``position`` を使用して波のような関数を定義します。通常、\\ "
"``sin()`` 波は非常に丸いです。絶対値にするために ``abs()`` を使用して、鋭い隆"
"起を与え、0-1の範囲に制限します。そして、\\ ``1.0`` からそれを差し引いて、"
"ピークを一番上に置きます。"

msgid ""
"Multiply the x-directional wave by the y-directional wave and raise it to a "
"power to sharpen the peaks. Then subtract that from ``1.0`` so that the "
"ridges become peaks and raise that to a power to sharpen the ridges."
msgstr ""
"x方向の波にy方向の波を掛け、それを累乗してピークをシャープにします。次に、\\ "
"``1.0`` からそれを差し引くと、尾根がピークになり、それを累乗して尾根をシャー"
"プにします。"

msgid ""
"We can now replace the contents of our ``height()`` function with ``wave()``."
msgstr "``height()`` 関数の内容を ``wave()`` に置き換えることができます。"

#, fuzzy
msgid "Using this, you get:"
msgstr "これを使用すると以下が得られます:"

msgid ""
"The shape of the sin wave is too obvious. So let's spread the waves out a "
"bit. We do this by scaling ``position``."
msgstr ""
"正弦波の形状があまりにも明白です。それでは、波を少し広げてみましょう。これを"
"行うには、\\ ``position`` をスケーリングします。"

msgid "Now it looks much better."
msgstr "今ではずっと良く見えます。"

msgid ""
"We can do even better if we layer multiple waves on top of each other at "
"varying frequencies and amplitudes. What this means is that we are going to "
"scale position for each one to make the waves thinner or wider (frequency). "
"And we are going to multiply the output of the wave to make them shorter or "
"taller (amplitude)."
msgstr ""
"さまざまな周波数と振幅で複数の波を重ねると、さらに改善できます。これが意味す"
"ることは、それぞれの位置をスケーリングして、波を細くしたり広くしたりすること"
"です(周波数)。そして、波の出力を乗算して、それらをより短くまたはより高く(振"
"幅)します。"

msgid ""
"Here is an example for how you could layer the four waves to achieve nicer "
"looking waves."
msgstr "見栄えの良い波を実現するために4つの波を重ねる方法の例を次に示します。"

msgid ""
"Note that we add time to two and subtract it from the other two. This makes "
"the waves move in different directions creating a complex effect. Also note "
"that the amplitudes (the number the result is multiplied by) all add up to "
"``1.0``. This keeps the wave in the 0-1 range."
msgstr ""
"2に時間を追加し、他の2つからそれを減算することに注意してください。これによ"
"り、波がさまざまな方向に移動し、複雑な効果が生まれます。また、振幅(結果に乗算"
"される数)がすべて ``1.0`` になることにも注意してください。これにより、波は0〜"
"1の範囲に維持されます。"

#, fuzzy
msgid ""
"With this code you should end up with more complex looking waves and all you "
"had to do was add a bit of math!"
msgstr ""
"このコードを使用すると、より複雑な外観の波になります。必要なのは、少しの数学"
"を追加することだけです！"

msgid ""
"For more information about Spatial shaders read the :ref:`Shading Language "
"<doc_shading_language>` doc and the :ref:`Spatial Shaders "
"<doc_spatial_shader>` doc. Also look at more advanced tutorials in the :ref:"
"`Shading section <toc-learn-features-shading>` and the :ref:`3D <toc-learn-"
"features-3d>` sections."
msgstr ""
"Spatialシェーダーの詳細については、\\ :ref:`Shading Language "
"<doc_shading_language>` のドキュメントと :ref:`Spatial Shaders "
"<doc_spatial_shader>` のドキュメントを参照してください。\\ :ref:`Shading "
"section <toc-learn-features-shading>` および :ref:`3D <toc-learn-"
"features-3d>` セクションのより高度なチュートリアルも参照してください。"

msgid "Translation status"
msgstr "翻訳ステータス"
