# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Audio streams"
msgstr "オーディオストリーム"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"As you might have already read in :ref:`doc_audio_buses`, sound is sent to "
"each bus via an AudioStreamPlayer node. There are different kinds of "
"AudioStreamPlayers. Each one loads an AudioStream and plays it back."
msgstr ""
"すでに :ref:`doc_audio_buses` を読んでいるかもしれませんが、音声は"
"AudioStreamPlayerノードを介して各バスに送信されます。 AudioStreamPlayerにはさ"
"まざまな種類があります。それぞれがAudioStreamをロードして再生します。"

msgid "AudioStream"
msgstr "\\ AudioStream"

#, fuzzy
msgid ""
"An audio stream is an abstract object that emits sound. The sound can come "
"from many places, but is most commonly loaded from the filesystem. Audio "
"files can be loaded as AudioStreams and placed inside an AudioStreamPlayer. "
"You can find information on supported formats and differences in :ref:"
"`doc_importing_audio_samples`."
msgstr ""
"オーディオ ストリームは、サウンドを出力する抽象的なオブジェクトです。サウンド"
"(のデータ)は多くの場所からやってくることができますが、最も一般的にはファイル"
"システムから読み込まれます。WAV (``.wav``) や Ogg Vorbis (``.ogg``) などの"
"オーディオファイルは、AudioStreamとして読み込んで、AudioStreamPlayer内に配置"
"できます。"

#, fuzzy
msgid ""
"There are other types of AudioStreams, such as AudioStreamRandomPitch. This "
"one makes a random adjustment to the sound's pitch every time it's played "
"back. This can be helpful for adding variation to sounds that are played "
"back often."
msgstr ""
"AudioStreamPlayerには、AudioStreamRandomPitchなど、他の種類があります。これ"
"は、再生されるたびにサウンドのピッチをランダムに調整します。これは、頻繁に再"
"生されるサウンドにバリエーションを追加するのに役立ちます。"

msgid "AudioStreamPlayer"
msgstr "\\ AudioStreamPlayer"

msgid ""
"This is the standard, non-positional stream player. It can play to any bus. "
"In 5.1 sound setups, it can send audio to stereo mix or front speakers."
msgstr ""
"これは標準の、位置を持たないストリームプレーヤーです。どのバスでもプレイでき"
"ます。5.1サウンド設定では、オーディオをステレオミックスまたはフロントスピー"
"カーに送信できます。"

msgid "AudioStreamPlayer2D"
msgstr "\\ AudioStreamPlayer2D"

msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 2D positional "
"environment. When close to the left of the screen, the panning will go left. "
"When close to the right side, it will go right."
msgstr ""
"これはAudioStreamPlayerのバリアントですが、2Dの位置環境で音を発します。画面の"
"左に近づくと、パンが左に移動します。右側に近づくと、右側に移動します。"

msgid ""
"Area2Ds can be used to divert sound from any AudioStreamPlayer2Ds they "
"contain to specific buses. This makes it possible to create buses with "
"different reverb or sound qualities to handle action happening in a "
"particular parts of your game world."
msgstr ""
"Area2Dを使用すると、その領域に含まれるAudioStreamPlayer2Dから、特定のバスにサ"
"ウンドを転送できます。これにより、さまざまなリバーブまたは音質のバスを作成し"
"て、ゲームワールドの特定の部分で発生するアクションを処理できます。"

msgid "AudioStreamPlayer3D"
msgstr "\\ AudioStreamPlayer3D"

msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 3D positional "
"environment. Depending on the location of the player relative to the screen, "
"it can position sound in stereo, 5.1 or 7.1 depending on the chosen audio "
"setup."
msgstr ""
"これはAudioStreamPlayerのバリアントですが、3Dの位置環境で音を発します。画面に"
"対するプレーヤーの位置や、選択したオーディオ設定に応じて、5.1、7.1のステレオ"
"でサウンドを配置できます。"

msgid ""
"Similar to AudioStreamPlayer2D, an Area can divert the sound to an audio bus."
msgstr ""
"AudioStreamPlayer2Dと同様に、エリアはサウンドをオーディオ バスに転送できま"
"す。"

msgid ""
"Unlike for 2D, the 3D version of AudioStreamPlayer has a few more advanced "
"options:"
msgstr ""
"2Dとは異なり、AudioStreamPlayerの3Dバージョンには、さらに高度なオプションがい"
"くつかあります:"

msgid "Reverb buses"
msgstr "Reverb bus"

msgid ""
"Godot allows for 3D audio streams that enter a specific Area node to send "
"dry and wet audio to separate buses. This is useful when you have several "
"reverb configurations for different types of rooms. This is done by enabling "
"this type of reverb in the **Reverb Bus** section of the Area's properties:"
msgstr ""
"Godotでは、特定のエリアノードに入る3Dオーディオストリームを使用して、ドライ"
"オーディオとウェットオーディオを別々のバスに送信できます。これは、部屋の種類"
"ごとに複数のリバーブ構成がある場合に便利です。これは、エリアのプロパティの "
"**Reverb Bus** セクションでこのタイプのリバーブを有効にすることで実行されま"
"す。"

msgid ""
"At the same time, a special bus layout is created where each area receives "
"the reverb info from each area. A Reverb effect needs to be created and "
"configured in each reverb bus to complete the setup for the desired effect:"
msgstr ""
"同時に、各エリアが各エリアからリバーブ情報を受け取る特別なバスレイアウトが作"
"成されます。目的のエフェクトのセットアップを完了するには、各リバーブバスでリ"
"バーブエフェクトを作成および構成する必要があります:"

msgid ""
"The Area's **Reverb Bus** section also has a parameter named **Uniformity**. "
"Some types of rooms bounce sounds more than others (like a warehouse), so "
"reverberation can be heard almost uniformly across the room even though the "
"source may be far away. Playing around with this parameter can simulate that "
"effect."
msgstr ""
"エリアの **Reverb Bus** セクションには、\\ **Uniformity** という名前のパラ"
"メーターもあります。一部のタイプの部屋(倉庫など)は他の部屋よりもバウンド音が"
"多いため、音源が遠く離れていても、部屋全体にほぼ均一に残響が聞こえます。この"
"パラメーターをいじって、その効果をシミュレートできます。"

msgid "Doppler"
msgstr "ドップラー"

msgid ""
"When the relative velocity between an emitter and listener changes, this is "
"perceived as an increase or decrease in the pitch of the emitted sound. "
"Godot can track velocity changes in the AudioStreamPlayer3D and Camera "
"nodes. Both nodes have this property, which must be enabled manually:"
msgstr ""
"エミッターとリスナー間の相対速度が変化すると、これは放出された音のピッチの増"
"加または減少として認識されます。 Godotは、AudioStreamPlayer3DおよびCameraノー"
"ドの速度の変化を追跡できます。両方のノードにはこのプロパティがあり、手動で有"
"効にする必要があります。"

msgid ""
"Enable it by setting it depending on how objects will be moved: use **Idle** "
"for objects moved using ``_process``, or **Physics** for objects moved using "
"``_physics_process``. The tracking will happen automatically."
msgstr ""
"オブジェクトの移動方法に応じて設定して有効にします: ``_process`` を使用して移"
"動するオブジェクトには **Idle** を使用し、\\ ``_physics_process`` を使用して"
"移動するオブジェクトには **Physics** を使用します。追跡は自動的に行われます。"

msgid "Translation status"
msgstr "翻訳ステータス"
