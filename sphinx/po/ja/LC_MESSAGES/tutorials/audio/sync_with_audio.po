# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Sync the gameplay with audio and music"
msgstr "ゲームプレイにオーディオと音楽を同期させる"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"In any application or game, sound and music playback will have a slight "
"delay. For games, this delay is often so small that it is negligible. Sound "
"effects will come out a few milliseconds after any play() function is "
"called. For music this does not matter as in most games it does not interact "
"with the gameplay."
msgstr ""
"どのアプリケーションやゲームでも、サウンドと音楽の再生にはわずかな遅延があり"
"ます。ゲームの場合、この遅延は多くの場合非常に小さいため無視できます。サウン"
"ドエフェクトは、play()関数が呼び出されてから数ミリ秒後に出力されます。音楽の"
"場合、ほとんどのゲームではゲームプレイと相互作用しないため、これは重要ではあ"
"りません。"

msgid ""
"Still, for some games (mainly, rhythm games), it may be required to "
"synchronize player actions with something happening in a song (usually in "
"sync with the BPM). For this, having more precise timing information for an "
"exact playback position is useful."
msgstr ""
"それでも、一部のゲーム(主にリズムゲーム)では、プレイヤーのアクションを曲内で"
"発生する何かと同期する必要があります(通常はBPMと同期します)。そのためには、正"
"確な再生位置のより正確なタイミング情報を取得すると便利です。"

msgid ""
"Achieving very low playback timing precision is difficult. This is because "
"many factors are at play during audio playback:"
msgstr ""
"非常に細かい再生タイミング精度を達成することは困難です。これは、オーディオの"
"再生中に多くの要因が作用するためです。"

msgid ""
"Audio is mixed in chunks (not continuously), depending on the size of audio "
"buffers used (check latency in project settings)."
msgstr ""
"オーディオは、使用するオーディオ バッファのサイズに応じて、チャンク単位 (連続"
"ではなく) で混在しています (プロジェクト設定で待機時間を確認します)。"

msgid "Mixed chunks of audio are not played immediately."
msgstr "オーディオの混合チャンクはすぐには再生されません。"

msgid "Graphics APIs display two or three frames late."
msgstr "グラフィックAPIは2〜3フレーム遅れて表示します。"

msgid "When playing on TVs, some delay may be added due to image processing."
msgstr ""
"テレビで再生する場合、その画像処理のために遅延が追加される場合があります。"

msgid ""
"The most common way to reduce latency is to shrink the audio buffers (again, "
"by editing the latency setting in the project settings). The problem is that "
"when latency is too small, sound mixing will require considerably more CPU. "
"This increases the risk of skipping (a crack in sound because a mix callback "
"was lost)."
msgstr ""
"レイテンシーを削減する最も一般的な方法は、オーディオバッファを縮小することで"
"す(再び、プロジェクト設定でレイテンシー設定を編集します)。問題は、レイテン"
"シーが小さすぎると、サウンドミキシングにかなり多くのCPUが必要になることです。"
"これにより、スキップする(ミックスコールバックが失われたためサウンドの亀裂が生"
"じる)リスクが高まります。"

msgid ""
"This is a common tradeoff, so Godot ships with sensible defaults that should "
"not need to be altered."
msgstr ""
"これは一般的なトレードオフであるため、Godotには、変更する必要のない適切なデ"
"フォルトが含まれています。"

msgid ""
"The problem, in the end, is not this slight delay but synchronizing graphics "
"and audio for games that require it. Beginning with Godot 3.2, some helpers "
"were added to obtain more precise playback timing."
msgstr ""
"問題は、最終的に、このわずかな遅延ではなく、それを必要とするゲームのグラ"
"フィックとオーディオの同期です。 Godot 3.2以降では、より正確な再生タイミング"
"を取得するためにいくつかのヘルパーが追加されました。"

msgid "Using the system clock to sync"
msgstr "システムクロックを使用した同期"

msgid ""
"As mentioned before, If you call :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>`, sound will not begin "
"immediately, but when the audio thread processes the next chunk."
msgstr ""
"前述のように、\\ :ref:`AudioStreamPlayer.play() "
"<class_AudioStreamPlayer_method_play>` を呼び出しても、サウンドはすぐには開始"
"されませんが、オーディオスレッドが次のチャンクを処理するときには開始されま"
"す。"

msgid ""
"This delay can't be avoided but it can be estimated by calling :ref:"
"`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>`."
msgstr ""
"この遅延は回避できませんが、\\ :ref:`AudioServer.get_time_to_next_mix() "
"<class_AudioServer_method_get_time_to_next_mix>` を呼び出すことで推測できま"
"す。"

msgid ""
"The output latency (what happens after the mix) can also be estimated by "
"calling :ref:`AudioServer."
"get_output_latency()<class_AudioServer_method_get_output_latency>`."
msgstr ""
"出力レイテンシ(ミックス後に発生するもの)は、\\ :ref:`AudioServer."
"get_output_latency() <class_AudioServer_method_get_output_latency>` を呼び出"
"すことによっても推測できます。"

msgid ""
"Add these two and it's possible to guess almost exactly when sound or music "
"will begin playing in the speakers during *_process()*:"
msgstr ""
"これら2つを追加すると、\\ *_process()* の最中にスピーカーでサウンドまたは音楽"
"の再生が開始されるタイミングをほぼ正確に推測できます:"

msgid ""
"In the long run, though, as the sound hardware clock is never exactly in "
"sync with the system clock, the timing information will slowly drift away."
msgstr ""
"ただし、長い目で見れば、サウンドハードウェアクロックがシステムクロックと正確"
"に同期することはないため、タイミング情報はゆっくりとずれていきます。"

msgid ""
"For a rhythm game where a song begins and ends after a few minutes, this "
"approach is fine (and it's the recommended approach). For a game where "
"playback can last a much longer time, the game will eventually go out of "
"sync and a different approach is needed."
msgstr ""
"数分後に曲が開始および終了するリズムゲームの場合、このアプローチは適切です(推"
"奨されるアプローチです)。再生がはるかに長い時間続くゲームの場合、ゲームは最終"
"的に同期しなくなり、別のアプローチが必要になります。"

msgid "Using the sound hardware clock to sync"
msgstr "サウンド ハードウェア クロックを使用した同期"

msgid ""
"Using :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"to obtain the current position for the song sounds ideal, but it's not that "
"useful as-is. This value will increment in chunks (every time the audio "
"callback mixed a block of sound), so many calls can return the same value. "
"Added to this, the value will be out of sync with the speakers too because "
"of the previously mentioned reasons."
msgstr ""
":ref:`AudioStreamPlayer.get_playback_position() "
"<class_AudioStreamPlayer_method_get_playback_position>` を使用して、曲の現在"
"の位置を取得するのが理想的ですが、現状ではあまり役に立ちません。この値は(オー"
"ディオコールバックがサウンドブロックを混合するたびに)チャンク単位で増加するた"
"め、多くの呼び出しで同じ値を返すことができます。これに加えて、前述の理由によ"
"り、値はスピーカーとも同期しません。"

msgid ""
"To compensate for the \"chunked\" output, there is a function that can "
"help: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_method_get_time_since_last_mix>`."
msgstr ""
"「チャンク化している」出力を補正するために役立つ関数があります: :ref:"
"`AudioServer.get_time_since_last_mix() "
"<class_AudioServer_method_get_time_since_last_mix>`\\ 。"

msgid ""
"Adding the return value from this function to *get_playback_position()* "
"increases precision:"
msgstr ""
"この関数からの戻り値を *get_playback_position()* に加算すると、精度が向上しま"
"す:"

msgid ""
"To increase precision, subtract the latency information (how much it takes "
"for the audio to be heard after it was mixed):"
msgstr ""
"さらに精度を上げるには、レイテンシー情報(ミキシング後にオーディオが聞こえるま"
"でにかかる時間)を引きます:"

msgid ""
"The result may be a bit jittery due how multiple threads work. Just check "
"that the value is not less than in the previous frame (discard it if so). "
"This is also a less precise approach than the one before, but it will work "
"for songs of any length, or synchronizing anything (sound effects, as an "
"example) to music."
msgstr ""
"これは以前よりも精度の低いアプローチですが、任意の長さの曲、または音楽に何か"
"(たとえば、サウンドエフェクト)を同期させる場合にも機能します。結果は複数のス"
"レッドの動作が原因で少し不安定になる可能性があります。値が前のフレームの値よ"
"り小さくないことを確認してください(もしそうなら破棄してください)。"

msgid "Here is the same code as before using this approach:"
msgstr "このアプローチを使用する前と同じコードを次に示します:"

msgid "Translation status"
msgstr "翻訳ステータス"
