# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Ray-casting"
msgstr "レイキャスティング"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"One of the most common tasks in game development is casting a ray (or custom "
"shaped object) and checking what it hits. This enables complex behaviors, "
"AI, etc. to take place. This tutorial will explain how to do this in 2D and "
"3D."
msgstr ""
"ゲーム開発で最も一般的なタスクの1つは、レイ(またはカスタム形状のオブジェクト)"
"をキャストし、そのヒットをチェックすることです。 これにより、複雑な動作、AIな"
"どを実行できます。 このチュートリアルでは、2Dおよび3Dでこれを行う方法について"
"説明します。"

msgid ""
"Godot stores all the low level game information in servers, while the scene "
"is just a frontend. As such, ray casting is generally a lower-level task. "
"For simple raycasts, node such as :ref:`RayCast <class_RayCast>` and :ref:"
"`RayCast2D <class_RayCast2D>` will work, as they will return every frame "
"what the result of a raycast is."
msgstr ""
"Godotはすべての低レベルのゲーム情報をサーバーに保存しますが、シーンは単なるフ"
"ロントエンドです。 そのため、レイキャスティングは一般に低レベルのタスクで"
"す。 単純なレイキャストの場合、\\ :ref:`RayCast <class_RayCast>` や :ref:"
"`RayCast2D <class_RayCast2D>` などのノードが機能します。これは、レイキャスト"
"の結果がフレームごとに返されるためです。"

msgid ""
"Many times, though, ray-casting needs to be a more interactive process so a "
"way to do this by code must exist."
msgstr ""
"多くの場合、レイキャストはよりインタラクティブなプロセスである必要があるた"
"め、コードでこれを行う方法が必要です。"

msgid "Space"
msgstr "\\ Space"

msgid ""
"In the physics world, Godot stores all the low level collision and physics "
"information in a *space*. The current 2d space (for 2D Physics) can be "
"obtained by accessing :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`. For 3D, it's :ref:`Spatial."
"get_world().space <class_Spatial_method_get_world>`."
msgstr ""
"物理世界では、Godotはすべての低レベルのコリジョンと物理の情報を\\ *space*\\ "
"に保存します。\\ :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>` にアクセスすると、現在の2D space(2D物"
"理用)を取得できます。 3Dの場合、\\ :ref:`Spatial.get_world().space "
"<class_Spatial_method_get_world>` です。"

msgid ""
"The resulting space :ref:`RID <class_RID>` can be used in :ref:"
"`PhysicsServer <class_PhysicsServer>` and :ref:`Physics2DServer "
"<class_Physics2DServer>` respectively for 3D and 2D."
msgstr ""
"結果として得られるspace :ref:`RID <class_RID>` は、3Dおよび2Dの場合、それぞ"
"れ :ref:`PhysicsServer <class_PhysicsServer>` および :ref:`Physics2DServer "
"<class_Physics2DServer>` で使用できます。"

msgid "Accessing space"
msgstr "spaceへのアクセス"

msgid ""
"Godot physics runs by default in the same thread as game logic, but may be "
"set to run on a separate thread to work more efficiently. Due to this, the "
"only time accessing space is safe is during the :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` callback. Accessing "
"it from outside this function may result in an error due to space being "
"*locked*."
msgstr ""
"Godotの物理は、ゲームロジックと同じスレッドでデフォルトで実行されますが、より"
"効率的に動作するために別のスレッドで実行するように設定できます。 このため、"
"spaceへのアクセスが安全なのは :ref:`Node."
"_physics_process()<class_Node_method__physics_process>` コールバック中のみで"
"す。 この関数の外部からアクセスすると、spaceが\\ *ロック*\\ されているためエ"
"ラーが発生する場合があります。"

msgid ""
"To perform queries into physics space, the :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` and :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` must be used."
msgstr ""
"物理spaceへのクエリを実行するには、\\ :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` および :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` を使用する必要があります。"

msgid "Use the following code in 2D:"
msgstr "2Dでは、次のコードを使用します:"

msgid "Or more directly:"
msgstr "またはより直接的に:"

msgid "And in 3D:"
msgstr "そして、3Dで:"

msgid "Raycast query"
msgstr "レイキャストクエリ"

msgid ""
"For performing a 2D raycast query, the method :ref:"
"`Physics2DDirectSpaceState.intersect_ray() "
"<class_Physics2DDirectSpaceState_method_intersect_ray>` may be used. For "
"example:"
msgstr ""
"2Dレイキャストクエリを実行するには、メソッド :ref:`Physics2DDirectSpaceState."
"intersect_ray() <class_Physics2DDirectSpaceState_method_intersect_ray>` を使"
"用できます。 例えば:"

msgid ""
"The result is a dictionary. If the ray didn't hit anything, the dictionary "
"will be empty. If it did hit something, it will contain collision "
"information:"
msgstr ""
"結果はdictionaryです。 光線が何もヒットしなかった場合、dictionaryは空になりま"
"す。 何かにヒットした場合、衝突情報が含まれます:"

msgid ""
"The ``result`` dictionary when a collision occurs contains the following "
"data:"
msgstr ""
"衝突が発生した場合の ``result`` というdictionaryには、次のデータが含まれます:"

msgid "The data is similar in 3D space, using Vector3 coordinates."
msgstr "データは、Vector3座標を使用した3D空間の物に類似しています。"

msgid "Collision exceptions"
msgstr "コリジョンの例外"

msgid ""
"A common use case for ray casting is to enable a character to gather data "
"about the world around it. One problem with this is that the same character "
"has a collider, so the ray will only detect its parent's collider, as shown "
"in the following image:"
msgstr ""
"レイキャスティングの一般的な使用例は、キャラクターが周囲の世界に関するデータ"
"を収集できるようにすることです。 これに関する1つの問題は、同じキャラクターに"
"コライダーがあるため、次の画像に示すように、レイは親のコライダーのみを検出す"
"ることです:"

msgid ""
"To avoid self-intersection, the ``intersect_ray()`` function can take an "
"optional third parameter which is an array of exceptions. This is an example "
"of how to use it from a KinematicBody2D or any other collision object node:"
msgstr ""
"自己交差を避けるために、\\ ``intersect_ray()`` 関数は例外の配列であるオプショ"
"ンの3番目のパラメーターを取ることができます。 これは、KinematicBody2Dまたはそ"
"の他のコリジョンオブジェクトノードから使用する方法の例です:"

msgid "The exceptions array can contain objects or RIDs."
msgstr "例外配列には、オブジェクトまたは RID を含めることができます。"

msgid "Collision Mask"
msgstr "コリジョンマスク"

msgid ""
"While the exceptions method works fine for excluding the parent body, it "
"becomes very inconvenient if you need a large and/or dynamic list of "
"exceptions. In this case, it is much more efficient to use the collision "
"layer/mask system."
msgstr ""
"例外メソッドは親ボディを除外するためにうまく機能しますが、例外の大きなリスト"
"や動的リストが必要な場合は非常に不便になります。 この場合、コリジョンレイ"
"ヤー/マスクシステムを使用する方がはるかに効率的です。"

msgid ""
"The optional fourth argument for ``intersect_ray()`` is a collision mask. "
"For example, to use the same mask as the parent body, use the "
"``collision_mask`` member variable:"
msgstr ""
"``intersect_ray()`` のオプションの4番目の引数はコリジョンマスクです。 たとえ"
"ば、親ボディと同じマスクを使用するには、\\ ``collision_mask`` メンバー変数を"
"使用します:"

msgid ""
"See :ref:`doc_physics_introduction_collision_layer_code_example` for details "
"on how to set the collision mask."
msgstr ""

msgid "3D ray casting from screen"
msgstr "画面からの3Dレイキャスティング"

msgid ""
"Casting a ray from screen to 3D physics space is useful for object picking. "
"There is not much need to do this because :ref:`CollisionObject "
"<class_CollisionObject>` has an \"input_event\" signal that will let you "
"know when it was clicked, but in case there is any desire to do it manually, "
"here's how."
msgstr ""
"画面から3D物理空間への光線の投射は、オブジェクトの選択に役立ちます。\\ :ref:"
"`CollisionObject <class_CollisionObject>` には\"input_event\"シグナルがあり、"
"クリックされたときに通知されるため、これを行う必要はあまりありませんが、手動"
"で行う場合は次のようにします。"

msgid ""
"To cast a ray from the screen, you need a :ref:`Camera <class_Camera>` node. "
"A ``Camera`` can be in two projection modes: perspective and orthogonal. "
"Because of this, both the ray origin and direction must be obtained. This is "
"because ``origin`` changes in orthogonal mode, while ``normal`` changes in "
"perspective mode:"
msgstr ""
"画面から光線を投影するには、\\ :ref:`Camera <class_Camera>` ノードが必要で"
"す。 \\ ``Camera`` には、遠近法(perspective )と直交法(orthogonal)の2つの投影"
"モードがあります。 このため、レイの原点と方向の両方を取得する必要がありま"
"す。 これは、\\ ``orgin`` が直交法モードで変化し、\\ ``bormal`` が遠近法モー"
"ドで変化するためです:"

msgid "To obtain it using a camera, the following code can be used:"
msgstr "カメラを使用して取得するには、次のコードを使用できます:"

msgid ""
"Remember that during ``_input()``, the space may be locked, so in practice "
"this query should be run in ``_physics_process()``."
msgstr ""
"``_input()`` 中はspaceがロックされる可能性があるため、実際にはこのクエリは "
"``_physics_process()`` で実行する必要があることに注意してください。"

msgid "Translation status"
msgstr "翻訳ステータス"
