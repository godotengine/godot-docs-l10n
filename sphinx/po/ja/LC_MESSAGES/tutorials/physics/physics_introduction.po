# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Physics introduction"
msgstr "物理の紹介"

msgid ""
"In game development, you often need to know when two objects in the game "
"intersect or come into contact. This is known as **collision detection**. "
"When a collision is detected, you typically want something to happen. This "
"is known as **collision response**."
msgstr ""
"ゲーム開発では、多くの場合、ゲーム内の2つのオブジェクトが交差または接触するタ"
"イミングを知る必要があります。これは\\ **衝突検出**\\ として知られています。"
"衝突が検出された場合、通常は何かが発生します。これは\\ **衝突応答**\\ として"
"知られています。"

msgid ""
"Godot offers a number of collision objects in 2D and 3D to provide both "
"collision detection and response. Trying to decide which one to use for your "
"project can be confusing. You can avoid problems and simplify development if "
"you understand how each works and what their pros and cons are."
msgstr ""
"Godotは、衝突の検出と応答の両方を提供するために、2Dおよび3Dで多数のコリジョン"
"(衝突)オブジェクトを提供します。プロジェクトに使用するものを決定しようとする"
"と、混乱する可能性があります。それぞれがどのように機能し、その長所と短所が何"
"であるかを理解すれば、問題を回避して開発を簡素化できます。"

msgid "In this guide, you will learn:"
msgstr "このガイドでは、次の内容について学習します:"

msgid "Godot's four collision object types"
msgstr "Godotの4つのコリジョンオブジェクトタイプ"

msgid "How each collision object works"
msgstr "各コリジョンオブジェクトの仕組み"

msgid "When and why to choose one type over another"
msgstr "別のタイプよりもあるタイプを選択するべきタイミングと理由"

msgid ""
"This document's examples will use 2D objects. Every 2D physics object and "
"collision shape has a direct equivalent in 3D and in most cases they work in "
"much the same way."
msgstr ""
"このドキュメントの例では、2Dオブジェクトを使用します。すべての2D物理オブジェ"
"クトとコリジョン形状は3Dでもまったく同等であり、ほとんどの場合、ほぼ同じよう"
"に機能します。"

msgid "Collision objects"
msgstr "オブジェクトのコリジョン"

msgid ""
"Godot offers four kinds of physics bodies, extending :ref:`CollisionObject2D "
"<class_CollisionObject2D>`:"
msgstr ""
"Godotは4種類の物理ボディを提供し、\\ :ref:`CollisionObject2D "
"<class_CollisionObject2D>` を拡張します:"

msgid ":ref:`Area2D <class_Area2D>`"
msgstr "\\ :ref:`Area2D <class_Area2D>`"

msgid ""
"``Area2D`` nodes provide **detection** and **influence**. They can detect "
"when objects overlap and can emit signals when bodies enter or exit. An "
"``Area2D`` can also be used to override physics properties, such as gravity "
"or damping, in a defined area."
msgstr ""
"``Area2D`` ノードは **検出** と **影響** を提供します。オブジェクトの重なり合"
"いを検出し、物体が出入りするときにシグナルを発することができます。\\ `` "
"Area2D`` を使用して、定義された領域で重力や減衰などの物理特性をオーバーライド"
"することもできます。"

msgid ""
"The other three bodies extend :ref:`PhysicsBody2D <class_PhysicsBody2D>`:"
msgstr ""
"他の3つのボディは :ref:`PhysicsBody2D <class_PhysicsBody2D>` を拡張します:"

msgid ":ref:`StaticBody2D <class_StaticBody2D>`"
msgstr "\\ :ref:`StaticBody2D <class_StaticBody2D>`"

msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. They are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""
"静的ボディとは、物理エンジンによって動かされないものです。コリジョン検出に参"
"加しますが、衝突に応じて移動しません。これらは、環境の一部であるオブジェクト"
"や動的な動作を必要としないオブジェクトに最もよく使用されます。"

msgid ":ref:`RigidBody2D <class_RigidBody2D>`"
msgstr "\\ :ref:`RigidBody2D <class_RigidBody2D>`"

msgid ""
"This is the node that implements simulated 2D physics. You do not control a "
"``RigidBody2D`` directly, but instead you apply forces to it (gravity, "
"impulses, etc.) and the physics engine calculates the resulting movement. :"
"ref:`Read more about using rigid bodies. <doc_rigid_body>`"
msgstr ""
"これは、シミュレートされた2D物理を実装するノードです。\\ ``RigidBody2D`` を直"
"接制御するのではなく、それに力(重力、衝撃など)を適用し、物理エンジンが結果の"
"動きを計算します。\\ :ref:`リジッドボディの使用に関する詳細をお読みくださ"
"い。 <doc_rigid_body> `"

msgid ":ref:`KinematicBody2D <class_KinematicBody2D>`"
msgstr "\\ :ref:`KinematicBody2D <class_KinematicBody2D>`"

msgid ""
"A body that provides collision detection, but no physics. All movement and "
"collision response must be implemented in code."
msgstr ""
"コリジョン検出を提供しますが、物理は提供しません。すべての移動および衝突応答"
"はコードで実装する必要があります。"

#, fuzzy
msgid "Physics material"
msgstr "\\ ParticlesMaterial"

msgid ""
"Static bodies and rigid bodies can be configured to use a :ref:`physics "
"material <class_PhysicsMaterial>`. This allows adjusting the friction and "
"bounce of an object, and set if it's absorbent and/or rough."
msgstr ""

msgid "Collision shapes"
msgstr "コリジョン形状"

msgid ""
"A physics body can hold any number of :ref:`Shape2D <class_Shape2D>` objects "
"as children. These shapes are used to define the object's collision bounds "
"and to detect contact with other objects."
msgstr ""
"物理ボディは、任意の数の :ref:`Shape2D <class_Shape2D>` オブジェクトを子とし"
"て保持できます。これらの形状は、オブジェクトのコリジョン境界を定義し、他のオ"
"ブジェクトとの接触を検出するために使用されます。"

msgid ""
"In order to detect collisions, at least one ``Shape2D`` must be assigned to "
"the object."
msgstr ""
"コリジョンを検出するには、少なくとも1つの ``Shape2D`` をオブジェクトに割り当"
"てる必要があります。"

msgid ""
"The most common way to assign a shape is by adding a :ref:`CollisionShape2D "
"<class_CollisionShape2D>` or :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>` as a child of the object. These nodes allow you "
"to draw the shape directly in the editor workspace."
msgstr ""
"シェイプを割り当てる最も一般的な方法は、\\ :ref:`CollisionShape2D "
"<class_CollisionShape2D>` または :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>` をオブジェクトの子として追加することです。これら"
"のノードを使用すると、エディタのワークスペースでシェイプを直接描画できます。"

msgid ""
"Be careful to never scale your collision shapes in the editor. The \"Scale\" "
"property in the Inspector should remain ``(1, 1)``. When changing the size "
"of the collision shape, you should always use the size handles, **not** the "
"``Node2D`` scale handles. Scaling a shape can result in unexpected collision "
"behavior."
msgstr ""
"エディタでコリジョン形状をスケーリングしないように注意してください。インスペ"
"クタの”Scale”プロパティは ``(1, 1) `` のままにしてください。コリジョン形状の"
"サイズを変更するときは、\\ ``Node2D`` スケールハンドルではなく、常にサイズハ"
"ンドルを使用する必要があります。シェイプをスケーリングすると、予期しない衝突"
"が発生する場合があります。"

msgid "Physics process callback"
msgstr "物理プロセスのコールバック"

msgid ""
"The physics engine may spawn multiple threads to improve performance, so it "
"can use up to a full frame to process physics. Because of this, the value of "
"a body's state variables such as ``position`` or ``linear velocity`` may not "
"be accurate for the current frame."
msgstr ""
"物理エンジンは、パフォーマンスを向上させるために複数のスレッドを生成する場合"
"があるため、物理を処理するために最大でフルフレームを使用できます。このた"
"め、\\ ``position`` や ``linear velocity`` などのボディの状態変数の値は、現在"
"のフレームに対して正確でない場合があります。"

msgid ""
"In order to avoid this inaccuracy, any code that needs to access a body's "
"properties should be run in the :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` callback, which is called before each "
"physics step at a constant frame rate (60 times per second by default). This "
"method will be passed a ``delta`` parameter, which is a floating-point "
"number equal to the time passed in *seconds* since the last step. When using "
"the default 60 Hz physics update rate, it will typically be equal to "
"``0.01666...`` (but not always, see below)."
msgstr ""
"この不正確さを避けるために、ボディのプロパティにアクセスする必要があるコード"
"は、各物理ステップの前に一定のフレームレート(デフォルトでは1秒あたり60回)で呼"
"び出される :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` コールバックで実行する必要があります。"

msgid ""
"It's recommended to always use the ``delta`` parameter when relevant in your "
"physics calculations, so that the game behaves correctly if you change the "
"physics update rate or if the player's device can't keep up."
msgstr ""
"プレーヤーのデバイスが更新レートを維持できない場合でも状態の変更が適切に物理"
"計算に反映されるように、常に ``delta`` パラメーターを使うことを推奨します。"

msgid "Collision layers and masks"
msgstr "コリジョンレイヤーとマスク"

msgid ""
"One of the most powerful, but frequently misunderstood, collision features "
"is the collision layer system. This system allows you to build up complex "
"interactions between a variety of objects. The key concepts are **layers** "
"and **masks**. Each ``CollisionObject2D`` has 20 different physics layers it "
"can interact with."
msgstr ""
"最も強力ですが、誤解されることが多い衝突機能の1つは、コリジョンレイヤーシステ"
"ムです。このシステムにより、さまざまなオブジェクト間の複雑な相互作用を構築で"
"きます。重要な概念は **レイヤー** と **マスク** です。各 "
"``CollisionObject2D`` には、相互作用できる20の異なる物理層があります。"

msgid "Let's look at each of the properties in turn:"
msgstr "各プロパティを順番に見てみましょう:"

msgid "collision_layer"
msgstr "\\ collision_layer"

msgid ""
"This describes the layers that the object appears **in**. By default, all "
"bodies are on layer ``1``."
msgstr ""
"これは、オブジェクトが **in ** で表示されるレイヤーを記述します。デフォルトで"
"は、すべてのボディはレイヤー ``1`` 上にあります。"

msgid "collision_mask"
msgstr "\\ collision_mask"

msgid ""
"This describes what layers the body will **scan** for collisions. If an "
"object isn't in one of the mask layers, the body will ignore it. By default, "
"all bodies scan layer ``1``."
msgstr ""
"これは、ボディが衝突を **スキャン** するレイヤーを記述します。オブジェクトが"
"マスクレイヤーのいずれかにない場合、ボディはそれを無視します。デフォルトで"
"は、すべてのボディがレイヤー ``1`` をスキャンします。"

msgid ""
"These properties can be configured via code, or by editing them in the "
"Inspector."
msgstr ""
"これらのプロパティは、コードを介して、またはインスペクタで編集して構成できま"
"す。"

msgid ""
"Keeping track of what you're using each layer for can be difficult, so you "
"may find it useful to assign names to the layers you're using. Names can be "
"assigned in Project Settings -> Layer Names."
msgstr ""
"各レイヤーの使用目的を追跡するのは難しい場合があるため、使用しているレイヤー"
"に名前を付けると便利な場合があります。プロジェクト設定 → Layer Names で名前を"
"割り当てることができます。"

#, fuzzy
msgid "GUI example"
msgstr "入力の例"

msgid ""
"You have four node types in your game: Walls, Player, Enemy, and Coin. Both "
"Player and Enemy should collide with Walls. The Player node should detect "
"collisions with both Enemy and Coin, but Enemy and Coin should ignore each "
"other."
msgstr ""
"ゲームには、Walls、Player、Enemy、およびCoinの4つのノードタイプがあります。 "
"PlayerとEnemyの両方がWallsと衝突するはずです。 PlayerノードはEnemyとCoinの両"
"方との衝突を検出する必要がありますが、EnemyとCoinは互いに無視する必要がありま"
"す。"

msgid ""
"Start by naming layers 1-4 \"walls\", \"player\", \"enemies\", and \"coins\" "
"and place each node type in its respective layer using the \"Layer\" "
"property. Then set each node's \"Mask\" property by selecting the layers it "
"should interact with. For example, the Player's settings would look like "
"this:"
msgstr ""
"レイヤー1〜4に\"walls\"、\"player\"、\"enemies\"、\"coins\"という名前を付けて"
"開始し、\"Layer\" プロパティを使用して各ノードタイプをそれぞれのレイヤーに配"
"置します。次に、相互作用するレイヤーを選択して、各ノードの\"Mask\"プロパティ"
"を設定します。たとえば、プレイヤーの設定は次のようになります:"

#, fuzzy
msgid "Code example"
msgstr "例:"

msgid ""
"In function calls, layers are specified as a bitmask. Where a function "
"enables all layers by default, the layer mask will be given as "
"``0x7fffffff``. Your code can use binary, hexadecimal, or decimal notation "
"for layer masks, depending on your preference."
msgstr ""
"関数が呼び出されるとレイヤーはビットマスクとして表すことができます。全レイ"
"ヤーがデフォルト状態でオンの場合、レイヤーマスクは ``0x7fffffff`` で表されま"
"す。コード中ではあなたの好みに応じて、レイヤーマスクをバイナリ・16進数・数値"
"で記述できます。"

msgid ""
"The code equivalent of the above example where layers 1, 3 and 4 were "
"enabled would be as follows::"
msgstr ""
"上記の1,3,4番目のレイヤーが有効な場合の、同等なコード例は次のようになります："

msgid "Area2D"
msgstr "\\ Area2D"

msgid ""
"Area nodes provide **detection** and **influence**. They can detect when "
"objects overlap and emit signals when bodies enter or exit. Areas can also "
"be used to override physics properties, such as gravity or damping, in a "
"defined area."
msgstr ""
"エリア(Area)ノードは **検出** および **影響** を提供します。オブジェクトの重"
"なり合いを検出し、物体が出入りするときにsシグナルを発します。エリアは、定義さ"
"れたエリアで重力や減衰などの物理特性をオーバーライドするためにも使用できま"
"す。"

msgid "There are three main uses for :ref:`Area2D <class_Area2D>`:"
msgstr ":ref:`Area2D <class_Area2D>` には主に3つの用途があります:"

msgid "Overriding physics parameters (such as gravity) in a given region."
msgstr "特定の領域での物理パラメーター(重力など)のオーバーライド。"

msgid ""
"Detecting when other bodies enter or exit a region or what bodies are "
"currently in a region."
msgstr ""
"他のボディが領域に出入りするとき、または現在どのボディが領域にあるかを検出し"
"ます。"

msgid "Checking other areas for overlap."
msgstr "他の領域のオーバーラップを確認します。"

msgid "By default, areas also receive mouse and touchscreen input."
msgstr "デフォルトでは、エリアはマウスとタッチスクリーンの入力も受け取ります。"

msgid "StaticBody2D"
msgstr "\\ StaticBody2D"

msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. However, it can impart motion or rotation to a colliding body "
"**as if** it were moving, using its ``constant_linear_velocity`` and "
"``constant_angular_velocity`` properties."
msgstr ""
"静的(Static)ボディとは、物理エンジンによって動かされないものです。コリジョン"
"検出に参加しますが、衝突に応じて移動しません。ただし、\\ "
"``constant_linear_velocity`` および ``constant_angular_velocity`` プロパティ"
"を使用して、衝突している物体に動きや回転を\\ **あたかも**\\ 移動しているかの"
"ように伝えることができます。"

msgid ""
"``StaticBody2D`` nodes are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""
"``StaticBody2D`` ノードは、環境の一部であるか、動的な動作を必要としないオブ"
"ジェクトに最もよく使用されます。"

msgid "Example uses for ``StaticBody2D``:"
msgstr "``StaticBody2D`` の使用例:"

msgid "Platforms (including moving platforms)"
msgstr "プラットフォーム(移動プラットフォームを含む)"

msgid "Conveyor belts"
msgstr "コンベヤベルト"

msgid "Walls and other obstacles"
msgstr "壁やその他の障害物"

msgid "RigidBody2D"
msgstr "\\ RigidBody2D"

msgid ""
"This is the node that implements simulated 2D physics. You do not control a :"
"ref:`RigidBody2D <class_RigidBody2D>` directly. Instead, you apply forces to "
"it and the physics engine calculates the resulting movement, including "
"collisions with other bodies, and collision responses, such as bouncing, "
"rotating, etc."
msgstr ""
"これは、シミュレートされた2D物理を実装するノードです。\\ :ref:`RigidBody2D "
"<class_RigidBody2D>` を直接制御することはできません。代わりに、それに力を適用"
"し、物理エンジンは、他のボディとの衝突、跳ね返り、回転などの衝突応答を含む結"
"果の動きを計算します。"

#, fuzzy
msgid ""
"You can modify a rigid body's behavior via properties such as \"Mass\", "
"\"Friction\", or \"Bounce\", which can be set in the Inspector."
msgstr ""
"インスペクタで設定できる\"Mass(質量)\"、\"Friction(摩擦)\"、\"Bounce(反"
"発)\"などのプロパティを使用して、リジッド ボディの動作を変更できます。"

msgid ""
"The body's behavior is also affected by the world's properties, as set in "
"`Project Settings -> Physics`, or by entering an :ref:`Area2D "
"<class_Area2D>` that is overriding the global physics properties."
msgstr ""
"ボディの動作は、\\ `プロジェクト設定 → Physics` で設定された世界のプロパ"
"ティ、またはグローバルな物理学プロパティをオーバーライドする :ref:`Area2D "
"<class_Area2D>` を入力することによっても影響を受けます。"

msgid ""
"When a rigid body is at rest and hasn't moved for a while, it goes to sleep. "
"A sleeping body acts like a static body, and its forces are not calculated "
"by the physics engine. The body will wake up when forces are applied, either "
"by a collision or via code."
msgstr ""
"リジッドボディが静止していて、しばらく動かない場合、スリープ状態になります。"
"眠っている体は静的な体のように動作し、その力は物理エンジンによって計算されま"
"せん。衝突またはコードを介して力が加えられると、ボディが起動します。"

msgid "Rigid body modes"
msgstr "リジッドボディのモード"

msgid "A rigid body can be set to one of four modes:"
msgstr "リジッドボディは、次の4つのモードのいずれかに設定できます:"

msgid ""
"**Rigid** - The body behaves as a physical object. It collides with other "
"bodies and responds to forces applied to it. This is the default mode."
msgstr ""
"**Rigid** - ボディは物理的なオブジェクトとして動作します。それは他のボディと"
"衝突し、それに加えられた力に反応します。これがデフォルトのモードです。"

msgid ""
"**Static** - The body behaves like a :ref:`StaticBody2D "
"<class_StaticBody2D>` and does not move."
msgstr ""
"**Static** - ボディは :ref:`StaticBody2D <class_StaticBody2D>` のように動作"
"し、移動しません。"

msgid "**Character** - Similar to \"Rigid\" mode, but the body cannot rotate."
msgstr ""
"**Character** - \"Rigid\"モードに似ていますが、ボディは回転できません。"

msgid ""
"**Kinematic** - The body behaves like a :ref:`KinematicBody2D "
"<class_KinematicBody2D>` and must be moved by code."
msgstr ""
"**Kinematic** - ボディは :ref:`KinematicBody2D <class_KinematicBody2D>` のよ"
"うに動作し、コードによって移動する必要があります。"

msgid "Using RigidBody2D"
msgstr "RigidBody2Dを使用する"

msgid ""
"One of the benefits of using a rigid body is that a lot of behavior can be "
"had \"for free\" without writing any code. For example, if you were making "
"an \"Angry Birds\"-style game with falling blocks, you would only need to "
"create RigidBody2Ds and adjust their properties. Stacking, falling, and "
"bouncing would automatically be calculated by the physics engine."
msgstr ""
"リジッドボディを使用する利点の1つは、コードを記述せずに多くの動作を「無料」で"
"行えることです。たとえば、落下するブロックを持つ「Angry Birds」スタイルのゲー"
"ムを作成している場合、RigidBody2Dを作成してプロパティを調整するだけで済みま"
"す。スタッキング、落下、および跳ね返りは、物理エンジンによって自動的に計算さ"
"れます。"

msgid ""
"However, if you do wish to have some control over the body, you should take "
"care - altering the ``position``, ``linear_velocity``, or other physics "
"properties of a rigid body can result in unexpected behavior. If you need to "
"alter any of the physics-related properties, you should use the :ref:"
"`_integrate_forces() <class_RigidBody2D_method__integrate_forces>` callback "
"instead of ``_physics_process()``. In this callback, you have access to the "
"body's :ref:`Physics2DDirectBodyState <class_Physics2DDirectBodyState>`, "
"which allows for safely changing properties and synchronizing them with the "
"physics engine."
msgstr ""
"ただし、ボディを制御したい場合は注意が必要です　-　リジットボディの "
"``position``\\ 、\\ ``linear_velocity``\\ 、またはその他の物理プロパティを変"
"更すると、予期しない動作が発生する可能性があります。物理関連のプロパティを変"
"更する必要がある場合は、\\ ``_ physics_process()`` の代わりに :ref:"
"`_integrate_forces() <class_RigidBody2D_method__integrate_forces>` コールバッ"
"クを使用する必要があります。このコールバックでは、ボディの :ref:"
"`Physics2DDirectBodyState <class_Physics2DDirectBodyState>` にアクセスできま"
"す。これにより、プロパティを安全に変更し、物理エンジンと同期させることができ"
"ます。"

msgid "For example, here is the code for an \"Asteroids\" style spaceship:"
msgstr ""
"たとえば、\"Asteroids(Atariのゲーム)\"スタイルの宇宙船のコードは次のとおりで"
"す:"

msgid ""
"Note that we are not setting the ``linear_velocity`` or ``angular_velocity`` "
"properties directly, but rather applying forces (``thrust`` and ``torque``) "
"to the body and letting the physics engine calculate the resulting movement."
msgstr ""
"``linear_velocity`` または ``angular_velocity`` プロパティを直接設定するので"
"はなく、力(`` thrust`` および ``torque``)をボディに適用し、物理エンジンに結果"
"の動きを計算させることに注意してください。"

msgid ""
"When a rigid body goes to sleep, the ``_integrate_forces()`` function will "
"not be called. To override this behavior, you will need to keep the body "
"awake by creating a collision, applying a force to it, or by disabling the :"
"ref:`can_sleep <class_RigidBody2D_property_can_sleep>` property. Be aware "
"that this can have a negative effect on performance."
msgstr ""
"リジッドボディがスリープ状態になると、\\ ``_integrate_forces()`` 関数は呼び出"
"されません。この振る舞いをオーバーライドするには、コリジョンを作成するか、そ"
"れに力を加えるか、\\ :ref:`can_sleep <class_RigidBody2D_property_can_sleep>` "
"プロパティを無効にすることで、ボディを起こしたままにする必要があります。これ"
"はパフォーマンスに悪影響を及ぼす可能性があることに注意してください。"

msgid "Contact reporting"
msgstr "接触のレポート"

msgid ""
"By default, rigid bodies do not keep track of contacts, because this can "
"require a huge amount of memory if many bodies are in the scene. To enable "
"contact reporting, set the :ref:`contacts_reported "
"<class_RigidBody2D_property_contacts_reported>` property to a non-zero "
"value. The contacts can then be obtained via :ref:`Physics2DDirectBodyState."
"get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>` and related "
"functions."
msgstr ""
"デフォルトでは、リジッドボディは接触を追跡しません。これは、シーンに多くのボ"
"ディがある場合、膨大な量のメモリが必要になる可能性があるためです。接触のレ"
"ポートを有効にするには、\\ :ref:`contacts_reported "
"<class_RigidBody2D_property_contacts_reported>` プロパティをゼロ以外の値に設"
"定します。接触は、\\ :ref:`Physics2DDirectBodyState.get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>` および関連する関数"
"を介して取得できます。"

msgid ""
"Contact monitoring via signals can be enabled via the :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` property. See :ref:"
"`RigidBody2D <class_RigidBody2D>` for the list of available signals."
msgstr ""
"シグナルによる接触の監視は、\\ :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` プロパティを使用して有効にでき"
"ます。使用可能なシグナルのリストについては、\\ :ref:`RigidBody2D "
"<class_RigidBody2D>` を参照してください。"

msgid "KinematicBody2D"
msgstr "\\ KinematicBody2D"

msgid ""
":ref:`KinematicBody2D <class_KinematicBody2D>` bodies detect collisions with "
"other bodies, but are not affected by physics properties like gravity or "
"friction. Instead, they must be controlled by the user via code. The physics "
"engine will not move a kinematic body."
msgstr ""
":ref:`KinematicBody2D <class_KinematicBody2D>` ボディは、他のボディとの衝突を"
"検出しますが、重力や摩擦などの物理特性の影響を受けません。代わりに、ユーザー"
"がコードを介して制御する必要があります。物理エンジンはキネマティックボディを"
"移動しません。"

msgid ""
"When moving a kinematic body, you should not set its ``position`` directly. "
"Instead, you use the ``move_and_collide()`` or ``move_and_slide()`` methods. "
"These methods move the body along a given vector, and it will instantly stop "
"if a collision is detected with another body. After the body has collided, "
"any collision response must be coded manually."
msgstr ""
"キネマティックボディを移動する場合、その ``position`` を直接設定しないでくだ"
"さい。代わりに、\\ ``move_and_collide()`` または ``move_and_slide()`` メソッ"
"ドを使用します。これらのメソッドは、指定されたベクトルに沿ってボディを移動"
"し、別のボディとの衝突が検出されるとすぐに停止します。ボディが衝突した後の衝"
"突に対する応答は手動でコーディングする必要があります。"

msgid "Kinematic collision response"
msgstr "運動学的衝突応答"

msgid ""
"After a collision, you may want the body to bounce, to slide along a wall, "
"or to alter the properties of the object it hit. The way you handle "
"collision response depends on which method you used to move the "
"KinematicBody2D."
msgstr ""
"衝突後、ボディをバウンスさせたり、壁に沿ってスライドさせたり、ヒットしたオブ"
"ジェクトのプロパティを変更したりすることができます。コリジョンレスポンスの処"
"理方法は、KinematicBody2Dの移動に使用した方法によって異なります。"

msgid ":ref:`move_and_collide <class_KinematicBody2D_method_move_and_collide>`"
msgstr ""
"\\ :ref:`move_and_collide <class_KinematicBody2D_method_move_and_collide>`"

msgid ""
"When using ``move_and_collide()``, the function returns a :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` object, which contains "
"information about the collision and the colliding body. You can use this "
"information to determine the response."
msgstr ""
"``move_and_collide()`` を使用すると、関数は :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` オブジェクトを返します。このオブジェクトには、"
"コリジョンと衝突するボディに関する情報が含まれます。この情報を使用して、応答"
"を判別できます。"

msgid ""
"For example, if you want to find the point in space where the collision "
"occurred:"
msgstr "たとえば、衝突が発生した空間内のポイントを検索する場合:"

msgid "Or to bounce off of the colliding object:"
msgstr "または、衝突するオブジェクトから跳ね返るには:"

msgid ":ref:`move_and_slide <class_KinematicBody2D_method_move_and_slide>`"
msgstr "\\ :ref:`move_and_slide <class_KinematicBody2D_method_move_and_slide>`"

msgid ""
"Sliding is a common collision response; imagine a player moving along walls "
"in a top-down game or running up and down slopes in a platformer. While it's "
"possible to code this response yourself after using ``move_and_collide()``, "
"``move_and_slide()`` provides a convenient way to implement sliding movement "
"without writing much code."
msgstr ""
"スライディングは一般的な衝突応答です。トップダウンゲームで壁に沿って移動する"
"プレイヤー、またはプラットフォーマーで坂を上下に走るプレイヤーを想像してくだ"
"さい。\\ ``move_and_collide()`` を使用した後、この応答を自分でコーディングす"
"ることは可能ですが、\\ ``move_and_slide()`` は、多くのコードを書かずにスライ"
"ド移動を実装する便利な方法を提供します。"

msgid ""
"``move_and_slide()`` automatically includes the timestep in its calculation, "
"so you should **not** multiply the velocity vector by ``delta``."
msgstr ""
"``move_and_slide()`` は計算にタイムステップを自動的に含めるため、速度ベクトル"
"に ``delta`` を\\ **掛けないで**\\ ください。"

msgid ""
"For example, use the following code to make a character that can walk along "
"the ground (including slopes) and jump when standing on the ground:"
msgstr ""
"たとえば、次のコードを使用して、地面(坂を含む)に沿って歩き、地面に立っている"
"ときにジャンプできるキャラクターを作成します:"

msgid ""
"See :ref:`doc_kinematic_character_2d` for more details on using "
"``move_and_slide()``, including a demo project with detailed code."
msgstr ""
"``move_and_slide()`` の使い方に関する詳細については、詳細なコードを含むデモプ"
"ロジェクトを含んだ :ref:`doc_kinematic_character_2d` を参照してください。"

msgid "Translation status"
msgstr "翻訳ステータス"
