# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using KinematicBody2D"
msgstr "KinematicBody2Dの使用"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Godot offers several collision objects to provide both collision detection "
"and response. Trying to decide which one to use for your project can be "
"confusing. You can avoid problems and simplify development if you understand "
"how each of them works and what their pros and cons are. In this tutorial, "
"we'll look at the :ref:`KinematicBody2D <class_KinematicBody2D>` node and "
"show some examples of how to use it."
msgstr ""
"Godotは、衝突の検出と応答の両方を提供するいくつかのコリジョンオブジェクトを提"
"供します。 プロジェクトに使用するものを決定しようとすると、混乱する可能性があ"
"ります。 それぞれがどのように機能し、それぞれの長所と短所を理解していれば、問"
"題を回避して開発を簡素化できます。 このチュートリアルでは、\\ :ref:"
"`KinematicBody2D <class_KinematicBody2D>` ノードを見て、その使用方法の例を示"
"します。"

msgid ""
"This document assumes you're familiar with Godot's various physics bodies. "
"Please read :ref:`doc_physics_introduction` first."
msgstr ""
"このドキュメントは、あなたがGodotのさまざまな物理ボディに精通していることを前"
"提としています。最初に :ref:`doc_physics_introduction` をお読みください。"

msgid "What is a kinematic body?"
msgstr "キネマティック(kinematic)ボディとは何ですか?"

msgid ""
"``KinematicBody2D`` is for implementing bodies that are controlled via code. "
"Kinematic bodies detect collisions with other bodies when moving, but are "
"not affected by engine physics properties, like gravity or friction. While "
"this means that you have to write some code to create their behavior, it "
"also means you have more precise control over how they move and react."
msgstr ""
"``KinematicBody2D``は、コードで制御されるボディを実装するためのものです。 キ"
"ネマティックボディは、移動時に他のボディとの衝突を検出しますが、重力や摩擦な"
"どのエンジンの物理特性の影響を受けません。 これは、動作を作成するためにコード"
"を記述する必要があることを意味しますが、それらがどのように動き、反応するかを"
"より正確に制御できることも意味します。"

msgid ""
"A `KinematicBody2D` can be affected by gravity and other forces, but you "
"must calculate the movement in code. The physics engine will not move a "
"`KinematicBody2D`."
msgstr ""
"``KinematicBody2D`` は重力やその他の力の影響を受ける可能性がありますが、コー"
"ドで動きを計算する必要があります。 物理エンジンは ``KinematicBody2D`` を移動"
"しません。"

msgid "Movement and collision"
msgstr "動きと衝突"

msgid ""
"When moving a ``KinematicBody2D``, you should not set its ``position`` "
"property directly. Instead, you use the ``move_and_collide()`` or "
"``move_and_slide()`` methods. These methods move the body along a given "
"vector and instantly stop if a collision is detected with another body. "
"After a KinematicBody2D has collided, any *collision response* must be coded "
"manually."
msgstr ""
"``KinematicBody2D`` を移動する場合は、\\ ``position`` プロパティを直接設定し"
"ないでください。代わりに、\\ ``move_and_collide()`` または "
"``move_and_slide()`` メソッドを使用します。これらのメソッドは、特定のベクトル"
"に沿ってボディを移動し、別のボディとの衝突が検出された場合は即座に停止しま"
"す。KinematicBody2D が衝突した後、\\ *衝突応答* を手動でコーディングする必要"
"があります。"

msgid ""
"You should only do Kinematic body movement in the ``_physics_process()`` "
"callback."
msgstr ""
"``_physics_process()`` コールバックでのみキネマティックボディの動きを行う必要"
"があります。"

msgid ""
"The two movement methods serve different purposes, and later in this "
"tutorial, you'll see examples of how they work."
msgstr ""
"2つの移動方法の目的は異なります。このチュートリアルの後半では、それらの動作方"
"法の例を参照します。"

msgid "``move_and_collide``"
msgstr "\\ ``move_and_collide``"

msgid ""
"This method takes one parameter: a :ref:`Vector2 <class_Vector2>` indicating "
"the body's relative movement. Typically, this is your velocity vector "
"multiplied by the frame timestep (``delta``). If the engine detects a "
"collision anywhere along this vector, the body will immediately stop moving. "
"If this happens, the method will return a :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` object."
msgstr ""
"このメソッドは1つのパラメーターを取ります: ボディの相対的な動きを示す :ref:"
"`Vector2 <class_Vector2>`\\ 。 通常、これは速度ベクトルにフレームタイムステッ"
"プ(``delta``)を掛けたものです。 エンジンがこのベクトルに沿ったどこかで衝突を"
"検出すると、ボディはすぐに動きを停止します。 この場合、メソッドは :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` オブジェクトを返します。"

msgid ""
"``KinematicCollision2D`` is an object containing data about the collision "
"and the colliding object. Using this data, you can calculate your collision "
"response."
msgstr ""
"``KinematicCollision2D`` は、衝突とコリジョンオブジェクトに関するデータを含む"
"オブジェクトです。 このデータを使用して、衝突応答を計算できます。"

msgid "``move_and_slide``"
msgstr "\\ ``move_and_slide``"

msgid ""
"The ``move_and_slide()`` method is intended to simplify the collision "
"response in the common case where you want one body to slide along the "
"other. It is especially useful in platformers or top-down games, for example."
msgstr ""
"``move_and_slide()`` メソッドは、一方のボディをもう一方のボディに沿ってスライ"
"ドさせたいという一般的なケースで衝突応答を単純化することを目的としています。 "
"たとえば、プラットフォーマーやトップダウンゲームで特に役立ちます。"

msgid ""
"``move_and_slide()`` automatically calculates frame-based movement using "
"``delta``. Do *not* multiply your velocity vector by ``delta`` before "
"passing it to ``move_and_slide()``."
msgstr ""
"``move_and_slide()`` は ``delta`` を使用してフレームベースの動きを自動的に計"
"算します。 速度ベクトルを ``delta`` で乗算\\ *ぜず*\\ に ` move_and_slid()`` "
"に渡します。"

msgid ""
"In addition to the velocity vector, ``move_and_slide()`` takes a number of "
"other parameters allowing you to customize the slide behavior:"
msgstr ""
"速度ベクトルに加えて、\\ ``move_and_slide()`` は他の多くのパラメーターを取"
"り、スライドの動作をカスタマイズできます:"

#, fuzzy
msgid "``up_direction`` - *default value:* ``Vector2( 0, 0 )``"
msgstr "``floor_normal`` - *デフォルト値:* ``Vector2( 0, 0 )``"

msgid ""
"This parameter allows you to define what surfaces the engine should consider "
"being the floor. Setting this lets you use the ``is_on_floor()``, "
"``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of "
"surface the body is in contact with. The default value means that all "
"surfaces are considered walls."
msgstr ""
"このパラメーターを使用すると、エンジンが床と見なすサーフェスを定義できます。 "
"これを設定すると、\\ ``is_on_floor()``\\ 、\\ ``is_on_wall()``\\ 、および "
"``is_on_ceiling()`` メソッドを使用して、ボディが接触している表面のタイプを検"
"出できます。 デフォルト値は、すべてのサーフェスが壁と見なされることを意味しま"
"す。"

#, fuzzy
msgid "``stop_on_slope`` - *default value:* ``false``"
msgstr "``slope_stop_min_velocity`` - *デフォルト値:* ``5``"

#, fuzzy
msgid ""
"This parameter prevents a body from sliding down slopes when standing still."
msgstr ""
"このパラメーターは、斜面に立っているときに移動するために必要な最小速度です。 "
"静止しているときに身体が滑り落ちるのを防ぎます。"

#, fuzzy
msgid "``max_slides`` - *default value:* ``4``"
msgstr "``max_bounces`` - *デフォルト値:* ``4``"

msgid ""
"This parameter is the maximum number of collisions before the body stops "
"moving. Setting it too low may prevent movement entirely."
msgstr ""
"このパラメーターは、ボディが移動を停止するまでの衝突の最大数です。 設定が低す"
"ぎると、動きが完全に妨げられる場合があります。"

msgid ""
"``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent "
"to ``45`` degrees)"
msgstr ""
"``floor_max_angle`` - *デフォルト値:* ``0.785398`` (ラジアンで、\\ ``45`` 度"
"に相当)"

msgid ""
"This parameter is the maximum angle before a surface is no longer considered "
"a \"floor.\""
msgstr ""
"このパラメーターは、サーフェスが「床」と見なされなくなる前の最大角度です。"

#, fuzzy
msgid "``infinite_inertia`` - *default value:* ``true``"
msgstr "``max_bounces`` - *デフォルト値:* ``4``"

msgid ""
"When this parameter is ``true``, the body can push :ref:`RigidBody2D "
"<class_RigidBody2D>` nodes, ignoring their mass, but won't detect collisions "
"with them. If it's ``false`` the body will collide with rigid bodies and "
"stop."
msgstr ""

msgid "``move_and_slide_with_snap``"
msgstr "\\ ``move_and_slide_with_snap``"

#, fuzzy
msgid ""
"This method adds some additional functionality to ``move_and_slide()`` by "
"adding the ``snap`` parameter. As long as this vector is in contact with the "
"ground, the body will remain attached to the surface. Note that this means "
"you must disable snapping when jumping, for example. You can do this either "
"by setting ``snap`` to ``Vector2.ZERO`` or by using ``move_and_slide()`` "
"instead."
msgstr ""
"このメソッドは ``snap`` パラメータを追加することで ``move_and_slide()`` にい"
"くつかの追加機能を追加します。 このベクトルが地面に接触している限り、身体は表"
"面に付着したままになります。 これは、たとえばジャンプするときにスナップを無効"
"にする必要があることを意味します。 これを行うには、\\ ``snap`` を "
"``Vector2(0, 0)`` に設定するか、代わりに ``move_and_slide()`` を使用します。"

#, fuzzy
msgid "Detecting collisions"
msgstr "コリジョン(衝突/当り判定)の準備"

#, fuzzy
msgid ""
"When using ``move_and_collide()`` the function returns a "
"``KinematicCollision2D`` directly, and you can use this in your code."
msgstr ""
"``move_and_collide()`` を使用すると、関数は :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` オブジェクトを返します。このオブジェクトには、"
"コリジョンと衝突するボディに関する情報が含まれます。この情報を使用して、応答"
"を判別できます。"

msgid ""
"When using ``move_and_slide()`` it's possible to have multiple collisions "
"occur, as the slide response is calculated. To process these collisions, use "
"``get_slide_count()`` and ``get_slide_collision()``:"
msgstr ""

msgid ""
"`get_slide_count()` only counts times the body has collided and changed "
"direction."
msgstr ""

msgid ""
"See :ref:`KinematicCollision2D <class_KinematicCollision2D>` for details on "
"what collision data is returned."
msgstr ""

msgid "Which movement method to use?"
msgstr "使用する移動方法は？"

msgid ""
"A common question from new Godot users is: \"How do you decide which "
"movement function to use?\" Often, the response is to use "
"``move_and_slide()`` because it's \"simpler,\" but this is not necessarily "
"the case. One way to think of it is that ``move_and_slide()`` is a special "
"case, and ``move_and_collide()`` is more general. For example, the following "
"two code snippets result in the same collision response:"
msgstr ""
"新しいGodotユーザーからの一般的な質問は、「どの移動関数を使用するのかを、どの"
"ように決めればいいですか？」というものですが、 多くの場合、その答えは 「より"
"簡単」な ``move_and_slide()`` を使用することですが、必ずしも全てがそうではあ"
"りません。 判断をする一つの方法は、\\ ``move_and_slide()`` は特殊なケースであ"
"り、\\ move_and_collide()`` はより一般的であるということです。 たとえば、次の"
"2つのコードスニペットは同じ衝突応答になります:"

msgid ""
"Anything you do with ``move_and_slide()`` can also be done with "
"``move_and_collide()``, but it might take a little more code. However, as "
"we'll see in the examples below, there are cases where ``move_and_slide()`` "
"doesn't provide the response you want."
msgstr ""
"``move_and_slide()`` で行うことはすべて ``move_and_collide()`` でもできます"
"が、もう少しコードが必要になる場合があります。 ただし、以下の例で見るよう"
"に、 ``move_and_slide()`` が希望する応答を提供しない場合があります。"

msgid ""
"In the example above, we assign the velocity that ``move_and_slide()`` "
"returns back into the ``velocity`` variable. This is because when the "
"character collides with the environment, the function recalculates the speed "
"internally to reflect the slowdown."
msgstr ""
"上記の例では、\\ ``move_and_slide()`` が ``velocity`` 変数に戻す速度を割り当"
"てます。 これは、キャラクターが環境と衝突すると、関数が速度を内部的に再計算し"
"てスローダウンを反映するためです。"

msgid ""
"For example, if your character fell on the floor, you don't want it to "
"accumulate vertical speed due to the effect of gravity. Instead, you want "
"its vertical speed to reset to zero."
msgstr ""
"たとえば、キャラクターが床に落ちた場合、重力の影響により垂直速度を蓄積するこ"
"とは望ましくありません。 代わりに、垂直速度をゼロにリセットする必要がありま"
"す。"

msgid ""
"``move_and_slide()`` may also recalculate the kinematic body's velocity "
"several times in a loop as, to produce a smooth motion, it moves the "
"character and collides up to five times by default. At the end of the "
"process, the function returns the character's new velocity that we can store "
"in our ``velocity`` variable, and use on the next frame."
msgstr ""
"``move_and_slide()`` は、キネマティックボディの速度をループ内で数回再計算し、"
"スムーズなモーションを生成するために、キャラクターを移動し、デフォルトで最大5"
"回衝突する場合があります。 プロセスの最後で、関数は ``velocity`` 変数に保存"
"し、次のフレームで使用できるキャラクターの新しい速度を返します。"

msgid "Examples"
msgstr "例"

msgid ""
"To see these examples in action, download the sample project: :download:"
"`using_kinematic2d.zip <files/using_kinematic2d.zip>`."
msgstr ""
"これらの例を実際に見るには、サンプルプロジェクトをダウンロードします: :"
"download:`using_kinematic2d.zip <files/using_kinematic2d.zip>`\\ 。"

msgid "Movement and walls"
msgstr "動きと壁"

msgid ""
"If you've downloaded the sample project, this example is in \"BasicMovement."
"tscn\"."
msgstr ""
"サンプルプロジェクトをダウンロードした場合、この例は\"BasicMovement.tscn\"に"
"あります。"

msgid ""
"For this example, add a ``KinematicBody2D`` with two children: a ``Sprite`` "
"and a ``CollisionShape2D``. Use the Godot \"icon.png\" as the Sprite's "
"texture (drag it from the Filesystem dock to the *Texture* property of the "
"``Sprite``). In the ``CollisionShape2D``'s *Shape* property, select \"New "
"RectangleShape2D\" and size the rectangle to fit over the sprite image."
msgstr ""
"この例では、\\ ``Sprite`` と ``CollisionShape2D`` の2つの子を持つ "
"``KinematicBody2D`` を追加します。 Godot \"icon.png\"をSpriteのテクスチャとし"
"て使用します(ファイルシステムドックから ``Sprite`` の *Texture* プロパティに"
"ドラッグします)。\\ ``CollisionShape2D`` の *Shape* プロパティで、「新規 "
"RectangleShape2D」を選択し、スプライト画像に収まるように長方形のサイズを変更"
"します。"

msgid ""
"See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr ""
"2D移動スキームの実装例については、\\ :ref:`doc_2d_movement` を参照してくださ"
"い。"

msgid "Attach a script to the KinematicBody2D and add the following code:"
msgstr "KinematicBody2Dにスクリプトをアタッチし、次のコードを追加します:"

msgid ""
"Run this scene and you'll see that ``move_and_collide()`` works as expected, "
"moving the body along the velocity vector. Now let's see what happens when "
"you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with "
"a rectangular collision shape. For visibility, you can use a sprite, a "
"Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""
"このシーンを実行すると、\\ ``move_and_collide()`` が期待どおりに動作し、ボ"
"ディが速度ベクトルに沿って移動することがわかります。 障害物を追加するとどうな"
"るか見てみましょう。 長方形の衝突形状を持つ :ref:`StaticBody2D "
"<class_StaticBody2D>` を追加します。 可視性を確保するには、Spriteまたは"
"Polygon2Dを使用するか、「デバッグ」メニューから「コリジョン形状の表示」をオン"
"にします。"

msgid ""
"Run the scene again and try moving into the obstacle. You'll see that the "
"``KinematicBody2D`` can't penetrate the obstacle. However, try moving into "
"the obstacle at an angle and you'll find that the obstacle acts like glue - "
"it feels like the body gets stuck."
msgstr ""
"シーンを再度実行し、障害物に移動してみてください。\\ ``KinematicBody2D`` が障"
"害物を貫通できないことがわかります。 ただし、障害物に斜めに移動してみてくださ"
"い。障害物が接着剤のように機能することがわかります。ボディが立ち往生している"
"ように感じます。"

msgid ""
"This happens because there is no *collision response*. "
"``move_and_collide()`` stops the body's movement when a collision occurs. We "
"need to code whatever response we want from the collision."
msgstr ""
"これは、\\ *collision response * がないために発生します。\\ "
"``move_and_collide()`` は衝突が発生したときに体の動きを止めます。 衝突からの"
"応答をコーディングする必要があります。"

msgid ""
"Try changing the function to ``move_and_slide(velocity)`` and running again. "
"Note that we removed ``delta`` from the velocity calculation."
msgstr ""
"関数を ``move_and_slide(velocity)`` に変更して、もう一度実行してみてくださ"
"い。 速度計算から ``delta`` を削除していることに注意してください。"

msgid ""
"``move_and_slide()`` provides a default collision response of sliding the "
"body along the collision object. This is useful for a great many game types, "
"and may be all you need to get the behavior you want."
msgstr ""
"``move_and_slide()`` は、コリジョンオブジェクトに沿ってボディをスライドさせる"
"デフォルトの衝突応答を提供します。 これは非常に多くの種類のゲームに有用であ"
"り、必要な動作を得るために必要なものすべてである場合があります。"

msgid "Bouncing/reflecting"
msgstr "反発/反射"

msgid ""
"What if you don't want a sliding collision response? For this example "
"(\"BounceandCollide.tscn\" in the sample project), we have a character "
"shooting bullets and we want the bullets to bounce off the walls."
msgstr ""
"スライドする衝突応答は必要ない場合はどうしますか？ この例(サンプルプロジェク"
"トの\"BounceandCollide.tscn\")には、弾丸を発射するキャラクターがあり、弾丸が"
"壁から跳ね返るようにする必要があります。"

msgid ""
"This example uses three scenes. The main scene contains the Player and "
"Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""
"この例では、3つのシーンを使用しています。 メインシーンには、プレイヤーと壁が"
"含まれています。 BulletとWallは別々のシーンであるため、インスタンス化できま"
"す。"

msgid ""
"The Player is controlled by the `w` and `s` keys for forward and back. "
"Aiming uses the mouse pointer. Here is the code for the Player, using "
"``move_and_slide()``:"
msgstr ""
"プレイヤーは\\ ``w`` および ``s`` キーで前後に制御されます。 照準はマウスポイ"
"ンターを使用します。 プレイヤーのコードは、\\ ``move_and_slide()`` を使用して"
"います:"

msgid "And the code for the Bullet:"
msgstr "そして、弾丸のコード:"

msgid ""
"The action happens in ``_physics_process()``. After using "
"``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` "
"object is returned (otherwise, the return is ``Nil``)."
msgstr ""
"アクションは ``_physics_process()`` で発生します。\\ ``move_and_collide()`` "
"を使用した後、衝突が発生した場合、\\ ``KinematicCollision2D`` オブジェクトが"
"返されます(そうでない場合、戻り値は ``Nil`` です)。"

msgid ""
"If there is a returned collision, we use the ``normal`` of the collision to "
"reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""
"返されたコリジョンがある場合、コリジョンの ``normal`` を使用して\\ ``Vector2."
"bounce()`` メソッドで弾丸の ``velocity`` を反映します。"

msgid ""
"If the colliding object (``collider``) has a ``hit`` method, we also call "
"it. In the example project, we've added a flashing color effect to the Wall "
"to demonstrate this."
msgstr ""
"衝突するオブジェクト(``collider``) に ``hit`` メソッドがある場合、それも呼び"
"出します。 サンプルプロジェクトでは、これを示すために壁に点滅する色の効果を追"
"加しました。"

msgid "Platformer movement"
msgstr "プラットフォームの動き"

msgid ""
"Let's try one more popular example: the 2D platformer. ``move_and_slide()`` "
"is ideal for quickly getting a functional character controller up and "
"running. If you've downloaded the sample project, you can find this in "
"\"Platformer.tscn\"."
msgstr ""
"もう1つの一般的な例を試してみましょう。2Dプラットフォーマーです。\\ "
"``move_and_slide()`` は、機能するキャラクターコントローラーを素早く起動して実"
"行するのに理想的です。 サンプルプロジェクトをダウンロードした場合"
"は、\"Platformer.tscn\"で見つけることができます。"

msgid ""
"For this example, we'll assume you have a level made of ``StaticBody2D`` "
"objects. They can be any shape and size. In the sample project, we're using :"
"ref:`Polygon2D <class_Polygon2D>` to create the platform shapes."
msgstr ""
"この例では、レベルが ``StaticBody2D`` オブジェクトで構成されていると仮定しま"
"す。 任意の形状とサイズを使用できます。 サンプルプロジェクトでは、\\ :ref:"
"`Polygon2D <class_Polygon2D>` を使用してプラットフォームの形状を作成していま"
"す。"

msgid "Here's the code for the player body:"
msgstr "プレイヤーの本体のコードは次のとおりです:"

msgid ""
"When using ``move_and_slide()``, the function returns a vector representing "
"the movement that remained after the slide collision occurred. Setting that "
"value back to the character's ``velocity`` allows us to move up and down "
"slopes smoothly. Try removing ``velocity =`` and see what happens if you "
"don't do this."
msgstr ""
"``move_and_slide()`` を使用すると、この関数は、スライド衝突が発生した後に残っ"
"た動きを表すベクトルを返します。 その値をキャラクターの ``velocity`` に戻すこ"
"とで、斜面をスムーズに上下できます。\\ ``velocity = `` を削除して、これを行わ"
"ないとどうなるかを確認してください。"

msgid ""
"Also note that we've added ``Vector2(0, -1)`` as the floor normal. This "
"vector points straight upward. As a result, if the character collides with "
"an object that has this normal, it will be considered a floor."
msgstr ""
"また、フロアの法線として ``Vector2(0, -1)`` を追加したことに注意してくださ"
"い。 このベクトルはまっすぐ上を指します。 その結果、キャラクターがこの法線を"
"持つオブジェクトと衝突した場合、そのオブジェクトは床と見なされます。"

msgid ""
"Using the floor normal allows us to make jumping work, using "
"``is_on_floor()``. This function will only return ``true`` after a "
"``move_and_slide()`` collision where the colliding body's normal is within "
"45 degrees of the given floor vector. You can control the maximum angle by "
"setting ``floor_max_angle``."
msgstr ""
"フロア法線を使用すると、\\ ``is_on_floor()`` を使用してジャンプ作業を行うこと"
"ができます。 この関数は、衝突する物体の法線が与えられた床ベクトルの45度以内に"
"ある ``move_and_slide()`` 衝突後にのみ ``true`` を返します。\\ "
"``floor_max_angle`` を設定することで最大角度を制御できます。"

msgid ""
"This angle also allows you to implement other features like wall jumps using "
"``is_on_wall()``, for example."
msgstr ""
"この角度により、たとえば ``is_on_wall()`` を使用して壁ジャンプなどの他の機能"
"を実装することもできます。"

msgid "Translation status"
msgstr "翻訳ステータス"
