# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Nodes and terminology"
msgstr "Ноды и Терминология"

msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"Прежде чем продолжить, следует отметить, что термин *Node* (\"Узел\") "
"необходимо использовать с осторожностью. При ссылке на *Visual Script Nodes* "
"(\"Узлы Визуального Скрипта\") (или вообще *Nodes* (\"Узлы\")) этот текст "
"будет ссылаться на маленькие прямоугольники, которые вы соединяете линиями и "
"которые являются частью графа. При ссылке на *Scene Nodes* (\"Узлы Сцены\") "
"подразумевается, что мы ссылаемся на элементы, составляющие Сцену, которые "
"являются частью дерева узлов. Их имена похожи, но функциональность разная. "
"При ссылке на *Node* (\"Узел\") здесь подразумевается ссылка на *Visual "
"Script Node* (\"Узлы Визуального Скрипта\"), если не указано иное."

msgid "Node properties"
msgstr "Свойства узла"

msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"Как и в большинстве реализаций визуальных сценариев, каждый узел имеет "
"редактируемые свойства. В Godot, тем не менее, мы пытаемся избежать "
"раздувания узлов с помощью редактируемых элементов управления для удобства "
"чтения."

msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""
"Узлы по-прежнему отображают необходимую информацию в виде текста, но "
"редактирование выполняется с помощью *Inspector*. Чтобы редактировать их, "
"выберите любой узел и отредактируйте его свойства в *Inspector*."

msgid "Ports and connections"
msgstr "Порты и соединения"

msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Программирование в Godot Visual Scripting происходит через *Nodes* и *Port "
"Connections* внутри каждой функции."

msgid "Ports"
msgstr "Порты"

msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Узлы в Godot Visual Scripting имеют *Ports* (Порты). Это конечные точки, "
"которые появляются слева и справа от узлов, которые можно использовать для "
"создания *Connections*(Соединений): существует два типа *Ports* (Портов): "
"*Sequence* (Последовательность) и *Data* (Данные)."

msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""
"*Sequence Ports* (\"Последовательные порты\") указывают порядок, в котором "
"выполняются операции. Как правило, когда *Node* (\"Узел\") завершает "
"обработку, он переходит к следующему узлу через один из портов справа. Если "
"к узлу ничего не подключено, функция может завершиться, или может быть "
"выбран другой выход *Sequence Port* (\"Последовательного порта\") (это "
"зависит от узла). Благодаря этому вы можете следить за логикой внутри "
"функции, следуя по белым линиям. Не каждый *Node* (\"Узел\") имеет *Sequence "
"Ports* (\"Последовательные порты\"). На самом деле в большинстве случаев их "
"нет."

msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"*Data Ports* (\"Порты данных\") содержат типизированные данные. Типы могут "
"быть любыми обычными типами Godot, такими как булево, целое число, строка, "
"Vector3, массив, любой Объект или Узел Сцены и т.п. *Data Ports* (\"Порты "
"данных\") на правой стороне узла считается выходом, а порт на левой стороне "
"- входом. Соединение с ним позволяет передавать информацию на следующий узел."

msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"Однако не все типы *Data Port* (\"Порты данных\") совместимы и разрешают "
"соединения. Обратите особое внимание на цвета и значки, так как каждый тип "
"имеет свое представление:"

msgid "Connections"
msgstr "Соединения"

msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""
"Подключение является относительно простым процессом. Перетащите *Output "
"Port* (\"Выходной порт\") к *Input Port* (\"Входному порту\")."

msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"Отключение требует немного больше практики. Отключение *Data Ports* "
"(\"Портов данных\") происходит путем перетаскивания к *Input* (ко "
"\"Входу\"), напротив, отключение *Sequence Ports* (\"Последовательных "
"портов\") происходит путем перетаскивания к *Output* (к \"Выходу\")."

msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""
"Поначалу это может показаться странным, но это происходит потому, что *Data "
"Ports* (\"Порты данных\") подключаются по схеме 1:N (один порт вывода может "
"быть соединен с несколькими входами), в то время как *Sequence Ports* "
"(\"Последовательные порты\") подключаются по схеме N:1 (много "
"последовательных выходов могут быть соединены с одним входом)."

msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"Подключение к пустому пространству (перетаскивание линии соединения на "
"пустое место без нажатия) является также контекстно зависимым, оно "
"предоставит список наиболее распространенных операций:"

msgid "While, for data, a contextual set/get/call menu will open:"
msgstr ""
"Соответственно для данных откроется контекстное меню установки/получения/"
"вызова:"

msgid "Adding nodes"
msgstr "Создание узлов"

msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"И в заключении! Мы получили самое интересное! Но прежде чем объяснять более "
"подробно, что делает каждый тип узла, давайте кратко рассмотрим, как "
"наиболее часто добавляются и обрабатываются узлы."

msgid "Accessing scene nodes"
msgstr "Доступ к узлам сцены"

msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"Одной из наиболее распространенных задач является доступ к узлам дерева сцен "
"(опять же, не путать с *Visual Script Nodes* (\"Узлами Визуального "
"Скрипта\")). Перетаскивание узла из дерева сцен на канву попросит вас "
"*вызвать метод* (иногда называемый *функцией-членом*) в этом узле."

msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"Хотя доступ к свойствам желателен в большинстве случаев (подробнее об этом "
"ниже), иногда также может быть полезен *вызов методов*. Методы выполняют "
"определенные действия над объектами. Другим распространенным вариантом "
"использования является постановка узла в очередь для удаления, что "
"осуществляется с помощью метода *queue_free*."

msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"Необходимо убедиться, что это работает, только если редактируемая сцена "
"содержит ваш *Visual Script* (\"Визуальный скрипт\") в одном из узлов! В "
"противном случае будет показано предупреждение."

msgid "Accessing scene node properties"
msgstr "Доступ к свойствам узлов сцены"

msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"Это наиболее распространенный способ редактирования *Узлов Сцены* в "
"визуальных сценариях. Выберите *Scene Node* (\"Узел сцены\") из *Scene Tree* "
"(\"Дерева сцены\"), перейдите к Инспектору, найдите *Имя* свойства, которое "
"вы хотите редактировать (подсказку, *не* значение!) и перетащите его на "
"холст:"

msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""
"В результате это значение может быть изменено из вашего сценария путем "
"записи в *Data Port* (\"Порт данных\")."

msgid ""
"If instead reading this value is desired, drag the node again but hold :kbd:"
"`Ctrl` (or :kbd:`Cmd` on macOS). This will create a getter:"
msgstr ""
"Если вместо этого требуется чтение этого значения, перетащите узел еще раз, "
"но удерживайте клавишу :kbd:`Ctrl` (или:kbd:`Cmd` на macOS). Это создаст "
"\"производитель\"(\"getter\"):"

msgid "In this case, the value can be read from a *Data Port*."
msgstr ""
"В этом случае значение может быть прочитано из *Data Port* (\"Порта "
"данных\")."

msgid "Variables"
msgstr "Переменные"

msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"Переменные - это контейнеры памяти, локальные для скрипта, которые могут "
"содержать значение. Это значение можно прочитать из любой функции скрипта "
"или из других скриптов с помощью метода, описанного в предыдущем шаге."

msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"Чтобы добавить переменную, нажмите кнопку «+» в секции *Variables* "
"(\"Переменные\") пользовательской панели. Дважды кликните на новой "
"переменной, чтобы переименовать ее:"

msgid "Right-clicking the variable allows you to configure its properties:"
msgstr ""
"Щелчок правой кнопкой мыши по переменной позволяет настроить ее свойства:"

msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""
"Как было показано выше, можно изменить тип и начальное значение переменной, "
"а также некоторые ее свойства. Отметка «Экспорт» делает эту переменную "
"видимой в Инспекторе при выборе узла. Это также делает ее доступной для "
"других сценариев с помощью метода, описанного в предыдущем шаге."

msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""
"Чтобы использовать переменную в скрипте, просто перетащите ее на канву, "
"чтобы создать геттер:"

msgid "Likewise, hold :kbd:`Ctrl` (or :kbd:`Cmd` on macOS) to drop a setter:"
msgstr ""
"Аналогично, удерживайте :kbd:`Ctrl` (или :kbd:`Cmd` на macOS), чтобы "
"получился сеттер:"

msgid "Signals"
msgstr "Сигналы"

msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"Также возможно создавать свои собственные сигналы в скрипте и использовать "
"их. Для этого выполните те же шаги, что и для переменных на предыдущем шаге, "
"но для *Signals*:"

msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr ""
"Сигнал также может быть отредактирован через контекстное меню, позволяющее "
"настроить его аргументы:"

msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""
"Созданный вами сигнал появится в Инспекторе вместе с встроенными сигналами "
"узла. Это позволит вам подключить его из другого скрипта другого *Scene "
"Node* (\"Узла сцены\"):"

msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr "Наконец, чтобы отправить сигнал, просто перетащите его на холст:"

msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""
"Помните, что отправка сигнала - это последовательная операция, поэтому он "
"должен поступать из последовательного порта."

msgid "Adding more nodes"
msgstr "Добавление дополнительных узлов"

msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"Теперь, когда основы описаны, давайте обсудим большое количество "
"вспомогательных узлов, доступных для вашего холста! Под панелью элементов "
"существует список всех доступных типов узлов:"

msgid ""
"Pressing :kbd:`Ctrl + F` (or :kbd:`Cmd + F` on macOS) allows you to search "
"the list."
msgstr ""
"Нажатие :kbd:`Ctrl + F` ( или :kbd:`Cmd + F` на macOS) позволит осуществить "
"поиск в списке."

msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"Любой из них может быть помещен на сцену. В отличие от узлов (например, "
"перетаскивание свойства из Инспектора устанавливает контекст для узла, "
"редактируемого автоматически), они добавляются без какой-либо «контекстной» "
"информации, поэтому это необходимо сделать вручную."

msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"Помните, что вы можете проверить ссылку на класс на предмет того, что делает "
"каждый узел, так как они там задокументированы. Тем не менее, краткий обзор "
"типов узлов приведен ниже:"

msgid "Constants"
msgstr "Константы"

msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"Constant узлы - это узлы предоставляющие значения, которые, не изменяясь во "
"времени, могут быть полезны в качестве эталонных значений. Чаще всего они "
"целочисленные или с плавающей запятой."

msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""
"Первым из них является постоянный узел «Константа», который позволяет вам "
"выбрать любое значение любого типа в качестве константы, от целого числа "
"(42) до строки («Привет!»). В большинстве случаев этот узел используется не "
"часто из-за входных значений по умолчанию в *Data Ports* (Портах данных), но "
"хорошим тоном будет знать, что он существует."

msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"Вторым является постоянный узел GlobalConstant (Глобальная Константа), "
"который содержит длинный список констант для глобальных типов в Godot. Там "
"вы можете найти несколько полезных констант для обозначения имен клавиш, "
"джойстика или кнопок мыши и т.п."

msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr ""
"Третьим постоянным узлом является MathConstant (МатематическаяКонстанта), "
"который предоставляет типичные математические константы, такие как число PI, "
"E и т.д."

msgid "Data"
msgstr "Данные"

msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"Узлы данных имеют дело со всеми видами доступа к информации. Любая "
"информация в Godot доступна через эти узлы, поэтому они являются одними из "
"самых важных для использования и довольно разнообразными."

msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr ""
"Среди них есть много интересующих нас типов узлов, поэтому далее последует "
"попытка коротко их описать:"

msgid "Action"
msgstr "Действие"

msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"Узлы действий жизненно важны при вводе с устройства. Вы сможете больше "
"прочитать о действиях в (@TODO ACTION TUTE LINK). В примере, приведенном "
"ниже, элемент управления перемещается вправо при нажатии действия "
"«move_right» (переместить_вправо)."

msgid "Engine Singleton"
msgstr "Синглтон движка"

msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""
"Синглтоны это глобальные интерфейсы (т.е. к ним можно получить доступ без "
"использования ссылок; кроме Scene Nodes (Узлов Сцены) - к ним всегда "
"необходимо обращаться по ссылке). Синглтоны выполняют разные задачи, но "
"наибольшую пользу они приносят при низкоуровневой или нативной для ОС "
"разработке."

msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""
"Запомните, что перемещение связанных ключей в пустую область поможет вам "
"вызвать функцию или set/get свойства:"

msgid "Local Variables"
msgstr "Локальные Переменные"

msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""
"Это узлы, которые вы можете использовать как временное хранилище для ваших "
"графов. Убедитесь, что все они имеют одинаковое имя и тип при использовании, "
"и они будут ссылаться на один и тот же фрагмент памяти."

msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced setter (setting requires a sequence port)."
msgstr ""
"Как видно выше, доступны два узла: простой геттер и последовательный геттер "
"(для настройки требуется последовательный порт)."

msgid "Scene Node"
msgstr "Узлы Сцены"

msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""
"Это просто ссылка на узел в дереве, но проще использовать этот узел, "
"перетаскивая фактический узел из дерева сцены на холст (это создаст его и "
"настроит)."

msgid "Self"
msgstr "Собственное"

msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""
"В некоторых редких случаях может быть желательно передать этот Узел Сцены в "
"качестве аргумента. Это может использоваться для вызова функций и установки/"
"получения свойств, или перетаскивания узлов (или события самого узла, у "
"которого есть сценарий) из дерева сцен на канву для этого."

msgid "SceneTree"
msgstr "Дерево сцены"

msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""
"Этот узел схож с узлом Singleton потому что он ссылается на SceneTree, "
"который хранит активные сцены. SceneTree, тем не менее, работает только "
"когда этот узел находится в сцене в активном состоянии, иначе же при "
"обращении возникнет ошибка."

msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""
"SceneTree допускает множество низкоуровневых вещей, таких как установка "
"параметров растяжения, вызов групп, создание таймеров или даже загрузка "
"другой сцены. Это хороший класс для знакомства."

msgid "Preload"
msgstr "Предзагрузить"

msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""
"Это выполняет ту же функцию, что и preload() в GDScript. Он поддерживает "
"этот ресурс загруженным и готовым к использованию. Вместо создания "
"экземпляра узла проще перетащить нужный ресурс из дока файловой системы на "
"канву."

msgid "Resource Path"
msgstr "Путь к ресурсу"

msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""
"Этот узел является простым помощником для получения строки с путем к "
"ресурсу, который вы можете выбрать. Это полезно в функциях, которые "
"загружают необходимые данные с диска."

msgid "Comment"
msgstr "Комментарий"

msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""
"Узел Комментарий работает как узел, размер которого можно изменить, чтобы "
"разместить вокруг других узлов. Он не будет пытаться стать текущим или "
"оказаться самым верхним при его выборе. Он также может быть использован для "
"написания текста на нем."

msgid "Flow Control"
msgstr "Управление потоком"

msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""
"Узлы контроля потоков позволяют разделение выполнения кода на различные "
"ветви, обычно зависящее от выполнения каких-либо условий."

msgid "Condition"
msgstr "Условие"

msgid ""
"This is a simple node that checks a bool port. If ``true``, it will go via "
"the \"true\" sequence port. If ``false``, the second. After going for either "
"of them, it goes via the \"done\" port. Leaving sequence ports disconnected "
"is fine if not all of them are used."
msgstr ""
"Это простой узел, который проверяет булевый (bool) порт. Если условие "
"``выполняется (истина)``, он будет проходить через «истинный» (первый) "
"последовательный порт. ``В противном случае`` - через второй. После перехода "
"к любому из них он проходит через «done» (работающий) порт. Оставлять "
"последовательные порты отключенными - это нормально, если не все из них "
"используются."

msgid "Iterator"
msgstr "Итератор"

msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""
"Некоторые типы данных в Godot (то есть массивы, словари) являются "
"итеративными (их элементы можно перебирать в цикле). Это означает, что "
"немного кода может выполняться для каждого элемента, из которых объект "
"такого типа состоит."

msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""
"Узел Итератор проходит через все элементы и, для каждого из них, он проходит "
"через «каждый» последовательный порт, делая элемент доступным в порте данных "
"«elem»."

msgid "When done, it goes via the \"exit\" sequence port."
msgstr "Когда это сделано, он проходит через последовательный порт \"Выход\"."

msgid "Return"
msgstr "Возврат"

msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""
"Некоторые функции могут возвращать значения. В общем случае для виртуальных "
"функций Godot будет добавлять для вас узел Возврата (Return). Узел Возврата "
"(Return) принудительно завершает функцию."

msgid "Sequence"
msgstr "Последовательность"

msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""
"Этот узел полезен в основном для организации вашего графика. Это позволяет "
"вызывать последовательные порты в определенном порядке."

msgid "TypeCast"
msgstr "TypeCаst"

msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""
"Это полезный и часто используемый узел. Вы можете использовать его для "
"приведения аргументов или других объектов к желаемому типу. После этого вы "
"можете даже перетащить вывод объекта, чтобы получить полное завершение."

msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""
"Также возможно приведение к сценарию, который разрешит полные свойства и "
"функции сценария:"

msgid "Switch"
msgstr "Множественный выбор"

msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr ""
"Узел Переключатель аналогичен узлу Условие, но он проверяет совпадение со "
"многими значениями одновременно."

msgid "While"
msgstr "Пока"

msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""
"Это более примитивная форма итерации. Вывод последовательности «repeat» "
"будет вызываться, пока не выполнится условие в порте данных «cond»."

msgid "Functions"
msgstr "Функции"

msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""
"Функции являются простыми помощниками, в большинстве случаев "
"детерминированными. Они принимают некоторые аргументы в качестве входных "
"данных и возвращают выходные данные. Они почти никогда не упорядочены."

msgid "Built-In"
msgstr "Встроенный"

msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from :ref:`GDScript<class_@GDScript>`. Most of them are mathematical "
"functions, but others can be useful helpers. Make sure to take a look at the "
"list at some point."
msgstr ""
"Существует целый ряд встроенных вспомогательных функций. Они почти идентичны "
"тем, что используются в :ref:`GDScript<class_@GDScript>`. Большинство из них "
"представляют из себя математические функции, но другие могут быть полезными "
"помощниками. Обязательно взгляните на них когда-нибудь."

msgid "By Type"
msgstr "По типу"

msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""
"Это методы, доступные для базовых типов. Например, если вам нужен dot-"
"product вектора, ищите \"dot\" вместо того, чтобы искать в категории "
"Vector3. В большинстве случаев просто ищите список узлом, так должно быть "
"быстрее."

msgid "Call"
msgstr "Вызов"

msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""
"Это основной вызывающий узел. Он редко используется напрямую, но может быть "
"добавлен путем перетаскивания его на пустое место в уже настроенный узел."

msgid "Constructors"
msgstr "Конструкторы"

msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""
"Это все функции необходимые для создания базовых типов данных Godot. "
"Например, если вам нужно создать Vector3 из трех float, должен "
"использоваться конструктор."

msgid "Destructor"
msgstr "Деструктор"

msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""
"Это противоположность Конструктору, которая позволяет разделить любой "
"основной тип (например, Vector3) на его под-элементы."

msgid "Emit Signal"
msgstr "Испускание сигнала"

msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""
"Издает сигналы от любого объекта. В общем, это не так полезно, так как "
"перетаскивание сигнала на ``canvas`` работает лучше."

msgid "Get/Set"
msgstr "Получать/Задавать"

msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""
"Общий узел получения/установки. Перетаскивание свойств из Инспектора "
"работает лучше, так как они выглядят правильно настроенными при "
"перетаскивании."

msgid "Wait"
msgstr "Ждать"

msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""
"Узлы ожидания приостановят выполнение функции пока что-нибудь не случится "
"(при этом может пройти не один кадр). Данные узлы по умолчанию позволяют "
"дождаться окончания кадра, прохождения фиксированного количества кадров или "
"определённого количества времени перед продолжением исполнения."

msgid "Yield"
msgstr "Приостановить"

msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""
"Этот узел полностью приостанавливает выполнение скрипта, и функция "
"возвращает значение, которое может быть использовано для возобновления "
"выполнения."

msgid "Yield Signal"
msgstr "Yield Signаl"

msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr ""
"То же, что и Yield, но будет ждать, пока данный сигнал не будет испущен."

msgid "Index"
msgstr "Индекс"

msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""
"Общий оператор индексирования, используется не часто, но он существует, на "
"всякий случай."

msgid "Operators"
msgstr "Операторы"

msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""
"Это в основном общие операторы, такие как сложение, умножение, сравнение и т."
"д. По умолчанию, они принимают в принципе любой тип данных (и будут бросать "
"ошибку во время выполнения, если подаваемые типы не соответствуют ожиданиям "
"оператора). Всегда рекомендуется выбирать правильный тип, чтобы операторы "
"быстрее улавливали ошибки и облегчали чтение графа."

msgid "Expression Node"
msgstr "Узел Выражения"

msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""
"Среди операторов, *Expression* узел самый сильный. При правильном "
"использовании, позволяет вам чрезвычайно упростить визуальные скрипты, в "
"которых много математики и логики. Введите любое выражение и оно будет "
"выполнено в реальном времени."

msgid "Expression nodes can:"
msgstr "Узлы выражений могут:"

msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""
"Выполнить математические и логические вычисления на основе пользовательских "
"входных данных (например, «a * 5 + b», где a и b - пользовательские входные "
"данные):"

msgid "Access local variables or properties:"
msgstr "Доступ к локальным переменным или свойствам:"

msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as ``sin()``, ``cos()``, ``print()``, as well as constructors, such as "
"``Vector3(x, y, z)``, ``Rect2(...)``, etc.:"
msgstr ""
"Используйте множество встроенных функций, доступных для GDScript, таких как "
"``sin()``, ``cos()``, ``print()``, а также конструкторы, такие как "
"``Vector3(x, y, z)``, ``Rect2(...)`` , и так далее:"

msgid "Call API functions:"
msgstr "Вызов API функций:"

msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr ""
"Используйте последовательный режим, который имеет больше смысла в случае "
"соблюдения порядка обработки:"

msgid "Translation status"
msgstr "Translation status (статус перевода)"
