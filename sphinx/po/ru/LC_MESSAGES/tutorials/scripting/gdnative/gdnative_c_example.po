# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDNative C example"
msgstr "Примеры GDNative C"

msgid "Introduction"
msgstr "Введение"

msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative. Understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""
"Этот туториал познакомит вас с минимально необходимым для создания модулей "
"GDNative. Это должно стать вашей отправной точкой в мир GDNative. Понимание "
"этого урока поможет вам понять все, что будет после него."

msgid ""
"Before we begin, you can download the source code to the example object we "
"describe below in the `GDNative-demos repository <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."
msgstr ""
"Прежде чем мы начнем, вы можете загрузить исходный код примера, который мы "
"описываем ниже, из репозитория `GDNative-demos <https://github.com/"
"godotengine/gdnative-demos/tree/master/c/simple>`_."

msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier, but in this tutorial we'll be doing things by hand to "
"understand the process."
msgstr ""
"Этот пример проекта также содержит файл SConstruct, который немного "
"облегчает компиляцию, но в этом туториале мы будем делать все вручную, чтобы "
"понять процесс."

msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, using interfaces such as :ref:`PluginScript "
"<class_PluginScript>` or :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. In this tutorial we are going to look at "
"creating a :ref:`NativeScript <class_NativeScript>` module. NativeScript "
"allows you to write logic in C or C++ in a similar fashion as you would "
"write a GDScript file. We'll be creating the C equivalent of this GDScript:"
msgstr ""
":ref:`GDNative <class_GDNative>` можно использовать для создания нескольких "
"типов дополнений к Godot, используя такие интерфейсы, как :ref:`PluginScript "
"<class_PluginScript>` или :ref:`ARVRInterfaceGDNative "
"<class_ARVRInterfaceGDNative>`. В этом руководстве мы рассмотрим создание "
"модуля :ref:`NativeScript <class_NativeScript>`. NativeScript позволяет вам "
"писать логику на C или C++ аналогично тому, как вы бы написали файл "
"GDScript. Мы создадим C-эквивалент этого GDScript:"

msgid ""
"Future tutorials will focus on the other types of GDNative modules and "
"explain when and how to use each of them."
msgstr ""
"В последующих уроках будут рассмотрены другие типы модулей GDNative и "
"объяснено, когда и как использовать каждый из них."

msgid "Prerequisites"
msgstr "Требования"

msgid "Before we start you'll need a few things:"
msgstr "Прежде чем мы начнем, вам понадобится несколько вещей:"

msgid "A Godot executable for your target version."
msgstr "Исполняемый файл Godot для вашей выбранной версии."

msgid ""
"A C compiler. On Linux, install ``gcc`` or ``clang`` from your package "
"manager. On macOS, you can install Xcode from the Mac App Store. On Windows, "
"you can use Visual Studio 2015 or later, or MinGW-w64."
msgstr ""
"Компилятор языка Си. В Linux установите ``gcc`` или ``clang`` из менеджера "
"пакетов. На macOS вы можете установить Xcode из Mac App Store. В Windows вы "
"можете использовать Visual Studio 2015 или более позднюю версию, или MinGW-"
"w64."

msgid ""
"A Git clone of the `godot-headers repository <https://github.com/godotengine/"
"godot-headers.git>`_: these are the C headers for Godot's public API exposed "
"to GDNative."
msgstr ""
"Клон Git-репозитория `godot-headers <https://github.com/godotengine/godot-"
"headers.git>`_: это заголовки на C для публичного API Godot, используемого в "
"GDNative."

msgid ""
"For the latter, we suggest that you create a dedicated folder for this "
"GDNative example project, open a terminal in that folder and execute:"
msgstr ""
"Мы предлагаем вам создать специальную папку для этого проекта GDNative, "
"открыть терминал в этой папке и выполнить команду:"

msgid "This will download the required files into that folder."
msgstr "Это позволит загрузить необходимые файлы в эту папку."

msgid ""
"If you plan to use Git for your GDNative project, you can also add ``godot-"
"headers`` as a Git submodule."
msgstr ""
"Если вы планируете использовать Git для своего проекта GDNative, вы также "
"можете добавить ``godot-headers`` в качестве подмодуля Git."

msgid ""
"The ``godot-headers`` repository has different branches. As Godot evolves, "
"so does GDNative. While we try to preserve compatibility between version, "
"you should always build your GDNative module against headers matching the "
"Godot stable branch (e.g. ``3.4``) and ideally actual release (e.g. ``3.4.4-"
"stable``) that you use. GDNative modules built against older versions of the "
"Godot headers *may* work with newer versions of the engine, but not the "
"other way around."
msgstr ""
"Репозиторий ``godot-headers`` имеет разные ветки. По мере развития Godot "
"развивается и GDNative. Хотя мы стараемся сохранять совместимость между "
"версиями, вы всегда должны собирать свой GDNative модуль на основе "
"заголовков, соответствующих стабильной ветке Godot (например, ``3.4``) и, в "
"идеале, актуальному релизу (например, ``3.4.4-stable``), который вы "
"используете. Модули GDNative, собранные на основе старых версий заголовков "
"Godot *, могут* работать с более новыми версиями движка, но не наоборот."

msgid ""
"The ``master`` branch of the ``godot-headers`` repository is kept in line "
"with the ``master`` branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest development builds."
msgstr ""
"Ветка ``master`` репозитория ``godot-headers`` поддерживается в соответствии "
"с веткой ``master`` Godot и поэтому содержит определения классов и структур "
"GDNative, которые будут работать с последними разработанными сборками."

#, fuzzy
msgid ""
"If you want to write a GDNative module for a stable version of Godot, look "
"at the available Git tags (with ``git tags``) for the one matching your "
"engine version. In the ``godot-headers`` repository, such tags are prefixed "
"with ``godot-``, so you can e.g. checkout the ``godot-3.4.4-stable`` tag for "
"use with Godot 3.4.4. In your cloned repository, you can do:"
msgstr ""
"Если вы хотите написать модуль GDNative для стабильной версии Godot, "
"посмотрите на доступные Git-теги (с помощью ``git tags``), чтобы найти тот, "
"который соответствует вашей версии движка. В репозитории ``godot-headers`` "
"такие теги имеют префикс ``godot-``, поэтому вы можете, например, проверить "
"тег ``godot-3.1.1-stable`` для использования с Godot 3.1.1. В клонированном "
"репозитории вы можете сделать следующее:"

#, fuzzy
msgid ""
"If a tag matching your stable release is missing for any reason, you can "
"fall back to the matching stable branch (e.g. ``3.4``), which you would also "
"check out with ``git checkout 3.4``."
msgstr ""
"Если тег, соответствующий вашему стабильному релизу, по какой-либо причине "
"отсутствует, вы можете вернуться к соответствующей стабильной ветке "
"(например, ``3.1``), которую вы также проверите с помощью ``git checkout "
"3.1``."

msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""
"Если вы собираете Godot из исходного кода с собственными изменениями, "
"влияющими на GDNative, вы можете найти обновленное определение классов и "
"структур в ``<godotsource>/modules/gdnative/include``"

msgid "Our C source"
msgstr "Исходный файл на С"

msgid ""
"Let's start by writing our main code. Eventually, we want to end up with a "
"file structure that looks along those lines:"
msgstr ""
"Давайте начнем с написания нашего основного кода. В конечном итоге мы хотим "
"получить файловую структуру, которая будет выглядеть примерно так:"

msgid ""
"Open up Godot and create a new project called \"simple\" alongside your "
"``godot-headers`` Git clone. This will create the ``simple`` folder and "
"``project.godot`` file. Then manually create a ``src`` folder alongside the "
"``simple`` folder, and a ``bin`` subfolder in the ``simple`` folder."
msgstr ""
"Откройте Godot и создайте новый проект под названием \"simple\" рядом с "
"вашим Git-клоном ``godot-headers``. Это создаст папку ``simple`` и файл "
"``project.godot``. Затем вручную создайте папку ``rc`` рядом с папкой "
"``simple`` и подпапку ``bin`` в папке ``simple``."

msgid ""
"We're going to start by having a look at what our ``simple.c`` file "
"contains. Now, for our example here we're making a single C source file "
"without a header to keep things simple. Once you start writing bigger "
"projects it is advisable to break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""
"Для начала посмотрим, что содержит наш файл ``simple.c``. В нашем примере мы "
"создаем один исходный файл на языке Си без заголовка, чтобы все было просто. "
"Когда вы начинаете писать более крупные проекты, рекомендуется разбить "
"проект на несколько файлов. Однако это выходит за рамки данного руководства."

msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. Each section will be explained as we "
"add it."
msgstr ""
"Мы будем рассматривать исходный код по частям, поэтому все части ниже должны "
"быть собраны в один большой файл. Каждый фрагмент будет объясняться по мере "
"его добавления."

msgid ""
"The above code includes the GDNative API struct header and a standard header "
"that we will use further down for string operations. It then defines two "
"pointers to two different structs. GDNative supports a large collection of "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""
"Приведенный выше код включает в себя заголовок структуры GDNative API и "
"стандартный заголовок, который мы будем использовать далее для операций со "
"строками. Затем он определяет два указателя на две различные структуры. "
"GDNative поддерживает большую коллекцию функций для обратного вызова в "
"основной исполняемый файл Godot. Для того чтобы ваш модуль имел доступ к "
"этим функциям, GDNative предоставляет вашему приложению структуру, "
"содержащую указатели на все эти функции."

msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""
"Чтобы сохранить модульность и простоту расширения этой реализации, основные "
"функции доступны непосредственно через API структуру \"core\", но "
"дополнительные функции имеют свои собственные \"структуры GDNative\", "
"доступные через расширения."

msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""
"В нашем примере мы обращаемся к одному из этих расширений, чтобы получить "
"доступ к функциям, необходимым для NativeScript."

msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""
"NativeScript ведет себя в Godot как любой другой сценарий. Поскольку API "
"NativeScript довольно низкоуровневый, он требует от библиотеки более "
"подробного описания многих вещей, чем в других скриптовых системах, таких "
"как GDScript. Когда создается экземпляр NativeScript, вызывается "
"конструктор, заданный библиотекой. Когда экземпляр уничтожается, выполняется "
"заданный деструктор."

msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called ``get_data``."
msgstr ""
"Это внешние объявления для функций, которые мы будем реализовывать для "
"нашего объекта. Также необходимы конструктор и деструктор. Кроме того, у "
"объекта будет один метод ``get_data``."

msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with ``godot_`` (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initializes our dynamic library. Godot will give it a pointer "
"to a structure that contains various bits of information we may find useful "
"among which the pointers to our API structures."
msgstr ""
"Далее следует первая из точек входа, которые Godot будет вызывать при "
"загрузке нашей динамической библиотеки. Все эти методы имеют префикс "
"``godot_`` (вы можете изменить его позже), за которым следует их имя. "
"``gdnative_init`` - это функция, которая инициализирует нашу динамическую "
"библиотеку. Godot передаст ей указатель на структуру, содержащую различные "
"биты информации, которые мы можем найти полезными, среди которых указатели "
"на структуры API."

msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""
"Для любых дополнительных структур API нам нужно пройтись по массиву "
"расширений и проверить тип расширения."

msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""
"Далее следует ``gdnative_terminate``, который вызывается перед выгрузкой "
"библиотеки. Godot выгрузит библиотеку, когда ни один объект больше не будет "
"ее использовать. Здесь вы можете выполнить любую очистку, которая вам может "
"понадобиться. В нашем примере мы просто очистим указатели API."

msgid ""
"Finally, we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to the engine what objects we make "
"available."
msgstr ""
"Наконец, у нас есть ``nativescript_init``, которая является самой важной "
"функцией, которая нам понадобится. Эта функция будет вызываться Godot в "
"процессе загрузки библиотеки GDNative и сообщает движку, какие объекты мы "
"делаем доступными."

msgid ""
"We first tell the engine which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from; this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""
"Сначала мы сообщаем движку, какие классы реализованы, вызывая "
"``nativescript_register_class``. Первым параметром здесь является указатель "
"на дескриптор, переданный нам. Второй - имя класса нашего объекта. Третий - "
"это тип объекта в Godot, от которого мы \"наследуем\"; это не настоящее "
"наследование, но достаточно близкое. Наконец, четвертый и пятый параметры - "
"это описания наших конструктора и деструктора."

msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting (see "
"``godot_method_rpc_mode`` enum in ``godot-headers/nativescript/"
"godot_nativescript.h`` for possible values). The fifth and final parameter "
"is a description of which function to call when the method gets called."
msgstr ""
"Затем мы сообщаем Godot о наших методах (в данном случае об одном методе), "
"вызывая ``nativescript_register_method`` для каждого метода нашего класса. В "
"нашем случае это просто ``get_data``. Первым параметром снова будет "
"указатель нашего дескриптора. Второй - снова имя класса объекта, который мы "
"регистрируем. Третий - имя нашей функции, как оно будет известно GDScript. "
"Четвертый - это установка наших атрибутов (см. перечисление "
"``godot_method_rpc_mode`` в ``godot-headers/nativescript/godot_nativescript."
"h`` для возможных значений). Пятый и последний параметр - это описание того, "
"какую функцию следует вызывать при вызове метода."

msgid ""
"The description struct ``instance_method`` contains the function pointer to "
"the function itself as first field. The other two fields in these structs "
"are for specifying per-method userdata. The second is the ``method_data`` "
"field which is passed on every function call as the ``p_method_data`` "
"argument. This is useful to reuse one function for different methods on "
"possibly multiple different script-classes. If the ``method_data`` value is "
"a pointer to memory that needs to be freed, the third ``free_func`` field "
"can contain a pointer to a function that will free that memory. That free "
"function gets called when the script itself (not instance!) gets unloaded "
"(so usually at library-unload time)."
msgstr ""
"Описание структуры ``instance_method`` содержит указатель на саму функцию в "
"качестве первого поля. Два других поля в этих структурах предназначены для "
"указания пользовательских данных каждого метода. Второе - это поле "
"``method_data``, которое передается при каждом вызове функции как аргумент "
"``p_method_data``. Это полезно для повторного использования одной функции "
"для различных методов, возможно, нескольких различных классов скриптов. Если "
"значение ``method_data`` является указателем на память, которую необходимо "
"освободить, третье поле ``free_func`` может содержать указатель на функцию, "
"которая освободит эту память. Эта функция освобождения вызывается при "
"выгрузке самого скрипта (не экземпляра!) (обычно во время выгрузки "
"библиотеки)."

msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""
"Теперь пора приступить к работе над функциями нашего объекта. Сначала мы "
"определим структуру, которую используем для хранения данных-членов "
"экземпляра нашего класса GDNative."

msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""
"Затем мы определяем наш конструктор. Все, что мы делаем в нашем "
"конструкторе, это выделяем память для нашей структуры и заполняем ее "
"некоторыми данными. Обратите внимание, что мы используем функции памяти "
"Godot, чтобы память отслеживалась, а затем возвращаем указатель на нашу "
"новую структуру. Этот указатель будет служить идентификатором нашего "
"экземпляра в случае инстанцирования нескольких объектов."

msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""
"Этот указатель будет передаваться в любую из наших функций, связанных с "
"нашим объектом, как параметр ``p_user_data``, и может использоваться как для "
"идентификации нашего экземпляра, так и для доступа к его данным-членам."

msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""
"Наш деструктор вызывается, когда Godot завершает работу с нашим объектом, и "
"мы освобождаем данные-члены нашего экземпляра."

msgid ""
"And finally, we implement our ``get_data`` function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""
"И, наконец, мы реализуем нашу функцию ``get_data``. Данные всегда "
"отправляются и возвращаются в виде вариантов, поэтому, чтобы вернуть наши "
"данные, которые являются строкой, нам сначала нужно преобразовать нашу "
"строку C в строковый объект Godot, а затем скопировать этот строковый объект "
"в вариант, который мы возвращаем."

msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""

msgid ""
"In more complex operations it can be confusing the keep track of which value "
"needs to be deallocated and which does not. As a general rule: call "
"``godot_TYPENAME_destroy`` when a C++ destructor would be called instead. "
"The String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C."
msgstr ""

msgid "The variant we return is destroyed automatically by Godot."
msgstr ""

msgid "And that is the whole source code of our module."
msgstr ""

msgid "Compiling"
msgstr "Компиляция"

msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a SCons configuration that does all the hard work for you, "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""

msgid ""
"Assuming you are sticking to the folder structure suggested above, it is "
"best to open a terminal session in the ``src`` folder and execute the "
"commands from there. Make sure to create the ``bin`` folder before you "
"proceed."
msgstr ""

msgid "On Linux:"
msgstr ""

msgid "On macOS:"
msgstr ""

msgid "On Windows:"
msgstr ""

msgid ""
"On the Windows build you also end up with a ``libsimple.lib`` library. This "
"is a library that you can compile into a project to provide access to the "
"DLL. We get it as a byproduct and we do not need it :) When exporting your "
"game for release this file will be ignored."
msgstr ""

msgid "Creating the GDNativeLibrary (``.gdnlib``) file"
msgstr ""

msgid ""
"With our module compiled, we now need to create a corresponding :ref:"
"`GDNativeLibrary <class_GDNativeLibrary>` resource with ``.gdnlib`` "
"extension which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded "
"per platform."
msgstr ""

msgid ""
"We can use Godot to generate this file, so open the \"simple\" project in "
"the editor."
msgstr ""

msgid "Start by clicking the create resource button in the Inspector:"
msgstr ""

msgid "And select ``GDNativeLibrary``:"
msgstr ""

msgid ""
"You should see a contextual editor appear in the bottom panel. Use the "
"\"Expand Bottom Panel\" button in the bottom right to expand it to full "
"height:"
msgstr ""

#, fuzzy
msgid "General properties"
msgstr "Общие свойства"

msgid ""
"In the Inspector, you have various properties to control loading the library."
msgstr ""

msgid ""
"If *Load Once* is enabled, our library is loaded only once and each "
"individual script that uses our library will use the same data. Any variable "
"you define globally will be accessible from any instance of your object you "
"create. If *Load Once* is disabled, a new copy of the library is loaded into "
"memory each time a script accesses the library."
msgstr ""

msgid ""
"If *Singleton* is enabled, our library is automatically loaded and a "
"function called ``godot_gdnative_singleton`` is called. We'll leave that for "
"another tutorial."
msgstr ""

msgid ""
"The *Symbol Prefix* is a prefix for our core functions, such as ``godot_`` "
"in ``godot_nativescript_init`` seen earlier. If you use multiple GDNative "
"libraries that you wish to statically link, you will have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""

msgid ""
"*Reloadable* defines whether the library should be reloaded when the editor "
"loses and gains focus, typically to pick up new or modified symbols from any "
"change made to the library externally."
msgstr ""

#, fuzzy
msgid "Platform libraries"
msgstr "Выбор платформы"

msgid ""
"The GDNativeLibrary editor plugin lets you configure two things for each "
"platform and architecture that you aim to support."
msgstr ""

msgid ""
"The *Dynamic Library* column (``entry`` section in the saved file) tells us "
"for each platform and feature combination which dynamic library has to be "
"loaded. This also informs the exporter which files need to be exported when "
"exporting to a specific platform."
msgstr ""

msgid ""
"The *Dependencies* column (also ``dependencies`` section) tells Godot what "
"other files need to be exported for each platform in order for our library "
"to work. Say that your GDNative module uses another DLL to implement "
"functionality from a 3rd party library, this is where you list that DLL."
msgstr ""

msgid ""
"For our example, we only built libraries for Linux, macOS and/or Windows, so "
"you can link them in the relevant fields by clicking the folder button. If "
"you built all three libraries, you should have something like this:"
msgstr ""

#, fuzzy
msgid "Saving the resource"
msgstr "Получение исходного кода"

msgid ""
"We can then save our GDNativeLibrary resource as ``bin/libsimple.gdnlib`` "
"with the Save button in the Inspector:"
msgstr ""

msgid ""
"The file is saved in a text-based format and should have contents similar to "
"this:"
msgstr ""

msgid "Creating the NativeScript (``.gdns``) file"
msgstr ""

msgid ""
"With our ``.gdnlib`` file we've told Godot how to load our library, now we "
"need to tell it about our \"SIMPLE\" object class. We do this by creating a :"
"ref:`NativeScript <class_NativeScript>` resource file with ``.gdns`` "
"extension."
msgstr ""

msgid ""
"Like done for the GDNativeLibrary resource, click the button to create a new "
"resource in the Inspector and select ``NativeScript``:"
msgstr ""

msgid ""
"The inspector will show a few properties that we need to fill. As *Class "
"Name* we enter \"SIMPLE\" which is the object class name that we declared in "
"our C source when calling ``godot_nativescript_register_class``. We also "
"need to select our ``.gdnlib`` file by clicking on *Library* and selecting "
"*Load*:"
msgstr ""

msgid ""
"The *Class Name* must have the same spelling as the one given in "
"``godot_nativescript_init`` when registering the class."
msgstr ""

msgid "Finally, click on the save icon and save this as ``bin/simple.gdns``:"
msgstr ""

msgid ""
"Now it's time to build our scene. Add a Control node to your scene as your "
"root and call it ``main``. Then add a Button and a Label as child nodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""

msgid "Select the control node and attach a script to it:"
msgstr ""

msgid "Next link up the ``pressed`` signal on the button to your script:"
msgstr ""

msgid "Don't forget to save your scene, call it ``main.tscn``."
msgstr ""

msgid "Now we can implement our ``main.gd`` code:"
msgstr ""

msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your ``main.tscn`` file "
"and presto:"
msgstr ""

msgid "Translation status"
msgstr "Translation status (статус перевода)"
