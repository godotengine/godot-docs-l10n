# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: Введение в динамически типизированные языки"

msgid "About"
msgstr "О Godot Engine"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"Это руководство призвано стать кратким руководством по более эффективному "
"использованию GDScript. Он фокусируется на общих случаях, характерных для "
"языка, но также охватывает много информации о динамически типизированных "
"языках."

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"Она должна быть особенно полезна для программистов с небольшим опытом работы "
"с динамически типизированными языками или вообще без него."

msgid "Dynamic nature"
msgstr "Динамический характер"

msgid "Pros & cons of dynamic typing"
msgstr "Плюсы и минусы динамической типизации"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr ""
"GDScript-это динамически типизированный язык. Его главным преимуществом "
"является то, что:"

msgid "The language is simple and easy to learn."
msgstr "Язык прост и легок в изучении."

msgid "Most code can be written and changed quickly and without hassle."
msgstr ""
"Большую часть кода можно написать и изменить быстро и без лишних хлопот."

msgid "Less code written means less errors & mistakes to fix."
msgstr ""
"Меньше написанного кода означает меньше ошибок и опечаток, которые нужно "
"исправить."

msgid "Easier to read the code (less clutter)."
msgstr "Упрощает чтение кода (меньше беспорядка)."

msgid "No compilation is required to test."
msgstr "Для проверки не требуется компиляция."

msgid "Runtime is tiny."
msgstr "Время выполнения очень мало."

msgid "Duck-typing and polymorphism by nature."
msgstr "Утиная типизация и полиморфизм в своём изначальном виде."

msgid "While the main disadvantages are:"
msgstr "В то время как основными недостатками являются:"

msgid "Less performance than statically typed languages."
msgstr ""
"Менее высокая производительность по сравнению со статически типизированными "
"языками."

msgid "More difficult to refactor (symbols can't be traced)"
msgstr "Сложнее рефакторить (символы не прослеживаются)"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"Некоторые ошибки, которые обычно обнаруживаются во время компиляции на "
"статически напечатанных языках, появляются только при запуске кода "
"(поскольку происходит более строгая синтаксическая проверка)."

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""
"Менее гибкое понимание в исполнении кода (некоторые типы переменных известны "
"только во время выполнения)."

msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"Это означает, что Godot+GDScript - это комбинация, разработанная для "
"быстрого и эффективного создания игр. Для игр, требующих большой "
"вычислительной мощности и не использующих встроенные инструменты движка "
"(такие как Vector type, Physics Engine, Math library и т.д.), также "
"предусмотрена возможность использования языка Си++. Это позволяет вам "
"создавать большую часть игры в GDScript и добавлять небольшие кусочки C++ в "
"области, которые нуждаются в повышении производительности."

msgid "Variables & assignment"
msgstr "Переменные и присваивание"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"Все переменные в динамически типизированном языке являются \"вариантными\" "
"типами. Это означает, что их тип не является фиксированным, а модифицируется "
"только через присваивание. Пример:"

msgid "Static:"
msgstr "Статическая типизация:"

msgid "Dynamic:"
msgstr "Динамическая типизация:"

msgid "As function arguments:"
msgstr "В качестве аргументов функции:"

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"Функции носят динамичный характер, что означает, что их можно вызывать, "
"например, с помощью различных аргументов:"

msgid "Pointers & referencing:"
msgstr "Указатели и ссылки:"

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"В статически типизированных языках, таких как C или C++ (а также в некоторых "
"расширениях Java и C#), различают переменные и указатели/ссылки на "
"переменные. Последние позволяют модифицировать исходный объект по ссылке, "
"передаваемой в другие функции."

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"В C# или Java все типы, кроме встроенных (int, float, частично String), "
"всегда являются указателями или ссылками. Ссылки автоматически удаляются "
"сборщиком мусора, когда они становятся больше ненужными. Динамически "
"типизированные языки также стремятся использовать эту модель. Несколько "
"примеров:"

msgid "C++:"
msgstr "C++:"

msgid "Java:"
msgstr "Java:"

msgid "GDScript:"
msgstr "GDScriрt:"

#, fuzzy
msgid ""
"In GDScript, only base types (int, float, String and PoolArray types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"В GDScript только базовые типы (int, float, string и vector) передаются в "
"аргументы в виде значений (данные копируются). Во всех других случаях "
"(экземпляры объектов, массивы, словари и т.д.) передаются лишь ссылки. "
"Объекты классов, которые наследуются от :ref:`class_Reference` "
"(устанавливается по-умолчанию) будут автоматически удалены сборщиком мусора "
"при отсутствии ссылок. Ручное управление памятью также возможно, если класс "
"будет наследоваться от :ref:`class_Object`."

msgid ""
"A value is **passed by value** when it is copied every time it's specified "
"as a function parameter. One consequence of this is that the function cannot "
"modify the parameter in a way that is visible from outside the function::"
msgstr ""

msgid ""
"A value is **passed by reference** when it is *not* copied every time it's "
"specified as a function parameter. This allows modifying a function "
"parameter within a function body (and having the modified value accessible "
"outside the function). The downside is that the data passed as a function "
"parameter is no longer guaranteed to be immutable, which can cause difficult-"
"to-track bugs if not done carefully::"
msgstr ""
"Значение **передаётся по ссылке**, когда оно, *а не* копируется каждый раз, "
"когда оно указывается в качестве параметра функции. Это позволяет изменять "
"параметр функции в теле функции (и иметь доступ к изменённому значению вне "
"функции). Недостатком является то, что данные, передаваемые в качестве "
"параметра функции, больше не гарантируют неизменяемость, что может привести "
"к трудноотслеживаемым ошибкам, если не сделать это аккуратно::"

msgid ""
"Compared to passing by value, passing by reference can perform better when "
"using large objects since copying large objects in memory can be slow."
msgstr ""

msgid ""
"Additionally, in Godot, base types such as String are **immutable**. This "
"means that modifying them will *always* return a copy of the original value, "
"rather than modifying the value in-place."
msgstr ""

msgid "Arrays"
msgstr "Массивы"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"Массивы в динамически типизированных языках могут содержать элементы разных "
"типов данных; массивы всегда являются динамическими (т. е. их размер может "
"быть изменён в любой момент). Сравните с примерами массивов в статически "
"типизированных языках:"

msgid "And in GDScript:"
msgstr "И в GDScript:"

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""
"В динамически типизированных языках массивы могут быть заменены другими "
"типами, такими как списки:"

msgid "Or unordered sets:"
msgstr "Или неупорядоченные множества:"

msgid "Dictionaries"
msgstr "Словари (Dictionaries)"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"Словари являются мощным инструментом в динамически типизированных языках. "
"Большинство программистов из статически типизированных языков (таких как C++ "
"или C#) игнорируют существование словарей и усложняют этим себе жизнь. Этот "
"тип данных обычно отсутствует в таких языках (или присутствует лишь в "
"ограниченной форме)."

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"Словари могут сопоставлять любое значение с любым другим значением, "
"полностью игнорируя тип данных, используемый в качестве ключа или значения. "
"Вопреки распространенному мнению, они эффективны, потому что могут быть "
"реализованы с помощью хеш-таблиц. Они, фактически, настолько эффективны, что "
"в некоторых языках массивы реализуют как словари."

msgid "Example of Dictionary:"
msgstr "Пример словаря:"

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"Словари также являются динамическими, ключи могут добавляться или удаляться "
"в любой момент при небольших затратах:"

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"В большинстве случаев двумерные массивы могут быть проще реализованы с "
"помощью словарей. Вот простой пример игры \"морской бой\":"

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"Словари могут также использоваться как разметка данных или быстрые "
"структуры. Хотя словари GDScript напоминают словари python, он также "
"поддерживает синтаксис и индексацию в стиле Lua, что делает его полезным для "
"написания начальных состояний и быстрых структур:"

msgid "For & while"
msgstr "Циклы for и while"

msgid "Iterating in some statically typed languages can be quite complex:"
msgstr ""
"Циклы в некоторых статически типизированных языках могут быть довольно "
"сложными:"

msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "В динамически типизированных языках это выглядит значительно проще:"

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"Контейнеры (массивы и словари) являются итерируемыми. Словари позволяют "
"перебирать ключи:"

msgid "Iterating with indices is also possible:"
msgstr "Итерация с индексами также возможна:"

msgid "The range() function can take 3 arguments:"
msgstr "Функция range() может принимать 3 аргумента:"

msgid "Some statically typed programming language examples:"
msgstr "Примеры в статически типизированных языках:"

msgid "Translate to:"
msgstr "Транслируется в:"

msgid "And backwards looping is done through a negative counter:"
msgstr "И обратный цикл выполняется через отрицательный счётчик цикла:"

msgid "Becomes:"
msgstr "Становится:"

msgid "While"
msgstr "Пока"

msgid "while() loops are the same everywhere:"
msgstr "Циклы while() везде одинаковые:"

msgid "Custom iterators"
msgstr "Пользовательские итераторы"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"Вы можете создавать собственные итераторы в случае, если стандартные по "
"умолчанию не вполне соответствуют вашим потребностям, переопределив функции "
"``_iter_init``, ``_iter_next`` и ``_iter_get`` класса Variant в вашем "
"скрипте. Ниже приведен пример реализации итератора прямого действия:"

msgid "And it can be used like any other iterator:"
msgstr "И его можно использовать, как и любой другой итератор:"

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"Обязательно сбросьте состояние итератора в ``_iter_init``, иначе вложенные "
"for-циклы, использующие пользовательские итераторы не будут работать, как "
"ожидалось."

msgid "Duck typing"
msgstr "Утиная типизация"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"Одной из самых сложных концепций, которую нужно понять при переходе от языка "
"со статической типизацией к динамической, является Утиная типизация. Утиная "
"типизация делает общий дизайн кода намного проще и понятнее для написания, "
"но для новичка это может быть не так очевидно."

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"В качестве примера представим ситуацию, когда большой камень падает по "
"туннелю, разбивая все на своем пути. Код для камня на статически "
"типизированном языке будет выглядеть примерно так:"

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"Таким образом, все, что может быть разбито камнем, должно наследовать "
"Smashable. Если персонаж, враг, предмет мебели, маленький камень - все это "
"можно разбить, им будет необходимо наследовать от класса Smashable, "
"возможно, требуя множественного наследования. Если множественное "
"наследование нежелательно, им придется наследовать общий класс, такой как "
"Entity. Тем не менее, было бы не очень элегантно добавить виртуальный метод "
"``smash()`` в Entity, только если некоторые из них могут быть разбиты."

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"С динамически типизированными языками это не проблема. Утиная типизация "
"гарантирует, что вам нужно только определить функцию ``smash()`` там, где "
"требуется, и все. Не нужно учитывать наследование, базовые классы и т.д."

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"И это все. Если объект, столкнувшийся с камнем, имеет метод smash(), он "
"будет вызван. Нет необходимости наследования или полиморфизма. Языки с "
"динамической типизацией заботятся только о том, чтобы экземпляр имел нужный "
"метод или член, а не о том, что он наследует, или о типе класса. Определение "
"Утиной типизации должно прояснить это:"

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*\"Когда Я вижу птицу, которая ходит как утка и плавает как утка, и крякает "
"как утка, Я называю эту птицу уткой\"*"

msgid "In this case, it translates to:"
msgstr "В этом случае это переводится как:"

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""
"*\"Если объект может быть разбит, все равно, что это, просто разбейте его.\"*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "Да, возможно нам следует называть это типизацией Халка."

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"Возможно, поражаемый объект не имеет функции smash(). Некоторые языки с "
"динамической типизацией просто игнорируют вызов метода, если он не "
"существует, но GDScript более строгий, поэтому желательно проверить, "
"существует ли функция:"

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"Затем просто определите этот метод, и все, к чему прикасается камень, может "
"быть разбито."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
