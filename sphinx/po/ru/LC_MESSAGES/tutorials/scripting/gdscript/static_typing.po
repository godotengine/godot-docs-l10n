# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Статическая типизация в GDScript"

msgid "In this guide, you will learn:"
msgstr "В этом руководстве вы узнаете:"

msgid "**How to use types in GDScript**"
msgstr "**Как использовать типы в GDScript**"

msgid "That **static types can help you avoid bugs**"
msgstr "Что **статические типы могут помочь вам избежать ошибок**"

msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"Где и как вы используете эту новую функцию языка полностью зависит от Вас: "
"вы можете использовать ее только в некоторых файлах GDScript, использовать "
"везде или писать код, как вы всегда делали!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Статические типы могут использоваться для переменных, констант, функций, "
"параметров и возвращаемых типов."

msgid "Typed GDScript is available since Godot 3.1."
msgstr "Типизированный GDScript доступен начиная с Godot 3.1."

msgid "A brief look at static typing"
msgstr "Краткий обзор статической типизации"

msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"С помощью типизированного GDScript Godot может обнаружить еще больше ошибок "
"при написании кода! Это дает вам и вашим товарищам по команде больше "
"информации по мере работы, поскольку типы аргументов появляются при вызове "
"метода."

msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Представьте, что вы программируете систему инвентаризации. Вы "
"запрограммировали узел ``Item``, а затем ``Inventory``. Чтобы добавить "
"предметы в инвентарь, люди, работающие с вашим кодом, должны всегда "
"передавать ``Item`` методу ``Inventory.add``. С помощью типов вы можете "
"осуществить это:"

msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Еще одним существенным преимуществом типизированного GDScript является новая "
"**система предупреждений**. Начиная с версии 3.1, Godot выдает вам "
"предупреждения о вашем коде в процессе его написания: движок определяет "
"части вашего кода, которые могут привести к проблемам во время выполнения, "
"но позволяет вам решить, хотите ли вы оставить код таким, какой он есть. "
"Подробнее об этом через минуту."

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Статические типы также дают вам лучшие варианты завершения кода. Ниже вы "
"можете увидеть разницу между динамическими и статическими типизированными "
"вариантами завершения для класса под названием ``PlayerController``."

msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Возможно, вы ранее хранили узел в переменной и набирали точку, но оставались "
"без предложений автозавершения:"

msgid "code completion options for dynamic"
msgstr ""

msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Это связано с динамическим кодом. Godot не может знать, какой тип узла или "
"значения вы передаете в функцию. Однако, если вы опишите тип явно, вы "
"получите все публичные методы и переменные из узла:"

msgid "code completion options for typed"
msgstr ""

msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"В будущем, типизированный GDScript также увеличит производительность кода: "
"компиляция Just-In-Time и другие улучшения компилятора уже в планах!"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"В целом, типизированное программирование дает вам более структурированный "
"опыт. Это помогает предотвратить ошибки и улучшает аспект "
"самодокументирования ваших скриптов. Это особенно полезно, когда вы "
"работаете в команде или над долгосрочным проектом: исследования показали, "
"что разработчики проводят большую часть своего времени за чтением чужого "
"кода или скриптов, которые они написали в прошлом и о которых забыли. Чем "
"яснее и структурированнее код, тем быстрее его понять, тем быстрее вы "
"сможете двигаться вперед."

msgid "How to use static typing"
msgstr "Как использовать статическую типизацию"

msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Чтобы определить тип переменной или константы, напишите двоеточие после "
"имени переменной, а затем ее тип. Например, ``var health: int``. Это "
"заставляет тип переменной всегда оставаться неизменным:"

msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot попытается определить тип самостоятельно, если вы напишете двоеточие, "
"но не укажите тип:"

msgid "Currently you can use three types of… types:"
msgstr "В настоящее время вы можете использовать три вида... типов:"

msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Основные классы и узлы (``Object``, ``Node``, ``Area2D``, ``Camera2D``, и т."
"д.)"

#, fuzzy
msgid ""
"Your own custom classes. Look at the new :ref:`class_name "
"<doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""
"Ваши собственные, индивидуальные классы. Посмотрите на новую функцию :ref:"
"`class_name <doc_scripting_continued_class_name>` для регистрации типов в "
"редакторе."

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"Вам не нужно писать типовые подсказки для констант, так как Godot "
"устанавливает их автоматически из присвоенного значения. Но вы все равно "
"можете сделать это, чтобы прояснить смысл вашего кода."

msgid "Custom variable types"
msgstr "Пользовательские типы переменных"

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Вы можете использовать любой класс, включая ваши собственные классы, как "
"типы. Есть два способа использовать их в скриптах. Первый способ - "
"предварительно загрузить скрипт, который вы хотите использовать в качестве "
"типа константы:"

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"Второй метод заключается в использовании ключевого слова ``class_name`` при "
"создании. Для приведенного выше примера ваш Rifle.gd будет выглядеть так:"

msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Если вы используете ``class_name``, Godot глобально регистрирует тип Rifle в "
"редакторе, и вы можете использовать его где угодно, без предварительной "
"загрузки в константу:"

msgid "Variable casting"
msgstr "Приведение переменной"

msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"Приведение типов является ключевым понятием в типизированных языках. "
"Приведение - это преобразование значения из одного типа в другой."

msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Представьте себе врага в вашей игре, который ``расширяет Area2D``. Вы "
"хотите, чтобы он сталкивался с Player-ом : ``KinematicBody2D`` со скриптом "
"под названием ``PlayerController``, прикрепленным к нему. Вы используете "
"сигнал ``on_body_entered`` для обнаружения столкновений. С типизированным "
"кодом тело, которое вы обнаружите, будет общим ``PhysicsBody2D``, а не вашим "
"``PlayerController`` при обратном вызове ``_on_body_entered``."

msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Вы можете проверить, является ли этот ``PhysicsBody2D`` вашим Player-ом "
"используя ключевое слово ``as`` и снова использовать двоеточие ``:``, чтобы "
"заставить переменную использовать этот тип. Это заставляет переменную "
"придерживаться типа ``PlayerController``:"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Так как мы имеем дело с пользовательским типом, если ``body`` не расширяет "
"``PlayerController``, значение переменной ``player`` будет установлено на "
"``null``. Мы можем использовать это, чтобы проверить, является ли тело "
"Player-ом или нет. Мы также получим полное автозаполнение переменной Player-"
"а благодаря этому исполнению."

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Если вы попытаетесь выполнить приведение со встроенным типом, и это не "
"удастся, Godot выдаст ошибку."

msgid "Safe lines"
msgstr "Безопасные строки"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Вы также можете использовать приведение, чтобы обеспечить безопасные строки. "
"Безопасные строки - это новый инструмент в Godot 3.1, который поможет вам "
"понять, когда неоднозначные строки кода являются типо-безопасными. Поскольку "
"вы можете смешивать и сопоставлять типизированный и динамический код, иногда "
"у Godot не хватает информации, чтобы знать, вызовет ли инструкция ошибку или "
"нет во время выполнения."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Это происходит, когда вы получаете дочерний узел. Возьмем, к примеру, "
"таймер: с динамическим кодом вы можете получить узел с помощью ``$Timer``. "
"GDScript поддерживает `Утиную типизацию <https://stackoverflow.com/"
"a/4205163/8125343>`__, поэтому даже если ваш таймер имеет тип ``Timer``, он "
"также является ``Node`` и ``Object``, два класса которые он расширяет. В "
"динамическом GDScript вы также не заботитесь о типе узла, если у него есть "
"необходимые вам методы для вызова."

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Вы можете использовать приведение, чтобы сообщить Godot-у тип, который вы "
"ожидаете, когда получаете узел: ``($Timer as Timer)``, ``($Player as "
"KinematicBody2D)`` и т.д. Godot обеспечит работу типа и, если это так, то "
"номер строки слева в редакторе скриптов станет зеленым."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Небезопасная строка (строка 7) против Безопасных Строк (строки 6 и 8)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Вы можете отключить безопасные строки или изменить их цвет в настройках "
"редактора."

msgid "Define the return type of a function with the arrow ->"
msgstr "Определите тип возвращаемого значения функции с помощью стрелки ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Чтобы определить тип возвращаемого значения функции, напишите тире и угловую "
"скобку показывающую направо ``->`` после ее объявления, а затем тип "
"возвращаемого значения:"

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"Тип ``void`` означает, что функция ничего не возвращает. Вы можете "
"использовать любой тип, как с переменными:"

msgid "You can also use your own nodes as return types:"
msgstr ""
"Вы также можете использовать свои собственные узлы в качестве возвращаемых "
"типов:"

msgid "Typed or dynamic: stick to one style"
msgstr "Типизированный или динамичный: придерживайтесь одного стиля"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"Типизированный GDScript и динамический GDScript могут сосуществовать в одном "
"проекте. Но рекомендуется придерживаться единого стиля написания вашего "
"кода. Всем будет проще понимать код, если все будет использоваться единый "
"стиль написания."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"Типизированный код требует немного больше времени для написания, но вы "
"получаете преимущества, которые мы обсуждали выше. Ниже приведен пример того "
"же пустого скрипта в динамическом стиле:"

msgid "And with static typing:"
msgstr "И со статической типизацией:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Как видите, вы также можете использовать типы с виртуальными методами "
"движка. Сигнальные обратные вызовы, как и любые методы, также могут "
"использовать типы. Вот сигнал ``body_entered`` в динамическом стиле:"

msgid "And the same callback, with type hints:"
msgstr "И тот же обратный вызов, с типовыми подсказками:"

msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Вы можете заменить, например, ``CollisionObject2D`, на свой собственный тип, "
"чтобы приводить параметры автоматически:"

msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"Переменная ``bullet`` может содержать любой ``CollisionObject2D``, но мы "
"должны убедиться, что это наш ``Bullet``, узел, который мы создали для "
"нашего проекта. Если это что-то еще, например, ``Area2D`` или любой другой "
"узел, который не расширяет ``Bullet``, переменная ``bullet`` будет иметь "
"значение ``null``."

msgid "Warning system"
msgstr "Система предупреждений"

msgid ""
"Documentation about the GDScript warning system has been moved to :ref:"
"`doc_gdscript_warning_system`."
msgstr ""
"Документация о системе предупреждений GDScript была перемещена в :ref:"
"`doc_gdscript_warning_system`."

msgid "Cases where you can't specify types"
msgstr "Случаи, когда вы не можете указывать типы"

msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Чтобы завершить это введение, давайте рассмотрим несколько случаев, когда вы "
"не можете использовать типовые подсказки. Все приведенные ниже примеры "
"**вызовут ошибки**."

msgid "You can't use Enums as types:"
msgstr "Вы не можете использовать Перечисления как типы:"

msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""
"Вы не можете указать тип отдельных членов в массиве. Это приведет к ошибке:"

msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"Вы не можете принудительно присваивать типы в цикле ``for``, так как каждый "
"элемент, по которому проходит ключевое слово ``for``, уже имеет свой тип. "
"Таким образом, вы **не можете** написать:"

msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "Два скрипта не могут циклически зависеть друг от друга:"

msgid "Summary"
msgstr "Подведение итогов"

msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"Типизированный GDScript - это мощный инструмент. Доступный начиная с версии "
"3.1 Godot, он помогает вам писать более структурированный код, избегать "
"распространенных ошибок и создавать масштабируемые системы. В будущем "
"статические типы также принесут вам хороший прирост производительности "
"благодаря предстоящей оптимизации компилятора."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
