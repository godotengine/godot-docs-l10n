# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript basics"
msgstr "Основы GDScript"

msgid "Introduction"
msgstr "Введение"

msgid ""
"*GDScript* is a high-level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""
"*GDScript* это высокоуровневый, динамически типизированный язык "
"программирования. Он использует синтаксис похожий на `Python <https://en."
"wikipedia.org/wiki/Python_%28programming_language%29>`_ (блоки выделяются "
"табуляцией и множество ключевых слов идентичны). Его цель быть "
"оптимизированным и плотно интегрированным в движок Godot, позволяя достичь "
"высокой гибкости в создании контента и интеграции."

msgid "History"
msgstr "История"

msgid ""
"Documentation about GDScript's history has been moved to the :ref:"
"`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""
"Документация по истории GDScript перемещена в :ref:`Часто задаваемые вопросы "
"<doc_faq_what_is_gdscript>`."

msgid "Example of GDScript"
msgstr "Пример GDScript"

msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""
"Некоторым людям проще научиться, взглянув на синтаксис, поэтому вот простой "
"пример того, как выглядит GDScript."

msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"Если у вас уже был опыт работы со статически типизированными языками, такими "
"как C, C++ или C#, но вы никогда раньше не использовали динамически "
"типизированный язык, рекомендуется прочитать это руководство: :ref:"
"`doc_gdscript_efficient`."

msgid "Language"
msgstr "Язык"

msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"Далее следует общий обзор GDScript. Подробную информацию, например, о "
"доступных методах для массивов или других объектов, следует искать в "
"описаниях связанных классов."

msgid "Identifiers"
msgstr "Идентификаторы"

msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"Любая строка, которая ограничивает себя алфавитными символами (от ``a`` до "
"``z`` и от ``A`` до ``Z``), цифрами (от ``0`` до ``9``) и ``_``, "
"квалифицируется как идентификатор. Кроме того, идентификаторы не должны "
"начинаться с цифры. Идентификаторы чувствительны к регистру (``foo`` "
"отличается от ``FOO``)."

msgid "Keywords"
msgstr "Ключевые слова"

msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"Ниже приведен список ключевых слов, поддерживаемых языком. Поскольку "
"ключевые слова являются зарезервированными словами (токенами), они не могут "
"использоваться в качестве идентификаторов. Операторы (например, ``in``, "
"``not``, ``and`` или ``or``) и имена встроенных типов, перечисленные в "
"следующих разделах, также зарезервированы."

msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"Ключевые слова определены в `токенизаторе GDScript <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_, "
"если вы хотите взглянуть под капот."

msgid "Keyword"
msgstr "Ключевое слово"

msgid "Description"
msgstr "Описание"

msgid "if"
msgstr "if"

msgid "See `if/else/elif`_."
msgstr "Смотрите `if/else/elif`_."

msgid "elif"
msgstr "еlif"

msgid "else"
msgstr "elsе"

msgid "for"
msgstr "for"

msgid "See for_."
msgstr "См. for_."

msgid "while"
msgstr "whilе"

msgid "See while_."
msgstr "Смотрите while_."

msgid "match"
msgstr "mаtch"

msgid "See match_."
msgstr "Смотрите match_."

msgid "break"
msgstr "breаk"

msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "Выход из выполнения текущего ``for`` или ``while`` циклов."

msgid "continue"
msgstr "continuе"

msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "Немедленный переход к следующей итерации ``for`` или ``while`` циклов."

msgid "pass"
msgstr "пропуск"

msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"Используется там, где наличие инструкции требуется синтаксически, но "
"выполнение ее кода нежелательно. Например, в пустых функциях."

msgid "return"
msgstr "return"

msgid "Returns a value from a function."
msgstr "Возвращает значение из функции."

msgid "class"
msgstr "класс"

msgid "Defines an inner class."
msgstr "Определяет внутренний класс."

msgid "class_name"
msgstr "clаss_name"

msgid "Defines a class name and optional icon for your script."
msgstr "Привязка названия класса и необязательной иконки для вашего скрипта."

msgid "extends"
msgstr "extеnds"

msgid "Defines what class to extend with the current class."
msgstr "Объявляет какой класс расширяет текущий класс."

msgid "is"
msgstr "is"

msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"Проверяет, расширяет ли переменная данный класс, или принадлежит ли она "
"данному встроенному типу."

msgid "as"
msgstr "as"

msgid "Cast the value to a given type if possible."
msgstr "Приводит значение к данному типу, если это возможно."

msgid "self"
msgstr "sеlf"

msgid "Refers to current class instance."
msgstr "Ссылается на текущий экземпляр класса."

msgid "tool"
msgstr "toоl"

msgid "Executes the script in the editor."
msgstr "Выполняет скрипт в редакторе."

msgid "signal"
msgstr "signаl"

msgid "Defines a signal."
msgstr "Объявляет сигнал."

msgid "func"
msgstr "funс"

msgid "Defines a function."
msgstr "Объявляет функцию."

msgid "static"
msgstr "statiс"

msgid "Defines a static function. Static member variables are not allowed."
msgstr "Объявление статической функции. Статические поля класса не доступны."

msgid "const"
msgstr "сonst"

msgid "Defines a constant."
msgstr "Объявляет константу."

msgid "enum"
msgstr "enum"

msgid "Defines an enum."
msgstr "Объявляет перечисление."

msgid "var"
msgstr "var"

msgid "Defines a variable."
msgstr "Объявляет переменную."

msgid "onready"
msgstr "оnready"

msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""
"Инициализирует переменную, как только Узел, к которому прикреплен скрипт, а "
"также его дети являются частью дерева сцен."

msgid "export"
msgstr "export"

msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr ""
"Сохраняет переменную вместе с ресурсом, к которому она привязана, и делает "
"ее видимой и модифицируемой в редакторе."

msgid "setget"
msgstr "sеtget"

msgid "Defines setter and getter functions for a variable."
msgstr "Определяет функции setter и getter для переменной."

msgid "breakpoint"
msgstr "brеakpoint"

msgid "Editor helper for debugger breakpoints."
msgstr "Помощник редактора для контрольных точек отладчика."

msgid "preload"
msgstr "prеload"

msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""
"Предварительно загружает класс или переменную. См. `Классы как ресурсы`_."

msgid "yield"
msgstr "выход"

msgid "Coroutine support. See `Coroutines with yield`_."
msgstr "Поддержка сопрограмм. См. `Сопрограммы с промежуточным возвратом`_."

msgid "assert"
msgstr "assеrt"

msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"Задает условие, регистрирует ошибку при сбое. Игнорируется в не отладочных "
"сборках. См. `Ключевое слово Assert`_."

msgid "remote"
msgstr "rеmote"

msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""
"Сетевая аннотация RPC. См. :ref:`документацию по многопользовательскому "
"режиму высокого уровня <doc_high_level_multiplayer>`."

msgid "master"
msgstr "master"

msgid "puppet"
msgstr "кукла"

msgid "remotesync"
msgstr "remotеsync"

msgid "mastersync"
msgstr "mastersуnc"

msgid "puppetsync"
msgstr "puppetsуnc"

msgid "PI"
msgstr "PI"

msgid "PI constant."
msgstr "Константа Пи."

msgid "TAU"
msgstr "TAU"

msgid "TAU constant."
msgstr "Константа Тау."

msgid "INF"
msgstr "INF"

msgid "Infinity constant. Used for comparisons."
msgstr "Бесконечность. Используется для сравнений."

msgid "NAN"
msgstr "NAN"

msgid "NAN (not a number) constant. Used for comparisons."
msgstr "NAN (англ. Not-a-Number, \"не число\"). Используется для сравнений."

msgid "Operators"
msgstr "Операторы"

msgid "The following is the list of supported operators and their precedence."
msgstr "Далее приведен список поддерживаемых операторов и их приоритет."

msgid "**Operator**"
msgstr "**Оператор**"

msgid "**Description**"
msgstr "**Описание**"

msgid "``x[index]``"
msgstr "``x[index]``"

msgid "Subscription (highest priority)"
msgstr "Подписка (высший приоритет)"

msgid "``x.attribute``"
msgstr "``x.attribute``"

msgid "Attribute reference"
msgstr "Ссылка на атрибут"

msgid "``foo()``"
msgstr "``foo()``"

msgid "Function call"
msgstr "Вызов функции"

msgid "``is``"
msgstr "``is``"

msgid "Instance type checker"
msgstr "Проверка типа экземпляра"

msgid "``~``"
msgstr "``~``"

msgid "Bitwise NOT"
msgstr "Побитовое НЕ"

msgid "``-x``"
msgstr "``-x``"

msgid "Negative / Unary negation"
msgstr "Отрицательное / унарное отрицание"

msgid "``*`` ``/`` ``%``"
msgstr "``*`` ``/`` ``%``"

msgid "Multiplication / Division / Remainder"
msgstr "Умножение / Деление / Остаток от деления"

msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats), and is additionally used for "
"Format Strings"
msgstr ""
"Эти операторы ведут себя так же, как C++. Целочисленное деление усекается, а "
"не возвращает дробное число, а оператор % доступен только для целых чисел "
"(\"fmod\" для чисел с плавающей запятой) и дополнительно используется для "
"Format Strings"

msgid "``+``"
msgstr "``+``"

msgid "Addition / Concatenation of arrays"
msgstr "Добавление / объединение массивов"

msgid "``-``"
msgstr "``-``"

msgid "Subtraction"
msgstr "Вычитание"

msgid "``<<`` ``>>``"
msgstr "``<<`` ``>>``"

msgid "Bit shifting"
msgstr "Битовый сдвиг"

msgid "``&``"
msgstr "``&``"

msgid "Bitwise AND"
msgstr "Побитовое И"

msgid "``^``"
msgstr "``^``"

msgid "Bitwise XOR"
msgstr "Побитовое Исключающее ИЛИ"

msgid "``|``"
msgstr "``|``"

msgid "Bitwise OR"
msgstr "Побитовое ИЛИ"

msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"

msgid "Comparisons"
msgstr "Сравнения"

msgid "``in``"
msgstr "``in``"

msgid ""
"When used with the ``if`` keyword it checks if a value is within a string, "
"list, range, dictionary, or node. When used with the ``for`` keyword it is "
"used to iterate though the contents of a string, list, range, dictionary or "
"node."
msgstr ""

msgid "``!`` ``not``"
msgstr "``!`` ``not``"

msgid "Boolean NOT"
msgstr "Логическое НЕ"

msgid "``and`` ``&&``"
msgstr "``and`` ``&&``"

msgid "Boolean AND"
msgstr "Логическое И"

msgid "``or`` ``||``"
msgstr "``or`` ``||``"

msgid "Boolean OR"
msgstr "Логическое ИЛИ"

msgid "``if x else``"
msgstr "``if x else``"

msgid "Ternary if/else"
msgstr "Тернарный оператор Если/Иначе (if/else)"

msgid "``as``"
msgstr "``as``"

msgid "Type casting"
msgstr "Приведение типов"

msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=`` ``<<=`` ``>>=``"
msgstr "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=`` ``<<=`` ``>>=``"

msgid "Assignment (lowest priority)"
msgstr "Присваивание (низший приоритет)"

msgid "Literals"
msgstr "Литералы"

msgid "**Literal**"
msgstr "**Литерал**"

msgid "**Type**"
msgstr "**Тип**"

msgid "``45``"
msgstr "``45``"

msgid "Base 10 integer"
msgstr "Целое число в десятичной системе счисления"

msgid "``0x8f51``"
msgstr "``0x8f51``"

msgid "Base 16 (hexadecimal) integer"
msgstr "Основание 16 (шестнадцатеричное) целое число"

msgid "``0b101010``"
msgstr "``0b101010``"

msgid "Base 2 (binary) integer"
msgstr "Целое число в двоичной системе счисления"

msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

msgid "Floating-point number (real)"
msgstr "Число с плавающей точкой (вещественное число)"

msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr "``\"Привет\"``, ``\"Дарова!\"``"

msgid "Strings"
msgstr "Строки"

msgid "``\"\"\"Hello\"\"\"``"
msgstr "``\"\"\"Привет\"\"\"``"

msgid "Multiline string"
msgstr "Многострочная строка"

msgid "``@\"Node/Label\"``"
msgstr "``@\"Node/Label\"``"

msgid ":ref:`class_NodePath` or StringName"
msgstr ":ref:`class_NodePath` или StringName"

msgid "``$NodePath``"
msgstr "``$NodePath``"

msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "Сокращение для ``get_node(\"NodePath\")``"

msgid ""
"Integers and floats can have their numbers separated with ``_`` to make them "
"more readable. The following ways to write numbers are all valid::"
msgstr ""
"Типы данных int и float могут объявляться с номерами, разделёнными ``_``, "
"для удобочитаемого вида. Допустимы следующие способы записи чисел::"

msgid "Comments"
msgstr "Комментарии"

msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr ""
"Все, что находится после символа ``#`` до конца строки игнорируется и "
"считается комментарием."

msgid "Built-in types"
msgstr "Встроенные типы"

msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Pooled arrays such as "
"``PoolByteArray`` are still passed as values.)"
msgstr ""
"Встроенные типы распределены по стекам. Они передаются как значения. Это "
"означает, что копия создается на каждом присваивании или при передаче их в "
"качестве аргументов функциям. Единственным исключением являются ``Array`` и "
"``Dictionaries``, которые передаются по ссылке и являются общими. (Не "
"``PoolArray`` типа ``PoolByteArray``, но они тоже передаются как значения, "
"поэтому учитывайте это при решении, что именно нужно использовать для Вашего "
"проекта!)"

msgid "Basic built-in types"
msgstr "Базовые встроенные типы"

msgid "A variable in GDScript can be assigned to several built-in types."
msgstr ""
"Переменная в GDScript может быть определена несколькими встроенными типами."

msgid "null"
msgstr "null"

msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null`` - это пустой тип данных, который не содержит никакой информации и "
"не может принимать другие значения."

msgid ":ref:`bool <class_bool>`"
msgstr ":ref:`bool <class_bool>`"

msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""
"Сокращенно от \"boolean\", оно может содержать только ``true`` или ``false``."

msgid ":ref:`int <class_int>`"
msgstr ":ref:`int <class_int>`"

msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""
"Сокращённо от \"integer\", содержит целые числа (положительные и "
"отрицательные). Хранится как 64-битное значение, эквивалент \"int64_t\" в C+"
"+."

msgid ":ref:`float <class_float>`"
msgstr ":ref:`float <class_float>`"

msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, "
"data structures such as Vector2, Vector3, and PoolRealArray store 32-bit "
"single-precision \"float\" values."
msgstr ""
"Содержит действительные числа, включая десятичные, используя значения с "
"плавающей запятой. Хранится как 64-битное значение, эквивалент \"double\" в "
"C++. Примечание: В настоящее время структуры данных, такие как Vector2, "
"Vector3 и PoolRealArray хранятся как 32-битные плавающие одинарные значения "
"\"float\"."

msgid ":ref:`String <class_String>`"
msgstr ":ref:`String <class_String>`"

msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain the following escape sequences:"
msgstr ""
"Последовательность символов в формате Unicode <https://en.wikipedia.org/wiki/"
"Unicode> `_. Строки могут содержать следующие escape-последовательности:"

msgid "**Escape sequence**"
msgstr "**Escape-последовательность**"

msgid "**Expands to**"
msgstr "**Означает**"

msgid "``\\n``"
msgstr "``\\n``"

msgid "Newline (line feed)"
msgstr "Новая строка (перевод строки)"

msgid "``\\t``"
msgstr "``\\t``"

msgid "Horizontal tab character"
msgstr "Символ горизонтальной табуляции"

msgid "``\\r``"
msgstr "``\\r``"

msgid "Carriage return"
msgstr "Возврат каретки"

msgid "``\\a``"
msgstr "``\\a``"

msgid "Alert (beep/bell)"
msgstr "Оповещение (звуковой сигнал/звонок)"

msgid "``\\b``"
msgstr "``\\b``"

msgid "Backspace"
msgstr "Возврат"

msgid "``\\f``"
msgstr "``\\f``"

msgid "Formfeed page break"
msgstr "Разрыв страницы"

msgid "``\\v``"
msgstr "``\\v``"

msgid "Vertical tab character"
msgstr "Символ вертикальной табуляции"

msgid "``\\\"``"
msgstr "``\\\"``"

msgid "Double quote"
msgstr "Двойная кавычка"

msgid "``\\'``"
msgstr "``\\'``"

msgid "Single quote"
msgstr "Одиночная кавычка"

msgid "``\\\\``"
msgstr "``\\\\``"

msgid "Backslash"
msgstr "Обратная косая черта"

msgid "``\\uXXXX``"
msgstr "``\\uXXXX``"

msgid "Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr "Символ Unicode ``XXXX``(шестнадцатеричный, без учета регистра )"

msgid "GDScript also supports :ref:`doc_gdscript_printf`."
msgstr "GDScript также поддерживает :ref:`doc_gdscript_printf`."

msgid "Vector built-in types"
msgstr "Векторные встроенные типы"

msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"2D-векторный тип, содержащий поля ``x`` и ``y``. Также может быть доступен "
"как массив."

msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ":ref:`Rect2 <class_Rect2>`"

msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"2D Прямоугольник, содержащий два поля векторов: ``position`` и ``size``. "
"Альтернативно содержит поле ``end``, которое представляет собой ``position + "
"size``."

msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"3D векторный тип, содержащий поля ``x``, ``y`` и ``z``. Может быть получен "
"как массив."

msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

msgid "3×2 matrix used for 2D transforms."
msgstr "Матрица 3x2, используемая для 2D-преобразований."

msgid ":ref:`Plane <class_Plane>`"
msgstr ":ref:`Plane <class_Plane>`"

msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"Тип трехмерной плоскости в нормализованной форме, которая содержит "
"``normal`` векторное поле и ``d`` скалярное расстояние."

msgid ":ref:`Quat <class_Quat>`"
msgstr ":ref:`Quat <class_Quat>`"

msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"Quaternion - это тип данных, используемый для представления трехмерного "
"вращения. Полезно для интерполяции вращений."

msgid ":ref:`AABB <class_AABB>`"
msgstr ":ref:`AABB <class_AABB>`"

msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"Выровненная по оси ограничительная рамка (или трехмерная коробка) содержит 2 "
"поля типа Vector: ``position`` и ``size``. Также содержит поле ``end``, "
"которое является ``position+size``."

msgid ":ref:`Basis <class_Basis>`"
msgstr ":ref:`Basis <class_Basis>`"

msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"Матрица 3x3, используемая для трехмерного вращения и масштабирования. Он "
"содержит 3 векторных поля (``x``, ``y`` и ``z``), а также доступен в виде "
"массива трехмерных векторов."

msgid ":ref:`Transform <class_Transform>`"
msgstr ":ref:`Transform <class_Transform>`"

msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3D-преобразование содержит поле Basis ``basis`` и поле Vector3 ``origin``."

msgid "Engine built-in types"
msgstr "Встроенные типы движка"

msgid ":ref:`Color <class_Color>`"
msgstr ":ref:`Color <class_Color>`"

msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"Color - тип данных цвета, содержит поля ``r``, ``g``, ``b``, и ``a``. Он "
"также доступен как ``h``, ``s``, и ``v`` для оттенка(hue)/"
"насыщенности(saturation)/значения(value)."

msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""
"Составной путь к узлу, используемый в основном в системе сцен. Он может быть "
"легко переведён в строку и из неё."

msgid ":ref:`RID <class_RID>`"
msgstr ":ref:`RID <class_RID>`"

msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"Resource ID (RID). Серверы используют общие RID для создания ссылок на "
"непрозрачные объекты."

msgid ":ref:`Object <class_Object>`"
msgstr ":ref:`Object <class_Object>`"

msgid "Base class for anything that is not a built-in type."
msgstr "Базовый класс для всего, что не является встроенным типом."

msgid "Container built-in types"
msgstr "Встроенные типы контейнеров"

msgid ":ref:`Array <class_Array>`"
msgstr ":ref:`Array <class_Array>`"

msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""
"Общая последовательность любых типов объектов, включая другие массивы или "
"словари (см. ниже). Массив может изменяться динамически. Массивы "
"индексируются, начиная с индекса ``0``. Начиная с Godot 2.1, индексы могут "
"быть отрицательными, как и в Python, считая с конца."

msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""
"Массивы в GDScript выделяются в памяти линейно для повышения скорости "
"работы. Однако большие массивы (более десятков тысяч элементов) могут "
"привести к фрагментации памяти. Если это проблема, то доступны специальные "
"типы массивов. Они принимают только один тип данных. Они избегают "
"фрагментации памяти и также потребляют меньше памяти, но являются атомными "
"и, как правило, работают медленнее, чем обычные массивы. Поэтому их "
"рекомендуется использовать только для больших наборов данных:"

msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""
":ref:`PoolByteArray <class_PoolByteArray>`: Массив байтов (целые числа от 0 "
"до 255)."

msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: Массив целых чисел."

msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ""
":ref:`PoolRealArray <class_PoolRealArray>`: Массив чисел с плавающей точкой."

msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ":ref:`PoolStringArray <class_PoolStringArray>`: Массив строк."

msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: Массив объектов типа :ref:"
"`Vector2 <class_Vector2>`."

msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: Массив объектов типа :ref:"
"`Vector3 <class_Vector3>`."

msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""
":ref:`PoolColorArray <class_PoolColorArray>`: Массив объектов типа :ref:"
"`Color <class_Color>`."

msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ":ref:`Dictionary <class_Dictionary>`"

msgid "Associative container which contains values referenced by unique keys."
msgstr ""
"Ассоциативный контейнер, содержащий значения, на которые ссылаются "
"уникальные ключи."

msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). However, keys written in this form can't start with a digit (like "
"any GDScript identifier)."
msgstr ""
"Также поддерживается синтаксис таблиц в стиле Lua. Lua-стиль использует "
"``=`` вместо ``:`` и не использует кавычки для разметки ключей строк (что "
"делает написание немного быстрее). Обратите внимание, что, как и любой "
"другой идентификатор GDScript, ключи, написанные в этом виде, не могут "
"начинаться с цифры."

msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"Чтобы добавить ключ к существующему словарю, воспользуйтесь им как "
"существующим и назначьте ему::"

msgid ""
"The bracket syntax can be used to access properties of any :ref:"
"`class_Object`, not just Dictionaries. Keep in mind it will cause a script "
"error when attempting to index a non-existing property. To avoid this, use "
"the :ref:`Object.get() <class_Object_method_get>` and :ref:`Object.set() "
"<class_Object_method_set>` methods instead."
msgstr ""
"Синтаксис скобок может быть использован для доступа к свойствам любого "
"объекта :ref:`class_Object`, а не только для словарей. мейте в виду, что это "
"вызовет ошибку скрипта при попытке индексировать несуществующее свойство. "
"Чтобы этого избежать, вместо этого используйте методы :ref:`Object.get() "
"<class_Object_method_get>` и :ref:`Object.set() <class_Object_method_set>`."

msgid "Data"
msgstr "Данные"

msgid "Variables"
msgstr "Переменные"

msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"Переменные могут существовать как члены класса или быть локальными для "
"функций. Они создаются с помощью ключевого слова ``var`` и при желании, есть "
"возможность присвоить значение при инициализации."

msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"Опционально: Переменные могут иметь спецификацию типа. Когда тип указан, "
"переменная всегда должна иметь один и тот же тип, а попытка присвоить "
"несовместимое значение вызовет ошибку."

msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"Типы указываются при объявлении переменной символом ``:`` (двоеточие) после "
"имени переменной, за которым следует тип."

msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""
"Если переменная инициализирована в объявлении, то тип можно предугадать "
"сразу, поэтому имя типа можно не писать::"

msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"Предсказание типа возможно только в том случае, если заданное значение имеет "
"определенный тип, в противном случае возникает ошибка."

msgid "Valid types are:"
msgstr "Поддерживаемые типы:"

msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "Встроенные типы (Array, Vector2, int, String и т.д.)."

msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr "Классы движка (Node, Resource, Reference, etc.)."

msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"Константы, если они содержат скрипт ресурса (``MyScript`` если вы объявили "
"``const MyScript = preload(\"res://my_script.gd\")``)."

msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""
"Другие классы в том же скрипте, учитывающие область видимости (``InnerClass."
"NestedClass`` если вы объявили ``сlass NestedClass`` внутри ``сlass "
"InnerClass`` в той же области видимости)."

msgid "Script classes declared with the ``class_name`` keyword."
msgstr "Классы объявленные в скрипте с ключевым словом ``class_name``."

msgid "Casting"
msgstr "Приведение переменных"

msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"Значения, присваиваемые типизированным переменным, должны иметь совместимый "
"тип. Если необходимо заставить значение быть определенного типа, в "
"частности, для типов объектов, можно использовать оператор приведения ``as``."

msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"Приведение типов объектов приводит к одному и тому же объекту, если значение "
"имеет один и тот же тип или подтип приведенного типа."

msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr ""
"Если значение не является подтипом, операция приведения приведет к получению "
"значения ``null``."

msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"Для встроенных типов они будут принудительно преобразованы, если это "
"возможно, в противном случае движок выдаст ошибку."

msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""
"Приведение также полезно для получения более надежных типов переменных при "
"взаимодействии с деревом::"

msgid "Constants"
msgstr "Константы"

msgid ""
"Constants are values you cannot change when the game is running. Their value "
"must be known at compile-time. Using the ``const`` keyword allows you to "
"give a constant value a name. Trying to assign a value to a constant after "
"it's declared will give you an error."
msgstr ""
"Константы — это значения, которые не меняются в ходе игры. Они должны быть "
"известны на этапе компиляции. Используя ключевое слово ``const``, вам "
"разрешается присвоить константное значение переменной. Повтор этого трюка с "
"уже объявленной константой — вызовет ошибку."

msgid "We recommend using constants whenever a value is not meant to change."
msgstr ""
"Мы рекомендуем использовать константы там, где подразумевается неизменность "
"их значений."

msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""
"Хотя тип констант берется из присвоенного значения, можно также явно описать "
"тип::"

msgid "Assigning a value of an incompatible type will raise an error."
msgstr "Присвоение значения несовместимого типа приведет к ошибке."

msgid ""
"Since arrays and dictionaries are passed by reference, constants are "
"\"flat\". This means that if you declare a constant array or dictionary, it "
"can still be modified afterwards. They can't be reassigned with another "
"value though."
msgstr ""
"Поскольку массивы и словари передаются по ссылке, константы являются "
"\"плоскими\". Это означает, что если вы объявите постоянный массив или "
"словарь, он все равно может быть изменен впоследствии. Однако они не могут "
"быть переназначены с другим значением."

msgid "Enums"
msgstr "Перечисления"

msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"Перечисления это фактически сокращения для констант, и они очень полезны "
"если вы хотите присвоить конкретные числовые значения некоторым константам."

msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant "
"dictionary of that name."
msgstr ""
"Если вы передадите имя перечислению, оно поместит все значения в постоянный "
"словарь (constant dictionary) с этим именем."

msgid ""
"In Godot 3.1 and later, keys in a named enum are not registered as global "
"constants. They should be accessed prefixed by the enum's name (``Name."
"KEY``); see an example below."
msgstr ""
"В Godot версии 3.1 и выше ключи именованного перечисления не регистрируются "
"как глобальные константы. Для доступа к ним необходим префикс в виде "
"названия перечисления (``Name.KEY``); см. пример ниже."

msgid "Functions"
msgstr "Функции"

msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""
"Функции всегда принадлежат классу ` <Classes_>`_ . Приоритет области "
"видимости для поиска переменной следующий: локальная → член класса → "
"глобальная. Переменная ``self`` всегда доступна и предоставляется как опция "
"для доступа к членам класса, но не всегда требуется (и не должна *не* "
"передаваться в качестве первого аргумента функции, в отличие от Python)."

msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"Функция может ``return`` (возвращать) значения. Если вы ничего не "
"возвращаете, то она является ``null``."

msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""
"Функции могут также иметь спецификацию типов для аргументов и возвращаемого "
"значения. Типы аргументам можно добавлять аналогично переменным::"

msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr ""
"Если аргумент функции имеет значение по умолчанию, то можно спрогнозировать "
"тип::"

msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""
"Тип возврата функции может быть указан после списка аргументов с помощью "
"символа стрелки (``->``)::"

msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"Функции, имеющие тип возврата **должны** возвращать правильное значение. Тип "
"``void`` означает, что функция ничего не возвращает. Пустые функции могут "
"возвращаться раньше с ключевым словом ``return``, но они не могут возвращать "
"значения."

msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"Не пустые (Non-void) функции должны **всегда** возвращать значение, поэтому "
"если в вашем коде есть ветвистые выражения (такие как конструкция ``if``/"
"``else``), все возможные пути должны иметь ответвление. Например, если "
"``return`` внутри блока ``if``, но не после него, то редактор выдаст ошибку, "
"потому что если условие не будет выполнено, то функция не будет иметь "
"действительного значения для возврата."

msgid "Referencing functions"
msgstr "Ссылочные функции"

msgid ""
"Contrary to Python, functions are *not* first-class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""
"В отличие от Python, функции *не* являются объектами первого класса в "
"GDScript. Это означает, что они не могут храниться в переменных, "
"передаваться в качестве аргумента другой функции или возвращаться из других "
"функций. Это все ради производительности."

msgid ""
"To reference a function by name at run-time, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the "
"``call`` or ``funcref`` helpers::"
msgstr ""
"Для обращения к функции по имени во время выполнения (например, для хранения "
"ее в переменной или передачи другой функции в качестве аргумента) необходимо "
"использовать помощники ``call`` или ``funcref``::"

msgid "Static functions"
msgstr "Статические функции"

msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions::"
msgstr ""
"Функция может быть объявлена как статическая. Когда функция статична, она не "
"имеет доступа к переменным, входящим в состав экземпляра, или к ``self``. "
"Это, в основном, полезно для создания библиотек вспомогательных функций:"

msgid "Statements and control flow"
msgstr "Операторы и контроль потока"

msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"Операторы являются стандартными и могут быть присваиваниями, вызовами "
"функций, структурами управления потоком и т.д. (см. ниже). Разделитель ``;`` "
"является абсолютно необязательным."

msgid "if/else/elif"
msgstr "if/elsе/elif"

msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"Простые условия создаются с помощью такого синтаксиса ``if``/``else``/"
"``elif``. Скобки вокруг условий допускаются, но не требуются. Учитывая "
"характер отступа на основе табуляции, можно использовать ``elif`` вместо "
"``else``/``if`` для сохранения уровня отступа."

msgid "Short statements can be written on the same line as the condition::"
msgstr ""
"Небольшое выражение может быть написано на той же строке, что и условие::"

msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"Иногда на основе логического выражения может потребоваться присвоить другое "
"начальное значение. В этом случае могут пригодиться выражения тернарного if::"

msgid ""
"Ternary-if expressions can be nested to handle more than 2 cases. When "
"nesting ternary-if expressions, it is recommended to wrap the complete "
"expression over multiple lines to preserve readability::"
msgstr ""
"Тернарные-if могут быть вложенными для обработки более чем двух случаев. При "
"вложении тернарных выражений if рекомендуется заключить полное выражение в "
"несколько строк, чтобы сохранить удобочитаемость:"

msgid ""
"You may also wish to check if a value is contained within something. You can "
"use an ``if`` statement combined with the ``in`` operator to accomplish "
"this::"
msgstr ""

#, fuzzy
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue`` (i.e. skipping to the next "
"iteration of the loop without executing any further code in the current "
"iteration):"
msgstr ""
"Простые циклы создаются с помощью `` while``. Циклы могут быть разорваны с "
"помощью команды ``break`` или продолжены (пропускается данная итерация) с "
"помощью ``continue``:"

msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *key* is stored in the "
"loop variable."
msgstr ""
"Чтобы итерировать заданный диапазон, например, массив или таблицу, "
"используется цикл *for*. При итерации над массивом элемент текущего массива "
"хранится в переменной цикла. При итерации по словарю в переменной цикла "
"хранится *индекс*."

msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"Оператор ``match`` используется для ветвления. Это эквивалентно оператору "
"``switch``, встречающемуся на многих других языках, но ``match`` предлагает "
"некоторые дополнительные возможности."

msgid "Basic syntax::"
msgstr "Основной синтаксис::"

msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr "**Ускоренный курс для людей, знакомых с правилами switch**:"

msgid "Replace ``switch`` with ``match``."
msgstr "Замените ``switch`` на ``match``."

msgid "Remove ``case``."
msgstr "Уберите ``case``."

msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""
"Удалите все ``break``. Если вы не хотите чтобы ``break`` был по умолчанию, "
"вы можете использовать ``continue`` для продолжения проверки."

msgid "Change ``default`` to a single underscore."
msgstr "Смените ``default`` на единичное подчеркивание."

msgid "**Control flow**:"
msgstr "**Управление потоком**:"

msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the first "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. You can use ``continue`` to stop execution in "
"the current block and check for an additional match in the patterns below it."
msgstr ""
"Шаблоны проверяются сверху вниз. Если шаблон совпадает со значением, то "
"будет выполнен соответствующий блок. После этого исполнение продолжится ниже "
"оператора ``match`` (то есть другие варианты пропускаются). Если вы хотите "
"продолжить проверку, вы можете использовать ``continue`` для остановки "
"исполнения в текущем блоке и проверки тех, что ниже него."

msgid "There are 6 pattern types:"
msgstr "Существует 6 типов шаблонов:"

msgid "Constant pattern"
msgstr "Постоянный шаблон"

msgid "Constant primitives, like numbers and strings::"
msgstr "Постоянные (константные) примитивы, такие как числа и строки ::"

msgid "Variable pattern"
msgstr "Шаблон переменной"

msgid "Matches the contents of a variable/enum::"
msgstr "Соответствует содержимому переменной/перечисления(enum)::"

msgid "Wildcard pattern"
msgstr "Шаблон подстановки"

msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""
"Этот шаблон подходит для любого поиска. Это пишется как единичное "
"подчёркивание."

msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""
"Он может быть использован как эквивалент выражения ``default`` в выражении "
"``switch`` на других языках. ::"

msgid "Binding pattern"
msgstr "Шаблон привязки"

msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""
"Шаблон привязки вводит новую переменную. Как и шаблон подстановки, он "
"соответствует всему, а также присваивает этому значению имя. Это особенно "
"полезно в шаблонах массивов и словарей::"

msgid "Array pattern"
msgstr "Шаблон массива"

msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"Соответствует массиву. Каждый отдельный элемент шаблона массива сам по себе "
"является шаблоном, поэтому вы можете их вкладывать."

msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"Сначала проверяется длина массива, она должна быть того же размера, что и "
"шаблон, в противном случае шаблон не совпадет."

msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""
"**Открытый массив**: Массив может быть больше, чем массив, создавая "
"последнюю подшаблонку ``..``."

msgid "Every subpattern has to be comma-separated."
msgstr "Каждый подшаблон должен быть разделен запятыми."

msgid "Dictionary pattern"
msgstr "Шаблон словаря"

msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""
"Работает так же, как шаблон массива. Каждый ключ должен быть постоянным "
"шаблоном."

msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"Сначала проверяется размер словаря, он должен быть того же размера, что и "
"шаблон, в противном случае шаблон не совпадет."

msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""
"**Открытый словарь**: Словарь может быть больше шаблона, если сделать "
"последний подшаблоном - ``..``."

msgid "Every subpattern has to be comma separated."
msgstr "Каждый подшаблон должен быть разделен запятыми."

msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "Если вы не указываете значение, то проверяется только наличие ключа."

msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr "Шаблон значения отделяется от шаблона ключа символом ``:``."

msgid "Multiple patterns"
msgstr "Несколько шаблонов"

msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""
"Также можно указать несколько разных шаблонов, разделенных запятой. Эти "
"шаблоны не должны иметь никаких привязок в них."

msgid "Classes"
msgstr "Классы"

msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""
"По умолчанию, все файлы скриптов это классы без имен. В этом случае вы "
"можете ссылаться на них только по пути файла, с помощью относительного или "
"абсолютного пути. Например, если вы назовете файл скрипта ``character.gd``::"

msgid "Registering named classes"
msgstr "Регистрация именованных классов"

msgid ""
"You can give your class a name to register it as a new type in Godot's "
"editor. For that, you use the ``class_name`` keyword. You can optionally add "
"a comma followed by a path to an image, to use it as an icon. Your class "
"will then appear with its new icon in the editor::"
msgstr ""
"Вы можете дать вашему классу имя и зарегистрировать его как новый тип в "
"редакторе Godot. Для этого используйте ключевое слово ``class_name``. Помимо "
"этого, через запятую можно указать путь к изображению, которое будет "
"использоваться как иконка. После этих действий ваш класс появится с его "
"новой иконкой в редакторе::"

msgid ""
"If the script is located in the ``res://addons/`` directory, ``class_name`` "
"will only cause the node to show up in the **Create New Node** dialog if the "
"script is part of an *enabled* editor plugin. See :ref:`doc_making_plugins` "
"for more information."
msgstr ""
"Если сценарий находится в каталоге ``res://addons/``, ``class_name`` "
"приведет к тому, что узел будет отображаться в диалоговом окне **Создать "
"новый узел**, только если сценарий является частью *включено* плагина "
"редактора. Смотрите: ref:`doc_making_plugins` для получения дополнительной "
"информации."

msgid "Here's a class file example:"
msgstr "Вот пример файла класса:"

msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""
"Синтаксис класса в Godot компактен: он может содержать только внутренние "
"переменные или функции. Вы можете использовать статические функции, но не "
"статические внутренние переменные. Таким же образом, движок инициализирует "
"переменные каждый раз, когда вы создаете экземпляр, и это включает массивы и "
"словари. Это ради безопасности потока, так как скрипты могут быть "
"инициализированы в отдельных потоках без ведома пользователя."

msgid "Inheritance"
msgstr "Наследование"

msgid "A class (stored as a file) can inherit from:"
msgstr "Класс (хранимый как файл) может наследоваться от:"

msgid "A global class."
msgstr "Глобального класса."

msgid "Another class file."
msgstr "Другого файла класса."

msgid "An inner class inside another class file."
msgstr "Внутреннего класса внутри другого файла класса."

msgid "Multiple inheritance is not allowed."
msgstr "Множественное наследование невозможно."

msgid "Inheritance uses the ``extends`` keyword::"
msgstr "При наследовании использует ключевое слово ``extends``:"

msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""
"Чтобы проверить, наследуется ли данный экземпляр от данного класса, можно "
"использовать ключевое слово ``is``::"

msgid ""
"To call a function in a *parent class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name::"
msgstr ""
"Чтобы вызвать функцию, находящуюся в *родительском классе* (т.е. функцию "
"``extend``-класса в текущем классе), добавьте ``.`` к имени функции:"

msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their parent classes. If you still want to "
"call them, you can prefix them with ``.`` (like the ``super`` keyword in "
"other languages)::"
msgstr ""
"Это особенно полезно, поскольку функции в классах-потомках заменяют "
"(переопределяют) функции с тем же именем в своих родительских классах. Если "
"вы хотите вызвать функцию из класса-родителя, вызывайте их, поставив ``.`` "
"перед именем функции (как и ключевое слово super в других языках):"

msgid ""
"Default functions like  ``_init``, and most notifications such as "
"``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. "
"are called in all parent classes automatically. There is no need to call "
"them explicitly when overloading them."
msgstr ""
"Функции по умолчанию, такие как ``_init``, и большинство уведомлений, таких "
"как ``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process`` и "
"др. вызываются во всех родительских классах автоматически. Нет необходимости "
"вызывать их вручную при перегрузке этих функций."

msgid "Class constructor"
msgstr "Конструктор класса"

msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So, there is usually no need to call "
"``._init()`` explicitly."
msgstr ""
"Конструктор класса, вызываемый при создании экземпляра класса, называется "
"``_init``. Как упоминалось ранее, конструкторы родительских классов "
"вызываются автоматически при наследовании класса. Таким образом, обычно нет "
"необходимости явно вызывать ``._init ()``."

msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this::"
msgstr ""
"В отличие от вызова обычной функции, как в приведенном выше примере с ``."
"some_func``, если конструктор из унаследованного класса принимает аргументы, "
"то они передаются следующим образом::"

msgid "This is better explained through examples. Consider this scenario::"
msgstr "Это лучше объяснить на примере. Предположим, у нас следующая ситуация:"

msgid "There are a few things to keep in mind here:"
msgstr "Здесь есть несколько вещей, которые необходимо держать в голове:"

msgid ""
"If the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``."
msgstr ""
"Если унаследованный класс (``State.gd``) определяет конструктор ``_init``, "
"который принимает аргументы (в данном случае ``e``), то наследованный класс "
"(``Idle.gd``) также должен определить ``_init`` и передать соответствующие "
"параметры в этот ``_init`` из ``State.gd``."

msgid ""
"``Idle.gd`` can have a different number of arguments than the parent class "
"``State.gd``."
msgstr ""
"Количество аргументов в ``Idle.gd`` может отличаться от количества "
"аргументов в базовом классе ``State.gd``."

msgid ""
"In the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``."
msgstr ""
"в приведенном выше примере, ``e``, переданный конструктору ``State.gd`` "
"является тем же ``e`` переданным в ``Idle.gd``."

msgid ""
"If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` parent class, even if it does nothing. "
"This brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables, e.g.::"
msgstr ""
"Если конструктор ``_init`` в ``Idle.gd`` принимает ноль аргументов, то ему "
"все равно нужно передать некоторое значение в родительский класс ``State."
"gd``, даже если он ничего не делает. Что подводит нас к тому, что литералы "
"можно передавать не только переменным, но и в базовом конструкторе. Например:"

msgid "Inner classes"
msgstr "Внутренние классы"

msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"Файл класса может хранить внутренние классы. Внутренние классы определяются "
"с помощью ключевого слова ``class``. Создать экземпляр можно с помощью "
"функции ``ClassName.new()``."

msgid "Classes as resources"
msgstr "Классы как ресурсы"

msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"Классы, хранящиеся в файлах, рассматриваются как :ref:`ресурсы "
"<class_GDScript>`. Они должны быть загружены с диска для доступа к ним в "
"других классах. Это делается с помощью функций ``load`` или ``preload`` (см. "
"ниже). Создание экземпляра загруженного ресурса класса осуществляется "
"вызовом функции ``new`` на объекте класса::"

msgid "Exports"
msgstr "Экспорт"

msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr "Документация об экспорте перемещена в :ref:`doc_gdscript_exports`."

msgid "Setters/getters"
msgstr "Сеттеры/геттеры"

msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""
"Часто полезно знать, когда переменная, входящая в состав класса, изменяется "
"по какой-то причине. Возможно вы хотите ее инкапсулировать."

msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""
"Для этого GDScript предоставляет синтаксис *setter/getter*, используя "
"ключевое слово ``setget``. Использовать непосредственно после определения "
"переменной:"

msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example::"
msgstr ""
"Всякий раз, когда значение ``variable`` изменяется *внешним* источником (т."
"е. не от локального использования в классе), вызывается функция *setter* "
"(``setterfunc`` выше). Это происходит *до* того, как значение изменится. "
"*Сеттер* должен решить, что делать с новым значением. И наоборот, когда "
"``variable`` доступна, функция *getter* (``getterfunc`` выше) должна "
"``return(возвращать)`` желаемое значение. Ниже приведен пример:"

msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr "Любая из функций *setter* или *getter* может быть пропущена:"

msgid ""
"Setters and getters are useful when :ref:`exporting variables "
"<doc_gdscript_exports>` to the editor in tool scripts or plugins, for "
"validating input."
msgstr ""
"Сеттеры и геттеры полезны при :ref:`экспорте переменных "
"<doc_gdscript_exports>` в редактор в инструментах скриптов или плагинов для "
"проверки ввода."

msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""
"Как уже говорилось, *локальный* доступ *не будет* запускать сеттер и геттер. "
"Вот иллюстрация этого:"

msgid "Tool mode"
msgstr "Режим Инструмента"

msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file::"
msgstr ""
"Скрипты по умолчанию не запускаются внутри редактора, и только "
"экспортируемые свойства могут быть изменены. В некоторых случаях желательно, "
"чтобы они выполнялись внутри редактора (до тех пор, пока они не выполняют "
"код игры или не избегают этого вручную). Для этого существует ключевое слово "
"``tool``, которое должно размещаться в верхней части файла:"

msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ":ref:`doc_running_code_in_the_editor`."

msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""
"Будьте осторожны при освобождении узлов с помощью ``queue_free()`` или "
"``free()`` в скрипт инструмента (особенно самого владельца скрипта). Так как "
"скрипт инструмента запускает свой код в редакторе, неправильное их "
"использование может привести к крашу редактора."

msgid "Memory management"
msgstr "Управление памятью"

msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call ``instance.free()``. To avoid "
"reference cycles that can't be freed, a :ref:`class_WeakRef` function is "
"provided for creating weak references. Here is an example:"
msgstr ""
"Если класс наследуется от :ref:`class_Reference`, то экземпляры будут "
"удалены, когда они больше не будут использоваться. Вместо сборщика мусора "
"происходит подсчет ссылок. По умолчанию, все классы, которые не определяют "
"наследование, расширяются **Reference**. Если это нежелательно, то класс "
"должен наследовать :ref:`class_Object` вручную и вызывать instance.free(). "
"Чтобы избежать циклов ссылок, которые не могут быть освобождены, для "
"создания слабых ссылок предусмотрена функция ``weakref``. Вот пример:"

msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"Или же, если ссылки не используются, `is_instance_valid(instance)` может "
"быть использован для проверки того, был ли освобожден объект."

msgid "Signals"
msgstr "Сигналы"

msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""
"Сигналы это способ отправки уведомлений от объекта, на которые могут "
"реагировать другие объекты. Чтобы создать собственные сигналы для класса, "
"используйте ключевое слово ``signal``."

msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""
"Сигналы это `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ механизм. Они также выполняют роль "
"наблюдателя, распространенный шаблон программирования. Для лучшего понимания "
"информации, читайте `про шаблон наблюдатель <https://gameprogrammingpatterns."
"com/observer.html>`_ в словаре Шаблонов Игрового Программирования."

msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""
"Вы можете подключать эти сигналы к методам точно так же, как вы подключаете "
"встроенные сигналы узлов типа :ref:`class_Button` или :ref:`class_RigidBody`."

msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""
"В примере ниже мы соединили сигнал ``health_depleted`` от узла ``Character`` "
"с узлом ``Game``. Когда узел ``Character`` отправляет сигнал, вызывается "
"игровой узел ``_on_Character_health_depleted``::"

msgid "You can emit as many arguments as you want along with a signal."
msgstr ""
"Вы можете отправлять вместе с сигналом столько аргументов, сколько хотите."

msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""
"Вот пример, где это может быть полезным. Допустим, мы хотим, чтобы полоса "
"здоровья на экране реагировала на изменения здоровья анимацией, но мы хотим, "
"чтобы пользовательский интерфейс был отделен от игрока в нашем дереве сцен."

msgid ""
"In our ``Character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, "
"and from a ``Game`` node higher up our scene tree, we connect it to the "
"``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` "
"method::"
msgstr ""
"В нашем скрипте ``Character.gd`` мы определяем сигнал ``health_changed`` и "
"отправляем его вместе с :ref:`Object.emit_signal() "
"<class_Object_method_emit_signal>`, и узел ``Game`` выше по дереву сцен мы "
"соединяем с ``Lifebar`` используя метод :ref:`Object.connect() "
"<class_Object_method_connect>`::"

msgid ""
"To use signals, your class has to extend the ``Object`` class or any type "
"extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""
"Чтобы использовать сигналы, ваш класс должен расширить класс ``Object``или "
"любой другой тип, расширяя его в виде ``Node``, ``KinematicBody``, "
"``Control``..."

msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""
"В узле ``Game`` мы берём узлы ``Character`` и ``Lifebar``, затем соединяем "
"символ, отправляющий сигнал, с получателем, в нашем случае с узлом "
"``Lifebar``."

msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""
"Это позволяет ``Lifebar`` реагировать на изменения здоровья без соединения с "
"узлом ``Character``."

msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr ""
"Вы можете написать дополнительные аргументы в скобках после определения "
"сигнала::"

msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""
"Эти аргументы показываются в доке узла редактора, и Godot может использовать "
"их, чтобы производить для вас функции обратного вызова. Однако, вы всё ещё "
"можете отправлять любое число аргументов при отправке сигналов; отправка "
"правильных значений (и их проверок) зависит только от вас."

msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""
"GDScript может связывать массив значений с соединениями между сигналом и "
"методом. Когда сигнал отправляется, метод обратного вызова получает "
"связанные значения. Эти связанные аргументы уникальны для каждого "
"соединения, и значения останутся прежними."

msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""
"Вы можете использовать это множество значений чтобы добавить дополнительную "
"постоянную информацию в соединение, если сам отправляемый сигнал не даёт вам "
"доступ ко всем данным, которые вам нужны."

msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""
"Основываясь на предыдущем примере, представим, что мы хотим показать лог "
"урона, полученного всеми персонажами на экране, вроде ``Игрок1 получил 22 "
"единицы урона``. Сигнал ``health_changed`` не выдаёт имя получившего урон "
"персонажа. Так что, когда мы соединим сигнал с внутриигровой консолью, мы "
"можем добавить имя персонажа в связку аргумента массива::"

msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr ""
"Наш узел ``BattleLog`` получает каждый элемент в связке массива как "
"дополнительный аргумент::"

msgid "Coroutines with yield"
msgstr "Сопрограммы с промежуточным возвратом (yield)"

msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the return "
"value. Calling ``resume()`` on this resulting object will continue execution "
"and return whatever the function returns. Once resumed, the state object "
"becomes invalid. Here is an example::"
msgstr ""
"GDScript предлагает поддержку `сопрограмм <https://en.wikipedia.org/wiki/"
"Coroutine>`_ через встроенную функцию :ref:"
"`yield<class_@GDScript_method_yield>`. Вызов ``yield()`` немедленно "
"произведет возврат из текущей функции с текущим замороженным состоянием этой "
"же функции как возвращаемое значение. При вызове ``resume()`` на данном "
"результате объект продолжит выполнение и вернет все, что возвращает функция. "
"После возобновления состояние объекта становится недействительным. Вот "
"пример:"

msgid "Will print::"
msgstr "Будет выведено:"

msgid ""
"It is also possible to pass values between ``yield()`` and ``resume()``, for "
"example::"
msgstr ""
"Также можно передавать значения между функциями ``yield()`` и ``resume()``, "
"например:"

msgid ""
"Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr ""
"Не забывайте сохранять новое состояние функции при использовании нескольких "
"``yield``::"

msgid "Coroutines & signals"
msgstr "Сопрограммы и сигналы"

msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples::"
msgstr ""
"Настоящая мощь использования ``yield`` заключается в их сочетании с "
"сигналами. ``yield`` может принимать два аргумента, объект и сигнал. Когда "
"сигнал будет получен, выполнение будет возобновлено. Вот несколько примеров:"

msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example::"
msgstr ""
"Сами сопрограммы используют сигнал ``completed`` при переходе в "
"недействительное состояние, например:"

msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr "``my_func`` будет продолжаться только после нажатия обеих кнопок."

msgid "You can also get the signal's argument once it's emitted by an object:"
msgstr ""
"Вы также можете получить аргумент сигнала, когда он передается объектом:"

msgid ""
"If there is more than one argument, ``yield`` returns an array containing "
"the arguments::"
msgstr ""
"Если передано несколько аргументов, то ``yield`` вернёт массив из этих "
"аргументов::"

msgid ""
"If you're unsure whether a function may yield or not, or whether it may "
"yield multiple times, you can yield to the ``completed`` signal "
"conditionally:"
msgstr ""
"Если вы не уверены, может ли функция вернуть промежуточный результат или "
"нет, или может ли он вернуться несколько раз, вы можете привести "
"промежуточный результат к сигналу ``completed`` через условие:"

msgid ""
"This ensures that the function returns whatever it was supposed to return "
"regardless of whether coroutines were used internally. Note that using "
"``while`` would be redundant here as the ``completed`` signal is only "
"emitted when the function didn't yield anymore."
msgstr ""
"Это гарантирует то, что функция возвращает все, что предполагалось вернуть, "
"независимо от того, использовались ли внутри сопрограммы. Обратите внимание, "
"что использование `while`` было бы здесь лишним, поскольку сигнал` "
"`completed`` посылается только тогда, когда у функции больше не остается "
"промежуточных возвратов."

msgid "`onready` keyword"
msgstr "ключевое слово `onready`"

msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""
"При использовании узлов часто возникает желание сохранить ссылки на части "
"сцены в переменной. Поскольку конфигурирование сцен гарантировано только при "
"входе в активное дерево сцен, дочерние узлы могут быть получены только при "
"вызове функции Node._ready()."

msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""
"Это может стать немного громоздким, особенно когда узлы и внешние ссылки "
"накапливаются. Для этого в GDScript есть ключевое слово ``onready``, которое "
"откладывает инициализацию входящей переменной до вызова ``_ready()``. Он "
"может заменить приведенный выше код одной строкой:"

msgid "Assert keyword"
msgstr "Ключевое слово Assert"

msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""
"Ключевое слово ``assert`` можно использовать для проверки условий в "
"отладочных сборках. В неотладочных сборках такие утверждения игнорируются. "
"Это означает, что передаваемое как аргумент выражение не будет "
"обрабатываться в проекте, экспортированном в режиме релиза. Поэтому "
"утверждения **не должны** содержать выражения, имеющие побочные эффекты. В "
"противном случае поведение скрипта в отладочной и релизной сборке будет "
"различаться."

msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""
"Когда запускаешь проект через редактор, первый будет остановлен, если "
"произойдёт ошибка утверждения."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
