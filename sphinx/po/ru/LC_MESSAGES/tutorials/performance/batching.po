# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Optimization using batching"
msgstr "Оптимизация"

msgid "Introduction"
msgstr "Введение"

msgid ""
"Game engines have to send a set of instructions to the GPU to tell the GPU "
"what and where to draw. These instructions are sent using common "
"instructions called :abbr:`APIs (Application Programming Interfaces)`. "
"Examples of graphics APIs are OpenGL, OpenGL ES, and Vulkan."
msgstr ""

msgid ""
"Different APIs incur different costs when drawing objects. OpenGL handles a "
"lot of work for the user in the GPU driver at the cost of more expensive "
"draw calls. As a result, applications can often be sped up by reducing the "
"number of draw calls."
msgstr ""

#, fuzzy
msgid "Draw calls"
msgstr "Недостатки"

msgid ""
"In 2D, we need to tell the GPU to render a series of primitives (rectangles, "
"lines, polygons etc). The most obvious technique is to tell the GPU to "
"render one primitive at a time, telling it some information such as the "
"texture used, the material, the position, size, etc. then saying \"Draw!"
"\" (this is called a draw call)."
msgstr ""

msgid ""
"While this is conceptually simple from the engine side, GPUs operate very "
"slowly when used in this manner. GPUs work much more efficiently if you tell "
"them to draw a number of similar primitives all in one draw call, which we "
"will call a \"batch\"."
msgstr ""

msgid ""
"It turns out that they don't just work a bit faster when used in this "
"manner; they work a *lot* faster."
msgstr ""

msgid ""
"As Godot is designed to be a general-purpose engine, the primitives coming "
"into the Godot renderer can be in any order, sometimes similar, and "
"sometimes dissimilar. To match Godot's general-purpose nature with the "
"batching preferences of GPUs, Godot features an intermediate layer which can "
"automatically group together primitives wherever possible and send these "
"batches on to the GPU. This can give an increase in rendering performance "
"while requiring few (if any) changes to your Godot project."
msgstr ""
"Поскольку Godot разработан как движок общего назначения, примитивы, "
"поступающие в рендерер Godot, могут располагаться в любом порядке, иногда в "
"похожем, а иногда в непохожем. Чтобы совместить универсальность Godot с "
"предпочтениями GPU по пакетной обработке, Godot имеет промежуточный слой, "
"который может автоматически группировать примитивы, где это возможно, и "
"отправлять эти пакеты на GPU. Это может увеличить производительность "
"рендеринга, при этом требуя незначительных изменений в проекте Godot (если "
"они вообще есть)."

#, fuzzy
msgid "How it works"
msgstr "Как работает пауза"

msgid ""
"Instructions come into the renderer from your game in the form of a series "
"of items, each of which can contain one or more commands. The items "
"correspond to Nodes in the scene tree, and the commands correspond to "
"primitives such as rectangles or polygons. Some items such as TileMaps and "
"text can contain a large number of commands (tiles and glyphs respectively). "
"Others, such as sprites, may only contain a single command (a rectangle)."
msgstr ""
"Инструкции поступают в рендерер из вашей игры в виде серии элементов, каждый "
"из которых может содержать одну или несколько команд. Элементы соответствуют "
"узлам в дереве сцены, а команды соответствуют примитивам, таким как "
"прямоугольники или многоугольники. Некоторые элементы, такие как TileMaps и "
"текст, могут содержать большое количество команд (плитки и глифы "
"соответственно). Другие, такие как спрайты, могут содержать только одну "
"команду (прямоугольник)."

msgid "The batcher uses two main techniques to group together primitives:"
msgstr ""

msgid "Consecutive items can be joined together."
msgstr ""

msgid "Consecutive commands within an item can be joined to form a batch."
msgstr ""

#, fuzzy
msgid "Breaking batching"
msgstr "Ветвление"

msgid ""
"Batching can only take place if the items or commands are similar enough to "
"be rendered in one draw call. Certain changes (or techniques), by necessity, "
"prevent the formation of a contiguous batch, this is referred to as "
"\"breaking batching\"."
msgstr ""

msgid "Batching will be broken by (amongst other things):"
msgstr ""

msgid "Change of texture."
msgstr "Смена текстуры."

msgid "Change of material."
msgstr ""

msgid "Change of primitive type (say, going from rectangles to lines)."
msgstr ""

msgid ""
"For example, if you draw a series of sprites each with a different texture, "
"there is no way they can be batched."
msgstr ""

msgid "Determining the rendering order"
msgstr "Определение порядка рендеринга"

msgid ""
"The question arises, if only similar items can be drawn together in a batch, "
"why don't we look through all the items in a scene, group together all the "
"similar items, and draw them together?"
msgstr ""

msgid ""
"In 3D, this is often exactly how engines work. However, in Godot's 2D "
"renderer, items are drawn in \"painter's order\", from back to front. This "
"ensures that items at the front are drawn on top of earlier items when they "
"overlap."
msgstr ""

msgid ""
"This also means that if we try and draw objects on a per-texture basis, then "
"this painter's order may break and objects will be drawn in the wrong order."
msgstr ""

msgid "In Godot, this back-to-front order is determined by:"
msgstr ""

msgid "The order of objects in the scene tree."
msgstr ""

msgid "The Z index of objects."
msgstr ""

msgid "The canvas layer."
msgstr "Слой холста."

msgid ":ref:`class_YSort` nodes."
msgstr ":ref:`class_YSort` узлы."

msgid ""
"You can group similar objects together for easier batching. While doing so "
"is not a requirement on your part, think of it as an optional approach that "
"can improve performance in some cases. See the :ref:"
"`doc_batching_diagnostics` section to help you make this decision."
msgstr ""

#, fuzzy
msgid "A trick"
msgstr "Кирпичи"

msgid ""
"And now, a sleight of hand. Even though the idea of painter's order is that "
"objects are rendered from back to front, consider 3 objects ``A``, ``B`` and "
"``C``, that contain 2 different textures: grass and wood."
msgstr ""

msgid "In painter's order they are ordered::"
msgstr ""

msgid ""
"Because of the texture changes, they can't be batched and will be rendered "
"in 3 draw calls."
msgstr ""

msgid ""
"However, painter's order is only needed on the assumption that they will be "
"drawn *on top* of each other. If we relax that assumption, i.e. if none of "
"these 3 objects are overlapping, there is *no need* to preserve painter's "
"order. The rendered result will be the same. What if we could take advantage "
"of this?"
msgstr ""

msgid "Item reordering"
msgstr ""

msgid ""
"It turns out that we can reorder items. However, we can only do this if the "
"items satisfy the conditions of an overlap test, to ensure that the end "
"result will be the same as if they were not reordered. The overlap test is "
"very cheap in performance terms, but not absolutely free, so there is a "
"slight cost to looking ahead to decide whether items can be reordered. The "
"number of items to lookahead for reordering can be set in project settings "
"(see below), in order to balance the costs and benefits in your project."
msgstr ""
"Оказалось, что мы можем переупорядочить элементы. Однако мы можем сделать "
"это только в том случае, если элементы удовлетворяют условиям теста на "
"перекрытие, чтобы убедиться, что конечный результат будет таким же, как если "
"бы они не были переупорядочены. Тест на перекрытие очень дешев с точки "
"зрения производительности, но не абсолютно бесплатен, поэтому заглядывание "
"вперед для решения вопроса о том, можно ли переупорядочить элементы, требует "
"небольших затрат. Количество элементов, на которые нужно заглядывать для "
"повторного упорядочивания, можно установить в настройках проекта (см. ниже), "
"чтобы сбалансировать затраты и выгоды в вашем проекте."

msgid ""
"Since the texture only changes once, we can render the above in only 2 draw "
"calls."
msgstr ""

msgid "Lights"
msgstr "Света"

msgid ""
"Although the batching system's job is normally quite straightforward, it "
"becomes considerably more complex when 2D lights are used. This is because "
"lights are drawn using additional passes, one for each light affecting the "
"primitive. Consider 2 sprites ``A`` and ``B``, with identical texture and "
"material. Without lights, they would be batched together and drawn in one "
"draw call. But with 3 lights, they would be drawn as follows, each line "
"being a draw call:"
msgstr ""
"Хотя работа системы пакетной обработки обычно довольно проста, она "
"значительно усложняется, когда используются двумерные источники света. Это "
"происходит потому, что освещение рисуется с помощью дополнительных проходов, "
"по одному для каждого света, влияющего на примитив. Рассмотрим 2 спрайта "
"``A`` и ``B``, с одинаковой текстурой и материалом. Без освещения они были "
"бы собраны вместе и отрисованы за один вызов draw. Но с тремя источниками "
"света они будут нарисованы следующим образом, каждая строка - это вызов draw:"

msgid ""
"That is a lot of draw calls: 8 for only 2 sprites. Now, consider we are "
"drawing 1,000 sprites. The number of draw calls quickly becomes astronomical "
"and performance suffers. This is partly why lights have the potential to "
"drastically slow down 2D rendering."
msgstr ""

msgid ""
"However, if you remember our magician's trick from item reordering, it turns "
"out we can use the same trick to get around painter's order for lights!"
msgstr ""

msgid ""
"If ``A`` and ``B`` are not overlapping, we can render them together in a "
"batch, so the drawing process is as follows:"
msgstr ""

msgid ""
"That is only 4 draw calls. Not bad, as that is a 2× reduction. However, "
"consider that in a real game, you might be drawing closer to 1,000 sprites."
msgstr ""

msgid "**Before:** 1000 × 4 = 4,000 draw calls."
msgstr ""

msgid "**After:** 1 × 4 = 4 draw calls."
msgstr ""

msgid ""
"That is a 1000× decrease in draw calls, and should give a huge increase in "
"performance."
msgstr ""

#, fuzzy
msgid "Overlap test"
msgstr "Переопределяемые функции"

msgid ""
"However, as with the item reordering, things are not that simple. We must "
"first perform the overlap test to determine whether we can join these "
"primitives. This overlap test has a small cost. Again, you can choose the "
"number of primitives to lookahead in the overlap test to balance the "
"benefits against the cost. With lights, the benefits usually far outweigh "
"the costs."
msgstr ""

msgid ""
"Also consider that depending on the arrangement of primitives in the "
"viewport, the overlap test will sometimes fail (because the primitives "
"overlap and therefore shouldn't be joined). In practice, the decrease in "
"draw calls may be less dramatic than in a perfect situation with no "
"overlapping at all. However, performance is usually far higher than without "
"this lighting optimization."
msgstr ""

#, fuzzy
msgid "Light scissoring"
msgstr "Световой процессор"

msgid ""
"Batching can make it more difficult to cull out objects that are not "
"affected or partially affected by a light. This can increase the fill rate "
"requirements quite a bit and slow down rendering. *Fill rate* is the rate at "
"which pixels are colored. It is another potential bottleneck unrelated to "
"draw calls."
msgstr ""

msgid ""
"In order to counter this problem (and speed up lighting in general), "
"batching introduces light scissoring. This enables the use of the OpenGL "
"command ``glScissor()``, which identifies an area outside of which the GPU "
"won't render any pixels. We can greatly optimize fill rate by identifying "
"the intersection area between a light and a primitive, and limit rendering "
"the light to *that area only*."
msgstr ""
"Чтобы решить эту проблему (и ускорить освещение в целом), пакетная обработка "
"вводит \"ножницы света\". Это позволяет использовать команду OpenGL "
"``glScissor()``, которая определяет область, за пределами которой GPU не "
"будет отрисовывать пиксели. Мы можем значительно оптимизировать коэффициент "
"заполнения, определив область пересечения между светом и примитивом и "
"ограничив рендеринг света *только этой областью*."

msgid ""
"Light scissoring is controlled with the :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` project setting. This value is between 1.0 and 0.0, "
"with 1.0 being off (no scissoring), and 0.0 being scissoring in every "
"circumstance. The reason for the setting is that there may be some small "
"cost to scissoring on some hardware. That said, scissoring should usually "
"result in performance gains when you're using 2D lighting."
msgstr ""

msgid ""
"The relationship between the threshold and whether a scissor operation takes "
"place is not always straightforward. Generally, it represents the pixel area "
"that is potentially \"saved\" by a scissor operation (i.e. the fill rate "
"saved). At 1.0, the entire screen's pixels would need to be saved, which "
"rarely (if ever) happens, so it is switched off. In practice, the useful "
"values are close to 0.0, as only a small percentage of pixels need to be "
"saved for the operation to be useful."
msgstr ""
"Связь между порогом и тем, выполняется ли операция ножниц, не всегда "
"однозначна. Как правило, он представляет собой область пикселей, которая "
"потенциально может быть \"спасена\" операцией ножниц (т.е. сохранен "
"коэффициент заполнения). При значении 1.0 потребуется сохранить все пиксели "
"экрана, что случается редко (если вообще случается), поэтому этот параметр "
"выключен. На практике полезные значения близки к 0,0, так как для того, "
"чтобы операция была полезной, необходимо сохранить лишь небольшой процент "
"пикселей."

msgid ""
"The exact relationship is probably not necessary for users to worry about, "
"but is included in the appendix out of interest: :ref:"
"`doc_batching_light_scissoring_threshold_calculation`"
msgstr ""

#, fuzzy
msgid "Light scissoring example diagram"
msgstr "Световой процессор"

msgid ""
"Bottom right is a light, the red area is the pixels saved by the scissoring "
"operation. Only the intersection needs to be rendered."
msgstr ""

#, fuzzy
msgid "Vertex baking"
msgstr "Векторные встроенные типы"

msgid "The GPU shader receives instructions on what to draw in 2 main ways:"
msgstr ""

msgid "Shader uniforms (e.g. modulate color, item transform)."
msgstr ""

msgid "Vertex attributes (vertex color, local transform)."
msgstr ""

msgid ""
"However, within a single draw call (batch), we cannot change uniforms. This "
"means that naively, we would not be able to batch together items or commands "
"that change ``final_modulate`` or an item's transform. Unfortunately, that "
"happens in an awful lot of cases. For instance, sprites are typically "
"individual nodes with their own item transform, and they may have their own "
"color modulate as well."
msgstr ""
"Однако в рамках одного вызова рисования (пакетного) мы не можем менять "
"форму. Это означает, что наивно мы не сможем объединить в пакет элементы или "
"команды, которые изменяют ``final_modulate`` или трансформацию элемента. К "
"сожалению, это происходит в огромном количестве случаев. Например, спрайты "
"обычно представляют собой отдельные узлы с собственным преобразованием "
"элемента, и у них также может быть своя цветовая модуляция."

msgid ""
"To get around this problem, the batching can \"bake\" some of the uniforms "
"into the vertex attributes."
msgstr ""

msgid ""
"The item transform can be combined with the local transform and sent in a "
"vertex attribute."
msgstr ""

msgid ""
"The final modulate color can be combined with the vertex colors, and sent in "
"a vertex attribute."
msgstr ""

msgid ""
"In most cases, this works fine, but this shortcut breaks down if a shader "
"expects these values to be available individually rather than combined. This "
"can happen in custom shaders."
msgstr ""

#, fuzzy
msgid "Custom shaders"
msgstr "Пользовательские сигналы"

msgid ""
"As a result of the limitation described above, certain operations in custom "
"shaders will prevent vertex baking and therefore decrease the potential for "
"batching. While we are working to decrease these cases, the following "
"caveats currently apply:"
msgstr ""

msgid ""
"Reading or writing ``COLOR`` or ``MODULATE`` disables vertex color baking."
msgstr ""

msgid "Reading ``VERTEX``  disables vertex position baking."
msgstr ""

msgid "Project Settings"
msgstr "Настройки проекта"

msgid ""
"To fine-tune batching, a number of project settings are available. You can "
"usually leave these at default during development, but it's a good idea to "
"experiment to ensure you are getting maximum performance. Spending a little "
"time tweaking parameters can often give considerable performance gains for "
"very little effort. See the on-hover tooltips in the Project Settings for "
"more information."
msgstr ""

#, fuzzy
msgid "rendering/batching/options"
msgstr "Анимации"

msgid ""
":ref:`use_batching <class_ProjectSettings_property_rendering/batching/"
"options/use_batching>` - Turns batching on or off."
msgstr ""

msgid ""
":ref:`use_batching_in_editor <class_ProjectSettings_property_rendering/"
"batching/options/use_batching_in_editor>` Turns batching on or off in the "
"Godot editor. This setting doesn't affect the running project in any way."
msgstr ""

msgid ""
":ref:`single_rect_fallback <class_ProjectSettings_property_rendering/"
"batching/options/single_rect_fallback>` - This is a faster way of drawing "
"unbatchable rectangles. However, it may lead to flicker on some hardware so "
"it's not recommended."
msgstr ""

msgid "rendering/batching/parameters"
msgstr ""

msgid ""
":ref:`max_join_item_commands <class_ProjectSettings_property_rendering/"
"batching/parameters/max_join_item_commands>` - One of the most important "
"ways of achieving batching is to join suitable adjacent items (nodes) "
"together, however they can only be joined if the commands they contain are "
"compatible. The system must therefore do a lookahead through the commands in "
"an item to determine whether it can be joined. This has a small cost per "
"command, and items with a large number of commands are not worth joining, so "
"the best value may be project dependent."
msgstr ""
":ref:`max_join_item_commands <class_ProjectSettings_property_rendering/"
"batching/parameters/max_join_item_commands>` - Одним из наиболее важных "
"способов достижения пакетной обработки является объединение подходящих "
"соседних элементов (узлов) вместе, однако они могут быть объединены только в "
"том случае, если команды, которые они содержат, совместимы. Поэтому система "
"должна просмотреть команды элемента, чтобы определить, может ли он быть "
"объединен. Это имеет небольшую стоимость на команду, и элементы с большим "
"количеством команд не стоит объединять, поэтому наилучшее значение может "
"зависеть от проекта."

msgid ""
":ref:`colored_vertex_format_threshold "
"<class_ProjectSettings_property_rendering/batching/parameters/"
"colored_vertex_format_threshold>` - Baking colors into vertices results in a "
"larger vertex format. This is not necessarily worth doing unless there are a "
"lot of color changes going on within a joined item. This parameter "
"represents the proportion of commands containing color changes / the total "
"commands, above which it switches to baked colors."
msgstr ""

msgid ""
":ref:`batch_buffer_size <class_ProjectSettings_property_rendering/batching/"
"parameters/batch_buffer_size>` - This determines the maximum size of a "
"batch, it doesn't have a huge effect on performance but can be worth "
"decreasing for mobile if RAM is at a premium."
msgstr ""

msgid ""
":ref:`item_reordering_lookahead <class_ProjectSettings_property_rendering/"
"batching/parameters/item_reordering_lookahead>` - Item reordering can help "
"especially with interleaved sprites using different textures. The lookahead "
"for the overlap test has a small cost, so the best value may change per "
"project."
msgstr ""

msgid "rendering/batching/lights"
msgstr ""

msgid ""
":ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` - See light scissoring."
msgstr ""

msgid ""
":ref:`max_join_items <class_ProjectSettings_property_rendering/batching/"
"lights/max_join_items>` - Joining items before lighting can significantly "
"increase performance. This requires an overlap test, which has a small cost, "
"so the costs and benefits may be project dependent, and hence the best value "
"to use here."
msgstr ""

msgid "rendering/batching/debug"
msgstr ""

msgid ""
":ref:`flash_batching <class_ProjectSettings_property_rendering/batching/"
"debug/flash_batching>` - This is purely a debugging feature to identify "
"regressions between the batching and legacy renderer. When it is switched "
"on, the batching and legacy renderer are used alternately on each frame. "
"This will decrease performance, and should not be used for your final "
"export, only for testing."
msgstr ""

msgid ""
":ref:`diagnose_frame <class_ProjectSettings_property_rendering/batching/"
"debug/diagnose_frame>` - This will periodically print a diagnostic batching "
"log to the Godot IDE / console."
msgstr ""

msgid "rendering/batching/precision"
msgstr "рендеринг/ пакетная обработка/ точность"

msgid ""
":ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` - On some hardware (notably some Android devices) "
"there have been reports of tilemap tiles drawing slightly outside their UV "
"range, leading to edge artifacts such as lines around tiles. If you see this "
"problem, try enabling uv contract. This makes a small contraction in the UV "
"coordinates to compensate for precision errors on devices."
msgstr ""

msgid ""
":ref:`uv_contract_amount <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract_amount>` - Hopefully, the default amount should cure "
"artifacts on most devices, but this value remains adjustable just in case."
msgstr ""

msgid "Diagnostics"
msgstr "Диагностика"

msgid ""
"Although you can change parameters and examine the effect on frame rate, "
"this can feel like working blindly, with no idea of what is going on under "
"the hood. To help with this, batching offers a diagnostic mode, which will "
"periodically print out (to the IDE or console) a list of the batches that "
"are being processed. This can help pinpoint situations where batching isn't "
"occurring as intended, and help you fix these situations to get the best "
"possible performance."
msgstr ""
"Хотя вы можете изменять параметры и исследовать влияние на частоту кадров, "
"это может быть похоже на работу вслепую, без представления о том, что "
"происходит под капотом. Чтобы помочь в этом, пакетная обработка предлагает "
"режим диагностики, который периодически выводит (на IDE или консоль) список "
"обрабатываемых пакетов. Это поможет выявить ситуации, когда пакетная "
"обработка происходит не так, как задумано, и помочь вам исправить эти "
"ситуации для достижения наилучшей производительности."

msgid "Reading a diagnostic"
msgstr ""

msgid "This is a typical diagnostic."
msgstr ""

msgid ""
"**joined_item:** A joined item can contain 1 or more references to items "
"(nodes). Generally, joined_items containing many references is preferable to "
"many joined_items containing a single reference. Whether items can be joined "
"will be determined by their contents and compatibility with the previous "
"item."
msgstr ""

msgid ""
"**batch R:** A batch containing rectangles. The second number is the number "
"of rects. The second number in square brackets is the Godot texture ID, and "
"the numbers in curly braces is the color. If the batch contains more than "
"one rect, ``MULTI`` is added to the line to make it easy to identify. Seeing "
"``MULTI`` is good as it indicates successful batching."
msgstr ""

msgid ""
"**batch D:** A default batch, containing everything else that is not "
"currently batched."
msgstr ""

#, fuzzy
msgid "Default batches"
msgstr "Основные особенности"

msgid ""
"The second number following default batches is the number of commands in the "
"batch, and it is followed by a brief summary of the contents::"
msgstr ""

msgid ""
"You may see \"dummy\" default batches containing no commands; you can ignore "
"those."
msgstr ""

msgid "Frequently asked questions"
msgstr "Часто задаваемые вопросы"

msgid "I don't get a large performance increase when enabling batching."
msgstr ""

msgid ""
"Try the diagnostics, see how much batching is occurring, and whether it can "
"be improved"
msgstr ""

msgid "Try changing batching parameters in the Project Settings."
msgstr ""

msgid "Consider that batching may not be your bottleneck (see bottlenecks)."
msgstr ""

msgid "I get a decrease in performance with batching."
msgstr ""

msgid ""
"Try the steps described above to increase the number of batching "
"opportunities."
msgstr ""

msgid ""
"Try enabling :ref:`single_rect_fallback "
"<class_ProjectSettings_property_rendering/batching/options/"
"single_rect_fallback>`."
msgstr ""

msgid ""
"The single rect fallback method is the default used without batching, and it "
"is approximately twice as fast. However, it can result in flickering on some "
"hardware, so its use is discouraged."
msgstr ""

msgid ""
"After trying the above, if your scene is still performing worse, consider "
"turning off batching."
msgstr ""

msgid "I use custom shaders and the items are not batching."
msgstr ""

msgid ""
"Custom shaders can be problematic for batching, see the custom shaders "
"section"
msgstr ""

msgid "I am seeing line artifacts appear on certain hardware."
msgstr ""

msgid ""
"See the :ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` project setting which can be used to solve this "
"problem."
msgstr ""

msgid "I use a large number of textures, so few items are being batched."
msgstr ""

msgid ""
"Consider using texture atlases. As well as allowing batching, these reduce "
"the need for state changes associated with changing textures."
msgstr ""

msgid "Appendix"
msgstr "*Приложение*"

#, fuzzy
msgid "Batched primitives"
msgstr "Случайные приоритеты плитки"

msgid ""
"Not all primitives can be batched. Batching is not guaranteed either, "
"especially with primitives using an antialiased border. The following "
"primitive types are currently available:"
msgstr ""

msgid "RECT"
msgstr ""

msgid "NINEPATCH (depending on wrapping mode)"
msgstr ""

msgid "POLY"
msgstr ""

msgid "LINE"
msgstr ""

msgid ""
"With non-batched primitives, you may be able to get better performance by "
"drawing them manually with polys in a ``_draw()`` function. See :ref:"
"`doc_custom_drawing_in_2d` for more information."
msgstr ""

msgid "Light scissoring threshold calculation"
msgstr ""

msgid ""
"The actual proportion of screen pixel area used as the threshold is the :ref:"
"`scissor_area_threshold <class_ProjectSettings_property_rendering/batching/"
"lights/scissor_area_threshold>` value to the power of 4."
msgstr ""

msgid "For example, on a screen size of 1920×1080, there are 2,073,600 pixels."
msgstr ""

msgid "At a threshold of 1,000 pixels, the proportion would be::"
msgstr ""

msgid ""
"So a :ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` of ``0.15`` would be a reasonable "
"value to try."
msgstr ""

msgid ""
"Going the other way, for instance with a :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` of ``0.5``::"
msgstr ""

msgid ""
"If the number of pixels saved is greater than this threshold, the scissor is "
"activated."
msgstr ""

msgid "Translation status"
msgstr "Translation status (статус перевода)"
