# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using Servers"
msgstr "Оптимизация с помощью серверов"

msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""
"Движки, подобные Godot, обеспечивают повышенную простоту использования "
"благодаря своим высокоуровневым конструкциям и функциям. Большинство из них "
"доступны и используются через :ref:`Scene System<doc_scene_tree>`. "
"Использование узлов и ресурсов упрощает организацию проекта и управление "
"активами в сложных играх."

msgid "There are, of course, always drawbacks:"
msgstr "Недостатки, конечно, всегда есть:"

msgid "There is an extra layer of complexity"
msgstr "Существует дополнительный уровень сложности"

msgid "Performance is lower than using simple APIs directly"
msgstr "Производительность ниже, чем при использовании простых API напрямую"

msgid "It is not possible to use multiple threads to control them"
msgstr "Невозможно использовать несколько потоков для управления ими"

msgid "More memory is needed."
msgstr "Необходимо больше памяти."

msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""
"Во многих случаях это не является проблемой (Godot очень оптимизирован, и "
"большинство операций выполняется с помощью сигналов, поэтому опрос не "
"требуется). Тем не менее, иногда это может быть проблемой. Например, работа "
"с десятками тысяч экземпляров для чего-то, что должно обрабатываться каждый "
"кадр, может стать узким местом."

msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""
"Подобная ситуация заставляет программистов жалеть о том, что они используют "
"игровой движок, и желать вернуться к более ручной, низкоуровневой реализации "
"игрового кода."

msgid "Still, Godot is designed to work around this problem."
msgstr "Тем не менее, Godot разработан для того, чтобы обойти эту проблему."

#, fuzzy
msgid "Servers"
msgstr "Сервера"

msgid ""
"One of the most interesting design decisions for Godot is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""
"Одним из самых интересных дизайнерских решений для Godot является тот факт, "
"что вся система сцен *необязательна*. Хотя в настоящее время ее невозможно "
"скомпилировать, ее можно полностью обойти."

msgid ""
"At the core, Godot uses the concept of Servers. They are very low-level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""
"В основе Godot лежит концепция серверов. Это очень низкоуровневые API для "
"управления рендерингом, физикой, звуком и т.д. Система сцены построена "
"поверх них и использует их напрямую. Наиболее распространенными серверами "
"являются:"

msgid ""
":ref:`VisualServer <class_VisualServer>`: handles everything related to "
"graphics."
msgstr ""
":ref:`VisualServer <class_VisualServer>`: обрабатывает все, что связано с "
"графикой."

msgid ""
":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D "
"physics."
msgstr ""
":ref:`PhysicsServer <class_PhysicsServer>`: обрабатывает все, что связано с "
"3D физикой."

msgid ""
":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related "
"to 2D physics."
msgstr ""
":ref:`Physics2DServer <class_Physics2DServer>`: обрабатывает все, что "
"связано с 2D физикой."

msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""
":ref:`AudioServer <class_AudioServer>`: обрабатывает все, что связано с "
"аудио."

msgid ""
"Explore their APIs and you will realize that all the functions provided are "
"low-level implementations of everything Godot allows you to do."
msgstr ""
"Изучите их API, и вы поймете, что все предоставляемые функции являются "
"низкоуровневыми реализациями всего того, что Godot позволяет вам делать."

msgid "RIDs"
msgstr "RІDs"

msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""
"Ключом к использованию серверов является понимание объектов Resource ID (:"
"ref:`RID <class_RID>`). Это непрозрачные ручки реализации сервера. Они "
"выделяются и освобождаются вручную. Почти каждая функция в серверах требует "
"RID для доступа к реальному ресурсу."

#, fuzzy
msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID. Not all resources contain an RID, though: in such cases, "
"the RID will be empty. The resource can then be passed to server APIs as an "
"RID."
msgstr ""
"Большинство узлов и ресурсов Godot содержат эти RID с внутренних серверов, и "
"их можно получить с помощью различных функций. Фактически, все, что "
"наследует :ref:`Resource <class_Resource>`, может быть непосредственно "
"приведено к RID (не все ресурсы содержат RID, хотя в таких случаях RID будет "
"пустым). Фактически, ресурсы могут передаваться в API-интерфейсы сервера в "
"виде RID. Просто убедитесь, что ссылки на ресурсы за пределами сервера "
"сохраняются, потому что если ресурс удален, внутренний RID также будет "
"удален."

msgid ""
"Resources are reference-counted (see :ref:`Reference <class_Reference>`), "
"and references to a resource's RID are *not* counted when determining "
"whether the resource is still in use. Make sure to keep a reference to the "
"resource outside the server, or else both it and its RID will be erased."
msgstr ""
"Ресурсы учитываются по ссылкам (см. :ref:`Reference <class_Reference>`), и "
"ссылки на RID ресурса *не* учитываются при определении того, используется ли "
"ресурс. Убедитесь, что ссылка на ресурс находится вне сервера, иначе и он, и "
"его RID будут стерты."

msgid "For nodes, there are many functions available:"
msgstr "Для узлов доступны множество функций:"

msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""

msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""

msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""

msgid ""
"For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) "
"contains functions to get the *VisualServer Scenario*, and the "
"*PhysicsServer Space*. This allows creating 3D objects directly with the "
"server API and using them."
msgstr ""

msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *VisualServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""

msgid ""
"The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the "
"scenario *instance* and *instance base* via the :ref:`VisualInstance."
"get_instance() <class_VisualInstance_method_get_instance>` and :ref:"
"`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"respectively."
msgstr ""

msgid ""
"Try exploring the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr ""

msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""

#, fuzzy
msgid "Creating a sprite"
msgstr "Создание скрипта"

msgid ""
"This is a simple example of how to create a sprite from code and move it "
"using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""

msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""

msgid "Primitives are cleared this way:"
msgstr ""

msgid "Instantiating a Mesh into 3D space"
msgstr ""

msgid ""
"The 3D APIs are different from the 2D ones, so the instantiation API must be "
"used."
msgstr ""

msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr ""

msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""

msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer "
"<class_PhysicsServer>` respectively)."
msgstr ""

#, fuzzy
msgid "Getting data from the servers"
msgstr "Создание сервера Godot"

msgid ""
"Try to **never** request any information from ``VisualServer``, "
"``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""

msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""

msgid "Translation status"
msgstr "Translation status (статус перевода)"
