# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "Использование InputEvent"

msgid "What is it?"
msgstr "Что это?"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"Управлять вводом обычно сложно, независимо от ОС или платформы. Чтобы "
"немного упростить это, предоставляется специальный встроенный тип :ref:"
"`InputEvent <class_InputEvent>`. Этот тип данных может быть настроен на "
"несколько типов входных событий. Входные события проходят через движок и "
"могут быть получены в нескольких местах, в зависимости от цели."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"Вот короткий пример, закрывающий вашу игру, если нажата клавиша Escape:"

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"Однако более чистым и гибким является использование предоставляемой функции :"
"ref:`InputMap <class_InputMap>`, которая позволяет определить действия ввода "
"и назначить им различные клавиши. Таким образом, вы можете определить "
"несколько клавиш для одного и того же действия (например, клавиша \"escape\" "
"на клавиатуре и кнопка \"start\" на геймпаде). Затем вы можете легко "
"изменить это сопоставление в настройках проекта, не обновляя код, и даже "
"создать функцию сопоставления клавиш поверх этой функции, чтобы ваша игра "
"могла изменять сопоставление клавиш во время выполнения!"

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"Вы можете настроить свою InputMap в разделе **Project > Project Settings > "
"Input Map**, а затем использовать эти действия следующим образом:"

msgid "How does it work?"
msgstr "Как это работает?"

msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""
"Каждое входное событие исходит от пользователя/игрока (хотя можно "
"сгенерировать InputEvent и передать его обратно в движок, что полезно для "
"жестов). Объект ОС для каждой платформы будет считывать события с "
"устройства, а затем передавать их в MainLoop. Поскольку :ref:`SceneTree "
"<class_SceneTree>` является основной реализацией MainLoop, события подаются "
"в него. Godot предоставляет функцию для получения текущего объекта дерева "
"сцены: **get_tree()**."

msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
"Но SceneTree не знает, что делать с событием, поэтому он передаст его "
"видовым экранам, начиная с \"root\" :ref:`Viewport <class_Viewport>` "
"(первого узла дерева сцены). Viewport делает довольно много вещей с "
"полученным вводом:"

msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""
"Во-первых, стандартная функция :ref:`Node._input() "
"<class_Node_method__input>` будет вызываться в любом узле, который ее "
"переопределяет (и в котором не отключена обработка входных данных с помощью :"
"ref:`Node.set_process_input() <class_Node_method_set_process_input>`). Если "
"какая-либо функция примет событие, она может вызвать :ref:`SceneTree."
"set_input_as_handled() <class_SceneTree_method_set_input_as_handled>`, и "
"событие больше не будет распространяться. Это гарантирует, что вы сможете "
"отфильтровать все интересующие вас события еще до GUI. Для геймплейного "
"ввода :ref:`Node._unhandled_input() <class_Node_method__unhandled_input>` "
"обычно лучше подходит, поскольку она позволяет GUI перехватывать события."

msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"gui_input\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""
"Во-вторых, он попытается подать входные данные в GUI и посмотрит, может ли "
"какой-либо элемент управления принять их. Если да, то :ref:`Control "
"<class_Control>` будет вызван через виртуальную функцию :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` и будет выдан сигнал "
"\"gui_input\" (эта функция повторно реализуется скриптом, наследуясь от "
"него). Если элемент управления захочет \"поглотить\" событие, он вызовет :"
"ref:`Control.accept_event() <class_Control_method_accept_event>` и событие "
"больше не будет распространяться. Используйте свойство :ref:`Control."
"mouse_filter <class_Control_property_mouse_filter>` для управления тем, "
"получает ли :ref:`Control <class_Control>` уведомления о событиях мыши "
"через :ref:`Control._gui_input() <class_Control_method__gui_input>` обратный "
"вызов, и распространяются ли эти события дальше."

msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""
"Если до сих пор никто не потреблял событие, то необработанный входной "
"обратный вызов будет вызван, если он будет переопределен (и не отключен с "
"помощью :ref:`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Если какая-либо функция "
"потребляет событие, она может вызвать :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, и событие больше не будет "
"распространяться. Необработанный входной обратный вызов идеально подходит "
"для полноэкранных игровых событий, поэтому они не принимаются, когда GUI "
"активен."

msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport with :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` turned on, a ray to the "
"physics world (in the ray direction from the click) will be cast. (For the "
"root viewport, this can also be enabled in :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) If "
"this ray hits an object, it will call the :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` function in the "
"relevant physics object (bodies receive this callback by default, but areas "
"do not. This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""
"Если событие пока никому не нужно, а во вьюпорте назначена :ref:`Camera "
"<class_Camera>` с включенным :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>`, будет брошен луч в мир "
"физики (в направлении луча от щелчка). (Для корневого вьюпорта это также "
"можно включить в :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) Если "
"этот луч попадет в объект, он вызовет функцию :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` в "
"соответствующем физическом объекте (тела получают этот обратный вызов по "
"умолчанию, а области - нет. Это можно настроить через свойства :ref:`Area "
"<class_Area>`)."

msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""
"Наконец, если событие не было обработано, оно будет передано в следующий "
"Viewport в дереве, в противном случае оно будет проигнорировано."

msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""
"При отправке событий на все прослушивающие узлы в пределах сцены окно "
"просмотра будет делать это в обратном порядке глубины: начиная с узла в "
"нижней части дерева сцены и заканчивая корневым узлом:"

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"События GUI также перемещаются вверх по дереву сцены, но, поскольку эти "
"события нацелены на определенные Controls, только прямые предки целевого "
"узла Controls получают событие."

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"В соответствии с node-дизайном Godot это позволяет специализированным "
"дочерним узлам обрабатывать и потреблять определенные события, в то время "
"как их предки и, в конечном счете, корень сцены могут обеспечить более "
"обобщенное поведение, если это необходимо."

msgid "Anatomy of an InputEvent"
msgstr "Анатомия InputEvent"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` - это просто базовый встроенный тип, он "
"ничего не представляет и содержит только некоторую базовую информацию, такую "
"как ID события (который увеличивается для каждого события), индекс "
"устройства и т. д."

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""
"Существует несколько специализированных типов InputEvent, описанных в "
"таблице ниже:"

msgid "Event"
msgstr "Событие"

msgid "Type Index"
msgstr "Индекс типа"

msgid "Description"
msgstr "Описание"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "NONE"
msgstr "NONE"

msgid "Empty Input Event."
msgstr "Пустое входное событие."

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

msgid "KEY"
msgstr "KEY"

msgid "Contains a scancode and Unicode value, as well as modifiers."
msgstr "Содержит скан-код и значение Unicode, а также модификаторы."

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "MOUSE_BUTTON"
msgstr "MOUSE_BUTTON"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "Содержит информацию о щелчке, такую как кнопка, модификаторы и т. д."

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

msgid "MOUSE_MOTION"
msgstr "MOUSE_MOTION"

msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""
"Содержит информацию о движении, такую как относительные, абсолютные позиции "
"и скорость."

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "JOYSTICK_MOTION"
msgstr "JOYSTICK_MOTION"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "Содержит информацию об аналоговой оси джойстика/джойпада."

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "JOYSTICK_BUTTON"
msgstr "JOYSTICK_BUTTON"

msgid "Contains Joystick/Joypad button information."
msgstr "Содержит информацию о кнопке джойстика/джойпада."

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid "SCREEN_TOUCH"
msgstr "SCREEN_TOUCH"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"Содержит информацию о нажатии/отпускании с несколькими касаниями. (доступно "
"только на мобильных устройствах)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid "SCREEN_DRAG"
msgstr "SCREEN_DRAG"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"Содержит информацию о перетаскивании с помощью мультисенсорного ввода. "
"(доступно только на мобильных устройствах)"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

msgid "SCREEN_ACTION"
msgstr "SCREEN_ACTION"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"Содержит общее действие. Эти события часто генерируются программистом в виде "
"обратной связи. (подробнее об этом ниже)"

msgid "Actions"
msgstr "Действия"

msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""
"InputEvent может представлять или не представлять предопределенное действие. "
"Действия полезны тем, что они абстрагируют устройство ввода при "
"программировании игровой логики. Это позволяет:"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"Один и тот же код работать на разных устройствах с разным вводом (например, "
"клавиатура на ПК, джойстик на консоли)."

msgid "Input to be reconfigured at run-time."
msgstr "Перенастраивать ввод во время выполнения."

msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr "Действия можно создавать из меню Project Settings на вкладке Actions."

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"Любое событие имеет методы :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` и :ref:`InputEvent <class_InputEvent>`."

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"В качестве альтернативы может потребоваться вернуть в игру действие из "
"игрового кода (хорошим примером этого является обнаружение жестов). Входной "
"синглтон имеет для этого метод: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. Обычно вы использовали бы это так:"

msgid "InputMap"
msgstr "InputMаp"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"Часто требуется настройка и повторное отображение входных данных из кода. "
"Если весь ваш рабочий процесс зависит от действий, синглтон :ref:`InputMap "
"<class_InputMap>` идеально подходит для переназначения или создания "
"различных действий во время выполнения. Этот синглтон не сохраняется (должен "
"быть изменен вручную), и его состояние запускается из настроек проекта "
"(project.godot). Поэтому любая динамическая система такого типа должна "
"хранить настройки так, как считает нужным программист."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
