# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "High-level multiplayer"
msgstr "Высокоуровневый мультиплеер"

#, fuzzy
msgid "High-level vs low-level API"
msgstr "Программный интерфейс (API) высокого уровня против низкого уровня"

msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""
"Ниже объясняются различия между высоко- и низкоуровневых сетей в Godot, а "
"также некоторые базовые основы. Если вы хотите перейти сразу к делу и "
"добавить сеть в свои первые узлы, перейдите к разделу `Инициализация сети`_ "
"ниже. Но не забудьте прочитать остальные разделы позже!"

msgid ""
"Godot always supported standard low-level networking via UDP, TCP and some "
"higher level protocols such as SSL and HTTP. These protocols are flexible "
"and can be used for almost anything. However, using them to synchronize game "
"state manually can be a large amount of work. Sometimes that work can't be "
"avoided or is worth it, for example when working with a custom server "
"implementation on the backend. But in most cases, it's worthwhile to "
"consider Godot's high-level networking API, which sacrifices some of the "
"fine-grained control of low-level networking for greater ease of use."
msgstr ""
"Godot всегда поддерживал стандартные низкоуровневые сетевые протоколы UDP, "
"TCP и некоторые протоколы более высокого уровня, такие как SSL и HTTP. Эти "
"протоколы гибкие и могут быть использованы практически для всего. Однако их "
"использование для синхронизации состояния игры вручную может быть связано с "
"большим объемом работы. Иногда этой работы не избежать или она того стоит, "
"например, при работе с пользовательской реализацией сервера на бэкенде. Но в "
"большинстве случаев стоит обратить внимание на высокоуровневый сетевой API "
"Godot, который жертвует некоторыми тонкостями низкоуровневого сетевого "
"управления ради большей простоты использования."

msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr "Это связано с присущими ему ограничениями протоколов низкого уровня:"

msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""
"TCP гарантирует, что пакеты всегда будут поступать надежно и в правильном "
"порядке, но задержка обычно выше из-за исправления ошибок. Это также "
"довольно сложный протокол, потому что он понимает, что такое \"соединение\", "
"и оптимизируется для целей, которые часто не подходят для приложений, таких "
"как многопользовательские игры. Пакеты буферизуются для отправки большими "
"партиями, что снижает накладные расходы на пакеты для увеличения задержки. "
"Это может быть полезно для таких вещей, как HTTP, но обычно не для игр. "
"Некоторые из них можно настроить и отключить (например, отключив \"алгоритм "
"Nagle\" для TCP-подключения)."

msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""
"UDP - это более простой протокол, который только отправляет пакеты (и не "
"имеет понятия \"соединение\"). Отсутствие коррекции ошибок делает его "
"довольно быстрым (низкая задержка), но пакеты могут быть потеряны по пути "
"или получены в неправильном порядке. Кроме того, MTU (максимальный размер "
"пакета) для UDP обычно невелик (всего несколько сотен байт), поэтому "
"передача больших пакетов означает их разделение, реорганизацию и повторную "
"попытку в случае неудачи."

msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""
"В целом, TCP можно считать надежным, упорядоченным и медленным; UDP - "
"ненадежным, неупорядоченным и быстрым. Из-за большой разницы в "
"производительности часто имеет смысл перестроить те части TCP, которые нужны "
"для игр (необязательная надежность и порядок пакетов), избегая при этом "
"ненужных частей (функции контроля перегрузок/трафика, алгоритм Нагла и т."
"д.). В связи с этим большинство игровых движков поставляются с такой "
"реализацией, и Godot не является исключением."

#, fuzzy
msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""
"В итоге вы можете использовать низкоуровневый сетевой API для максимального "
"контроля, и реализовать все, что находится поверх неизолированных сетевых "
"протоколов, или использовать API высокого уровня на базе :ref:`SceneTree "
"<class_SceneTree>`, который делает большую часть тяжелой работы за кулисами, "
"как правило, оптимальным способом."

msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently offers WebSockets and WebRTC support but lacks some of the higher-"
"level features, as well as raw access to low-level protocols like TCP and "
"UDP."
msgstr ""
"Большинство поддерживаемых Godot платформ предлагают все или большинство из "
"перечисленных высоко- и низкоуровневых сетевых функций. Однако, поскольку "
"сетевое взаимодействие всегда в значительной степени зависит от аппаратного "
"обеспечения и операционной системы, некоторые функции могут быть изменены "
"или недоступны на некоторых целевых платформах. В частности, платформа HTML5 "
"в настоящее время предлагает поддержку WebSockets и WebRTC, но не имеет "
"некоторых высокоуровневых функций, а также необработанного доступа к "
"низкоуровневым протоколам, таким как TCP и UDP."

#, fuzzy
msgid ""
"More about TCP/IP, UDP, and networking: https://gafferongames.com/post/"
"udp_vs_tcp/"
msgstr ""
"Подробнее о TCP/IP, UDP и сети: https://gafferongames.com/post/udp_vs_tcp/"

#, fuzzy
msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://gafferongames.com/categories/game-networking/>`__), "
"including the comprehensive `introduction to networking models in games "
"<https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""
"Gaffer On Games имеет много полезных статей о нетворкинге в играх (`here "
"<https://gafferongames.com/tags/networking>`__), включая всестороннее "
"`introduction to networking models in games <https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."

msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""
"Если вы хотите использовать низкоуровневую сетевую библиотеку вместо "
"встроенной сети Godot, см. здесь пример: https://github.com/PerduGames/gdnet3"

msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users data if they play your game."
msgstr ""
"Добавление сети в игру сопряжено с некоторой ответственностью. Это может "
"сделать ваше приложение уязвимым, может привести к использованию читов или "
"эксплойтов. Это может даже позволить злоумышленнику скомпрометировать "
"машины, на которых работает ваше приложение, и использовать ваши серверы для "
"рассылки спама, атаки других или кражи ваших пользовательских данных, если "
"они играют в вашу игру."

msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""
"Это тот случай, когда сеть существует и не имеет ничего общего с Godot. "
"Конечно, вы можете экспериментировать, но когда вы выпускаете сетевое "
"приложение, всегда заботьтесь о любых возможных проблемах безопасности."

msgid "Mid level abstraction"
msgstr "Среднеуровневая абстракция"

msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""
"Прежде чем перейти к тому, как синхронизировать игру по сети, может быть "
"полезно понять, как работает базовый сетевой API для синхронизации."

msgid ""
"Godot uses a mid-level object :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`. This object is not meant to be created "
"directly, but is designed so that several C++ implementations can provide it."
msgstr ""
"Godot использует среднеуровневый объект :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`. Этот объект не предназначен для "
"непосредственного создания, но разработан таким образом, чтобы несколько "
"реализаций C++ могли предоставить его."

msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""
"Этот объект простирается от :ref:`PacketPeer <class_PacketPeer>` таким "
"образом, он наследует все полезные методы сериализации, отправки и получения "
"данных. Кроме того, он добавляет методы для установки однорангового узла, "
"режима передачи и т. д. Она также включает в себя сигналы, которые позволят "
"вам знать, когда участник сети подключается или отключается."

#, fuzzy
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), one based "
"on WebRTC (:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`), and one "
"based on WebSocket (:ref:`WebSocketMultiplayerPeer "
"<class_WebSocketMultiplayerPeer>`), but this could be used to implement "
"mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/console-specific "
"networking APIs."
msgstr ""
"Этот интерфейс класса может абстрагировать большинство типов сетевых слоев, "
"топологий и библиотек. По умолчанию Godot предоставляет реализацию на основе "
"ENet (:ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), но "
"это может быть использовано для реализации мобильных API (для adhoc WiFi, "
"Bluetooth) или кастомных сетевых API устройств/консоли."

msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. Yet it is made available "
"in case a game has specific needs for a lower level API."
msgstr ""
"В большинстве случаев использование этого объекта напрямую не рекомендуется, "
"так как Godot предоставляет сетевые средства еще более высокого уровня. Тем "
"не менее, он доступен в случае, если у игры есть конкретные потребности в "
"API более низкого уровня."

msgid "Initializing the network"
msgstr "Инициализация сети"

msgid ""
"The object that controls networking in Godot is the same one that controls "
"everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""
"Объект, который управляет сетью в Godot-это тот же самый объект, который "
"управляет всем, что связано с деревом: :ref:`SceneTree <class_SceneTree>`."

#, fuzzy
msgid ""
"To initialize high-level networking, the SceneTree must be provided a "
"NetworkedMultiplayerPeer object."
msgstr ""
"Для инициализации сети высокого уровня SceneTree должен быть предоставлен "
"объект NetworkedMultiplayerPeer."

#, fuzzy
msgid ""
"To create that object, it first has to be initialized as a server or client."
msgstr ""
"Чтобы создать этот объект, он сначала должен быть инициализирован как сервер "
"или клиент."

msgid ""
"Initializing as a server, listening on the given port, with a given maximum "
"number of peers:"
msgstr ""
"Инициализация сервера, прослушивание, заданного порта, с неким максимальным "
"количеством подключений:"

msgid "Initializing as a client, connecting to a given IP and port:"
msgstr "Инициализация клиента, подключение к указанному IP и порту:"

msgid "Get the previously set network peer:"
msgstr ""

msgid "Checking whether the tree is initialized as a server or client:"
msgstr "Проверка инициализации дерева (клиент или сервер):"

msgid "Terminating the networking feature:"
msgstr "Закрытие сетевых функции :"

msgid ""
"(Although it may make sense to send a message first to let the other peers "
"know you're going away instead of letting the connection close or timeout, "
"depending on your game.)"
msgstr ""
"(Хотя, возможно, имеет смысл сначала отправить сообщение, чтобы другие "
"участники знали, что вы уходите, вместо того, чтобы закрывать соединение, "
"зависит от вашей игры.)"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""

msgid "Managing connections"
msgstr "Управление соединениями"

#, fuzzy
msgid ""
"Some games accept connections at any time, others during the lobby phase. "
"Godot can be requested to no longer accept connections at any point (see "
"``set_refuse_new_network_connections(bool)`` and related methods on :ref:"
"`SceneTree <class_SceneTree>`). To manage who connects, Godot provides the "
"following signals in SceneTree:"
msgstr ""
"Некоторые игры принимают подключения в любое время, другие только в лобби. "
"Godot можно запросить больше не принимать соединения в любой момент (см. "
"`set_refuse_new_network_connections(bool)` и связанные методы на :ref:"
"`SceneTree <class_SceneTree>`). Для управления разрешениями на подключение, "
"Godot предоставляет следующие сигналы в SceneTree:"

msgid "Server and Clients:"
msgstr "Сервер и клиенты:"

#, fuzzy
msgid "``network_peer_connected(int id)``"
msgstr "`network_peer_connected(int id)`"

#, fuzzy
msgid "``network_peer_disconnected(int id)``"
msgstr "`network_peer_connected(int id)`"

msgid ""
"The above signals are called on every peer connected to the server "
"(including on the server) when a new peer connects or disconnects. Clients "
"will connect with a unique ID greater than 1, while network peer ID 1 is "
"always the server. Anything below 1 should be handled as invalid. You can "
"retrieve the ID for the local system via :ref:`SceneTree."
"get_network_unique_id() <class_SceneTree_method_get_network_unique_id>`. "
"These IDs will be useful mostly for lobby management and should generally be "
"stored, as they identify connected peers and thus players. You can also use "
"IDs to send messages only to certain peers."
msgstr ""
"Вышеуказанные сигналы вызываются на каждом узле, подключенном к серверу (в "
"том числе на сервере), когда новый узел подключается или отключается. "
"Клиенты будут подключаться с уникальным ID больше 1, в то время как ID 1 "
"всегда у сервера. Все что ниже 1 должны рассматриваться как "
"недействительные. Вы можете получить ID локальной системы с помощью :ref:"
"`SceneTree.get_network_unique_id() "
"<class_SceneTree_method_get_network_unique_id>`. Эти идентификаторы будут "
"полезны в основном для управления лобби и, как правило, должны храниться, "
"поскольку они идентифицируют подключенные узлы и, следовательно, игроков. "
"Можно также использовать идентификаторы для отправки сообщений только "
"определенным узлам."

msgid "Clients:"
msgstr "Клиенты:"

msgid "``connected_to_server``"
msgstr "``connected_to_server``"

msgid "``connection_failed``"
msgstr "``connection_failed``"

#, fuzzy
msgid "``server_disconnected``"
msgstr "`server_disconnected`"

#, fuzzy
msgid ""
"Again, all these functions are mainly useful for lobby management or for "
"adding/removing players on the fly. For these tasks, the server clearly has "
"to work as a server and you have to perform tasks manually such as sending a "
"newly connected player information about other already connected players (e."
"g. their names, stats, etc)."
msgstr ""
"Опять же, все эти функции в основном полезны для управления лобби или для "
"добавления/удаления игроков \"на лету\". Для этих задач сервер явно должен "
"работать как сервер, и вы должны выполнять задачи вручную, например, "
"отправлять недавно подключенному игроку информацию о других уже подключенных "
"игроках (например, их имена, статистика и т. д.)."

msgid ""
"Lobbies can be implemented any way you want, but the most common way is to "
"use a node with the same name across scenes in all peers. Generally, an "
"autoloaded node/singleton is a great fit for this, to always have access to, "
"e.g. \"/root/lobby\"."
msgstr ""
"Лобби можно реализовать любым удобным для Вас способом, но наиболее "
"распространенным способом является использование узла с одинаковым именем во "
"всех одноранговых сценах. Как правило, автоматически загружаемый узел/"
"синглтон отлично подходит для этого, чтобы всегда иметь доступ, например, \"/"
"root/lobby\"."

msgid "RPC"
msgstr "RPC"

msgid ""
"To communicate between peers, the easiest way is to use RPCs (remote "
"procedure calls). This is implemented as a set of functions in :ref:`Node "
"<class_Node>`:"
msgstr ""
"Для связи между узлами проще всего использовать RPC (удаленные вызовы "
"процедур). Это реализовано в виде набора функций в: :ref:`Node <class_Node>`:"

#, fuzzy
msgid "``rpc(\"function_name\", <optional_args>)``"
msgstr "`rpc(\"function_name\", <оptional_args>)`"

#, fuzzy
msgid "``rpc_id(<peer_id>,\"function_name\", <optional_args>)``"
msgstr "`rpc_id(<peer_id>,\"function_name\", <optional_args>)`"

#, fuzzy
msgid "``rpc_unreliable(\"function_name\", <optional_args>)``"
msgstr "`rpc_unreliable(\"function_name\", <optional_args>)`"

#, fuzzy
msgid "``rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)``"
msgstr "`rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)`"

msgid "Synchronizing member variables is also possible:"
msgstr "Синхронизация переменных также возможна:"

#, fuzzy
msgid "``rset(\"variable\", value)``"
msgstr "`rset(\"variable\", value)`"

#, fuzzy
msgid "``rset_id(<peer_id>, \"variable\", value)``"
msgstr "`rset_id(<peer_id>, \"variable\", value)`"

#, fuzzy
msgid "``rset_unreliable(\"variable\", value)``"
msgstr "`rset_unreliable(\"variable\", value)`"

#, fuzzy
msgid "``rset_unreliable_id(<peer_id>, \"variable\", value)``"
msgstr "`rset_unreliable_id(<peer_id>, \"variable\", value)`"

msgid "Functions can be called in two fashions:"
msgstr "Функции можно вызывать двумя способами:"

msgid ""
"Reliable: when the function call arrives, an acknowledgement will be sent "
"back; if the acknowledgement isn't received after a certain amount of time, "
"the function call will be re-transmitted."
msgstr ""

msgid ""
"Unreliable: the function call is sent only once, without checking to see if "
"it arrived or not, but also without any extra overhead."
msgstr ""

msgid ""
"In most cases, reliable is desired. Unreliable is mostly useful when "
"synchronizing object positions (sync must happen constantly, and if a packet "
"is lost, it's not that bad because a new one will eventually arrive and it "
"would likely be outdated because the object moved further in the meantime, "
"even if it was resent reliably)."
msgstr ""
"В большинстве случаев требуется надежность. Ненадежный в основном полезен "
"при синхронизации позиций объектов (синхронизация должна происходить "
"постоянно, и если пакет потерян, это не так уж плохо, потому что новый в "
"конечном итоге прибудет, и он, вероятно, будет устаревшим, потому что объект "
"перемещается всё дальше)."

#, fuzzy
msgid ""
"There is also :ref:`SceneTree.get_rpc_sender_id() "
"<class_SceneTree_method_get_rpc_sender_id>`, which can be used to check "
"which peer (or peer ID) sent an RPC."
msgstr ""
"Существует также` get_rpc_sender_id 'функция в ' SceneTree`, которая может "
"быть использован для проверки узла (получения ID) того, кто вызвал RPC."

msgid "Back to lobby"
msgstr "Вернёмся к лобби"

msgid ""
"Let's get back to the lobby. Imagine that each player that connects to the "
"server will tell everyone about it."
msgstr ""
"Давайте вернёмся к теме лобби. Представьте, что каждый игрок, подключившийся "
"к серверу, расскажет нам об этом."

#, fuzzy
msgid ""
"You might have already noticed something different, which is the usage of "
"the ``remote`` keyword on the ``register_player`` function:"
msgstr ""
"Возможно вы уже заметили что-то новое в коде, а именно ключевое слово "
"`remote` у функции `register_player`:"

msgid ""
"This keyword is one of many that allow a function to be called by a remote "
"procedure call (RPC). There are six of them total:"
msgstr ""

#, fuzzy
msgid "``remote``"
msgstr "`remote`"

#, fuzzy
msgid "``remotesync``"
msgstr "`remote`"

#, fuzzy
msgid "``puppet``"
msgstr "puppet"

#, fuzzy
msgid "``puppetsync``"
msgstr "puppetsync"

#, fuzzy
msgid "``master``"
msgstr "`master`"

#, fuzzy
msgid "``mastersync``"
msgstr "mastersync"

msgid ""
"Each of them designate who can call the rpc, and optionally ``sync`` if the "
"RPC can be called locally."
msgstr ""

#, fuzzy
msgid ""
"If no rpc keywords are added, Godot will block any attempts to call "
"functions remotely. This makes security work a lot easier (so a client can't "
"call a function to delete a file on another client's system)."
msgstr ""
"Это ключевое слово имеет два применения. Первая это дать знать Godot, что "
"эта функция может быть вызвана из RPC. Если ключевых слов не добавлено, "
"тогда Godot будет блокировать любые попытки вызвать эту функцию, ради "
"безопасности. Это делает работу системы безопасности чуть легче (таким "
"образом клиент не может вызвать функцию, чтобы удалить файл другого клиента "
"в системе)."

msgid ""
"The ``remote`` keyword can be called by any peer, including the server and "
"all clients. The ``puppet`` keyword means a call can be made from the "
"network master to any network puppet. The ``master`` keyword means a call "
"can be made from any network puppet to the network master."
msgstr ""

msgid ""
"If ``sync`` is included, the call can also be made locally. For example, to "
"allow the network master to change the player's position on all peers:"
msgstr ""

msgid ""
"You can also use :ref:`SceneTree.get_rpc_sender_id() "
"<class_SceneTree_method_get_rpc_sender_id>` to have more advanced rules on "
"how an rpc can be called."
msgstr ""

msgid ""
"These keywords are further explained in :ref:`Synchronizing the game "
"<doc_high_level_multiplayer_synchronizing>`."
msgstr ""

msgid ""
"With this, lobby management should be more or less explained. Once you have "
"your game going, you will most likely want to add some extra security to "
"make sure clients don't do anything funny (just validate the info they send "
"from time to time, or before game start). For the sake of simplicity and "
"because each game will share different information, this is not shown here."
msgstr ""

msgid "Starting the game"
msgstr ""

msgid ""
"Once enough players have gathered in the lobby, the server should probably "
"start the game. This is nothing special in itself, but we'll explain a few "
"nice tricks that can be done at this point to make your life much easier."
msgstr ""

msgid "Player scenes"
msgstr ""

msgid ""
"In most games, each player will likely have its own scene. Remember that "
"this is a multiplayer game, so in every peer you need to instance **one "
"scene for each player connected to it**. For a 4 player game, each peer "
"needs to instance 4 player nodes."
msgstr ""

msgid ""
"So, how to name such nodes? In Godot, nodes need to have a unique name. It "
"must also be relatively easy for a player to tell which node represents each "
"player ID."
msgstr ""

msgid ""
"The solution is to simply name the *root nodes of the instanced player "
"scenes as their network ID*. This way, they will be the same in every peer "
"and RPC will work great! Here is an example:"
msgstr ""

msgid ""
"Depending on when you execute pre_configure_game(), you may need to change "
"any calls to ``add_child()`` to be deferred via ``call_deferred()``, as the "
"SceneTree is locked while the scene is being created (e.g. when ``_ready()`` "
"is being called)."
msgstr ""

msgid "Synchronizing game start"
msgstr ""

msgid ""
"Setting up players might take different amounts of time for every peer due "
"to lag, different hardware, or other reasons. To make sure the game will "
"actually start when everyone is ready, pausing the game until all players "
"are ready can be useful:"
msgstr ""

msgid ""
"When the server gets the OK from all the peers, it can tell them to start, "
"as for example:"
msgstr ""

msgid "Synchronizing the game"
msgstr ""

msgid ""
"In most games, the goal of multiplayer networking is that the game runs "
"synchronized on all the peers playing it. Besides supplying an RPC and "
"remote member variable set implementation, Godot adds the concept of network "
"masters."
msgstr ""

msgid "Network master"
msgstr ""

msgid ""
"The network master of a node is the peer that has the ultimate authority "
"over it."
msgstr ""

msgid ""
"When not explicitly set, the network master is inherited from the parent "
"node, which if not changed, is always going to be the server (ID 1). Thus "
"the server has authority over all nodes by default."
msgstr ""

msgid ""
"The network master can be set with the function :ref:`Node."
"set_network_master(id, recursive) <class_Node_method_set_network_master>` "
"(recursive is ``true`` by default and means the network master is "
"recursively set on all child nodes of the node as well)."
msgstr ""

msgid ""
"Checking that a specific node instance on a peer is the network master for "
"this node for all connected peers is done by calling :ref:`Node."
"is_network_master() <class_Node_method_is_network_master>`. This will return "
"``true`` when executed on the server and ``false`` on all client peers."
msgstr ""

msgid ""
"If you have paid attention to the previous example, it's possible you "
"noticed that each peer was set to have network master authority for their "
"own player (Node) instead of the server:"
msgstr ""

msgid ""
"Each time this piece of code is executed on each peer, the peer makes itself "
"master on the node it controls, and all other nodes remain as puppets with "
"the server being their network master."
msgstr ""

msgid ""
"To clarify, here is an example of how this looks in the `bomber demo "
"<https://github.com/godotengine/godot-demo-projects/tree/master/networking/"
"multiplayer_bomber>`_:"
msgstr ""

msgid "Master and puppet keywords"
msgstr ""

msgid ""
"The real advantage of this model is when used with the ``master``/``puppet`` "
"keywords in GDScript (or their equivalent in C# and Visual Script). "
"Similarly to the ``remote`` keyword, functions can also be tagged with them:"
msgstr ""

msgid "Example bomb code:"
msgstr ""

msgid "Example player code:"
msgstr ""

msgid ""
"In the above example, a bomb explodes somewhere (likely managed by whoever "
"is the master of this bomb-node, e.g. the host). The bomb knows the bodies "
"(player nodes) in the area, so it checks that they contain an ``exploded`` "
"method before calling it."
msgstr ""

msgid ""
"Recall that each peer has a complete set of instances of player nodes, one "
"instance for each peer (including itself and the host). Each peer has set "
"itself as the master of the instance corresponding to itself, and it has set "
"a different peer as the master for each of the other instances."
msgstr ""

msgid ""
"Now, going back to the call to the ``exploded`` method, the bomb on the host "
"has called it remotely on all bodies in the area that have the method. "
"However, this method is in a player node and has a ``master`` keyword."
msgstr ""

msgid ""
"The ``master`` keyword on the ``exploded`` method in the player node means "
"two things for how this call is made. Firstly, from the perspective of the "
"calling peer (the host), the calling peer will only attempt to remotely call "
"the method on the peer that it has set as the network master of the player "
"node in question. Secondly, from the perspective of the peer the host is "
"sending the call to, the peer will only accept the call if it set itself as "
"the network master of the player node with the method being called (which "
"has the ``master`` keyword). This works well as long as all peers agree on "
"who is the master of what."
msgstr ""
"Ключевое слово ``master`` в методе ``exploded`` в узле игрока означает две "
"вещи для того, как выполняется этот вызов. Во-первых, с точки зрения "
"вызывающего аналога (хоста), вызывающий аналог будет пытаться удаленно "
"вызвать метод только на том аналоге, который он установил в качестве "
"сетевого мастера данного узла игрока. Во-вторых, с точки зрения пира, "
"которому посылает вызов хост, пир примет вызов только в том случае, если он "
"установил себя в качестве хозяина сети узла игрока с вызываемым методом "
"(который имеет ключевое слово ``master``). Это работает хорошо до тех пор, "
"пока все пиры согласны с тем, кто является хозяином чего-либо."

msgid ""
"The above setup means that only the peer who owns the affected body will be "
"responsible for telling all the other peers that its body was stunned, after "
"being remotely instructed to do so by the host's bomb. The owning peer "
"therefore (still in the ``exploded`` method) tells all the other peers that "
"its player node was stunned. The peer does this by remotely calling the "
"``stun`` method on all instances of that player node (on the other peers). "
"Because the ``stun`` method has the ``puppet`` keyword, only peers who did "
"not set themselves as the network master of the node will call it (in other "
"words, those peers are set as puppets for that node by virtue of not being "
"the network master of it)."
msgstr ""
"Вышеприведенная установка означает, что только пир, владеющий пораженным "
"телом, будет отвечать за сообщение всем остальным пирам о том, что его тело "
"было оглушено, после того, как получит удаленное указание сделать это от "
"бомбы хозяина. Поэтому владелец (все еще в методе ``взрыв``) сообщает всем "
"другим равным, что его узел игрока был оглушен. Он делает это, удаленно "
"вызывая метод ``stun`` для всех экземпляров этого узла игрока (на других "
"узлах). Поскольку метод ``stun`` имеет ключевое слово ``puppet``, его "
"вызовут только те пиры, которые не установили себя в качестве сетевого "
"хозяина узла (другими словами, эти пиры являются марионетками для этого узла "
"в силу того, что не являются его сетевым хозяином)."

msgid ""
"The result of this call to ``stun`` is to make the player look stunned on "
"the screen of all the peers, including the current network master peer (due "
"to the local call to ``stun`` after ``rpc(\"stun\")``)."
msgstr ""

msgid ""
"The master of the bomb (the host) repeats the above steps for each of the "
"bodies in the area, such that all the instances of any player in the bomb "
"area get stunned on the screens of all the peers."
msgstr ""

msgid ""
"Note that you could also send the ``stun()`` message only to a specific "
"player by using ``rpc_id(<id>, \"exploded\", bomb_owner)``. This may not "
"make much sense for an area-of-effect case like the bomb, but might in other "
"cases, like single target damage."
msgstr ""

msgid "Exporting for dedicated servers"
msgstr "Экспортирование на выделенные серверы"

msgid ""
"Once you've made a multiplayer game, you may want to export it to run it on "
"a dedicated server with no GPU available. See :ref:"
"`doc_exporting_for_dedicated_servers` for more information."
msgstr ""

msgid ""
"The code samples on this page aren't designed to run on a dedicated server. "
"You'll have to modify them so the server isn't considered to be a player. "
"You'll also have to modify the game starting mechanism so that the first "
"player who joins can start the game."
msgstr ""

msgid ""
"The bomberman example here is largely for illustrational purposes, and does "
"not do anything on the host-side to handle the case where a peer uses a "
"custom client to cheat by for example refusing to stun itself. In the "
"current implementation such cheating is perfectly possible because each "
"client is the network master of its own player, and the network master of a "
"player is the one which decides whether to call the I-was-stunned method "
"(``stun``) on all of the other peers and itself."
msgstr ""
"Пример с бомбардировщиком здесь приведён в основном в иллюстративных целях, "
"и на стороне хоста ничего не делается для того, чтобы справиться со случаем, "
"когда одноклассник использует пользовательский клиент для обмана, например, "
"отказываясь оглушать себя. В текущей реализации такое жульничество вполне "
"возможно, поскольку каждый клиент является хозяином сети своего игрока, а "
"хозяин сети игрока - это тот, кто решает, вызывать ли метод I-was-stunned "
"(``stun``) для всех других пиров и себя."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
