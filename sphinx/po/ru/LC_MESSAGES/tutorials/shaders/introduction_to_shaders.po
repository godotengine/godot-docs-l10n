# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Introduction to shaders"
msgstr "Введение в экспорт"

#, fuzzy
msgid ""
"This page explains what shaders are and will give you an overview of how "
"they work in Godot. For a detailed reference of the engine's shading "
"language, see :ref:`doc_shading_language`."
msgstr ""
"Этот документ предоставляет вам некоторую информацию о шейдерах, характерных "
"для Godot. Подробные сведения о языке шейдинга в Godot см. в :ref:"
"`Документации по языку шейдеров Godot<doc_shading_language>`."

msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). They were initially used to shade 3D scenes but can nowadays do much "
"more. You can use them to control how the engine draws geometry and pixels "
"on the screen, allowing you to achieve all sorts of effects."
msgstr ""

msgid ""
"Modern rendering engines like Godot draw everything with shaders: graphics "
"cards can run thousands of instructions in parallel, leading to incredible "
"rendering speed."
msgstr ""

msgid ""
"Because of their parallel nature, though, shaders don't process information "
"the way a typical program does. Shader code runs on each vertex or pixel in "
"isolation. You cannot store data between frames either. As a result, when "
"working with shaders, you need to code and think differently from other "
"programming languages."
msgstr ""

msgid ""
"Suppose you want to update all the pixels in a texture to a given color. In "
"GDScript, your code would use ``for`` loops::"
msgstr ""

msgid ""
"Your code is already part of a loop in a shader, so the corresponding code "
"would look like this."
msgstr ""

msgid ""
"The graphics card calls the ``fragment()`` function once or more for each "
"pixel it has to draw. More on that below."
msgstr ""

#, fuzzy
msgid "Shaders in Godot"
msgstr "Ключевые кадры в Godot"

msgid ""
"Godot provides a shading language based on the popular OpenGL Shading "
"Language (GLSL) but simplified. The engine handles some of the lower-level "
"initialization work for you, making it easier to write complex shaders."
msgstr ""

msgid ""
"In Godot, shaders are made up of three main functions: ``vertex()``, "
"``fragment()``, and ``light()``."
msgstr ""

msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions and some other per-vertex variables."
msgstr ""

msgid ""
"The ``fragment()`` function runs for every pixel covered by the mesh. It "
"uses values output by the ``vertex()`` function, interpolated between the "
"vertices."
msgstr ""

msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from its previous runs."
msgstr ""

msgid ""
"The ``light()`` function won't run if the ``vertex_lighting`` render mode is "
"enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** is "
"enabled in the Project Settings. It's enabled by default on mobile platforms."
msgstr ""

msgid "Shader types"
msgstr "Типы шейдеров"

#, fuzzy
msgid ""
"Instead of supplying a general-purpose configuration for all uses (2D, 3D, "
"particles), you must specify the type of shader you're writing. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""
"Вместо предоставления конфигурации общего назначения для всех видов "
"использования (2D, 3D, частицы), шейдеры Godot должны уточнять, для чего они "
"предназначены. Различные типы поддерживают разные режимы визуализации, "
"встроенные переменные и функции обработки."

#, fuzzy
msgid ""
"In Godot, all shaders need to specify their type in the first line, like so:"
msgstr ""
"Все шейдеры должны указать свой тип в первой строке в следующем формате:"

#, fuzzy
msgid "Here are the available types:"
msgstr "Существует 6 типов шаблонов:"

#, fuzzy
msgid ":ref:`spatial <doc_spatial_shader>` for 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>`: Для 3D визуализации."

#, fuzzy
msgid ":ref:`canvas_item <doc_canvas_item_shader>` for 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>`: Для 2D визуализации."

#, fuzzy
msgid ":ref:`particles <doc_particle_shader>` for particle systems."
msgstr ":ref:`particles <doc_particle_shader>`: Для систем частиц."

msgid "Render modes"
msgstr "Режимы визуализации"

msgid ""
"Shaders have optional render modes you can specify on the second line, after "
"the shader type, like so:"
msgstr ""

msgid ""
"Render modes alter the way Godot applies the shader. For example, the "
"``unshaded`` mode makes the engine skip the built-in light processor "
"function."
msgstr ""

#, fuzzy
msgid ""
"Each shader type has different render modes. See the reference for each "
"shader type for a complete list of render modes."
msgstr ""
"Каждый тип шейдера имеет свой список доступных режимов визуализации. Полный "
"список режимов визуализации смотрите в документе по каждому типу шейдера."

msgid "Processor functions"
msgstr "Функции процессора"

#, fuzzy
msgid ""
"Depending on the shader type, you can override different processor "
"functions. For ``spatial`` and ``canvas_item``, you have access to "
"``vertex()``, ``fragment()``, and ``light()``. For ``particles``, you only "
"have access to ``vertex()``."
msgstr ""
"В зависимости от типа шейдера различные функции процессора могут быть "
"опционально переопределены. Для \"spatial\" (\"пространственный\") и "
"\"canvas_item\" (\"элемент холста\") можно переопределить ``vertex`` "
"(вершину), ``fragment`` (фрагмент) и ``light`` (свет). Для "
"\"particles\" (\"частиц\") можно переопределить только ``vertex``."

msgid "Vertex processor"
msgstr "Вершинный процессор"

#, fuzzy
msgid ""
"The ``vertex()`` processing function is called once for every vertex in "
"``spatial`` and ``canvas_item`` shaders. For ``particles`` shaders, it is "
"called once for every particle."
msgstr ""
"Функция вершинной (``vertex``) обработки вызывается один раз для каждой "
"вершины в шейдерах \"spatial\" и \"canvas_item\". В шейдерах \"particles\" "
"он вызывается один раз для каждой частицы."

msgid ""
"Each vertex in your world's geometry has properties like a position and "
"color. The function modifies those values and passes them to the fragment "
"function. You can also use it to send extra data to the fragment function "
"using varyings."
msgstr ""

#, fuzzy
msgid ""
"By default, Godot transforms your vertex information for you, which is "
"necessary to project geometry onto the screen. You can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example."
msgstr ""
"По умолчанию Godot берет информацию о ваших вершинах и соответствующим "
"образом преобразует их для прорисовки. Если это нежелательно, вы можете "
"использовать режимы рендеринга для самостоятельного преобразования данных; "
"пример этого см. в :ref:`документации шейдера Spatial<doc_spatial_shader>`."

msgid "Fragment processor"
msgstr "Фрагментный процессор"

#, fuzzy
msgid ""
"The ``fragment()`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in ``spatial`` and ``canvas_item`` "
"shaders."
msgstr ""
"Функция фрагментной (``fragment``) обработки используется для настройки "
"параметров материала Godot для каждого пикселя. Этот код обрабатывает каждый "
"видимый пиксель, отрисовывающий объект или примитив. Он доступен только в "
"шейдерах \"spatial\" и \"canvas_item\"."

msgid ""
"The standard use of the fragment function is to set up material properties "
"used to calculate lighting. For example, you would set values for "
"``ROUGHNESS``, ``RIM``, or ``TRANSMISSION``, which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function, and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on the effects that you do not use."
msgstr ""
"Стандартным использованием фрагментной функции является настройка свойств "
"материала, которые будут использоваться для расчёта освещения. Например, вы "
"должны установить значения для ``ROUGHNESS`` (шероховатости поверхности), "
"``RIM`` (контура света) или ``TRANSMISSION`` (пропускания света), которые "
"сообщат световой функции, как свет реагирует на этот фрагмент. Это позволяет "
"контролировать сложную последовательность процессов шейдинга без "
"необходимости написания пользователем большого количества кода. Если вам не "
"нужен этот встроенный функционал, вы можете игнорировать его и написать свою "
"собственную функцию обработки света, и Godot её оптимизирует. Например, если "
"вы не укажете значение для ``RIM``, Godot не будет рассчитывать контурное "
"освещение. Во время компиляции Godot проверяет, используется ли ``RIM``; "
"если нет, то он вырежет весь соответствующий код. Таким образом, вы не "
"будете тратить вычисления на эффекты, которые не используете."

msgid "Light processor"
msgstr "Световой процессор"

#, fuzzy
msgid ""
"The ``light()`` processor runs per pixel too, and it runs once for every "
"light that affects the object. It does not run if no lights affect the "
"object. It exists as a function called inside the ``fragment()`` processor "
"and typically operates on the material properties setup inside the "
"``fragment()`` function."
msgstr ""
"Процессор ``light`` тоже работает попиксельно, но также работает и для "
"каждого источника света, который влияет на объект (и не работает, если на "
"объект не влияет ни один свет). Он существует как функция, вызываемая внутри "
"процессора ``fragment``, и обычно работает с настройками свойств материала "
"внутри функции ``fragment``."

#, fuzzy
msgid ""
"The ``light()`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
"Процессор ``light`` работает в 2D иначе, чем в 3D; описание того, как это "
"работает в каждом из них, можно найти в их документации :ref:`CanvasItem "
"shaders <doc_canvas_item_shader>` и :ref:`Spatial shaders "
"<doc_spatial_shader>` соответственно."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
