# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "Использование ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""
"В этом уроке будут представлены основы использования :ref:`ArrayMesh "
"<class_arraymesh>`."

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""
"Для этого мы будем использовать функцию :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, которая принимает до "
"четырех параметров. Первые два являются обязательными, а вторые два - "
"необязательными."

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"Первым параметром является ``PrimitiveType``, концепция OpenGL, которая "
"указывает GPU, как расположить примитив на основе заданных вершин, т.е. "
"представляют ли они треугольники, линии, точки и т.д. Доступные варианты см. "
"в :ref:`Mesh.PrimitiveType <enum_Mesh_PrimitiveType>`."

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Pool**Array`` (e.g. PoolVector3Array, "
"PoolIntArray, etc.) for each type of information that will be used to build "
"the surface."
msgstr ""
"Второй параметр, ``arrays``, является фактическим массивом, который хранит "
"информацию о сетке. Массив представляет собой обычный массив Godot, "
"построенный с помощью пустых скобок ``[]``. Он хранит ``Pool**Array`` "
"(например, PoolVector3Array, PoolIntArray и т.д.) для каждого типа "
"информации, которая будет использоваться для построения поверхности."

msgid ""
"The possible elements of ``arrays`` are listed below, together with the "
"position they must have within ``arrays``. See also :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>`."
msgstr ""
"Возможные элементы ``arrays`` перечислены ниже, вместе с позицией, которую "
"они должны иметь в пределах ``arrays``. См. также :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>`."

msgid "Index"
msgstr "Индекс"

msgid "Mesh.ArrayType Enum"
msgstr "Mesh.ArrayType - перечисление"

msgid "Array type"
msgstr "Тип массива"

msgid "0"
msgstr "0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>` or :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>` или :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"

msgid "1"
msgstr "1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

msgid ":ref:`PoolVector3Array <class_PoolVector3Array>`"
msgstr ":ref:`PoolVector3Array <class_PoolVector3Array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. First 3 "
"floats determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""
":ref:`PoolRealArray <class_PoolRealArray>` группа из 4 вещественных чисел. "
"Первые 3 числа определяют тангенс, а последний - бинормальное направление "
"как -1 или 1."

msgid "3"
msgstr "3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

msgid ":ref:`PoolColorArray <class_PoolColorArray>`"
msgstr ":ref:`PoolColorArray <class_PoolColorArray>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>` or :ref:`PoolVector3Array "
"<class_PoolVector3Array>`"
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>` или :ref:`PoolVector3Array "
"<class_PoolVector3Array>`"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "6"
msgstr "6"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats or :ref:"
"`PoolIntArray <class_PoolIntArray>` of groups of 4 ints. Each group lists "
"indexes of 4 bones that affects a given vertex."
msgstr ""
":ref:`PoolRealArray <class_PoolRealArray>` группа из 4 вещественных чисел "
"или :ref:`PoolIntArray <class_PoolIntArray>` групп из 4 целых чисел. Каждая "
"группа перечисляет индексы 4 костей, которые влияют на данную вершину."

msgid "7"
msgstr "7"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PoolRealArray <class_PoolRealArray>` of groups of 4 floats. Each float "
"lists the amount of weight an determined bone on ``ARRAY_BONES`` has on a "
"given vertex."
msgstr ""
":ref:`PoolRealArray <class_PoolRealArray>` группа из 4 вещественных числе. "
"Каждое число перечисляет количество веса, которое определенная кость на "
"``ARRAY_BONES`` имеет на данную вершину."

msgid "8"
msgstr "8"

msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

msgid ":ref:`PoolIntArray <class_PoolIntArray>`"
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`"

msgid ""
"The array of vertices (at index 0) is always required. The index array is "
"optional and will only be used if included. We won't use it in this tutorial."
msgstr ""
"Массив вершин (с индексом 0) всегда обязателен. Массив индексов является "
"необязательным и будет использоваться только в том случае, если он включен. "
"Мы не будем использовать его в этом уроке."

msgid ""
"All the other arrays carry information about the vertices. They are also "
"optional and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""
"Все остальные массивы несут информацию о вершинах. Они также являются "
"необязательными и будут использоваться только в том случае, если они "
"включены. Некоторые из этих массивов (например, ``ARRAY_COLOR``) используют "
"по одной записи на вершину, чтобы предоставить дополнительную информацию о "
"вершинах. Они должны иметь тот же размер, что и массив вершин. Другие "
"массивы (например, ``ARRAY_TANGENT``) используют четыре записи для описания "
"одной вершины. Они должны быть ровно в четыре раза больше, чем массив вершин."

msgid ""
"For normal usage, the last two parameters in :ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` are typically left empty."
msgstr ""
"Для обычного использования последние два параметра в :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"обычно оставляют пустыми."

msgid "ArrayMesh"
msgstr "ArrayMеsh"

msgid ""
"In the editor, create a :ref:`MeshInstance <class_meshinstance>` and add an :"
"ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, adding "
"an ArrayMesh in the editor is not useful, but in this case it allows us to "
"access the ArrayMesh from code without creating one."
msgstr ""
"В редакторе создайте :ref:`MeshInstance <class_meshinstance>` и добавьте к "
"нему :ref:`ArrayMesh <class_arraymesh>` в инспекторе. Обычно добавление "
"ArrayMesh в редакторе не является полезным, но в данном случае это позволяет "
"нам получить доступ к ArrayMesh из кода без его создания."

msgid "Next, add a script to the MeshInstance."
msgstr "Затем добавьте скрипт в MeshInstance."

msgid "Under ``_ready()``, create a new Array."
msgstr "Ниже ``_ready()`` создайте новый массив."

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"Это будет массив, в котором мы храним нашу информацию о поверхности, он "
"будет содержать все массивы данных, которые нужны поверхности. Godot "
"ожидает, что он будет иметь размер ``Mesh.ARRAY_MAX``, поэтому измените его "
"размер соответствующим образом."

msgid "Next create the arrays for each data type you will use."
msgstr ""
"Затем создайте массивы для каждого типа данных, который вы будете "
"использовать."

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"После того, как вы заполнили свои массивы данных своей геометрией, вы можете "
"создать сетку, добавив каждый массив в `surface_array`, а затем зафиксировав "
"его в сетке."

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"В этом примере мы использовали `Mesh.PRIMITIVE_TRIANGLES`, но вы можете "
"использовать любой примитивный тип, доступный из сетки."

msgid "Put together, the full code looks like:"
msgstr "В совокупности полный код выглядит следующим образом:"

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"Код, который находится в середине, может быть любым, каким вы захотите. Ниже "
"мы приведем пример кода для генерации сферы."

msgid "Generating geometry"
msgstr "Создаём геометрию"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"Здесь приведен пример кода для генерации сферы. Хотя код представлен на "
"GDScript, в подходе к генерации сферы нет ничего специфичного для Godot. Эта "
"реализация не имеет ничего общего с ArrayMeshes и является просто общим "
"подходом к генерации сферы. Если у вас возникли трудности с пониманием или "
"вы хотите узнать больше о процедурной геометрии в целом, вы можете "
"воспользоваться любым учебником, который найдете в Интернете."

msgid "Saving"
msgstr "Сохранение"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"Наконец, мы можем использовать класс :ref:`ResourceSaver "
"<class_resourcesaver>` для сохранения ArrayMesh. Это полезно, когда вы "
"хотите сгенерировать сетку, а затем использовать ее позже без необходимости "
"повторной генерации."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
