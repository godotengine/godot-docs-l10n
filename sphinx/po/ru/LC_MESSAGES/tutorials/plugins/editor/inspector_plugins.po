# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Inspector plugins"
msgstr "Плагины инспектора"

msgid ""
"The inspector dock allows you to create custom widgets to edit properties "
"through plugins. This can be beneficial when working with custom datatypes "
"and resources, although you can use the feature to change the inspector "
"widgets for built-in types. You can design custom controls for specific "
"properties, entire objects, and even separate controls associated with "
"particular datatypes."
msgstr ""

msgid ""
"This guide explains how to use the :ref:`class_EditorInspectorPlugin` and :"
"ref:`class_EditorProperty` classes to create a custom interface for "
"integers, replacing the default behavior with a button that generates random "
"values between 0 and 99."
msgstr ""

msgid "The default behavior on the left and the end result on the right."
msgstr ""

#, fuzzy
msgid "Setting up your plugin"
msgstr "Настройка Pywin32"

msgid "Create a new empty plugin to get started."
msgstr ""

msgid "See :ref:`doc_making_plugins` guide to set up your new plugin."
msgstr ""

msgid ""
"Let's assume you've called your plugin folder ``my_inspector_plugin``. If "
"so, you should end up with a new ``addons/my_inspector_plugin`` folder that "
"contains two files: ``plugin.cfg`` and ``plugin.gd``."
msgstr ""

msgid ""
"As before, ``plugin.gd`` is a script extending :ref:`class_EditorPlugin` and "
"you need to introduce new code for its ``_enter_tree`` and ``_exit_tree`` "
"methods. To set up your inspector plugin, you must load its script, then "
"create and add the instance by calling ``add_inspector_plugin()``. If the "
"plugin is disabled, you should remove the instance you have added by calling "
"``remove_inspector_plugin()``."
msgstr ""

msgid ""
"Here, you are loading a script and not a packed scene. Therefore you should "
"use ``new()`` instead of ``instance()``."
msgstr ""

#, fuzzy
msgid "Interacting with the inspector"
msgstr "Интерполяция с кватернионами"

msgid ""
"To interact with the inspector dock, your ``MyInspectorPlugin.gd`` script "
"must extend the :ref:`class_EditorInspectorPlugin` class. This class "
"provides several virtual methods that affect how the inspector handles "
"properties."
msgstr ""

msgid ""
"To have any effect at all, the script must implement the ``can_handle()`` "
"method. This function is called for each edited :ref:`class_Object` and must "
"return ``true`` if this plugin should handle the object or its properties."
msgstr ""

msgid "This includes any :ref:`class_Resource` attached to the object."
msgstr ""

msgid ""
"You can implement four other methods to add controls to the inspector at "
"specific positions. The ``parse_begin()`` and ``parse_end()`` methods are "
"called only once at the beginning and the end of parsing for each object, "
"respectively. They can add controls at the top or bottom of the inspector "
"layout by calling ``add_custom_control()``."
msgstr ""

msgid ""
"As the editor parses the object, it calls the ``parse_category()`` and "
"``parse_property()`` methods. There, in addition to "
"``add_custom_control()``, you can call both ``add_property_editor()`` and "
"``add_property_editor_for_multiple_properties()``. Use these last two "
"methods to specifically add :ref:`class_EditorProperty`-based controls."
msgstr ""

#, fuzzy
msgid "Adding an interface to edit properties"
msgstr "Добавление свойств"

msgid ""
"The :ref:`class_EditorProperty` class is a special type of :ref:"
"`class_Control` that can interact with the inspector dock's edited objects. "
"It doesn't display anything but can house any other control nodes, including "
"complex scenes."
msgstr ""

msgid ""
"There are three essential parts to the script extending :ref:"
"`class_EditorProperty`:"
msgstr ""

msgid ""
"You must define the ``_init()`` method to set up the control nodes' "
"structure."
msgstr ""

msgid ""
"You should implement the ``update_property()`` to handle changes to the data "
"from the outside."
msgstr ""

msgid ""
"A signal must be emitted at some point to inform the inspector that the "
"control has changed the property using ``emit_changed``."
msgstr ""

msgid ""
"You can display your custom widget in two ways. Use just the default "
"``add_child()`` method to display it to the right of the property name, and "
"use ``add_child()`` followed by ``set_bottom_editor()`` to position it below "
"the name."
msgstr ""

msgid ""
"Using the example code above you should be able to make a custom widget that "
"replaces the default :ref:`class_SpinBox` control for integers with a :ref:"
"`class_Button` that generates random values."
msgstr ""

msgid "Translation status"
msgstr "Translation status (статус перевода)"
