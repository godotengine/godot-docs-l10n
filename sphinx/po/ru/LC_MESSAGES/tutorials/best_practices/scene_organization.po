# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene organization"
msgstr "Организация сцены"

msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"Эта статья охватывает темы связанные с эффективной организацией содержания "
"сцены. Какие узлы вам стоит использовать? Как их стоит располагать? Как они "
"должны взаимодействовать?"

msgid "How to build relationships effectively"
msgstr "Как эффективно строить зависимости"

msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Когда пользователи Godot начинают создавать собственные сцены, они часто "
"приходят к подобной проблеме:"

msgid ""
"They create their first scene and fill it with content only to eventually "
"end up saving branches of their scene into separate scenes as the nagging "
"feeling that they should split things up starts to accumulate. However, they "
"then notice that the hard references they were able to rely on before are no "
"longer possible. Re-using the scene in multiple places creates issues "
"because the node paths do not find their targets and signal connections "
"established in the editor break."
msgstr ""
"Они создают свою первую сцену и заполняют её содержимым, чтобы в конечном "
"итоге прийти к тому, чтобы сохранить ветки узлов в отдельные сцены, так как "
"начинает накапливаться мучительное чувство, что нужно разделить их. Однако "
"затем они замечают, что ссылок, по которым они могли обращаться к узлам, "
"больше нет. Использование одной и той же сцены в разных местах "
"проблематично, потому что пути узлов не находят своих целей, а сигналы, "
"установленные в редакторе, разрываются."

msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"Чтобы исправить эти проблемы, необходимо создать экземпляры под-сцены, не "
"требуя подробностей об их окружении. Нужно быть уверенным в том, что под-"
"сцена создаст сама себя, не придавая значения тому, как её использовать."

msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability."
msgstr ""
"Одна из важнейших вещей, которую следует учитывать в ООП — это поддержка "
"целевых классов единственного назначения со `слабым зацеплением <https://ru."
"wikipedia.org/wiki/"
"%D0%97%D0%B0%D1%86%D0%B5%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)#%D0%A2%D0%B8%D0%BF%D1%8B_%D0%B7%D0%B0%D1%86%D0%B5%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F>`_ "
"с другими частями кодовой базы. Это сохраняет размеры объектов небольшими "
"(для удобства поддержки) и улучшает их переиспользование."

msgid ""
"These OOP best practices have *several* implications for best practices in "
"scene structure and script usage."
msgstr ""
"Этот наилучший метод ООП имеет *некоторую* причастность к наилучшему методу "
"структурирования сцены и использования скриптов."

msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**Если в целом это возможно, вам стоит создавать сцены так чтобы они не "
"имели зависимостей.** То есть, вам стоит создавать сцены, которые содержат "
"всё, что им нужно, в пределах самих себя."

msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"Если сцена должна взаимодействовать с внешним контекстом, опытные "
"разработчики рекомендуют использовать `Внедрение Зависимости <https://ru."
"wikipedia.org/wiki/"
"%D0%92%D0%BD%D0%B5%D0%B4%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8>`_. "
"Эта техника включает в себя наличие высокоуровневого API, который "
"предоставит зависимости для низкоуровневого API. Почему так стоит делать? "
"Потому что классы которые полагаются на внешнее окружение могут ненароком "
"вызвать баги и неожиданное поведение."

msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"Для этого необходимо предоставить данные, а затем положиться на родительскую "
"связь чтобы все это инициализировать:"

msgid ""
"Connect to a signal. Extremely safe, but should be used only to \"respond\" "
"to behavior, not start it. Note that signal names are usually past-tense "
"verbs like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"Подключитесь к сигналу. Чрезвычайно безопасно, но должно использоваться "
"только для \"ответа\" на поведение, а не для его запуска. Обратите внимание, "
"что имена сигналов обычно являются глаголами прошедшего времени, например "
"\"вошел\", \"навык_активирован\" или \"предмет_собран\"."

msgid "Call a method. Used to start behavior."
msgstr "Вызов метода. Используется для запуска поведения."

msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""
"Инициализируйте свойство :ref:`FuncRef <class_FuncRef>`. Безопасней чем "
"метод так как владение методом не требуется. Используется для начального "
"поведения."

msgid "Initialize a Node or other Object reference."
msgstr "Инициализация ссылки на Node или другой Object."

msgid "Initialize a NodePath."
msgstr "Инициализируйте NodePath (\"Путь узла\")."

msgid ""
"These options hide the points of access from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""
"Эти опции прячут точки доступа от дочернего узла. Этот ход оставляет "
"дочерний элемент **слабо связанным** со своим окружением. Можно использовать "
"это в другом контексте без дополнительных изменений в его API."

msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"Хотя примеры выше иллюстрируют отношения родительский элемент-дочерний "
"элемент, идентичные принципы применимы ко всем связям объектов. Узлы которые "
"являются соседними должны знать свои иерархии только когда предок "
"посредничает в их коммуникациях и ссылках."

msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"Те же принципы применимы и к объектам, не относящимся к Node, которые "
"поддерживают зависимости от других объектов. Какому бы объекту ни "
"принадлежали объекты, он должен управлять отношениями между ними."

msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"Следует отдавать предпочтение хранению данных внутри дома (внутри сцены), "
"хотя, поскольку установка зависимости от внешнего контекста, даже "
"слабосвязанного, по-прежнему означает, что узел будет ожидать, что что-то в "
"его среде будет истинным. Философия дизайна проекта должна предотвратить "
"это. В противном случае присущие коду обязательства заставят разработчиков "
"использовать документацию для отслеживания объектных отношений в "
"микроскопическом масштабе; это иначе известно как `Производственный ад "
"<https://ru.wikipedia.org/wiki/Производственный_ад>`_. Написание кода, "
"который полагается на внешнюю документацию для его безопасного "
"использования, по умолчанию подвержено ошибкам."

msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""
"Чтобы избежать создания и поддержки такой документации, нужно преобразовать "
"зависимый узел (\"дочерний\" выше) в инструментальный скрипт, который "
"реализует :ref:`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Возврат из него непустой "
"строки заставит док-станцию Scene сгенерировать значок предупреждения со "
"строкой в качестве всплывающей подсказки для узла. Это тот же значок, "
"который отображается для таких узлов, как узел :ref:`Area2D <class_Area2D>`, "
"когда он не имеет дочерних узлов: :ref:`CollisionShape2D "
"<class_CollisionShape2D>`, определенных. Затем редактор самостоятельно "
"документирует сцену с помощью кода сценария. Никакого дублирования контента "
"через документацию не требуется."

msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"Подобный графический интерфейс может лучше информировать пользователей "
"проекта о важной информации об узлах. Есть ли у него внешние зависимости? "
"Удовлетворены ли эти зависимости? Другим программистам, особенно дизайнерам "
"и писателям, потребуются чёткие инструкции в сообщениях, говорящие им, что "
"делать, чтобы настроить его."

msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling) is "
"the next best thing. Inevitably, changes may need to be made to a class and "
"if these changes cause it to interact with other scenes in unforeseen ways, "
"then things will start to break down. The whole point of all this "
"indirection is to avoid ending up in a situation where changing one class "
"results in adversely effecting other classes."
msgstr ""
"Итак, почему всё это сложное переключение работает? Ну, потому что сцены "
"работают лучше всего, когда они работают в одиночку. Если вы не можете "
"работать в одиночку, то лучше всего будет работать с другими анонимно (с "
"минимальными жёсткими зависимостями, т.е. слабой связью). Неизбежно может "
"потребоваться внести изменения в класс, и если эти изменения заставят его "
"непредвиденным образом взаимодействовать с другими сценами, то все начнёт "
"ломаться. Весь смысл всего этого косвенного обращения состоит в том, чтобы "
"избежать ситуации, когда изменение одного класса приводит к неблагоприятному "
"воздействию на другие классы."

msgid ""
"Scripts and scenes, as extensions of engine classes, should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"Скрипты и сцены, как расширения классов движков, должны соответствовать "
"*всем* принципам ООП. Примеры включают..."

msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr "`SOLID <https://ru.wikipedia.org/wiki/SOLID>`_"

msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://ru.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr ""
"`KISS <https://ru.wikipedia.org/wiki/"
"KISS_(%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF)>`_"

msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://ru.wikipedia.org/wiki/YAGNI>`_"

msgid "Choosing a node tree structure"
msgstr "Выбор структуры дерева нод"

msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in countless ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"Итак, разработчик начинает работу над игрой только для того, чтобы "
"остановиться перед огромными возможностями. Они могут знать, что они хотят "
"сделать, какие системы они хотят иметь, но *где* их разместить? То, как "
"человек будет создавать свою игру, всегда зависит от него самого. Дерево "
"узлов можно построить бесчисленными способами. Но для тех, кто не уверен, "
"это полезное руководство может дать им образец достойной структуры для "
"начала."

msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view of "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"В игре всегда должна быть своего рода \"точка входа\"; где-то разработчик "
"может окончательно отследить, где что-то начинается, чтобы он мог следовать "
"логике, как она продолжается в другом месте. Это место также служит для "
"обзора всех остальных данных и логики программы с высоты птичьего полета. "
"Для традиционных приложений это будет \"главная\" функция. В данном случае "
"это будет главный узел (Main)."

msgid "Node \"Main\" (main.gd)"
msgstr "Узел \"Main\" (main.gd)"

msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr "Сценарий ``main.gd`` будет тогда служить основным контроллером игры."

msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"Затем есть свой настоящий игровой \"Мир\" (World) (2D или 3D). Это может "
"быть дочерний элемент Main. Кроме того, для игры потребуется основной "
"графический интерфейс, который управляет различными меню и виджетами, "
"которые необходимы проекту."

msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr "Node2D / Пространственный \"Мир\" (game_world.gd)"

msgid "Control \"GUI\" (gui.gd)"
msgstr "Управление \"GUI\" (gui.gd)"

msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"При смене уровней можно извлечь из узла \"World\" дочерние элементы. :ref:"
"`Смена сцен вручную <doc_change_scenes_manally>` дает пользователям полный "
"контроль над тем, как они меняют игровой мир."

msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"Следующий шаг - обдумать, какие игровые системы требуются для вашего "
"проекта. Если есть система, которая...."

msgid "tracks all of its data internally"
msgstr "отслеживает все свои данные изнутри"

msgid "should be globally accessible"
msgstr "должна быть доступна глобально"

msgid "should exist in isolation"
msgstr "может существовать изолированно"

msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"... то следует создать :ref:`автозагрузочный узел 'singleton' "
"<doc_singletons_autoload>`."

msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""
"Для небольших игр более простой альтернативой с меньшим контролем было бы "
"иметь синглтон \"Game\", который просто вызывает метод :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` для замены содержимого "
"основной сцены. Эта структура более или менее сохраняет \"World\" как "
"главный игровой узел."

msgid ""
"Any GUI would need to also be a singleton; be a transitory part of the "
"\"World\"; or be manually added as a direct child of the root. Otherwise, "
"the GUI nodes would also delete themselves during scene transitions."
msgstr ""
"Любой графический интерфейс также должен быть одноэлементным; быть "
"преходящей частью \"World\"; или быть добавленным вручную как прямой потомок "
"корня. В противном случае узлы GUI также удалялись бы при переходе между "
"сценами."

msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`Autoloads versus regular nodes "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"Если у вас есть системы, которые изменяют данные других систем, следует "
"определять их как свои собственные сценарии или сцены, а не помещать их "
"автозагрузку. Дополнительные сведения о причинах см. в документации :ref:"
"`Автозагрузка против внутренних узлов <doc_autoloads_versus_internal_nodes>`."

msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"Каждая подсистема в игре должна иметь свой собственный раздел в SceneTree "
"(дерево сцены). Отношения родитель-потомок следует использовать только в тех "
"случаях, когда узлы фактически являются элементами своих родителей. Означает "
"ли удаление родителя разумно, что нужно удалить и детей? Если нет, то он "
"должен иметь свое собственное место в иерархии в качестве родного брата или "
"другого родственника."

msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"В некоторых случаях требуется, чтобы эти отдельные узлы *также* "
"располагались относительно друг друга. Для этой цели можно использовать "
"узлы :ref:`RemoteTransform <class_RemoteTransform>` / :ref:"
"`RemoteTransform2D <class_RemoteTransform2D>`. Они позволят целевому узлу "
"условно наследовать выбранные элементы преобразования из удалённого узла. "
"Чтобы назначить ``цель`` :ref:`NodePath <class_NodePath>`, используйте одно "
"из следующего:"

msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr ""
"Надёжная третья сторона, вероятно, родительский узел, для посредничества при "
"назначении."

msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"Группа, чтобы легко получить ссылку на желаемый узел (при условии, что когда-"
"либо будет только одна из целей)."

msgid ""
"When should one do this? Well, this is subjective. The dilemma arises when "
"one must micro-manage when a node must move around the SceneTree to preserve "
"itself. For example..."
msgstr ""
"Когда нужно это делать? Ну это субъективно. Дилемма возникает, когда нужно "
"микроуправление, когда узел должен перемещаться по дереву сцены, чтобы "
"сохранить себя. Например..."

msgid "Add a \"player\" node to a \"room\"."
msgstr "Добавьте узел \"player\" в \"room\"."

msgid "Need to change rooms, so one must delete the current room."
msgstr ""
"Необходимо изменить комнаты, поэтому необходимо удалить текущую комнату."

msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr ""
"Прежде чем комнату можно будет удалить, нужно сохранить и/или переместить "
"игрока."

msgid "Is memory a concern?"
msgstr "Память - это проблема?"

msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"Если нет, можно просто создать две комнаты, переместить игрока и удалить "
"старую. Нет проблем."

msgid "If so, one will need to..."
msgstr "Если да, то нужно..."

msgid "Move the player somewhere else in the tree."
msgstr "Переместите игрока в другое место в дереве."

msgid "Delete the room."
msgstr "Удалить комнату."

msgid "Instantiate and add the new room."
msgstr "Создать и добавить новую комнату."

msgid "Re-add the player."
msgstr "Повторно добавьте игрока."

msgid ""
"The issue is that the player here is a \"special case\"; one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"Проблема в том, что игрок здесь является \"особым случаем\"; тот, где "
"разработчики должны *знать*, что им нужно обращаться с игроком таким образом "
"для проекта. Таким образом, единственный способ надёжно поделиться этой "
"информацией в команде - это *задокументировать* её. Однако хранить детали "
"реализации в документации опасно. Это бремя обслуживания затрудняет "
"читаемость кода и без надобности раздувает интеллектуальное содержание "
"проекта."

msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This results in:"
msgstr ""
"В более сложной игре с более крупными ассетами может быть лучшей идеей "
"просто полностью оставить игрока где-нибудь в другом месте в дереве сцены. "
"Это приводит к:"

msgid "More consistency."
msgstr "Большей согласованности."

msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr ""
"Нет \"особых случаев\", которые нужно где-то документировать и поддерживать."

msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr "Нет возможности допустить ошибку, так как эти детали не учитываются."

msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"Напротив, если кому-то когда-либо понадобится дочерний узел, который *не* "
"наследует преобразование своего родителя, у него есть следующие варианты:"

msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"**Декларативное** решение: поместите между ними :ref:`Node <class_Node>`. "
"Как узлы без преобразования, узлы не будут передавать такую информацию своим "
"потомкам."

msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""
"**Императивное** решение: используйте сеттер ``set_as_toplevel`` для узла :"
"ref:`CanvasItem <class_CanvasItem_method_set_as_toplevel>` или :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel> `. Это заставит узел игнорировать "
"унаследованное преобразование."

msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"При создании сетевой игры имейте в виду, какие узлы и системы игрового "
"процесса относятся ко всем игрокам, а не только к авторитетному серверу. "
"Например, не всем пользователям нужно иметь копию логики "
"\"PlayerController\" каждого игрока. Вместо этого им нужны только свои. "
"Таким образом, их хранение в отдельной ветке от \"world\" может помочь "
"упростить управление игровыми подключениями и т.п."

msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Are the nodes dependent on their parent's "
"existence? If not, then they can thrive all by themselves somewhere else. If "
"they are dependent, then it stands to reason that they should be children of "
"that parent (and likely part of that parent's scene if they aren't already)."
msgstr ""
"Ключ к организации сцены - рассматривать дерево сцены в реляционных "
"терминах, а не в пространственных терминах. Зависимы ли узлы от "
"существования их родителей? Если нет, то они могут развиваться сами по себе "
"где-нибудь ещё. Если они зависимы, то логично предположить, что они должны "
"быть потомками этого родителя (и, вероятно, частью сцены этого родителя, "
"если они ещё не являются таковыми)."

msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"Означает ли это, что сами узлы являются компонентами? Конечно, нет. Деревья "
"узлов Godot формируют отношения агрегирования, а не композиции. Но несмотря "
"на то, что у вас по прежнему есть возможность перемещать узлы, лучше всего, "
"когда такие перемещения, по умолчанию, не нужны."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
