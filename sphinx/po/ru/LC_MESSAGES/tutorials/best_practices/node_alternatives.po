# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Когда и как избежать использования узлов для всего"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Узлы дёшевы в производстве, но даже они имеют свои пределы. В проекте могут "
"быть десятки тысяч узлов, которые всё делают. Однако чем сложнее их "
"поведение, тем большее напряжение они вносят в работу проекта."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot предоставляет более лёгкие объекты для создания API, которые "
"используют узлы. Обязательно помните об этом как о вариантах при разработке "
"того, как вы хотите построить функции своего проекта."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`: Максимальный лёгкий объект, исходный объект "
"должен использовать ручное управление памятью. С учётом сказанного, нетрудно "
"создать свои собственные структуры данных, даже структуры узлов, которые "
"также легче, чем класс :ref:`Node <class_Node>`."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Пример:** Смотрите узел :ref:`Tree <class_Tree>`. Он поддерживает высокий "
"уровень настройки для таблицы содержимого с произвольным количеством строк и "
"столбцов. Данные, которые он использует для создания своей визуализации, на "
"самом деле представляют собой дерево объектов :ref:`TreeItem "
"<class_TreeItem>`."

#, fuzzy
msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Преимущества:** Упрощение API для объектов с меньшей областью видимости "
"помогает улучшить его доступность, сократить время итерации. Вместо того, "
"чтобы работать со всей библиотекой узла, создаётся сокращенный набор "
"объектов, из которых узел может генерировать соответствующие подузлы и "
"управлять ими."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"С ними нужно быть осторожным. Можно сохранить объект в переменной, но эти "
"ссылки могут стать недействительными без предупреждения. Например, если "
"создатель объекта решит удалить его из ниоткуда, это вызовет состояние "
"ошибки при следующем доступе к нему."

msgid ""
":ref:`Reference <class_Reference>`: Only a little more complex than Object. "
"They track references to themselves, only deleting loaded memory when no "
"further references to themselves exist. These are useful in the majority of "
"cases where one needs data in a custom class."
msgstr ""
":ref:`Reference <class_Reference>`: Немного сложнее, чем Object. Они "
"отслеживают ссылки на самих себя, удаляя загруженную память только в том "
"случае, если больше не существует ссылок на себя. Они полезны в большинстве "
"случаев, когда нужны данные в настраиваемом классе."

msgid ""
"**Example:** See the :ref:`File <class_File>` object. It functions just like "
"a regular Object except that one need not delete it themselves."
msgstr ""
"**Пример:** Смотрите объект :ref:`File <class_File>`. Он работает так же, "
"как обычный объект, за исключением того, что его не нужно удалять."

msgid "**Advantages:** same as the Object."
msgstr "**Преимущества:** такие же, как и у объекта."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than Reference. "
"They have the innate ability to serialize/deserialize (i.e. save and load) "
"their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: Немного сложнее, чем Reference. У них есть "
"врожденная способность сериализовать/десериализовать (т.е. сохранять и "
"загружать) свойства своих объектов в/из файлов ресурсов Godot."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**Пример:** Scripts, PackedScene (для файлов сцены) и другие типы, например "
"каждый из классов :ref:`AudioEffect <class_AudioEffect>`. Каждый из них "
"может быть сохранён и загружен, поэтому они происходят из Resource."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/Reference, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Преимущества:** Многое :ref:`уже было сказано <doc_resources>` о "
"преимуществах :ref:`Resource <class_Resource>`перед традиционными методами "
"хранения данных. Однако в контексте использования ресурсов перед узлами их "
"главное преимущество заключается в совместимости с Inspector. Хотя они почти "
"такие же лёгкие, как Object/Reference, они всё же могут отображать и "
"экспортировать свойства в Inspector. Это позволяет им выполнять задачу, во "
"многом схожую с подузлами с точки зрения удобства использования, но также "
"повышает производительность, если кто-то планирует иметь много таких "
"ресурсов/узлов в своих сценах."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
