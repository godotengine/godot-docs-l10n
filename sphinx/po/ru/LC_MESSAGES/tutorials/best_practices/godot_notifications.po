# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Уведомления Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Каждый объект в Godot реализует метод :ref:`_notification "
"<class_Object_method__notification>`. Его цель - позволить объекту "
"реагировать на различные обратные вызовы на уровне движка, которые могут "
"иметь к нему отношение. Например, если движок сообщает :ref:`CanvasItem "
"<class_CanvasItem>` \"draw\" (рисовать), он вызовет "
"``_notification(NOTIFICATION_DRAW)``."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Некоторые из этих уведомлений, например рисование (draw), полезно "
"переопределить в скриптах. Настолько, что Godot предоставляет многим из них "
"специальные функции:"

msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr ""
"Пользователи могут *не* осознавать, что уведомления существуют не только для "
"Node (узлов), но и для других типов:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Объект::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: обратный вызов, "
"который срабатывает при инициализации объекта. Не доступно для скриптов."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: обратный вызов, который "
"срабатывает до того, как движок удалит Объект, т.е. 'деструктор'."

msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: обратный вызов, "
"который срабатывает, когда мышь входит в окно операционной системы, "
"отображающее игровой контент."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"И многие обратные вызовы, которые *действительно* существуют в Nodes "
"(узлах), не имеют специальных методов, но по-прежнему весьма полезны."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: обратный вызов, который "
"срабатывает при добавлении дочернего узла к другому узлу."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: обратный вызов, который "
"срабатывает в любой момент, когда удаляется дочерний узел из другого узла."

msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: обратный вызов, который "
"срабатывает после того, как узел Popup завершает любой метод ``popup*``. "
"Обратите внимание на отличие от его сигнала ``about_to_show``, который "
"срабатывает *перед* его появлением."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr ""
"Доступ ко всем этим настраиваемым уведомлениям можно получить с помощью "
"универсального метода ``_notification``."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Методы в документации, помеченные как \"виртуальные\" (virtual), также "
"должны быть переопределены скриптами."

msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"Классическим примером является метод :ref:`_init "
"<class_Object_method__init>` в Object. Хотя у него нет эквивалента "
"``NOTIFICATION_*``, движок по-прежнему вызывает метод. Большинство языков "
"(кроме C#) полагаются на него, как на конструктор."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Так в какой же ситуации следует использовать каждое из этих уведомлений или "
"виртуальные функции?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "\"_process\" против \"_physics_process\" против \"\\*_input\""

msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"Используйте ``_process``, когда вам нужна разница между кадрами, зависящая "
"от частоты кадров. Если код, обновляющий данные объекта, должен обновляться "
"как можно чаще, это правильное место. Здесь часто выполняются повторяющиеся "
"логические проверки и кэширование данных, но все сводится к частоте, с "
"которой нужно обновлять оценки. Если им не нужно выполнять каждый кадр, то "
"другой вариант - реализация цикла Timer-yield-timeout."

msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Используйте ``_physics_process``, когда вам нужна разница во времени между "
"кадрами, не зависящая от частоты кадров. Если код требует постоянных "
"обновлений с течением времени, независимо от того, насколько быстро или "
"медленно идёт время, это правильное место. Здесь должны выполняться "
"повторяющиеся кинематические операции и операции преобразования объектов."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"Хотя это возможно, для достижения наилучшей производительности следует "
"избегать проверки ввода во время этих обратных вызовов. ``_process`` и "
"``_physics_process`` будут запускаться при каждой возможности (по умолчанию "
"они \"не отдыхают\"»). Напротив, обратные вызовы ``*_input`` будут "
"запускаться только в тех кадрах, в которых движок фактически обнаружил ввод."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"Точно так же можно проверить действия ввода в обратных вызовах ввода. Если "
"кто-то хочет использовать дельта-время, его можно при необходимости получить "
"из связанных методов дельта-времени."

msgid "_init vs. initialization vs. export"
msgstr "*_init* против *initialization* против *export*"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"Если скрипт инициализирует собственное поддерево узла без сцены, этот код "
"должен выполняться здесь. Здесь также должны выполняться другие свойства или "
"независимые от SceneTree инициализации. Это срабатывает до ``_ready`` или "
"``_enter_tree``, но после того, как скрипт создаст и инициализирует свои "
"свойства."

msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr ""
"Скрипты имеют три типа присвоения свойств, которые могут происходить во "
"время создания экземпляра:"

msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr ""
"При создании экземпляра сцены, значения свойств будут установлены в "
"следующей последовательности:"

msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**Присвоение начального значения:** при создании экземпляра будет назначено "
"либо значение инициализации, либо значение присваивания инициализации. "
"Инициализация присваивания имеет приоритет над инициализацией значений."

msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**Присвоение экспортируемого значения:** При создании экземпляра из сцены, а "
"не из скрипта, Godot назначит экспортируемое значение для замены начального "
"значения, определённого в сценарии."

msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"В результате создание экземпляра сценария вместо сцены повлияет как на "
"инициализацию, *так и на* количество вызовов установщика механизмом."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "*_ready* против *_enter_tree* против *NOTIFICATION_PARENTED*"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"При создании экземпляра сцены, связанной с первой выполненной сценой, Godot "
"будет создавать экземпляры узлов вниз по дереву (выполняя вызовы ``_init``) "
"и строить дерево, идущее вниз от корня. Это вызывает каскадирование вызовов "
"``_enter_tree`` по дереву. Когда дерево готово, листовые узлы вызывают "
"``_ready``. Узел вызовет этот метод, как только все дочерние узлы закончат "
"свои вызовы. Затем это вызывает обратный каскад, возвращающийся к корню "
"дерева."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree`` and ``_ready`` calls occur."
msgstr ""
"При создании скрипта или автономной сцены узлы не добавляются в SceneTree "
"при создании, поэтому обратные вызовы ``_enter_tree`` не запускаются. Вместо "
"этого выполняются только вызовы ``_init`` и последующие вызовы ``_ready``."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Если нужно инициировать поведение, которое возникает в качестве родительских "
"узлов для другого, независимо от того, происходит ли оно как часть "
"основной / активной сцены или нет, можно использовать уведомление :ref:"
"`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>`. Например, вот "
"фрагмент, который без сбоев соединяет метод узла с настраиваемым сигналом на "
"родительском узле. Полезно для узлов, ориентированных на данные, которые "
"можно создать во время выполнения."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
