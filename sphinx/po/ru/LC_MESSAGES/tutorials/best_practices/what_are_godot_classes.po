# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Applying object-oriented principles in Godot"
msgstr "Применение объектно-ориентированного подхода в Godot"

msgid ""
"The engine offers two main ways to create reusable objects: scripts and "
"scenes. Neither of these technically define classes under the hood."
msgstr ""
"Движок предлагает два основных способа создания объектов многократного "
"использования: сценарии и сцены. Ни один из них технически не определяет "
"внутренние классы."

msgid ""
"Still, many best practices using Godot involve applying object-oriented "
"programming principles to the scripts and scenes that compose your game. "
"That is why it's useful to understand how we can think of them as classes."
msgstr ""
"Тем не менее, многие передовые практики использования Godot включают "
"применение принципов объектно-ориентированного программирования к сценариям "
"и сценам, из которых состоит ваша игра. Вот почему полезно понять, как мы "
"можем думать о них как о классах."

msgid ""
"This guide briefly explains how scripts and scenes work in the engine's core "
"to help you understand how they work under the hood."
msgstr ""
"В этом руководстве кратко объясняется, как скрипты и сцены работают в ядре "
"движка, чтобы помочь вам понять, как они работают изнутри."

msgid "How scripts work in the engine"
msgstr "Работа скриптов в движке"

msgid ""
"The engine provides built-in classes like :ref:`Node <class_Node>`. You can "
"extend those to create derived types using a script."
msgstr ""
"Движок предоставляет встроенные классы, такие как :ref:`Node <class_Node>`. "
"Их можно расширить для создания производных типов с помощью сценария."

msgid ""
"These scripts are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Эти скрипты технически не являются классами. Вместо этого они представляют "
"собой ресурсы, которые сообщают движку последовательность инициализаций для "
"выполнения в одном из встроенных классов."

msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Во внутренних классах Godot есть методы, которые регистрируют данные класса "
"с помощью :ref:`ClassDB <class_ClassDB>`. Эта база данных обеспечивает "
"доступ к информации о классе во время выполнения. ``ClassDB`` содержит "
"информацию о классах типа:"

msgid "Properties."
msgstr "Свойства."

msgid "Methods."
msgstr "Методы."

msgid "Constants."
msgstr "Константы."

msgid "Signals."
msgstr "Сигналы."

msgid ""
"This ``ClassDB`` is what objects check against when performing an operation "
"like accessing a property or calling a method. It checks the database's "
"records and the object's base types' records to see if the object supports "
"the operation."
msgstr ""
"``ClassDB`` - это то, что объекты проверяют при выполнении такой операции, "
"как доступ к свойству или вызов метода. ``ClassDB`` проверяет записи базы "
"данных и записи базовых типов объекта, чтобы узнать, поддерживает ли объект "
"операцию."

msgid ""
"Attaching a :ref:`Script <class_Script>` to your object extends the methods, "
"properties, and signals available from the ``ClassDB``."
msgstr ""
"Присоединение скрипта к вашему объекту расширяет методы, свойства и сигналы, "
"доступные из ``ClassDB``."

msgid ""
"Even scripts that don't use the ``extends`` keyword implicitly inherit from "
"the engine's base :ref:`Reference <class_Reference>` class. As a result, you "
"can instantiate scripts without the ``extends`` keyword from code. Since "
"they extend ``Reference`` though, you cannot attach them to a :ref:`Node "
"<class_Node>`."
msgstr ""
"Даже скрипты, которые не наследуются от встроенного типа, то есть скрипты, "
"которые не начинаются с ключевого слова ``extends``, неявно наследуются от "
"базового класса движка :ref:`Reference <class_Reference>`. В результате вы "
"можете писать сценарии без ключевого слова ``extends``. Поскольку они "
"расширяют ``Reference``, вы не можете прикрепить их к :ref:`Node "
"<class_Node>`."

msgid "Scenes"
msgstr "Сцены"

msgid ""
"The behavior of scenes has many similarities to classes, so it can make "
"sense to think of a scene as a class. Scenes are reusable, instantiable, and "
"inheritable groups of nodes. Creating a scene is similar to having a script "
"that creates nodes and adds them as children using ``add_child()``."
msgstr ""
"Поведение сцен во многом похоже на классы, поэтому имеет смысл рассматривать "
"сцену как класс. Сцены - это многократно используемые, инстанцируемые и "
"наследуемые группы узлов. Создание сцены аналогично созданию сценария, "
"который создает узлы и добавляет их как дочерние элементы с помощью "
"``add_child()``."

msgid ""
"We often pair a scene with a scripted root node that makes use of the "
"scene's nodes. As such, the scene is often an extension of the script's "
"declarative code."
msgstr ""
"Почему все это важно для организации сцены? Потому что сцены *являются* "
"объектами. Вы обычно объединяете в пару сцену и корневой сценарный "
"(скриптовый) узел, что позволяет использовать вложенные узлы. Таким образом, "
"сцена часто является расширением сценария."

msgid "The content of a scene helps to define:"
msgstr "Содержание сцены позволяет определить:"

msgid "What nodes are available to the script"
msgstr "Какие узлы доступны сценарию (скрипту)"

msgid "How they are organized"
msgstr "Как они организованы"

msgid "How they are initialized"
msgstr "Как они инициализированы"

msgid "What signal connections they have with each other"
msgstr "Какие сигнальные связи они имеют друг с другом"

msgid ""
"Why is any of this important to scene organization? Because instances of "
"scenes *are* objects. As a result, many object-oriented principles that "
"apply to written code also apply to scenes: single responsibility, "
"encapsulation, and others."
msgstr ""
"Почему все это важно для организации сцены? Потому что экземпляры сцен "
"*являются* объектами. В результате, многие объектно-ориентированные "
"принципы, применимые к написанному коду, также применимы и к сценам: принцип "
"единственной ответственности (SRP), инкапсуляция и другие."

msgid ""
"The scene is *always an extension of the script attached to its root node*, "
"so you can interpret it as part of a class."
msgstr ""
"Сцена *всегда является расширением сценария, прикрепленного к его корневому "
"узлу*, поэтому вы можете представлять ее как часть класса."

msgid ""
"Most of the techniques explained in this best practices series build on this "
"point."
msgstr ""
"Большинство методов, описанных в этой серии best practices, основаны на этом."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
