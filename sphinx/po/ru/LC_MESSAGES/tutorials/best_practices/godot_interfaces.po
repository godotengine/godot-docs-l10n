# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot interfaces"
msgstr "Интерфейсы Godot"

msgid ""
"Often one needs scripts that rely on other objects for features. There are 2 "
"parts to this process:"
msgstr ""
"Часто требуются скрипты, которые полагаются на другие объекты для работы с "
"функциями. Этот процесс состоит из 2-х частей:"

msgid "Acquiring a reference to the object that presumably has the features."
msgstr ""
"Получение ссылки на объект, который предположительно имеет характеристики."

msgid "Accessing the data or logic from the object."
msgstr "Доступ к данным или логике из объекта."

msgid "The rest of this tutorial outlines the various ways of doing all this."
msgstr ""
"В оставшейся части этого руководства описаны различные способы сделать всё "
"это."

#, fuzzy
msgid "Acquiring object references"
msgstr "Ссылка на атрибут"

msgid ""
"For all :ref:`Object <class_Object>`\\s, the most basic way of referencing "
"them is to get a reference to an existing object from another acquired "
"instance."
msgstr ""
"Для всех :ref:`Object <class_Object>`, самый простой способ ссылки на них - "
"это получить ссылку на существующий объект из другого полученного экземпляра."

msgid ""
"The same principle applies for :ref:`Reference <class_Reference>` objects. "
"While users often access :ref:`Node <class_Node>` and :ref:`Resource "
"<class_Resource>` this way, alternative measures are available."
msgstr ""
"Тот же принцип применяется к объектам :ref:`Reference <class_Reference>`. "
"Хотя пользователи часто обращаются к :ref:`Node <class_Node>` и :ref:"
"`Resource <class_Resource>` таким образом, доступны альтернативные меры."

msgid ""
"Instead of property or method access, one can get Resources by load access."
msgstr ""
"Вместо доступа к свойствам или методам, можно получить доступ к ресурсам по "
"загрузке."

msgid "Note the following:"
msgstr "Обратите внимание на следующее:"

msgid "There are many ways in which a language can load such resources."
msgstr ""
"Существует множество способов, которыми язык может загружать такие ресурсы."

msgid ""
"When designing how objects will access data, don't forget that one can pass "
"resources around as references as well."
msgstr ""
"При проектировании того, как объекты будут получать доступ к данным, не "
"забывайте, что можно передавать ресурсы и в виде ссылок."

msgid ""
"Keep in mind that loading a resource fetches the cached resource instance "
"maintained by the engine. To get a new object, one must :ref:`duplicate "
"<class_Resource_method_duplicate>` an existing reference or instantiate one "
"from scratch with ``new()``."
msgstr ""
"Имейте в виду, что загрузка ресурса извлекает кэшированный экземпляр "
"ресурса, обслуживаемый движком. Чтобы получить новый объект, необходимо :ref:"
"`дублировать <class_Resource_method_duplicate>` существующую ссылку или "
"создать её экземпляр с нуля с помощью ``new()``."

msgid "Nodes likewise have an alternative access point: the SceneTree."
msgstr ""
"Узлы также имеют альтернативную точку доступа: Дерево cцены (SceneTree)."

msgid "Accessing data or logic from an object"
msgstr "Доступ к данным или логике из объекта"

msgid ""
"Godot's scripting API is duck-typed. This means that if a script executes an "
"operation, Godot doesn't validate that it supports the operation by "
"**type**. It instead checks that the object **implements** the individual "
"method."
msgstr ""
"Скриптовый API движка Godot является \"утиной типизацией\". Это означает, "
"что если скрипт выполняет операцию, Godot не проверяет, поддерживает ли он "
"операцию по **типу**. Вместо этого он проверяет, **реализует ли объект** "
"отдельный метод."

msgid ""
"For example, the :ref:`CanvasItem <class_CanvasItem>` class has a "
"``visible`` property. All properties exposed to the scripting API are in "
"fact a setter and getter pair bound to a name. If one tried to access :ref:"
"`CanvasItem.visible <class_CanvasItem_property_visible>`, then Godot would "
"do the following checks, in order:"
msgstr ""
"Например, класс :ref:`CanvasItem <class_CanvasItem>` имеет свойство "
"``visible`` (видимый). Все свойства, предоставляемые скриптовому API, на "
"самом деле являются парой установщика и получателя, привязанной к имени. "
"Если кто-то попытается получить доступ к :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, тогда Godot выполнит следующие "
"проверки в следующем порядке:"

msgid ""
"If the object has a script attached, it will attempt to set the property "
"through the script. This leaves open the opportunity for scripts to override "
"a property defined on a base object by overriding the setter method for the "
"property."
msgstr ""
"Если к объекту прикреплён сценарий, он попытается установить свойство через "
"сценарий. Это оставляет открытой возможность для сценариев переопределить "
"свойство, определённое для базового объекта, путем переопределения метода "
"установки для свойства."

msgid ""
"If the script does not have the property, it performs a HashMap lookup in "
"the ClassDB for the \"visible\" property against the CanvasItem class and "
"all of its inherited types. If found, it will call the bound setter or "
"getter. For more information about HashMaps, see the :ref:`data preferences "
"<doc_data_preferences>` docs."
msgstr ""
"Если у сценария нет свойства, он выполняет поиск HashMap в ClassDB для "
"«видимого» свойства для класса CanvasItem и всех его унаследованных типов. "
"Если он найден, он вызовет связанный сеттер или получатель. Дополнительную "
"информацию о HashMaps см. в документации о :ref:`настройке данных "
"<doc_data_preferences>`."

msgid ""
"If not found, it does an explicit check to see if the user wants to access "
"the \"script\" or \"meta\" properties."
msgstr ""
"Если не найдено, то производится явная проверка, хочет ли пользователь "
"получить доступ к свойствам \"скрипта\" или \"мета\"."

msgid ""
"If not, it checks for a ``_set``/``_get`` implementation (depending on type "
"of access) in the CanvasItem and its inherited types. These methods can "
"execute logic that gives the impression that the Object has a property. This "
"is also the case with the ``_get_property_list`` method."
msgstr ""
"Если нет, то проверяется реализация ``_set``/``_get`` (в зависимости от типа "
"доступа) в CanvasItem и его унаследованных типах. Эти методы могут выполнять "
"логику, создающую впечатление, что у Объекта есть свойство. Это также "
"относится и к методу ``_get_property_list``."

msgid ""
"Note that this happens even for non-legal symbol names such as in the case "
"of :ref:`TileSet <class_TileSet>`'s \"1/tile_name\" property. This refers to "
"the name of the tile with ID 1, i.e. :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."
msgstr ""
"Обратите внимание, что это происходит даже с недопустимыми именами символов, "
"например, в случае свойства :ref:`TileSet <class_TileSet>`\"1/tile_name\". "
"Это относится к имени плитки с ID 1, то есть :ref:`TileSet.tile_get_name(1) "
"<class_TileSet_method_tile_get_name>`."

msgid ""
"As a result, this duck-typed system can locate a property either in the "
"script, the object's class, or any class that object inherits, but only for "
"things which extend Object."
msgstr ""
"В результате эта система с утиной типизацией может найти свойство либо в "
"скрипте, либо в классе объекта, либо в любом классе, который наследует "
"объект, но только для вещей, которые расширяют Object."

msgid ""
"Godot provides a variety of options for performing runtime checks on these "
"accesses:"
msgstr ""
"Godot предоставляет различные возможности для выполнения проверки времени "
"выполнения этих обращений:"

msgid ""
"A duck-typed property access. These will property check (as described "
"above). If the operation isn't supported by the object, execution will halt."
msgstr ""
"Доступ к свойствам утиной типизации. Это будет проверка свойств (как описано "
"выше). Если операция не поддерживается объектом, выполнение будет "
"остановлено."

msgid ""
"A method check. In the case of :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, one can access the methods, "
"``set_visible`` and ``is_visible`` like any other method."
msgstr ""
"Проверка метода. В случае :ref:`CanvasItem.visible "
"<class_CanvasItem_property_visible>`, можно получить доступ к методам "
"``set_visible`` и ``is_visible``, как и к любому другому методу."

msgid ""
"Outsource the access to a :ref:`FuncRef <class_FuncRef>`. These may be "
"useful in cases where one needs the max level of freedom from dependencies. "
"In this case, one relies on an external context to setup the method."
msgstr ""
"Внешний доступ к :ref:`FuncRef <class_FuncRef>`. Это может быть полезно в "
"тех случаях, когда нужен максимальный уровень свободы от зависимостей. В "
"этом случае для настройки метода необходимо использовать внешний контекст."

msgid ""
"These strategies contribute to Godot's flexible design. Between them, users "
"have a breadth of tools to meet their specific needs."
msgstr ""
"Эти стратегии способствуют гибкости дизайна Godot. Вместе с тем у "
"пользователей есть широкий спектр инструментов для удовлетворения их "
"конкретных потребностей."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
