# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "Механизм Pull request"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Так называемый \"поток работ PR\" (или \"рабочий процесс PR\"), применяемый "
"в разработке Godot, является общепринятым для проектов, использующих Git, и "
"должен быть знаком опытным пользователям и разработчикам свободного ПО. "
"Основная идея заключается в том, что только небольшое число **коммитов** "
"(commit, дословно - \"совершать\", \"фиксировать\"; подразумевается "
"сохранение изменений в коде) записывается непосредственно в главной ветке "
"исходного проекта. Вместо этого участники создают **форки** (fork, дословно "
"- \"вилка\"; фактически создаётся полная копия проекта, которую участник "
"может изменять по своему усмотрению), а затем используют интерфейс GitHub "
"для запроса на принятие изменений (pull request, дословно - \"запрос на "
"вытягивание\"; обычно используется англ. термин без перевода и "
"транслитерации) одной из веток их форка в какую-либо ветку **исходного** "
"(upstream, дословно - \"восходящий поток\") репозитория."

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"Созданный pull request (далее - **PR**) будет рассмотрен другими участниками "
"проекта, которые могут одобрить его, отклонить или, чаще всего, потребовать "
"внесения каких-либо изменений. После согласования PR принимается одним из "
"основных разработчиков, и его коммиты становятся частью целевой ветки "
"(обычно это ветка ``master``)."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"Далее будет рассмотрен пример, демонстрирующий типичный процесс работы с Git "
"и используемые в нём команды. Но сначала - краткий обзор организации Git-"
"репозитория Godot."

msgid "Git source repository"
msgstr "Исходный Git-репозиторий"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"`Репозиторий на GitHub <https://github.com/godotengine/godot>`_ представляет "
"собой `Git <https://git-scm.com>`_-хранилище кода со встроенной система "
"отслеживания ошибок и PR-системой."

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Если вы собираетесь участвовать в работе над документацией, её репозиторий "
"можно найти `здесь <https://github.com/godotengine/godot-docs>`_."

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Система управления версиями Git - это инструмент, используемый для "
"отслеживания последовательных изменений исходного кода; для эффективного "
"участия в разработке Godot настоятельно рекомендуется изучить основы "
"командной строки Git. Существует несколько графических интерфейсов для Git, "
"но они часто порождают вредные привычки в отношении работы с Git и PR, "
"поэтому мы рекомендуем не использовать их. В частности, не желательно "
"использовать онлайн-редактор GitHub для внесения изменений в код (это "
"допускается только для небольших исправлений или для работы с "
"документацией), поскольку он создаёт отдельные коммиты для каждого изменения "
"каждого файла, что быстро приводит к PR с нечитаемой историей Git (особенно "
"после рецензирования)."

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Первые разделы \"Книги\" Git'а - это хорошее введение в философию "
"инструмента и различные команды, которые необходимо освоить в повседневной "
"работе. Вы можете прочитать их онлайн на сайте `Git SCM <https://git-scm.com/"
"book/en/v2>`_. Вы также можете попробовать интерактивное руководство `GitHub "
"<https://try.github.io/>`__."

msgid "The branches on the Git repository are organized as follows:"
msgstr "Ветки Git-репозитория Godot организованы следующим образом:"

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"``master`` - это ветка, в которой происходит разработка следующей основной "
"версии. Она, как правило, нестабильна и не предназначена для использования в "
"разработке игр. Но именно сюда следует делать PR проводить в первую очередь."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"Стабильные ветки названы по имени их версии, например, ``3.1`` и ``2.1``. "
"Они используются для переноса исправлений и улучшений из ветки ``master`` в "
"текущий стабильный релиз (например, 3.1.2 или 2.1.6). Как правило, последняя "
"стабильная ветка поддерживается до следующей минорной версии (например, "
"ветка ``3.0`` поддерживалась до выхода Godot 3.1). Если вы хотите сделать PR "
"для поддерживаемой стабильной ветки, пожалуйста, сначала проверьте, "
"относятся ли ваши изменения также к ветке ``master``, и если да, сделайте PR "
"для ветки ``master`` в приоритете. Менеджеры релизов могут затем отбирать "
"исправления для стабильной ветки, если это уместно."

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""
"Иногда создаются ветки для разработки отдельных функций - обычно они "
"сливаются с веткой ``master`` через какое-то время."

msgid "Forking and cloning"
msgstr "Создание форка и клонирование"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"Первый шаг - это создание форка репозитория `godotengine/godot <https://"
"github.com/godotengine/godot>`_ на GitHub. Для этого вам потребуется создать "
"учётную запись GitHub (если у вас её ещё нет) и войти в систему. В правом "
"верхнем углу страницы вы увидите кнопку \"Fork\", как показано ниже:"

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Нажмите на неё, и через небольшой промежуток времени вас перенаправит на "
"только что созданный форк репозитория Godot с вашим именем пользователя "
"GitHub в качестве пространства имён:"

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"Затем вы можете клонировать свой форк, то есть создать локальную копию "
"**удалённого** репозитория (в терминологии Git - remote origin). Если вы ещё "
"этого не сделали, установите Git (пользователи Windows или macOS могут "
"скачать его с сайта `Git SCM <https://git-scm.com/downloads>`_, пользователи "
"Linux могут воспользоваться менеджером пакетов)."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Если вы используете Windows, то вам понадобится Git Bash для ввода команд. "
"Пользователи macOS и Linux могут использовать системные терминалы."

msgid "To clone your fork from GitHub, use the following command:"
msgstr "Чтобы клонировать ваш форк из GitHub, используйте следующую команду:"

msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"В подобных примерах символ \"$\" - приглашение командной строки, типичное "
"для UNIX-оболочек. Он не является частью команды и вводить его не нужно."

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Через некоторое время в вашей текущей директории должен появиться каталог "
"``godot``. Переместитесь в него с помощью команды ``cd``:"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr "Для начала настройте ссылку на исходный репозиторий:"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"Это создаст ссылку с именем ``upstream``, указывающую на исходный "
"репозиторий ``godotengine/godot``. Она пригодится, когда вы захотите "
"добавить к себе новые коммиты из его ветки ``master``, чтобы обновить свой "
"форк. Также у вас есть ещё одна ссылка, с именем ``origin``, которая "
"указывает на ваш форк (``USERNAME/godot``)."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Описанные выше шаги вам нужно выполнить только один раз и повторять их не "
"придётся, если вы не удалите локальную папку ``godot`` (однако, если хотите, "
"вы можете перемещать её - соответствующие метаданные скрыты в подкаталоге ``."
"git``)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"*Brаnch it, pull it, code it, stage it, commit, push it, rebase it... "
"technolоgic.*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Такой негативный взгляд, стилизованный под песню Technologic группы Daft "
"Punk, показывает общее представление новичков о рабочем процессе в Git: "
"множество странных команд, которые нужно выучить или использовать "
"копированием/вставкой в надежде, что они будут работать так, как ожидалось. "
"На самом деле это неплохой способ обучения, если вы любопытны и не "
"стесняетесь задавать вопросы поисковым системам, но на всякий случай мы "
"собрали здесь основные команды, которые вам понадобятся при работе в Git."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's project manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"Далее, в качестве примера, мы предположим, что вы хотите реализовать новую "
"функцию менеджера проектов Godot, изменив для этого файл ``editor/"
"project_manager.cpp``."

msgid "Branching"
msgstr "Ветвление"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"По умолчанию после ``git clone`` ваш локальный репозиторий будет переключён "
"на ветку ``master``. Для разработки новой функции желательно создать новую "
"ветку:"

msgid "This command is equivalent:"
msgstr "Вместо этих двух команд можно использовать одну:"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "Если вы захотите вернуться к ветке ``master``, используйте:"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Список веток в репозитории можно просмотреть командной ``git branch``, при "
"этом ветка, в которой вы сейчас находитесь, будет отмечена звёздочкой:"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"Не забывайте переключаться на ветку ``master`` перед созданием новой, так "
"как именно текущая ветка используется для создаваемой в качестве основы. В "
"качестве альтернативы вы можете указать имя ветки, которую необходимо "
"принять за основу, после имени создаваемой ветки:"

msgid "Updating your branch"
msgstr "Обновление вашей ветки"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Это вряд ли понадобится сразу после того, как вы выполните описанные выше "
"действия. Однако позже, в процессе работы или непосредственно перед PR, вы "
"можете заметить, что ветка ``master`` вашего форка на несколько коммитов "
"отстаёт от ветки ``master`` исходного репозитория: это коммиты от других "
"участников, чьи запросы были приняты за прошедшее время."

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Чтобы гарантировать отсутствие конфликтов между разрабатываемой функцией и "
"веткой ``master`` исходного репозитория, вам необходимо обновить свою ветку, "
"включив в неё новые коммиты."

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"Аргумент ``--rebase`` гарантирует, что любые локальные коммиты, которые вы "
"сделали, будут повторно применены поверх принимаемых изменений, что обычно и "
"требуется в PR-процессе. Таким образом, когда вы отправляете PR, ваши "
"собственные коммиты будут единственным отличием от текущего состояния "
"исходной ветки ``master``."

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"Во время слияния могут возникнуть конфликты, если код, который вы изменяли, "
"за это время был изменён и в исходном репозитории. В таких случаях Git будет "
"приостанавливать процесс и предлагать вам решить конфликт. Вы можете сделать "
"это с помощью любого текстового редактора, затем добавить изменения в "
"процесс (позже об этом будет сказано подробнее) и продолжить обновление с "
"помощью команды ``git rebase --continue``. Повторяйте эту операцию, если "
"последующие коммиты также будут иметь конфликты, пока процесс обновления не "
"завершится."

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"Если во время обновления вы перестали понимать, что происходит, и "
"запаниковали (не волнуйтесь, мы все делаем так первые несколько раз), вы "
"можете прервать процесс с помощью команды ``git rebase --abort``. После "
"этого вы вернётесь в исходное состояние своей ветки (до вызова ``git pull --"
"rebase``)."

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"Если вы опустите аргумент ``--rebase``, то у вас получится коммит слияния "
"(merge в терминологии Git), который собирает историю из двух разных веток в "
"одно целое. Если при этом возникнут какие-либо конфликты, они все будут "
"разрешены в пределах этого коммита."

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"Хотя это допустимое действие и поведение ``git pull`` по умолчанию, оно не "
"одобряется в нашем сообществе. Мы используем слияние только при принятии PR "
"в исходный репозиторий."

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"Согласно нашей философии, PR должен представлять собой заключительный этап "
"изменений, внесённых в кодовую базу, и нас не интересуют ошибки и "
"исправления, которые, возможно, были сделаны на промежуточных этапах, до "
"слияния. Git даёт нам отличные инструменты, чтобы \"переписать историю\", "
"сделать вид, что всё получилось правильно с первого раза, и мы с "
"удовольствием используем это, чтобы гарантировать, что изменения будет "
"читаемы и понятны ещё долгое время после того, как они были внесены."

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"Если вы всё же создали коммит слияния без использования ``--rebase`` или "
"внесли какие-либо другие изменения, которые привели к нежелательной истории, "
"лучшим вариантом будет воспользоваться интерактивным режимом команды rebase. "
"Подробные инструкции смотрите в :ref:`соответствующем разделе "
"<doc_pr_workflow_rebase>`."

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"Если в какой-то момент вы захотите откатить вашу локальную ветку до "
"определённого коммита или до какой-либо ветки удалённого репозитория, то вы "
"можете сделать это с помощью команд ``git reset --hard <commit ID>`` или "
"``git reset --hard <remote>/<branch>`` (например, ``git reset --hard "
"upstream/master``)."

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"Имейте в виду, что такой сброс приведёт к удалению любых изменений в этой "
"ветке. Если вы когда-нибудь сделаете коммит по ошибке - используйте команду "
"``git reflog``, чтобы найти ID предыдущего коммита, и подставьте его в "
"качестве аргумента в ``git reset --hard`` для возврата в это состояние."

msgid "Making changes"
msgstr "Внесение изменений"

msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"Затем вы должны внести изменения в файл ``editor/project_manager.cpp`` "
"нашего примера с помощью вашей обычной среды разработки (текстовый редактор, "
"IDE и т.д.)."

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"Однако по умолчанию изменённый файл не **проиндексирован**. Индексация "
"позволяет разграничить изменения, которые будут включены в следующий коммит, "
"и изменения, которые следует игнорировать. Чтобы перенести изменённый файл "
"из вашего рабочего каталога в репозиторий Git, вам нужно проиндексировать "
"его с помощью команды ``git add``, а затем зафиксировать изменения с помощью "
"команды ``git commit``."

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""
"Существуют различные команды, которые необходимо знать для просмотра текущей "
"работы, до постановки, во время постановки и после фиксации."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""
"``git diff`` покажет вам текущие неустановленные изменения, то есть различия "
"между вашей рабочей директорией и областью постановки."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""
"``git checkout -- <files>`` отменит неустановленные изменения в указанных "
"файлах."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""
"''git add <files>'' будет *поэтапно* вносить изменения в перечисленные файлы."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` покажет текущие стадийные изменения, т.е. различия "
"между промежуточной областью и последней фиксацией."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr "``git reset HEAD <files>`` *отменит* изменения в перечисленных файлах."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr "``git status`` покажет, какие изменения проиндексированы, а какие нет."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` зафиксирует проиндексированные изменения, создав коммит; при "
"этом откроется текстовый редактор (вы можете задать предпочтительный "
"редактор в переменной окружения ``GIT_EDITOR`` или в параметре ``core."
"editor`` в настройках Git), чтобы вы могли оставить примечания в журнале "
"коммитов; вы также можете использовать ``git commit -m \"Cool commit log\"`` "
"для записи в журнал напрямую."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"``git commit --amend`` позволяет вам внести текущие проиндексированные (с "
"помощью ``git add``) изменения в предыдущий коммит; это может пригодится, "
"если вам нужно что-то исправить в предыдущем коммите (опечатку, "
"стилистическую или иную мелкую ошибку)."

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` покажет вам последние коммиты в текущей ветке; если вы делали "
"локальные коммиты, они будут наверху списка."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` покажет изменения, внесённые последним коммитом; также вы "
"можете указать в качестве аргумента хеш коммита, изменения которого хотите "
"увидеть."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"Это всё нужно запомнить! Не волнуйтесь, просто подглядывайте в эту "
"шпаргалку, когда вам будет нужно внести изменения, и учитесь на практике."

msgid "Here's how the shell history could look like on our example:"
msgstr "Вот так может выглядеть история командной строки в нашем примере:"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Это добавит к ветке ``better-project-manager`` два новых коммита, которых "
"нет в ветке ``master``. Однако эти изменения всё ещё являются локальными: ни "
"ваш удалённый форк, ни исходный репозиторий пока не знают о них."

msgid "Pushing changes to a remote"
msgstr "Отправка изменений на GitHub"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"Тут вам пригодится команда ``git push``. Git всегда выполняет коммит в "
"локальном репозитории (в отличие от Subversion, где коммит изменяет "
"удалённый репозиторий напрямую). Вам нужно вручную отправлять новые коммиты "
"в удалённый репозиторий, если вы хотите сделать их доступными для всех. Вот "
"синтаксис этой команды:"

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"Часть в квадратных скобках, задающую имя ветки в удалённом репозитории, "
"можно опустить, если вы хотите, чтобы удалённая ветка имела то же имя, что и "
"локальная; в нашем примере мы так и сделаем:"

msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""
"Git запросит у вас имя пользователя и пароль, после чего изменения в "
"указанной ветке будут отправлены на ваш удалённый репозиторий. Если вы "
"проверите страницу вашего форка на GitHub, то увидите новую ветку с "
"добавленными коммитами."

msgid "Issuing a pull request"
msgstr "Запрос на принятие изменений"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"После того как изменения будут загружены на GitHub, на странице репозитория "
"вы увидите строку \"This branch is 2 commits ahead of godotengine:"
"master\" (\"Эта ветка опережает godotengine:master на 2 коммита\"). Также "
"там может быть указано отставание на несколько коммитов, если ваша ветка не "
"была синхронизирована с веткой ``master`` исходного репозитория."

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"В этой строке есть ссылка \"Pull request\". Нажав на неё, вы откроете форму, "
"которая позволит вам отправить запрос на исправление изменений в репозитории "
"``godotengine/godot``. Там должны быть показаны два ваших коммита и написано "
"\"Able to merge\". Если нет (например, коммитов намного больше, или "
"говорится о конфликтах слияния), не создавайте PR, что-то пошло не так. "
"Зайдите в наш чат `Godot Contributors Chat <https://chat.godotengine.org/>`_ "
"и попросите поддержки :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"Используйте явное название для PR и поместите необходимые детали в область "
"комментариев. Вы можете перетащить скриншоты, GIF-файлы или заархивированные "
"проекты, если это уместно, чтобы продемонстрировать, что реализует ваша "
"работа. Нажмите \"Create a pull request\", и тадаа!"

msgid "Modifying a pull request"
msgstr "Изменение PR"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Пока ваш PR ещё не принят и рассматривается другими участниками, вам часто "
"придётся редактировать его - либо когда вас кто-то попросит внести те или "
"иные правки, либо когда вы сами обнаружите проблемы во время очередного "
"тестирования."

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"К счастью, вы можете изменить PR просто изменяя ветку, из которой он был "
"сделан. То есть вы можете сделать новый коммит в свою локальную ветку, "
"отправить изменения в ту же ветку удалённого репозитория, что и раньше - и "
"PR будет автоматически обновлён:"

msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"Однако имейте в виду, что в нашем рабочем процессе PR мы отдаём предпочтение "
"коммитам, которые переводят кодовую базу из одного функционального состояния "
"в другое функциональное состояние, без промежуточных коммитов, исправляющих "
"ошибки в вашем собственном коде или проблемы со стилем. В большинстве "
"случаев мы отдаём предпочтение одному коммиту в данном PR (если только нет "
"веской причины хранить изменения отдельно). Вместо того чтобы создавать "
"новый коммит, используйте ``git commit --amend`` для внесения изменений в "
"предыдущий коммит с вашими исправлениями. Тогда приведенный выше пример "
"станет:"

msgid "The interactive rebase"
msgstr "Интерактивный режим rebase"

msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request of your to *rebase* your branch to *squash* some or all of the "
"commits into one."
msgstr ""
"Если вы невнимательно следовали описанным выше инструкциям (или не знали о "
"нашем рабочем процессе и советах по использованию Git) и вместо одного "
"исправленного коммита создали несколько последовательных, рецензенты могут "
"попросить вас перенастроить вашу ветку так, чтобы все коммиты или только "
"часть из них была объединена в один."

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"Дело в том, что коммиты, сделанные поверх основного для исправления в нём "
"опечаток и ошибок, не имеют отношения к будущему читателю журнала изменений, "
"который просто хотел бы знать, что произошло в кодовой базе Godot или когда "
"и как данный файл был изменён в последний раз."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"Чтобы втиснуть эти посторонние коммиты в основной, нам придется *переписать "
"историю*. Верно, у нас есть такая возможность. Вы можете прочитать, что это "
"плохая практика, и это правда, когда речь идёт о ветках восходящего "
"репозитория. Но в своём форке вы можете делать всё, что хотите, и всё "
"разрешено для получения аккуратных PR :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"Для этого применяется интерактивный режим команды rebase: ``git rebase -i``. "
"В качестве аргумента используется ID коммита или имя ветки, что позволяет "
"вам редактировать все коммиты между указанной точкой и текущим состоянием "
"вашей рабочей ветки, называемым ``HEAD``."

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"Хотя вы можете присвоить любой ID коммита ``git rebase -i`` и просмотреть "
"всё, что между ними, наиболее распространенный и удобный рабочий процесс "
"включает ребазинг на восходящую ветку ``master``, что вы можете сделать с "
"помощью:"

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"Ссылаться на ветки в Git немного сложно из-за различия между удалёнными и "
"локальными ветками. Здесь ``Upstream/master`` (с символом \"/\") - это "
"локальная ветка, которая была извлечена из ветки ``master`` исходного "
"репозитория."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"Интерактивный режим rebase работает только с локальными ветками, поэтому "
"здесь важен символ \"/\". Так как исходный репозиторий часто изменяется, "
"ваша локальная ветка ``Upstream/master`` может оказаться устаревшей - во "
"избежание этого вам необходимо обновить её с помощью ``git fetch Upstream "
"master``. В отличие от команды ``git pull --rebase Upstream master``, "
"которая будет обновлять вашу текущую ветку, ``fetch`` обновит только ссылку "
"``Upstream/master`` (которая отличается от вашей локальной ветки "
"``master``... да, это сбивает с толку, но постепенно вы разберётесь и "
"привыкните)."

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"В результате откроется текстовый редактор (``vi`` по умолчанию, см. `Git "
"docs <https://git-scm.com/book/en/v2/Customizing-Git-Git-"
"Configuration#_core_editor>`_ для настройки вашего любимого редактора) с чем-"
"то, что может выглядеть следующим образом:"

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"Также редактор покажет инструкции относительно того, что вы можете делать с "
"этими коммитами. В частности, там будет написано, что \"pick\" нужен, чтобы "
"оставить коммит без изменений, а \"squash\" и \"fixup\" применяются для "
"слияния коммита с предыдущим. Разница между \"squash\" и \"fixup\" "
"заключается в том, что \"fixup\" при слиянии отбросит примечания текущего "
"коммита. Так как в нашем примере нет необходимости сохранять в журнале "
"коммитов фразу \"Fix a typo ...\", финальный текст будет следующий:"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"После сохранения и выхода из редактора произойдёт обновление. Второй коммит "
"будет объединён с первым, а ``git log`` и ``git show`` теперь должны "
"подтвердить, что у вас есть только один коммит, включающий в себя все "
"необходимые изменения."

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"Однако вы переписали историю только локально, и теперь ваши локальная и "
"удалённая ветки конфликтуют. Коммит 1b4aad7 в приведённом выше примере был "
"изменён, получив при этом новый хеш. Если вы теперь попытаетесь отправить "
"изменения в свой удаленный репозиторий, это вызовет ошибку:"

msgid ""
"This is a sane behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"На самом деле это нормально - обычно Git не позволяет отправлять изменения, "
"переопределяющие содержимое удалённого репозитория, чтобы вы случайно не "
"изменили историю других участников. Но поскольку в данном случае вы меняете "
"именно свою историю и делаете это осознанно, можно \"форсировать\" "
"выполнение команды:"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"Теперь Git просто заменит вашу удалённую ветку на обновлённую локальную "
"(поэтому используйте опцию ``--force`` с осторожностью, предварительно "
"проверяя отправляемые изменения с помощью ``git log``). Открытый из этой "
"ветки PR так же будет обновлён автоматически."

msgid "Deleting a Git branch"
msgstr "Удаление ветки в Git"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"После того как ваш PR будет принят и изменения окажутся в исходном "
"репозитории, есть ещё один пункт, который желательно выполнить: удалить "
"ветку, созданную для этого PR. Если вы этого не сделаете, технически это не "
"будет ошибкой, но поддерживать свой репозиторий в порядке и не захламлять "
"его - хорошая практика. Вам нужно будет сделать это дважды: для локального и "
"для удалённого репозиториев."

msgid "To delete our better project manager branch locally, use this command:"
msgstr ""
"Чтобы удалить локальную ветку ``better-project-manager``, используйте "
"следующую команду:"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"При необходимости удалить ветку до слияния вместо опции ``-d`` нужно "
"использовать ``-D``."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""
"После этого используйте следующую команду, чтобы удалить эту же ветку из "
"удалённого репозитория:"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""
"Также вы можете сделать это, используя интерфейс GitHub - соответствующая "
"кнопка должна появиться на странице PR, после того как он будет принят или "
"закрыт."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
