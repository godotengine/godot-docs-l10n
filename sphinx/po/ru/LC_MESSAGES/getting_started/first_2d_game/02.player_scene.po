# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Создание сцены игрока"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"С установленными настройками проекта, мы можем начать работу над персонажем, "
"управляемым игроком."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"Первая сцена будет определять объект ``Player``. Одним из преимуществ "
"создания отдельной сцены Player является то, что мы можем протестировать ее "
"отдельно, даже до того, как создадим другие части игры."

msgid "Node structure"
msgstr "Структура узла"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"Для начала нам нужно выбрать корневой узел для объекта игрока. Как правило, "
"корневой узел сцены должен отображать желаемую функциональность объекта - "
"*чем* объект является. Нажмите кнопку \"Другой узел\" (Other Node) и "
"добавьте узел :ref:`Area2D <class_Area2D>` в сцену."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot отобразит значок предупреждения рядом с этим узлом в древе сцены. Пока "
"что не обращайте внимание на это. Мы рассмотрим это позже."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"С помощью ``Area2D`` мы можем обнаруживать объекты, которые перекрывают или "
"сталкиваются с игроком. Измените имя узла на ``Player``, дважды щёлкнув по "
"нему. Теперь, когда мы установили корневой узел сцены, мы можем добавлять "
"дополнительные узлы, чтобы привнести больше функционала."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"Прежде чем мы добавим потомков на узел ``Player``, мы хотим убедиться, что "
"нажав на них, мы не переместим их и не изменим их размер. Выберите узел и "
"нажмите на значок справа от блокировки; его всплывающая подсказка гласит: "
"\"Делает потомков объекта невыбираемыми.\""

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Сохраните сцену. Нажмите \"Сцена\" -> \"Сохранить сцену\" в верхней панели "
"или нажмите сочетание клавиш :kbd:`Ctrl + S` на Windows/Linux или :kbd:`Cmd "
"+ S` на Mac."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "Для этого проекта мы будем следовать правилам именования Godot."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Классы (узлы) используют PascalCase, переменные и функции - "
"snake_case, константы - ALL_CAPS (см. :ref:`doc_gdscript_styleguide`)."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: Классы, экспортные переменные и методы используют PascalCase, "
"приватные поля используют _camelCase, локальные переменные и параметры "
"используют camelCase (См. :ref:`doc_c_sharp_styleguide`). Будьте "
"внимательны, чтобы точно набирать имена методов при подключении сигналов."

msgid "Sprite animation"
msgstr "Анимация Спрайтов"

msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"Кликните на узел ``Player`` и добавьте дочерний узел :ref:`AnimatedSprite "
"<class_AnimatedSprite>`. ``AnimatedSprite`` будет обрабатывать внешний вид и "
"анимации для нашего игрока. Обратите внимание на символ предупреждения рядом "
"с узлом. ``AnimatedSprite`` требует ресурс :ref:`SpriteFrames "
"<class_SpriteFrames>`, который представляет собой список отображаемых "
"анимаций. Чтобы его создать, найдите свойство ``Frames`` в окне инспектора и "
"кликните на «[пусто]» -> «Новый SpriteFrames». Снова кликните в том же месте "
"на ``SpriteFrames``, чтобы открыть панель:"

msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"Слева находится список анимаций. Нажмите на \"default\" и переименуйте на "
"\"walk\". Затем щелкните по кнопке \"Новая анимация\" для создания второй "
"анимации с именем \"up\". Найдите изображения игрока на вкладке \"Файловая "
"система\" - они находятся в папке \"art\", которую вы разархивировали ранее. "
"Перетащите два изображения с названиями ``playerGrey_up[1/2]`` и "
"``playerGrey_walk[1/2]`` на сторону панели \"Кадры анимации\" для каждой "
"анимации соответственно:"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"Изображения игрока немного великоваты для игрового окна, потому нам надо их "
"слегка уменьшить. Нажмите на узел ``AnimatedSprite`` и установите параметр "
"``Scale`` в ``(0.5, 0.5)``. Вы можете найти его в Инспекторе под заголовком "
"``Node2D``."

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\". Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"Наконец, добавьте :ref:`CollisionShape2D <class_CollisionShape2D>` в "
"качестве дочернего элемента ``Player``. Это определит \"хитбокс\" игрока, "
"или границы его области столкновения. Для этого персонажа лучше всего "
"подходит узел ``CapsuleShape2D``, поэтому рядом с \"Shape\" в Инспекторе "
"нажмите \"[empty]\" -> \"New CapsuleShape2D\". Используя две ручки размера, "
"измените размер фигуры, чтобы она покрывала спрайт:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Когда вы закончите, сцена с вашим ``Player`` будет выглядеть вот так:"

msgid "Make sure to save the scene again after these changes."
msgstr "После этих изменений обязательно сохраните сцену еще раз."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"В следующей части мы добавим скрипт к узлу игрока, чтобы перемещать и "
"анимировать его. Позже, мы настроим обнаружение столкновений, чтобы знать, в "
"какой момент игрока что-то ударило."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
