# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Coding the player"
msgstr "Движение Игрока"

msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr ""
"В этом уроке мы добавим передвижение игрока, анимацию и настроим всё для "
"определения столкновений."

msgid ""
"To do so, we need to add some functionality that we can't get from a built-"
"in node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"Для этого нужно добавить немного функционала, который мы не можем получить с "
"помощью встроенных узлов, поэтому мы добавим скрипт. Нажмите на узел "
"``Player`` и нажмите кнопку \"Attach Script\" (\"Прикрепить скрипт\"):"

msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"В окне настроек скрипта вы можете оставить все настройки по умолчанию. "
"Просто нажмите \"Создать\":"

msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"Если вы создаете скрипт на C# или другом языке, то перед созданием выберете "
"этот язык в выпадающем меню `Язык`."

msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"Если вы впервые столкнулись с GDScript, пожалуйста, прочтите :ref:"
"`doc_scripting` перед продолжением."

msgid "Start by declaring the member variables this object will need:"
msgstr ""
"Начните с объявления переменных - членов, которые понадобятся этому объекту:"

msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"Использование ключевого слова ``export`` у первой переменной ``speed`` "
"позволяет устанавливать ее значение в Инспекторе. Это может быть полезно, "
"если вы хотите изменять значения точно так же как и встроенные свойства "
"узла. Щелкните на узел ``Player`` и вы увидите, что свойство появилось в "
"разделе \"Script Variables\" в Инспекторе. Помните, что если изменить "
"значение здесь, то оно перезапишет значение, установленное в скрипте."

msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"Если вы используете C#, вам нужно (пере)собирать сборки проекта всякий раз, "
"когда вы хотите увидеть новые экспортируемые переменные или сигналы. Эта "
"сборка может быть запущена вручную путем нажатия на слово \"Mono\" в нижней "
"части окна редактора, чтобы открыть Mono Panel, а затем на кнопку \"Build "
"Project\"."

msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"Функция ``_ready ()`` вызывается, когда узел входит в дерево сцены, что "
"является хорошим моментом для определения размера игрового окна:"

msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"Теперь мы можем использовать функцию ``_process()`` для определения того, "
"что игрок будет делать. ``_process()`` вызывается каждый кадр, поэтому мы "
"будем использовать ее для обновления состояния тех элементов нашей игры, "
"которые будут часто изменяться. Для игрока, сделаем следующее:"

msgid "Check for input."
msgstr "Проверка ввода."

msgid "Move in the given direction."
msgstr "Перемещение в заданном направлении."

msgid "Play the appropriate animation."
msgstr "Воспроизвести соответствующую анимацию."

msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this game, "
"we will map the arrow keys to the four directions."
msgstr ""
"Во-первых, мы должны проверить ввод — нажимает ли игрок на клавишу? Для "
"нашей игры нужно проверять 4 направления ввода. Функции ввода определяются в "
"Настройках проекта во вкладке \"Список действий\". В ней можно определять "
"отдельные события и назначать им различные клавиши, события мыши или другой "
"ввод. В нашей игре мы присвоим клавиши стрелок для четырёх направлений."

msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""
"Нажмите на *Проект -> Настройки проекта*, чтобы открыть окно настроек "
"проекта, и нажмите вверху на вкладку *Input Map*. Введите \"move_right\" в "
"верхней панели и нажмите на кнопку \"Добавить\", чтобы добавить действие "
"``move_right``."

msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"then click the \"Key\" option in the drop-down menu. A dialog asks you to "
"type in the desired key. Press the right arrow on your keyboard and click "
"\"Ok\"."
msgstr ""
"Нам необходимо присвоить клавишу этому действию. Нажмите справа на иконку \"+"
"\", затем нажмите на параметр \"Клавиша\" в выпадающем меню. В диалоговом "
"окне Вас попросят ввести желаемую клавишу. Зажмите правую стрелку на Вашей "
"клавиатуре и нажмите \"Ок\"."

msgid "Repeat these steps to add three more mappings:"
msgstr "Повторите эти шаги, чтобы добавить ещё три маппинга:"

msgid "``move_left`` mapped to the left arrow key."
msgstr "``move_left`` соответствует стрелке влево."

msgid "``move_up`` mapped to the up arrow key."
msgstr "``move_up`` соответствует стрелке вверх."

msgid "And ``move_down`` mapped to the down arrow key."
msgstr "А ``move_down`` соответствует стрелке вниз."

msgid "Your input map tab should look like this:"
msgstr "Вкладка Список действий должна выглядеть так:"

msgid "Click the \"Close\" button to close the project settings."
msgstr "Нажмите кнопку \"Закрыть\" чтобы закрыть настройки проекта."

msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""
"Мы присвоили только одну клавишу каждому действию, но Вы можете присвоить "
"тем же самым действиям несколько клавиш, кнопки джойстика или мыши."

msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"Вы можете определить, нажата ли клавиша с помощью функции ``Input."
"is_action_pressed()``, которая возвращает ``true``, если клавиша нажата, или "
"``false``, если нет."

msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"Начнём с того, что установим значение ``velocity`` в ``(0, 0)`` - по "
"умолчанию игрок двигаться не должен. Затем, мы проверяем каждый ввод и "
"добавляем/вычитаем значение из ``velocity``, чтобы получить общее "
"направление. Например, если вы одновременно удерживаете ``right`` и "
"``down``, полученный вектор ``velocity`` будет ``(1, 1)``. В этом случае, "
"поскольку мы добавляем горизонтальное и вертикальное движение, игрок будет "
"двигаться *быстрее*, чем если бы он перемещался только по горизонтали."

msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"Можно избежать этого, если мы *нормализуем* скорость, что означает, что мы "
"устанавливаем ее *длину* на ``1`` и умножаем на желаемую скорость. Это "
"означает отсутствие более быстрого диагонального движения."

msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"Если вы никогда раньше не использовали векторную математику или нуждаетесь в "
"повторении, вы можете увидеть объяснение использования вектора в Godot по "
"ссылке :ref:`doc_vector_math`. Ее полезно знать, но она не понадобится для "
"остальной части этого урока."

msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"Мы также проверяем, движется ли игрок, чтобы мы могли вызвать ``play()`` или "
"``stop()`` на AnimatedSprite."

msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, "
"``$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` является сокращением для ``get_node()``. В приведенном выше коде "
"``$AnimatedSprite.play()`` то же самое, что и ``get_node(\"AnimatedSprite\")."
"play()``."

msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"В GDScript, ``$`` возвращает узел по относительному пути от текущего узла "
"или возвращает ``null``, если узел не найден. Поскольку AnimatedSprite "
"является дочерним элементом текущего узла, мы можем использовать "
"``$AnimatedSprite``."

msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"Теперь, когда у нас есть направление движения, мы можем обновить позицию "
"игрока. Мы также можем использовать ``clamp()``, чтобы он не покинул экран. "
"*Clamping* означает ограничение движения диапазоном. Добавьте следующее в "
"конец функции ``_process`` (убедитесь, что он не имеет отступа под `else`):"

msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"Параметр \"delta\" в функции \"_process()\" означает *длительность кадра*, "
"то есть время, потраченное на завершение обработки предыдущего кадра. "
"Благодаря использованию этого значения скорость движения будет постоянной "
"даже при изменении частоты кадров."

msgid ""
"Click \"Play Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm you "
"can move the player around the screen in all directions."
msgstr ""
"Нажмите \"Запустить сцену\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) и "
"удостоверьтесь, что вы можете перемещать игрока по экрану во всех "
"направлениях."

msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "Если вы получаете ошибку в панели \"Отладчик\", которая говорит"

msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Попытка вызова функции 'play' в основании 'null instance' на нулевом "
"экземпляре``"

msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"это, скорее всего, означает, что вы ввели название узла AnimatedSprite "
"неверно. Имена узлов чувствительны к регистру, а ``$NodeName`` должен "
"совпадать с именем, которое вы видите в дереве сцены."

msgid "Choosing animations"
msgstr "Выбор анимации"

msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"Теперь, когда игрок может двигаться, нам нужно изменять анимацию "
"AnimatedSprite в зависимости от направления движения. У нас есть анимация "
"\"walk\", которая показывает игрока, идущего направо. Эту анимацию следует "
"перевернуть горизонтально, используя свойство ``flip_h`` для движения влево. "
"У нас также есть анимация \"up\", которую нужно перевернуть вертикально с "
"помощью ``flip_v`` для движения вниз. Поместим этот код в конец функции "
"``_process ()``:"

msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"Логические присваивания в коде выше являются общим сокращением для "
"программистов. Поскольку мы проводим проверку сравнения (логическую, "
"булеву), а также *присваиваем* булево значение, мы можем делать и то, и "
"другое одновременно. Рассмотрим этот код в сравнении с однострочным "
"логическим присваиванием выше:"

msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""
"Воспроизведите сцену еще раз и проверьте правильность анимации в каждом из "
"направлений."

msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"Общей ошибкой является неправильное именование анимаций. Имена анимаций в "
"панели SpriteFrames должны совпадать с именами анимаций в вашем коде. Если "
"вы назвали анимацию \"Walk\", вы должны также использовать заглавную букву "
"\"W\" в коде."

msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"Если вы уверены, что движение работает правильно, добавьте эту строку в "
"``_ready()``, чтобы игрок был скрыт при запуске игры:"

msgid "Preparing for collisions"
msgstr "Подготовка к столкновениям"

msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"Мы хотим, чтобы ``Player`` обнаруживал столкновение с врагом, но мы еще не "
"сделали никаких врагов! Это нормально, потому что мы будем использовать "
"такой функционал Godot, как *сигнал*."

msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "Добавьте следующее в верх скрипта после ``extends Area2d``:"

msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"Это определяет пользовательский сигнал под названием \"hit\" (\"удар\"), "
"который наш игрок будет излучать (отправлять), когда он сталкивается с "
"противником. Мы будем использовать ``Area2D`` для обнаружения столкновения. "
"Выберите узел ``Player`` (\"Игрок\") и щелкните по вкладке \"Узел\" (Node) "
"рядом с вкладкой \"Инспектор\" (Inspector), чтобы просмотреть список "
"сигналов, которые игрок может посылать:"

msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"Обратите внимание, что наш пользовательский сигнал \"hit\" там также есть! "
"Поскольку наши противники будут узлами ``RigidBody2D``, нам нужен сигнал "
"``body_entered(body: Node)``. Он будет отправляться при контакте тела (body) "
"с игроком. Нажмите \"Присоединить...\" - появится окно \"Подключить сигнал к "
"методу\". Нам не нужно изменять какие-либо из этих настроек, поэтому еще раз "
"нажмите \"Присоединить\". Godot автоматически создаст функцию в скрипте "
"вашего игрока."

msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"Обратите внимание на зеленый значок, указывающий на то, что сигнал подключен "
"к этой функции. Добавьте этот код в функцию:"

msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"Каждый раз, когда противник ударяет игрока, будет посылаться сигнал. Нам "
"нужно отключить столкновение игрока, чтобы не вызывать сигнал ``hit`` более "
"одного раза."

msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"Отключение формы области столкновения может привести к ошибке, если это "
"происходит во время обработки движком столкновений. Использование "
"``set_deferred()`` говорит Godot ждать отключения этой формы, пока это не "
"будет безопасно."

msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"Последняя деталь - добавить функцию, которую мы можем вызвать для "
"перезагрузки игрока при запуске новой игры."

msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr "Теперь, когда игрок работает, мы займёмся врагом в следующем уроке."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
