# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "Сигнал"

msgid "Using signals"
msgstr "Использование сигналов"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""
"В этом уроке рассмотрим сигналы. Это сообщения, которые выдает узел при "
"определенных событиях, например, при нажатии кнопки. Другие узлы могут "
"получать этот сигнал и вызывать функции, соответствующие событию."

msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""
"Сигналы это механизм делегации, встроенный в Godot, который позволяет одному "
"игровому объекту реагировать на изменение в другом без их привязки друг к "
"другу. Использование сигналов ограничивает `coupling <https://en.wikipedia."
"org/wiki/Coupling_(computer_programming)>`_ и сохраняет универсальность кода."

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player’s health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""
"Например, у вас на экране может быть шкала жизни, которая соответствует "
"здоровью игрока. Когда игрок получает урон или использует исцеляющее зелье, "
"вы хотите, чтобы шкала реагировала на изменения. Чтобы сделать это в Godot, "
"вы бы использовали сигналы."

msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Как уже упоминалось во введении, сигналы - это версия шаблона наблюдателя в "
"Godot. Подробнее об этом можно узнать здесь: https://gameprogrammingpatterns."
"com/observer.html"

msgid ""
"We will now use a signal to make our Godot icon from the previous lesson (:"
"ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""
"Теперь мы будем использовать сигнал, чтобы заставить нашу иконку Годо из "
"предыдущего урока (:ref:`doc_scripting_player_input`) двигаться и "
"останавливаться при нажатии кнопки."

msgid "Scene setup"
msgstr "Настройка сцены"

msgid ""
"To add a button to our game, we will create a new \"main\" scene which will "
"include both a button and the ``Sprite.tscn`` scene that we scripted in "
"previous lessons."
msgstr ""
"Чтобы добавить кнопку в нашу игру, мы создадим новую \"главную\" сцену, "
"которая будет содержать как кнопку, так и сцену ``Sprite.tscn``, которую мы "
"вписали в скрипт в предыдущих уроках."

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr "Создайте новую сцену через меню Сцена -> Новая сцена."

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a Node2D as our "
"root."
msgstr ""
"В доке Scene нажмите кнопку 2D Scene. Это добавит Node2D в качестве корня "
"сцены."

msgid ""
"In the FileSystem dock, click and drag the ``Sprite.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""
"Нажмите и переместите файл ``Sprite.tscn``, который Вы сохранили ранее, на "
"панели задач файловой системы, на Node2D, чтобы создать экземпляр его класса."

msgid ""
"We want to add another node as a sibling of the Sprite. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""
"Мы хотим добавить другой узел, как соседний к спрайту. Чтобы сделать это, "
"нажмите ПКМ на Node2D и выберите Добавить дочерний узел."

msgid "Search for the Button node type and add it."
msgstr "Выполните поиск узла типа Button и добавьте его."

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""
"Узел является небольшим по умолчанию. Нажмите и потяните дескриптор кнопки в "
"нижнем правом углу окна просмотра, чтобы изменить его масштаб."

msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""
"Если вы не видите ручки, убедитесь, что инструмент выделения активен на "
"панели инструментов."

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr ""
"Нажмите на саму кнопку и перетащите курсор, чтобы приблизить её к спрайту."

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter \"Toggle motion\"."
msgstr ""
"Вы можете сделать надпись на кнопке, отредактировав свойство Text в "
"Инспекторе. Введите \"Toggle motion\" (\"Изменить движение\")."

msgid "Your scene tree and viewport should look like this."
msgstr "Дерево сцены и область просмотра должны выглядеть следующим образом."

msgid ""
"Save your newly created scene. You can then run it with :kbd:`F6`. At the "
"moment, the button will be visible, but nothing will happen if you press it."
msgstr ""
"Сохраните Вашу недавно созданную сцену. Теперь Вы можете запустить её с "
"помощью :kbd:`F6`. В данный момент кнопка будет видна, но если вы ее "
"нажмете, ничего не произойдет."

msgid "Connecting a signal in the editor"
msgstr "Подключение сигнала в редакторе"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite, and "
"we want to call a new function that will toggle its motion on and off. We "
"need to have a script attached to the Sprite node, which we do from the "
"previous lesson."
msgstr ""
"Здесь мы хотим присоединить сигнал \"нажатие\" Кнопки к нашему Спрайту, и мы "
"хотим вызвать новую функцию, которая будет показывать и скрывать свои "
"действия. Нам нужен скрипт, прикреплённый к узлу Спрайта, который мы "
"напишем, исходя из предыдущего урока."

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""
"Вы можете подключить сигналы в панели Узел. Выберите узел Button и на правой "
"стороне экрана нажмите вкладку \"Узел\" рядом с Инспектором."

msgid "The dock displays a list of signals available on the selected node."
msgstr "На панели отображаются сигналы, доступные выбранному узлу."

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""
"Дважды кликните сигнал \"pressed\", откроется окно присоединения узлов."

msgid ""
"There, you can connect the signal to the Sprite node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_NodeName_signal_name\". Here, it'll be "
"\"_on_Button_pressed\"."
msgstr ""
"Там вы можете подключить сигнал к узлу Sprite. Узлу нужна функция, которую "
"вызовет Godot, когда Button выдаст сигнал. Редактор самостоятельно создаст "
"её. По соглашению, мы называем эти обратные вызовы "
"\"_on_NodeName_signal_name\". У нас это будет \"_on_Button_pressed\"."

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""
"При подключении сигналов через вкладку Узел редактора, можно использовать "
"два режима. Можно просто подключить сигнал к узлу, имеющему скрипт, и будет "
"автоматически создана функция обратного вызова в нем."

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""
"В расширенном режиме можно присоединить сигнал к любому узлу и к любой "
"встроенной функции, добавить аргументы и установить параметры обратного "
"вызова. Режим можно изменить переключателем в правом-нижнем углу окна "
"кнопкой \"Advanced\"."

msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""
"Нажмите кнопку \"Connect\" (\"Присоединить\") для завершения соединения и "
"перейдите к редактированию скрипта. Вы увидите новый метод (функцию) с "
"иконкой соединения на левой границе."

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""
"Если нажать иконку, всплывёт окно с информацией о соединении. Это доступно "
"только при присоединении узлов в редакторе."

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""
"Давайте заменим строку со словом ``pass`` кодом, который изменяет движение "
"узла."

msgid ""
"Our Sprite moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""
"Наш спрайт движется благодаря коду функции ``_process()``. Godot "
"предоставляет метод для включения и выключения обработки: :ref:`Node."
"set_process() <class_Node_method_set_process>`. Другой метод класса Node, "
"``is_processing()``, возвращает ``true``, если обработка активна. Мы можем "
"использовать ключевое слово ``not``для инвертирования значения."

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""
"Эта функция будет переключать обработку и, в том числе, движение значка по "
"нажатию кнопки."

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""
"Перед тем, как попробовать поиграть, нам необходимо упростить нашу функцию "
"``_process()``, чтобы движение узла было автоматическим и не ожидало команд "
"пользователя. Замените текущий код функции на тот, который мы видели два "
"урока назад:"

msgid "Your complete ``Sprite.gd`` code should look like the following."
msgstr "Ваш полный код ``Sprite.gd`` должен выглядеть следующим образом."

msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr ""
"Запустите сцену и нажмите кнопку, чтобы увидеть запуск и остановку спрайта."

msgid "Connecting a signal via code"
msgstr "Подключение сигналов в коде"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""
"Вы можете присоединять сигналы в коде вместо использования редактора. Это "
"нужно, когда узлы или элементы сцены создаются в скрипте."

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""
"Давайте используем различные узлы здесь. У Godot есть узел :ref:`Timer "
"<class_Timer>`, который полезен для реализации задержки перезарядки "
"способностей, перезарядки оружия и другого."

msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Alt + 1` on macOS)."
msgstr ""
"Вернёмся к рабочему пространству 2D. Для этого можно нажать \"2D\" вверху "
"экрана, или на клавиатуре :kbd:`Ctrl + F1` (:kbd:`Alt + 1` для macOS)."

msgid ""
"In the Scene dock, right-click on the Sprite node and add a new child node. "
"Search for Timer and add the corresponding node. Your scene should now look "
"like this."
msgstr ""
"Нажмите правой кнопкой мыши на панели задач на узел Спрайт и добавьте "
"дочерний узел. Найдите Таймер и добавьте соответствующий узел. Теперь ваша "
"сцена должна выглядеть так."

msgid ""
"With the Timer node selected, go to the Inspector and check the "
"**Autostart** property."
msgstr ""
"Выбрав узел Таймера, откройте Инспектор и проверьте свойства **Autostart**."

msgid ""
"Click the script icon next to Sprite to jump back to the scripting workspace."
msgstr ""
"Нажмите на иконку скрипта рядом со Спрайтом, чтобы вернуться к рабочей "
"области скрипта."

msgid "We need to do two operations to connect the nodes via code:"
msgstr "Нам необходимо выполнить две операции для подключения узлов через код:"

msgid "Get a reference to the Timer from the Sprite."
msgstr "Получите ссылку на таймер из Спрайта."

msgid "Call the Timer's ``connect()`` method."
msgstr "Вызвать метод ``connect()`` Таймера."

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the node you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""
"Для подключения к сигналу через код, Вам нужно использовать метод "
"``connect()`` узла, который вы хотите прослушать. В этом случае, мы хотим "
"прослушать сигнал Таймера \"тайм-аут\"."

msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_method__ready>` built-in "
"function, which is called automatically by the engine when a node is fully "
"instantiated."
msgstr ""
"Мы хотим подключить сигнал, когда сцена инстанцируется, и мы можем это "
"сделать, используя встроенную функцию :ref:`Node._ready() "
"<class_Node_method__ready>`, которая автоматически вызывается движком, когда "
"узел полностью инстанцирован."

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""
"Чтобы получить ссылку на узел, относящийся к действующему узлу, мы "
"используем метод :ref:`Node.get_node() <class_Node_method_get_node>`. Мы "
"можем сохранить ссылку в переменной."

msgid ""
"The function ``get_node()`` looks at the Sprite's children and gets nodes by "
"their name. For example, if you renamed the Timer node to \"BlinkingTimer\" "
"in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""
"Функция ``get_node()``анализирует дочерний Спрайт и получает узлы по их "
"имени. К примеру, если Вы переименуете в редакторе узел Таймера в "
"\"BlinkingTimer\", то Вам нужно будет поменять вызов на "
"``get_node(\"BlinkingTimer\")``."

msgid ""
"We can now connect the Timer to the Sprite in the ``_ready()`` function."
msgstr "Сейчас мы можем подключить Таймер к Спрайту в функции ``_ready()``."

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached (``self``). When the Timer emits "
"\"timeout\", we want to call the function \"_on_Timer_timeout\", that we "
"need to define. Let's add it at the bottom of our script and use it to "
"toggle our sprite's visibility."
msgstr ""
"Строка читается так: мы подключаем сигнал Таймера \"timeout\" к узлу, к "
"которому прикреплён скрипт (``self``). Когда Таймер испускает \"timeout\", "
"мы хотим вызвать функцию \"_on_Timer_timeout\", которую нам необходимо "
"определить. Давайте добавим её в нижней части нашего скрипта и используем её "
"для переключения видимости нашего спрайта."

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""
"Логическое свойство ``visible`` контролирует видимость нашего узла. Строка "
"``visible = not visible`` переключает значение. Если ``visible`` равно "
"``true``, оно станет ``false``, и наоборот."

msgid ""
"If you run the scene now, you will see that the sprite blinks on and off, at "
"one second intervals."
msgstr ""
"Если вы запустите сцену сейчас, то увидите мерцающие раз в секунду спрайты."

msgid "Complete script"
msgstr "Готовый скрипт"

msgid ""
"That's it for our little moving and blinking Godot icon demo! Here is the "
"complete ``Sprite.gd`` file for reference."
msgstr ""
"Вот и все для нашей маленькой движущейся и мигающей иконки Годо! Вот полный "
"файл ``Sprite.gd`` для справки."

msgid "Custom signals"
msgstr "Пользовательские сигналы"

msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""
"Этот отдел является справкой о том, как обозначать и использовать Ваши "
"собственные сигналы, и не опирается на проекты, созданные в предыдущих "
"уроках."

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""
"Вы можете определить собственные сигналы в скрипте. Например, вы хотите "
"вывести экран \"Конец игры\", когда здоровье игрока станет равным нулю. Для "
"этого вы можете определить сигнал \"died\" или \"health_depleted\", и выдать "
"его, когда здоровье игрока будет 0."

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""
"Поскольку сигналы представляют собой события, которые только что произошли, "
"мы обычно используем в их названиях глагол действия в прошедшем времени."

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""
"Ваши сигналы работают таким же образом, как и встроенные: они появляются во "
"вкладке Узла, и Вы можете подключить к ним любые другие сигналы."

msgid "To emit a signal in your scripts, call ``emit_signal()``."
msgstr "Чтобы излучать сигнал в скриптах, вызовите ``emit_signal()``."

msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""
"Сигнал может дополнительно объявить один или несколько аргументов. Укажите "
"имена аргументов между круглыми скобками:"

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Эти аргументы показываются в док-узлах редактора, и Godot может использовать "
"их, чтобы производить для вас функции обратного вызова. Однако, вы всё ещё "
"можете отправлять любое число аргументов при отправке сигналов; отправка "
"правильных значений зависит от вас."

msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit_signal()`` function:"
msgstr ""
"Чтобы выдать значения вместе с сигналом, добавьте их в качестве "
"дополнительных аргументов к функции ``emit_signal()``:"

msgid "Summary"
msgstr "Подведение итогов"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""
"Любой узел в Godot излучает сигналы, когда с ним происходит что-то "
"особенное, как например, нажатие на кнопку. Другие узлы могут подключиться к "
"индивидуальным сигналам и среагировать на выбранные события."

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""
"Сигналы имеют множество применений. С их помощью Вы можете отреагировать на "
"узел при выходе и входе в игровой мир, на столкновение, на персонажа, "
"входящего или покидающего какую-либо область, на изменение в масштабе "
"элемента интерфейса и на многое другое."

msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"Например, :ref:`Area2D <class_Area2D>`, представляющий монету, испускает "
"сигнал ``body_entered`` всякий раз, когда физическое тело игрока входит в "
"его форму столкновения, что позволяет узнать, когда игрок подобрал монету."

msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"В следующем разделе, :ref:`doc_your_first_2d_game`, вы создадите полноценную "
"2D-игру и примените на практике всё, чему научились до сих пор."

msgid "Translation status"
msgstr "Translation status (статус перевода)"
