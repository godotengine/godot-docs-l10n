# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:4
msgid "Jumping and squashing monsters"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:6
msgid "In this part, we'll add the ability to jump, to squash the monsters. In the next lesson, we'll make the player die when a monster hits them on the ground."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:9
msgid "First, we have to change a few settings related to physics interactions. Enter the world of :ref:`physics layers <doc_physics_introduction_collision_layers_and_masks>`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:14
msgid "Controlling physics interactions"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:16
msgid "Physics bodies have access to two complementary properties: layers and masks. Layers define on which physics layer(s) an object is."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:19
msgid "Masks control the layers that a body will listen to and detect. This affects collision detection. When you want two bodies to interact, you need at least one to have a mask corresponding to the other."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:23
msgid "If that's confusing, don't worry, we'll see three examples in a second."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:25
msgid "The important point is that you can use layers and masks to filter physics interactions, control performance, and remove the need for extra conditions in your code."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:29
msgid "By default, all physics bodies and areas are set to both layer and mask ``0``. This means they all collide with each other."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:32
msgid "Physics layers are represented by numbers, but we can give them names to keep track of what's what."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:36
msgid "Setting layer names"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:38
msgid "Let's give our physics layers a name. Go to *Project -> Project Settings*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:40
msgid "|image0|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:345
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:345
msgid "image0"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:42
msgid "In the left menu, navigate down to *Layer Names -> 3D Physics*. You can see a list of layers with a field next to each of them on the right. You can set their names there. Name the first three layers *player*, *enemies*, and *world*, respectively."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:47
msgid "|image1|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:346
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:346
msgid "image1"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:49
msgid "Now, we can assign them to our physics nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:52
msgid "Assigning layers and masks"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:54
msgid "In the *Main* scene, select the *Ground* node. In the *Inspector*, expand the *Collision* section. There, you can see the node's layers and masks as a grid of buttons."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:58
msgid "|image2|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:347
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:347
msgid "image2"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:60
msgid "The ground is part of the world, so we want it to be part of the third layer. Click the lit button to toggle off the first *Layer* and toggle on the third one. Then, toggle off the *Mask* by clicking on it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:64
msgid "|image3|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:348
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:348
msgid "image3"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:66
msgid "As I mentioned above, the *Mask* property allows a node to listen to interaction with other physics objects, but we don't need it to have collisions. The *Ground* doesn't need to listen to anything; it's just there to prevent creatures from falling."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:71
msgid "Note that you can click the \"...\" button on the right side of the properties to see a list of named checkboxes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:74
msgid "|image4|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:349
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:349
msgid "image4"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:76
msgid "Next up are the *Player* and the *Mob*. Open ``Player.tscn`` by double-clicking the file in the *FileSystem* dock."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:79
msgid "Select the *Player* node and set its *Collision -> Mask* to both \"enemies\" and \"world\". You can leave the default *Layer* property as the first layer is the \"player\" one."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:83
msgid "|image5|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:350
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:350
msgid "image5"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:85
msgid "Then, open the *Mob* scene by double-clicking on ``Mob.tscn`` and select the *Mob* node."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:88
msgid "Set its *Collision -> Layer* to \"enemies\" and unset its *Collision -> Mask*, leaving the mask empty."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:91
msgid "|image6|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:351
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:351
msgid "image6"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:93
msgid "These settings mean the monsters will move through one another. If you want the monsters to collide with and slide against each other, turn on the \"enemies\" mask."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:99
msgid "The mobs don't need to mask the \"world\" layer because they only move on the XZ plane. We don't apply any gravity to them by design."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:103
msgid "Jumping"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:105
msgid "The jumping mechanic itself requires only two lines of code. Open the *Player* script. We need a value to control the jump's strength and update ``_physics_process()`` to code the jump."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:109
msgid "After the line that defines ``fall_acceleration``, at the top of the script, add the ``jump_impulse``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:128
msgid "Inside ``_physics_process()``, add the following code before the line where we called ``move_and_slide()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:158
msgid "That's all you need to jump!"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:160
msgid "The ``is_on_floor()`` method is a tool from the ``KinematicBody`` class. It returns ``true`` if the body collided with the floor in this frame. That's why we apply gravity to the *Player*: so we collide with the floor instead of floating over it like the monsters."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:165
msgid "If the character is on the floor and the player presses \"jump\", we instantly give them a lot of vertical speed. In games, you really want controls to be responsive and giving instant speed boosts like these, while unrealistic, feel great."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:170
msgid "Notice that the Y axis is positive upwards. That's unlike 2D, where the Y axis is positive downward."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:174
msgid "Squashing monsters"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:176
msgid "Let's add the squash mechanic next. We're going to make the character bounce over monsters and kill them at the same time."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:179
msgid "We need to detect collisions with a monster and to differentiate them from collisions with the floor. To do so, we can use Godot's :ref:`group <doc_groups>` tagging feature."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:183
msgid "Open the scene ``Mob.tscn`` again and select the *Mob* node. Go to the *Node* dock on the right to see a list of signals. The *Node* dock has two tabs: *Signals*, which you've already used, and *Groups*, which allows you to assign tags to nodes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:188
msgid "Click on it to reveal a field where you can write a tag name. Enter \"mob\" in the field and click the *Add* button."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:191
msgid "|image7|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:352
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:352
msgid "image7"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:193
msgid "An icon appears in the *Scene* dock to indicate the node is part of at least one group."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:196
msgid "|image8|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:353
#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:353
msgid "image8"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:198
msgid "We can now use the group from the code to distinguish collisions with monsters from collisions with the floor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:202
msgid "Coding the squash mechanic"
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:204
msgid "Head back to the *Player* script to code the squash and bounce."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:206
msgid "At the top of the script, we need another property, ``bounce_impulse``. When squashing an enemy, we don't necessarily want the character to go as high up as when jumping."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:225
msgid "Then, at the bottom of ``_physics_process()``, add the following loop. With ``move_and_slide()``, Godot makes the body move sometimes multiple times in a row to smooth out the character's motion. So we have to loop over all collisions that may have happened."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:230
msgid "In every iteration of the loop, we check if we landed on a mob. If so, we kill it and bounce."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:233
msgid "With this code, if no collisions occurred on a given frame, the loop won't run."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:276
msgid "That's a lot of new functions. Here's some more information about them."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:278
msgid "The functions ``get_slide_count()`` and ``get_slide_collision()`` both come from the :ref:`KinematicBody<class_KinematicBody>` class and are related to ``move_and_slide()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:282
msgid "``get_slide_collision()`` returns a :ref:`KinematicCollision<class_KinematicCollision>` object that holds information about where and how the collision occurred. For example, we use its ``collider`` property to check if we collided with a \"mob\" by calling ``is_in_group()`` on it: ``collision.collider.is_in_group(\"mob\")``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:290
msgid "The method ``is_in_group()`` is available on every :ref:`Node<class_Node>`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:292
msgid "To check that we are landing on the monster, we use the vector dot product: ``Vector3.UP.dot(collision.normal) > 0.1``. The collision normal is a 3D vector that is perpendicular to the plane where the collision occurred. The dot product allows us to compare it to the up direction."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:297
msgid "With dot products, when the result is greater than ``0``, the two vectors are at an angle of fewer than 90 degrees. A value higher than ``0.1`` tells us that we are roughly above the monster."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:301
msgid "We are calling one undefined function, ``mob.squash()``. We have to add it to the Mob class."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:304
msgid "Open the script ``Mob.gd`` by double-clicking on it in the *FileSystem* dock. At the top of the script, we want to define a new signal named ``squashed``. And at the bottom, you can add the squash function, where we emit the signal and destroy the mob."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:338
msgid "We will use the signal to add points to the score in the next lesson."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:340
msgid "With that, you should be able to kill monsters by jumping on them. You can press :kbd:`F5` to try the game and set ``Main.tscn`` as your project's main scene."
msgstr ""

#: ../../docs/getting_started/first_3d_game/06.jump_and_squash.rst:343
msgid "However, the player won't die yet. We'll work on that in the next part."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
