# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/export/exporting_pcks.rst:4
msgid "Exporting packs, patches, and mods"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:7
msgid "Use cases"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:9
msgid "Oftentimes one would like to add functionality to one's game after it has been deployed."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:12
msgid "Examples of this include..."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:14
msgid "Downloadable Content: the ability to add features and content to one's game."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:15
msgid "Patches: the ability to fix a bug that is present in a shipped product."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:16
msgid "Mods: grant other people the ability to create content for one's game."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:18
msgid "These tools help developers to extend their development beyond the initial release."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:22
msgid "Overview of PCK files"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:24
msgid "Godot enables this via a feature called **resource packs** (PCK files, with extension ``.pck``)."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:27
msgid "**Advantages:**"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:29
msgid "incremental updates/patches"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:30
msgid "offer DLCs"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:31
msgid "offer mod support"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:32
msgid "no source code disclosure needed for mods"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:33
msgid "more modular project structure"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:34
msgid "users don't have to replace the entire game"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:36
msgid "The first part of using them involves exporting and delivering the project to players. Then, when one wants to add functionality or content later on, they just deliver the updates via PCK files to the users."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:40
msgid "PCK files usually contain, but are not limited to:"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:42
msgid "scripts"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:43
msgid "scenes"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:44
msgid "shaders"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:45
msgid "models"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:46
msgid "textures"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:47
msgid "sound effects"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:48
msgid "music"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:49
msgid "any other asset suitable for import into the game"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:51
msgid "The PCK files can even be an entirely different Godot project, which the original game loads in at runtime."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:55
msgid "Generating PCK files"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:57
msgid "In order to pack all resources of a project into a PCK file open the project and go to Project/Export and click on “Export PCK/Zip”. Also make sure to have an export template selected while doing so."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:63
msgid "Another method would be to :ref:`export from the command line <doc_command_line_tutorial_exporting>`. If the output file ends with a PCK or ZIP file extension, then the export process will build that type of file for the chosen platform."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:69
msgid "If one wishes to support mods for their game, they will need their users to create similarly exported files. Assuming the original game expects a certain structure for the PCK's resources and/or a certain interface for its scripts, then either..."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:74
msgid "The developer must publicize documentation of these expected structures/ interfaces, expect modders to install Godot Engine, and then also expect those modders to conform to the documentation's defined API when building mod content for the game (so that it will work). Users would then use Godot's built in exporting tools to create a PCK file, as detailed above."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:80
msgid "The developer uses Godot to build a GUI tool for adding their exact API content to a project. This Godot tool must either run on a tools-enabled build of the engine or have access to one (distributed alongside or perhaps in the original game's files). The tool can then use the Godot executable to export a PCK file from the command line with :ref:`OS.execute() <class_OS_method_execute>`. The game itself shouldn't use a tool-build of the engine (for security), so it's best to keep the modding tool and game separate."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:90
msgid "Opening PCK files at runtime"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:92
msgid "To import a PCK file, one uses the ProjectSettings singleton. The following example expects a “mod.pck” file in the directory of the games executable. The PCK file contains a “mod_scene.tscn” test scene in its root."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:123
msgid "By default, if you import a file with the same file path/name as one you already have in your project, the imported one will replace it. This is something to watch out for when creating DLC or mods (solved easily with a tool isolating mods to a specific mods subfolder). However, it is also a way of creating patches for one's own game. A PCK file of this kind can fix the content of a previously loaded PCK."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:129
msgid "To opt out of this behavior, pass ``false`` as the second argument to :ref:`ProjectSettings.load_resource_pack() <class_ProjectSettings_method_load_resource_pack>`."
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:133
msgid "For a C# project, you need to build the DLL and place it in the project directory first. Then, before loading the resource pack, you need to load its DLL as follows: ``Assembly.LoadFile(\"mod.dll\")``"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:138
msgid "Summary"
msgstr ""

#: ../../docs/tutorials/export/exporting_pcks.rst:140
msgid "This tutorial should illustrate how easy adding mods, patches or DLC to a game is. The most important thing is to identify how one plans to distribute future content for their game and develop a workflow that is customized for that purpose. Godot should make that process smooth regardless of which route a developer pursues."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
