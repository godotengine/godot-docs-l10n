# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:4
msgid "Import plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:6
msgid "This tutorial assumes you already know how to make generic plugins. If in doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you are acquainted with Godot's import system."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:11
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:13
msgid "An import plugin is a special type of editor tool that allows custom resources to be imported by Godot and be treated as first-class resources. The editor itself comes bundled with a lot of import plugins to handle the common resources like PNG images, Collada and glTF models, Ogg Vorbis sounds, and many more."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:18
msgid "This tutorial will show you how to create a simple import plugin to load a custom text file as a material resource. This text file will contain three numeric values separated by comma, which represents the three channels of a color, and the resulting color will be used as the albedo (main color) of the imported material. In this example it will contain the pure blue color (zero red, zero green, and full blue):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:30
msgid "Configuration"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:32
msgid "First we need a generic plugin that will handle the initialization and destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:45
msgid "Then we need the ``material_import.gd`` file to add and remove the import plugin when needed:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:67
msgid "When this plugin is activated, it will create a new instance of the import plugin (which we'll soon make) and add it to the editor using the :ref:`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. We store a reference to it in a class member ``import_plugin`` so we can refer to it later when removing it. The :ref:`remove_import_plugin() <class_EditorPlugin_method_remove_import_plugin>` method is called when the plugin is deactivated to clean up the memory and let the editor know the import plugin isn't available anymore."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:76
msgid "Note that the import plugin is a reference type, so it doesn't need to be explicitly released from memory with the ``free()`` function. It will be released automatically by the engine when it goes out of scope."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:81
msgid "The EditorImportPlugin class"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:83
msgid "The main character of the show is the :ref:`EditorImportPlugin class <class_EditorImportPlugin>`. It is responsible for implementing the methods that are called by Godot when it needs to know how to deal with files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:88
msgid "Let's begin to code our plugin, one method at time:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:100
msgid "The first method is the :ref:`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. This is a unique name for your plugin that is used by Godot to know which import was used in a certain file. When the files needs to be reimported, the editor will know which plugin to call."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:111
msgid "The :ref:`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` method is responsible for returning the name of the type it imports and it will be shown to the user in the Import dock."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:115
msgid "You should choose this name as a continuation to \"Import as\", e.g. *\"Import as Silly Material\"*. You can name it whatever you want but we recommend a descriptive name for your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:124
msgid "Godot's import system detects file types by their extension. In the :ref:`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` method you return an array of strings to represent each extension that this plugin can understand. If an extension is recognized by more than one plugin, the user can select which one to use when importing the files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:130
msgid "Common extensions like ``.json`` and ``.txt`` might be used by many plugins. Also, there could be files in the project that are just data for the game and should not be imported. You have to be careful when importing to validate the data. Never expect the file to be well-formed."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:140
msgid "The imported files are saved in the ``.import`` folder at the project's root. Their extension should match the type of resource you are importing, but since Godot can't tell what you'll use (because there might be multiple valid extensions for the same resource), you need to declare what will be used in the import."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:146
msgid "Since we're importing a Material, we'll use the special extension for such resource types. If you are importing a scene, you can use ``scn``. Generic resources can use the ``res`` extension. However, this is not enforced in any way by the engine."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:156
msgid "The imported resource has a specific type, so the editor can know which property slot it belongs to. This allows drag and drop from the FileSystem dock to a property in the Inspector."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:160
msgid "In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D objects."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:163
msgid "If you need to import different types from the same extension, you have to create multiple import plugins. You can abstract the import code on another file to avoid duplication in this regard."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:168
msgid "Options and presets"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:170
msgid "Your plugin can provide different options to allow the user to control how the resource will be imported. If a set of selected options is common, you can also create different presets to make it easier for the user. The following image shows how the options will appear in the editor:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:177
msgid "Since there might be many presets and they are identified with a number, it's a good practice to use an enum so you can refer to them using names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:191
msgid "Now that the enum is defined, let's keep looking at the methods of an import plugin:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:199
msgid "The :ref:`get_preset_count() <class_EditorImportPlugin_method_get_preset_count>` method returns the amount of presets that this plugins defines. We only have one preset now, but we can make this method future-proof by returning the size of our ``Presets`` enumeration."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:214
msgid "Here we have the :ref:`get_preset_name() <class_EditorImportPlugin_method_get_preset_name>` method, which gives names to the presets as they will be presented to the user, so be sure to use short and clear names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:219
msgid "We can use the ``match`` statement here to make the code more structured. This way it's easy to add new presets in the future. We use the catch all pattern to return something too. Although Godot won't ask for presets beyond the preset count you defined, it's always better to be on the safe side."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:224
msgid "If you have only one preset you could simply return its name directly, but if you do this you have to be careful when you add more presets."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:239
msgid "This is the method which defines the available options. :ref:`get_import_options() <class_EditorImportPlugin_method_get_import_options>` returns an array of dictionaries, and each dictionary contains a few keys that are checked to customize the option as its shown to the user. The following table shows the possible keys:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "Key"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "Type"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "Description"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid "``name``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:254
msgid "String"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid "The name of the option. When showed, underscores become spaces and first letters are capitalized."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "``default_value``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "Any"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "The default value of the option for this preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid "``property_hint``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:256
msgid "Enum value"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid "One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to use as hint."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:254
msgid "``hint_string``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:254
msgid "The hint text of the property. The same as you'd add in the ``export`` statement in GDScript."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:256
msgid "``usage``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:256
msgid "One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` values to define the usage."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:259
msgid "The ``name`` and ``default_value`` keys are **mandatory**, the rest are optional."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:261
msgid "Note that the ``get_import_options`` method receives the preset number, so you can configure the options for each different preset (especially the default value). In this example we use the ``match`` statement, but if you have lots of options and the presets only change the value you may want to create the array of options first and then change it based on the preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:267
msgid "The ``get_import_options`` method is called even if you don't define presets (by making ``get_preset_count`` return zero). You have to return an array even it's empty, otherwise you can get errors."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:277
msgid "For the :ref:`get_option_visibility() <class_EditorImportPlugin_method_get_option_visibility>` method, we simply return ``true`` because all of our options (i.e. the single one we defined) are visible all the time."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:282
msgid "If you need to make certain option visible only if another is set with a certain value, you can add the logic in this method."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:286
msgid "The ``import`` method"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:288
msgid "The heavy part of the process, responsible for converting the files into resources, is covered by the :ref:`import() <class_EditorImportPlugin_method_import>` method. Our sample code is a bit long, so let's split in a few parts:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:304
msgid "The first part of our import method opens and reads the source file. We use the :ref:`File <class_File>` class to do that, passing the ``source_file`` parameter which is provided by the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:308
msgid "If there's an error when opening the file, we return it to let the editor know that the import wasn't successful."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:323
msgid "This code takes the line of the file it read before and splits it in pieces that are separated by a comma. If there are more or less than the three values, it considers the file invalid and reports an error."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:327
msgid "Then it creates a new :ref:`Color <class_Color>` variable and sets its values according to the input file. If the ``use_red_anyway`` option is enabled, then it sets the color as a pure red instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:336
msgid "This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is the imported resource. We create a new instance of it and then set its albedo color as the value we got before."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:344
msgid "This is the last part and quite an important one, because here we save the made resource to the disk. The path of the saved file is generated and informed by the editor via the ``save_path`` parameter. Note that this comes **without** the extension, so we add it using :ref:`string formatting <doc_gdscript_printf>`. For this we call the ``get_save_extension`` method that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:351
msgid "We also return the result from the :ref:`ResourceSaver.save() <class_ResourceSaver_method_save>` method, so if there's an error in this step, the editor will know about it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:356
msgid "Platform variants and generated files"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:358
msgid "You may have noticed that our plugin ignored two arguments of the ``import`` method. Those are *return arguments* (hence the ``r`` at the beginning of their name), which means that the editor will read from them after calling your import method. Both of them are arrays that you can fill with information."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:363
msgid "The ``r_platform_variants`` argument is used if you need to import the resource differently depending on the target platform. While it's called *platform* variants, it is based on the presence of :ref:`feature tags <doc_feature_tags>`, so even the same platform can have multiple variants depending on the setup."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:368
msgid "To import a platform variant, you need to save it with the feature tag before the extension, and then push the tag to the ``r_platform_variants`` array so the editor can know that you did."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:372
msgid "For example, let's say we save a different material for a mobile platform. We would need to do something like the following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:380
msgid "The ``r_gen_files`` argument is meant for extra files that are generated during your import process and need to be kept. The editor will look at it to understand the dependencies and make sure the extra file is not inadvertently deleted."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:385
msgid "This is also an array and should be filled with full paths of the files you save. As an example, let's create another material for the next pass and save it in a different file:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:401
msgid "Trying the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:403
msgid "This has been theoretical, but now that the import plugin is done, let's test it. Make sure you created the sample file (with the contents described in the introduction section) and save it as ``test.mtxt``. Then activate the plugin in the Project Settings."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:408
msgid "If everything goes well, the import plugin is added to the editor and the file system is scanned, making the custom resource appear on the FileSystem dock. If you select it and focus the Import dock, you can see the only option to select there."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:413
msgid "Create a MeshInstance node in the scene, and for its Mesh property set up a new SphereMesh. Unfold the Material section in the Inspector and then drag the file from the FileSystem dock to the material property. The object will update in the viewport with the blue color of the imported material."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:420
msgid "Go to Import dock, enable the \"Use Red Anyway\" option, and click on \"Reimport\". This will update the imported material and should automatically update the view showing the red color instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:424
msgid "And that's it! Your first import plugin is done! Now get creative and make plugins for your own beloved formats. This can be quite useful to write your data in a custom format and then use it in Godot as if they were native resources. This shows how the import system is powerful and extendable."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
