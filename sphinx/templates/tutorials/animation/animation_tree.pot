# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/animation/animation_tree.rst:4
msgid "Using AnimationTree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:9
msgid "With :ref:`AnimationPlayer <class_AnimationPlayer>`, Godot has one of the most flexible animation systems that you can find in any game engine. The ability to animate almost any property in any node or resource, as well as having dedicated transform, bezier, function calling, audio and sub-animation tracks, is pretty much unique."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:13
msgid "However, the support for blending those animations via ``AnimationPlayer`` is relatively limited, as only a fixed cross-fade transition time can be set."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:15
msgid ":ref:`AnimationTree <class_AnimationTree>` is a new node introduced in Godot 3.1 to deal with advanced transitions. It supersedes the ancient ``AnimationTreePlayer``, while adding a huge amount of features and flexibility."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:19
msgid "Creating an AnimationTree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:21
msgid "Before starting, it must be made clear that an ``AnimationTree`` node does not contain its own animations. Instead, it uses animations contained in an ``AnimationPlayer`` node. This way, you can edit your animations (or import them from a 3D scene) as usual and then use this extra node to control the playback."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:25
msgid "The most common way to use ``AnimationTree`` is in a 3D scene. When importing your scenes from a 3D exchange format, they will usually come with animations built-in (either multiple ones or split from a large one on import). At the end, the imported Godot scene will contain the animations in a ``AnimationPlayer`` node."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:29
msgid "As you rarely use imported scenes directly in Godot (they are either instantiated or inherited from), you can place the ``AnimationTree`` node in your new scene which contains the imported one. Afterwards, point the ``AnimationTree`` node to the ``AnimationPlayer`` that was created in the imported scene."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:32
msgid "This is how it's done in the `Third Person Shooter demo <https://github.com/godotengine/tps-demo>`_, for reference:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:36
msgid "A new scene was created for the player with a ``KinematicBody`` as root. Inside this scene, the original ``.dae`` (Collada) file was instantiated and an ``AnimationTree`` node was created."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:40
msgid "Creating a tree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:42
msgid "There are three main types of nodes that can be used in ``AnimationTree``:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:44
msgid "Animation nodes, which reference an animation from the linked ``AnimationTree``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:45
msgid "Animation Root nodes, which are used to blend sub-nodes."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:46
msgid "Animation Blend nodes, which are used within ``AnimationNodeBlendTree`` as single-graph blending via multiple input ports."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:48
msgid "To set a root node in ``AnimationTree``, a few types are available:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:52
msgid "``AnimationNodeAnimation``: Selects an animation from the list and plays it. This is the simplest root node, and generally not used directly as root."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:53
msgid "``AnimationNodeBlendTree``: Contains many *blend* type nodes, such as mix, blend2, blend3, one shot, etc. This is one of the most commonly used roots."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:54
msgid "``AnimationNodeStateMachine``: Contains multiple root nodes as children in a graph. Each node is used as a *state*, and provides multiple functions to alternate between states."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:55
msgid "``AnimationNodeBlendSpace2D``: Allows placing root nodes in a 2D blend space. Control the blend position in 2D to mix between multiple animations."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:56
msgid "``AnimationNodeBlendSpace1D``: Simplified version of the above (1D)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:59
msgid "Blend tree"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:61
msgid "An ``AnimationNodeBlendTree`` can contain both root and regular nodes used for blending. Nodes are added to the graph from a menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:65
msgid "All blend trees contain an ``Output`` node by default, and something has to be connected to it in order for animations to play."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:67
msgid "The easiest way to test this functionality is to connect an ``Animation`` node to it directly:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:71
msgid "This will simply play back the animation. Make sure that the ``AnimationTree`` is active for something to actually happen."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:73
msgid "Following is a short description of available nodes:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:76
msgid "Blend2 / Blend3"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:78
msgid "These nodes will blend between two or three inputs by a user-specified blend value:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:82
msgid "For more complex blending, it is advised to use blend spaces instead."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:84
msgid "Blending can also use filters, i.e. you can control individually which tracks go through the blend function. This is very useful for layering animations on top of each other."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:90
msgid "OneShot"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:92
msgid "This node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:97
msgid "Seek"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:99
msgid "This node can be used to cause a seek command to happen to any sub-children of the animation graph. Use this node type to play an ``Animation`` from the start or a certain playback position inside the ``AnimationNodeBlendTree``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:101
msgid "After setting the time and changing the animation playback, the seek node automatically goes into sleep mode on the next process frame by setting its ``seek_position`` value to ``-1.0``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:125
msgid "TimeScale"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:127
msgid "Allows scaling the speed of the animation (or reverse it) in any children nodes. Setting it to 0 will pause the animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:130
msgid "Transition"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:132
msgid "Very simple state machine (when you don't want to cope with a ``StateMachine`` node). Animations can be connected to the outputs and transition times can be specified."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:135
msgid "BlendSpace2D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:137
msgid "``BlendSpace2D`` is a node to do advanced blending in two dimensions. Points are added to a two-dimensional space and then a position can be controlled to determine blending:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:142
msgid "The ranges in X and Y can be controlled (and labeled for convenience). By default, points can be placed anywhere (just right-click on the coordinate system or use the *add point* button) and triangles will be generated automatically using Delaunay."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:147
msgid "It is also possible to draw the triangles manually by disabling the *auto triangle* option, though this is rarely necessary:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:151
msgid "Finally, it is possible to change the blend mode. By default, blending happens by interpolating points inside the closest triangle. When dealing with 2D animations (frame by frame), you may want to switch to *Discrete* mode. Alternatively, if you want to keep the current play position when switching between discrete animations, there is a *Carry* mode. This mode can be changed in the *Blend* menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:159
msgid "BlendSpace1D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:161
msgid "This is similar to 2D blend spaces, but in one dimension (so triangles are not needed)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:164
msgid "StateMachine"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:166
msgid "This node acts as a state machine with root nodes as states. Root nodes can be created and connected via lines. States are connected via *Transitions*, which are connections with special properties. Transitions are uni-directional, but two can be used to connect in both directions."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:171
msgid "There are many types of transition:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:175
msgid "*Immediate*: Will switch to the next state immediately. The current state will end and blend into the beginning of the new one."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:176
msgid "*Sync*: Will switch to the next state immediately, but will seek the new state to the playback position of the old state."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:177
msgid "*At End*: Will wait for the current state playback to end, then switch to the beginning of the next state animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:179
msgid "Transitions also have a few properties. Click any transition and it will be displayed in the inspector dock:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:183
msgid "*Switch Mode* is the transition type (see above), it can be modified after creation here."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:184
msgid "*Auto Advance* will turn on the transition automatically when this state is reached. This works best with the *At End* switch mode."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:185
msgid "*Advance Condition* will turn on auto advance when this condition is set. This is a custom text field that can be filled with a variable name. The variable can be modified from code (more on this later)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:187
msgid "*Xfade Time* is the time to cross-fade between this state and the next."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:188
msgid "*Priority* is used together with the ``travel()`` function from code (more on this later). Lower priority transitions are preferred when travelling through the tree."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:189
msgid "*Disabled* toggles disabling this transition (when disabled, it will not be used during travel or auto advance)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:193
msgid "Root motion"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:195
msgid "When working with 3D animations, a popular technique is for animators to use the root skeleton bone to give motion to the rest of the skeleton. This allows animating characters in a way where steps actually match the floor below. It also allows precise interaction with objects during cinematics."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:198
msgid "When playing back the animation in Godot, it is possible to select this bone as the *root motion track*. Doing so will cancel the bone transformation visually (the animation will stay in place)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:203
msgid "Afterwards, the actual motion can be retrieved via the :ref:`AnimationTree <class_AnimationTree>` API as a transform:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:214
msgid "This can be fed to functions such as :ref:`KinematicBody.move_and_slide <class_KinematicBody_method_move_and_slide>` to control the character movement."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:216
msgid "There is also a tool node, ``RootMotionView``, that can be placed in a scene and will act as a custom floor for your character and animations (this node is disabled by default during the game)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:223
msgid "Controlling from code"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:225
msgid "After building the tree and previewing it, the only question remaining is \"How is all this controlled from code?\"."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:227
msgid "Keep in mind that the animation nodes are just resources and, as such, they are shared between all instances using them. Setting values in the nodes directly will affect all instances of the scene that uses this ``AnimationTree``. This is generally undesirable, but does have some cool use cases, e.g. you can copy and paste parts of your animation tree, or reuse nodes with a complex layout (such as a state machine or blend space) in different animation trees."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:232
msgid "The actual animation data is contained in the ``AnimationTree`` node and is accessed via properties. Check the \"Parameters\" section of the ``AnimationTree`` node to see all the parameters that can be modified in real-time:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:237
msgid "This is handy because it makes it possible to animate them from an ``AnimationPlayer``, or even the ``AnimationTree`` itself, allowing the realization of very complex animation logic."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:240
msgid "To modify these values from code, the property path must be obtained. This is done easily by hovering the mouse over any of the parameters:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:244
msgid "Which allows setting them or reading them:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:259
msgid "State machine travel"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:261
msgid "One of the nice features in Godot's ``StateMachine`` implementation is the ability to travel. The graph can be instructed to go from the current state to another one, while visiting all the intermediate ones. This is done via the A\\* algorithm. In the absence of any viable set of transitions starting at the current state and finishing at the destination state, the graph teleports to the destination state."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:266
msgid "To use the travel ability, you should first retrieve the :ref:`AnimationNodeStateMachinePlayback <class_AnimationNodeStateMachinePlayback>` object from the ``AnimationTree`` node (it is exported as a property)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:279
msgid "Once retrieved, it can be used by calling one of the many functions it offers:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:290
msgid "The state machine must be running before you can travel. Make sure to either call ``start()`` or choose a node to **Autoplay on Load**."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
