# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/best_practices/logic_preferences.rst:4
msgid "Logic preferences"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:6
msgid "Ever wondered whether one should approach problem X with strategy Y or Z? This article covers a variety of topics related to these dilemmas."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:10
msgid "Loading vs. preloading"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:12
msgid "In GDScript, there exists the global :ref:`preload <class_@GDScript_method_preload>` method. It loads resources as early as possible to front-load the \"loading\" operations and avoid loading resources while in the middle of performance-sensitive code."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:17
msgid "Its counterpart, the :ref:`load <class_@GDScript_method_load>` method, loads a resource only when it reaches the load statement. That is, it will load a resource in-place which can cause slowdowns when it occurs in the middle of sensitive processes. The ``load`` function is also an alias for :ref:`ResourceLoader.load(path) <class_ResourceLoader_method_load>` which is accessible to *all* scripting languages."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:24
msgid "So, when exactly does preloading occur versus loading, and when should one use either? Let's see an example:"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:88
msgid "Preloading allows the script to handle all the loading the moment one loads the script. Preloading is useful, but there are also times when one doesn't wish for it. To distinguish these situations, there are a few things one can consider:"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:93
msgid "If one cannot determine when the script might load, then preloading a resource, especially a scene or script, could result in further loads one does not expect. This could lead to unintentional, variable-length load times on top of the original script's load operations."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:98
msgid "If something else could replace the value (like a scene's exported initialization), then preloading the value has no meaning. This point isn't a significant factor if one intends to always create the script on its own."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:102
msgid "If one wishes only to 'import' another class resource (script or scene), then using a preloaded constant is often the best course of action. However, in exceptional cases, one may wish not to do this:"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:106
msgid "If the 'imported' class is liable to change, then it should be a property instead, initialized either using an ``export`` or a ``load`` (and perhaps not even initialized until later)."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:110
msgid "If the script requires a great many dependencies, and one does not wish to consume so much memory, then one may wish to, load and unload various dependencies at runtime as circumstances change. If one preloads resources into constants, then the only way to unload these resources would be to unload the entire script. If they are instead loaded properties, then one can set them to ``null`` and remove all references to the resource entirely (which, as a :ref:`Reference <class_Reference>`-extending type, will cause the resources to delete themselves from memory)."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:121
msgid "Large levels: static vs. dynamic"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:123
msgid "If one is creating a large level, which circumstances are most appropriate? Should they create the level as one static space? Or should they load the level in pieces and shift the world's content as needed?"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:127
msgid "Well, the simple answer is , \"when the performance requires it.\" The dilemma associated with the two options is one of the age-old programming choices: does one optimize memory over speed, or vice versa?"
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:131
msgid "The naive answer is to use a static level that loads everything at once. But, depending on the project, this could consume a large amount of memory. Wasting users' RAM leads to programs running slow or outright crashing from everything else the computer tries to do at the same time."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:136
msgid "No matter what, one should break larger scenes into smaller ones (to aid in reusability of assets). Developers can then design a node that manages the creation/loading and deletion/unloading of resources and nodes in real-time. Games with large and varied environments or procedurally generated elements often implement these strategies to avoid wasting memory."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:142
msgid "On the flip side, coding a dynamic system is more complex, i.e. uses more programmed logic, which results in opportunities for errors and bugs. If one isn't careful, they can develop a system that bloats the technical debt of the application."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:147
msgid "As such, the best options would be..."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:149
msgid "To use a static level for smaller games."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:151
msgid "If one has the time/resources on a medium/large game, create a library or plugin that can code the management of nodes and resources. If refined over time, so as to improve usability and stability, then it could evolve into a reliable tool across projects."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:156
msgid "Code the dynamic logic for a medium/large game because one has the coding skills, but not the time or resources to refine the code (game's gotta get done). Could potentially refactor later to outsource the code into a plugin."
msgstr ""

#: ../../docs/tutorials/best_practices/logic_preferences.rst:161
msgid "For an example of the various ways one can swap scenes around at runtime, please see the :ref:`\"Change scenes manually\" <doc_change_scenes_manually>` documentation."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
