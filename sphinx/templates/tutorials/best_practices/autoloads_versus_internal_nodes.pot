# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:4
msgid "Autoloads versus regular nodes"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:6
msgid "Godot offers a feature to automatically load nodes at the root of your project, allowing you to access them globally, that can fulfill the role of a Singleton: :ref:`doc_singletons_autoload`. These auto-loaded nodes are not freed when you change the scene from code with :ref:`SceneTree.change_scene <class_SceneTree_method_change_scene>`."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:11
msgid "In this guide, you will learn when to use the Autoload feature, and techniques you can use to avoid it."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:15
msgid "The cutting audio issue"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:17
msgid "Other engines can encourage the use of creating manager classes, singletons that organize a lot of functionality into a globally accessible object. Godot offers many ways to avoid global state thanks to the node tree and signals."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:21
msgid "For example, let's say we are building a platformer and want to collect coins that play a sound effect. There's a node for that: the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>`. But if we call the ``AudioStreamPlayer`` while it is already playing a sound, the new sound interrupts the first."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:26
msgid "A solution is to code a global, auto-loaded sound manager class. It generates a pool of ``AudioStreamPlayer`` nodes that cycle through as each new request for sound effects comes in. Say we call that class ``Sound``, you can use it from anywhere in your project by calling ``Sound.play(\"coin_pickup.ogg\")``. This solves the problem in the short term but causes more problems:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:32
msgid "**Global state**: one object is now responsible for all objects' data. If the ``Sound`` class has errors or doesn't have an AudioStreamPlayer available, all the nodes calling it can break."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:36
msgid "**Global access**: now that any object can call ``Sound.play(sound_path)`` from anywhere, there's no longer an easy way to find the source of a bug."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:39
msgid "**Global resource allocation**: with a pool of ``AudioStreamPlayer`` nodes stored from the start, you can either have too few and face bugs, or too many and use more memory than you need."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:45
msgid "About global access, the problem is that Any code anywhere could pass wrong data to the ``Sound`` autoload in our example. As a result, the domain to explore to fix the bug spans the entire project."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:49
msgid "When you keep code inside a scene, only one or two scripts may be involved in audio."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:52
msgid "Contrast this with each scene keeping as many ``AudioStreamPlayer`` nodes as it needs within itself and all these problems go away:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:55
msgid "Each scene manages its own state information. If there is a problem with the data, it will only cause issues in that one scene."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:58
msgid "Each scene accesses only its own nodes. Now, if there is a bug, it's easy to find which node is at fault."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:61
msgid "Each scene allocates exactly the amount of resources it needs."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:64
msgid "Managing shared functionality or data"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:66
msgid "Another reason to use an Autoload can be that you want to reuse the same method or data across many scenes."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:69
msgid "In the case of functions, you can create a new type of ``Node`` that provides that feature for an individual scene using the :ref:`class_name <doc_gdscript_basics_class_name>` keyword in GDScript."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:73
msgid "When it comes to data, you can either:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:75
msgid "Create a new type of :ref:`Resource <class_Resource>` to share the data."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:77
msgid "Store the data in an object to which each node has access, for example using the ``owner`` property to access the scene's root node."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:81
msgid "When you should use an Autoload"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:83
msgid "Auto-loaded nodes can simplify your code in some cases:"
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:85
msgid "**Static Data**: if you need data that is exclusive to one class, like a database, then an autoload can be a good tool. There is no scripting API in Godot to create and manage static data otherwise."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:89
msgid "**Static functions**: creating a library of functions that only return values."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:91
msgid "**Systems with a wide scope**: If the singleton is managing its own information and not invading the data of other objects, then it's a great way to create systems that handle broad-scoped tasks. For example, a quest or a dialogue system."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:96
msgid "Until Godot 3.1, another use was just for convenience: autoloads have a global variable for their name generated in GDScript, allowing you to call them from any script file in your project. But now, you can use the ``class_name`` keyword instead to get auto-completion for a type in your entire project."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:103
msgid "Autoload is not exactly a Singleton. Nothing prevents you from instantiating copies of an auto-loaded node. It is only a tool that makes a node load automatically as a child of the root of your scene tree, regardless of your game's node structure or which scene you run, e.g. by pressing :kbd:`F6` key."
msgstr ""

#: ../../docs/tutorials/best_practices/autoloads_versus_internal_nodes.rst:108
msgid "As a result, you can get the auto-loaded node, for example an autoload called ``Sound``, by calling ``get_node(\"/root/Sound\")``."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
