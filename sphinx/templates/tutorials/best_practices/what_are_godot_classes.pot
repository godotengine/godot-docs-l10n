# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:4
msgid "Applying object-oriented principles in Godot"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:6
msgid "The engine offers two main ways to create reusable objects: scripts and scenes. Neither of these technically define classes under the hood."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:9
msgid "Still, many best practices using Godot involve applying object-oriented programming principles to the scripts and scenes that compose your game. That is why it's useful to understand how we can think of them as classes."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:13
msgid "This guide briefly explains how scripts and scenes work in the engine's core to help you understand how they work under the hood."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:17
msgid "How scripts work in the engine"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:19
msgid "The engine provides built-in classes like :ref:`Node <class_Node>`. You can extend those to create derived types using a script."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:22
msgid "These scripts are not technically classes. Instead, they are resources that tell the engine a sequence of initializations to perform on one of the engine's built-in classes."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:25
msgid "Godot's internal classes have methods that register a class's data with a :ref:`ClassDB <class_ClassDB>`. This database provides runtime access to class information. ``ClassDB`` contains information about classes like:"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:29
msgid "Properties."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:30
msgid "Methods."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:31
msgid "Constants."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:32
msgid "Signals."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:34
msgid "This ``ClassDB`` is what objects check against when performing an operation like accessing a property or calling a method. It checks the database's records and the object's base types' records to see if the object supports the operation."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:38
msgid "Attaching a :ref:`Script <class_Script>` to your object extends the methods, properties, and signals available from the ``ClassDB``."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:43
msgid "Even scripts that don't use the ``extends`` keyword implicitly inherit from the engine's base :ref:`Reference <class_Reference>` class. As a result, you can instantiate scripts without the ``extends`` keyword from code. Since they extend ``Reference`` though, you cannot attach them to a :ref:`Node <class_Node>`."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:49
msgid "Scenes"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:51
msgid "The behavior of scenes has many similarities to classes, so it can make sense to think of a scene as a class. Scenes are reusable, instantiable, and inheritable groups of nodes. Creating a scene is similar to having a script that creates nodes and adds them as children using ``add_child()``."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:55
msgid "We often pair a scene with a scripted root node that makes use of the scene's nodes. As such, the scene is often an extension of the script's declarative code."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:58
msgid "The content of a scene helps to define:"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:60
msgid "What nodes are available to the script"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:61
msgid "How they are organized"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:62
msgid "How they are initialized"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:63
msgid "What signal connections they have with each other"
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:65
msgid "Why is any of this important to scene organization? Because instances of scenes *are* objects. As a result, many object-oriented principles that apply to written code also apply to scenes: single responsibility, encapsulation, and others."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:69
msgid "The scene is *always an extension of the script attached to its root node*, so you can interpret it as part of a class."
msgstr ""

#: ../../docs/tutorials/best_practices/what_are_godot_classes.rst:72
msgid "Most of the techniques explained in this best practices series build on this point."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
