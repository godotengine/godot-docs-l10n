# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/inputs/input_examples.rst:4
msgid "Input examples"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:9
msgid "In this tutorial, you'll learn how to use Godot's :ref:`InputEvent <class_InputEvent>` system to capture player input. There are many different types of input your game may use - keyboard, gamepad, mouse, etc. - and many different ways to turn those inputs into actions in your game. This document will show you some of the most common scenarios, which you can use as starting points for your own projects."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:16
msgid "For a detailed overview of how Godot's input event system works, see :ref:`doc_inputevent`."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:20
msgid "Events versus polling"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:22
msgid "Sometimes you want your game to respond to a certain input event - pressing the \"jump\" button, for example. For other situations, you might want something to happen as long as a key is pressed, such as movement. In the first case, you can use the ``_input()`` function, which will be called whenever an input event occurs. In the second case, Godot provides the :ref:`Input <class_Input>` singleton, which you can use to query the state of an input."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:29
msgid "Examples:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:63
msgid "This gives you the flexibility to mix-and-match the type of input processing you do."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:66
msgid "For the remainder of this tutorial, we'll focus on capturing individual events in ``_input()``."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:70
msgid "Input events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:72
msgid "Input events are objects that inherit from :ref:`InputEvent <class_InputEvent>`. Depending on the event type, the object will contain specific properties related to that event. To see what events actually look like, add a Node and attach the following script:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:99
msgid "As you press keys, move the mouse, and perform other inputs, you'll see each event scroll by in the output window. Here's an example of the output:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:113
msgid "As you can see, the results are very different for the different types of input. Key events are even printed as their key symbols. For example, let's consider :ref:`InputEventMouseButton <class_InputEventMouseButton>`. It inherits from the following classes:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:118
msgid ":ref:`InputEvent <class_InputEvent>` - the base class for all input events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:119
msgid ":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` - adds the ability to check if modifiers are pressed, such as :kbd:`Shift` or :kbd:`Alt`."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:120
msgid ":ref:`InputEventMouse <class_InputEventMouse>` - adds mouse event properties, such as ``position``"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:121
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>` - contains the index of the button that was pressed, whether it was a double-click, etc."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:123
msgid "It's a good idea to keep the class reference open while you're working with events so you can check the event type's available properties and methods."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:127
msgid "You can encounter errors if you try to access a property on an input type that doesn't contain it - calling ``position`` on ``InputEventKey`` for example. To avoid this, make sure to test the event type first:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:149
msgid "InputMap"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:151
msgid "The :ref:`InputMap <class_InputMap>` is the most flexible way to handle a variety of inputs. You use this by creating named input *actions*, to which you can assign any number of input events, such as keypresses or mouse clicks. A new Godot project includes a number of default actions already defined. To see them, and to add your own, open Project -> Project Settings and select the InputMap tab:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:161
msgid "Capturing actions"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:163
msgid "Once you've defined your actions, you can process them in your scripts using ``is_action_pressed()`` and ``is_action_released()`` by passing the name of the action you're looking for:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:185
msgid "Keyboard events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:187
msgid "Keyboard events are captured in :ref:`InputEventKey <class_InputEventKey>`. While it's recommended to use input actions instead, there may be cases where you want to specifically look at key events. For this example, let's check for the :kbd:`T`:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:213
#: ../../docs/tutorials/inputs/input_examples.rst:264
msgid "See :ref:`@GlobalScope_KeyList <enum_@GlobalScope_KeyList>` for a list of scancode constants."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:218
msgid "Due to *keyboard ghosting*, not all key inputs may be registered at a given time if you press too many keys at once. Due to their location on the keyboard, certain keys are more prone to ghosting than others. Some keyboards feature antighosting at a hardware level, but this feature is generally not present on low-end keyboards and laptop keyboards."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:224
msgid "As a result, it's recommended to use a default keyboard layout that is designed to work well on a keyboard without antighosting. See `this Gamedev Stack Exchange question <https://gamedev.stackexchange.com/a/109002>`__ for more information."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:230
msgid "Keyboard modifiers"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:232
msgid "Modifier properties are inherited from :ref:`InputEventWithModifiers <class_InputEventWithModifiers>`. This allows you to check for modifier combinations using boolean properties. Let's imagine you want one thing to happen when the :kbd:`T` is pressed, but something different when it's :kbd:`Shift + T`:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:268
msgid "Mouse events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:270
msgid "Mouse events stem from the :ref:`InputEventMouse <class_InputEventMouse>` class, and are separated into two types: :ref:`InputEventMouseButton <class_InputEventMouseButton>` and :ref:`InputEventMouseMotion <class_InputEventMouseMotion>`. Note that this means that all mouse events will contain a ``position`` property."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:276
msgid "Mouse buttons"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:278
msgid "Capturing mouse buttons is very similar to handling key events. :ref:`@GlobalScope_ButtonList <enum_@GlobalScope_ButtonList>` contains a list of ``BUTTON_*`` constants for each possible button, which will be reported in the event's ``button_index`` property. Note that the scrollwheel also counts as a button - two buttons, to be precise, with both ``BUTTON_WHEEL_UP`` and ``BUTTON_WHEEL_DOWN`` being separate events."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:313
msgid "Mouse motion"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:315
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>` events occur whenever the mouse moves. You can find the move's distance with the ``relative`` property."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:319
msgid "Here's an example using mouse events to drag-and-drop a :ref:`Sprite <class_Sprite>` node:"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:392
msgid "Touch events"
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:394
msgid "If you are using a touchscreen device, you can generate touch events. :ref:`InputEventScreenTouch <class_InputEventScreenTouch>` is equivalent to a mouse click event, and :ref:`InputEventScreenDrag <class_InputEventScreenDrag>` works much the same as mouse motion."
msgstr ""

#: ../../docs/tutorials/inputs/input_examples.rst:399
msgid "To test your touch events on a non-touchscreen device, open Project Settings and go to the \"Input Devices/Pointing\" section. Enable \"Emulate Touch From Mouse\" and your project will interpret mouse clicks and motion as touch events."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
