# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:4
msgid "Controlling thousands of fish with Particles"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:6
msgid "The problem with :ref:`MeshInstances <class_MeshInstance>` is that it is expensive to update their transform array. It is great for placing many static objects around the scene. But it is still difficult to move the objects around the scene."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:10
msgid "To make each instance move in an interesting way, we will use a :ref:`Particles <class_Particles>` node. Particles take advantage of GPU acceleration by computing and setting the per-instance information in a :ref:`Shader <class_Shader>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:14
msgid "Particles are not available in GLES2, instead use :ref:`CPUParticles <class_CPUParticles>`, which do the same thing as Particles, but do not benefit from GPU acceleration."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:17
msgid "First create a Particles node. Then, under \"Draw Passes\" set the Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under \"Process Material\" create a new :ref:`ShaderMaterial <class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:21
msgid "Set the ``shader_type`` to ``particles``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:27
msgid "Then add the following two functions:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:51
msgid "These functions come from the default :ref:`ParticlesMaterial <class_ParticlesMaterial>`. They are used to generate a random number from each particle's ``RANDOM_SEED``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:54
msgid "A unique thing about particle shaders is that some built-in variables are saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be accessed in the Spatial shader of the mesh, and also in the particle shader the next time it is run."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:58
msgid "Next, setup your ``vertex`` function. Particles shaders only contain a vertex function and no others."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:61
msgid "First we will distinguish between code that needs to be run only when the particle system starts and code that should always run. We want to give each fish a random position and a random animation offset when the system is first run. To do so, we wrap that code in an ``if`` statement that checks the built-in variable ``RESTART`` which becomes ``true`` for one frame when the particle system is restarted."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:66
msgid "From a high level, this looks like:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:78
msgid "Next, we need to generate 4 random numbers: 3 to create a random position and one for the random offset of the swim cycle."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:81
msgid "First, generate 4 seeds inside the ``RESTART`` block using the ``hash`` function provided above:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:90
msgid "Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:99
msgid "Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of the transform that holds the position information."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:106
msgid "Remember, all this code so far goes inside the ``RESTART`` block."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:108
msgid "The vertex shader for your mesh can stay the exact same as it was in the previous tutorial."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:110
msgid "Now you can move each fish individually each frame, either by adding to the ``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:113
msgid "Let's transform the fish by setting their ``VELOCITY``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:119
msgid "This is the most basic way to set ``VELOCITY`` every particle (or fish) will have the same velocity."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:121
msgid "Just by setting ``VELOCITY`` you can make the fish swim however you want. For example, try the code below."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:128
msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:130
msgid "If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:137
msgid "This code gives you the following behavior:"
msgstr ""

#: ../../docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst:141
msgid "Using a ParticlesMaterial you can make the fish behavior as simple or complex as you like. In this tutorial we only set Velocity, but in your own Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` for more information on particle shaders."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
