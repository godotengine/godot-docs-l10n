# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:4
msgid "High-level multiplayer"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:7
msgid "High-level vs low-level API"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:9
msgid "The following explains the differences of high- and low-level networking in Godot as well as some fundamentals. If you want to jump in head-first and add networking to your first nodes, skip to `Initializing the network`_ below. But make sure to read the rest later on!"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:11
msgid "Godot always supported standard low-level networking via UDP, TCP and some higher level protocols such as SSL and HTTP. These protocols are flexible and can be used for almost anything. However, using them to synchronize game state manually can be a large amount of work. Sometimes that work can't be avoided or is worth it, for example when working with a custom server implementation on the backend. But in most cases, it's worthwhile to consider Godot's high-level networking API, which sacrifices some of the fine-grained control of low-level networking for greater ease of use."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:14
msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:16
msgid "TCP ensures packets will always arrive reliably and in order, but latency is generally higher due to error correction. It's also quite a complex protocol because it understands what a \"connection\" is, and optimizes for goals that often don't suit applications like multiplayer games. Packets are buffered to be sent in larger batches, trading less per-packet overhead for higher latency. This can be useful for things like HTTP, but generally not for games. Some of this can be configured and disabled (e.g. by disabling \"Nagle's algorithm\" for the TCP connection)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:18
msgid "UDP is a simpler protocol, which only sends packets (and has no concept of a \"connection\"). No error correction makes it pretty quick (low latency), but packets may be lost along the way or received in the wrong order. Added to that, the MTU (maximum packet size) for UDP is generally low (only a few hundred bytes), so transmitting larger packets means splitting them, reorganizing them and retrying if a part fails."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:23
msgid "In general, TCP can be thought of as reliable, ordered, and slow; UDP as unreliable, unordered and fast. Because of the large difference in performance, it often makes sense to re-build the parts of TCP wanted for games (optional reliability and packet order), while avoiding the unwanted parts (congestion/traffic control features, Nagle's algorithm, etc). Due to this, most game engines come with such an implementation, and Godot is no exception."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:26
msgid "In summary, you can use the low-level networking API for maximum control and implement everything on top of bare network protocols or use the high-level API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy lifting behind the scenes in a generally optimized way."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:28
msgid "Most of Godot's supported platforms offer all or most of the mentioned high- and low-level networking features. As networking is always largely hardware and operating system dependent, however, some features may change or not be available on some target platforms. Most notably, the HTML5 platform currently offers WebSockets and WebRTC support but lacks some of the higher-level features, as well as raw access to low-level protocols like TCP and UDP."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:34
msgid "More about TCP/IP, UDP, and networking: https://gafferongames.com/post/udp_vs_tcp/"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:37
msgid "Gaffer On Games has a lot of useful articles about networking in Games (`here <https://gafferongames.com/categories/game-networking/>`__), including the comprehensive `introduction to networking models in games <https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:41
msgid "If you want to use your low-level networking library of choice instead of Godot's built-in networking, see here for an example: https://github.com/PerduGames/gdnet3"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:45
msgid "Adding networking to your game comes with some responsibility. It can make your application vulnerable if done wrong and may lead to cheats or exploits. It may even allow an attacker to compromise the machines your application runs on and use your servers to send spam, attack others or steal your users data if they play your game."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:50
msgid "This is always the case when networking is involved and has nothing to do with Godot. You can of course experiment, but when you release a networked application, always take care of any possible security concerns."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:55
msgid "Mid level abstraction"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:57
msgid "Before going into how we would like to synchronize a game across the network, it can be helpful to understand how the base network API for synchronization works."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:59
msgid "Godot uses a mid-level object :ref:`NetworkedMultiplayerPeer <class_NetworkedMultiplayerPeer>`. This object is not meant to be created directly, but is designed so that several C++ implementations can provide it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:62
msgid "This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it inherits all the useful methods for serializing, sending and receiving data. On top of that, it adds methods to set a peer, transfer mode, etc. It also includes signals that will let you know when peers connect or disconnect."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:64
msgid "This class interface can abstract most types of network layers, topologies and libraries. By default, Godot provides an implementation based on ENet (:ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), one based on WebRTC (:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`), and one based on WebSocket (:ref:`WebSocketMultiplayerPeer <class_WebSocketMultiplayerPeer>`), but this could be used to implement mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/console-specific networking APIs."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:70
msgid "For most common cases, using this object directly is discouraged, as Godot provides even higher level networking facilities. Yet it is made available in case a game has specific needs for a lower level API."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:74
msgid "Initializing the network"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:76
msgid "The object that controls networking in Godot is the same one that controls everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:78
msgid "To initialize high-level networking, the SceneTree must be provided a NetworkedMultiplayerPeer object."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:80
msgid "To create that object, it first has to be initialized as a server or client."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:82
msgid "Initializing as a server, listening on the given port, with a given maximum number of peers:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:90
msgid "Initializing as a client, connecting to a given IP and port:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:98
msgid "Get the previously set network peer:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:104
msgid "Checking whether the tree is initialized as a server or client:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:110
msgid "Terminating the networking feature:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:116
msgid "(Although it may make sense to send a message first to let the other peers know you're going away instead of letting the connection close or timeout, depending on your game.)"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:120
msgid "When exporting to Android, make sure to enable the ``INTERNET`` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:126
msgid "Managing connections"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:128
msgid "Some games accept connections at any time, others during the lobby phase. Godot can be requested to no longer accept connections at any point (see ``set_refuse_new_network_connections(bool)`` and related methods on :ref:`SceneTree <class_SceneTree>`). To manage who connects, Godot provides the following signals in SceneTree:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:131
msgid "Server and Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:133
msgid "``network_peer_connected(int id)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:134
msgid "``network_peer_disconnected(int id)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:136
msgid "The above signals are called on every peer connected to the server (including on the server) when a new peer connects or disconnects. Clients will connect with a unique ID greater than 1, while network peer ID 1 is always the server. Anything below 1 should be handled as invalid. You can retrieve the ID for the local system via :ref:`SceneTree.get_network_unique_id() <class_SceneTree_method_get_network_unique_id>`. These IDs will be useful mostly for lobby management and should generally be stored, as they identify connected peers and thus players. You can also use IDs to send messages only to certain peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:142
msgid "Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:144
msgid "``connected_to_server``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:145
msgid "``connection_failed``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:146
msgid "``server_disconnected``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:148
msgid "Again, all these functions are mainly useful for lobby management or for adding/removing players on the fly. For these tasks, the server clearly has to work as a server and you have to perform tasks manually such as sending a newly connected player information about other already connected players (e.g. their names, stats, etc)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:152
msgid "Lobbies can be implemented any way you want, but the most common way is to use a node with the same name across scenes in all peers. Generally, an autoloaded node/singleton is a great fit for this, to always have access to, e.g. \"/root/lobby\"."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:156
msgid "RPC"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:158
msgid "To communicate between peers, the easiest way is to use RPCs (remote procedure calls). This is implemented as a set of functions in :ref:`Node <class_Node>`:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:161
msgid "``rpc(\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:162
msgid "``rpc_id(<peer_id>,\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:163
msgid "``rpc_unreliable(\"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:164
msgid "``rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:166
msgid "Synchronizing member variables is also possible:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:168
msgid "``rset(\"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:169
msgid "``rset_id(<peer_id>, \"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:170
msgid "``rset_unreliable(\"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:171
msgid "``rset_unreliable_id(<peer_id>, \"variable\", value)``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:173
msgid "Functions can be called in two fashions:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:175
msgid "Reliable: when the function call arrives, an acknowledgement will be sent back; if the acknowledgement isn't received after a certain amount of time, the function call will be re-transmitted."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:176
msgid "Unreliable: the function call is sent only once, without checking to see if it arrived or not, but also without any extra overhead."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:178
msgid "In most cases, reliable is desired. Unreliable is mostly useful when synchronizing object positions (sync must happen constantly, and if a packet is lost, it's not that bad because a new one will eventually arrive and it would likely be outdated because the object moved further in the meantime, even if it was resent reliably)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:181
msgid "There is also :ref:`SceneTree.get_rpc_sender_id() <class_SceneTree_method_get_rpc_sender_id>`, which can be used to check which peer (or peer ID) sent an RPC."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:184
msgid "Back to lobby"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:186
msgid "Let's get back to the lobby. Imagine that each player that connects to the server will tell everyone about it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:232
msgid "You might have already noticed something different, which is the usage of the ``remote`` keyword on the ``register_player`` function:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:238
msgid "This keyword is one of many that allow a function to be called by a remote procedure call (RPC). There are six of them total:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:240
msgid "``remote``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:241
msgid "``remotesync``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:242
msgid "``puppet``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:243
msgid "``puppetsync``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:244
msgid "``master``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:245
msgid "``mastersync``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:247
msgid "Each of them designate who can call the rpc, and optionally ``sync`` if the RPC can be called locally."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:249
msgid "If no rpc keywords are added, Godot will block any attempts to call functions remotely. This makes security work a lot easier (so a client can't call a function to delete a file on another client's system)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:252
msgid "The ``remote`` keyword can be called by any peer, including the server and all clients. The ``puppet`` keyword means a call can be made from the network master to any network puppet. The ``master`` keyword means a call can be made from any network puppet to the network master."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:256
msgid "If ``sync`` is included, the call can also be made locally. For example, to allow the network master to change the player's position on all peers:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:263
msgid "You can also use :ref:`SceneTree.get_rpc_sender_id() <class_SceneTree_method_get_rpc_sender_id>` to have more advanced rules on how an rpc can be called."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:265
msgid "These keywords are further explained in :ref:`Synchronizing the game <doc_high_level_multiplayer_synchronizing>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:267
msgid "With this, lobby management should be more or less explained. Once you have your game going, you will most likely want to add some extra security to make sure clients don't do anything funny (just validate the info they send from time to time, or before game start). For the sake of simplicity and because each game will share different information, this is not shown here."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:272
msgid "Starting the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:274
msgid "Once enough players have gathered in the lobby, the server should probably start the game. This is nothing special in itself, but we'll explain a few nice tricks that can be done at this point to make your life much easier."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:278
msgid "Player scenes"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:280
msgid "In most games, each player will likely have its own scene. Remember that this is a multiplayer game, so in every peer you need to instance **one scene for each player connected to it**. For a 4 player game, each peer needs to instance 4 player nodes."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:283
msgid "So, how to name such nodes? In Godot, nodes need to have a unique name. It must also be relatively easy for a player to tell which node represents each player ID."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:286
msgid "The solution is to simply name the *root nodes of the instanced player scenes as their network ID*. This way, they will be the same in every peer and RPC will work great! Here is an example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:316
msgid "Depending on when you execute pre_configure_game(), you may need to change any calls to ``add_child()`` to be deferred via ``call_deferred()``, as the SceneTree is locked while the scene is being created (e.g. when ``_ready()`` is being called)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:320
msgid "Synchronizing game start"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:322
msgid "Setting up players might take different amounts of time for every peer due to lag, different hardware, or other reasons. To make sure the game will actually start when everyone is ready, pausing the game until all players are ready can be useful:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:331
msgid "When the server gets the OK from all the peers, it can tell them to start, as for example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:357
msgid "Synchronizing the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:359
msgid "In most games, the goal of multiplayer networking is that the game runs synchronized on all the peers playing it. Besides supplying an RPC and remote member variable set implementation, Godot adds the concept of network masters."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:363
msgid "Network master"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:365
msgid "The network master of a node is the peer that has the ultimate authority over it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:367
msgid "When not explicitly set, the network master is inherited from the parent node, which if not changed, is always going to be the server (ID 1). Thus the server has authority over all nodes by default."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:369
msgid "The network master can be set with the function :ref:`Node.set_network_master(id, recursive) <class_Node_method_set_network_master>` (recursive is ``true`` by default and means the network master is recursively set on all child nodes of the node as well)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:372
msgid "Checking that a specific node instance on a peer is the network master for this node for all connected peers is done by calling :ref:`Node.is_network_master() <class_Node_method_is_network_master>`. This will return ``true`` when executed on the server and ``false`` on all client peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:374
msgid "If you have paid attention to the previous example, it's possible you noticed that each peer was set to have network master authority for their own player (Node) instead of the server:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:394
msgid "Each time this piece of code is executed on each peer, the peer makes itself master on the node it controls, and all other nodes remain as puppets with the server being their network master."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:396
msgid "To clarify, here is an example of how this looks in the `bomber demo <https://github.com/godotengine/godot-demo-projects/tree/master/networking/multiplayer_bomber>`_:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:403
msgid "Master and puppet keywords"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:407
msgid "The real advantage of this model is when used with the ``master``/``puppet`` keywords in GDScript (or their equivalent in C# and Visual Script). Similarly to the ``remote`` keyword, functions can also be tagged with them:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:410
msgid "Example bomb code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:418
msgid "Example player code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:435
msgid "In the above example, a bomb explodes somewhere (likely managed by whoever is the master of this bomb-node, e.g. the host). The bomb knows the bodies (player nodes) in the area, so it checks that they contain an ``exploded`` method before calling it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:438
msgid "Recall that each peer has a complete set of instances of player nodes, one instance for each peer (including itself and the host). Each peer has set itself as the master of the instance corresponding to itself, and it has set a different peer as the master for each of the other instances."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:442
msgid "Now, going back to the call to the ``exploded`` method, the bomb on the host has called it remotely on all bodies in the area that have the method. However, this method is in a player node and has a ``master`` keyword."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:445
msgid "The ``master`` keyword on the ``exploded`` method in the player node means two things for how this call is made. Firstly, from the perspective of the calling peer (the host), the calling peer will only attempt to remotely call the method on the peer that it has set as the network master of the player node in question. Secondly, from the perspective of the peer the host is sending the call to, the peer will only accept the call if it set itself as the network master of the player node with the method being called (which has the ``master`` keyword). This works well as long as all peers agree on who is the master of what."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:452
msgid "The above setup means that only the peer who owns the affected body will be responsible for telling all the other peers that its body was stunned, after being remotely instructed to do so by the host's bomb. The owning peer therefore (still in the ``exploded`` method) tells all the other peers that its player node was stunned. The peer does this by remotely calling the ``stun`` method on all instances of that player node (on the other peers). Because the ``stun`` method has the ``puppet`` keyword, only peers who did not set themselves as the network master of the node will call it (in other words, those peers are set as puppets for that node by virtue of not being the network master of it)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:459
msgid "The result of this call to ``stun`` is to make the player look stunned on the screen of all the peers, including the current network master peer (due to the local call to ``stun`` after ``rpc(\"stun\")``)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:462
msgid "The master of the bomb (the host) repeats the above steps for each of the bodies in the area, such that all the instances of any player in the bomb area get stunned on the screens of all the peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:465
msgid "Note that you could also send the ``stun()`` message only to a specific player by using ``rpc_id(<id>, \"exploded\", bomb_owner)``. This may not make much sense for an area-of-effect case like the bomb, but might in other cases, like single target damage."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:473
msgid "Exporting for dedicated servers"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:475
msgid "Once you've made a multiplayer game, you may want to export it to run it on a dedicated server with no GPU available. See :ref:`doc_exporting_for_dedicated_servers` for more information."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:481
msgid "The code samples on this page aren't designed to run on a dedicated server. You'll have to modify them so the server isn't considered to be a player. You'll also have to modify the game starting mechanism so that the first player who joins can start the game."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:488
msgid "The bomberman example here is largely for illustrational purposes, and does not do anything on the host-side to handle the case where a peer uses a custom client to cheat by for example refusing to stun itself. In the current implementation such cheating is perfectly possible because each client is the network master of its own player, and the network master of a player is the one which decides whether to call the I-was-stunned method (``stun``) on all of the other peers and itself."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
