# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:4
msgid "Static typing in GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:6
msgid "In this guide, you will learn:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:8
msgid "**How to use types in GDScript**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:9
msgid "That **static types can help you avoid bugs**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:11
msgid "Where and how you use this new language feature is entirely up to you: you can use it only in some sensitive GDScript files, use it everywhere, or write code like you always did!"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:15
msgid "Static types can be used on variables, constants, functions, parameters, and return types."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:20
msgid "Typed GDScript is available since Godot 3.1."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:23
msgid "A brief look at static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:25
msgid "With typed GDScript, Godot can detect even more errors as you write code! It gives you and your teammates more information as you're working, as the arguments' types show up when you call a method."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:29
msgid "Imagine you're programming an inventory system. You code an ``Item`` node, then an ``Inventory``. To add items to the inventory, the people who work with your code should always pass an ``Item`` to the ``Inventory.add`` method. With types, you can enforce this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:49
msgid "Another significant advantage of typed GDScript is the new **warning system**. From version 3.1, Godot gives you warnings about your code as you write it: the engine identifies sections of your code that may lead to issues at runtime, but lets you decide whether or not you want to leave the code as it is. More on that in a moment."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:55
msgid "Static types also give you better code completion options. Below, you can see the difference between a dynamic and a static typed completion options for a class called ``PlayerController``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:59
msgid "You've probably stored a node in a variable before, and typed a dot to be left with no autocomplete suggestions:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:None
msgid "code completion options for dynamic"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:65
msgid "This is due to dynamic code. Godot cannot know what node or value type you're passing to the function. If you write the type explicitly however, you will get all public methods and variables from the node:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:None
msgid "code completion options for typed"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:72
msgid "In the future, typed GDScript will also increase code performance: Just-In-Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:76
msgid "Overall, typed programming gives you a more structured experience. It helps prevent errors and improves the self-documenting aspect of your scripts. This is especially helpful when you're working in a team or on a long-term project: studies have shown that developers spend most of their time reading other people's code, or scripts they wrote in the past and forgot about. The clearer and the more structured the code, the faster it is to understand, the faster you can move forward."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:85
msgid "How to use static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:87
msgid "To define the type of a variable or a constant, write a colon after the variable's name, followed by its type. E.g. ``var health: int``. This forces the variable's type to always stay the same:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:96
msgid "Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:105
msgid "Currently you can use three types ofâ€¦ types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:107
msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:108
msgid "Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:110
msgid "Your own custom classes. Look at the new :ref:`class_name <doc_gdscript_basics_class_name>` feature to register types in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:115
msgid "You don't need to write type hints for constants, as Godot sets it automatically from the assigned value. But you can still do so to make the intent of your code clearer."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:118
msgid "Custom variable types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:120
msgid "You can use any class, including your custom classes, as types. There are two ways to use them in scripts. The first method is to preload the script you want to use as a type in a constant:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:129
msgid "The second method is to use the ``class_name`` keyword when you create. For the example above, your Rifle.gd would look like this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:137
msgid "If you use ``class_name``, Godot registers the Rifle type globally in the editor, and you can use it anywhere, without having to preload it into a constant:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:146
msgid "Variable casting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:148
msgid "Type casting is a key concept in typed languages. Casting is the conversion of a value from one type to another."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:151
msgid "Imagine an Enemy in your game, that ``extends Area2D``. You want it to collide with the Player, a ``KinematicBody2D`` with a script called ``PlayerController`` attached to it. You use the ``on_body_entered`` signal to detect the collision. With typed code, the body you detect is going to be a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the ``_on_body_entered`` callback."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:158
msgid "You can check if this ``PhysicsBody2D`` is your Player with the ``as`` casting keyword, and using the colon ``:`` again to force the variable to use this type. This forces the variable to stick to the ``PlayerController`` type:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:172
msgid "As we're dealing with a custom type, if the ``body`` doesn't extend ``PlayerController``, the ``player``\\ variable will be set to ``null``. We can use this to check if the body is the player or not. We will also get full autocompletion on the player variable thanks to that cast."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:179
msgid "If you try to cast with a built-in type and it fails, Godot will throw an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:184
msgid "Safe lines"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:186
msgid "You can also use casting to ensure safe lines. Safe lines are a new tool in Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can mix and match typed and dynamic code, at times, Godot doesn't have enough information to know if an instruction will trigger an error or not at runtime."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:192
msgid "This happens when you get a child node. Let's take a timer for example: with dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two classes it extends. With dynamic GDScript, you also don't care about the node's type as long as it has the methods you need to call."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:200
msgid "You can use casting to tell Godot the type you expect when you get a node: ``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will ensure the type works and if so, the line number will turn green at the left of the script editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:208
msgid "Unsafe vs Safe Line"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:208
msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:212
msgid "You can turn off safe lines or change their color in the editor settings."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:215
msgid "Define the return type of a function with the arrow ->"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:217
msgid "To define the return type of a function, write a dash and a right angle bracket ``->`` after its declaration, followed by the return type:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:225
msgid "The type ``void`` means the function does not return anything. You can use any type, as with variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:234
msgid "You can also use your own nodes as return types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:250
msgid "Typed or dynamic: stick to one style"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:252
msgid "Typed GDScript and dynamic GDScript can coexist in the same project. But it's recommended to stick to either style for consistency in your codebase, and for your peers. It's easier for everyone to work together if you follow the same guidelines, and faster to read and understand other people's code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:258
msgid "Typed code takes a little more writing, but you get the benefits we discussed above. Here's an example of the same, empty script, in a dynamic style:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:274
msgid "And with static typing:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:288
msgid "As you can see, you can also use types with the engine's virtual methods. Signal callbacks, like any methods, can also use types. Here's a ``body_entered`` signal in a dynamic style:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:297
msgid "And the same callback, with type hints:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:304
msgid "You're free to replace, e.g. the ``CollisionObject2D``, with your own type, to cast parameters automatically:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:315
msgid "The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we make sure it is our ``Bullet``, a node we created for our project. If it's anything else, like an ``Area2D``, or any node that doesn't extend ``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:321
msgid "Warning system"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:325
msgid "Documentation about the GDScript warning system has been moved to :ref:`doc_gdscript_warning_system`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:329
msgid "Cases where you can't specify types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:331
msgid "To wrap up this introduction, let's cover a few cases where you can't use type hints. All the examples below **will trigger errors**."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:334
msgid "You can't use Enums as types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:341
msgid "You can't specify the type of individual members in an array. This will give you an error:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:348
msgid "You can't force the assignment of types in a ``for`` loop, as each element the ``for`` keyword loops over already has a different type. So you **cannot** write:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:358
msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:381
msgid "Summary"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/static_typing.rst:383
msgid "Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it helps you write more structured code, avoid common errors, and create scalable systems. In the future, static types will also bring you a nice performance boost thanks to upcoming compiler optimizations."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
