# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:4
msgid "GDScript basics"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:9
msgid "*GDScript* is a high-level, dynamically typed programming language used to create content. It uses a syntax similar to `Python <https://en.wikipedia.org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and many keywords are similar). Its goal is to be optimized for and tightly integrated with Godot Engine, allowing great flexibility for content creation and integration."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:21
msgid "Documentation about GDScript's history has been moved to the :ref:`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:25
msgid "Example of GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:27
msgid "Some people can learn better by taking a look at the syntax, so here's a simple example of how GDScript looks."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:110
msgid "If you have previous experience with statically typed languages such as C, C++, or C# but never used a dynamically typed one before, it is advised you read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:115
msgid "Language"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:117
msgid "In the following, an overview is given to GDScript. Details, such as which methods are available to arrays or other objects, should be looked up in the linked class descriptions."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:122
msgid "Identifiers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:124
msgid "Any string that restricts itself to alphabetic characters (``a`` to ``z`` and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an identifier. Additionally, identifiers must not begin with a digit. Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:130
msgid "Keywords"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:132
msgid "The following is the list of keywords supported by the language. Since keywords are reserved words (tokens), they can't be used as identifiers. Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in types as listed in the following sections are also reserved."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:137
msgid "Keywords are defined in the `GDScript tokenizer <https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in case you want to take a look under the hood."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:141
msgid "Keyword"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:141
msgid "Description"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:143
msgid "if"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:143
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:145
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:147
msgid "See `if/else/elif`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:145
msgid "elif"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:147
msgid "else"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:149
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:888
msgid "for"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:149
msgid "See for_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:151
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:877
msgid "while"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:151
msgid "See while_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:153
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:923
msgid "match"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:153
msgid "See match_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:155
msgid "break"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:155
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:157
msgid "continue"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:157
msgid "Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:159
msgid "pass"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:159
msgid "Used where a statement is required syntactically but execution of code is undesired, e.g. in empty functions."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:161
msgid "return"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:161
msgid "Returns a value from a function."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:163
msgid "class"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:163
msgid "Defines an inner class."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:165
msgid "class_name"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:165
msgid "Defines a class name and optional icon for your script."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:167
msgid "extends"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:167
msgid "Defines what class to extend with the current class."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:169
msgid "is"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:169
msgid "Tests whether a variable extends a given class, or is of a given built-in type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:171
msgid "as"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:171
msgid "Cast the value to a given type if possible."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:173
msgid "self"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:173
msgid "Refers to current class instance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:175
msgid "tool"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:175
msgid "Executes the script in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:177
msgid "signal"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:177
msgid "Defines a signal."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:179
msgid "func"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:179
msgid "Defines a function."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:181
msgid "static"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:181
msgid "Defines a static function. Static member variables are not allowed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:183
msgid "const"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:183
msgid "Defines a constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:185
msgid "enum"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:185
msgid "Defines an enum."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:187
msgid "var"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:187
msgid "Defines a variable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:189
msgid "onready"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:189
msgid "Initializes a variable once the Node the script is attached to and its children are part of the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:191
msgid "export"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:191
msgid "Saves a variable along with the resource it's attached to and makes it visible and modifiable in the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:193
msgid "setget"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:193
msgid "Defines setter and getter functions for a variable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:195
msgid "breakpoint"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:195
msgid "Editor helper for debugger breakpoints."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:197
msgid "preload"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:197
msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:199
msgid "yield"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:199
msgid "Coroutine support. See `Coroutines with yield`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:201
msgid "assert"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:201
msgid "Asserts a condition, logs error on failure. Ignored in non-debug builds. See `Assert keyword`_."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:203
msgid "remote"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:203
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:205
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:207
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:209
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:211
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:213
msgid "Networking RPC annotation. See :ref:`high-level multiplayer docs <doc_high_level_multiplayer>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:205
msgid "master"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:207
msgid "puppet"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:209
msgid "remotesync"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:211
msgid "mastersync"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:213
msgid "puppetsync"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:215
msgid "PI"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:215
msgid "PI constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:217
msgid "TAU"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:217
msgid "TAU constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:219
msgid "INF"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:219
msgid "Infinity constant. Used for comparisons."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:221
msgid "NAN"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:221
msgid "NAN (not a number) constant. Used for comparisons."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:225
msgid "Operators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:227
msgid "The following is the list of supported operators and their precedence."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:230
msgid "**Operator**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:230
msgid "**Description**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:232
msgid "``x[index]``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:232
msgid "Subscription (highest priority)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:234
msgid "``x.attribute``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:234
msgid "Attribute reference"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:236
msgid "``foo()``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:236
msgid "Function call"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:238
msgid "``is``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:238
msgid "Instance type checker"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:240
msgid "``~``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:240
msgid "Bitwise NOT"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:242
msgid "``-x``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:242
msgid "Negative / Unary negation"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:244
msgid "``*`` ``/`` ``%``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:244
msgid "Multiplication / Division / Remainder"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:246
msgid "These operators have the same behavior as C++. Integer division is truncated rather than returning a fractional number, and the % operator is only available for ints (\"fmod\" for floats), and is additionally used for Format Strings"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:254
msgid "``+``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:254
msgid "Addition / Concatenation of arrays"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:256
msgid "``-``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:256
msgid "Subtraction"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:258
msgid "``<<`` ``>>``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:258
msgid "Bit shifting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:260
msgid "``&``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:260
msgid "Bitwise AND"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:262
msgid "``^``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:262
msgid "Bitwise XOR"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:264
msgid "``|``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:264
msgid "Bitwise OR"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:266
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:266
msgid "Comparisons"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:268
msgid "``in``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:268
msgid "When used with the ``if`` keyword it checks if a value is within a string, list, range, dictionary, or node. When used with the ``for`` keyword it is used to iterate though the contents of a string, list, range, dictionary or node."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:275
msgid "``!`` ``not``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:275
msgid "Boolean NOT"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:277
msgid "``and`` ``&&``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:277
msgid "Boolean AND"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:279
msgid "``or`` ``||``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:279
msgid "Boolean OR"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:281
msgid "``if x else``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:281
msgid "Ternary if/else"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:283
msgid "``as``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:283
msgid "Type casting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:285
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=`` ``<<=`` ``>>=``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:285
msgid "Assignment (lowest priority)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:289
msgid "Literals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:292
msgid "**Literal**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:292
msgid "**Type**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:294
msgid "``45``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:294
msgid "Base 10 integer"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:296
msgid "``0x8f51``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:296
msgid "Base 16 (hexadecimal) integer"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:298
msgid "``0b101010``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:298
msgid "Base 2 (binary) integer"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:300
msgid "``3.14``, ``58.1e-10``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:300
msgid "Floating-point number (real)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:302
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:302
msgid "Strings"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:304
msgid "``\"\"\"Hello\"\"\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:304
msgid "Multiline string"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:306
msgid "``@\"Node/Label\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:306
msgid ":ref:`class_NodePath` or StringName"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:308
msgid "``$NodePath``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:308
msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:311
msgid "Integers and floats can have their numbers separated with ``_`` to make them more readable. The following ways to write numbers are all valid::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:320
msgid "Comments"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:322
msgid "Anything from a ``#`` to the end of the line is ignored and is considered a comment."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:332
msgid "Built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:334
msgid "Built-in types are stack-allocated. They are passed as values. This means a copy is created on each assignment or when passing them as arguments to functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which are passed by reference so they are shared. (Pooled arrays such as ``PoolByteArray`` are still passed as values.)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:341
msgid "Basic built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:343
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:346
msgid "null"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:348
msgid "``null`` is an empty data type that contains no information and can not be assigned any other value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:352
msgid ":ref:`bool <class_bool>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:354
msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:357
msgid ":ref:`int <class_int>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:359
msgid "Short for \"integer\", it stores whole numbers (positive and negative). It is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:363
msgid ":ref:`float <class_float>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:365
msgid "Stores real numbers, including decimals, using floating-point values. It is stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, data structures such as Vector2, Vector3, and PoolRealArray store 32-bit single-precision \"float\" values."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:371
msgid ":ref:`String <class_String>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:373
msgid "A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/Unicode>`_. Strings can contain the following escape sequences:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:377
msgid "**Escape sequence**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:377
msgid "**Expands to**"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:379
msgid "``\\n``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:379
msgid "Newline (line feed)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:381
msgid "``\\t``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:381
msgid "Horizontal tab character"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:383
msgid "``\\r``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:383
msgid "Carriage return"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:385
msgid "``\\a``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:385
msgid "Alert (beep/bell)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:387
msgid "``\\b``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:387
msgid "Backspace"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:389
msgid "``\\f``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:389
msgid "Formfeed page break"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:391
msgid "``\\v``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:391
msgid "Vertical tab character"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:393
msgid "``\\\"``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:393
msgid "Double quote"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:395
msgid "``\\'``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:395
msgid "Single quote"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:397
msgid "``\\\\``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:397
msgid "Backslash"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:399
msgid "``\\uXXXX``"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:399
msgid "Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:403
msgid "GDScript also supports :ref:`doc_gdscript_printf`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:406
msgid "Vector built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:409
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:411
msgid "2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an array."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:415
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:417
msgid "2D Rectangle type containing two vectors fields: ``position`` and ``size``. Also contains an ``end`` field which is ``position + size``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:421
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:423
msgid "3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be accessed as an array."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:427
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:429
msgid "3×2 matrix used for 2D transforms."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:432
msgid ":ref:`Plane <class_Plane>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:434
msgid "3D Plane type in normalized form that contains a ``normal`` vector field and a ``d`` scalar distance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:438
msgid ":ref:`Quat <class_Quat>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:440
msgid "Quaternion is a datatype used for representing a 3D rotation. It's useful for interpolating rotations."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:444
msgid ":ref:`AABB <class_AABB>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:446
msgid "Axis-aligned bounding box (or 3D box) contains 2 vectors fields: ``position`` and ``size``. Also contains an ``end`` field which is ``position + size``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:451
msgid ":ref:`Basis <class_Basis>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:453
msgid "3x3 matrix used for 3D rotation and scale. It contains 3 vector fields (``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:458
msgid ":ref:`Transform <class_Transform>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:460
msgid "3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:464
msgid "Engine built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:467
msgid ":ref:`Color <class_Color>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:469
msgid "Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:473
msgid ":ref:`NodePath <class_NodePath>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:475
msgid "Compiled path to a node used mainly in the scene system. It can be easily assigned to, and from, a String."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:479
msgid ":ref:`RID <class_RID>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:481
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:484
msgid ":ref:`Object <class_Object>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:486
msgid "Base class for anything that is not a built-in type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:489
msgid "Container built-in types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:492
msgid ":ref:`Array <class_Array>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:494
msgid "Generic sequence of arbitrary object types, including other arrays or dictionaries (see below). The array can resize dynamically. Arrays are indexed starting from index ``0``. Negative indices count from the end."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:508
msgid "GDScript arrays are allocated linearly in memory for speed. Large arrays (more than tens of thousands of elements) may however cause memory fragmentation. If this is a concern, special types of arrays are available. These only accept a single data type. They avoid memory fragmentation and use less memory, but are atomic and tend to run slower than generic arrays. They are therefore only recommended to use for large data sets:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:515
msgid ":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from 0 to 255)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:516
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:517
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:518
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:519
msgid ":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 <class_Vector2>` objects."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:520
msgid ":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 <class_Vector3>` objects."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:521
msgid ":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color <class_Color>` objects."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:524
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:526
msgid "Associative container which contains values referenced by unique keys."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:539
msgid "Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:`` and doesn't use quotes to mark string keys (making for slightly less to write). However, keys written in this form can't start with a digit (like any GDScript identifier)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:553
msgid "To add a key to an existing dictionary, access it like an existing key and assign to it::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:569
msgid "The bracket syntax can be used to access properties of any :ref:`class_Object`, not just Dictionaries. Keep in mind it will cause a script error when attempting to index a non-existing property. To avoid this, use the :ref:`Object.get() <class_Object_method_get>` and :ref:`Object.set() <class_Object_method_set>` methods instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:576
msgid "Data"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:579
msgid "Variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:581
msgid "Variables can exist as class members or local to functions. They are created with the ``var`` keyword and may, optionally, be assigned a value upon initialization."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:592
msgid "Variables can optionally have a type specification. When a type is specified, the variable will be forced to have always that same type, and trying to assign an incompatible value will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:596
msgid "Types are specified in the variable declaration using a ``:`` (colon) symbol after the variable name, followed by the type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:604
msgid "If the variable is initialized within the declaration, the type can be inferred, so it's possible to omit the type name::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:610
msgid "Type inference is only possible if the assigned value has a defined type, otherwise it will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:613
msgid "Valid types are:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:615
msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:616
msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:617
msgid "Constant names if they contain a script resource (``MyScript`` if you declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:618
msgid "Other classes in the same script, respecting scope (``InnerClass.NestedClass`` if you declared ``class NestedClass`` inside the ``class InnerClass`` in the same scope)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:619
msgid "Script classes declared with the ``class_name`` keyword."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:622
msgid "Casting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:624
msgid "Values assigned to typed variables must have a compatible type. If it's needed to coerce a value to be of a certain type, in particular for object types, you can use the casting operator ``as``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:628
msgid "Casting between object types results in the same object if the value is of the same type or a subtype of the cast type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:636
msgid "If the value is not a subtype, the casting operation will result in a ``null`` value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:643
msgid "For built-in types, they will be forcibly converted if possible, otherwise the engine will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:652
msgid "Casting is also useful to have better type-safe variables when interacting with the scene tree::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:662
msgid "Constants"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:664
msgid "Constants are values you cannot change when the game is running. Their value must be known at compile-time. Using the ``const`` keyword allows you to give a constant value a name. Trying to assign a value to a constant after it's declared will give you an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:669
msgid "We recommend using constants whenever a value is not meant to change."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:682
msgid "Although the type of constants is inferred from the assigned value, it's also possible to add explicit type specification::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:688
msgid "Assigning a value of an incompatible type will raise an error."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:692
msgid "Since arrays and dictionaries are passed by reference, constants are \"flat\". This means that if you declare a constant array or dictionary, it can still be modified afterwards. They can't be reassigned with another value though."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:697
msgid "Enums"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:699
msgid "Enums are basically a shorthand for constants, and are pretty useful if you want to assign consecutive integers to some constant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:702
msgid "If you pass a name to the enum, it will put all the keys inside a constant dictionary of that name."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:705
msgid "In Godot 3.1 and later, keys in a named enum are not registered as global constants. They should be accessed prefixed by the enum's name (``Name.KEY``); see an example below."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:725
msgid "Functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:727
msgid "Functions always belong to a `class <Classes_>`_. The scope priority for variable look-up is: local → class member → global. The ``self`` variable is always available and is provided as an option for accessing class members, but is not always required (and should *not* be sent as the function's first argument, unlike Python)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:740
msgid "A function can ``return`` at any point. The default return value is ``null``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:742
msgid "Functions can also have type specification for the arguments and for the return value. Types for arguments can be added in a similar way to variables::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:748
msgid "If a function argument has a default value, it's possible to infer the type::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:753
msgid "The return type of the function can be specified after the arguments list using the arrow token (``->``)::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:759
msgid "Functions that have a return type **must** return a proper value. Setting the type as ``void`` means the function doesn't return anything. Void functions can return early with the ``return`` keyword, but they can't return any value."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:768
msgid "Non-void functions must **always** return a value, so if your code has branching statements (such as an ``if``/``else`` construct), all the possible paths must have a return. E.g., if you have a ``return`` inside an ``if`` block but not after it, the editor will raise an error because if the block is not executed, the function won't have a valid value to return."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:776
msgid "Referencing functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:778
msgid "Contrary to Python, functions are *not* first-class objects in GDScript. This means they cannot be stored in variables, passed as an argument to another function or be returned from other functions. This is for performance reasons."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:782
msgid "To reference a function by name at run-time, (e.g. to store it in a variable, or pass it to another function as an argument) one must use the ``call`` or ``funcref`` helpers::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:796
msgid "Static functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:798
msgid "A function can be declared static. When a function is static, it has no access to the instance member variables or ``self``. This is mainly useful to make libraries of helper functions::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:807
msgid "Statements and control flow"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:809
msgid "Statements are standard and can be assignments, function calls, control flow structures, etc (see below). ``;`` as a statement separator is entirely optional."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:814
msgid "if/else/elif"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:816
msgid "Simple conditions are created by using the ``if``/``else``/``elif`` syntax. Parenthesis around conditions are allowed, but not required. Given the nature of the tab-based indentation, ``elif`` can be used instead of ``else``/``if`` to maintain a level of indentation."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:830
msgid "Short statements can be written on the same line as the condition::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:837
msgid "Sometimes, you might want to assign a different initial value based on a boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:843
msgid "Ternary-if expressions can be nested to handle more than 2 cases. When nesting ternary-if expressions, it is recommended to wrap the complete expression over multiple lines to preserve readability::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:866
msgid "You may also wish to check if a value is contained within something. You can use an ``if`` statement combined with the ``in`` operator to accomplish this::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:879
msgid "Simple loops are created by using ``while`` syntax. Loops can be broken using ``break`` or continued using ``continue`` (i.e. skipping to the next iteration of the loop without executing any further code in the current iteration):"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:890
msgid "To iterate through a range, such as an array or table, a *for* loop is used. When iterating over an array, the current array element is stored in the loop variable. When iterating over a dictionary, the *key* is stored in the loop variable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:925
msgid "A ``match`` statement is used to branch execution of a program. It's the equivalent of the ``switch`` statement found in many other languages, but offers some additional features."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:928
msgid "Basic syntax::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:939
msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:941
msgid "Replace ``switch`` with ``match``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:942
msgid "Remove ``case``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:943
msgid "Remove any ``break``\\ s. If you don't want to ``break`` by default, you can use ``continue`` for a fallthrough."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:944
msgid "Change ``default`` to a single underscore."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:947
msgid "**Control flow**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:949
msgid "The patterns are matched from top to bottom. If a pattern matches, the first corresponding block will be executed. After that, the execution continues below the ``match`` statement. You can use ``continue`` to stop execution in the current block and check for an additional match in the patterns below it."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:953
msgid "There are 6 pattern types:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:965
msgid "Constant pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:956
msgid "Constant primitives, like numbers and strings::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:977
msgid "Variable pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:968
msgid "Matches the contents of a variable/enum::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:991
msgid "Wildcard pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:980
msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:982
msgid "It can be used as the equivalent of the ``default`` in a ``switch`` statement in other languages::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1004
msgid "Binding pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:994
msgid "A binding pattern introduces a new variable. Like the wildcard pattern, it matches everything - and also gives that value a name. It's especially useful in array and dictionary patterns::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1025
msgid "Array pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1007
msgid "Matches an array. Every single element of the array pattern is a pattern itself, so you can nest them."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1009
msgid "The length of the array is tested first, it has to be the same size as the pattern, otherwise the pattern doesn't match."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1011
msgid "**Open-ended array**: An array can be bigger than the pattern by making the last subpattern ``..``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1013
msgid "Every subpattern has to be comma-separated."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1052
msgid "Dictionary pattern"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1028
msgid "Works in the same way as the array pattern. Every key has to be a constant pattern."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1030
msgid "The size of the dictionary is tested first, it has to be the same size as the pattern, otherwise the pattern doesn't match."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1032
msgid "**Open-ended dictionary**: A dictionary can be bigger than the pattern by making the last subpattern ``..``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1034
msgid "Every subpattern has to be comma separated."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1036
msgid "If you don't specify a value, then only the existence of the key is checked."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1038
msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1063
msgid "Multiple patterns"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1055
msgid "You can also specify multiple patterns separated by a comma. These patterns aren't allowed to have any bindings in them."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1066
msgid "Classes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1068
msgid "By default, all script files are unnamed classes. In this case, you can only reference them using the file's path, using either a relative or an absolute path. For example, if you name a script file ``character.gd``::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1084
msgid "Registering named classes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1086
msgid "You can give your class a name to register it as a new type in Godot's editor. For that, you use the ``class_name`` keyword. You can optionally add a comma followed by a path to an image, to use it as an icon. Your class will then appear with its new icon in the editor::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1100
msgid "If the script is located in the ``res://addons/`` directory, ``class_name`` will only cause the node to show up in the **Create New Node** dialog if the script is part of an *enabled* editor plugin. See :ref:`doc_making_plugins` for more information."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1105
msgid "Here's a class file example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1127
msgid "Godot's class syntax is compact: it can only contain member variables or functions. You can use static functions, but not static member variables. In the same way, the engine initializes variables every time you create an instance, and this includes arrays and dictionaries. This is in the spirit of thread safety, since scripts can be initialized in separate threads without the user knowing."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1135
msgid "Inheritance"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1137
msgid "A class (stored as a file) can inherit from:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1139
msgid "A global class."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1140
msgid "Another class file."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1141
msgid "An inner class inside another class file."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1143
msgid "Multiple inheritance is not allowed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1145
msgid "Inheritance uses the ``extends`` keyword::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1157
msgid "To check if a given instance inherits from a given class, the ``is`` keyword can be used::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1169
msgid "To call a function in a *parent class* (i.e. one ``extend``-ed in your current class), prepend ``.`` to the function name::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1174
msgid "This is especially useful because functions in extending classes replace functions with the same name in their parent classes. If you still want to call them, you can prefix them with ``.`` (like the ``super`` keyword in other languages)::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1182
msgid "Default functions like  ``_init``, and most notifications such as ``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. are called in all parent classes automatically. There is no need to call them explicitly when overloading them."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1189
msgid "Class constructor"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1191
msgid "The class constructor, called on class instantiation, is named ``_init``. As mentioned earlier, the constructors of parent classes are called automatically when inheriting a class. So, there is usually no need to call ``._init()`` explicitly."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1196
msgid "Unlike the call of a regular function, like in the above example with ``.some_func``, if the constructor from the inherited class takes arguments, they are passed like this::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1203
msgid "This is better explained through examples. Consider this scenario::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1226
msgid "There are a few things to keep in mind here:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1228
msgid "If the inherited class (``State.gd``) defines a ``_init`` constructor that takes arguments (``e`` in this case), then the inheriting class (``Idle.gd``) *must* define ``_init`` as well and pass appropriate parameters to ``_init`` from ``State.gd``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1231
msgid "``Idle.gd`` can have a different number of arguments than the parent class ``State.gd``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1232
msgid "In the example above, ``e`` passed to the ``State.gd`` constructor is the same ``e`` passed in to ``Idle.gd``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1234
msgid "If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to pass some value to the ``State.gd`` parent class, even if it does nothing. This brings us to the fact that you can pass literals in the base constructor as well, not just variables, e.g.::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1244
msgid "Inner classes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1246
msgid "A class file can contain inner classes. Inner classes are defined using the ``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1271
msgid "Classes as resources"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1273
msgid "Classes stored as files are treated as :ref:`resources <class_GDScript>`. They must be loaded from disk to access them in other classes. This is done using either the ``load`` or ``preload`` functions (see below). Instancing of a loaded class resource is done by calling the ``new`` function on the class object::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1290
msgid "Exports"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1294
msgid "Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1297
msgid "Setters/getters"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1299
msgid "It is often useful to know when a class' member variable changes for whatever reason. It may also be desired to encapsulate its access in some way."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1302
msgid "For this, GDScript provides a *setter/getter* syntax using the ``setget`` keyword. It is used directly after a variable definition:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1309
msgid "Whenever the value of ``variable`` is modified by an *external* source (i.e. not from local usage in the class), the *setter* function (``setterfunc`` above) will be called. This happens *before* the value is changed. The *setter* must decide what to do with the new value. Vice versa, when ``variable`` is accessed, the *getter* function (``getterfunc`` above) must ``return`` the desired value. Below is an example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1325
msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1332
msgid "Setters and getters are useful when :ref:`exporting variables <doc_gdscript_exports>` to the editor in tool scripts or plugins, for validating input."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1335
msgid "As said, *local* access will *not* trigger the setter and getter. Here is an illustration of this:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1352
msgid "Tool mode"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1354
msgid "By default, scripts don't run inside the editor and only the exported properties can be changed. In some cases, it is desired that they do run inside the editor (as long as they don't execute game code or manually avoid doing so). For this, the ``tool`` keyword exists and must be placed at the top of the file::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1368
msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1370
msgid "Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool script (especially the script's owner itself). As tool scripts run their code in the editor, misusing them may lead to crashing the editor."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1378
msgid "Memory management"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1380
msgid "If a class inherits from :ref:`class_Reference`, then instances will be freed when no longer in use. No garbage collector exists, just reference counting. By default, all classes that don't define inheritance extend **Reference**. If this is not desired, then a class must inherit :ref:`class_Object` manually and must call ``instance.free()``. To avoid reference cycles that can't be freed, a :ref:`class_WeakRef` function is provided for creating weak references. Here is an example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1402
msgid "Alternatively, when not using references, the ``is_instance_valid(instance)`` can be used to check if an object has been freed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1409
msgid "Signals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1411
msgid "Signals are a tool to emit messages from an object that other objects can react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1424
msgid "Signals are a `Callback <https://en.wikipedia.org/wiki/Callback_(computer_programming)>`_ mechanism. They also fill the role of Observers, a common programming pattern. For more information, read the `Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in the Game Programming Patterns ebook."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1431
msgid "You can connect these signals to methods the same way you connect built-in signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1434
msgid "In the example below, we connect the ``health_depleted`` signal from a ``Character`` node to a ``Game`` node. When the ``Character`` node emits the signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1448
msgid "You can emit as many arguments as you want along with a signal."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1450
msgid "Here is an example where this is useful. Let's say we want a life bar on screen to react to health changes with an animation, but we want to keep the user interface separate from the player in our scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1454
msgid "In our ``Character.gd`` script, we define a ``health_changed`` signal and emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, and from a ``Game`` node higher up our scene tree, we connect it to the ``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` method::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1495
msgid "To use signals, your class has to extend the ``Object`` class or any type extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1498
msgid "In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, then connect the character, that emits the signal, to the receiver, the ``Lifebar`` node in this case."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1512
msgid "This allows the ``Lifebar`` to react to health changes without coupling it to the ``Character`` node."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1515
msgid "You can write optional argument names in parentheses after the signal's definition::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1521
msgid "These arguments show up in the editor's node dock, and Godot can use them to generate callback functions for you. However, you can still emit any number of arguments when you emit signals; it's up to you to emit the correct values."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1527
msgid "GDScript can bind an array of values to connections between a signal and a method. When the signal is emitted, the callback method receives the bound values. These bound arguments are unique to each connection, and the values will stay the same."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1532
msgid "You can use this array of values to add extra constant information to the connection if the emitted signal itself doesn't give you access to all the data that you need."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1536
msgid "Building on the example above, let's say we want to display a log of the damage taken by each character on the screen, like ``Player1 took 22 damage.``. The ``health_changed`` signal doesn't give us the name of the character that took damage. So when we connect the signal to the in-game console, we can add the character's name in the binds array argument::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1550
msgid "Our ``BattleLog`` node receives each element in the binds array as an extra argument::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1563
msgid "Coroutines with yield"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1565
msgid "GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in function. Calling ``yield()`` will immediately return from the current function, with the current frozen state of the same function as the return value. Calling ``resume()`` on this resulting object will continue execution and return whatever the function returns. Once resumed, the state object becomes invalid. Here is an example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1586
#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1607
msgid "Will print::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1592
msgid "It is also possible to pass values between ``yield()`` and ``resume()``, for example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1613
msgid "Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1628
msgid "Coroutines & signals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1630
msgid "The real strength of using ``yield`` is when combined with signals. ``yield`` can accept two arguments, an object and a signal. When the signal is received, execution will recommence. Here are some examples::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1643
msgid "Coroutines themselves use the ``completed`` signal when they transition into an invalid state, for example::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1655
msgid "``my_func`` will only continue execution once both buttons have been pressed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1657
msgid "You can also get the signal's argument once it's emitted by an object:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1664
msgid "If there is more than one argument, ``yield`` returns an array containing the arguments::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1682
msgid "If you're unsure whether a function may yield or not, or whether it may yield multiple times, you can yield to the ``completed`` signal conditionally:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1704
msgid "This ensures that the function returns whatever it was supposed to return regardless of whether coroutines were used internally. Note that using ``while`` would be redundant here as the ``completed`` signal is only emitted when the function didn't yield anymore."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1712
msgid "`onready` keyword"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1714
msgid "When using nodes, it's common to desire to keep references to parts of the scene in a variable. As scenes are only warranted to be configured when entering the active scene tree, the sub-nodes can only be obtained when a call to ``Node._ready()`` is made."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1727
msgid "This can get a little cumbersome, especially when nodes and external references pile up. For this, GDScript has the ``onready`` keyword, that defers initialization of a member variable until ``_ready()`` is called. It can replace the above code with a single line::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1735
msgid "Assert keyword"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1737
msgid "The ``assert`` keyword can be used to check conditions in debug builds. These assertions are ignored in non-debug builds. This means that the expression passed as argument won't be evaluated in a project exported in release mode. Due to this, assertions must **not** contain expressions that have side effects. Otherwise, the behavior of the script would vary depending on whether the project is run in a debug build."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_basics.rst:1749
msgid "When running a project from the editor, the project will be paused if an assertion error occurs."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
