# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:6
msgid "This style guide lists conventions to write elegant GDScript. The goal is to encourage writing clean, readable code and promote consistency across projects, discussions, and tutorials. Hopefully, this will also support the development of auto-formatting tools."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:11
msgid "Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:15
msgid "Style guides aren't meant as hard rulebooks. At times, you may not be able to apply some of the guidelines below. When that happens, use your best judgment, and ask fellow developers for insights."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:19
msgid "In general, keeping your code consistent in your projects and within your team is more important than following this guide to a tee."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:22
msgid "Godot's built-in script editor uses a lot of these conventions by default. Let it help you."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:25
msgid "Here is a complete class example based on these guidelines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:94
msgid "Formatting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:97
msgid "Encoding and special characters"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:99
msgid "Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:100
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:101
msgid "Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:102
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:105
msgid "Indentation"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:107
msgid "Each indent level should be one greater than the block containing it."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:109
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:129
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:148
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:201
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:225
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:275
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:316
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:353
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:378
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:398
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:424
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:818
msgid "**Good**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:116
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:137
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:171
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:212
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:231
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:285
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:335
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:360
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:385
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:405
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:434
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:836
msgid "**Bad**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:126
msgid "Use 2 indent levels to distinguish continuation lines from regular code blocks."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:145
msgid "Exceptions to this rule are arrays, dictionaries, and enums. Use a single indentation level to distinguish continuation lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:195
msgid "Trailing comma"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:197
msgid "Use a trailing comma on the last line in arrays, dictionaries, and enums. This results in easier refactoring and better diffs in version control as the last line doesn't need to be modified when adding new elements."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:223
msgid "Trailing commas are unnecessary in single-line lists, so don't add them in this case."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:238
msgid "Blank lines"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:240
msgid "Surround functions and class definitions with two blank lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:255
msgid "Use one blank line inside functions to separate logical sections."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:257
msgid "We use a single line between classes and function definitions in the class reference and in short code snippets in this documentation."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:261
msgid "Line length"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:263
msgid "Keep individual lines of code under 100 characters."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:265
msgid "If you can, try to keep lines under 80 characters. This helps to read the code on small displays and with two scripts opened side-by-side in an external text editor. For example, when looking at a differential revision."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:270
msgid "One statement per line"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:272
msgid "Never combine multiple statements on a single line. No, C programmers, not even with a single line conditional statement."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:293
msgid "The only exception to that rule is the ternary operator:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:300
msgid "Format multiline statements for readability"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:302
msgid "When you have particularly long ``if`` statements or nested ternary expressions, wrapping them over multiple lines improves readability. Since continuation lines are still part of the same expression, 2 indent levels should be used instead of one."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:306
msgid "GDScript allows wrapping statements using multiple lines using parentheses or backslashes. Parentheses are favored in this style guide since they make for easier refactoring. With backslashes, you have to ensure that the last line never contains a backslash at the end. With parentheses, you don't have to worry about the last line having a backslash at the end."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:312
msgid "When wrapping a conditional expression over multiple lines, the ``and``/``or`` keywords should be placed at the beginning of the line continuation, not at the end of the previous line."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:347
msgid "Avoid unnecessary parentheses"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:349
msgid "Avoid parentheses in expressions and conditional statements. Unless necessary for order of operations or wrapping over multiple lines, they only reduce readability."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:368
msgid "Boolean operators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:370
msgid "Prefer the plain English versions of boolean operators, as they are the most accessible:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:372
msgid "Use ``and`` instead of ``&&``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:373
msgid "Use ``or`` instead of ``||``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:375
msgid "You may also use parentheses around boolean operators to clear any ambiguity. This can make long expressions easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:393
msgid "Comment spacing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:395
msgid "Regular comments should start with a space, but not code that you comment out. This helps differentiate text comments from disabled code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:414
msgid "In the script editor, to toggle the selected code commented, press :kbd:`Ctrl + K`. This feature adds a single # sign at the start of the selected lines."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:419
msgid "Whitespace"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:421
msgid "Always use one space around operators and after commas. Also, avoid extra spaces in dictionary references and function calls."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:444
msgid "Don't use spaces to align expressions vertically:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:453
msgid "Quotes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:455
msgid "Use double quotes unless single quotes make it possible to escape fewer characters in a given string. See the examples below:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:473
msgid "Numbers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:475
msgid "Don't omit the leading or trailing zero in floating-point numbers. Otherwise, this makes them less readable and harder to distinguish from integers at a glance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:479
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:492
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:503
msgid "**Good**::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:484
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:496
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:511
msgid "**Bad**::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:489
msgid "Use lowercase for letters in hexadecimal numbers, as their lower height makes the number easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:500
msgid "Take advantage of GDScript's underscores in literals to make large numbers more readable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:522
msgid "Naming conventions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:524
msgid "These naming conventions follow the Godot Engine style. Breaking these will make your code clash with the built-in naming conventions, leading to inconsistent code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:529
msgid "File names"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:531
msgid "Use snake_case for file names. For named classes, convert the PascalCase class name to snake_case::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:544
msgid "This is consistent with how C++ files are named in Godot's source code. This also avoids case sensitivity issues that can crop up when exporting a project from Windows to other platforms."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:549
msgid "Classes and nodes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:551
msgid "Use PascalCase for class and node names:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:557
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:564
msgid "Functions and variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:566
msgid "Use snake\\_case to name functions and variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:573
msgid "Prepend a single underscore (\\_) to virtual methods functions the user must override, private functions, and private variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:582
msgid "Signals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:584
msgid "Use the past tense to name signals:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:592
msgid "Constants and enums"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:594
msgid "Write constants with CONSTANT\\_CASE, that is to say in all caps with an underscore (\\_) to separate words:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:601
msgid "Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as they are constants:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:615
msgid "Code order"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:617
msgid "This first section focuses on code order. For formatting, see :ref:`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:620
msgid "We suggest to organize GDScript code this way:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:643
msgid "We optimized the order to make it easy to read the code from top to bottom, to help developers reading the code for the first time understand how it works, and to avoid errors linked to the order of variable declarations."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:647
msgid "This code order follows four rules of thumb:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:649
msgid "Properties and signals come first, followed by methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:650
msgid "Public comes before private."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:651
msgid "Virtual callbacks come before the class's interface."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:652
msgid "The object's construction and initialization functions, ``_init`` and ``_ready``, come before functions that modify the object at runtime."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:657
msgid "Class declaration"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:659
msgid "If the code is meant to run in the editor, place the ``tool`` keyword on the first line of the script."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:662
msgid "Follow with the `class_name` if necessary. You can turn a GDScript file into a global type in your project using this feature. For more information, see :ref:`doc_gdscript`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:666
msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:668
msgid "Following that, you should have the class's optional docstring as comments. You can use that to explain the role of your class to your teammates, how it works, and how other developers should use it, for example."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:680
msgid "Signals and properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:682
msgid "Write signal declarations, followed by properties, that is to say, member variables, after the docstring."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:685
msgid "Enums should come after signals, as you can use them as export hints for other properties."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:688
msgid "Then, write constants, exported variables, public, private, and onready variables, in that order."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:713
msgid "The GDScript compiler evaluates onready variables right before the ``_ready`` callback. You can use that to cache node dependencies, that is to say, to get child nodes in the scene that your class relies on. This is what the example above shows."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:719
msgid "Member variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:721
msgid "Don't declare member variables if they are only used locally in a method, as it makes the code more difficult to follow. Instead, declare them as local variables in the method's body."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:726
msgid "Local variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:728
msgid "Declare local variables as close as possible to their first use. This makes it easier to follow the code, without having to scroll too much to find where the variable was declared."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:733
msgid "Methods and static functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:735
msgid "After the class's properties come the methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:737
msgid "Start with the ``_init()`` callback method, that the engine will call upon creating the object in memory. Follow with the ``_ready()`` callback, that Godot calls when it adds a node to the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:741
msgid "These functions should come first because they show how the object is initialized."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:744
msgid "Other built-in virtual callbacks, like ``_unhandled_input()`` and ``_physics_process``, should come next. These control the object's main loop and interactions with the game engine."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:748
msgid "The rest of the class's interface, public and private methods, come after that, in that order."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:785
msgid "Static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:787
msgid "Since Godot 3.1, GDScript supports :ref:`optional static typing<doc_gdscript_static_typing>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:790
msgid "Declared types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:792
msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:798
msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:805
msgid "Inferred types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:807
msgid "In most cases you can let the compiler infer the type, using ``:=``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:813
msgid "However, in a few cases when context is missing, the compiler falls back to the function's return type. For example, ``get_node()`` cannot infer a type unless the scene or file of the node is loaded in memory. In this case, you should set the type explicitly."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:824
msgid "Alternatively, you can use the ``as`` keyword to cast the return type, and that type will be used to infer the type of the var."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:834
msgid "This option is also considered more :ref:`type-safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
