# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:7
msgid "About"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:9
msgid "This tutorial aims to be a quick reference for how to use GDScript more efficiently. It focuses on common cases specific to the language, but also covers a lot of information on dynamically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:13
msgid "It's meant to be especially useful for programmers with little or no previous experience with dynamically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:22
msgid "GDScript is a Dynamically Typed language. As such, its main advantages are that:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is simple and easy to learn."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:27
msgid "Less code written means less errors & mistakes to fix."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:28
msgid "Easier to read the code (less clutter)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:29
msgid "No compilation is required to test."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:30
msgid "Runtime is tiny."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:31
msgid "Duck-typing and polymorphism by nature."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:33
msgid "While the main disadvantages are:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:35
msgid "Less performance than statically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:36
msgid "More difficult to refactor (symbols can't be traced)"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:37
msgid "Some errors that would typically be detected at compile time in statically typed languages only appear while running the code (because expression parsing is more strict)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:40
msgid "Less flexibility for code-completion (some variable types are only known at run-time)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:43
msgid "This, translated to reality, means that Godot+GDScript are a combination designed to create games quickly and efficiently. For games that are very computationally intensive and can't benefit from the engine built-in tools (such as the Vector types, Physics Engine, Math library, etc), the possibility of using C++ is present too. This allows you to still create most of the game in GDScript and add small bits of C++ in the areas that need a performance boost."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:52
msgid "Variables & assignment"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:54
msgid "All variables in a dynamically typed language are \"variant\"-like. This means that their type is not fixed, and is only modified through assignment. Example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:58
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:80
msgid "Static:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:66
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:94
msgid "Dynamic:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:75
msgid "As function arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:77
msgid "Functions are of dynamic nature too, which means they can be called with different arguments, for example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:107
msgid "Pointers & referencing:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:109
msgid "In static languages, such as C or C++ (and to some extent Java and C#), there is a distinction between a variable and a pointer/reference to a variable. The latter allows the object to be modified by other functions by passing a reference to the original one."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:114
msgid "In C# or Java, everything not a built-in type (int, float, sometimes String) is always a pointer or a reference. References are also garbage-collected automatically, which means they are erased when no longer used. Dynamically typed languages tend to use this memory model, too. Some Examples:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:120
msgid "C++:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:136
msgid "Java:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:154
msgid "GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:166
msgid "In GDScript, only base types (int, float, String and PoolArray types) are passed by value to functions (value is copied). Everything else (instances, Arrays, Dictionaries, etc) is passed as reference. Classes that inherit :ref:`class_Reference` (the default if nothing is specified) will be freed when not used, but manual memory management is allowed too if inheriting manually from :ref:`class_Object`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:175
msgid "A value is **passed by value** when it is copied every time it's specified as a function parameter. One consequence of this is that the function cannot modify the parameter in a way that is visible from outside the function::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:192
msgid "A value is **passed by reference** when it is *not* copied every time it's specified as a function parameter. This allows modifying a function parameter within a function body (and having the modified value accessible outside the function). The downside is that the data passed as a function parameter is no longer guaranteed to be immutable, which can cause difficult-to-track bugs if not done carefully::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:213
msgid "Compared to passing by value, passing by reference can perform better when using large objects since copying large objects in memory can be slow."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:216
msgid "Additionally, in Godot, base types such as String are **immutable**. This means that modifying them will *always* return a copy of the original value, rather than modifying the value in-place."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:221
msgid "Arrays"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:223
msgid "Arrays in dynamically typed languages can contain many different mixed datatypes inside and are always dynamic (can be resized at any time). Compare for example arrays in statically typed languages:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:250
msgid "And in GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:259
msgid "In dynamically typed languages, arrays can also double as other datatypes, such as lists:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:269
msgid "Or unordered sets:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:278
msgid "Dictionaries"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:280
msgid "Dictionaries are a powerful tool in dynamically typed languages. Most programmers that come from statically typed languages (such as C++ or C#) ignore their existence and make their life unnecessarily more difficult. This datatype is generally not present in such languages (or only in limited form)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:286
msgid "Dictionaries can map any value to any other value with complete disregard for the datatype used as either key or value. Contrary to popular belief, they are efficient because they can be implemented with hash tables. They are, in fact, so efficient that some languages will go as far as implementing arrays as dictionaries."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:292
msgid "Example of Dictionary:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:299
msgid "Dictionaries are also dynamic, keys can be added or removed at any point at little cost:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:308
msgid "In most cases, two-dimensional arrays can often be implemented more easily with dictionaries. Here's a simple battleship game example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:341
msgid "Dictionaries can also be used as data markup or quick structures. While GDScript's dictionaries resemble python dictionaries, it also supports Lua style syntax and indexing, which makes it useful for writing initial states and quick structs:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:366
msgid "For & while"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:368
msgid "Iterating in some statically typed languages can be quite complex:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:388
msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:395
msgid "Container datatypes (arrays and dictionaries) are iterable. Dictionaries allow iterating the keys:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:403
msgid "Iterating with indices is also possible:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:410
msgid "The range() function can take 3 arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:418
msgid "Some statically typed programming language examples:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:428
msgid "Translate to:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:441
msgid "And backwards looping is done through a negative counter:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:447
msgid "Becomes:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:455
msgid "While"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:457
msgid "while() loops are the same everywhere:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:468
msgid "Custom iterators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:469
msgid "You can create custom iterators in case the default ones don't quite meet your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, and ``_iter_get`` functions in your script. An example implementation of a forward iterator follows:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:501
msgid "And it can be used like any other iterator:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:509
msgid "Make sure to reset the state of the iterator in ``_iter_init``, otherwise nested for-loops that use custom iterators will not work as expected."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:513
msgid "Duck typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:515
msgid "One of the most difficult concepts to grasp when moving from a statically typed language to a dynamic one is duck typing. Duck typing makes overall code design much simpler and straightforward to write, but it's not obvious how it works."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:520
msgid "As an example, imagine a situation where a big rock is falling down a tunnel, smashing everything on its way. The code for the rock, in a statically typed language would be something like:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:531
msgid "This way, everything that can be smashed by a rock would have to inherit Smashable. If a character, enemy, piece of furniture, small rock were all smashable, they would need to inherit from the class Smashable, possibly requiring multiple inheritance. If multiple inheritance was undesired, then they would have to inherit a common class like Entity. Yet, it would not be very elegant to add a virtual method ``smash()`` to Entity only if a few of them can be smashed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:539
msgid "With dynamically typed languages, this is not a problem. Duck typing makes sure you only have to define a ``smash()`` function where required and that's it. No need to consider inheritance, base classes, etc."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:548
msgid "And that's it. If the object that hit the big rock has a smash() method, it will be called. No need for inheritance or polymorphism. Dynamically typed languages only care about the instance having the desired method or member, not what it inherits or the class type. The definition of Duck Typing should make this clearer:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:554
msgid "*\"When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck\"*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:557
msgid "In this case, it translates to:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:559
msgid "*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:561
msgid "Yes, we should call it Hulk typing instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:563
msgid "It's possible that the object being hit doesn't have a smash() function. Some dynamically typed languages simply ignore a method call when it doesn't exist, but GDScript is stricter, so checking if the function exists is desirable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:574
msgid "Then, simply define that method and anything the rock touches can be smashed."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
