# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/overridable_functions.rst:4
msgid "Overridable functions"
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:6
msgid "Godot's Node class provides virtual functions you can override to update nodes every frame or on specific events, like when they enter the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:9
msgid "This document presents the ones you'll use most often."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:11
msgid "Under the hood, these functions rely on Godot's low-level notifications system. To learn more about it, see :ref:`doc_godot_notifications`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:15
msgid "Two functions allow you to initialize and get nodes, besides the class's constructor: ``_enter_tree()`` and ``_ready()``."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:18
msgid "When the node enters the Scene Tree, it becomes active and the engine calls its ``_enter_tree()`` method. That node's children may not be part of the active scene yet. As you can remove and re-add nodes to the scene tree, this function may be called multiple times throughout a node's lifetime."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:23
msgid "Most of the time, you'll use ``_ready()`` instead. This function is called only once in a node's lifetime, after ``_enter_tree()``. ``_ready()`` ensures that all children have entered the scene tree first, so you can safely call ``get_node()`` on it."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:27
msgid "To learn more about getting node references, read :ref:`doc_nodes_and_scene_instances`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:30
msgid "Another related callback is ``_exit_tree()``, which the engine calls every time a node exits the scene tree. This can be when you call :ref:`Node.remove_child() <class_Node_method_remove_child>` or when you free a node."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:71
msgid "The two virtual methods ``_process()`` and ``_physics_process()`` allow you to update the node, every frame and every physics frame respectively. For more information, read the dedicated documentation: :ref:`doc_idle_and_physics_processing`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:101
msgid "Two more essential built-in node callback functions are :ref:`Node._unhandled_input() <class_Node_method__unhandled_input>` and :ref:`Node._input() <class_Node_method__input>`, which you use to both receive and process individual input events. The ``_unhandled_input()`` method receives every key press, mouse click, etc. that have not been handled already in an ``_input()`` callback or in a user interface component. You want to use it for gameplay input in general. The ``_input()`` callback allows you to intercept and process input events before ``_unhandled_input()`` gets them."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:110
msgid "To learn more about inputs in Godot, see the :ref:`Input section <toc-learn-features-inputs>`."
msgstr ""

#: ../../docs/tutorials/scripting/overridable_functions.rst:139
msgid "There are some more overridable functions like :ref:`Node._get_configuration_warning() <class_Node_method__get_configuration_warning>`. Specialized node types provide more callbacks like :ref:`CanvasItem._draw() <class_CanvasItem_method__draw>` to draw programmatically or :ref:`Control._gui_input() <class_Control_method__gui_input>` to handle clicks and input on UI elements."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
