# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:4
msgid "Using physics interpolation"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:5
msgid "How do we incorporate physics interpolation into a Godot game? Are there any caveats?"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:7
msgid "We have tried to make the system as easy to use as possible, and many existing games will work with few changes. That said there are some situations which require special treatment, and these will be described."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:10
msgid "Turn on the physics interpolation setting"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:12
msgid "The first step is to turn on physics interpolation in :ref:`ProjectSettings.physics/common/physics_interpolation<class_ProjectSettings_property_physics/common/physics_interpolation>`. You can now run your game."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:14
msgid "It is likely that nothing looks hugely different, particularly if you are running physics at 60 TPS or a multiple of it. However, quite a bit more is happening behind the scenes."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:18
msgid "To convert an existing game to use interpolation, it is highly recommended that you temporarily set :ref:`ProjectSettings.physics/common/physics_fps<class_ProjectSettings_property_physics/common/physics_fps>` to a low value such as 10, which will make interpolation problems more obvious."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:21
msgid "Move (almost) all game logic from _process to _physics_process"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:23
msgid "The most fundamental requirement for physics interpolation (which you may be doing already) is that you should be moving and performing game logic on your objects within ``_physics_process`` (which runs at a physics tick) rather than ``_process`` (which runs on a rendered frame). This means your scripts should typically be doing the bulk of their processing within ``_physics_process``, including responding to input and AI."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:25
msgid "Setting the transform of objects only within physics ticks allows the automatic interpolation to deal with transforms *between* physics ticks, and ensures the game will run the same whatever machine it is run on. As a bonus, this also reduces CPU usage if the game is rendering at high FPS, since AI logic (for example) will no longer run on every rendered frame."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:27
msgid "If you attempt to set the transform of interpolated objects *outside* the physics tick, the calculations for the interpolated position will be incorrect, and you will get jitter. This jitter may not be visible on your machine, but it *will* occur for some players. For this reason, setting the transform of interpolated objects should be avoided outside of the physics tick. Godot will attempt to produce warnings in the editor if this case is detected."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:29
msgid "This is only a *soft-rule*. There are some occasions where you might want to teleport objects outside of the physics tick (for instance when starting a level, or respawning objects). Still, in general, you should be applying transforms from the physics tick."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:33
msgid "Ensure that all indirect movement happens during physics ticks"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:35
msgid "Consider that in Godot, Nodes can be moved not just directly in your own scripts, but also by automatic methods such as tweening, animation, and navigation. All these methods should also have their timing set to operate on the physics tick rather than each frame (\"idle\"), **if** you are using them to move objects (*these methods can also be used to control properties that are not interpolated*)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:37
msgid "Also consider that nodes can be moved not just by moving themselves, but also by moving parent nodes in the :ref:`SceneTree<class_SceneTree>`. The movement of parents should therefore also only occur during physics ticks."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:40
msgid "Choose a physics tick rate"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:42
msgid "When using physics interpolation, the rendering is decoupled from physics, and you can choose any value that makes sense for your game. You are no longer limited to values that are multiples of the user's monitor refresh rate (for stutter-free gameplay if the target FPS is reached)."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:44
msgid "As a rough guide:"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Low tick rates (10-30)"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Medium tick rates (30-60)"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "High tick rates (60+)"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Better CPU performance"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good physics behaviour in complex scenes"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good with fast physics"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Add some delay to input"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good for first person games"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Good for racing games"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:1
msgid "Simple physics behaviour"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:54
msgid "You can always change the tick rate as you develop, it is as simple as changing the project setting."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:57
msgid "Call reset_physics_interpolation() when teleporting objects"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:59
msgid "Most of the time, interpolation is what you want between two physics ticks. However, there is one situation in which it may *not* be what you want. That is when you are initially placing objects, or moving them to a new location. Here, you don't want a smooth motion between the two - you want an instantaneous move."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:61
msgid "The solution to this is to call the :ref:`Node.reset_physics_interpolation<class_Node_method_reset_physics_interpolation>` function. You should call this function on a Node *after* setting the position/transform. The rest is done for you automatically."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:63
msgid "Even if you forget to call this, it is not usually a problem in most situations (especially at high tick rates). This is something you can easily leave to the polishing phase of your game. The worst that will happen is seeing a streaking motion for a frame or so when you move them - you will know when you need it!"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:65
msgid "You should call ``reset_physics_interpolation()`` *after* setting the new position, rather than before. Otherwise, you will still see the unwanted streaking motion."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:68
msgid "Testing and debugging tips"
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:70
msgid "Even if you intend to run physics at 60 TPS, in order to thoroughly test your interpolation and get the smoothest gameplay, it is highly recommended to temporarily set the physics tick rate to a low value such as 10 TPS."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:72
msgid "The gameplay may not work perfectly, but it should enable you to more easily see cases where you should be calling :ref:`Node.reset_physics_interpolation<class_Node_method_reset_physics_interpolation>`, or where you should be using your own custom interpolation on e.g. a :ref:`Camera<class_Camera>`. Once you have these cases fixed, you can set the physics tick rate back to the desired setting."
msgstr ""

#: ../../docs/tutorials/physics/interpolation/using_physics_interpolation.rst:74
msgid "The other great advantage to testing at a low tick rate is you can often notice other game systems that are synchronized to the physics tick and creating glitches which you may want to work around. Typical examples include setting animation blend values, which you may decide to set in ``_process()`` and interpolate manually."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
