# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/physics/ray-casting.rst:4
msgid "Ray-casting"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:9
msgid "One of the most common tasks in game development is casting a ray (or custom shaped object) and checking what it hits. This enables complex behaviors, AI, etc. to take place. This tutorial will explain how to do this in 2D and 3D."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:14
msgid "Godot stores all the low level game information in servers, while the scene is just a frontend. As such, ray casting is generally a lower-level task. For simple raycasts, node such as :ref:`RayCast <class_RayCast>` and :ref:`RayCast2D <class_RayCast2D>` will work, as they will return every frame what the result of a raycast is."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:21
msgid "Many times, though, ray-casting needs to be a more interactive process so a way to do this by code must exist."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:25
msgid "Space"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:27
msgid "In the physics world, Godot stores all the low level collision and physics information in a *space*. The current 2d space (for 2D Physics) can be obtained by accessing :ref:`CanvasItem.get_world_2d().space <class_CanvasItem_method_get_world_2d>`. For 3D, it's :ref:`Spatial.get_world().space <class_Spatial_method_get_world>`."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:33
msgid "The resulting space :ref:`RID <class_RID>` can be used in :ref:`PhysicsServer <class_PhysicsServer>` and :ref:`Physics2DServer <class_Physics2DServer>` respectively for 3D and 2D."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:38
msgid "Accessing space"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:40
msgid "Godot physics runs by default in the same thread as game logic, but may be set to run on a separate thread to work more efficiently. Due to this, the only time accessing space is safe is during the :ref:`Node._physics_process() <class_Node_method__physics_process>` callback. Accessing it from outside this function may result in an error due to space being *locked*."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:47
msgid "To perform queries into physics space, the :ref:`Physics2DDirectSpaceState <class_Physics2DDirectSpaceState>` and :ref:`PhysicsDirectSpaceState <class_PhysicsDirectSpaceState>` must be used."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:52
msgid "Use the following code in 2D:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:69
msgid "Or more directly:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:84
msgid "And in 3D:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:100
msgid "Raycast query"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:102
msgid "For performing a 2D raycast query, the method :ref:`Physics2DDirectSpaceState.intersect_ray() <class_Physics2DDirectSpaceState_method_intersect_ray>` may be used. For example:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:123
msgid "The result is a dictionary. If the ray didn't hit anything, the dictionary will be empty. If it did hit something, it will contain collision information:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:137
msgid "The ``result`` dictionary when a collision occurs contains the following data:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:152
msgid "The data is similar in 3D space, using Vector3 coordinates."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:155
msgid "Collision exceptions"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:157
msgid "A common use case for ray casting is to enable a character to gather data about the world around it. One problem with this is that the same character has a collider, so the ray will only detect its parent's collider, as shown in the following image:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:164
msgid "To avoid self-intersection, the ``intersect_ray()`` function can take an optional third parameter which is an array of exceptions. This is an example of how to use it from a KinematicBody2D or any other collision object node:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:189
msgid "The exceptions array can contain objects or RIDs."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:192
msgid "Collision Mask"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:194
msgid "While the exceptions method works fine for excluding the parent body, it becomes very inconvenient if you need a large and/or dynamic list of exceptions. In this case, it is much more efficient to use the collision layer/mask system."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:198
msgid "The optional fourth argument for ``intersect_ray()`` is a collision mask. For example, to use the same mask as the parent body, use the ``collision_mask`` member variable:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:224
msgid "See :ref:`doc_physics_introduction_collision_layer_code_example` for details on how to set the collision mask."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:227
msgid "3D ray casting from screen"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:229
msgid "Casting a ray from screen to 3D physics space is useful for object picking. There is not much need to do this because :ref:`CollisionObject <class_CollisionObject>` has an \"input_event\" signal that will let you know when it was clicked, but in case there is any desire to do it manually, here's how."
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:235
msgid "To cast a ray from the screen, you need a :ref:`Camera <class_Camera>` node. A ``Camera`` can be in two projection modes: perspective and orthogonal. Because of this, both the ray origin and direction must be obtained. This is because ``origin`` changes in orthogonal mode, while ``normal`` changes in perspective mode:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:243
msgid "To obtain it using a camera, the following code can be used:"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:271
msgid "Remember that during ``_input()``, the space may be locked, so in practice this query should be run in ``_physics_process()``."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
