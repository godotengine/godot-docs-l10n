# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:4
msgid "Using KinematicBody2D"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:9
msgid "Godot offers several collision objects to provide both collision detection and response. Trying to decide which one to use for your project can be confusing. You can avoid problems and simplify development if you understand how each of them works and what their pros and cons are. In this tutorial, we'll look at the :ref:`KinematicBody2D <class_KinematicBody2D>` node and show some examples of how to use it."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:16
msgid "This document assumes you're familiar with Godot's various physics bodies. Please read :ref:`doc_physics_introduction` first."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:20
msgid "What is a kinematic body?"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:22
msgid "``KinematicBody2D`` is for implementing bodies that are controlled via code. Kinematic bodies detect collisions with other bodies when moving, but are not affected by engine physics properties, like gravity or friction. While this means that you have to write some code to create their behavior, it also means you have more precise control over how they move and react."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:28
msgid "A `KinematicBody2D` can be affected by gravity and other forces, but you must calculate the movement in code. The physics engine will not move a `KinematicBody2D`."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:33
msgid "Movement and collision"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:35
msgid "When moving a ``KinematicBody2D``, you should not set its ``position`` property directly. Instead, you use the ``move_and_collide()`` or ``move_and_slide()`` methods. These methods move the body along a given vector and instantly stop if a collision is detected with another body. After a KinematicBody2D has collided, any *collision response* must be coded manually."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:41
msgid "You should only do Kinematic body movement in the ``_physics_process()`` callback."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:43
msgid "The two movement methods serve different purposes, and later in this tutorial, you'll see examples of how they work."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:47
msgid "``move_and_collide``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:49
msgid "This method takes one parameter: a :ref:`Vector2 <class_Vector2>` indicating the body's relative movement. Typically, this is your velocity vector multiplied by the frame timestep (``delta``). If the engine detects a collision anywhere along this vector, the body will immediately stop moving. If this happens, the method will return a :ref:`KinematicCollision2D <class_KinematicCollision2D>` object."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:55
msgid "``KinematicCollision2D`` is an object containing data about the collision and the colliding object. Using this data, you can calculate your collision response."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:60
msgid "``move_and_slide``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:62
msgid "The ``move_and_slide()`` method is intended to simplify the collision response in the common case where you want one body to slide along the other. It is especially useful in platformers or top-down games, for example."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:66
msgid "``move_and_slide()`` automatically calculates frame-based movement using ``delta``. Do *not* multiply your velocity vector by ``delta`` before passing it to ``move_and_slide()``."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:70
msgid "In addition to the velocity vector, ``move_and_slide()`` takes a number of other parameters allowing you to customize the slide behavior:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:73
msgid "``up_direction`` - *default value:* ``Vector2( 0, 0 )``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:75
msgid "This parameter allows you to define what surfaces the engine should consider being the floor. Setting this lets you use the ``is_on_floor()``, ``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of surface the body is in contact with. The default value means that all surfaces are considered walls."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:80
msgid "``stop_on_slope`` - *default value:* ``false``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:82
msgid "This parameter prevents a body from sliding down slopes when standing still."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:84
msgid "``max_slides`` - *default value:* ``4``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:86
msgid "This parameter is the maximum number of collisions before the body stops moving. Setting it too low may prevent movement entirely."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:89
msgid "``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent to ``45`` degrees)"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:91
msgid "This parameter is the maximum angle before a surface is no longer considered a \"floor.\""
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:93
msgid "``infinite_inertia`` - *default value:* ``true``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:95
msgid "When this parameter is ``true``, the body can push :ref:`RigidBody2D <class_RigidBody2D>` nodes, ignoring their mass, but won't detect collisions with them. If it's ``false`` the body will collide with rigid bodies and stop."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:100
msgid "``move_and_slide_with_snap``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:102
msgid "This method adds some additional functionality to ``move_and_slide()`` by adding the ``snap`` parameter. As long as this vector is in contact with the ground, the body will remain attached to the surface. Note that this means you must disable snapping when jumping, for example. You can do this either by setting ``snap`` to ``Vector2.ZERO`` or by using ``move_and_slide()`` instead."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:110
msgid "Detecting collisions"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:112
msgid "When using ``move_and_collide()`` the function returns a ``KinematicCollision2D`` directly, and you can use this in your code."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:115
msgid "When using ``move_and_slide()`` it's possible to have multiple collisions occur, as the slide response is calculated. To process these collisions, use ``get_slide_count()`` and ``get_slide_collision()``:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:150
msgid "`get_slide_count()` only counts times the body has collided and changed direction."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:152
msgid "See :ref:`KinematicCollision2D <class_KinematicCollision2D>` for details on what collision data is returned."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:156
msgid "Which movement method to use?"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:158
msgid "A common question from new Godot users is: \"How do you decide which movement function to use?\" Often, the response is to use ``move_and_slide()`` because it's \"simpler,\" but this is not necessarily the case. One way to think of it is that ``move_and_slide()`` is a special case, and ``move_and_collide()`` is more general. For example, the following two code snippets result in the same collision response:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:189
msgid "Anything you do with ``move_and_slide()`` can also be done with ``move_and_collide()``, but it might take a little more code. However, as we'll see in the examples below, there are cases where ``move_and_slide()`` doesn't provide the response you want."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:193
msgid "In the example above, we assign the velocity that ``move_and_slide()`` returns back into the ``velocity`` variable. This is because when the character collides with the environment, the function recalculates the speed internally to reflect the slowdown."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:198
msgid "For example, if your character fell on the floor, you don't want it to accumulate vertical speed due to the effect of gravity. Instead, you want its vertical speed to reset to zero."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:202
msgid "``move_and_slide()`` may also recalculate the kinematic body's velocity several times in a loop as, to produce a smooth motion, it moves the character and collides up to five times by default. At the end of the process, the function returns the character's new velocity that we can store in our ``velocity`` variable, and use on the next frame."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:209
msgid "Examples"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:211
msgid "To see these examples in action, download the sample project: :download:`using_kinematic2d.zip <files/using_kinematic2d.zip>`."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:215
msgid "Movement and walls"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:217
msgid "If you've downloaded the sample project, this example is in \"BasicMovement.tscn\"."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:219
msgid "For this example, add a ``KinematicBody2D`` with two children: a ``Sprite`` and a ``CollisionShape2D``. Use the Godot \"icon.png\" as the Sprite's texture (drag it from the Filesystem dock to the *Texture* property of the ``Sprite``). In the ``CollisionShape2D``'s *Shape* property, select \"New RectangleShape2D\" and size the rectangle to fit over the sprite image."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:225
msgid "See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:227
msgid "Attach a script to the KinematicBody2D and add the following code:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:291
msgid "Run this scene and you'll see that ``move_and_collide()`` works as expected, moving the body along the velocity vector. Now let's see what happens when you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with a rectangular collision shape. For visibility, you can use a sprite, a Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:297
msgid "Run the scene again and try moving into the obstacle. You'll see that the ``KinematicBody2D`` can't penetrate the obstacle. However, try moving into the obstacle at an angle and you'll find that the obstacle acts like glue - it feels like the body gets stuck."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:301
msgid "This happens because there is no *collision response*. ``move_and_collide()`` stops the body's movement when a collision occurs. We need to code whatever response we want from the collision."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:305
msgid "Try changing the function to ``move_and_slide(velocity)`` and running again. Note that we removed ``delta`` from the velocity calculation."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:308
msgid "``move_and_slide()`` provides a default collision response of sliding the body along the collision object. This is useful for a great many game types, and may be all you need to get the behavior you want."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:313
msgid "Bouncing/reflecting"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:315
msgid "What if you don't want a sliding collision response? For this example (\"BounceandCollide.tscn\" in the sample project), we have a character shooting bullets and we want the bullets to bounce off the walls."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:319
msgid "This example uses three scenes. The main scene contains the Player and Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:322
msgid "The Player is controlled by the `w` and `s` keys for forward and back. Aiming uses the mouse pointer. Here is the code for the Player, using ``move_and_slide()``:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:409
msgid "And the code for the Bullet:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:471
msgid "The action happens in ``_physics_process()``. After using ``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` object is returned (otherwise, the return is ``Nil``)."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:475
msgid "If there is a returned collision, we use the ``normal`` of the collision to reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:478
msgid "If the colliding object (``collider``) has a ``hit`` method, we also call it. In the example project, we've added a flashing color effect to the Wall to demonstrate this."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:485
msgid "Platformer movement"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:487
msgid "Let's try one more popular example: the 2D platformer. ``move_and_slide()`` is ideal for quickly getting a functional character controller up and running. If you've downloaded the sample project, you can find this in \"Platformer.tscn\"."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:491
msgid "For this example, we'll assume you have a level made of ``StaticBody2D`` objects. They can be any shape and size. In the sample project, we're using :ref:`Polygon2D <class_Polygon2D>` to create the platform shapes."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:495
msgid "Here's the code for the player body:"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:576
msgid "When using ``move_and_slide()``, the function returns a vector representing the movement that remained after the slide collision occurred. Setting that value back to the character's ``velocity`` allows us to move up and down slopes smoothly. Try removing ``velocity =`` and see what happens if you don't do this."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:581
msgid "Also note that we've added ``Vector2(0, -1)`` as the floor normal. This vector points straight upward. As a result, if the character collides with an object that has this normal, it will be considered a floor."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:585
msgid "Using the floor normal allows us to make jumping work, using ``is_on_floor()``. This function will only return ``true`` after a ``move_and_slide()`` collision where the colliding body's normal is within 45 degrees of the given floor vector. You can control the maximum angle by setting ``floor_max_angle``."
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:590
msgid "This angle also allows you to implement other features like wall jumps using ``is_on_wall()``, for example."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
