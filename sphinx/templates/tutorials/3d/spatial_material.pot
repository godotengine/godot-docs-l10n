# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/spatial_material.rst:4
msgid "Spatial Material"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:9
msgid "``SpatialMaterial`` is a default 3D material that aims to provide most of the features artists look for in a material, without the need for writing shader code. However, it can be converted to shader code if additional functionality is needed."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:13
msgid "This tutorial explains most parameters present in ``SpatialMaterial``."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:15
msgid "There are 4 ways to add a ``SpatialMaterial`` to an object. It can be added in the *Material* property of the mesh. It can be added in the *Material* property of the node using the mesh (such as a MeshInstance node), the *Material Override* property of the node using the mesh, and the *Material Overlay*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:22
msgid "If you add a material to the mesh itself, every time that mesh is used it will have that material. If you add a material to the node using the mesh, the material will only be used by that node, it will also override the material property of the mesh. If a material is added in the *Material Override* property of the node, it will only be used by that node. It will also override the regular material property of the node and the material property of the mesh."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:29
msgid "The *Material Overlay* property will render a material **over** the current one being used by the mesh. As an example, this can be used to put a transparent shield effect on a mesh."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:33
msgid "Flags"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:35
msgid "Spatial materials have many flags determining the general usage of a material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:40
msgid "Transparent"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:42
msgid "In Godot, materials are not transparent unless specifically configured to be. The main reason behind this is that transparent materials are rendered using a different technique (sorted from back to front and rendered in order)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:46
msgid "This technique is less efficient (many state changes happen) and makes the materials unusable with many mid- and post-processing effects (such as SSAO, SSR, etc.) that require perfectly opaque geometry."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:50
msgid "For this reason, materials in Godot are assumed opaque unless specified otherwise. The main settings that enable transparency are:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:53
msgid "Transparent flag (this one)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:54
msgid "Blend mode set to other than \"Mix\""
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:55
msgid "Enabling distance or proximity fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:58
msgid "Use Shadow to Opacity"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:60
msgid "Lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:64
msgid "Unshaded"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:66
msgid "In most cases it is common for materials to be affected by lighting (shaded)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:68
msgid "However, in some cases you might want to show just the albedo (color) and ignore the rest. Toggling this flag on will remove all shading and display pure, unlit color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:75
msgid "Vertex Lighting"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:77
msgid "Godot has a more or less uniform cost per pixel thanks to depth pre-pass. All lighting calculations are made by running the lighting shader on every pixel."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:80
msgid "As these calculations are costly, performance can be brought down considerably in some corner cases such as drawing several layers of transparency (which is common in particle systems). Switching to per-vertex lighting may help in these cases."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:85
msgid "Additionally, on low-end or mobile devices, switching to vertex lighting can considerably increase rendering performance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:90
msgid "Keep in mind that when vertex lighting is enabled, only directional lighting can produce shadows (for performance reasons)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:94
msgid "No Depth Test"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:96
msgid "In order for close objects to appear over far away objects, depth testing is performed. Disabling it has the result of objects appearing over (or under) everything else."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:100
msgid "Disabling this makes the most sense for drawing indicators in world space, and works very well with the *Render Priority* property of Material (see the bottom of this page)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:107
msgid "Use Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:109
msgid "This option is only effective when the geometry rendered is made of points (generally it's made of triangles when imported from 3D DCCs). If so, then those points can be resized (see below)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:114
msgid "World Triplanar"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:116
msgid "When using triplanar mapping (see below, in the UV1 and UV2 settings), triplanar is computed in object local space. This option makes triplanar work in world space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:121
msgid "Fixed Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:123
msgid "This causes the object to be rendered at the same size no matter the distance. This is useful mostly for indicators (no depth test and high render priority) and some types of billboards."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:128
msgid "Do Not Receive Shadows"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:130
msgid "Makes the object not receive any kind of shadow that would otherwise be cast onto it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:134
msgid "Disable Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:136
msgid "Makes the object not receive any kind of ambient lighting that would otherwise light it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:140
msgid "Ensure Correct Normals"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:142
msgid "Fixes normals when non-uniform scaling is used."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:145
msgid "Vertex Color"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:147
msgid "This setting allows choosing what is done by default to vertex colors that come from your 3D modelling application. By default, they are ignored."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:153
msgid "Use as Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:155
msgid "Choosing this option means vertex color is used as albedo color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:158
msgid "Is sRGB"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:160
msgid "Most 3D DCCs will likely export vertex colors as sRGB, so toggling this option on will help them look correct."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:164
msgid "Parameters"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:166
msgid "``SpatialMaterial`` also has several configurable parameters to tweak many aspects of the rendering:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:172
msgid "Diffuse Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:174
msgid "Specifies the algorithm used by diffuse scattering of light when hitting the object. The default is *Burley*. Other modes are also available:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:177
msgid "**Burley:** Default mode, the original Disney Principled PBS diffuse algorithm."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:178
msgid "**Lambert:** Is not affected by roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:179
msgid "**Lambert Wrap:** Extends Lambert to cover more than 90 degrees when roughness increases. Works great for hair and simulating cheap subsurface scattering. This implementation is energy conserving."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:182
msgid "**Oren Nayar:** This implementation aims to take microsurfacing into account (via roughness). Works well for clay-like materials and some types of cloth."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:184
msgid "**Toon:** Provides a hard cut for lighting, with smoothing affected by roughness. It is recommended you disable sky contribution from your environment's ambient light settings or disable ambient light in the spatial material to achieve a better effect."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:192
msgid "Specular Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:194
msgid "Specifies how the specular blob will be rendered. The specular blob represents the shape of a light source reflected in the object."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:197
msgid "**ShlickGGX:** The most common blob used by PBR 3D engines nowadays."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:198
msgid "**Blinn:** Common in previous-generation engines. Not worth using nowadays, but left here for the sake of compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:200
msgid "**Phong:** Same as above."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:201
msgid "**Toon:** Creates a toon blob, which changes size depending on roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:202
msgid "**Disabled:** Sometimes the blob gets in the way. Begone!"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:207
msgid "Blend Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:209
msgid "Controls the blend mode for the material. Keep in mind that any mode other than *Mix* forces the object to go through the transparent pipeline."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:212
msgid "**Mix:** Default blend mode, alpha controls how much the object is visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:213
msgid "**Add:** Object is blended additively, nice for flares or some fire-like effects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:215
msgid "**Sub:** Object is subtracted."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:216
msgid "**Mul:** Object is multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:221
msgid "Cull Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:223
msgid "Determines which side of the object is not drawn when backfaces are rendered:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:225
msgid "**Back:** The back of the object is culled when not visible (default)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:226
msgid "**Front:** The front of the object is culled when not visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:227
msgid "**Disabled:** Used for objects that are double-sided (no culling is performed)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:231
msgid "By default, Blender has backface culling disabled on materials and will export materials to match how they render in Blender. This means that materials in Godot will have their cull mode set to **Disabled**. This can decrease performance since backfaces will be rendered, even when they are being culled by other faces. To resolve this, enable **Backface Culling** in Blender's Materials tab, then export the scene to glTF again."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:239
msgid "Depth Draw Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:241
msgid "Specifies when depth rendering must take place."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:243
msgid "**Opaque Only (default):** Depth is only drawn for opaque objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:244
msgid "**Always:** Depth draw is drawn for both opaque and transparent objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:245
msgid "**Never:** No depth draw takes place (do not confuse this with the No Depth Test option above)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:247
msgid "**Depth Pre-Pass:** For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn above. Use this option with transparent grass or tree foliage."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:254
msgid "Line Width"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:256
msgid "When drawing lines, specify the width of the lines being drawn. This option is not available on most modern hardware."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:260
msgid "Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:262
msgid "When drawing points, specify the point size in pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:265
msgid "Billboard Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:267
msgid "Enables billboard mode for drawing materials. This controls how the object faces the camera:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:270
msgid "**Disabled:** Billboard mode is disabled."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:271
msgid "**Enabled:** Billboard mode is enabled, the object's -Z axis will always face the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:273
msgid "**Y-Billboard:** The object's X axis will always be aligned with the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:274
msgid "**Particles:** Most suited for particle systems, because it allows specifying animation options."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:279
msgid "The above options are only enabled for Particle Billboard."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:282
msgid "Billboard Keep Scale"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:284
msgid "Enables scaling a mesh in billboard mode."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:287
msgid "Grow"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:289
msgid "Grows the object vertices in the direction pointed by their normals:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:293
msgid "This is commonly used to create cheap outlines. Add a second material pass, make it black and unshaded, reverse culling (Cull Front), and add some grow:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:300
msgid "Use Alpha Scissor"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:302
msgid "When transparency other than ``0`` or ``1`` is not needed, it's possible to set a threshold to prevent the object from rendering semi-transparent pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:307
msgid "This renders the object via the opaque pipeline, which is faster and allows it to use mid- and post-process effects such as SSAO, SSR, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:311
msgid "Material colors, maps and channels"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:313
msgid "Besides the parameters, what defines materials themselves are the colors, textures, and channels. Godot supports an extensive list of them. They are described in detail below:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:318
msgid "Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:320
msgid "*Albedo* is the base color for the material, on which all the other settings operate. When set to *Unshaded*, this is the only color that is visible. In previous versions of Godot, this channel was named *Diffuse*. The change of name mainly happened because, in PBR (Physically Based Rendering), this color affects many more calculations than just the diffuse lighting path."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:326
msgid "Albedo color and texture can be used together as they are multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:328
msgid "*Alpha channel* in albedo color and texture is also used for the object transparency. If you use a color or texture with *alpha channel*, make sure to either enable transparency or *alpha scissoring* for it to work."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:333
msgid "Metallic"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:335
msgid "Godot uses a metallic model over competing models due to its simplicity. This parameter defines how reflective the material is. The more reflective, the less diffuse/ambient light affects the material and the more light is reflected. This model is called \"energy-conserving\"."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:340
msgid "The *Specular* parameter is a general amount for the reflectivity (unlike *Metallic*, this is not energy-conserving, so leave it at ``0.5`` and don't touch it unless you need to)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:344
msgid "The minimum internal reflectivity is ``0.04``, so it's impossible to make a material completely unreflective, just like in real life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:350
msgid "Roughness"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:352
msgid "*Roughness* affects the way reflection happens. A value of ``0`` makes it a perfect mirror while a value of ``1`` completely blurs the reflection (simulating natural microsurfacing). Most common types of materials can be achieved with the right combination of *Metallic* and *Roughness*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:360
msgid "Emission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:362
msgid "*Emission* specifies how much light is emitted by the material (keep in mind this does not include light surrounding geometry unless :ref:`doc_gi_probes` are used). This value is added to the resulting final image and is not affected by other lighting in the scene."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:370
msgid "Normal map"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:372
msgid "Normal mapping allows you to set a texture that represents finer shape detail. This does not modify geometry, only the incident angle for light. In Godot, only the red and green channels of normal maps are used for better compression and wider compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:381
msgid "Godot requires the normal map to use the X+, Y+ and Z+ coordinates, this is known as OpenGL style. If you've imported a material made to be used with another engine it may be DirectX style, in which case the normal map needs to be converted so its Y axis is flipped."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:386
msgid "More information about normal maps (including a coordinate order table for popular engines) can be found `here <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details>`__."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:391
msgid "Rim"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:393
msgid "Some fabrics have small micro-fur that causes light to scatter around it. Godot emulates this with the *Rim* parameter. Unlike other rim lighting implementations, which just use the emission channel, this one actually takes light into account (no light means no rim). This makes the effect considerably more believable."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:400
msgid "Rim size depends on roughness, and there is a special parameter to specify how it must be colored. If *Tint* is ``0``, the color of the light is used for the rim. If *Tint* is ``1``, then the albedo of the material is used. Using intermediate values generally works best."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:406
msgid "Clearcoat"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:408
#: ../../docs/tutorials/3d/spatial_material.rst:426
#: ../../docs/tutorials/3d/spatial_material.rst:448
#: ../../docs/tutorials/3d/spatial_material.rst:461
#: ../../docs/tutorials/3d/spatial_material.rst:481
msgid "*This feature is only available when using the GLES3 backend.*"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:410
msgid "The *Clearcoat* parameter is used to add a secondary pass of transparent coat to the material. This is common in car paint and toys. In practice, it's a smaller specular blob added on top of the existing material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:414
msgid "The effect is extremely subtle in Godot 3 releases, and may require specific lighting or looking at a material a specific way to notice a difference. This can be seen in the image below where clearcoat is turned on in the right."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:421
msgid "The effect will be more noticeable in Godot 4."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:424
msgid "Anisotropy"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:428
msgid "This changes the shape of the specular blob and aligns it to tangent space. Anisotropy is commonly used with hair, or to make materials such as brushed aluminum more realistic. It works especially well when combined with flowmaps."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:435
msgid "Ambient Occlusion"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:437
msgid "It is possible to specify a baked ambient occlusion map. This map affects how much ambient light reaches each surface of the object (it does not affect direct light by default). While it is possible to use Screen-Space Ambient Occlusion (SSAO) to generate ambient occlusion, nothing beats the quality of a well-baked AO map. It is recommended to bake ambient occlusion whenever possible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:446
msgid "Depth"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:450
msgid "Setting a depth map on a material produces a ray-marched search to emulate the proper displacement of cavities along the view direction. This is not real added geometry, but an illusion of depth. It may not work for complex objects, but it produces a realistic depth effect for textures. For best results, *Depth* should be used together with normal mapping."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:459
msgid "Subsurface Scattering"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:463
msgid "This effect emulates light that penetrates an object's surface, is scattered, and then comes out. It is useful to create realistic skin, marble, colored liquids, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:470
msgid "Transmission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:472
msgid "This controls how much light from the lit side (visible to light) is transferred to the dark side (opposite from the light). This works well for thin objects such as plant leaves, grass, human ears, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:479
msgid "Refraction"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:483
msgid "When refraction is enabled, it supersedes alpha blending, and Godot attempts to fetch information from behind the object being rendered instead. This allows distorting the transparency in a way similar to refraction in real life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:490
msgid "Detail"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:492
msgid "Godot allows using secondary albedo and normal maps to generate a detail texture, which can be blended in many ways. By combining this with secondary UV or triplanar modes, many interesting textures can be achieved."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:498
msgid "There are several settings that control how detail is used."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:500
msgid "Mask: The detail mask is a black and white image used to control where the blending takes place on a texture. White is for the detail textures, Black is for the regular material textures, different shades of gray are for partial blending of the material textures and detail textures."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:505
msgid "Blend Mode: These four modes control how the textures are blended together."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:507
msgid "Mix: Combines pixel values of both textures. At black, only show the material texture, at white, only show the detail texture. Values of gray create a smooth blend between the two."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:511
msgid "Add: Adds pixel values of one Texture with the other. Unlike mix mode both textures are completely mixed at white parts of a mask and not at gray parts. The original texture is mostly unchanged at black"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:515
msgid "Sub: Subtracts pixel values of one texture with the other. The second texture is completely subtracted at white parts of a mask with only a little subtraction in black parts, gray parts being different levels of subtraction based on the exact texture."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:520
msgid "Mul: Multiplies the RGB channel numbers for each pixel from the top texture with the values for the corresponding pixel from the bottom texture."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:523
msgid "Albedo: This is where you put an albedo texture you want to blend. If nothing is in this slot it will be interpreted as white by default."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:526
msgid "Normal: This is where you put a normal texture you want to blend. If nothing is in this slot it will be interpreted as a flat normal map. This can still be used even if the material does not have normal map enabled."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:531
msgid "UV1 and UV2"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:533
msgid "Godot supports two UV channels per material. Secondary UV is often useful for ambient occlusion or emission (baked light). UVs can be scaled and offset, which is useful when using repeating textures."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:538
msgid "Triplanar Mapping"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:540
msgid "Triplanar mapping is supported for both UV1 and UV2. This is an alternative way to obtain texture coordinates, sometimes called \"Autotexture\". Textures are sampled in X, Y and Z and blended by the normal. Triplanar mapping can be performed in either world space or object space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:545
msgid "In the image below, you can see how all primitives share the same material with world triplanar, so the brick texture continues smoothly between them."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:551
msgid "Proximity and distance fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:553
msgid "Godot allows materials to fade by proximity to each other as well as depending on the distance from the viewer. Proximity fade is useful for effects such as soft particles or a mass of water with a smooth blending to the shores. Distance fade is useful for light shafts or indicators that are only present after a given distance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:559
msgid "Keep in mind enabling these enables alpha blending, so abusing them for an entire scene is usually not a good idea."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:565
msgid "Render priority"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:567
msgid "The rendering order of objects can be changed, although this is mostly useful for transparent objects (or opaque objects that perform depth draw but no color draw, such as cracks on the floor)."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
