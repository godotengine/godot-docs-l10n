# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:4
msgid "Screen-reading shaders"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:9
msgid "It is often desired to make a shader that reads from the same screen to which it's writing. 3D APIs, such as OpenGL or DirectX, make this very difficult because of internal hardware limitations. GPUs are extremely parallel, so reading and writing causes all sorts of cache and coherency problems. As a result, not even the most modern hardware supports this properly."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:16
msgid "The workaround is to make a copy of the screen, or a part of the screen, to a back-buffer and then read from it while drawing. Godot provides a few tools that make this process easy."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:21
msgid "SCREEN_TEXTURE built-in texture"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:23
msgid "Godot :ref:`doc_shading_language` has a special texture, ``SCREEN_TEXTURE`` (and ``DEPTH_TEXTURE`` for depth, in the case of 3D). It takes as argument the UV of the screen and returns a vec3 RGB with the color. A special built-in varying: SCREEN_UV can be used to obtain the UV for the current fragment. As a result, this simple canvas_item fragment shader:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:34
msgid "results in an invisible object, because it just shows what lies behind."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:36
msgid "The reason why textureLod must be used is because, when Godot copies back a chunk of the screen, it also does an efficient separatable gaussian blur to its mipmaps."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:39
msgid "This allows for not only reading from the screen, but reading from it with different amounts of blur at no cost."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:44
msgid "Mipmaps are not generated in GLES2 due to poor performance and compatibility with older devices."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:48
msgid "SCREEN_TEXTURE example"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:50
msgid "``SCREEN_TEXTURE`` can be used for many things. There is a special demo for *Screen Space Shaders*, that you can download to see and learn. One example is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:74
msgid "Behind the scenes"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:76
msgid "While this seems magical, it's not. In 2D, the ``SCREEN_TEXTURE`` built-in, when first found in a node that is about to be drawn, does a full-screen copy to a back-buffer. Subsequent nodes that use it in shaders will not have the screen copied for them, because this ends up being inefficient. In 3D, the screen is copied after the opaque geometry pass, but before the transparent geometry pass, so transparent objects will not be captured in the ``SCREEN_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:84
msgid "As a result, in 2D, if shaders that use ``SCREEN_TEXTURE`` overlap, the second one will not use the result of the first one, resulting in unexpected visuals:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:90
msgid "In the above image, the second sphere (top right) is using the same source for ``SCREEN_TEXTURE`` as the first one below, so the first one \"disappears\", or is not visible."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:94
msgid "In 2D, this can be corrected via the :ref:`BackBufferCopy <class_BackBufferCopy>` node, which can be instantiated between both spheres. BackBufferCopy can work by either specifying a screen region or the whole screen:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:100
msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:111
msgid "In 3D, there is less flexibility to solve this particular issue because the ``SCREEN_TEXTURE`` is only captured once. Be careful when using ``SCREEN_TEXTURE`` in 3D as it won't capture transparent objects and may capture some opaque objects that are in front of the object."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:116
msgid "You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport <class_Viewport>` with a camera in the same position as your object, and then use the :ref:`Viewport's <class_Viewport>` texture instead of ``SCREEN_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:121
msgid "Back-buffer logic"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:123
msgid "So, to make it clearer, here's how the backbuffer copying logic works in Godot:"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:126
msgid "If a node uses the ``SCREEN_TEXTURE``, the entire screen is copied to the back buffer before drawing that node. This only happens the first time; subsequent nodes do not trigger this."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:129
msgid "If a BackBufferCopy node was processed before the situation in the point above (even if ``SCREEN_TEXTURE`` was not used), the behavior described in the point above does not happen. In other words, automatic copying of the entire screen only happens if ``SCREEN_TEXTURE`` is used in a node for the first time and no BackBufferCopy node (not disabled) was found before in tree-order."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:135
msgid "BackBufferCopy can copy either the entire screen or a region. If set to only a region (not the whole screen) and your shader uses pixels not in the region copied, the result of that read is undefined (most likely garbage from previous frames). In other words, it's possible to use BackBufferCopy to copy back a region of the screen and then use ``SCREEN_TEXTURE`` on a different region. Avoid this behavior!"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:144
msgid "DEPTH_TEXTURE"
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:146
msgid "For 3D shaders, it's also possible to access the screen depth buffer. For this, the ``DEPTH_TEXTURE`` built-in is used. This texture is not linear; it must be converted via the inverse projection matrix."
msgstr ""

#: ../../docs/tutorials/shaders/screen-reading_shaders.rst:150
msgid "The following code retrieves the 3D position below the pixel being drawn:"
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
