# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:4
msgid "Custom post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:9
msgid "Godot provides many post-processing effects out of the box, including Bloom, DOF, and SSAO. Sometimes you want to write your own custom effect. Here's how you can do so."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:12
msgid "Post-processing effects are shaders applied to a frame after Godot rendered it. You first want to render your scene into a :ref:`Viewport <class_Viewport>`, then render the ``Viewport`` inside a :ref:`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:16
msgid "The easiest way to implement a custom post-processing shader is to use Godot's built-in ability to read from the screen texture. If you're not familiar with this, you should read the :ref:`Screen Reading Shaders Tutorial <doc_screen-reading_shaders>` first."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:22
msgid "As of the time of writing, Godot does not support rendering to multiple buffers at the same time. Your post-processing shader will not have access to normals or other render passes. You only have access to the rendered frame."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:27
msgid "Single pass post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:29
msgid "You will need a ``Viewport`` to render your scene to, and a scene to render your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer <class_ViewportContainer>` to display your ``Viewport`` on the entire screen or inside another :ref:`Control <class_Control>` node."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:36
msgid "Rendering using a ``Viewport`` gives you control over how the scene render, including the framerate, and you can use the ``ViewportContainer`` to render 3D objects in a 2D scene."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:40
msgid "For this demo, we will use a :ref:`Node2D <class_Node2D>` with a ``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should look like this:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:45
msgid "Inside the ``Viewport``, you can have whatever you want. This will contain your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:50
msgid "Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the ``ViewportContainer``, and assign a new shader resource to it. You can access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:55
msgid "You can choose not to use a ``ViewportContainer``, but if you do so, you will need to create your own uniform in the shader and pass the ``Viewport`` texture in manually, like so:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:64
msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:72
msgid "Copy the following code to your shader. The above code is a single pass edge detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/Sobel_operator>`_."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:94
msgid "The Sobel filter reads pixels in a 9x9 grid around the current pixel and adds them together, using weight. What makes it interesting is that it assigns weights to each pixel; +1 for each of the eight around the center and -8 for the center pixel. The choice of weights is called a \"kernel\". You can use different kernels to create edge detection filters, outlines, and all sorts of effects."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:102
msgid "Multi-pass post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:104
msgid "Some post-processing effects like blur are resource intensive. If you break them down in multiple passes however, you can make them run a lot faster. In a multipass material, each pass takes the result from the previous pass as an input and processes it."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:108
msgid "To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. In the example above, you rendered the content of one ``Viewport`` object into the root ``Viewport``, through a ``ViewportContainer`` node. You can do the same thing for a multi-pass shader by rendering the content of one ``Viewport`` into another and then rendering the last ``Viewport`` into the root ``Viewport``."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:113
msgid "Your scene hierarchy will look something like this:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:117
msgid "Godot will render the bottom ``Viewport`` node first. So if the order of the passes matters for your shaders, make sure that you assign the shader you want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:123
msgid "You can also render your Viewports separately without nesting them like this. You just need to use two Viewports and to render them one after the other."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:126
msgid "Apart from the node structure, the steps are the same as with the single-pass post-processing shader."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:128
msgid "As an example, you could write a full screen Gaussian blur effect by attaching the following pieces of code to each of the :ref:`ViewportContainers <class_ViewportContainer>`. The order in which you apply the shaders does not matter:"
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:168
msgid "Using the above code, you should end up with a full screen blur effect like below."
msgstr ""

#: ../../docs/tutorials/shaders/custom_postprocessing.rst:172
msgid "For more information on how ``Viewport`` nodes work, see the :ref:`Viewports Tutorial <doc_viewports>`."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
