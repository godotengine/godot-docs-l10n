# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/file_formats/tscn.rst:4
msgid "TSCN file format"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:6
msgid "The TSCN (text scene) file format represents a single scene tree inside Godot. Unlike binary SCN files, TSCN files have the advantage of being mostly human-readable and easy for version control systems to manage."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:10
msgid "The ESCN (exported scene) file format is identical to the TSCN file format, but is used to indicate to Godot that the file has been exported from another program and should not be edited by the user from within Godot. Unlike SCN and TSCN files, during import, ESCN files are compiled to binary SCN files stored inside the ``.import/`` folder. This reduces the data size and speeds up loading, as binary formats are faster to load compared to text-based formats."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:18
msgid "For those looking for a complete description, the parsing is handled in the file `resource_format_text.cpp <https://github.com/godotengine/godot/blob/master/scene/resources/resource_format_text.cpp>`_ in the ``ResourceFormatLoaderText`` class."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:23
msgid "File structure"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:25
msgid "There are five main sections inside the TSCN file:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:27
msgid "File Descriptor"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:28
#: ../../docs/development/file_formats/tscn.rst:279
msgid "External resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:29
#: ../../docs/development/file_formats/tscn.rst:301
msgid "Internal resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:30
msgid "Nodes"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:31
msgid "Connections"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:33
msgid "The file descriptor looks like ``[gd_scene load_steps=3 format=2]`` and should be the first entry in the file. The ``load_steps`` parameter is equal to the total amount of resources (internal and external) plus one (for the file itself). If the file has no resources, ``load_steps`` is omitted. The engine will still load the file correctly if ``load_steps`` is incorrect, but this will affect loading bars and any other piece of code relying on that value."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:40
msgid "These sections should appear in order, but it can be hard to distinguish them. The only difference between them is the first element in the heading for all of the items in the section. For example, the heading of all external resources should start with ``[ext_resource .....]``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:45
msgid "A TSCN file may contain single-line comments starting with a semicolon (``;``). However, comments will be discarded when saving the file using the Godot editor."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:49
msgid "Entries inside the file"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:51
msgid "A heading looks like ``[<resource_type> key=value key=value key=value ...]`` where resource_type is one of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:55
msgid "``ext_resource``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:56
msgid "``sub_resource``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:57
msgid "``node``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:58
msgid "``connection``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:60
msgid "Below every heading comes zero or more ``key = value`` pairs. The values can be complex datatypes such as Arrays, Transforms, Colors, and so on. For example, a spatial node looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:71
msgid "The scene tree"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:73
msgid "The scene tree is made up ofâ€¦ nodes! The heading of each node consists of its name, parent and (most of the time) a type. For example ``[node type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:77
msgid "Other valid keywords include:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:79
msgid "``instance``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:80
msgid "``instance_placeholder``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:81
msgid "``owner``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:82
msgid "``index`` (sets the order of appearance in the tree. If absent, inherited nodes will take precedence over plain ones)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:83
msgid "``groups``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:85
msgid "The first node in the file, which is also the scene root, must not have a ``parent=Path/To/Node`` entry in its heading. All scene files should have exactly *one* scene root. If it doesn't, Godot will fail to import the file. The parent path of other nodes should be absolute, but shouldn't contain the scene root's name. If the node is a direct child of the scene root, the path should be ``\".\"``. Here is an example scene tree (but without any node content):"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:101
msgid "Similar to the internal resource, the document for each node is currently incomplete. Fortunately, it is easy to find out because you can simply save a file with that node in it. Some example nodes are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:140
msgid "NodePath"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:142
msgid "A tree structure is not enough to represent the whole scene. Godot uses a ``NodePath(Path/To/Node)`` structure to refer to another node or attribute of the node anywhere in the scene tree. For instance, MeshInstance uses ``NodePath()`` to point to its skeleton. Likewise, Animation tracks use ``NodePath()`` to point to node properties to animate."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:167
msgid "Skeleton"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:169
msgid "The Skeleton node inherits the Spatial node, but also may have a list of bones described in key-value pairs in the format ``bones/Id/Attribute=Value``. The bone attributes consist of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:173
msgid "``name``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:174
msgid "``parent``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:175
msgid "``rest``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:176
msgid "``pose``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:177
#: ../../docs/development/file_formats/tscn.rst:398
msgid "``enabled``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:178
msgid "``bound_children``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:180
msgid "``name`` must be the first attribute of each bone."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:181
msgid "``parent`` is the index of parent bone in the bone list, with parent index, the bone list is built to a bone tree."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:183
msgid "``rest`` is the transform matrix of bone in its \"resting\" position."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:184
msgid "``pose`` is the pose matrix; use ``rest`` as the basis."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:185
msgid "``bound_children`` is a list of ``NodePath()`` which point to BoneAttachments belonging to this bone."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:188
msgid "Here's an example of a skeleton node with two bones:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:209
msgid "BoneAttachment"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:211
msgid "BoneAttachment node is an intermediate node to describe some node being parented to a single bone in a Skeleton node. The BoneAttachment has a ``bone_name=NameOfBone`` attribute, and the corresponding bone being the parent has the BoneAttachment node in its ``bound_children`` list."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:216
msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:241
msgid "AnimationPlayer"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:243
msgid "AnimationPlayer works as an animation library. It stores animations listed in the format ``anim/Name=SubResource(ResourceId)``; each line refers to an Animation resource. All the animation resources use the root node of AnimationPlayer. The root node is stored as ``root_node=NodePath(Path/To/Node)``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:263
msgid "Resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:265
msgid "Resources are components that make up the nodes. For example, a MeshInstance node will have an accompanying ArrayMesh resource. The ArrayMesh resource may be either internal or external to the TSCN file."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:269
msgid "References to the resources are handled by ``id`` numbers in the resource's heading. External resources and internal resources are referred to with ``ExtResource(id)`` and ``SubResource(id)``, respectively. Because there have different methods to refer to internal and external resources, you can have the same ID for both an internal and external resource."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:275
msgid "For example, to refer to the resource ``[ext_resource id=3 type=\"PackedScene\" path=....]``, you would use ``ExtResource(3)``."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:281
msgid "External resources are links to resources not contained within the TSCN file itself. An external resource consists of a path, a type and an ID."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:284
msgid "Godot always generates absolute paths relative to the resource directory and thus prefixed with ``res://``, but paths relative to the TSCN file's location are also valid."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:288
msgid "Some example external resources are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:296
msgid "Like TSCN files, a TRES file may contain single-line comments starting with a semicolon (``;``). However, comments will be discarded when saving the resource using the Godot editor."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:303
msgid "A TSCN file can contain meshes, materials and other data. These are contained in the *internal resources* section of the file. The heading for an internal resource looks similar to those of external resources, except that it doesn't have a path. Internal resources also have ``key=value`` pairs under each heading. For example, a capsule collision shape looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:317
msgid "Some internal resources contain links to other internal resources (such as a mesh having a material). In this case, the referring resource must appear *before* the reference to it. This means that order matters in the file's internal resources section."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:322
msgid "Unfortunately, documentation on the formats for these subresources isn't complete. Some examples can be found by inspecting saved resource files, but others can only be found by looking through Godot's source."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:327
msgid "ArrayMesh"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:329
msgid "ArrayMesh consists of several surfaces, each in the format ``surface\\Index={}``. Each surface is a set of vertices and a material."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:332
msgid "TSCN files support two surface formats:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:334
msgid "For the old format, each surface has three essential keys:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:336
msgid "``primitive``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:337
msgid "``arrays``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:338
msgid "``morph_arrays``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:340
msgid "``primitive`` is an enumerate variable, ``primitive=4`` which is ``PRIMITIVE_TRIANGLES`` is frequently used."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:343
msgid "``arrays`` is a two-dimensional array, it contains:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:345
msgid "Vertex positions array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:346
msgid "Normals array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:347
msgid "Tangents array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:348
msgid "Vertex colors array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:349
msgid "UV array 1"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:350
msgid "UV array 2"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:351
msgid "Bone indexes array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:352
msgid "Bone weights array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:353
msgid "Vertex indexes array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:355
msgid "``morph_arrays`` is an array of morphs. Each morph is exactly an ``arrays`` without the vertex indexes array."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:358
msgid "An example of ArrayMesh:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:382
msgid "Animation"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:384
msgid "An animation resource consists of tracks. Besides, it has ``length``, ``loop`` and ``step`` applied to all the tracks."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:387
msgid "``length`` and ``step`` are both durations in seconds."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:389
msgid "Each track is described by a list of key-value pairs in the format ``tracks/Id/Attribute``. Each track includes:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:392
msgid "``type``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:393
msgid "``path``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:394
msgid "``interp``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:395
msgid "``keys``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:396
msgid "``loop_wrap``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:397
msgid "``imported``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:400
msgid "The ``type`` must be the first attribute of each track. The value of ``type`` can be:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:403
msgid "``transform``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:404
msgid "``value``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:405
msgid "``method``"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:407
msgid "The ``path`` has the format ``NodePath(Path/To/Node:attribute)``. It's the path to the animated node or attribute, relative to the root node defined in the AnimationPlayer."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:411
msgid "The ``interp`` is the method to interpolate frames from the keyframes. It is an enum variable with one of the following values:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:414
msgid "``0`` (constant)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:415
msgid "``1`` (linear)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:416
msgid "``2`` (cubic)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:418
msgid "The ``keys`` correspond to the keyframes. It appears as a ``PoolRealArray()``, but may have a different structure for tracks with different types."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:421
msgid "A Transform track uses every 12 real numbers in the ``keys`` to describe a keyframe. The first number is the timestamp. The second number is the transition followed by a 3-number translation vector, followed by a 4-number rotation quaternion (X, Y, Z, W) and finally a 3-number scale vector. The default transition in a Transform track is 1.0."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
