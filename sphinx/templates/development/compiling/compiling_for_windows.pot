# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:10
msgid "This page describes how to compile Windows editor and export template binaries from source. If you're looking to export your project to Windows instead, read :ref:`doc_exporting_for_windows`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:14
msgid "Requirements"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:16
msgid "For compiling under Windows, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:18
msgid "`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_, version 2017 or later. VS 2019 is recommended. **Make sure to read \"Installing Visual Studio caveats\" below or you will have to run/download the installer again.**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:22
msgid "`MinGW-w64 <http://mingw-w64.org/>`__ with GCC can be used as an alternative to Visual Studio. Be sure to install/configure it to use the ``posix`` thread model."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:24
msgid "`Python 3.5+ <https://www.python.org/downloads/windows/>`_. **Make sure to enable the option to add Python to the ``PATH`` in the installer.**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:26
msgid "`SCons <https://www.scons.org/>`_ build system. Using the latest release is recommended, especially for proper support of recent Visual Studio releases."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:29
msgid "If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install MinGW and other dependencies using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:34
msgid "If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily install MinGW and other dependencies using the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:40
msgid "For each MSYS2 MinGW subsystem, you should then run `pip3 install scons` in its shell."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:43
msgid "To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:46
msgid "For a general overview of SCons usage for Godot, see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:50
msgid "Setting up SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:52
msgid "To install SCons, open the command prompt and run the following command::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:56
msgid "If you are prompted with the message ``Defaulting to user installation because normal site-packages is not writeable``, you may have to run that command again using elevated permissions. Open a new command prompt as an Administrator then run the command again to ensure that SCons is available from the ``PATH``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:62
msgid "To check whether you have installed Python and SCons correctly, you can type ``python --version`` and ``scons --version`` into a command prompt (``cmd.exe``)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:66
msgid "If the commands above don't work, make sure to add Python to your ``PATH`` environment variable after installing it, then check again. You can do so by running the Python installer again and enabling the option to add Python to the ``PATH``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:71
msgid "If SCons cannot detect your Visual Studio installation, it might be that your SCons version is too old. Update it to the latest version with ``python -m pip install --upgrade scons``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:78
msgid "Installing Visual Studio caveats"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:80
msgid "If installing Visual Studio 2017 or 2019, make sure to enable **C++** in the list of workflows to install."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:83
msgid "If installing Visual Studio 2015, make sure to run a **Custom** installation instead of **Typical** and select **C++** as a language there."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:86
msgid "If you've already made the mistake of installing Visual Studio without C++ support, run the installer again; it should present you a **Modify** button. Running the installer from *Add/Remove Programs* will only give you a **Repair** option, which won't let you install C++ tools."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:92
msgid "Downloading Godot's source"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:94
msgid "Refer to :ref:`doc_getting_source` for detailed instructions."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:96
msgid "The tutorial will assume from now on that you placed the source code in ``C:\\godot``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:101
msgid "To prevent slowdowns caused by continuous virus scanning during compilation, add the Godot source folder to the list of exceptions in your antivirus software."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:105
msgid "For Windows Defender, hit the :kbd:`Windows` key, type \"Windows Defender Settings\" then hit :kbd:`Enter`. Under **Virus & threat protection**, go to **Virus & threat protection setting** and scroll down to **Exclusions**. Click **Add or remove exclusions** then add the Godot source folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:112
msgid "Compiling"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:115
msgid "Selecting a compiler"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:117
msgid "SCons will automatically find and use an existing Visual Studio installation. If you do not have Visual Studio installed, it will attempt to use MinGW instead. If you already have Visual Studio installed and want to use MinGW, pass ``use_mingw=yes`` to the SCons command line. Note that MSVC builds cannot be performed from the MSYS2 or MinGW shells. Use either ``cmd.exe`` or PowerShell instead."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:124
msgid "During development, using the Visual Studio compiler is usually a better idea, as it links the Godot binary much faster than MinGW. However, MinGW can produce more optimized binaries using link-time optimization (see below), making it a better choice for production use."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:130
msgid "Running SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:132
msgid "After opening a command prompt, change to the root directory of the engine source code (using ``cd``) and type::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:137
msgid "When compiling with multiple CPU threads, SCons may warn about pywin32 being missing. You can safely ignore this warning."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:140
msgid "If all goes well, the resulting binary executable will be placed in ``C:\\godot\\bin\\`` with the name ``godot.windows.tools.32.exe`` or ``godot.windows.tools.64.exe``. By default, SCons will build a binary matching your CPU architecture, but this can be overridden using ``bits=64`` or ``bits=32``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:146
msgid "This executable file contains the whole engine and runs without any dependencies. Running it will bring up the Project Manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:149
msgid "If you are compiling Godot for production use, then you can make the final executable smaller and faster by adding the SCons option ``target=release_debug``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:153
msgid "If you are compiling Godot with MinGW, you can make the binary even smaller and faster by adding the SCons option ``use_lto=yes``. As link-time optimization is a memory-intensive process, this will require about 7 GB of available RAM while compiling."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:158
msgid "If you want to use separate editor settings for your own Godot builds and official releases, you can enable :ref:`doc_data_paths_self_contained_mode` by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:164
msgid "Development in Visual Studio"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:166
msgid "Using an IDE is not required to compile Godot, as SCons takes care of everything. But if you intend to do engine development or debugging of the engine's C++ code, you may be interested in configuring a code editor or an IDE."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:170
msgid "Folder-based editors don't require any particular setup to start working with Godot's codebase. To edit projects with Visual Studio they need to be set up as a solution."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:173
msgid "You can create a Visual Studio solution via SCons by running SCons with the ``vsproj=yes`` parameter, like this::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:178
msgid "You will be able to open Godot's source in a Visual Studio solution now, and able to build Godot using Visual Studio's **Build** button."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:181
msgid "See :ref:`doc_configuring_an_ide_vs` for further details."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:184
msgid "Cross-compiling for Windows from other operating systems"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:186
msgid "If you are a Linux or macOS user, you need to install `MinGW-w64 <https://mingw-w64.org/doku.php>`__, which typically comes in 32-bit and 64-bit variants. The package names may differ based on your distribution, here are some known ones:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:192
msgid "**Arch Linux**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:192
msgid "Install `mingw-w64-gcc from the AUR`_."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:194
msgid "**Debian** / **Ubuntu**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:198
msgid "**Fedora**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:203
msgid "**macOS**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:207
msgid "**Mageia**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:215
msgid "Before attempting the compilation, SCons will check for the following binaries in your ``PATH`` environment variable::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:221
msgid "If the binaries are not located in the ``PATH`` (e.g. ``/usr/bin``), you can define the following environment variables to give a hint to the build system::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:228
msgid "To make sure you are doing things correctly, executing the following in the shell should result in a working compiler (the version output may differ based on your system)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:236
msgid "Troubleshooting"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:238
msgid "Cross-compiling from some Ubuntu versions may lead to `this bug <https://github.com/godotengine/godot/issues/9258>`_, due to a default configuration lacking support for POSIX threading."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:242
msgid "You can change that configuration following those instructions, for 64-bit::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:250
msgid "And for 32-bit::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:258
msgid "Creating Windows export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:260
msgid "Windows export templates are created by compiling Godot without the editor, with the following flags::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:268
msgid "If you plan on replacing the standard export templates, copy these to the following location, replacing ``<version>`` with the version identifier (such as ``3.1.1.stable`` or ``3.2.dev``)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:274
msgid "With the following names::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:281
msgid "However, if you are using custom modules or custom engine code, you may instead want to configure your binaries as custom export templates here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:287
msgid "You don't need to copy them in this case, just reference the resulting files in the ``bin\\`` directory of your Godot source folder, so the next time you build, you will automatically have the custom templates referenced."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
