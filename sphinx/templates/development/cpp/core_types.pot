# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:6
msgid "Godot has a rich set of classes and templates that compose its core, and everything is built upon them."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:9
msgid "This reference will try to list them in order for their better understanding."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:15
msgid "Godot uses the standard C99 datatypes, such as ``uint8_t``, ``uint32_t``, ``int64_t``, etc. which are nowadays supported by every compiler. Reinventing the wheel for those is not fun, as it makes code more difficult to read."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:20
msgid "In general, care is not taken to use the most efficient datatype for a given task unless using large structures or arrays. ``int`` is used through most of the code unless necessary. This is done because nowadays every device has at least a 32 bits bus and can do such operations in one cycle. It makes code more readable too."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:26
msgid "For files or memory sizes, ``size_t`` is used, which is warranted to be 64 bits."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:29
msgid "For Unicode characters, CharType instead of wchar_t is used, because many architectures have 4 bytes long wchar_t, where 2 bytes might be desired. However, by default, this has not been forced and CharType maps directly to wchar_t."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:132
#: ../../docs/development/cpp/core_types.rst:166
#: ../../docs/development/cpp/core_types.rst:182
#: ../../docs/development/cpp/core_types.rst:198
#: ../../docs/development/cpp/core_types.rst:209
#: ../../docs/development/cpp/core_types.rst:220
#: ../../docs/development/cpp/core_types.rst:233
msgid "References:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:37
msgid "`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/typedefs.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:42
msgid "PC is a wonderful architecture. Computers often have gigabytes of RAM, terabytes of storage and gigahertz of CPU, and when an application needs more resources the OS will swap out the inactive ones. Other architectures (like mobile or consoles) are in general more limited."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:47
msgid "The most common memory model is the heap, where an application will request a region of memory, and the underlying OS will try to fit it somewhere and return it. This often works best and is flexible, but over time and with abuse, this can lead to segmentation."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:52
msgid "Segmentation slowly creates holes that are too small for most common allocations, so that memory is wasted. There is a lot of literature about heap and segmentation, so this topic will not be developed further here. Modern operating systems use paged memory, which helps mitigate the problem of segmentation but doesn't solve it."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:58
msgid "However, in many studies and tests, it is shown that given enough memory, if the maximum allocation size is below a given threshold in proportion to the maximum heap size and proportion of memory intended to be unused, segmentation will not be a problem over time as it will remain constant. In other words, leave 10-20% of your memory free and perform all small allocations and you are fine."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:65
msgid "Godot ensures that all objects that can be allocated dynamically are small (less than a few kb at most). But what happens if an allocation is too large (like an image or mesh geometry or large array)? In this case Godot has the option to use a dynamic memory pool. This memory needs to be locked to be accessed, and if an allocation runs out of memory, the pool will be rearranged and compacted on demand. Depending on the need of the game, the programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:76
msgid "Godot has many tools for tracking memory usage in a game, especially during debug. Because of this, the regular C and C++ library calls should not be used. Instead, a few other ones are provided."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:88
msgid "These are equivalent to the usual malloc, realloc, free of the standard C library."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:103
msgid "memnew/memdelete also use a little C++ magic and notify Objects right after they are created, and right before they are deleted."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:106
msgid "For dynamic memory, the PoolVector<> template is provided. PoolVector is a standard vector class, and is very similar to vector in the C++ standard library. To create a PoolVector buffer, use this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:114
msgid "PoolVector can be accessed using the [] operator and a few helpers exist for this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:126
msgid "These operations allow fast read/write from PoolVectors and keep it locked until they go out of scope. However, PoolVectors should be used for small, dynamic memory operations, as read() and write() are too slow for a large amount of accesses."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:134
msgid "`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/memory.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:135
msgid "`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/pool_vector.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:138
msgid "Containers"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:140
msgid "Godot provides also a set of common containers:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:142
msgid "Vector"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:143
msgid "List"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:144
msgid "Set"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:145
msgid "Map"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:147
msgid "They are simple and aim to be as minimal as possible, as templates in C++ are often inlined and make the binary size much fatter, both in debug symbols and code. List, Set and Map can be iterated using pointers, like this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:158
msgid "The Vector<> class also has a few nice features:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:160
msgid "It does copy on write, so making copies of it is cheap as long as they are not modified."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:162
msgid "It supports multi-threading, by using atomic operations on the reference counter."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:168
msgid "`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:169
msgid "`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:170
msgid "`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:171
msgid "`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:174
msgid "String"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:176
msgid "Godot also provides a String class. This class has a huge amount of features, full Unicode support in all the functions (like case operations) and utf8 parsing/extracting, as well as helpers for conversion and visualization."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:184
msgid "`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:187
msgid "StringName"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:189
msgid "StringNames are like a String, but they are unique. Creating a StringName from a string results in a unique internal pointer for all equal strings. StringNames are useful for using strings as identifier, as comparing them is basically comparing a pointer."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:194
msgid "Creation of a StringName (especially a new one) is slow, but comparison is fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:200
msgid "`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/string_name.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:203
msgid "Math types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:205
msgid "There are several linear math types available in the core/math directory."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:211
msgid "`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:214
msgid "NodePath"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:216
msgid "This is a special datatype used for storing paths in a scene tree and referencing them fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:222
msgid "`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/node_path.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:225
msgid "RID"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:227
msgid "RIDs are resource IDs. Servers use these to reference data stored in them. RIDs are opaque, meaning that the data they reference can't be accessed directly. RIDs are unique, even for different types of referenced data."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:235
msgid "`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
