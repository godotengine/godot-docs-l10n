# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/editor/introduction_to_editor_development.rst:4
msgid "Introduction to editor development"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:6
msgid "On this page, you will learn:"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:8
msgid "The **design decisions** behind the Godot editor."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:9
msgid "How to work efficiently on the Godot editor's C++ code."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:11
msgid "This guide is aimed at current or future engine contributors. To create editor plugins in GDScript, see :ref:`doc_making_plugins` instead."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:16
msgid "If you are new to Godot, we recommended you to read :ref:`doc_godot_design_philosophy` before continuing. Since the Godot editor is a Godot project written in C++, much of the engine's philosophy applies to the editor."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:22
msgid "Technical choices"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:24
msgid "The Godot editor is drawn using Godot's renderer and :ref:`UI system <toc-gui-basics>`. It does *not* rely on a toolkit such as GTK or Qt. This is similar in spirit to software like Blender. While using toolkits makes it easier to achieve a \"native\" appearance, they are also quite heavy and their licensing is not compatible with Godot's."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:30
msgid "The editor is fully written in C++. It can't contain any GDScript or C# code."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:33
msgid "Directory structure"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:35
msgid "The editor's code is fully self-contained in the `editor/ <https://github.com/godotengine/godot/tree/master/editor>`__ folder of the Godot source repository."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:39
msgid "Some editor functionality is also implemented via :ref:`modules <doc_custom_modules_in_c++>`. Some of these are only enabled in editor builds to decrease the binary size of export templates. See the `modules/ <https://github.com/godotengine/godot/tree/master/modules>`__ folder in the Godot source repository."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:45
msgid "Some important files in the editor are:"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:47
msgid "`editor/editor_node.cpp <https://github.com/godotengine/godot/blob/3.x/editor/editor_node.cpp>`__: Main editor initialization file. Effectively the \"main scene\" of the editor."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:49
msgid "`editor/project_manager.cpp <https://github.com/godotengine/godot/blob/3.x/editor/project_manager.cpp>`__: Main project manager initialization file. Effectively the \"main scene\" of the project manager."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:51
msgid "`editor/plugins/canvas_item_editor_plugin.cpp <https://github.com/godotengine/godot/blob/3.x/editor/plugins/canvas_item_editor_plugin.cpp>`__: The 2D editor viewport and related functionality (toolbar at the top, editing modes, overlaid helpers/panels, …)."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:53
msgid "`editor/plugins/spatial_editor_plugin.cpp <https://github.com/godotengine/godot/blob/3.x/editor/plugins/spatial_editor_plugin.cpp>`__: The 3D editor viewport and related functionality (toolbar at the top, editing modes, overlaid panels, …)."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:55
msgid "`editor/spatial_editor_gizmos.cpp <https://github.com/godotengine/godot/blob/3.x/editor/spatial_editor_gizmos.cpp>`__: Where the 3D editor gizmos are defined and drawn. This file doesn't have a 2D counterpart as 2D gizmos are drawn by the nodes themselves."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:60
msgid "Editor dependencies in ``scene/`` files"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:62
msgid "When working on an editor feature, you may have to modify files in Godot's GUI nodes, which you can find in the ``scene/`` folder."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:65
msgid "One rule to keep in mind is that you must **not** introduce new dependencies to ``editor/`` includes in other folders such as ``scene/``. This applies even if you use ``#ifdef TOOLS_ENABLED``."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:69
msgid "To make the codebase easier to follow and more self-contained, the allowed dependency order is:"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:72
msgid "``editor/`` -> ``scene/`` -> ``servers/`` -> ``core/``"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:74
msgid "This means that files in ``editor/`` can depend on includes from ``scene/``, ``servers/``, and ``core/``. But, for example, while ``scene/`` can depend on includes from ``servers/`` and ``core/``, it cannot depend on includes from ``editor/``."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:78
msgid "Currently, there are some dependencies to ``editor/`` includes in ``scene/`` files, but `they are in the process of being removed <https://github.com/godotengine/godot/issues/29730>`__."
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:83
msgid "Development tips"
msgstr ""

#: ../../docs/development/editor/introduction_to_editor_development.rst:85
msgid "To iterate quickly on the editor, we recommend to set up a test project and :ref:`open it from the command line <doc_command_line_tutorial>` after compiling the editor. This way, you don't have to go through the project manager every time you start Godot."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
