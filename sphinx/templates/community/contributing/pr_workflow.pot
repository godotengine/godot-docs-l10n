# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 16:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/community/contributing/pr_workflow.rst:4
msgid "Pull request workflow"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:8
msgid "The so-called \"PR workflow\" used by Godot is common to many projects using Git, and should be familiar to veteran free software contributors. The idea is that only a small number (if any) commit directly to the *master* branch. Instead, contributors *fork* the project (i.e. create a copy of it, which they can modify as they wish), and then use the GitHub interface to request a *pull* from one of their fork's branches to one branch of the original (often named *upstream*) repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:16
msgid "The resulting *pull request* (PR) can then be reviewed by other contributors, which might approve it, reject it, or most often request that modifications be done. Once approved, the PR can then be merged by one of the core developers, and its commit(s) will become part of the target branch (usually the *master* branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:22
msgid "We will go together through an example to show the typical workflow and associated Git commands. But first, let's have a quick look at the organization of Godot's Git repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:27
msgid "Git source repository"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:29
msgid "The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git <https://git-scm.com>`_ code repository together with an embedded issue tracker and PR system."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:33
msgid "If you are contributing to the documentation, its repository can be found `here <https://github.com/godotengine/godot-docs>`_."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:36
msgid "The Git version control system is the tool used to keep track of successive edits to the source code - to contribute efficiently to Godot, learning the basics of the Git command line is *highly* recommended. There exist some graphical interfaces for Git, but they usually encourage users to take bad habits regarding the Git and PR workflow, and we therefore recommend not to use them. In particular, we advise not to use GitHub's online editor for code contributions (although it's tolerated for small fixes or documentation changes) as it enforces one commit per file and per modification, which quickly leads to PRs with an unreadable Git history (especially after peer review)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:46
msgid "The first sections of Git's \"Book\" are a good introduction to the tool's philosophy and the various commands you need to master in your daily workflow. You can read them online on the `Git SCM <https://git-scm.com/book/en/v2>`_ website. You can also try out `GitHub's interactive guide <https://try.github.io/>`__."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:52
msgid "The branches on the Git repository are organized as follows:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:54
msgid "The ``master`` branch is where the development of the next major version occurs. As a development branch, it can be unstable and is not meant for use in production. This is where PRs should be done in priority."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:58
msgid "The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. They are used to backport bugfixes and enhancements from the ``master`` branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As a rule of thumb, the last stable branch is maintained until the next minor version (e.g. the ``3.0`` branch was maintained until the release of Godot 3.1). If you want to make PRs against a maintained stable branch, please check first if your changes are also relevant for the ``master`` branch, and if so make the PR for the ``master`` branch in priority. Release managers can then cherry-pick the fix to a stable branch if relevant."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:68
msgid "There might occasionally be feature branches, usually meant to be merged into the ``master`` branch at some time."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:72
msgid "Forking and cloning"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:74
msgid "The first step is to *fork* the `godotengine/godot <https://github.com/godotengine/godot>`_ repository on GitHub. To do so, you will need to have a GitHub account and to be logged in. In the top right corner of the repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:81
msgid "Click it, and after a while you should be redirected to your own fork of the Godot repo, with your GitHub username as namespace:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:86
msgid "You can then *clone* your fork, i.e. create a local copy of the online repository (in Git speak, the *origin remote*). If you haven't already, download Git from `its website <https://git-scm.com>`_ if you're using Windows or macOS, or install it through your package manager if you're using Linux."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:91
msgid "If you are on Windows, open Git Bash to type commands. macOS and Linux users can use their respective terminals."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:94
msgid "To clone your fork from GitHub, use the following command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:100
msgid "In our examples, the \"$\" character denotes the command line prompt on typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:104
msgid "After a little while, you should have a ``godot`` directory in your current working directory. Move into it using the ``cd`` command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:111
msgid "We will start by setting up a reference to the original repository that we forked:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:118
msgid "This will create a reference named ``upstream`` pointing to the original ``godotengine/godot`` repository. This will be useful when you want to pull new commits from its ``master`` branch to update your fork. You have another remote reference named ``origin``, which points to your fork (``USERNAME/godot``)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:123
msgid "You only need to do the above steps once, as long as you keep that local ``godot`` folder (which you can move around if you want, the relevant metadata is hidden in its ``.git`` subfolder)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:127
msgid "*Branch it, pull it, code it, stage it, commit, push it, rebase it... technologic.*"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:130
msgid "This bad take on Daft Punk's *Technologic* shows the general conception Git beginners have of its workflow: lots of strange commands to learn by copy and paste, hoping they will work as expected. And that's actually not a bad way to learn, as long as you're curious and don't hesitate to question your search engine when lost, so we will give you the basic commands to know when working in Git."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:138
msgid "In the following, we will assume as an example that you want to implement a feature in Godot's project manager, which is coded in the ``editor/project_manager.cpp`` file."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:143
msgid "Branching"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:145
msgid "By default, the ``git clone`` should have put you on the ``master`` branch of your fork (``origin``). To start your own feature development, we will create a feature branch:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:157
msgid "This command is equivalent:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:164
msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:170
msgid "You can see which branch you are currently on with the ``git branch`` command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:180
msgid "Be sure to always go back to the ``master`` branch before creating a new branch, as your current branch will be used as the base for the new one. Alternatively, you can specify a custom base branch after the new branch's name:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:189
msgid "Updating your branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:191
msgid "This would not be needed the first time (just after you forked the upstream repository). However, the next time you want to work on something, you will notice that your fork's ``master`` is several commits behind the upstream ``master`` branch: pull requests from other contributors would have been merged in the meantime."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:197
msgid "To ensure there won't be conflicts between the feature you develop and the current upstream ``master`` branch, you will have to update your branch by *pulling* the upstream branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:205
msgid "The ``--rebase`` argument will ensure that any local changes that you committed will be re-applied *on top* of the pulled branch, which is usually what we want in our PR workflow. This way, when you open a pull request, your own commits will be the only difference with the upstream ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:210
msgid "While rebasing, conflicts may arise if your commits modified code that has been changed in the upstream branch in the meantime. If that happens, Git will stop at the conflicting commit and will ask you to resolve the conflicts. You can do so with any text editor, then stage the changes (more on that later), and proceed with ``git rebase --continue``. Repeat the operation if later commits have conflicts too, until the rebase operation completes."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:217
msgid "If you're unsure about what is going on during a rebase and you panic (no worry, we all do the first few times), you can abort the rebase with ``git rebase --abort``. You will then be back to the original state of your branch before calling ``git pull --rebase``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:222
msgid "If you omit the ``--rebase`` argument, you will instead create a merge commit which tells Git what to make of the two distinct branches. If any conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:226
msgid "While this is a valid workflow and the default behavior of ``git pull``, merge commits within PRs are frowned upon in our PR workflow. We only use them when merging PRs into the upstream branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:230
msgid "The philosophy is that a PR should represent the final stage of the changes made to the codebase, and we are not interested in mistakes and fixes that would have been done in intermediate stages before merging. Git gives us great tools to \"rewrite the history\" and make it as if we got things right the first time, and we're happy to use it to ensure that changes are easy to review and understand long after they have been merged."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:237
msgid "If you have already created a merge commit without using ``rebase``, or have made any other changes that have resulted in undesired history, the best option is to use an *interactive rebase* on the upstream branch. See the :ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:242
msgid "If at any time you want to *reset* a local branch to a given commit or branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:246
msgid "Be warned that this will remove any changes that you might have committed in this branch. If you ever lose commits by mistake, use the ``git reflog`` command to find the commit ID of the previous state that you would like to restore, and use it as argument of ``git reset --hard`` to go back to that state."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:252
msgid "Making changes"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:254
msgid "You would then do your changes to our example's ``editor/project_manager.cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:258
msgid "By default, those changes are *unstaged*. The staging area is a layer between your working directory (where you make your modifications) and the local Git repository (the commits and all the metadata in the ``.git`` folder). To bring changes from the working directory to the Git repository, you need to *stage* them with the ``git add`` command, and then to commit them with the ``git commit`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:265
msgid "There are various commands you should know to review your current work, before staging it, while it is staged, and after it has been committed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:268
msgid "``git diff`` will show you the current unstaged changes, i.e. the differences between your working directory and the staging area."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:270
msgid "``git checkout -- <files>`` will undo the unstaged changes to the given files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:272
msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:273
msgid "``git diff --staged`` will show the current staged changes, i.e. the differences between the staging area and the last commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:275
msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:276
msgid "``git status`` will show you what are the currently staged and unstaged modifications."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:278
msgid "``git commit`` will commit the staged files. It will open a text editor (you can define the one you want to use with the ``GIT_EDITOR`` environment variable or the ``core.editor`` setting in your Git configuration) to let you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to write the log directly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:283
msgid "``git commit --amend`` lets you amend the last commit with your currently staged changes (added with ``git add``). This is the best option if you want to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:286
msgid "``git log`` will show you the last commits of your current branch. If you did local commits, they should be shown at the top."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:288
msgid "``git show`` will show you the changes of the last commit. You can also specify a commit hash to see the changes for that commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:291
msgid "That's a lot to memorize! Don't worry, just check this cheat sheet when you need to make changes, and learn by doing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:294
msgid "Here's how the shell history could look like on our example:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:326
msgid "With this, we should have two new commits in our ``better-project-manager`` branch which were not in the ``master`` branch. They are still only local though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:331
msgid "Pushing changes to a remote"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:333
msgid "That's where ``git push`` will come into play. In Git, a commit is always done in the local repository (unlike Subversion where a commit will modify the remote repository directly). You need to *push* the new commits to a remote branch to share them with the world. The syntax for this is:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:342
msgid "The part about the remote branch can be omitted if you want it to have the same name as the local branch, which is our case in this example, so we will do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:350
msgid "Git will ask you for your username and password, and the changes will be sent to your remote. If you check the fork's page on GitHub, you should see a new branch with your added commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:355
msgid "Issuing a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:357
msgid "When you load your fork's branch on GitHub, you should see a line saying *\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially some commits behind, if your ``master`` branch was out of sync with the upstream ``master`` branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:364
msgid "On that line, there is a \"Pull request\" link. Clicking it will open a form that will let you issue a pull request on the ``godotengine/godot`` upstream repository. It should show you your two commits, and state \"Able to merge\". If not (e.g. it has way more commits, or says there are merge conflicts), don't create the PR yet, something went wrong. Go to our `Godot Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:371
msgid "Use an explicit title for the PR and put the necessary details in the comment area. You can drag and drop screenshots, GIFs or zipped projects if relevant, to showcase what your work implements. Click \"Create a pull request\", and tadaa!"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:377
msgid "Modifying a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:379
msgid "While it is reviewed by other contributors, you will often need to make changes to your yet-unmerged PR, either because contributors requested them, or because you found issues yourself while testing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:383
msgid "The good news is that you can modify a pull request simply by acting on the branch you made the pull request from. You can e.g. make a new commit on that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:398
msgid "However, be aware that in our PR workflow, we favor commits that bring the codebase from one functional state to another functional state, without having intermediate commits fixing up bugs in your own code or style issues. Most of the time, we will prefer a single commit in a given PR (unless there's a good reason to keep the changes separate). Instead of authoring a new commit, consider using ``git commit --amend`` to amend the previous commit with your fixes. The above example would then become:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:428
msgid "The interactive rebase"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:430
msgid "If you didn't follow the above steps closely to *amend* changes into a commit instead of creating fixup commits, or if you authored your changes without being aware of our workflow and Git usage tips, reviewers might request of your to *rebase* your branch to *squash* some or all of the commits into one."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:435
msgid "Indeed, if some commits have been made following reviews to fix bugs, typos, etc. in the original commit, they are not relevant to a future changelog reader who would want to know what happened in the Godot codebase, or when and how a given file was last modified."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:440
msgid "To squash those extraneous commits into the main one, we will have to *rewrite history*. Right, we have that power. You may read that it's a bad practice, and it's true when it comes to branches of the upstream repo. But in your fork, you can do whatever you want, and everything is allowed to get neat PRs :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:445
msgid "We will use the *interactive rebase* ``git rebase -i`` to do this. This command takes a commit ID or a branch name as argument, and will let you modify all commits between that commit/branch and the last one in your working branch, the so-called ``HEAD``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:450
msgid "While you can give any commit ID to ``git rebase -i`` and review everything in between, the most common and convenient workflow involves rebasing on the upstream ``master`` branch, which you can do with:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:458
msgid "Referencing branches in Git is a bit tricky due to the distinction between remote and local branches. Here, ``upstream/master`` (with a `/`) is a local branch which has been pulled from the ``upstream`` remote's ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:463
msgid "Interactive rebases can only be done on local branches, so the `/` is important here. As the upstream remote changes frequently, your local ``upstream/master`` branch may become outdated, so you can update it with ``git fetch upstream master``. Contrarily to ``git pull --rebase upstream master`` which would update your currently checked out branch, ``fetch`` will only update the ``upstream/master`` reference (which is distinct from your local ``master`` branch... yes it's confusing, but you'll become familiar with this little by little)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:473
msgid "This will open a text editor (``vi`` by default, see `Git docs <https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to configure your favorite one) with something which may look like this:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:482
msgid "The editor will also show instructions regarding how you can act on those commits. In particular, it should tell you that \"pick\" means to use that commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* the commit in its parent commit. The difference between \"squash\" and \"fixup\" is that \"fixup\" will discard the commit log from the squashed commit. In our example, we are not interested in keeping the log of the \"Fix a typo\" commit, so we use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:495
msgid "Upon saving and quitting the editor, the rebase will occur. The second commit will be melded into the first one, and ``git log`` and ``git show`` should now confirm that you have only one commit with the changes from both previous commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:500
msgid "But! You rewrote the history, and now your local and remote branches have diverged. Indeed, commit 1b4aad7 in the above example will have changed, and therefore got a new commit hash. If you try to push to your remote branch, it will raise an error:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:514
msgid "This is a sane behavior, Git will not let you push changes that would override remote content. But that's actually what we want to do here, so we will have to *force* it:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:522
msgid "And tadaa! Git will happily *replace* your remote branch with what you had locally (so make sure that's what you wanted, using ``git log``). This will also update the PR accordingly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:527
msgid "Deleting a Git branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:529
msgid "After your pull request gets merged, there's one last thing you should do: delete your Git branch for the PR. There won't be issues if you don't delete your branch, but it's good practice to do so. You'll need to do this twice, once for the local branch and another for the remote branch on GitHub."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:534
msgid "To delete our better project manager branch locally, use this command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:540
msgid "Alternatively, if the branch hadn't been merged yet and we wanted to delete it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:543
msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:549
msgid "You can also delete the remote branch from the GitHub PR itself, a button should appear once it has been merged or closed."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
